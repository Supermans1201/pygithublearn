From fd7007ef21c50b1fb3b24d06ac63173b02832f5f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 24 Apr 2016 18:56:00 +0200
Subject: [PATCH] Avoid Price.toString() failing for certain values of
 numerator/denominator.

Fixes a regression introduced in 66cc533 (bugfix #479) in which the
numerator/denominator division fails with an ArithmeticException if no
MathContext is provided. BigDecimal tries to return an exact result,
which is not possible when rounding and precision aren't specified.

See BigDecimal javadoc:
http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html

Fixes Crashlitics issue #196
https://fabric.io/gnucash/android/apps/org.gnucash.android/issues/571b4a95ffcdc04250f98ba0
---
 .../main/java/org/gnucash/android/model/Price.java  |  3 ++-
 .../gnucash/android/test/unit/model/PriceTest.java  | 21 +++++++++++++++++++++
 2 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Price.java b/app/src/main/java/org/gnucash/android/model/Price.java
index df02d380..7fde8683 100644
--- a/app/src/main/java/org/gnucash/android/model/Price.java
+++ b/app/src/main/java/org/gnucash/android/model/Price.java
@@ -4,6 +4,7 @@
 
 
 import java.math.BigDecimal;
+import java.math.MathContext;
 import java.sql.Timestamp;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
@@ -156,6 +157,6 @@ public String toString() {
         BigDecimal denominator = new BigDecimal(mValueDenom);
         DecimalFormat formatter = (DecimalFormat) NumberFormat.getNumberInstance();
         formatter.setMaximumFractionDigits(6);
-        return formatter.format(numerator.divide(denominator));
+        return formatter.format(numerator.divide(denominator, MathContext.DECIMAL32));
     }
 }
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/PriceTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/PriceTest.java
index b9abc63e..93c9d862 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/PriceTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/PriceTest.java
@@ -23,6 +23,7 @@
 import java.util.Locale;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 
 public class PriceTest {
@@ -52,6 +53,26 @@ public void toString_shouldUseDefaultLocale() {
         assertThat(price.toString()).isEqualTo("1,234");
     }
 
+    /**
+     * BigDecimal throws an ArithmeticException if it can't represent exactly
+     * a result. This can happen with divisions like 1/3 if no precision and
+     * round mode is specified with a MathContext.
+     */
+    @Test
+    public void toString_shouldNotFailForInfinitelyLongDecimalExpansion() {
+        long numerator = 1;
+        long denominator = 3;
+        Price price = new Price();
+
+        price.setValueNum(numerator);
+        price.setValueDenom(denominator);
+        try {
+            price.toString();
+        } catch (ArithmeticException e) {
+            fail("The numerator/denominator division in Price.toString() should not fail.");
+        }
+    }
+
     @Test
     public void getNumerator_shouldReduceAutomatically() {
         long numerator = 1;
