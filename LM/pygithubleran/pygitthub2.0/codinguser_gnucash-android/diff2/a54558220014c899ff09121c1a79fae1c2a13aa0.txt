From a54558220014c899ff09121c1a79fae1c2a13aa0 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Mon, 31 Aug 2015 18:39:25 +0300
Subject: [PATCH] Added grouping by year

---
 .../android/ui/report/LineChartFragment.java       | 50 +++++++++++++++++-----
 1 file changed, 39 insertions(+), 11 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index 9c5a6863..90350863 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -48,9 +48,11 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.ui.report.ReportsActivity.GroupInterval;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalDateTime;
 import org.joda.time.Months;
+import org.joda.time.Years;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -97,6 +99,8 @@
     private boolean mChartDataPresent = true;
     private Currency mCurrency;
 
+    private GroupInterval mGroupInterval = GroupInterval.MONTH;
+
     /**
      * Reporting period start time
      */
@@ -180,9 +184,15 @@ private LineData getData(List<AccountType> accountTypeList) {
         }
         List<String> xValues = new ArrayList<>();
         while (!startDate.isAfter(endDate)) {
-            xValues.add(startDate.toString(X_AXIS_PATTERN));
-            Log.d(TAG, "X axis " + startDate.toString("MM yy"));
-            startDate = startDate.plusMonths(1);
+            if (mGroupInterval == GroupInterval.YEAR) {
+                xValues.add(startDate.toString(X_AXIS_PATTERN));
+                Log.w(TAG, "X axis " + startDate.toString("yy"));
+                startDate = startDate.plusYears(1);
+            } else {
+                xValues.add(startDate.toString(X_AXIS_PATTERN));
+                Log.d(TAG, "X axis " + startDate.toString("MM yy"));
+                startDate = startDate.plusMonths(1);
+            }
         }
 
         List<LineDataSet> dataSets = new ArrayList<>();
@@ -250,18 +260,36 @@ private LineData getEmptyData() {
         }
         Log.d(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
         Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
-        int months = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
-                latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+
+        int count = 0;
+        if (mGroupInterval == GroupInterval.YEAR) {
+            count = Years.yearsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
+                    latest.withDayOfMonth(1).withMillisOfDay(0)).getYears();
+        } else {
+            count = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
+                    latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+        }
 
         int offset = getXAxisOffset(accountType);
-        List<Entry> values = new ArrayList<>(months + 1);
-        for (int i = 0; i < months + 1; i++) {
-            long start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-            long end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+        List<Entry> values = new ArrayList<>(count + 1);
+        for (int i = 0; i < count + 1; i++) {
+            long start;
+            long end;
+            if (mGroupInterval == GroupInterval.YEAR) {
+                start = earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                end = earliest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                earliest = earliest.plusYears(1);
+            } else {
+                start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                earliest = earliest.plusMonths(1);
+            }
             float balance = (float) mAccountsDbAdapter.getAccountsBalance(accountUIDList, start, end).asDouble();
             values.add(new Entry(balance, i + offset));
             Log.d(TAG, accountType + earliest.toString(" MMM yyyy") + ", balance = " + balance);
-            earliest = earliest.plusMonths(1);
+
         }
 
         return values;
@@ -320,7 +348,7 @@ public void onTimeRangeUpdated(long start, long end) {
     }
 
     @Override
-    public void onGroupingUpdated(ReportsActivity.GroupInterval groupInterval) {
+    public void onGroupingUpdated(GroupInterval groupInterval) {
         //TODO: update chart
     }
 
