From 93d1aea6262aae55b434b7701402ec6c33c06cc1 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 8 Aug 2012 18:11:35 +0200
Subject: [PATCH] Added code documentation Some refactoring and cleanup

---
 .../src/org/gnucash/android/data/Transaction.java  | 102 +++++++++++++++++++--
 .../org/gnucash/android/db/AccountsDbAdapter.java  |   6 +-
 .../org/gnucash/android/db/DatabaseAdapter.java    |  14 +--
 .../gnucash/android/db/DatabaseCursorLoader.java   |  35 +++++++
 .../src/org/gnucash/android/db/DatabaseHelper.java |  85 ++++++++++++++++-
 .../gnucash/android/db/TransactionsDbAdapter.java  |  27 ++++--
 .../android/ui/accounts/AccountsActivity.java      |   9 +-
 .../android/ui/accounts/AccountsListFragment.java  |   4 +-
 .../src/org/gnucash/android/util/OfxFormatter.java |  23 ++++-
 .../android/util/OnAccountClickedListener.java     |  13 ++-
 .../android/util/OnTransactionClickedListener.java |  16 ++++
 11 files changed, 298 insertions(+), 36 deletions(-)

diff --git a/GnucashMobile/src/org/gnucash/android/data/Transaction.java b/GnucashMobile/src/org/gnucash/android/data/Transaction.java
index 474f97bd..d3c29f6c 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Transaction.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Transaction.java
@@ -25,29 +25,77 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
+import android.content.Intent;
+
 /**
- * Data model representation of a transaction
+ * Represents a financial transaction, either credit or debit.
+ * Transactions belong to accounts and each have the unique identifier of the account to which they belong.
+ * The default type is a debit, unless otherwise specified.
  * @author Ngewi Fet <ngewif@gmail.com>
- *
  */
 public class Transaction {
 	/**
 	 * Type of transaction, a credit or a debit
-	 * 
 	 */
 	public enum TransactionType {DEBIT, CREDIT};
 	
+	/**
+	 * Mime type for transactions in Gnucash. 
+	 * Used for recording transactions through intents
+	 */
 	public static final String MIME_TYPE 			= "vnd.android.cursor.item/vnd.org.gnucash.android.transaction";
+	
+	/**
+	 * Key for passing the account unique Identifier as an argument through an {@link Intent}
+	 */
 	public static final String EXTRA_ACCOUNT_UID 	= "org.gnucash.android.extra.account_uid";
+	
+	/**
+	 * Key for identifying the amount of the transaction through an Intent
+	 */
 	public static final String EXTRA_AMOUNT 		= "org.gnucash.android.extra.amount";
 	
+	/**
+	 * {@link Money} value of this transaction
+	 */
 	private Money mAmount;
+	
+	/**
+	 * Unique identifier of the transaction. 
+	 * This is automatically generated when the transaction is created.
+	 */
 	private String mTransactionUID;
+	
+	/**
+	 * Name describing the transaction
+	 */
 	private String mName;
+	
+	/**
+	 * An extra note giving details about the transaction
+	 */
 	private String mDescription = "";
+	
+	/**
+	 * Unique Identifier of the account to which this transaction belongs
+	 */
 	private String mAccountUID = null;
+	
+	/**
+	 * Flag indicating if this transaction has been exported before or not
+	 * The transactions are typically exported as bank statement in the OFX format
+	 */
 	private int mIsExported = 0;
+	
+	/**
+	 * Timestamp when this transaction occured
+	 */
 	private long mTimestamp;
+	
+	/**
+	 * Type of transaction, either credit or debit
+	 * @see TransactionType
+	 */
 	private TransactionType mType = TransactionType.DEBIT;
 	
 	/**
@@ -62,6 +110,12 @@ public Transaction(Money amount, String name) {
 		setAmount(amount); //takes care of setting the type for us
 	}
 	
+	/**
+	 * Overloaded constructor. Creates a new transaction instance with the 
+	 * provided data and initializes the rest to default values. 
+	 * @param amount Amount for the transaction as double
+	 * @param name Name of the transaction
+	 */
 	public Transaction(double amount, String name){
 		initDefaults();
 		setName(name);
@@ -107,7 +161,7 @@ private void initDefaults(){
 	
 	/**
 	 * Set the amount of this transaction
-	 * @param mAmount Amount of the transaction
+	 * @param amount Amount of the transaction
 	 */
 	public void setAmount(Money amount) {
 		this.mAmount = amount;
@@ -116,32 +170,52 @@ public void setAmount(Money amount) {
 
 	/**
 	 * Set the amount of this transaction
-	 * @param mAmount Amount of the transaction
+	 * @param amount Amount of the transaction
 	 */
 	public void setAmount(String amount) {
 		this.mAmount = new Money(amount);
 	}
 	
+	/**
+	 * Sets the amount and currency of the transaction
+	 * @param amount String containing number value of transaction amount
+	 * @param currencyCode ISO 4217 currency code
+	 */
 	public void setAmount(String amount, String currencyCode){
 		this.mAmount = new Money(new BigDecimal(amount),
 								 Currency.getInstance(currencyCode));
 	}
 	
+	/**
+	 * Sets the amount of the transaction
+	 * @param amount Amount value of the transaction
+	 */
 	public void setAmount(double amount){
 		setAmount(new Money(amount));
 	}
 	
+	/**
+	 * Sets the currency of the transaction
+	 * The currency remains in the object model and is not persisted to the database
+	 * Transactions always use the currency of their accounts
+	 * @param currency {@link Currency} of the transaction value
+	 */
 	public void setCurrency(Currency currency){		
 		mAmount = mAmount.withCurrency(currency);
 	}
 	
+	/**
+	 * Sets the amount of the transaction
+	 * @param amount Amount value of the transaction
+	 * @param currency {@link Currency} of the transaction
+	 */
 	public void setAmount(double amount, Currency currency){
 		this.mAmount = new Money(new BigDecimal(amount), currency);
 	}
 	
 	/**
 	 * Returns the amount involved in this transaction
-	 * @return Amount in the transaction
+	 * @return {@link Money} amount in the transaction
 	 */
 	public Money getAmount() {
 		return mAmount;
@@ -195,13 +269,17 @@ public void setTime(Date timestamp){
 		this.mTimestamp = timestamp.getTime();
 	}
 	
+	/**
+	 * Sets the time when the transaction occurred
+	 * @param timeInMillis Time in milliseconds
+	 */
 	public void setTime(long timeInMillis) {
 		this.mTimestamp = timeInMillis;
 	}
 	
 	/**
 	 * Returns the time of transaction in milliseconds
-	 * @return Time when transaction occured in milliseconds 
+	 * @return Time when transaction occurred in milliseconds 
 	 */
 	public long getTimeMillis(){
 		return mTimestamp;
@@ -248,10 +326,18 @@ public String getAccountUID() {
 		return mAccountUID;
 	}
 	
+	/**
+	 * Sets the exported flag on the transaction
+	 * @param isExported <code>true</code> if the transaction has been exported, <code>false</code> otherwise
+	 */
 	public void setExported(boolean isExported){
 		mIsExported = isExported ? 1 : 0;
 	}
 	
+	/**
+	 * Returns <code>true</code> if the transaction has been exported, <code>false</code> otherwise
+	 * @return <code>true</code> if the transaction has been exported, <code>false</code> otherwise
+	 */
 	public boolean isExported(){
 		return mIsExported == 1;
 	}
@@ -276,7 +362,7 @@ public Element toXml(Document doc){
 		type.appendChild(doc.createTextNode(mType.toString()));
 		transactionNode.appendChild(type);
 
-/* TODO Remove references to expenses
+/* TODO Include the date posted as the time of the transaction
 		Element datePosted = doc.createElement("DTPOSTED");
 		datePosted.appendChild(doc.createTextNode(Expenses.getFormattedCurrentTime(mTimestamp.getTime())));
 		transaction.appendChild(datePosted);
diff --git a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
index 782eb433..e026e831 100644
--- a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -44,7 +44,7 @@
 	private TransactionsDbAdapter mTransactionsAdapter;
 	
 	/**
-	 * Creates new instance
+	 * Constructor. Creates a new adapter instance using the application context
 	 * @param context Application context
 	 */
 	public AccountsDbAdapter(Context context) {
@@ -233,6 +233,10 @@ public String getName(long accountID) {
 		return accounts;
 	}
 	
+	/**
+	 * Returns a list of accounts which have transactions that have not been exported yet
+	 * @return List of {@link Account}s with unexported transactions
+	 */
 	public List<Account> getExportableAccounts(){
 		List<Account> accountsList = getAllAccounts();
 		Iterator<Account> it = accountsList.iterator();
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
index 3e85651d..96484e6a 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -36,11 +36,11 @@
 	protected static final String TAG = "DatabaseAdapter";
 	
 	//Column indices for the various columns in the database tables
-	//row_id, uid, name and type are common to both tables
-	public static final int COLUMN_ROW_ID = 0;
-	public static final int COLUMN_UID 	= 1;
-	public static final int COLUMN_NAME = 2;
-	public static final int COLUMN_TYPE = 3;
+	//row_id, uid, name and type are common to both tables 	
+	public static final int COLUMN_ROW_ID 	= 0;
+	public static final int COLUMN_UID 		= 1;
+	public static final int COLUMN_NAME 	= 2;
+	public static final int COLUMN_TYPE 	= 3;
 	
 	public static final int COLUMN_AMOUNT 		= 4;
 	public static final int COLUMN_DESCRIPTION 	= 5;
@@ -48,8 +48,8 @@
 	public static final int COLUMN_ACCOUNT_UID 	= 7;
 	public static final int COLUMN_EXPORTED 	= 8;
 	
-	public static final int COLUMN_CURRENCY_CODE = 1;
-	public static final int COLUMN_ACCOUNT_CURRENCY_CODE = 4;
+	public static final int COLUMN_CURRENCY_CODE 			= 1;
+	public static final int COLUMN_ACCOUNT_CURRENCY_CODE 	= 4;
 	
 	/**
 	 * {@link DatabaseHelper} for creating and opening the database
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseCursorLoader.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseCursorLoader.java
index e3a0f2e9..88dc7c73 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseCursorLoader.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseCursorLoader.java
@@ -20,18 +20,53 @@
 import android.database.Cursor;
 import android.support.v4.content.AsyncTaskLoader;
 
+/**
+ * Abstract base class for asynchronously loads records from a database and manages the cursor.
+ * In order to use this class, you must subclass it and implement the
+ * {@link #loadInBackground()} method to load the particular records from the database.
+ * Ideally, the database has {@link DatabaseAdapter} which is used for managing access to the 
+ * records from the database
+ * @author Ngewi Fet <ngewif@gmail.com>
+ * @see DatabaseAdapter
+ */
 public abstract class DatabaseCursorLoader extends AsyncTaskLoader<Cursor> {
+	/**
+	 * Cursor which will hold the loaded data set.
+	 * The cursor will be returned from the {@link #loadInBackground()} method
+	 */
 	private Cursor mCursor = null;
+	
+	/**
+	 * {@link DatabaseAdapter} which will be used to load the records from the database
+	 */
 	protected DatabaseAdapter mDatabaseAdapter = null;
+	
+	/**
+	 * A content observer which monitors the cursor and provides notifications when
+	 * the dataset backing the cursor changes. You need to register the oberserver on
+	 * your cursor using {@link #registerContentObserver(Cursor)}
+	 */
 	protected final ForceLoadContentObserver mObserver;
 	
+	/**
+	 * Constructor
+	 * Initializes the content observer
+	 * @param context Application context
+	 */
 	public DatabaseCursorLoader(Context context) {
 		super(context);
 		mObserver = new ForceLoadContentObserver();
 	}
 
+	/**
+	 * Asynchronously loads the results from the database. 
+	 */
 	public abstract Cursor loadInBackground();
 
+	/**
+	 * Registers the content observer for the cursor. 
+	 * @param cursor {@link Cursor} whose content is to be observed for changes
+	 */
 	protected void registerContentObserver(Cursor cursor){
 		cursor.registerContentObserver(mObserver);
 	}
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
index 1924c257..c0d442dd 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
@@ -21,32 +21,104 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
+/**
+ * Helper class for managing the SQLite database.
+ * Creates the database and handles upgrades
+ * @author Ngewi Fet <ngewif@gmail.com>
+ *
+ */
 public class DatabaseHelper extends SQLiteOpenHelper {
 	
+	/**
+	 * Tag for logging
+	 */
 	private static final String TAG = "DatabaseHelper";
 	
+	/**
+	 * Name of the database
+	 */
 	private static final String DATABASE_NAME = "gnucash_db";
+	
+	/**
+	 * Database version.
+	 * With any change to the database schema, this number must increase
+	 */
 	private static final int DATABASE_VERSION = 1;
 	
+	/**
+	 * Name of accounts table
+	 */
 	public static final String ACCOUNTS_TABLE_NAME 		= "accounts";
+	
+	/**
+	 * Name of transactions table
+	 */
 	public static final String TRANSACTIONS_TABLE_NAME 	= "transactions";
-	public static final String CURRENCIES_TABLE_NAME 	= "currencies";
 	
+	/**
+	 * Name of the row ID of database records
+	 * All tables in the database have this column as the first.
+	 * The name must be prefixed with an underscore to allow for Android optimizations
+	 */
 	public static final String KEY_ROW_ID 	= "_id";
+	
+	/**
+	 * Name column in the database.
+	 * Currently used by all tables
+	 */
 	public static final String KEY_NAME 	= "name";
+	
+	/**
+	 * Unique Identifier.
+	 */
 	public static final String KEY_UID 		= "uid";
+	
+	/**
+	 * Type database column
+	 */
 	public static final String KEY_TYPE 	= "type";
+	
+	/**
+	 * Currency code database column. 
+	 * Acceptable currency codes are specified by the ISO 4217 standard
+	 */
 	public static final String KEY_CURRENCY_CODE = "currency_code";
 	
+	/**
+	 * Transaction amount database column
+	 */
 	public static final String KEY_AMOUNT 		= "amount";
+	
+	/**
+	 * Account unique identifier database column
+	 * This associates transactions to accounts
+	 */
 	public static final String KEY_ACCOUNT_UID 	= "account_uid";
+	
+	/**
+	 * Transaction description database column
+	 */
 	public static final String KEY_DESCRIPTION 	= "description";
+	
+	/**
+	 * Transaction timestamp database column
+	 * Entries in this column indicate when the transaction was created
+	 */
 	public static final String KEY_TIMESTAMP 	= "timestamp";
+	
+	/**
+	 * Flag for exported transactions in the database
+	 */
 	public static final String KEY_EXPORTED		= "is_exported";
 	
-	//if you modify the order of the columns, 
+	/**********************************************************************************************************
+	//if you modify the order of the columns (i.e. the way they are created), 
 	//make sure to modify the indices in DatabaseAdapter
-
+	**********************************************************************************************************/
+	
+	/**
+	 * SQL statement to create the accounts table in the database
+	 */
 	private static final String ACCOUNTS_TABLE_CREATE = "create table " + ACCOUNTS_TABLE_NAME + " ("
 			+ KEY_ROW_ID + " integer primary key autoincrement, "
 			+ KEY_UID 	+ " varchar(255) not null, "
@@ -56,6 +128,9 @@
 			+ "UNIQUE (" + KEY_UID + ")"	
 			+ ");";
 	
+	/**
+	 * SQL statement to create the transactions table in the database
+	 */
 	private static final String TRANSACTIONS_TABLE_CREATE = "create table " + TRANSACTIONS_TABLE_NAME + " ("
 			+ KEY_ROW_ID 	+ " integer primary key autoincrement, "
 			+ KEY_UID 		+ " varchar(255) not null, "			
@@ -70,6 +145,10 @@
 			+ "UNIQUE (" 		+ KEY_UID + ") " 
 			+ ");";
 
+	/**
+	 * Constructor
+	 * @param context Application context
+	 */
 	public DatabaseHelper(Context context){
 		super(context, DATABASE_NAME, null, DATABASE_VERSION);		
 	}
diff --git a/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java
index ca913363..17ed2fda 100644
--- a/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -33,7 +33,7 @@
 /**
  * Manages persistence of {@link Transaction}s in the database
  * Handles adding, modifying and deleting of transaction records.
- * @author Ngewi Fet <ngewif@gmail.com 
+ * @author Ngewi Fet <ngewif@gmail.com> 
  * 
  */
 public class TransactionsDbAdapter extends DatabaseAdapter {
@@ -50,7 +50,7 @@ public TransactionsDbAdapter(Context context) {
 	/**
 	 * Adds an transaction to the database. 
 	 * If a transaction already exists in the database with the same unique ID, 
-	 * then just update that transaction.
+	 * then the record will just be updated instead
 	 * @param transaction {@link Transaction} to be inserted to database
 	 * @return Database row ID of the inserted transaction
 	 */
@@ -178,17 +178,20 @@ public Transaction buildTransactionInstance(Cursor c){
 	}
 
 	/**
-	 * @param accountUID
-	 * @return
+	 * Returns the currency code (according to the ISO 4217 standard) of the account 
+	 * with unique Identifier <code>accountUID</code>
+	 * @param accountUID Unique Identifier of the account
+	 * @return Currency code of the account
+	 * @see #getCurrencyCode(long)
 	 */
-	protected String getCurrencyCode(String accountUID) {
+	public String getCurrencyCode(String accountUID) {
 		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
 				new String[] {DatabaseHelper.KEY_CURRENCY_CODE}, 
 				DatabaseHelper.KEY_UID + "= '" + accountUID + "'", 
 				null, null, null, null);
 		
 		if (cursor == null || cursor.getCount() <= 0)
-			return "";
+			return null;
 					
 		cursor.moveToNext();
 		String currencyCode = cursor.getString(0);
@@ -196,6 +199,13 @@ protected String getCurrencyCode(String accountUID) {
 		return currencyCode;
 	}
 	
+	/**
+	 * Returns the currency code (ISO 4217) used by the account with id <code>accountId</code>
+	 * If you do not have the database record Id, you can call {@link #getAccountID(String)} instead.
+	 * @param accountId Database record id of the account 
+	 * @return Currency code of the account with Id <code>accountId</code>
+	 * @see #getCurrencyCode(String)
+	 */
 	public String getCurrencyCode(long accountId){
 		String accountUID = getAccountUID(accountId);
 		return getCurrencyCode(accountUID);
@@ -361,6 +371,11 @@ public String getAccountUID(long acountRowID){
 		return uid;
 	}
 
+	/**
+	 * Returns the database row Id of the account with unique Identifier <code>accountUID</code>
+	 * @param accountUID Unique identifier of the account
+	 * @return Database row ID of the account
+	 */
 	public long getAccountID(String accountUID){
 		long id = -1;
 		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index dae4f989..5392dc70 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -55,9 +55,7 @@
 public class AccountsActivity extends SherlockFragmentActivity implements OnAccountClickedListener {
 
 	public static final String FRAGMENT_ACCOUNTS_LIST 	= "accounts_list";
-	
-	static final int DIALOG_ADD_ACCOUNT 		= 0x01;
-
+		
 	protected static final String TAG = "AccountsActivity";	
 	
 	private ArrayList<Integer> mSelectedDefaultAccounts = new ArrayList<Integer>();
@@ -184,10 +182,9 @@ public void onClick(DialogInterface dialog, int which) {
 		mDefaultAccountsDialog = builder.create();
 		mDefaultAccountsDialog.show();		
 	}
-	
-	
+		
 	@Override
-	public void accountSelected(long accountRowId, String accountName) {
+	public void accountSelected(long accountRowId) {
 		Intent intent = new Intent(this, TransactionsActivity.class);
 		intent.setAction(Intent.ACTION_VIEW);
 		intent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountRowId);
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index 9428318a..23f7d887 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -225,9 +225,7 @@ public void onListItemClick(ListView l, View v, int position, long id) {
 			selectItem(position);
 			return;
 		}
-		TextView tv = (TextView) v.findViewById(R.id.account_name);
-		String name = tv.getText().toString();
-		mAccountSelectedListener.accountSelected(id, name);
+		mAccountSelectedListener.accountSelected(id);
 	}	
 	
 	@Override
diff --git a/GnucashMobile/src/org/gnucash/android/util/OfxFormatter.java b/GnucashMobile/src/org/gnucash/android/util/OfxFormatter.java
index 145aa977..49679615 100644
--- a/GnucashMobile/src/org/gnucash/android/util/OfxFormatter.java
+++ b/GnucashMobile/src/org/gnucash/android/util/OfxFormatter.java
@@ -38,6 +38,9 @@
  */
 public class OfxFormatter {
 
+	/**
+	 * A date formatter used when creating file names for the exported data
+	 */
 	public final static SimpleDateFormat ofxDateFormatter = new SimpleDateFormat("yyyyMMddHHmmss");
 	
 	/**
@@ -56,7 +59,15 @@
 	 */
 	private List<Account> mAccountsList;
 	
+	/**
+	 * Flag indicating whether to ignore the 'exported' on transactions
+	 * If set to true, then all transactions will be exported, regardless of whether they were exported previously
+	 */
 	private boolean mExportAll = false;
+	
+	/**
+	 * Reference to the application context
+	 */
 	private Context mContext;
 	
 	/**
@@ -72,10 +83,20 @@ public OfxFormatter(Context context, boolean exportAll) {
 		mContext = context;
 	}
 	
+	/**
+	 * Returns the current time formatted using the pattern in {@link #ofxDateFormatter}
+	 * @return Current time as a formatted string
+	 * @see #getFormattedCurrentTime(long)
+	 */
 	public static String getFormattedCurrentTime(){
 		return getFormattedCurrentTime(System.currentTimeMillis());
 	}
 	
+	/**
+	 * Returns a formatted string representation of time in <code>milliseconds</code>
+	 * @param milliseconds Long value representing the time to be formatted
+	 * @return Formatted string representation of time in <code>milliseconds</code>
+	 */
 	public static String getFormattedCurrentTime(long milliseconds){
 		Date date = new Date(milliseconds);
 		String dateString = ofxDateFormatter.format(date);
@@ -88,7 +109,7 @@ public static String getFormattedCurrentTime(long milliseconds){
 	
 	/**
 	 * Converts all expenses into OFX XML format and adds them to the XML document
-	 * @param doc DOM document of the OFX expenses
+	 * @param doc DOM document of the OFX expenses.
 	 * @param parent Parent node for all expenses in report
 	 */
 	public void toXml(Document doc, Element parent){
diff --git a/GnucashMobile/src/org/gnucash/android/util/OnAccountClickedListener.java b/GnucashMobile/src/org/gnucash/android/util/OnAccountClickedListener.java
index 127f5e68..c463a342 100644
--- a/GnucashMobile/src/org/gnucash/android/util/OnAccountClickedListener.java
+++ b/GnucashMobile/src/org/gnucash/android/util/OnAccountClickedListener.java
@@ -16,8 +16,19 @@
 
 package org.gnucash.android.util;
 
+/**
+ * Interface for implemented by activities which wish to be notified when
+ * an action on account has been requested
+ * This is typically used for Fragment-to-Activity communication
+ * 
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
 public interface OnAccountClickedListener {
 
-	public void accountSelected(long accountRowId, String accountName);
+	/**
+	 * Callback when an account is selected (clicked) from in a list of accounts
+	 * @param accountRowId Database row ID of the selected account
+	 */
+	public void accountSelected(long accountRowId);
 	
 }
diff --git a/GnucashMobile/src/org/gnucash/android/util/OnTransactionClickedListener.java b/GnucashMobile/src/org/gnucash/android/util/OnTransactionClickedListener.java
index a07f2533..5bd601c1 100644
--- a/GnucashMobile/src/org/gnucash/android/util/OnTransactionClickedListener.java
+++ b/GnucashMobile/src/org/gnucash/android/util/OnTransactionClickedListener.java
@@ -16,9 +16,25 @@
 
 package org.gnucash.android.util;
 
+/**
+ * Interface for implemented by activities which wish to be notified when
+ * an action has been requested on a transaction (either creation or edit)
+ * This is typically used for Fragment-to-Activity communication
+ * 
+ * @author Ngewi Fet <ngewif@gmail.com>
+ *
+ */
 public interface OnTransactionClickedListener {
 
+	/**
+	 * Callback for creating a new transaction
+	 * @param accountRowId Database row ID of the account in which to create the new transaction
+	 */
 	public void createNewTransaction(long accountRowId);
 	
+	/**
+	 * Callback request to edit a transaction
+	 * @param transactionId Database row Id of the transaction to be edited
+	 */
 	public void editTransaction(long transactionId);	
 }
