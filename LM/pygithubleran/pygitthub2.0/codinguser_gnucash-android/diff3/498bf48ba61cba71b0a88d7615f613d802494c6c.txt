From 498bf48ba61cba71b0a88d7615f613d802494c6c Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 29 Aug 2014 21:53:07 +0800
Subject: [PATCH] Bulk import of GnuCash XML file

Reduce import time to about 1/3 .
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  71 +++++++++++---
 .../org/gnucash/android/db/SplitsDbAdapter.java    |  59 ++++++++++--
 .../gnucash/android/db/TransactionsDbAdapter.java  |  64 +++++++++++--
 .../gnucash/android/importer/GncXmlHandler.java    | 102 +++++++++++++++++++--
 .../gnucash/android/importer/GncXmlImporter.java   |   6 +-
 5 files changed, 263 insertions(+), 39 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index adc13d79..ed3df1a0 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -21,6 +21,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
@@ -86,17 +87,9 @@ public long addAccount(Account account){
         contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,           account.getParentUID());
         contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
 
-        long rowId = -1;
-		if ((rowId = getAccountID(account.getUID())) > 0){
-			//if account already exists, then just update
-			Log.d(TAG, "Updating existing account");
-			mDb.update(AccountEntry.TABLE_NAME, contentValues,
-                    AccountEntry._ID + " = " + rowId, null);
-		} else {
-			Log.d(TAG, "Adding new account to db");
-			rowId = mDb.insert(AccountEntry.TABLE_NAME, null, contentValues);
-		}
-		
+        Log.d(TAG, "Replace account to db");
+        long rowId =  mDb.replace(AccountEntry.TABLE_NAME, null, contentValues);
+
 		//now add transactions if there are any
 		if (rowId > 0){
             //update the fully qualified account name
@@ -109,6 +102,62 @@ public long addAccount(Account account){
 	}
 
     /**
+     * Adds some accounts to the database.
+     * If an account already exists in the database with the same unique ID,
+     * then just update that account. This function will NOT try to determine the full name
+     * of the accounts inserted, full names should be generated prior to the insert.
+     * All or none of the accounts will be inserted;
+     * @param accountList {@link Account} to be inserted to database
+     * @return number of rows inserted
+     */
+    public long bulkAddAccounts(List<Account> accountList){
+        long nRow = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + AccountEntry.TABLE_NAME + " ( "
+                    + AccountEntry.COLUMN_UID 	            + " , "
+                    + AccountEntry.COLUMN_NAME 	            + " , "
+                    + AccountEntry.COLUMN_TYPE              + " , "
+                    + AccountEntry.COLUMN_CURRENCY          + " , "
+                    + AccountEntry.COLUMN_COLOR_CODE        + " , "
+                    + AccountEntry.COLUMN_FAVORITE 		    + " , "
+                    + AccountEntry.COLUMN_FULL_NAME 	    + " , "
+                    + AccountEntry.COLUMN_PLACEHOLDER           + " , "
+                    + AccountEntry.COLUMN_PARENT_ACCOUNT_UID    + " , "
+                    + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID   + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");
+            for (Account account:accountList) {
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1, account.getUID());
+                replaceStatement.bindString(2, account.getName());
+                replaceStatement.bindString(3, account.getAccountType().name());
+                replaceStatement.bindString(4, account.getCurrency().getCurrencyCode());
+                if (account.getColorHexCode() != null) {
+                    replaceStatement.bindString(5, account.getColorHexCode());
+                }
+                replaceStatement.bindLong(6, account.isFavorite() ? 1 : 0);
+                replaceStatement.bindString(7, account.getFullName());
+                replaceStatement.bindLong(8, account.isPlaceholderAccount() ? 1 : 0);
+                if (account.getParentUID() != null) {
+                    replaceStatement.bindString(9, account.getParentUID());
+                }
+                if (account.getDefaultTransferAccountUID() != null) {
+                    replaceStatement.bindString(10, account.getDefaultTransferAccountUID());
+                }
+                Log.d(TAG, "Replacing account in db");
+                replaceStatement.execute();
+                nRow ++;
+            }
+            mDb.setTransactionSuccessful();
+        }
+        catch (Exception e){
+            nRow = 0;
+        }
+        finally {
+            mDb.endTransaction();
+        }
+        return nRow;
+    }
+    /**
      * Marks all transactions for a given account as exported
      * @param accountUID Unique ID of the record to be marked as exported
      * @return Number of records marked as exported
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index 591ae754..d6c72dec 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -21,6 +21,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
@@ -64,16 +65,8 @@ public long addSplit(Split split){
         contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, split.getAccountUID());
         contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, split.getTransactionUID());
 
-        long rowId = -1;
-        if ((rowId = getID(split.getUID())) > 0){
-            //if split already exists, then just update
-            Log.d(TAG, "Updating existing transaction split");
-            mDb.update(SplitEntry.TABLE_NAME, contentValues,
-                    SplitEntry._ID + " = " + rowId, null);
-        } else {
-            Log.d(TAG, "Adding new transaction split to db");
-            rowId = mDb.insert(SplitEntry.TABLE_NAME, null, contentValues);
-        }
+        Log.d(TAG, "Replace transaction split in db");
+        long rowId = mDb.replace(SplitEntry.TABLE_NAME, null, contentValues);
 
         //when a split is updated, we want mark the transaction as not exported
         updateRecord(TransactionEntry.TABLE_NAME, getTransactionID(split.getTransactionUID()),
@@ -82,6 +75,52 @@ public long addSplit(Split split){
     }
 
     /**
+     * Adds some splits to the database.
+     * If the split already exists, then it is simply updated.
+     * This function will NOT update the exported status of corresponding transactions.
+     * All or none of the splits will be inserted/updated into the database.
+     * @param splitList {@link org.gnucash.android.model.Split} to be recorded in DB
+     * @return Number of records of the newly saved split
+     */
+    public long bulkAddSplits(List<Split> splitList){
+        long nRow = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + SplitEntry.TABLE_NAME + " ( "
+                    + SplitEntry.COLUMN_UID             + " , "
+                    + SplitEntry.COLUMN_MEMO 	        + " , "
+                    + SplitEntry.COLUMN_TYPE            + " , "
+                    + SplitEntry.COLUMN_AMOUNT          + " , "
+                    + SplitEntry.COLUMN_ACCOUNT_UID 	+ " , "
+                    + SplitEntry.COLUMN_TRANSACTION_UID + " ) VALUES ( ? , ? , ? , ? , ? , ? ) ");
+            for (Split split : splitList) {
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1, split.getUID());
+                if (split.getMemo() != null) {
+                    replaceStatement.bindString(2, split.getMemo());
+                }
+                replaceStatement.bindString(3, split.getType().name());
+                replaceStatement.bindString(4, split.getAmount().absolute().toPlainString());
+                replaceStatement.bindString(5, split.getAccountUID());
+                replaceStatement.bindString(6, split.getTransactionUID());
+
+                Log.d(TAG, "Replacing transaction split in db");
+                replaceStatement.execute();
+                nRow++;
+            }
+            mDb.setTransactionSuccessful();
+        }
+        catch(Exception e) {
+            nRow = 0;
+        }
+        finally {
+            mDb.endTransaction();
+        }
+
+        return nRow;
+    }
+
+    /**
      * Builds a split instance from the data pointed to by the cursor provided
      * <p>This method will not move the cursor in any way. So the cursor should already by pointing to the correct entry</p>
      * @param cursor Cursor pointing to transaction record in database
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index c532f716..8b69761f 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -82,15 +82,8 @@ public long addTransaction(Transaction transaction){
         contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
         contentValues.put(TransactionEntry.COLUMN_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
 
-		long rowId = -1;
-		if ((rowId = fetchTransactionWithUID(transaction.getUID())) > 0){
-			//if transaction already exists, then just update
-			Log.d(TAG, "Updating existing transaction");
-			mDb.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry._ID + " = " + rowId, null);
-		} else {
-			Log.d(TAG, "Adding new transaction to db");
-			rowId = mDb.insert(TransactionEntry.TABLE_NAME, null, contentValues);
-		}	
+        Log.d(TAG, "Replacing transaction in db");
+        long rowId = mDb.replace(TransactionEntry.TABLE_NAME, null, contentValues);
 
         if (rowId > 0){
             Log.d(TAG, "Adding splits for transaction");
@@ -103,6 +96,59 @@ public long addTransaction(Transaction transaction){
 	}
 
     /**
+     * Adds an several transactions to the database.
+     * If a transaction already exists in the database with the same unique ID,
+     * then the record will just be updated instead. Recurrence Transactions will not
+     * be inserted, instead schedule Transaction would be called. If an exception
+     * occurs, no transaction would be inserted.
+     * @param transactionList {@link Transaction} transactions to be inserted to database
+     * @return Number of transactions inserted
+     */
+    public long bulkAddTransactions(List<Transaction> transactionList){
+        List<Split> splitList = new ArrayList<Split>(transactionList.size()*3);
+        long rowInserted = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + TransactionEntry.TABLE_NAME + " ( "
+                + TransactionEntry.COLUMN_UID 		    + " , "
+                + TransactionEntry.COLUMN_DESCRIPTION   + " , "
+                + TransactionEntry.COLUMN_NOTES         + " , "
+                + TransactionEntry.COLUMN_TIMESTAMP     + " , "
+                + TransactionEntry.COLUMN_EXPORTED      + " , "
+                + TransactionEntry.COLUMN_CURRENCY      + " ) VALUES ( ? , ? , ? , ? , ? , ?)");
+            for (Transaction transaction : transactionList) {
+                if (transaction.getRecurrencePeriod() > 0) {
+                    scheduleTransaction(transaction);
+                    continue;
+                }
+                Log.d(TAG, "Replacing transaction in db");
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1, transaction.getUID());
+                replaceStatement.bindString(2, transaction.getDescription());
+                replaceStatement.bindString(3, transaction.getNote());
+                replaceStatement.bindLong(4, transaction.getTimeMillis());
+                replaceStatement.bindLong(5, transaction.isExported() ? 1 : 0);
+                replaceStatement.bindString(6, transaction.getCurrencyCode());
+                //replaceStatement.bindLong(7, transaction.getRecurrencePeriod());
+                replaceStatement.execute();
+                rowInserted ++;
+                splitList.addAll(transaction.getSplits());
+            }
+            mDb.setTransactionSuccessful();
+        }
+        catch (Exception e) {
+            rowInserted = 0;
+        }
+        finally {
+            mDb.endTransaction();
+        }
+        if (rowInserted != 0 && !splitList.isEmpty()) { // TODO: clear empty transactions
+            mSplitsDbAdapter.bulkAddSplits(splitList);
+        }
+        return rowInserted;
+    }
+
+    /**
 	 * Fetch a transaction from the database which has a unique ID <code>uid</code>
 	 * @param uid Unique Identifier of transaction to be retrieved
 	 * @return Database row ID of transaction with UID <code>uid</code>
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index af8d8bde..15c8d872 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -30,7 +30,11 @@
 
 import java.text.ParseException;
 import java.util.Currency;
+import java.util.HashMap;
+import java.util.Stack;
 import java.util.regex.Pattern;
+import java.util.List;
+import java.util.ArrayList;
 
 /**
  * Handler for parsing the GnuCash XML file.
@@ -66,11 +70,21 @@
     Account mAccount;
 
     /**
+     * All the accounts found in a file to be imported, used for bulk import mode
+     */
+    List<Account> mAccountList;
+
+    /**
      * Transaction instance which will be built for each transaction found
      */
     Transaction mTransaction;
 
     /**
+     * All the transaction instances found in a file to be inserted, used in bulk mode
+     */
+    List<Transaction> mTransactionList;
+
+    /**
      * Accumulate attributes of splits found in this object
      */
     Split mSplit;
@@ -80,6 +94,11 @@
      */
     String mIgnoreElement = null;
 
+    /**
+     * Showing whether we are in bulk import mode
+     */
+    boolean mBulk = false;
+
     boolean mInColorSlot        = false;
     boolean mInPlaceHolderSlot  = false;
     boolean mInFavoriteSlot     = false;
@@ -92,10 +111,23 @@
     private TransactionsDbAdapter mTransactionsDbAdapter;
 
     public GncXmlHandler(Context context) {
+        init(context, false);
+    }
+
+    public GncXmlHandler(Context context, boolean bulk) {
+        init(context, bulk);
+    }
+
+    private void init(Context context, boolean bulk) {
         mContext = context;
         mAccountsDbAdapter = new AccountsDbAdapter(mContext);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mContext);
         mContent = new StringBuilder();
+        mBulk = bulk;
+        if (bulk) {
+            mAccountList = new ArrayList<Account>();
+            mTransactionList = new ArrayList<Transaction>();
+        }
     }
 
     /**
@@ -181,9 +213,13 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
-            Log.d(LOG_TAG, "Saving account...");
-            mAccountsDbAdapter.addAccount(mAccount);
-
+            if (mBulk) {
+                mAccountList.add(mAccount);
+            }
+            else {
+                Log.d(LOG_TAG, "Saving account...");
+                mAccountsDbAdapter.addAccount(mAccount);
+            }
             mAccount = null;
             //reset ISO 4217 flag for next account
             mISO4217Currency = false;
@@ -302,10 +338,15 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
-            if (mTransaction.getRecurrencePeriod() > 0){ //TODO: Fix this when scheduled actions are expanded
-                mTransactionsDbAdapter.scheduleTransaction(mTransaction);
-            } else {
-                mTransactionsDbAdapter.addTransaction(mTransaction);
+            if (mBulk) {
+                mTransactionList.add(mTransaction);
+            }
+            else {
+                if (mTransaction.getRecurrencePeriod() > 0) { //TODO: Fix this when scheduled actions are expanded
+                    mTransactionsDbAdapter.scheduleTransaction(mTransaction);
+                } else {
+                    mTransactionsDbAdapter.addTransaction(mTransaction);
+                }
             }
             mTransaction = null;
         }
@@ -322,8 +363,53 @@ public void characters(char[] chars, int start, int length) throws SAXException
     @Override
     public void endDocument() throws SAXException {
         super.endDocument();
+        if (mBulk) {
+            HashMap<String, Account> map = new HashMap<String, Account>(mAccountList.size());
+            HashMap<String, String> mapFullName = new HashMap<String, String>(mAccountList.size());
+            for(Account account:mAccountList) {
+                map.put(account.getUID(), account);
+                mapFullName.put(account.getUID(), null);
+            }
+            java.util.Stack<Account> stack = new Stack<Account>();
+            for (Account account:mAccountList){
+                if (mapFullName.get(account.getUID()) != null) {
+                    continue;
+                }
+                stack.push(account);
+                String parentAccountFullName = null;
+                while (!stack.isEmpty()) {
+                    Account acc = stack.peek();
+                    if (acc.getAccountType().name().equals("ROOT")) {
+                        mapFullName.put(acc.getUID(), "");
+                        stack.pop();
+                        parentAccountFullName = "";
+                        continue;
+                    }
+                    if (mapFullName.get(acc.getParentUID()) == null) {
+                        stack.push(map.get(acc.getParentUID()));
+                        continue;
+                    }
+                    else {
+                        parentAccountFullName = mapFullName.get(acc.getParentUID());
+                    }
+                    if (parentAccountFullName != null) {
+                        parentAccountFullName = parentAccountFullName.length() == 0 ? acc.getName() :
+                                (parentAccountFullName + AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
+                        mapFullName.put(acc.getUID(), parentAccountFullName);
+                        stack.pop();
+                    }
+                }
+            }
+            for (Account account:mAccountList){
+                account.setFullName(mapFullName.get(account.getUID()));
+            }
+            long startTime = System.nanoTime();
+            mAccountsDbAdapter.bulkAddAccounts(mAccountList);
+            mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
+            long endTime = System.nanoTime();
+            Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
+        }
         mAccountsDbAdapter.close();
         mTransactionsDbAdapter.close();
     }
-
 }
diff --git a/app/src/org/gnucash/android/importer/GncXmlImporter.java b/app/src/org/gnucash/android/importer/GncXmlImporter.java
index 068322d3..424f4e4e 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImporter.java
@@ -17,6 +17,7 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.XMLReader;
@@ -70,8 +71,11 @@ public static void parse(Context context, InputStream gncXmlInputStream) throws
 
         //TODO: Set an error handler which can log errors
 
-        GncXmlHandler handler = new GncXmlHandler(context);
+        GncXmlHandler handler = new GncXmlHandler(context, true);
         xr.setContentHandler(handler);
+        long startTime = System.nanoTime();
         xr.parse(new InputSource(bos));
+        long endTime = System.nanoTime();
+        Log.d("Import", String.format("%d ns spent on importing the file", endTime-startTime));
     }
 }
