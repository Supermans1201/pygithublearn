From 42817b593849fdb1853d724337c33836200d1e8e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 4 Aug 2016 18:33:55 +0200
Subject: [PATCH 1/2] Fix setting Recurrence.mPeriodEnd from
 ScheduledAction.setEndTime().

---
 .../org/gnucash/android/model/ScheduledAction.java  |  2 +-
 .../test/unit/model/ScheduledActionTest.java        | 21 +++++++++++++++++++++
 2 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 8bb062f7..e3a9a15d 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -213,7 +213,7 @@ public long getEndTime() {
     public void setEndTime(long endDate) {
         this.mEndDate = endDate;
         if (mRecurrence != null){
-            mRecurrence.setPeriodStart(new Timestamp(mEndDate));
+            mRecurrence.setPeriodEnd(new Timestamp(mEndDate));
         }
     }
 
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java
index f4bf0af5..1673d1f7 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java
@@ -52,6 +52,27 @@ public void settingStartTime_shouldSetRecurrenceStart(){
     }
 
     @Test
+    public void settingEndTime_shouldSetRecurrenceEnd(){
+        ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
+        Calendar calendar = Calendar.getInstance();
+        calendar.set(2014, 8, 26);
+        long endTime = calendar.getTimeInMillis();
+        scheduledAction.setEndTime(endTime);
+        assertThat(scheduledAction.getRecurrence()).isNull();
+
+        Recurrence recurrence = new Recurrence(PeriodType.MONTH);
+        assertThat(recurrence.getPeriodEnd()).isNull();
+        scheduledAction.setRecurrence(recurrence);
+        assertThat(recurrence.getPeriodEnd().getTime()).isEqualTo(endTime);
+
+        calendar.clear();
+        calendar.set(2015, 6, 6);
+        long newEndTime = calendar.getTimeInMillis();
+        scheduledAction.setEndTime(newEndTime);
+        assertThat(recurrence.getPeriodEnd().getTime()).isEqualTo(newEndTime);
+    }
+
+    @Test
     public void settingRecurrence_shouldSetScheduledActionStartTime(){
         ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.BACKUP);
         assertThat(scheduledAction.getStartTime()).isEqualTo(0);

From 9ff7e02c8cb51aa28efde2b847cf73a5498184f4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 4 Aug 2016 18:50:33 +0200
Subject: [PATCH 2/2] refactoring: make getting the time for the tests simpler.

---
 .../test/unit/model/ScheduledActionTest.java       | 36 ++++++++++------------
 1 file changed, 16 insertions(+), 20 deletions(-)

diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java
index 1673d1f7..3c298cee 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/ScheduledActionTest.java
@@ -33,9 +33,7 @@
     @Test
     public void settingStartTime_shouldSetRecurrenceStart(){
         ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
-        Calendar calendar = Calendar.getInstance();
-        calendar.set(2014, 8, 26);
-        long startTime = calendar.getTimeInMillis();
+        long startTime = getTimeInMillis(2014, 8, 26);
         scheduledAction.setStartTime(startTime);
         assertThat(scheduledAction.getRecurrence()).isNull();
 
@@ -44,9 +42,7 @@ public void settingStartTime_shouldSetRecurrenceStart(){
         scheduledAction.setRecurrence(recurrence);
         assertThat(recurrence.getPeriodStart().getTime()).isEqualTo(startTime);
 
-        calendar.clear();
-        calendar.set(2015, 6, 6);
-        long newStartTime = calendar.getTimeInMillis();
+        long newStartTime = getTimeInMillis(2015, 6, 6);
         scheduledAction.setStartTime(newStartTime);
         assertThat(recurrence.getPeriodStart().getTime()).isEqualTo(newStartTime);
     }
@@ -54,9 +50,7 @@ public void settingStartTime_shouldSetRecurrenceStart(){
     @Test
     public void settingEndTime_shouldSetRecurrenceEnd(){
         ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
-        Calendar calendar = Calendar.getInstance();
-        calendar.set(2014, 8, 26);
-        long endTime = calendar.getTimeInMillis();
+        long endTime = getTimeInMillis(2014, 8, 26);
         scheduledAction.setEndTime(endTime);
         assertThat(scheduledAction.getRecurrence()).isNull();
 
@@ -65,9 +59,7 @@ public void settingEndTime_shouldSetRecurrenceEnd(){
         scheduledAction.setRecurrence(recurrence);
         assertThat(recurrence.getPeriodEnd().getTime()).isEqualTo(endTime);
 
-        calendar.clear();
-        calendar.set(2015, 6, 6);
-        long newEndTime = calendar.getTimeInMillis();
+        long newEndTime = getTimeInMillis(2015, 6, 6);
         scheduledAction.setEndTime(newEndTime);
         assertThat(recurrence.getPeriodEnd().getTime()).isEqualTo(newEndTime);
     }
@@ -77,12 +69,11 @@ public void settingRecurrence_shouldSetScheduledActionStartTime(){
         ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.BACKUP);
         assertThat(scheduledAction.getStartTime()).isEqualTo(0);
 
-        Calendar calendar = Calendar.getInstance();
-        calendar.set(2014, 8, 26);
+        long startTime = getTimeInMillis(2014, 8, 26);
         Recurrence recurrence = new Recurrence(PeriodType.WEEK);
-        recurrence.setPeriodStart(new Timestamp(calendar.getTimeInMillis()));
+        recurrence.setPeriodStart(new Timestamp(startTime));
         scheduledAction.setRecurrence(recurrence);
-        assertThat(scheduledAction.getStartTime()).isEqualTo(calendar.getTimeInMillis());
+        assertThat(scheduledAction.getStartTime()).isEqualTo(startTime);
     }
 
     @Test
@@ -90,13 +81,18 @@ public void settingRecurrence_shouldSetEndTime(){
         ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.BACKUP);
         assertThat(scheduledAction.getStartTime()).isEqualTo(0);
 
-        Calendar calendar = Calendar.getInstance();
-        calendar.set(2017, 8, 26);
+        long endTime = getTimeInMillis(2017, 8, 26);
         Recurrence recurrence = new Recurrence(PeriodType.WEEK);
-        recurrence.setPeriodEnd(new Timestamp(calendar.getTimeInMillis()));
+        recurrence.setPeriodEnd(new Timestamp(endTime));
         scheduledAction.setRecurrence(recurrence);
 
-        assertThat(scheduledAction.getEndTime()).isEqualTo(calendar.getTimeInMillis());
+        assertThat(scheduledAction.getEndTime()).isEqualTo(endTime);
+    }
+
+    private long getTimeInMillis(int year, int month, int day) {
+        Calendar calendar = Calendar.getInstance();
+        calendar.set(year, month, day);
+        return calendar.getTimeInMillis();
     }
 
     //todo add test for computing the scheduledaction endtime from the recurrence count
