From f8f42b3cf056d13df966a48cc2f39d4445c692a1 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 23 Jul 2014 23:53:27 +0200
Subject: [PATCH] Feature: Save opening balances as transactions in the "Equity
 -> Opening Balances" account. Feature: Added setting for saving opening
 balances before deleting transactions Fixed: Accounts now exported
 hierarchically so that they can be imported properly Fixed: Display the
 actual number of currencies during export Code refactoring for less memory
 use during export

---
 app/res/values-de/strings.xml                      |   5 +
 app/res/values-el/strings.xml                      |   5 +
 app/res/values-es-rMX/strings.xml                  |   5 +
 app/res/values-es/strings.xml                      |   5 +
 app/res/values-fr/strings.xml                      |   5 +
 app/res/values-hu/strings.xml                      |   5 +
 app/res/values-it/strings.xml                      |   5 +
 app/res/values-nb/strings.xml                      |   5 +
 app/res/values-nl/strings.xml                      |   5 +
 app/res/values-pt-rBR/strings.xml                  |   5 +
 app/res/values-ru/strings.xml                      |   5 +
 app/res/values-zh/strings.xml                      |   5 +
 app/res/values/strings.xml                         |   6 +
 .../xml-v11/fragment_transaction_preferences.xml   |   4 +
 app/res/xml/fragment_transaction_preferences.xml   |   4 +
 .../gnucash/android/app/GnuCashApplication.java    |  11 ++
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 165 +++++++++++++++++++--
 app/src/org/gnucash/android/db/DatabaseHelper.java |   4 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  31 ----
 .../gnucash/android/db/TransactionsDbAdapter.java  |  17 +++
 .../gnucash/android/export/xml/GncXmlExporter.java |  46 ++++--
 app/src/org/gnucash/android/model/Account.java     |   2 +-
 .../android/ui/account/AccountFormFragment.java    |   8 +-
 .../DeleteAllTransacationsConfirmationDialog.java  |  42 +++++-
 .../android/ui/settings/SettingsActivity.java      |  16 ++
 ...ansactionsDeleteConfirmationDialogFragment.java |  56 ++++---
 26 files changed, 383 insertions(+), 89 deletions(-)

diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 50baa3d3..296805c1 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -412,4 +412,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Anfangsbestand</string>
+    <string name="account_name_equity"></string> <!-- This is no error, the default German locale has no parent Equity account -->
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index f399fa97..a208ffe9 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -429,4 +429,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances"> </string>
+    <string name="account_name_equity"> </string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 5c146e2d..10ef73eb 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -414,4 +414,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Balances de apertura</string>
+    <string name="account_name_equity">Capital</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index c9272cd2..dfe91296 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -411,4 +411,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Balances de apertura</string>
+    <string name="account_name_equity">Resultado</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 9a4c17c2..0ed99da5 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -411,4 +411,9 @@
     <string name="label_account_balance">Balance:</string>
     <string name="label_repeats">Repeats</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Soldes initiaux</string>
+    <string name="account_name_equity">Capitaux propres</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index ef59c545..8dd9a501 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -415,4 +415,9 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Nyitegyenlegek</string>
+    <string name="account_name_equity">Sajt tke</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index b7a7066b..f40568a1 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -415,4 +415,9 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Bilanci d\'apertura</string>
+    <string name="account_name_equity">Capitali</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index a48e892d..7efbe54a 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -414,4 +414,9 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Opening Balances</string>
+    <string name="account_name_equity">Equity</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 88fc56b5..40e64618 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -416,4 +416,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Openingsbalans</string>
+    <string name="account_name_equity">Eigen Vermogen</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 1339f596..cedfb152 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -414,4 +414,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Saldos Iniciais</string>
+    <string name="account_name_equity">Lquido</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index e32c282b..ed2139d5 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -415,4 +415,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances"> </string>
+    <string name="account_name_equity"> </string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 13cf720a..a7075589 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -409,4 +409,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances"></string>
+    <string name="account_name_equity"></string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 21c2fa49..8a82cf1b 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -646,4 +646,10 @@
     <string name="label_repeats">Repeats</string>
     <string name="key_restore_backup">restore_backup</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Opening Balances</string>
+    <string name="account_name_equity">Equity</string>
+    <string name="key_save_opening_balances">save_opening_balances</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/xml-v11/fragment_transaction_preferences.xml b/app/res/xml-v11/fragment_transaction_preferences.xml
index 3f8fe10d..084e26c8 100644
--- a/app/res/xml-v11/fragment_transaction_preferences.xml
+++ b/app/res/xml-v11/fragment_transaction_preferences.xml
@@ -24,6 +24,10 @@
     <CheckBoxPreference android:summary="@string/summary_use_double_entry"
                         android:key="@string/key_use_double_entry"
                         android:title="@string/title_use_double_entry"/>
+    <CheckBoxPreference android:summary="@string/summary_save_opening_balances"
+                        android:key="@string/key_save_opening_balances"
+                        android:defaultValue="false"
+                        android:title="@string/title_save_opening_balances" />
     <Preference android:key="@string/key_delete_all_transactions"
                 android:summary="@string/summary_delete_all_transactions"
                 android:title="@string/title_delete_all_transactions" />
diff --git a/app/res/xml/fragment_transaction_preferences.xml b/app/res/xml/fragment_transaction_preferences.xml
index f8c7f19b..36aefe5f 100644
--- a/app/res/xml/fragment_transaction_preferences.xml
+++ b/app/res/xml/fragment_transaction_preferences.xml
@@ -25,6 +25,10 @@
                         android:key="@string/key_use_double_entry"
                         android:defaultValue="true"
                         android:title="@string/title_use_double_entry"/>
+    <CheckBoxPreference android:summary="@string/summary_save_opening_balances"
+                        android:key="@string/key_save_opening_balances"
+                        android:defaultValue="false"
+                        android:title="@string/title_save_opening_balances" />
     <Preference android:key="@string/key_delete_all_transactions"
                 android:summary="@string/summary_delete_all_transactions"
                 android:title="@string/title_delete_all_transactions" />
diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index 8d01d9fa..6410b380 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -53,4 +53,15 @@ public static boolean isDoubleEntryEnabled(boolean defaultValue){
         SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
         return sharedPrefs.getBoolean(context.getString(R.string.key_use_double_entry), defaultValue);
     }
+
+    /**
+     * Returns <code>true</code> if setting is enabled to save opening balances after deleting transactions,
+     * <code>false</code> otherwise.
+     * @param defaultValue Default value to return if double entry is not explicitly set
+     * @return <code>true</code> if opening balances should be saved, <code>false</code> otherwise
+     */
+    public static boolean shouldSaveOpeningBalances(boolean defaultValue){
+        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
+        return sharedPrefs.getBoolean(context.getString(R.string.key_save_opening_balances), defaultValue);
+    }
 }
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 50cfa6eb..f89ee51d 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -24,11 +24,9 @@
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.*;
 
+import java.math.BigDecimal;
 import java.util.*;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
@@ -77,6 +75,36 @@ public static String getImbalanceAccountName(Currency currency){
         return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
     }
 
+    /**
+     * Get the name of the default account for opening balances for the current locale.
+     * For the English locale, it will be "Equity:Opening Balances"
+     * @return Fully qualified account name of the opening balances account
+     */
+    public static String getOpeningBalanceAccountFullName(){
+        Context context = GnuCashApplication.getAppContext();
+        return context.getString(R.string.account_name_equity)
+                + ACCOUNT_NAME_SEPARATOR
+                + context.getString(R.string.account_name_opening_balances);
+    }
+
+    /**
+     * Returns the list of currencies in the database
+     * @return List of currencies in the database
+     */
+    public List<Currency> getCurrencies(){
+        Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
+                null, null, null, null, null, null);
+        List<Currency> currencyList = new ArrayList<Currency>();
+        if (cursor != null){
+            while (cursor.moveToNext()){
+                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+                currencyList.add(Currency.getInstance(currencyCode));
+            }
+            cursor.close();
+        }
+        return currencyList;
+    }
+
     @Override
 	public void close() {
 		super.close();
@@ -100,10 +128,10 @@ public long addAccount(Account account){
         contentValues.put(AccountEntry.COLUMN_COLOR_CODE,   account.getColorHexCode());
         contentValues.put(AccountEntry.COLUMN_FAVORITE,     account.isFavorite() ? 1 : 0);
         contentValues.put(AccountEntry.COLUMN_FULL_NAME,    account.getFullName());
-        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,            account.getParentUID());
-        contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID,  account.getDefaultTransferAccountUID());
+        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,           account.getParentUID());
+        contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
 
-		long rowId = -1;
+        long rowId = -1;
 		if ((rowId = getAccountID(account.getUID())) > 0){
 			//if account already exists, then just update
 			Log.d(TAG, "Updating existing account");
@@ -279,7 +307,8 @@ private Account buildSimpleAccountInstance(Cursor c) {
         account.setUID(uid);
         account.setParentUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID)));
         account.setAccountType(AccountType.valueOf(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE))));
-        account.setCurrency(Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY))));
+        Currency currency = Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY)));
+        account.setCurrency(currency);
         account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
         account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
         account.setColorCode(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE)));
@@ -459,13 +488,8 @@ public String getName(long accountID) {
      */
     public String getOrCreateImbalanceAccountUID(Currency currency){
         String imbalanceAccountName = getImbalanceAccountName(currency);
-        Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
-                AccountEntry.COLUMN_NAME + "= ?", new String[]{imbalanceAccountName},
-                null, null, null, "1");
-        String uid;
-        if (c != null && c.moveToNext()) {
-            uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
-        } else {
+        String uid = findAccountUidByFullName(imbalanceAccountName);
+        if (uid == null){
             Account account = new Account(imbalanceAccountName, currency);
             account.setAccountType(AccountType.BANK);
             addAccount(account);
@@ -474,6 +498,69 @@ public String getOrCreateImbalanceAccountUID(Currency currency){
         return uid;
     }
 
+    /**
+     * Creates the account with the specified name and returns its unique identifier.
+     * <p>If a full hierarchical account name is provided, then the whole hierarchy is created and the
+     * unique ID of the last account (at bottom) of the hierarchy is returned</p>
+     * @param fullName Fully qualified name of the account
+     * @param accountType Type to assign to all accounts created
+     * @return String unique ID of the account at bottom of hierarchy
+     */
+    public String createAccountHierarchy(String fullName, AccountType accountType){
+        if (fullName == null)
+            throw new IllegalArgumentException("The account name cannot be null");
+
+        String[] tokens = fullName.split(ACCOUNT_NAME_SEPARATOR);
+        String uid = null;
+        String parentName = "";
+        for (String token : tokens) {
+            parentName += token;
+            String parentUID = findAccountUidByFullName(parentName);
+            parentName += ACCOUNT_NAME_SEPARATOR;
+            if (parentUID != null){ //the parent account exists, don't recreate
+                uid = parentUID;
+                continue;
+            }
+            Account account = new Account(token);
+            account.setAccountType(accountType);
+            account.setParentUID(uid); //set its parent
+            uid = account.getUID();
+        }
+        return uid;
+    }
+
+    /**
+     * Returns the unique ID of the opening balance account or creates one if necessary
+     * @return String unique ID of the opening balance account
+     */
+    public String getOrCreateOpeningBalanceAccountUID(){
+        String openingBalanceAccountName = getOpeningBalanceAccountFullName();
+        String uid = findAccountUidByFullName(openingBalanceAccountName);
+        if (uid == null){
+            uid = createAccountHierarchy(openingBalanceAccountName, AccountType.EQUITY);
+        }
+        return uid;
+    }
+
+    /**
+     * Finds an account unique ID by its full name
+     * @param fullName Fully qualified name of the account
+     * @return String unique ID of the account
+     */
+    public String findAccountUidByFullName(String fullName){
+        Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
+                AccountEntry.COLUMN_FULL_NAME + "= ?", new String[]{fullName},
+                null, null, null, "1");
+        String uid = null;
+        if (c != null) {
+            if (c.moveToNext()) {
+                uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+            }
+            c.close();
+        }
+        return uid;
+    }
+
 	/**
 	 * Returns a cursor to all account records in the database.
      * GnuCash ROOT accounts are ignored
@@ -717,6 +804,22 @@ public int getSubAccountCount(long accountId){
         return count;
     }
 
+    /**
+     * Returns the number of accounts in the database
+     * @return Number of accounts in the database
+     */
+    public int getTotalAccountCount(){
+        String queryCount = "SELECT COUNT(*) FROM " + AccountEntry.TABLE_NAME;
+        Cursor cursor = mDb.rawQuery(queryCount, null);
+        int count = 0;
+        if (cursor != null){
+            cursor.moveToFirst();
+            count = cursor.getInt(0);
+            cursor.close();
+        }
+        return count;
+    }
+
 	/**
 	 * Return the record ID for the account with UID <code>accountUID</code>
 	 * @param accountUID String Unique ID of the account
@@ -886,6 +989,38 @@ public boolean isFavoriteAccount(long accountId){
         return isFavorite;
     }
 
+    /**
+     * Updates all opening balances to the current account balances
+     */
+    public List<Transaction> getAllOpeningBalanceTransactions(){
+        Cursor cursor = fetchAccounts(null);
+        List<Transaction> openingTransactions = new ArrayList<Transaction>();
+        if (cursor != null){
+            SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(mDb);
+            while(cursor.moveToNext()){
+                long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
+                String accountUID = getAccountUID(id);
+                String currencyCode = getCurrencyCode(id);
+                Money balance = splitsDbAdapter.computeSplitBalance(accountUID);
+                if (balance.asBigDecimal().compareTo(new BigDecimal(0)) == 0)
+                    continue;
+
+                Transaction transaction = new Transaction(mContext.getString(R.string.account_name_opening_balances));
+                transaction.setDescription(getName(id));
+                transaction.setCurrencyCode(currencyCode);
+                TransactionType transactionType = Transaction.getTypeForBalance(getAccountType(accountUID),
+                        balance.isNegative());
+                Split split = new Split(balance.absolute(), accountUID);
+                split.setType(transactionType);
+                transaction.addSplit(split);
+                transaction.addSplit(split.createPair(getOrCreateOpeningBalanceAccountUID()));
+                openingTransactions.add(transaction);
+            }
+            cursor.close();
+        }
+        return openingTransactions;
+    }
+
 	/**
 	 * Deletes all accounts and their transactions (and their splits) from the database.
      * Basically empties all 3 tables, so use with care ;)
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index c77d5af0..d7945c51 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -65,8 +65,8 @@
             + AccountEntry.COLUMN_COLOR_CODE        + " varchar(255), "
             + AccountEntry.COLUMN_FAVORITE 		    + " tinyint default 0, "
             + AccountEntry.COLUMN_FULL_NAME 	    + " varchar(255), "
-            + AccountEntry.COLUMN_PLACEHOLDER            + " tinyint default 0, "
-            + AccountEntry.COLUMN_PARENT_ACCOUNT_UID     + " varchar(255), "
+            + AccountEntry.COLUMN_PLACEHOLDER           + " tinyint default 0, "
+            + AccountEntry.COLUMN_PARENT_ACCOUNT_UID    + " varchar(255), "
             + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID   + " varchar(255), "
             + "UNIQUE (" + AccountEntry.COLUMN_UID       + ")"
 			+ ");";
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index ec51c83b..2b609679 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -153,25 +153,6 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
     }
 
     /**
-     * Returns the list of currencies in the database
-     * @return List of currencies in the database
-     */
-    static List<Currency> getCurrencies(SQLiteDatabase db){
-
-        Cursor cursor = db.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
-                null, null, null, null, null, null);
-        List<Currency> currencyList = new ArrayList<Currency>();
-        if (cursor != null){
-            while (cursor.moveToNext()){
-                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
-                currencyList.add(Currency.getInstance(currencyCode));
-            }
-            cursor.close();
-        }
-        return currencyList;
-    }
-
-    /**
      * Imports GnuCash XML into the database from file
      * @param filepath Path to GnuCash XML file
      */
@@ -184,17 +165,5 @@ static void importGnucashXML(SQLiteDatabase db, String filepath) {
             e.printStackTrace();
             throw new RuntimeException(e);
         }
-
-        //update the fully qualified names because
-        //during import, an account may be imported before its parent which will make the full name null:<name>
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db);
-        Cursor cursor = accountsDbAdapter.fetchAllRecords();
-        if (cursor != null){
-            while (cursor.moveToNext()){
-                long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
-                accountsDbAdapter.updateAccount(id, AccountEntry.COLUMN_FULL_NAME,
-                        accountsDbAdapter.getFullyQualifiedAccountName(id));
-            }
-        }
     }
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index ce4a9cf1..92e8accd 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -228,6 +228,23 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
+    /**
+     * Return number of transactions in the database which are non recurring
+     * @return Number of transactions
+     */
+    public int getTotalTransactionsCount(){
+        String queryCount = "SELECT COUNT(*) FROM " + TransactionEntry.TABLE_NAME +
+                " WHERE " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " =0";
+        Cursor cursor = mDb.rawQuery(queryCount, null);
+        int count = 0;
+        if (cursor != null){
+            cursor.moveToFirst();
+            count = cursor.getInt(0);
+            cursor.close();
+        }
+        return count;
+    }
+
 	/**
 	 * Builds a transaction instance with the provided cursor.
 	 * The cursor should already be pointing to the transaction record in the database
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 5bed6449..358c147d 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -16,8 +16,10 @@
 
 package org.gnucash.android.export.xml;
 
+import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
@@ -68,6 +70,10 @@ public GncXmlExporter(ExportParams params, SQLiteDatabase db){
         mTransactionsDbAdapter = new TransactionsDbAdapter(db);
     }
 
+    /**
+     * Generate GnuCash XML
+     * @throws ParserConfigurationException if there was an error when generating the XML
+     */
     private void generateGncXml() throws ParserConfigurationException {
         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
 //        docFactory.setNamespaceAware(true);
@@ -105,30 +111,48 @@ private void generateGncXml() throws ParserConfigurationException {
 
         Element cmdtyCountData = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
         cmdtyCountData.setAttribute("cd:type", "commodity");
-        cmdtyCountData.appendChild(mDocument.createTextNode("1")); //TODO: put actual number of currencies
+        cmdtyCountData.appendChild(mDocument.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
         bookNode.appendChild(cmdtyCountData);
 
-        List<Account> accountList = mAccountsDbAdapter.getSimpleAccountList();
-
         Element accountCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
         accountCountNode.setAttribute("cd:type", "account");
-        accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountList.size())));
+        int accountCount = mAccountsDbAdapter.getTotalAccountCount();
+        accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountCount)));
         bookNode.appendChild(accountCountNode);
 
-        List<Transaction> transactionsList = mTransactionsDbAdapter.getAllTransactions();
-
         Element transactionCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
         transactionCountNode.setAttribute("cd:type", "transaction");
-        transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionsList.size())));
+        int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
+        transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionCount)));
         bookNode.appendChild(transactionCountNode);
 
-        for (Account account : accountList) {
-            account.toGncXml(mDocument, bookNode);
+        String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+        Account rootAccount = mAccountsDbAdapter.getAccount(rootAccountUID);
+        if (rootAccount != null){
+            rootAccount.toGncXml(mDocument, bookNode);
+        }
+        Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
+
+        //create accounts hierarchically by ordering by full name
+        if (accountsCursor != null){
+            while (accountsCursor.moveToNext()){
+                long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
+                Account account = mAccountsDbAdapter.getAccount(id);
+                account.toGncXml(mDocument, bookNode);
+            }
+            accountsCursor.close();
         }
 
-        for (Transaction transaction : transactionsList) {
-            transaction.toGncXml(mDocument, bookNode);
+        //more memory efficient approach than loading all transactions into memory first
+        Cursor transactionsCursor = mTransactionsDbAdapter.fetchAllRecords();
+        if (transactionsCursor != null){
+            while (transactionsCursor.moveToNext()){
+                Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(transactionsCursor);
+                transaction.toGncXml(mDocument, bookNode);
+            }
+            transactionsCursor.close();
         }
+
         mDocument.appendChild(rootElement);
         mAccountsDbAdapter.close();
         mTransactionsDbAdapter.close();
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index d07dd4f6..0d9ebf8b 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -307,7 +307,7 @@ public boolean hasUnexportedTransactions(){
 		}
 		return false;
 	}
-	
+
 	/**
 	 * Returns the aggregate of all transactions in this account.
 	 * It takes into account debit and credit amounts, it does not however consider sub-accounts
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 8d4e9dfe..fad1f4c3 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -40,7 +40,6 @@
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
@@ -246,7 +245,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
-		
+
 		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 			
@@ -679,7 +678,10 @@ public void onDestroy() {
             mDefaultTransferAccountCursorAdapter.getCursor().close();
         }
 	}
-	
+
+    /**
+     * Reads the fields from the account form and saves as a new account
+     */
 	private void saveAccount() {
 		if (mAccount == null){
 			String name = getEnteredName();
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index f4ab870b..e946b9d1 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -8,10 +8,16 @@
 import android.os.Bundle;
 import android.widget.Toast;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Copyright (c) 2013 - gnucash-android
  *
@@ -34,22 +40,42 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                         new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int whichButton) {
                                 GncXmlExporter.createBackup();
+
                                 Context context = getDialog().getContext();
+                                AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+                                List<Transaction> openingBalances = new ArrayList<Transaction>();
+                                boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+                                if (preserveOpeningBalances) {
+                                    openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
+                                    accountsDbAdapter.close();
+                                }
                                 TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(context);
                                 transactionsDbAdapter.deleteAllRecords();
+
+                                if (preserveOpeningBalances) {
+                                    for (Transaction openingBalance : openingBalances) {
+                                        transactionsDbAdapter.addTransaction(openingBalance);
+                                    }
+                                }
                                 transactionsDbAdapter.close();
                                 Toast.makeText(context, R.string.toast_all_transactions_deleted, Toast.LENGTH_SHORT).show();
                                 WidgetConfigurationActivity.updateAllWidgets(getActivity());
                             }
                         }
+
                 )
-                .setNegativeButton(R.string.alert_dialog_cancel,
-                        new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int whichButton) {
-                                dismiss();
-                            }
+                                    .
+
+                            setNegativeButton(R.string.alert_dialog_cancel,
+                                    new DialogInterface.OnClickListener() {
+                                        public void onClick(DialogInterface dialog, int whichButton) {
+                                            dismiss();
+                                        }
+                                    }
+
+                            )
+                                    .
+
+                            create();
                         }
-                )
-                .create();
     }
-}
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 659554ba..1d1e1494 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -32,15 +32,18 @@
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
 
 import java.io.*;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Timer;
 import java.util.TimerTask;
@@ -219,8 +222,21 @@ public boolean onPreferenceClick(Preference preference) {
                 Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
             } else {
                 GncXmlExporter.createBackup(); //create backup before deleting everything
+                List<Transaction> openingBalances = new ArrayList<Transaction>();
+                boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+                if (preserveOpeningBalances) {
+                    AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
+                    openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
+                    accountsDbAdapter.close();
+                }
                 TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(this);
                 transactionsDbAdapter.deleteAllRecords();
+
+                if (preserveOpeningBalances) {
+                    for (Transaction openingBalance : openingBalances) {
+                        transactionsDbAdapter.addTransaction(openingBalance);
+                    }
+                }
                 transactionsDbAdapter.close();
                 Toast.makeText(this, R.string.toast_all_transactions_deleted, Toast.LENGTH_LONG).show();
             }
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 0e6aa25d..1594f620 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -16,8 +16,11 @@
 package org.gnucash.android.ui.transaction.dialog;
 
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsListFragment;
 
@@ -29,6 +32,9 @@
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Displays a delete confirmation dialog for transactions
  * If the transaction ID parameter is 0, then all transactions will be deleted
@@ -55,29 +61,43 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                 .setIcon(android.R.drawable.ic_delete)
                 .setTitle(title).setMessage(message)
                 .setPositiveButton(R.string.alert_dialog_ok_delete,
-                    new DialogInterface.OnClickListener() {
-                        public void onClick(DialogInterface dialog, int whichButton) {
-                        	TransactionsDbAdapter adapter = new TransactionsDbAdapter(getSherlockActivity());                            
-                            if (rowId == 0){
-                                GncXmlExporter.createBackup(); //create backup before deleting everything
-	                        	adapter.deleteAllRecords();
-                            } else {
-                            	adapter.deleteRecord(rowId);
-                            }
-                            adapter.close();
-                            if (getTargetFragment() instanceof AccountsListFragment){                            	
-                            	((AccountsListFragment)getTargetFragment()).refresh();
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int whichButton) {
+                                TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(getSherlockActivity());
+                                if (rowId == 0) {
+                                    GncXmlExporter.createBackup(); //create backup before deleting everything
+                                    List<Transaction> openingBalances = new ArrayList<Transaction>();
+                                    boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+                                    if (preserveOpeningBalances) {
+                                        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
+                                        openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
+                                        accountsDbAdapter.close();
+                                    }
+
+                                    transactionsDbAdapter.deleteAllRecords();
+
+                                    if (preserveOpeningBalances) {
+                                        for (Transaction openingBalance : openingBalances) {
+                                            transactionsDbAdapter.addTransaction(openingBalance);
+                                        }
+                                    }
+                                } else {
+                                    transactionsDbAdapter.deleteRecord(rowId);
+                                }
+                                transactionsDbAdapter.close();
+                                if (getTargetFragment() instanceof AccountsListFragment) {
+                                    ((AccountsListFragment) getTargetFragment()).refresh();
+                                }
+                                WidgetConfigurationActivity.updateAllWidgets(getActivity());
                             }
-                            WidgetConfigurationActivity.updateAllWidgets(getActivity());
                         }
-                    }
                 )
                 .setNegativeButton(R.string.alert_dialog_cancel,
-                    new DialogInterface.OnClickListener() {
-                        public void onClick(DialogInterface dialog, int whichButton) {
-                        	dismiss();
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int whichButton) {
+                                dismiss();
+                            }
                         }
-                    }
                 )
                 .create();
     }
