From 0f056b75debc6250be5b35ae328a45b69c714f82 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Thu, 9 Oct 2014 19:18:14 +0300
Subject: [PATCH] Introduces computing the account balance for period of time

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 26 +++++++++++
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 53 ++++++++++++++++++++++
 .../gnucash/android/ui/chart/PieChartActivity.java |  4 +-
 3 files changed, 82 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 3ce9583d..bba36ad3 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -40,6 +40,7 @@
  * Handles adding, modifying and deleting of account records.
  * @author Ngewi Fet <ngewif@gmail.com>
  * @author Yongxin Wang <fefe.wyx@gmail.com>
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
 public class AccountsDbAdapter extends DatabaseAdapter {
     /**
@@ -840,6 +841,31 @@ public Money getAccountBalance(String accountUID){
     }
 
     /**
+     * Returns the balance of an account within the specified range while taking sub-accounts into consideration
+     * @return the balance of an account within the specified range including sub-accounts
+     */
+    public Money getAccountBalance(String accountUID, long start, long end) {
+        //ToDo refactor to avoid code duplication
+        Log.d(TAG, "Computing account balance for account ID " + accountUID);
+        String currencyCode = mTransactionsAdapter.getCurrencyCode(accountUID);
+        boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
+        currencyCode = currencyCode == null ? Money.DEFAULT_CURRENCY_CODE : currencyCode;
+        Money balance = Money.createZeroInstance(currencyCode);
+
+        List<String> accountsList = getDescendantAccountUIDs(accountUID,
+                AccountEntry.COLUMN_CURRENCY + " = ? ",
+                new String[]{currencyCode});
+
+        accountsList.add(0, accountUID);
+
+        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
+        Log.d(TAG, "all account list : " + accountsList.size());
+        Money splitSum = splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance, start, end);
+        splitsDbAdapter.close();
+        return balance.add(splitSum);
+    }
+
+    /**
      * Retrieve all descendant accounts of an account
      * Note, in filtering, once an account is filtered out, all its descendants
      * will also be filtered out, even they don't meet the filter condition
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index e01a93fb..1dd629e8 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -43,6 +43,7 @@
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  * @author Yongxin Wang <fefe.wyx@gmail.com>
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
 public class SplitsDbAdapter extends DatabaseAdapter {
 
@@ -262,6 +263,58 @@ public Money computeSplitBalance(List<String> accountUIDList, String currencyCod
     }
 
     /**
+     * Returns the sum of the splits for given set of accounts within the specified range.
+     * This takes into account the kind of movement caused by the split in the account (which also depends on account type)
+     * The Caller must make sure all accounts have the currency, which is passed in as currencyCode
+     * @param accountUIDList List of String unique IDs of given set of accounts
+     * @param currencyCode currencyCode for all the accounts in the list
+     * @param hasDebitNormalBalance Does the final balance has normal debit credit meaning
+     * @param start the start timestamp of the range
+     * @param end the end timestamp of the range
+     * @return Balance of the splits for this account within the specified range
+     */
+    public Money computeSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance, long start, long end){
+        //ToDo refactor to avoid code duplication
+        //Cursor cursor = fetchSplitsForAccount(accountUID);
+        if (accountUIDList == null || accountUIDList.size() == 0){
+            return new Money("0", currencyCode);
+        }
+
+        Cursor cursor;
+        cursor = mDb.query(SplitEntry.TABLE_NAME + " , " + TransactionEntry.TABLE_NAME,
+                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+
+                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " END )"},
+                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
+                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0 AND " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ?",
+                new String[]{String.valueOf(start), String.valueOf(end)}, null, null, null);
+
+        if (cursor != null){
+            if (cursor.moveToFirst()) {
+                double amount = cursor.getDouble(0);
+                cursor.close();
+                Log.d(TAG, "amount return " + amount);
+                if (!hasDebitNormalBalance) {
+                    amount = -amount;
+                }
+                return new Money(BigDecimal.valueOf(amount).setScale(2, BigDecimal.ROUND_HALF_UP), Currency.getInstance(currencyCode));
+            }
+            cursor.close();
+        }
+        return new Money("0", currencyCode);
+    }
+
+//        SELECT TOTAL ( CASE WHEN splits.type = 'DEBIT' THEN splits.amount ELSE - splits.amount END ) FROM splits , transactions WHERE splits.account_uid in ( '532ee7592d4efae7fe2418891d598e59' ) AND splits.transaction_uid = transactions.uid AND transactions.recurrence_period = 0 AND transactions.timestamp BETWEEN ?x AND ?
+//        String query = "SELECT TOTAL ( CASE WHEN splits.type = 'DEBIT' THEN splits.amount ELSE - splits.amount END )" +
+//                " FROM splits " +
+//                " INNER JOIN transactions ON transactions.uid = splits.transaction_uid" +
+//                " WHERE splits.account_uid in ( '" + TextUtils.join("' , '", accountUIDList)  + "' )" +
+//                " AND transactions.recurrence_period = 0" +
+//                " AND transactions.timestamp > 1413109811000";
+
+
+    /**
      * Returns the list of splits for a transaction
      * @param transactionUID String unique ID of transaction
      * @return List of {@link org.gnucash.android.model.Split}s
diff --git a/app/src/org/gnucash/android/ui/chart/PieChartActivity.java b/app/src/org/gnucash/android/ui/chart/PieChartActivity.java
index d1c46b71..7ca734c7 100644
--- a/app/src/org/gnucash/android/ui/chart/PieChartActivity.java
+++ b/app/src/org/gnucash/android/ui/chart/PieChartActivity.java
@@ -110,7 +110,9 @@ private void setDataset(AccountType type) {
         List<Account> accountList = mAccountsDbAdapter.getSimpleAccountList();
         for (Account account : accountList) {
             if (account.getAccountType() == type && !account.isPlaceholderAccount()) {
-                double balance = mAccountsDbAdapter.getAccountBalance(account.getUID()).asDouble();
+                long start = 0;
+                long end = Long.MAX_VALUE;
+                double balance = mAccountsDbAdapter.getAccountBalance(account.getUID(), start, end).asDouble();
                 // ToDo What with negative?
                 if (balance > 0) {
                     mBalanceSum += balance;
