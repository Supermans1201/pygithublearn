From e03b60bd8daa40646efac4f17eae7d710bfbf9f3 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Fri, 8 May 2015 21:51:07 +0300
Subject: [PATCH] Updated charting lib

---
 app/build.gradle                                   |  2 +-
 .../gnucash/android/ui/chart/BarChartActivity.java | 31 +++++++------
 .../android/ui/chart/LargeValueFormatter.java      | 51 ----------------------
 .../android/ui/chart/LineChartActivity.java        | 29 ++++++------
 .../gnucash/android/ui/chart/PieChartActivity.java | 18 ++++----
 5 files changed, 43 insertions(+), 88 deletions(-)
 delete mode 100644 app/src/main/java/org/gnucash/android/ui/chart/LargeValueFormatter.java

diff --git a/app/build.gradle b/app/build.gradle
index 2e73ba66..d23a329c 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -114,7 +114,7 @@ dependencies {
             'com.viewpagerindicator:library:2.4.1@aar',
             'com.doomonafireball.betterpickers:library:1.5.2',
             'com.commonsware.cwac:merge:1.1.+',
-            'com.github.PhilJay:MPAndroidChart:v2.0.8',
+            'com.github.PhilJay:MPAndroidChart:v2.1.0',
             'joda-time:joda-time:2.7',
             'com.google.android.gms:play-services-drive:7.0.0',
             'com.crashlytics.android:crashlytics:1.+'
diff --git a/app/src/main/java/org/gnucash/android/ui/chart/BarChartActivity.java b/app/src/main/java/org/gnucash/android/ui/chart/BarChartActivity.java
index 132604a6..3a7cefa0 100644
--- a/app/src/main/java/org/gnucash/android/ui/chart/BarChartActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/chart/BarChartActivity.java
@@ -34,6 +34,7 @@
 import com.github.mikephil.charting.data.Entry;
 import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
 import com.github.mikephil.charting.utils.Highlight;
+import com.github.mikephil.charting.utils.LargeValueFormatter;
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -75,8 +76,8 @@
 
     private BarChart mChart;
     private AccountsDbAdapter mAccountsDbAdapter = AccountsDbAdapter.getInstance();
-    private Map<AccountType, Long> mEarliestTimestampsMap = new HashMap<AccountType, Long>();
-    private Map<AccountType, Long> mLatestTimestampsMap = new HashMap<AccountType, Long>();
+    private Map<AccountType, Long> mEarliestTimestampsMap = new HashMap<>();
+    private Map<AccountType, Long> mLatestTimestampsMap = new HashMap<>();
     private long mEarliestTransactionTimestamp;
     private long mLatestTransactionTimestamp;
     private boolean mTotalPercentageMode = true;
@@ -97,13 +98,15 @@ protected void onCreate(Bundle savedInstanceState) {
         ((LinearLayout) findViewById(R.id.chart)).addView(mChart);
         mChart.setOnChartValueSelectedListener(this);
         mChart.setDescription("");
+        mChart.getXAxis().setDrawGridLines(false);
+        mChart.getAxisRight().setEnabled(false);
+        mChart.getAxisLeft().enableGridDashedLine(4.0f, 4.0f, 0);
         mChart.setDrawValuesForWholeStack(false);
-        mChart.setDrawBarShadow(false);
         mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
         mChart.getAxisRight().setEnabled(false);
 
         // below we can add/remove displayed account's types
-        mChart.setData(getData(new ArrayList<AccountType>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
+        mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
 
         Legend legend = mChart.getLegend();
         legend.setForm(Legend.LegendForm.CIRCLE);
@@ -126,7 +129,7 @@ protected void onCreate(Bundle savedInstanceState) {
      * @param accountTypeList account's types which will be displayed
      * @return a {@code BarData} instance that represents a user data
      */
-    private BarData getData(ArrayList<AccountType> accountTypeList) {
+    private BarData getData(List<AccountType> accountTypeList) {
         calculateEarliestAndLatestTimestamps(accountTypeList);
 
         LocalDateTime startDate = new LocalDateTime(mEarliestTransactionTimestamp).withDayOfMonth(1).withMillisOfDay(0);
@@ -135,9 +138,9 @@ private BarData getData(ArrayList<AccountType> accountTypeList) {
         Log.d(TAG, "X-axis end date: " + endDate.toString("dd MM yyyy"));
         int months = Months.monthsBetween(startDate, endDate).getMonths();
 
-        ArrayList<BarDataSet> dataSets = new ArrayList<BarDataSet>();
-        ArrayList<BarEntry> values = new ArrayList<BarEntry>();
-        ArrayList<String> xValues = new ArrayList<String>();
+        List<BarDataSet> dataSets = new ArrayList<>();
+        List<BarEntry> values = new ArrayList<>();
+        List<String> xValues = new ArrayList<>();
         for (int i = 0; i <= months; i++) {
             xValues.add(startDate.toString(X_AXIS_PATTERN));
 
@@ -189,7 +192,7 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
             return;
         }
 
-        List<Long> timestamps = new ArrayList<Long>(mEarliestTimestampsMap.values());
+        List<Long> timestamps = new ArrayList<>(mEarliestTimestampsMap.values());
         timestamps.addAll(mLatestTimestampsMap.values());
         Collections.sort(timestamps);
         mEarliestTransactionTimestamp = timestamps.get(0);
@@ -203,9 +206,9 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
      * @return a map with an account type as key and correspond accounts UIDs as value
      */
     private Map<AccountType, List<String>> getAccountTypeToAccountUidMap(List<AccountType> accountTypeList) {
-        Map<AccountType, List<String>> accountMap = new HashMap<AccountType, List<String>>();
+        Map<AccountType, List<String>> accountMap = new HashMap<>();
         for (AccountType accountType : accountTypeList) {
-            List<String> accountUIDList = new ArrayList<String>();
+            List<String> accountUIDList = new ArrayList<>();
             for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
                 if (account.getAccountType() == accountType
                         && !account.isPlaceholderAccount()
@@ -223,8 +226,8 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
      * @return a {@code BarData} instance for situation when no user data available
      */
     private BarData getEmptyData() {
-        ArrayList<String> xValues = new ArrayList<String>();
-        ArrayList<BarEntry> yValues = new ArrayList<BarEntry>();
+        List<String> xValues = new ArrayList<>();
+        List<BarEntry> yValues = new ArrayList<>();
         for (int i = 0; i < NO_DATA_BAR_COUNTS; i++) {
             xValues.add("");
             yValues.add(new BarEntry(i % 2 == 0 ? 5f : 4.5f, i));
@@ -233,7 +236,7 @@ private BarData getEmptyData() {
         set.setDrawValues(false);
         set.setColor(NO_DATA_COLOR);
 
-        return new BarData(xValues, new ArrayList<BarDataSet>(Arrays.asList(set)));
+        return new BarData(xValues, Collections.singletonList(set));
     }
 
     @Override
diff --git a/app/src/main/java/org/gnucash/android/ui/chart/LargeValueFormatter.java b/app/src/main/java/org/gnucash/android/ui/chart/LargeValueFormatter.java
deleted file mode 100644
index 9307c5e4..00000000
--- a/app/src/main/java/org/gnucash/android/ui/chart/LargeValueFormatter.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package org.gnucash.android.ui.chart;
-
-import com.github.mikephil.charting.utils.ValueFormatter;
-
-import java.text.DecimalFormat;
-
-/**
- * Value-formatter that formats large numbers in a pretty way.
- * This is a slightly enhanced version of {@link com.github.mikephil.charting.utils.LargeValueFormatter}.
- *
- * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
- */
-public class LargeValueFormatter implements ValueFormatter {
-
-    private static final String[] SUFFIX = new String[] {
-            "", "k", "m", "b", "t"
-    };
-    private static final int MAX_LENGTH = 4;
-
-    private DecimalFormat mFormat;
-    private String mText;
-
-    public LargeValueFormatter() {
-        mFormat = new DecimalFormat("###E0");
-    }
-
-    /**
-     * Creates a formatter that appends a specified text to the result string
-     * @param text a text that will be appended
-     */
-    public LargeValueFormatter(String text) {
-        this();
-        mText = text;
-    }
-
-    @Override
-    public String getFormattedValue(float value) {
-        return makePretty(value) + " " + mText;
-    }
-
-    private String makePretty(double number) {
-        String r = mFormat.format(number);
-        r = r.replaceAll("E[0-9]", SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);
-        while (r.length() > MAX_LENGTH || r.matches("[0-9]+\\.[a-z]")) {
-            r = r.substring(0, r.length() - 2) + r.substring(r.length() - 1);
-        }
-
-        return r;
-    }
-
-}
diff --git a/app/src/main/java/org/gnucash/android/ui/chart/LineChartActivity.java b/app/src/main/java/org/gnucash/android/ui/chart/LineChartActivity.java
index ca1f2107..de11b676 100644
--- a/app/src/main/java/org/gnucash/android/ui/chart/LineChartActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/chart/LineChartActivity.java
@@ -33,6 +33,7 @@
 import com.github.mikephil.charting.data.LineDataSet;
 import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
 import com.github.mikephil.charting.utils.Highlight;
+import com.github.mikephil.charting.utils.LargeValueFormatter;
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -79,8 +80,8 @@
 
     private LineChart mChart;
     private AccountsDbAdapter mAccountsDbAdapter = AccountsDbAdapter.getInstance();
-    private Map<AccountType, Long> mEarliestTimestampsMap = new HashMap<AccountType, Long>();
-    private Map<AccountType, Long> mLatestTimestampsMap = new HashMap<AccountType, Long>();
+    private Map<AccountType, Long> mEarliestTimestampsMap = new HashMap<>();
+    private Map<AccountType, Long> mLatestTimestampsMap = new HashMap<>();
     private long mEarliestTransactionTimestamp;
     private long mLatestTransactionTimestamp;
     private boolean mChartDataPresent = true;
@@ -100,11 +101,13 @@ protected void onCreate(Bundle savedInstanceState) {
         ((LinearLayout) findViewById(R.id.chart)).addView(mChart);
         mChart.setOnChartValueSelectedListener(this);
         mChart.setDescription("");
-        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
+        mChart.getXAxis().setDrawGridLines(false);
         mChart.getAxisRight().setEnabled(false);
+        mChart.getAxisLeft().enableGridDashedLine(4.0f, 4.0f, 0);
+        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
 
         // below we can add/remove displayed account's types
-        mChart.setData(getData(new ArrayList<AccountType>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
+        mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
 
         Legend legend = mChart.getLegend();
         legend.setPosition(Legend.LegendPosition.RIGHT_OF_CHART_INSIDE);
@@ -132,14 +135,14 @@ private LineData getData(List<AccountType> accountTypeList) {
 
         LocalDate startDate = new LocalDate(mEarliestTransactionTimestamp).withDayOfMonth(1);
         LocalDate endDate = new LocalDate(mLatestTransactionTimestamp).withDayOfMonth(1);
-        ArrayList<String> xValues = new ArrayList<String>();
+        List<String> xValues = new ArrayList<>();
         while (!startDate.isAfter(endDate)) {
             xValues.add(startDate.toString(X_AXIS_PATTERN));
             Log.d(TAG, "X axis " + startDate.toString("MM yy"));
             startDate = startDate.plusMonths(1);
         }
 
-        ArrayList<LineDataSet> dataSets = new ArrayList<LineDataSet>();
+        List<LineDataSet> dataSets = new ArrayList<>();
         for (AccountType accountType : accountTypeList) {
             LineDataSet set = new LineDataSet(getEntryList(accountType), accountType.toString());
             set.setDrawFilled(true);
@@ -163,8 +166,8 @@ private LineData getData(List<AccountType> accountTypeList) {
      * @return a {@code LineData} instance for situation when no user data available
      */
     private LineData getEmptyData() {
-        ArrayList<String> xValues = new ArrayList<String>();
-        ArrayList<Entry> yValues = new ArrayList<Entry>();
+        List<String> xValues = new ArrayList<>();
+        List<Entry> yValues = new ArrayList<>();
         for (int i = 0; i < NO_DATA_BAR_COUNTS; i++) {
             xValues.add("");
             yValues.add(new Entry(i % 2 == 0 ? 5f : 4.5f, i));
@@ -175,7 +178,7 @@ private LineData getEmptyData() {
         set.setColor(NO_DATA_COLOR);
         set.setFillColor(NO_DATA_COLOR);
 
-        return new LineData(xValues, new ArrayList<LineDataSet>(Arrays.asList(set)));
+        return new LineData(xValues, Collections.singletonList(set));
     }
 
     /**
@@ -183,8 +186,8 @@ private LineData getEmptyData() {
      * @param accountType account's type which user data will be processed
      * @return entries which represent a user data
      */
-    private ArrayList<Entry> getEntryList(AccountType accountType) {
-        List<String> accountUIDList = new ArrayList<String>();
+    private List<Entry> getEntryList(AccountType accountType) {
+        List<String> accountUIDList = new ArrayList<>();
         for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
             if (account.getAccountType() == accountType
                     && !account.isPlaceholderAccount()
@@ -201,7 +204,7 @@ private LineData getEmptyData() {
                 latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
 
         int offset = getXAxisOffset(accountType);
-        ArrayList<Entry> values = new ArrayList<Entry>(months + 1);
+        List<Entry> values = new ArrayList<>(months + 1);
         for (int i = 0; i < months + 1; i++) {
             long start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
             long end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
@@ -236,7 +239,7 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
             return;
         }
 
-        List<Long> timestamps = new ArrayList<Long>(mEarliestTimestampsMap.values());
+        List<Long> timestamps = new ArrayList<>(mEarliestTimestampsMap.values());
         timestamps.addAll(mLatestTimestampsMap.values());
         Collections.sort(timestamps);
         mEarliestTransactionTimestamp = timestamps.get(0);
diff --git a/app/src/main/java/org/gnucash/android/ui/chart/PieChartActivity.java b/app/src/main/java/org/gnucash/android/ui/chart/PieChartActivity.java
index 3755125f..20f54acd 100644
--- a/app/src/main/java/org/gnucash/android/ui/chart/PieChartActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/chart/PieChartActivity.java
@@ -82,7 +82,7 @@
     };
 
     private static final String DATE_PATTERN = "MMMM\nYYYY";
-    private static final String TOTAL_VALUE_LABEL_PATTERN = "%s\n%.2f%s";
+    private static final String TOTAL_VALUE_LABEL_PATTERN = "%s\n%.2f %s";
     private static final int ANIMATION_DURATION = 1800;
 
     private PieChart mChart;
@@ -132,6 +132,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mChart = (PieChart) findViewById(R.id.pie_chart);
         mChart.setCenterTextSize(18);
         mChart.setDescription("");
+        mChart.getLegend().setEnabled(false);
         mChart.setOnChartValueSelectedListener(this);
 
         setUpSpinner();
@@ -198,7 +199,7 @@ private PieData getData(boolean forCurrentMonth) {
         List<Account> accountList = mAccountsDbAdapter.getSimpleAccountList(
                 AccountEntry.COLUMN_TYPE + " = ? AND " + AccountEntry.COLUMN_PLACEHOLDER + " = ?",
                 new String[]{ mAccountType.name(), "0" }, null);
-        List<String> uidList = new ArrayList<String>();
+        List<String> uidList = new ArrayList<>();
         for (Account account : accountList) {
             uidList.add(account.getUID());
         }
@@ -213,8 +214,8 @@ private PieData getData(boolean forCurrentMonth) {
 
         double otherSlice = 0;
         PieDataSet dataSet = new PieDataSet(null, "");
-        ArrayList<String> names = new ArrayList<String>();
-        List<String> skipUUID = new ArrayList<String>();
+        List<String> names = new ArrayList<>();
+        List<String> skipUUID = new ArrayList<>();
         for (Account account : getCurrencyCodeToAccountMap(accountList).get(mCurrencyCode)) {
             if (mAccountsDbAdapter.getSubAccountCount(account.getUID()) > 0) {
                 skipUUID.addAll(mAccountsDbAdapter.getDescendantAccountUIDs(account.getUID(), null, null));
@@ -311,9 +312,9 @@ private void setImageButtonEnabled(ImageButton button, boolean enabled) {
      * Sorts the pie's slices in ascending order
      */
     private void bubbleSort() {
-        ArrayList<String> labels = mChart.getData().getXVals();
-        ArrayList<Entry> values = mChart.getData().getDataSet().getYVals();
-        ArrayList<Integer> colors = mChart.getData().getDataSet().getColors();
+        List<String> labels = mChart.getData().getXVals();
+        List<Entry> values = mChart.getData().getDataSet().getYVals();
+        List<Integer> colors = mChart.getData().getDataSet().getColors();
         float tmp1;
         String tmp2;
         Integer tmp3;
@@ -346,7 +347,7 @@ private void bubbleSort() {
      */
     private void setUpSpinner() {
         Spinner spinner = (Spinner) findViewById(R.id.chart_data_spinner);
-        ArrayAdapter<AccountType> dataAdapter = new ArrayAdapter<AccountType>(this,
+        ArrayAdapter<AccountType> dataAdapter = new ArrayAdapter<>(this,
                 android.R.layout.simple_spinner_item,
                 Arrays.asList(AccountType.EXPENSE, AccountType.INCOME));
         dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
@@ -359,7 +360,6 @@ public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l)
                 mLatestTransactionDate = new LocalDateTime(mTransactionsDbAdapter.getTimestampOfLatestTransaction(mAccountType, mCurrencyCode));
                 mChartDate = mLatestTransactionDate;
                 setData(false);
-                mChart.getLegend().setEnabled(false);
             }
 
             @Override
