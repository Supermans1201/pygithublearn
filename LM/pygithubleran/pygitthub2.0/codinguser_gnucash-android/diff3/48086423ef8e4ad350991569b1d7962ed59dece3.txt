From 48086423ef8e4ad350991569b1d7962ed59dece3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sat, 5 Sep 2015 11:49:03 +0200
Subject: [PATCH] Fix line separators.

---
 .../gnucash/android/ui/util/CustomKeyboard.java    | 460 ++++++++++-----------
 1 file changed, 230 insertions(+), 230 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index adc9fda3..c8b6b9d6 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -1,230 +1,230 @@
-/**
- * Copyright 2013 Maarten Pennings extended by SimplicityApks
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * If you use this software in a product, an acknowledgment in the product
- * documentation would be appreciated but is not required.
- */
-
-package org.gnucash.android.ui.util;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.inputmethodservice.Keyboard;
-import android.inputmethodservice.KeyboardView;
-import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
-import android.text.Editable;
-import android.text.InputType;
-import android.text.Layout;
-import android.view.HapticFeedbackConstants;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnFocusChangeListener;
-import android.view.View.OnTouchListener;
-import android.view.WindowManager;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.EditText;
-
-
-/**
- * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
- *
- * @author Maarten Pennings, extended by SimplicityApks
- * @date 2012 December 23
- */
-public class CustomKeyboard {
-
-    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
-    private KeyboardView mKeyboardView;
-    /** A link to the activity that hosts the {@link #mKeyboardView}. */
-    private Activity mHostActivity;
-    private boolean hapticFeedback;
-
-    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
-        @Override
-        public void onKey(int primaryCode, int[] keyCodes) {
-            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
-
-            /*
-            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
-                return;
-            */
-
-            EditText edittext = (EditText) focusCurrent;
-            Editable editable = edittext.getText();
-            int start = edittext.getSelectionStart();
-            // delete the selection, if chars are selected:
-            int end = edittext.getSelectionEnd();
-
-            if (end > start)
-                editable.delete(start, end);
-
-            switch (primaryCode) {
-                case 48:
-                case 49:
-                case 50:
-                case 51:
-                case 52:
-                case 53:
-                case 54:
-                case 55:
-                case 56:
-                case 57:
-                    editable.insert(start, Character.toString((char) primaryCode));
-                    break;
-                case KeyEvent.KEYCODE_BACK:
-                    hideCustomKeyboard();
-                    break;
-                case -5:
-                    editable.delete(start - 1, start);
-            }
-        }
-
-        @Override
-        public void onPress(int arg0) {
-            // vibrate if haptic feedback is enabled:
-            if (hapticFeedback && arg0 != 0)
-                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
-        }
-
-        @Override public void onRelease(int primaryCode) { }
-        @Override public void onText(CharSequence text) { }
-        @Override public void swipeLeft() { }
-        @Override public void swipeRight() { }
-        @Override public void swipeDown() { }
-        @Override public void swipeUp() { }
-    };
-
-    /**
-     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
-     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
-     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
-     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
-     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
-     *
-     * @param host The hosting activity.
-     * @param viewid The id of the KeyboardView.
-     * @param layoutid The id of the xml file containing the keyboard layout.
-     */
-    public CustomKeyboard(Activity host, int viewid, int layoutid) {
-        mHostActivity = host;
-        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
-        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
-        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
-        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
-        // Hide the standard keyboard initially
-        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
-    }
-
-    /** Returns whether the CustomKeyboard is visible. */
-    public boolean isCustomKeyboardVisible() {
-        return mKeyboardView.getVisibility() == View.VISIBLE;
-    }
-
-    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
-    public void showCustomKeyboard(View v) {
-        if (v != null)
-            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
-
-        mKeyboardView.setVisibility(View.VISIBLE);
-        mKeyboardView.setEnabled(true);
-    }
-
-    /** Make the CustomKeyboard invisible. */
-    public void hideCustomKeyboard() {
-        mKeyboardView.setVisibility(View.GONE);
-        mKeyboardView.setEnabled(false);
-    }
-
-    /**
-     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
-     *
-     * @param resid The resource id of the EditText that registers to the custom keyboard.
-     */
-    public void registerEditText(int resid) {
-        // Find the EditText 'resid'
-        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
-        // Make the custom keyboard appear
-        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
-            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (hasFocus)
-                    showCustomKeyboard(v);
-                else
-                    hideCustomKeyboard();
-            }
-        });
-
-        edittext.setOnClickListener(new OnClickListener() {
-            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
-            @Override
-            public void onClick(View v) {
-                showCustomKeyboard(v);
-            }
-        });
-
-        // Disable spell check (hex strings look like words to Android)
-        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
-
-        /**
-         * Try to show cursor the complicated way:
-         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
-         * fixes the cursor not movable bug
-         */
-        OnTouchListener otl = new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (!isCustomKeyboardVisible())
-                    showCustomKeyboard(v);
-
-                /*
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_MOVE:
-                        Layout layout = ((EditText) v).getLayout();
-                        float x = event.getX() + edittext.getScrollX();
-                        int offset = layout.getOffsetForHorizontal(0, x);
-
-                        if (offset > 0)
-                            if (x > layout.getLineMax(0))
-                                edittext.setSelection(offset);     // touch was at the end of the text
-                            else
-                                edittext.setSelection(offset - 1);
-                        break;
-                }
-                */
-
-                edittext.onTouchEvent(event);               // Call native handler
-
-                return false;
-            }
-
-        };
-
-        edittext.setOnTouchListener(otl);
-    }
-
-    /**
-     * Enables or disables the Haptic feedback on keyboard touches
-     * @param goEnabled true if you want haptic feedback, falso otherwise
-     */
-    public void enableHapticFeedback(boolean goEnabled) {
-        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
-        hapticFeedback = goEnabled;
-    }
-}
+/**
+ * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * If you use this software in a product, an acknowledgment in the product
+ * documentation would be appreciated but is not required.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.inputmethodservice.Keyboard;
+import android.inputmethodservice.KeyboardView;
+import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Layout;
+import android.view.HapticFeedbackConstants;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnFocusChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+
+/**
+ * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
+ *
+ * @author Maarten Pennings, extended by SimplicityApks
+ * @date 2012 December 23
+ */
+public class CustomKeyboard {
+
+    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    private KeyboardView mKeyboardView;
+    /** A link to the activity that hosts the {@link #mKeyboardView}. */
+    private Activity mHostActivity;
+    private boolean hapticFeedback;
+
+    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
+        @Override
+        public void onKey(int primaryCode, int[] keyCodes) {
+            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+
+            /*
+            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
+                return;
+            */
+
+            EditText edittext = (EditText) focusCurrent;
+            Editable editable = edittext.getText();
+            int start = edittext.getSelectionStart();
+            // delete the selection, if chars are selected:
+            int end = edittext.getSelectionEnd();
+
+            if (end > start)
+                editable.delete(start, end);
+
+            switch (primaryCode) {
+                case 48:
+                case 49:
+                case 50:
+                case 51:
+                case 52:
+                case 53:
+                case 54:
+                case 55:
+                case 56:
+                case 57:
+                    editable.insert(start, Character.toString((char) primaryCode));
+                    break;
+                case KeyEvent.KEYCODE_BACK:
+                    hideCustomKeyboard();
+                    break;
+                case -5:
+                    editable.delete(start - 1, start);
+            }
+        }
+
+        @Override
+        public void onPress(int arg0) {
+            // vibrate if haptic feedback is enabled:
+            if (hapticFeedback && arg0 != 0)
+                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
+        }
+
+        @Override public void onRelease(int primaryCode) { }
+        @Override public void onText(CharSequence text) { }
+        @Override public void swipeLeft() { }
+        @Override public void swipeRight() { }
+        @Override public void swipeDown() { }
+        @Override public void swipeUp() { }
+    };
+
+    /**
+     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
+     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
+     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
+     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
+     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
+     *
+     * @param host The hosting activity.
+     * @param viewid The id of the KeyboardView.
+     * @param layoutid The id of the xml file containing the keyboard layout.
+     */
+    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+        mHostActivity = host;
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
+        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
+        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
+        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
+        // Hide the standard keyboard initially
+        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+    }
+
+    /** Returns whether the CustomKeyboard is visible. */
+    public boolean isCustomKeyboardVisible() {
+        return mKeyboardView.getVisibility() == View.VISIBLE;
+    }
+
+    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    public void showCustomKeyboard(View v) {
+        if (v != null)
+            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+        mKeyboardView.setVisibility(View.VISIBLE);
+        mKeyboardView.setEnabled(true);
+    }
+
+    /** Make the CustomKeyboard invisible. */
+    public void hideCustomKeyboard() {
+        mKeyboardView.setVisibility(View.GONE);
+        mKeyboardView.setEnabled(false);
+    }
+
+    /**
+     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
+     *
+     * @param resid The resource id of the EditText that registers to the custom keyboard.
+     */
+    public void registerEditText(int resid) {
+        // Find the EditText 'resid'
+        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
+        // Make the custom keyboard appear
+        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    showCustomKeyboard(v);
+                else
+                    hideCustomKeyboard();
+            }
+        });
+
+        edittext.setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        /**
+         * Try to show cursor the complicated way:
+         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
+         * fixes the cursor not movable bug
+         */
+        OnTouchListener otl = new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!isCustomKeyboardVisible())
+                    showCustomKeyboard(v);
+
+                /*
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_MOVE:
+                        Layout layout = ((EditText) v).getLayout();
+                        float x = event.getX() + edittext.getScrollX();
+                        int offset = layout.getOffsetForHorizontal(0, x);
+
+                        if (offset > 0)
+                            if (x > layout.getLineMax(0))
+                                edittext.setSelection(offset);     // touch was at the end of the text
+                            else
+                                edittext.setSelection(offset - 1);
+                        break;
+                }
+                */
+
+                edittext.onTouchEvent(event);               // Call native handler
+
+                return false;
+            }
+
+        };
+
+        edittext.setOnTouchListener(otl);
+    }
+
+    /**
+     * Enables or disables the Haptic feedback on keyboard touches
+     * @param goEnabled true if you want haptic feedback, falso otherwise
+     */
+    public void enableHapticFeedback(boolean goEnabled) {
+        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
+        hapticFeedback = goEnabled;
+    }
+}
