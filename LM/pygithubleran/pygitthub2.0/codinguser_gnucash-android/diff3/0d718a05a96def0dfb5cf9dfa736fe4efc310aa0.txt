From 0d718a05a96def0dfb5cf9dfa736fe4efc310aa0 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sun, 3 Nov 2013 19:35:32 +0100
Subject: [PATCH] Feature: Add, view and delete recurring transactions.
 Transaction can recur daily, monthly or yearly

---
 app/res/layout/activity_transactions.xml           |   2 +-
 app/res/layout/fragment_new_transaction.xml        |  39 +-
 .../fragment_recurring_transactions_list.xml       |  25 ++
 app/res/menu/account_actions.xml                   |   5 +
 app/res/menu/global_actions.xml                    |   2 +-
 app/res/values-de/strings.xml                      |   5 +-
 app/res/values-el/strings.xml                      |   5 +-
 app/res/values-es-rMX/strings.xml                  |   5 +-
 app/res/values-es/strings.xml                      |   5 +-
 app/res/values-fr/strings.xml                      |   5 +-
 app/res/values-hu/strings.xml                      |   5 +-
 app/res/values-it/strings.xml                      |   5 +-
 app/res/values-nb/strings.xml                      |   5 +-
 app/res/values-nl/strings.xml                      |   5 +-
 app/res/values-pt-rBR/strings.xml                  |   5 +-
 app/res/values-ru/strings.xml                      |   3 +
 app/res/values-zh/strings.xml                      | 182 +--------
 app/res/values/dimens.xml                          |   1 +
 app/res/values/strings.xml                         |  18 +-
 app/res/values/styles.xml                          |   9 +-
 app/src/org/gnucash/android/data/Money.java        |  10 +
 app/src/org/gnucash/android/data/Transaction.java  |  90 ++++-
 .../org/gnucash/android/db/DatabaseAdapter.java    |   1 +
 app/src/org/gnucash/android/db/DatabaseHelper.java |  35 +-
 .../gnucash/android/db/TransactionsDbAdapter.java  |  75 +++-
 .../android/receivers/TransactionRecorder.java     |  21 +-
 .../android/ui/accounts/AccountsActivity.java      |  20 +
 .../ui/transactions/NewTransactionFragment.java    |  76 +++-
 .../RecurringTransactionsListFragment.java         | 447 +++++++++++++++++++++
 .../android/util/GnucashAccountXmlHandler.java     |   4 +-
 30 files changed, 864 insertions(+), 251 deletions(-)
 create mode 100644 app/res/layout/fragment_recurring_transactions_list.xml
 create mode 100644 app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java

diff --git a/app/res/layout/activity_transactions.xml b/app/res/layout/activity_transactions.xml
index a8045a07..dbd3bbe1 100644
--- a/app/res/layout/activity_transactions.xml
+++ b/app/res/layout/activity_transactions.xml
@@ -29,7 +29,7 @@
             android:background="@android:color/darker_gray"
             android:textColor="@android:color/white"
             android:visibility="gone"
-            android:text="@string/section_header_accounts"
+            android:text="@string/section_header_subaccounts"
             />
 
     <FrameLayout android:id="@+id/sub_accounts_container"
diff --git a/app/res/layout/fragment_new_transaction.xml b/app/res/layout/fragment_new_transaction.xml
index 847125c4..896ae891 100644
--- a/app/res/layout/fragment_new_transaction.xml
+++ b/app/res/layout/fragment_new_transaction.xml
@@ -30,8 +30,6 @@
 	        android:layout_width="match_parent"
 	        android:layout_height="wrap_content"
 	        android:hint="@string/label_transaction_name"
-	        android:minHeight="?android:attr/listPreferredItemHeight"
-	        android:ems="10" 
 	        android:layout_marginBottom="@dimen/dialog_padding"
 	        android:inputType="textCapSentences"
             android:imeOptions="actionNext"
@@ -40,7 +38,8 @@
 	
 	    <LinearLayout 
 	        android:layout_width="match_parent"
-	        android:layout_height="wrap_content" >
+	        android:layout_height="wrap_content"
+            android:layout_marginBottom="@dimen/form_row_bottom_margin">
 			
 			<TextView
 	            android:id="@+id/currency_symbol"	            
@@ -50,7 +49,6 @@
 	            android:paddingRight="5dp"
 	            android:gravity="center|right"
 	            android:textColor="@color/debit_red"
-	            android:minHeight="?android:attr/listPreferredItemHeight"
 	            android:textSize="22dp"           
 	            android:text="$" />
 	       		 
@@ -59,8 +57,6 @@
 		        android:layout_width="0dp"
 		        android:layout_weight="3"
 		        android:layout_height="wrap_content"
-		        android:minHeight="?android:attr/listPreferredItemHeight"
-		        android:ems="10"
 		        android:layout_marginBottom="@dimen/dialog_padding"
 		        android:hint="@string/label_transaction_amount"
 		        android:inputType="number"
@@ -73,7 +69,6 @@
 		        android:layout_width="0dp"
 		        android:layout_weight="2"
 		        android:layout_height="wrap_content"
-		        android:minHeight="?android:attr/listPreferredItemHeight"		        
 		        android:textOn="@string/label_debit"
 		        android:textOff="@string/label_credit"
 		        android:textAppearance="?android:attr/textAppearanceMedium"
@@ -83,7 +78,7 @@
 		
 	    <LinearLayout android:layout_width="match_parent"
 	        android:layout_height="wrap_content"
-	        android:orientation="vertical" >
+	        style="@style/FormRow" >
 	        
 	        <TextView
 	            android:id="@+id/label_timeanddate"
@@ -111,13 +106,13 @@
 		            android:layout_height="wrap_content"
 			        android:gravity="center"
 			        android:minWidth="120dp"       
-			        style="@style/Dropdown.TextView" />    
+			        style="@style/Dropdown.TextView" />
 			</LinearLayout>
 	    </LinearLayout>
 	   <LinearLayout
 		        android:layout_height="wrap_content"
 		        android:layout_width="match_parent"
-		        android:orientation="vertical">
+                style="@style/FormRow">
 		        
 		        <TextView
 		            android:id="@+id/label_description"
@@ -141,7 +136,7 @@
 			android:id="@+id/layout_double_entry"
 		    android:layout_width="match_parent"
 	        android:layout_height="wrap_content"
-	        android:orientation="vertical" >
+            style="@style/FormRow" >
 	        
 			<TextView
 			    android:text="@string/label_double_entry_account"
@@ -152,8 +147,26 @@
 		    <Spinner
 		        android:id="@+id/input_double_entry_accounts_spinner"        
 		        android:layout_width="match_parent"
-		        android:layout_height="wrap_content" 
-		        android:minHeight="?android:attr/listPreferredItemHeight" />
+		        android:layout_height="wrap_content"  />
 	    </LinearLayout>
+
+        <LinearLayout
+                android:layout_height="wrap_content"
+                android:layout_width="match_parent"
+                style="@style/FormRow">
+            <TextView
+                    android:id="@+id/label_recurring_transaction"
+                    android:text="@string/label_recurring_transaction"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:layout_marginBottom="-8dip"
+                    style="@style/TextAppearance.EditTransaction_LabelSmall" />
+
+            <Spinner android:id="@+id/input_recurring_transaction_spinner"
+                     android:layout_width="match_parent"
+                     android:layout_height="wrap_content"
+                     android:layout_marginBottom="@dimen/dialog_padding"
+                    />
+        </LinearLayout>
 	</LinearLayout>
 </ScrollView>
\ No newline at end of file
diff --git a/app/res/layout/fragment_recurring_transactions_list.xml b/app/res/layout/fragment_recurring_transactions_list.xml
new file mode 100644
index 00000000..3222f404
--- /dev/null
+++ b/app/res/layout/fragment_recurring_transactions_list.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+    <ListView
+              android:id="@id/android:list"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:layout_above="@id/transactions_sum_bar"
+              android:listSelector="@drawable/abs__list_selector_holo_light"
+              android:drawSelectorOnTop="false"/>
+
+    <TextView android:id="@id/android:empty"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center"
+            android:text="@string/label_no_recurring_transactions"
+            android:layout_gravity="center"
+            android:textAppearance="?android:textAppearanceLarge"
+            style="@style/ListItem"/>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/res/menu/account_actions.xml b/app/res/menu/account_actions.xml
index 61101df1..54cd6479 100644
--- a/app/res/menu/account_actions.xml
+++ b/app/res/menu/account_actions.xml
@@ -26,4 +26,9 @@
           android:title="@string/menu_export_transactions"
           android:showAsAction="never"
           android:orderInCategory="3"/>
+
+    <item android:id="@+id/menu_recurring_transactions"
+          android:title="Recurring Transactions"
+          android:showAsAction="never|withText"
+          android:orderInCategory="4" />
 </menu>
\ No newline at end of file
diff --git a/app/res/menu/global_actions.xml b/app/res/menu/global_actions.xml
index 8203ecc0..88c2246b 100644
--- a/app/res/menu/global_actions.xml
+++ b/app/res/menu/global_actions.xml
@@ -27,5 +27,5 @@
           android:icon="@drawable/action_settings"
           android:title="@string/title_settings"
           android:showAsAction="never"
-          android:orderInCategory="4"/>
+          android:orderInCategory="10"/>
 </menu>
\ No newline at end of file
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index f6ecd346..a345c590 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -338,14 +338,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Ausgleichskonto</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 9d407c54..2981624f 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -352,14 +352,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 29350cb1..fd47ce94 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -336,14 +336,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index eb3f7e23..fd587c00 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -336,14 +336,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index f7b2f3a0..dde1f202 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -334,14 +334,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index cf65d343..546bc129 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -337,14 +337,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 2a90f25c..d2545f5f 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -337,14 +337,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 601ad206..86a3aaaa 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -339,14 +339,17 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 42ec42b0..21e347f2 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -338,14 +338,17 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 851de696..c1b33e4c 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -336,14 +336,17 @@
     <string name="title_progress_importing_accounts">Importando contas</string>
     <string name="toast_tap_again_to_confirm_delete">Toque novamente para confirmar. TODAS as entradas sero deletadas!!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index f2f33dbd..dc031007 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -339,9 +339,12 @@
     <string name="title_default_export_format">   </string>
     <string name="summary_default_export_format"> ,     </string>
     <string name="menu_export_transactions"> ...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name"></string>
     <string name="title_progress_exporting_transactions"> </string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index fdbb7605..cd569de1 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -257,183 +257,6 @@
         <item></item>
         <item>Zloty</item>
     </string-array>
-    <string-array name="currency_codes">
-        <item>AFN</item>
-        <item>DZD</item>
-        <item>ARS</item>
-        <item>AMD</item>
-        <item>AWG</item>
-        <item>AUD</item>
-        <item>AZN</item>
-        <item>BSD</item>
-        <item>BHD</item>
-        <item>THB</item>
-        <item>PAB</item>
-        <item>BBD</item>
-        <item>BYR</item>
-        <item>BZD</item>
-        <item>BMD</item>
-        <item>VEF</item>
-        <item>BOB</item>
-        <item>BRL</item>
-        <item>BND</item>
-        <item>BGN</item>
-        <item>BIF</item>
-        <item>CAD</item>
-        <item>CVE</item>
-        <item>KYD</item>
-        <item>XOF</item>
-        <item>XAF</item>
-        <item>XPF</item>
-        <item>CLP</item>
-        <item>XTS</item>
-        <item>COP</item>
-        <item>KMF</item>
-        <item>CDF</item>
-        <item>BAM</item>
-        <item>NIO</item>
-        <item>CRC</item>
-        <item>HRK</item>
-        <item>CUP</item>
-        <item>CZK</item>
-        <item>GMD</item>
-        <item>DKK</item>
-        <item>MKD</item>
-        <item>DJF</item>
-        <item>STD</item>
-        <item>DOP</item>
-        <item>VND</item>
-        <item>XCD</item>
-        <item>EGP</item>
-        <item>SVC</item>
-        <item>ETB</item>
-        <item>EUR</item>
-        <item>FKP</item>
-        <item>FJD</item>
-        <item>HUF</item>
-        <item>GHS</item>
-        <item>GIP</item>
-        <item>XAU</item>
-        <item>HTG</item>
-        <item>PYG</item>
-        <item>GNF</item>
-        <item>GYD</item>
-        <item>HKD</item>
-        <item>UAH</item>
-        <item>ISK</item>
-        <item>INR</item>
-        <item>IRR</item>
-        <item>IQD</item>
-        <item>JMD</item>
-        <item>JOD</item>
-        <item>KES</item>
-        <item>PGK</item>
-        <item>LAK</item>
-        <item>KWD</item>
-        <item>MWK</item>
-        <item>AOA</item>
-        <item>MMK</item>
-        <item>GEL</item>
-        <item>LVL</item>
-        <item>LBP</item>
-        <item>ALL</item>
-        <item>HNL</item>
-        <item>SLL</item>
-        <item>LRD</item>
-        <item>LYD</item>
-        <item>SZL</item>
-        <item>LTL</item>
-        <item>LSL</item>
-        <item>MGA</item>
-        <item>MYR</item>
-        <item>MUR</item>
-        <item>MXN</item>
-        <item>MXV</item>
-        <item>MDL</item>
-        <item>MAD</item>
-        <item>MZN</item>
-        <item>BOV</item>
-        <item>NGN</item>
-        <item>ERN</item>
-        <item>NAD</item>
-        <item>NPR</item>
-        <item>ANG</item>
-        <item>ILS</item>
-        <item>RON</item>
-        <item>TWD</item>
-        <item>NZD</item>
-        <item>BTN</item>
-        <item>KPW</item>
-        <item>NOK</item>
-        <item>PEN</item>
-        <item>MRO</item>
-        <item>TOP</item>
-        <item>PKR</item>
-        <item>XPD</item>
-        <item>MOP</item>
-        <item>CUC</item>
-        <item>UYU</item>
-        <item>PHP</item>
-        <item>XPT</item>
-        <item>GBP</item>
-        <item>BWP</item>
-        <item>QAR</item>
-        <item>GTQ</item>
-        <item>ZAR</item>
-        <item>OMR</item>
-        <item>KHR</item>
-        <item>MVR</item>
-        <item>IDR</item>
-        <item>RUB</item>
-        <item>RWF</item>
-        <item>SHP</item>
-        <item>SAR</item>
-        <item>XDR</item>
-        <item>RSD</item>
-        <item>SCR</item>
-        <item>XAG</item>
-        <item>SGD</item>
-        <item>SBD</item>
-        <item>KGS</item>
-        <item>SOS</item>
-        <item>TJS</item>
-        <item>SSP</item>
-        <item>LKR</item>
-        <item>XSU</item>
-        <item>SDG</item>
-        <item>SRD</item>
-        <item>SEK</item>
-        <item>CHF</item>
-        <item>SYP</item>
-        <item>BDT</item>
-        <item>WST</item>
-        <item>TZS</item>
-        <item>KZT</item>
-        <item>XXX</item>
-        <item>TTD</item>
-        <item>MNT</item>
-        <item>TND</item>
-        <item>TRY</item>
-        <item>TMT</item>
-        <item>AED</item>
-        <item>UGX</item>
-        <item>XFU</item>
-        <item>COU</item>
-        <item>CLF</item>
-        <item>UYI</item>
-        <item>USD</item>
-        <item>UZS</item>
-        <item>VUV</item>
-        <item>CHE</item>
-        <item>CHW</item>
-        <item>KRW</item>
-        <item>YER</item>
-        <item>JPY</item>
-        <item>CNY</item>
-        <item>ZMK</item>
-        <item>ZWL</item>
-        <item>PLN</item>
-    </string-array>
     <string-array name="default_accounts">
         <item></item>
         <item></item>
@@ -511,14 +334,17 @@
     <string name="title_progress_importing_accounts"></string>
     <string name="toast_tap_again_to_confirm_delete"></string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
diff --git a/app/res/values/dimens.xml b/app/res/values/dimens.xml
index d54c0e94..7b59c18a 100644
--- a/app/res/values/dimens.xml
+++ b/app/res/values/dimens.xml
@@ -25,4 +25,5 @@
     <dimen name="edge_padding">12dp</dimen>
     <dimen name="widget_margin">8dp</dimen>
     <dimen name="section_header_height">20dp</dimen>
+    <dimen name="form_row_bottom_margin">10dp</dimen>
 </resources>
\ No newline at end of file
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 7e883163..dfd87cf2 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -534,15 +534,19 @@
     <string name="title_progress_importing_accounts">Importing accounts</string>
     <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
     <string name="section_header_transactions">Transactions</string>
-    <string name="section_header_accounts">Sub-Accounts</string>
+    <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="key_default_export_format">default_export_format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
+    <string name="key_recurring_transaction_ids">recurring_transaction_ids</string>
+    <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+    <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
@@ -585,4 +589,16 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <string-array name="recurrence_entries">
+        <item>NONE</item>
+        <item>DAILY</item>
+        <item>WEEKLY</item>
+        <item>MONTHLY</item>
+    </string-array>
+    <string-array name="recurrence_options">
+        <item>0</item>
+        <item>86400000</item>
+        <item>604800000</item>
+        <item>2630000000</item>
+    </string-array>
 </resources>
diff --git a/app/res/values/styles.xml b/app/res/values/styles.xml
index 5cb3cbfb..cd484ec6 100644
--- a/app/res/values/styles.xml
+++ b/app/res/values/styles.xml
@@ -38,9 +38,7 @@
     </style>
     
     <style name="Dropdown.TextView" parent="@style/Widget.Sherlock.Spinner.DropDown.ActionBar">
-        <item name="android:textSize">22dp</item>
-        <item name="android:minHeight">?android:attr/listPreferredItemHeight</item>
-        <item name="android:textAppearance">?android:attr/textAppearanceLarge</item>
+        <item name="android:textAppearance">?android:attr/textAppearanceMedium</item>
     </style>
     
     <style name="ButtonStyle">
@@ -87,4 +85,9 @@
 
     <style name="Dialog.WidgetConfiguration" parent="android:Theme.Dialog">
     </style>
+
+    <style name="FormRow">
+        <item name="android:orientation">vertical</item>
+        <item name="android:layout_marginBottom">@dimen/form_row_bottom_margin</item>
+    </style>
 </resources>
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/data/Money.java b/app/src/org/gnucash/android/data/Money.java
index 068125b4..825fd326 100644
--- a/app/src/org/gnucash/android/data/Money.java
+++ b/app/src/org/gnucash/android/data/Money.java
@@ -159,6 +159,16 @@ public Money(BigDecimal amount){
 	}
 
     /**
+     * Copy constructor.
+     * Creates a new Money object which is a clone of <code>money</code>
+     * @param money Money instance to be cloned
+     */
+    public Money(Money money){
+        setAmount(money.asBigDecimal());
+        setCurrency(money.getCurrency());
+    }
+
+    /**
      * Creates a new Money instance with 0 amount and the <code>currencyCode</code>
      * @param currencyCode Currency to use for this money instance
      * @return Money object with value 0 and currency <code>currencyCode</code>
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index 17349499..991ccb46 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -22,7 +22,6 @@
 import java.util.Locale;
 import java.util.UUID;
 
-import android.content.Context;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.data.Account.OfxAccountType;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -40,7 +39,8 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class Transaction {
-	/**
+
+    /**
 	 * Type of transaction, a credit or a debit
 	 */
 	public enum TransactionType {DEBIT, CREDIT};
@@ -65,7 +65,13 @@
 	 * Key for identifying the amount of the transaction through an Intent
 	 */
 	public static final String EXTRA_AMOUNT 		= "org.gnucash.android.extra.amount";
-	
+
+    /**
+     * Extra key for the transaction type.
+     * This value should typically be set by calling {@link Transaction.TransactionType#name()}
+     */
+    public static final String EXTRA_TRANSACTION_TYPE = "org.gnucash.android.extra.transaction_type";
+
 	/**
 	 * {@link Money} value of this transaction
 	 */
@@ -114,7 +120,14 @@
 	 * @see TransactionType
 	 */
 	private TransactionType mType = TransactionType.DEBIT;
-	
+
+    /**
+     * Recurrence period of this transaction.
+     * <p>If this value is set then it means this transaction is a template which will be used to
+     * create a transaction every turn of the recurrence period</p>
+     */
+    private long mRecurrencePeriod = 0;
+
 	/**
 	 * Overloaded constructor. Creates a new transaction instance with the 
 	 * provided data and initializes the rest to default values. 
@@ -152,7 +165,25 @@ public Transaction(Money amount, String name, TransactionType type){
 		this.mType = type;
 		this.mName = name;
 	}
-	
+
+    /**
+     * Copy constructor.
+     * Creates a new transaction object which is a clone of the parameter.
+     * <p><b>Note:</b> The unique ID of the transaction is not cloned, but a new one is generated.</p>
+     * @param transaction Transaction to be cloned
+     */
+    public Transaction(Transaction transaction){
+        initDefaults();
+        setName(transaction.getName());
+        setDescription(transaction.getDescription());
+        setAmount(transaction.getAmount());
+        setTransactionType(transaction.getTransactionType());
+        setAccountUID(transaction.getAccountUID());
+        setDoubleEntryAccountUID(transaction.getDoubleEntryAccountUID());
+        setExported(transaction.isExported());
+        setTime(transaction.getTimeMillis());
+    }
+
 	/**
 	 * Initializes the different fields to their default values.
 	 */
@@ -169,8 +200,7 @@ private void initDefaults(){
 	 * @param amount Amount of the transaction
 	 */
 	public void setAmount(Money amount) {
-		this.mAmount = amount;
-		mType = amount.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT; 
+		this.mAmount = new Money(amount);
 	}
 
 	/**
@@ -307,6 +337,12 @@ public void setUID(String transactionUID) {
 		this.mTransactionUID = transactionUID;
 	}
 
+    /**
+     * Resets the UID of this transaction to a newly generated one
+     */
+    public void resetUID(){
+        this.mTransactionUID = UUID.randomUUID().toString();
+    }
 	/**
 	 * Returns unique ID string for transaction
 	 * @return String with Unique ID of transaction
@@ -363,8 +399,24 @@ public boolean isExported(){
 	public void setAccountUID(String accountUID) {
 		this.mAccountUID = accountUID;
 	}
-	
-	/**
+
+    /**
+     * Returns the recurrence period for this transaction
+     * @return Recurrence period for this transaction in milliseconds
+     */
+    public long getRecurrencePeriod() {
+        return mRecurrencePeriod;
+    }
+
+    /**
+     * Sets the recurrence period for this transaction
+     * @param recurrenceId Recurrence period in milliseconds
+     */
+    public void setRecurrencePeriod(long recurrenceId) {
+        this.mRecurrencePeriod = recurrenceId;
+    }
+
+    /**
 	 * Converts transaction to XML DOM corresponding to OFX Statement transaction and 
 	 * returns the element node for the transaction.
 	 * The Unique ID of the account is needed in order to properly export double entry transactions
@@ -461,4 +513,24 @@ public String toQIF(){
         accountsDbAdapter.close();
         return transactionQifBuffer.toString();
     }
+
+    /**
+     * Creates an Intent with arguments from the <code>transaction</code>.
+     * This intent can be broadcast to create a new transaction
+     * @param transaction Transaction used to create intent
+     * @return
+     */
+    public static Intent createIntent(Transaction transaction){
+        Intent intent = new Intent(Intent.ACTION_INSERT);
+        intent.setType(Transaction.MIME_TYPE);
+        intent.putExtra(Intent.EXTRA_TITLE, transaction.getName());
+        intent.putExtra(Intent.EXTRA_TEXT, transaction.getDescription());
+        intent.putExtra(EXTRA_AMOUNT, transaction.getAmount().asBigDecimal());
+        intent.putExtra(EXTRA_ACCOUNT_UID, transaction.getAccountUID());
+        intent.putExtra(EXTRA_DOUBLE_ACCOUNT_UID, transaction.getDoubleEntryAccountUID());
+        intent.putExtra(Account.EXTRA_CURRENCY_CODE, transaction.getAmount().getCurrency().getCurrencyCode());
+        intent.putExtra(EXTRA_TRANSACTION_TYPE, transaction.getTransactionType().name());
+        return intent;
+    }
+
 }
diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 88da4d42..d5997965 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -49,6 +49,7 @@
 	public static final int COLUMN_ACCOUNT_UID 	= 7;
 	public static final int COLUMN_EXPORTED 	= 8;
 	public static final int COLUMN_DOUBLE_ENTRY_ACCOUNT_UID = 9;
+    public static final int COLUMN_RECURRENCE_PERIOD = 10;
 	
 	//columns indices specific to accounts
 	public static final int COLUMN_CURRENCY_CODE        = 4;
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index c1efe90a..73ae65d6 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -46,7 +46,7 @@
 	 * Database version.
 	 * With any change to the database schema, this number must increase
 	 */
-	private static final int DATABASE_VERSION = 3;
+	private static final int DATABASE_VERSION = 4;
 	
 	/**
 	 * Name of accounts table
@@ -124,8 +124,17 @@
 	 */
 	public static final String KEY_EXPORTED		= "is_exported";
 
+    /**
+     * Flag for placeholder accounts.
+     * Placeholder accounts cannot directly contain transactions
+     */
     public static final String KEY_PLACEHOLDER  = "is_placeholder";
 
+    /**
+     * This is a key to identify a transaction as part of a recurring transaction series.
+     */
+    public static final String KEY_RECURRENCE_PERIOD = "recurrence_period";
+
 	/**********************************************************************************************************
 	//if you modify the order of the columns (i.e. the way they are created), 
 	//make sure to modify the indices in DatabaseAdapter
@@ -159,6 +168,7 @@
 			+ KEY_ACCOUNT_UID 	+ " varchar(255) not null, "			
 			+ KEY_EXPORTED 		+ " tinyint default 0, "
 			+ KEY_DOUBLE_ENTRY_ACCOUNT_UID 	+ " varchar(255), "
+            + KEY_RECURRENCE_PERIOD         + " integer default 0, "
 			+ "FOREIGN KEY (" 	+ KEY_ACCOUNT_UID + ") REFERENCES " + ACCOUNTS_TABLE_NAME + " (" + KEY_UID + "), "
 			+ "FOREIGN KEY (" 	+ KEY_DOUBLE_ENTRY_ACCOUNT_UID + ") REFERENCES " + ACCOUNTS_TABLE_NAME + " (" + KEY_UID + "), "
 			+ "UNIQUE (" 		+ KEY_UID + ") " 
@@ -199,14 +209,15 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 	
 				db.execSQL(addColumnSql);
 				db.execSQL(addParentAccountSql);
-			}
+
+                //update account types to GnuCash account types
+                //since all were previously CHECKING, now all will be CASH
+                Log.i(TAG, "Converting account types to GnuCash compatible types");
+                ContentValues cv = new ContentValues();
+                cv.put(KEY_TYPE, AccountType.CASH.toString());
+                db.update(ACCOUNTS_TABLE_NAME, cv, null, null);
+            }
 			
-			//update account types to GnuCash account types
-			//since all were previously CHECKING, now all will be CASH
-			Log.i(TAG, "Converting account types to GnuCash compatible types");
-			ContentValues cv = new ContentValues();
-			cv.put(KEY_TYPE, AccountType.CASH.toString());
-			db.update(ACCOUNTS_TABLE_NAME, cv, null, null);
 
             if (oldVersion == 2 && newVersion == 3){
                 Log.i(TAG, "Adding flag for placeholder accounts");
@@ -215,9 +226,15 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
                 db.execSQL(addPlaceHolderAccountFlagSql);
             }
+
+            if (oldVersion == 3 && newVersion == 4){
+                Log.i(TAG, "Updating database to version 4");
+                String addRecurrencePeriod = "ALTER TABLE " + TRANSACTIONS_TABLE_NAME +
+                        " ADD COLUMN " + KEY_RECURRENCE_PERIOD + " integer default 0";
+                db.execSQL(addRecurrencePeriod);
+            }
 		} else {
 			Log.i(TAG, "Cannot downgrade database.");
 		}
 	}
-
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index c25be1e1..ac44ebe4 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -21,6 +21,7 @@
 import java.util.Currency;
 import java.util.List;
 
+import com.sun.swing.internal.plaf.metal.resources.metal_pt_BR;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.data.Transaction;
@@ -66,7 +67,8 @@ public long addTransaction(Transaction transaction){
 		contentValues.put(DatabaseHelper.KEY_DESCRIPTION, transaction.getDescription());
 		contentValues.put(DatabaseHelper.KEY_EXPORTED, transaction.isExported() ? 1 : 0);
 		contentValues.put(DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID, transaction.getDoubleEntryAccountUID());
-		
+		contentValues.put(DatabaseHelper.KEY_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
+
 		long rowId = -1;
 		if ((rowId = fetchTransactionWithUID(transaction.getUID())) > 0){
 			//if transaction already exists, then just update
@@ -127,15 +129,33 @@ public Transaction getTransaction(long rowId){
 	 * @return Cursor holding set of transactions for particular account
 	 */
 	public Cursor fetchAllTransactionsForAccount(String accountUID){
+        //fetch transactions from this account except recurring transactions. Those have their own view
 		Cursor cursor = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
 				null, 
-				"(" + DatabaseHelper.KEY_ACCOUNT_UID + " = '" + accountUID + "') "
-				+ "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' )", 
+				"((" + DatabaseHelper.KEY_ACCOUNT_UID + " = '" + accountUID + "') "
+				+ "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' ))"
+                + " AND " + DatabaseHelper.KEY_RECURRENCE_PERIOD + " = 0",
 				null, null, null, DatabaseHelper.KEY_TIMESTAMP + " DESC");
-		
+
 		return cursor;
 	}
-	
+
+    /**
+     * Fetches all recurring transactions from the database.
+     * <p>These transactions are not considered "normal" transactions, but only serve to note recurring transactions.
+     * They are not considered when computing account balances</p>
+     * @return Cursor holding set of all recurring transactions
+     */
+    public Cursor fetchAllRecurringTransactions(){
+        Cursor cursor = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
+                null,
+                DatabaseHelper.KEY_RECURRENCE_PERIOD + "!= 0",
+                null, null, null,
+                DatabaseHelper.KEY_ACCOUNT_UID + " ASC, " + DatabaseHelper.KEY_RECURRENCE_PERIOD + " ASC");
+//                DatabaseHelper.KEY_RECURRENCE_PERIOD + " ASC, " + DatabaseHelper.KEY_TIMESTAMP + " DESC");
+        return cursor;
+    }
+
 	/**
 	 * Returns a cursor to a set of all transactions for the account with ID <code>accountID</code>
 	 * or for which this account is the origin account in a double entry
@@ -184,6 +204,7 @@ public Transaction buildTransactionInstance(Cursor c){
 		String amount = c.getString(DatabaseAdapter.COLUMN_AMOUNT);
 		Money moneyAmount = new Money(new BigDecimal(amount), currency);
 		String name   = c.getString(DatabaseAdapter.COLUMN_NAME);
+        long recurrencePeriod = c.getLong(DatabaseAdapter.COLUMN_RECURRENCE_PERIOD);
 		
 		Transaction transaction = new Transaction(moneyAmount, name);
 		transaction.setUID(c.getString(DatabaseAdapter.COLUMN_UID));
@@ -192,6 +213,7 @@ public Transaction buildTransactionInstance(Cursor c){
 		transaction.setDescription(c.getString(DatabaseAdapter.COLUMN_DESCRIPTION));
 		transaction.setExported(c.getInt(DatabaseAdapter.COLUMN_EXPORTED) == 1);
 		transaction.setDoubleEntryAccountUID(doubleAccountUID);
+        transaction.setRecurrencePeriod(recurrencePeriod);
 		
 		return transaction;
 	}
@@ -318,7 +340,8 @@ public Money getTransactionsSum(long accountId){
 
         String querySum = "SELECT TOTAL(" + DatabaseHelper.KEY_AMOUNT
                 + ") FROM " + DatabaseHelper.TRANSACTIONS_TABLE_NAME
-                + " WHERE " + DatabaseHelper.KEY_ACCOUNT_UID + " = ?";
+                + " WHERE " + DatabaseHelper.KEY_ACCOUNT_UID + " = ? AND "
+                + DatabaseHelper.KEY_RECURRENCE_PERIOD + "=0";
 
         Cursor sumCursor = mDb.rawQuery(querySum, new String[]{accountUID});
         double sum = 0d;
@@ -330,7 +353,8 @@ public Money getTransactionsSum(long accountId){
 
         querySum = "SELECT TOTAL(" + DatabaseHelper.KEY_AMOUNT
                 + ") FROM " + DatabaseHelper.TRANSACTIONS_TABLE_NAME
-                + " WHERE " + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = ?";
+                + " WHERE " + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = ? AND "
+                + DatabaseHelper.KEY_RECURRENCE_PERIOD + "=0";
 
         sumCursor = mDb.rawQuery(querySum, new String[]{accountUID});
 
@@ -408,6 +432,25 @@ public String getAccountUID(long accountRowID){
 		return uid;
 	}
 
+    /**
+     * Returns Unique Identifier of account to which <code>transaction</code> belongs
+     * @param transactionID Record ID of the transaction
+     * @return Unique Identifier string of account to which transaction belongs
+     */
+    public String getAccountUidFromTransaction(long transactionID){
+        Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
+                new String[]{DatabaseHelper.KEY_ACCOUNT_UID},
+                DatabaseHelper.KEY_ROW_ID + "=" + transactionID,
+                null, null, null, null);
+        String accountUID = null;
+        if (c != null && c.moveToFirst()){
+            accountUID = c.getString(0);
+            c.close();
+        }
+
+        return accountUID;
+    }
+
 	/**
 	 * Returns the database row Id of the account with unique Identifier <code>accountUID</code>
 	 * @param accountUID Unique identifier of the account
@@ -426,6 +469,24 @@ public long getAccountID(String accountUID){
 		return id;
 	}
 
+    /**
+     * Returns the database record ID for the specified transaction UID
+     * @param transactionUID Unique idendtifier of the transaction
+     * @return Database record ID for the transaction
+     */
+    public long getID(String transactionUID){
+        long id = -1;
+        Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
+                new String[]{DatabaseHelper.KEY_ROW_ID},
+                DatabaseHelper.KEY_UID + "='" + transactionUID + "'",
+                null, null, null, null);
+        if (c != null && c.moveToFirst()){
+            id = c.getLong(0);
+            c.close();
+        }
+        return id;
+    }
+
     @Override
     public Cursor fetchAllRecords() {
         return fetchAllRecords(DatabaseHelper.TRANSACTIONS_TABLE_NAME);
diff --git a/app/src/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/org/gnucash/android/receivers/TransactionRecorder.java
index c0dbf13e..2aa0e323 100644
--- a/app/src/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/org/gnucash/android/receivers/TransactionRecorder.java
@@ -23,6 +23,9 @@
 import org.gnucash.android.data.Money;
 import org.gnucash.android.data.Transaction;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ofx.OfxExporter;
+import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 import android.content.BroadcastReceiver;
@@ -46,28 +49,32 @@
 
 	@Override
 	public void onReceive(Context context, Intent intent) {
-		Log.i("Gnucash", "Received transaction recording intent");
+		Log.i("TransactionRecorder", "Received transaction recording intent");
 		Bundle args = intent.getExtras();
 		String name = args.getString(Intent.EXTRA_TITLE);
 		String note = args.getString(Intent.EXTRA_TEXT);
-		double amountDouble = args.getDouble(Transaction.EXTRA_AMOUNT, 0);
+		BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
 		String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);
 		if (currencyCode == null)
 			currencyCode = Money.DEFAULT_CURRENCY_CODE;
 		
 		String accountUID = args.getString(Transaction.EXTRA_ACCOUNT_UID);
-		if (accountUID == null)
-			accountUID = "uncategorized";
+		if (accountUID == null) //if no account was assigned, throw an exception
+			throw new IllegalArgumentException("No account specified for the transaction");
 		
 		String doubleAccountUID = args.getString(Transaction.EXTRA_DOUBLE_ACCOUNT_UID);
-		
-		Money amount = new Money(new BigDecimal(amountDouble), Currency.getInstance(currencyCode));
+        if (doubleAccountUID == null || doubleAccountUID.length() == 0)
+            doubleAccountUID = QifHelper.getImbalanceAccountName(Currency.getInstance(Money.DEFAULT_CURRENCY_CODE));
+		Transaction.TransactionType type = Transaction.TransactionType.valueOf(args.getString(Transaction.EXTRA_TRANSACTION_TYPE));
+
+		Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
 		Transaction transaction = new Transaction(amount, name);
 		transaction.setTime(System.currentTimeMillis());
 		transaction.setDescription(note);	
 		transaction.setAccountUID(accountUID);
 		transaction.setDoubleEntryAccountUID(doubleAccountUID);
-		
+		transaction.setTransactionType(type);
+
 		TransactionsDbAdapter transacionsDbAdapter = new TransactionsDbAdapter(context);
 		transacionsDbAdapter.addTransaction(transaction);
 		
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index b2ae56f9..78de6c48 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -44,6 +44,7 @@
 import org.gnucash.android.data.Account.AccountType;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.ui.transactions.RecurringTransactionsListFragment;
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
 import org.gnucash.android.util.GnucashAccountXmlHandler;
@@ -223,6 +224,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	        }
 	        return true;
 
+            case R.id.menu_recurring_transactions:
+                showRecurringTransactionsFragment();
+                return true;
 		default:
 			return false;
 		}
@@ -239,6 +243,22 @@ private void showAddAccountFragment(long parentAccountId){
     }
 
     /**
+     * Launches the fragment which lists the recurring transactions in the database
+     */
+    private void showRecurringTransactionsFragment(){
+        FragmentManager fragmentManager = getSupportFragmentManager();
+        FragmentTransaction fragmentTransaction = fragmentManager
+                .beginTransaction();
+
+        RecurringTransactionsListFragment recurringTransactionsFragment = new RecurringTransactionsListFragment();
+
+        fragmentTransaction.replace(R.id.fragment_container,
+                recurringTransactionsFragment, "fragment_recurring_transactions");
+
+        fragmentTransaction.addToBackStack(null);
+        fragmentTransaction.commit();
+    }
+    /**
      * Shows the form fragment for editing the account with record ID <code>accountId</code>
      * @param accountId Record ID of the account to be edited
      */
diff --git a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index d9bb5d40..e64cc71a 100644
--- a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,8 @@
 import java.text.ParseException;
 import java.util.*;
 
+import android.app.AlarmManager;
+import android.app.PendingIntent;
 import android.widget.*;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
@@ -180,6 +182,9 @@
      */
     Account.AccountType mAccountType;
 
+
+    Spinner mRecurringTransactionSpinner;
+
 	/**
 	 * Create the view and retrieve references to the UI elements
 	 */
@@ -196,7 +201,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		mCurrencyTextView = (TextView) v.findViewById(R.id.currency_symbol);
 		mTransactionTypeButton = (ToggleButton) v.findViewById(R.id.input_transaction_type);
 		mDoubleAccountSpinner = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
-		
+
+        mRecurringTransactionSpinner = (Spinner) v.findViewById(R.id.input_recurring_transaction_spinner);
 		return v;
 	}
 	
@@ -214,11 +220,16 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		if (!mUseDoubleEntry){
 			getView().findViewById(R.id.layout_double_entry).setVisibility(View.GONE);
 		}
-		
+
 		//updateTransferAccountsList must only be called after creating mAccountsDbAdapter
 		mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
 		updateTransferAccountsList();
-		
+
+        ArrayAdapter<CharSequence> recurrenceAdapter = ArrayAdapter.createFromResource(getActivity(),
+                R.array.recurrence_entries, android.R.layout.simple_spinner_item);
+        recurrenceAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        mRecurringTransactionSpinner.setAdapter(recurrenceAdapter);
+
         long transactionId = getArguments().getLong(SELECTED_TRANSACTION_ID);
 		mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
 		mTransaction = mTransactionsDbAdapter.getTransaction(transactionId);
@@ -240,6 +251,10 @@ public void onActivityCreated(Bundle savedInstanceState) {
         initTransactionNameAutocomplete();
 	}
 
+    /**
+     * Toggles the state transaction type button in response to the type of account.
+     * Different types of accounts handle CREDITS/DEBITS differently
+     */
     private void toggleTransactionTypeState() {
         switch (mAccountType) {
             case ASSET:
@@ -331,9 +346,31 @@ private void initializeViewsWithTransaction(){
 		String code = mTransactionsDbAdapter.getCurrencyCode(accountId);
 		Currency accountCurrency = Currency.getInstance(code);
 		mCurrencyTextView.setText(accountCurrency.getSymbol());
-	}
-	
-	/**
+
+        setSelectedRecurrenceOption();
+    }
+
+    /**
+     * Initializes the recurrence spinner to the appropriate value from the transaction.
+     * This is only used when the transaction is a recurrence transaction
+     */
+    private void setSelectedRecurrenceOption() {
+        //init recurrence options
+        final long recurrencePeriod = mTransaction.getRecurrencePeriod();
+        if (recurrencePeriod > 0){
+            String[] recurrenceOptions = getResources().getStringArray(R.array.recurrence_options);
+
+            int selectionIndex = 0;
+            for (String recurrenceOption : recurrenceOptions) {
+                if (recurrencePeriod == Long.parseLong(recurrenceOption))
+                    break;
+                selectionIndex++;
+            }
+            mRecurringTransactionSpinner.setSelection(selectionIndex);
+        }
+    }
+
+    /**
 	 * Initialize views with default data for new transactions
 	 */
 	private void initalizeViews() {
@@ -551,10 +588,27 @@ private void saveNewTransaction() {
 				mTransaction.setDoubleEntryAccountUID(mTransactionsDbAdapter.getAccountUID(doubleAccountId));
 			}
 		}
-		
-		
-		mTransactionsDbAdapter.addTransaction(mTransaction);
-		
+        //save the normal transaction first
+        mTransactionsDbAdapter.addTransaction(mTransaction);
+
+        //set up recurring transaction if requested
+        int recurrenceIndex = mRecurringTransactionSpinner.getSelectedItemPosition();
+        if (recurrenceIndex != 0) {
+            String[] recurrenceOptions = getResources().getStringArray(R.array.recurrence_options);
+            long recurrencePeriodMillis = Long.parseLong(recurrenceOptions[recurrenceIndex]);
+            long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
+
+            Transaction recurringTransaction = new Transaction(mTransaction);
+            recurringTransaction.setRecurrencePeriod(recurrencePeriodMillis);
+            long recurringTransactionId = mTransactionsDbAdapter.addTransaction(recurringTransaction);
+
+            PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(getActivity().getApplicationContext(),
+                    (int)recurringTransactionId, Transaction.createIntent(mTransaction), PendingIntent.FLAG_UPDATE_CURRENT);
+            AlarmManager alarmManager = (AlarmManager) getActivity().getSystemService(Context.ALARM_SERVICE);
+            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, firstRunMillis,
+                    recurrencePeriodMillis, recurringPendingIntent);
+        }
+
 		//update widgets, if any
 		WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
 		
diff --git a/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java
new file mode 100644
index 00000000..892b1b7e
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java
@@ -0,0 +1,447 @@
+/*
+ * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.transactions;
+
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.graphics.Rect;
+import android.os.Bundle;
+import android.support.v4.app.LoaderManager;
+import android.support.v4.content.Loader;
+import android.support.v4.widget.SimpleCursorAdapter;
+import android.util.Log;
+import android.util.SparseBooleanArray;
+import android.view.LayoutInflater;
+import android.view.TouchDelegate;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.*;
+import com.actionbarsherlock.app.ActionBar;
+import com.actionbarsherlock.app.SherlockListFragment;
+import com.actionbarsherlock.view.ActionMode;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+import org.gnucash.android.R;
+import org.gnucash.android.data.Money;
+import org.gnucash.android.data.Transaction;
+import org.gnucash.android.db.*;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+
+import java.util.Locale;
+
+/**
+ * Fragment which displays the recurring transactions in the system.
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class RecurringTransactionsListFragment extends SherlockListFragment implements
+        LoaderManager.LoaderCallbacks<Cursor> {
+
+    /**
+     * Logging tag
+     */
+    protected static final String TAG = "TransactionsListFragment";
+
+    private TransactionsDbAdapter mTransactionsDbAdapter;
+    private SimpleCursorAdapter mCursorAdapter;
+    private ActionMode mActionMode = null;
+
+    /**
+     * Flag which is set when a transaction is selected
+     */
+    private boolean mInEditMode = false;
+
+
+    /**
+     * Callbacks for the menu items in the Context ActionBar (CAB) in action mode
+     */
+    private ActionMode.Callback mActionModeCallbacks = new ActionMode.Callback() {
+
+        @Override
+        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            MenuInflater inflater = mode.getMenuInflater();
+            inflater.inflate(R.menu.transactions_context_menu, menu);
+            menu.removeItem(R.id.context_menu_move_transactions);
+            return true;
+        }
+
+        @Override
+        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+            //nothing to see here, move along
+            return false;
+        }
+
+        @Override
+        public void onDestroyActionMode(ActionMode mode) {
+            finishEditMode();
+        }
+
+        @Override
+        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+            switch (item.getItemId()) {
+                case R.id.context_menu_move_transactions:
+                    mode.finish();
+                    WidgetConfigurationActivity.updateAllWidgets(getActivity());
+                    return true;
+
+                case R.id.context_menu_delete:
+                    for (long id : getListView().getCheckedItemIds()) {
+                        Log.i(TAG, "Cancelling recurring transaction(s)");
+
+                        PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(getActivity().getApplicationContext(),
+                                (int)id, Transaction.createIntent(mTransactionsDbAdapter.getTransaction(id)), PendingIntent.FLAG_UPDATE_CURRENT);
+                        recurringPendingIntent.cancel();
+                        AlarmManager alarmManager = (AlarmManager) getActivity().getSystemService(Context.ALARM_SERVICE);
+                        alarmManager.cancel(recurringPendingIntent);
+                        if (mTransactionsDbAdapter.deleteRecord(id)){
+                            Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
+                        };
+                    }
+                    refreshList();
+                    mode.finish();
+                    WidgetConfigurationActivity.updateAllWidgets(getActivity());
+                    return true;
+
+                default:
+                    return false;
+            }
+        }
+    };
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
+        mCursorAdapter = new TransactionsCursorAdapter(
+                getActivity().getApplicationContext(),
+                R.layout.list_item_transaction, null,
+                new String[] {DatabaseHelper.KEY_NAME, DatabaseHelper.KEY_AMOUNT},
+                new int[] {R.id.primary_text, R.id.transaction_amount});
+        setListAdapter(mCursorAdapter);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.fragment_recurring_transactions_list, container, false);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        ActionBar aBar = getSherlockActivity().getSupportActionBar();
+        aBar.setDisplayShowTitleEnabled(true);
+        aBar.setDisplayHomeAsUpEnabled(true);
+        aBar.setTitle("Recurring Transactions");
+
+        setHasOptionsMenu(true);
+        getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+    }
+
+    /**
+     * Reload the list of transactions and recompute account balances
+     */
+    public void refreshList(){
+        getLoaderManager().restartLoader(0, null, this);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        refreshList();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        mTransactionsDbAdapter.close();
+    }
+
+    @Override
+    public void onListItemClick(ListView l, View v, int position, long id) {
+        super.onListItemClick(l, v, position, id);
+        if (mInEditMode){
+            CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox);
+            checkbox.setChecked(!checkbox.isChecked());
+            return;
+        }
+        //else
+        String accountUID = mTransactionsDbAdapter.getAccountUidFromTransaction(id);
+        long accountID = mTransactionsDbAdapter.getAccountID(accountUID);
+
+        openTransactionForEdit(accountID, id);
+    }
+
+    /**
+     * Opens the transaction editor to enable editing of the transaction
+     * @param accountId Account ID of the transaction
+     * @param transactionId Transaction to be edited
+     */
+    public void openTransactionForEdit(long accountId, long transactionId){
+        Intent createTransactionIntent = new Intent(getActivity(), TransactionsActivity.class);
+        createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+        createTransactionIntent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
+        createTransactionIntent.putExtra(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
+        startActivity(createTransactionIntent);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+//        inflater.inflate(R.menu.transactions_list_actions, menu);
+        //remove menu items from the AccountsActivity
+        menu.removeItem(R.id.menu_search);
+        menu.removeItem(R.id.menu_settings);
+    }
+
+    @Override
+    public Loader<Cursor> onCreateLoader(int arg0, Bundle arg1) {
+        Log.d(TAG, "Creating transactions loader");
+        return new RecurringTransactionsCursorLoader(getActivity());
+    }
+
+    @Override
+    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
+        Log.d(TAG, "Transactions loader finished. Swapping in cursor");
+        mCursorAdapter.swapCursor(cursor);
+        mCursorAdapter.notifyDataSetChanged();
+    }
+
+    @Override
+    public void onLoaderReset(Loader<Cursor> loader) {
+        Log.d(TAG, "Resetting transactions loader");
+        mCursorAdapter.swapCursor(null);
+    }
+
+    /**
+     * Finishes the edit mode in the transactions list.
+     * Edit mode is started when at least one transaction is selected
+     */
+    public void finishEditMode(){
+        mInEditMode = false;
+        uncheckAllItems();
+        mActionMode = null;
+    }
+
+    /**
+     * Sets the title of the Context ActionBar when in action mode.
+     * It sets the number highlighted items
+     */
+    public void setActionModeTitle(){
+        int count = getListView().getCheckedItemIds().length; //mSelectedIds.size();
+        if (count > 0){
+            mActionMode.setTitle(getResources().getString(R.string.title_selected, count));
+        }
+    }
+
+    /**
+     * Unchecks all the checked items in the list
+     */
+    private void uncheckAllItems() {
+        SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();
+        ListView listView = getListView();
+        for (int i = 0; i < checkedPositions.size(); i++) {
+            int position = checkedPositions.keyAt(i);
+            listView.setItemChecked(position, false);
+        }
+    }
+
+
+    /**
+     * Starts action mode and activates the Context ActionBar (CAB)
+     * Action mode is initiated as soon as at least one transaction is selected (highlighted)
+     */
+    private void startActionMode(){
+        if (mActionMode != null) {
+            return;
+        }
+        mInEditMode = true;
+        // Start the CAB using the ActionMode.Callback defined above
+        mActionMode = getSherlockActivity().startActionMode(mActionModeCallbacks);
+    }
+
+    /**
+     * Stops action mode and deselects all selected transactions.
+     * This method only has effect if the number of checked items is greater than 0 and {@link #mActionMode} is not null
+     */
+    private void stopActionMode(){
+        int checkedCount = getListView().getCheckedItemIds().length;
+        if (checkedCount > 0 || mActionMode == null)
+            return;
+        else
+            mActionMode.finish();
+    }
+
+
+    /**
+     * Extends a simple cursor adapter to bind transaction attributes to views
+     * @author Ngewi Fet <ngewif@gmail.com>
+     */
+    protected class TransactionsCursorAdapter extends SimpleCursorAdapter {
+
+        public TransactionsCursorAdapter(Context context, int layout, Cursor c,
+                                         String[] from, int[] to) {
+            super(context, layout, c, from, to, 0);
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            final View view = super.getView(position, convertView, parent);
+            final int itemPosition = position;
+            CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox);
+            final TextView secondaryText = (TextView) view.findViewById(R.id.secondary_text);
+
+            checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+
+                @Override
+                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                    getListView().setItemChecked(itemPosition, isChecked);
+                    if (isChecked) {
+                        startActionMode();
+                    } else {
+                        stopActionMode();
+                    }
+                    setActionModeTitle();
+                }
+            });
+
+
+            ListView listView = (ListView) parent;
+            if (mInEditMode && listView.isItemChecked(position)){
+                view.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
+                secondaryText.setTextColor(getResources().getColor(android.R.color.white));
+            } else {
+                view.setBackgroundColor(getResources().getColor(android.R.color.transparent));
+                secondaryText.setTextColor(getResources().getColor(android.R.color.secondary_text_light_nodisable));
+                checkbox.setChecked(false);
+            }
+
+            final View checkBoxView = checkbox;
+            final View parentView = view;
+            parentView.post(new Runnable() {
+                @Override
+                public void run() {
+                    float extraPadding = getResources().getDimension(R.dimen.edge_padding);
+                    final android.graphics.Rect hitRect = new Rect();
+                    checkBoxView.getHitRect(hitRect);
+                    hitRect.right   += extraPadding;
+                    hitRect.bottom  += 3*extraPadding;
+                    hitRect.top     -= extraPadding;
+                    hitRect.left    -= 2*extraPadding;
+                    parentView.setTouchDelegate(new TouchDelegate(hitRect, checkBoxView));
+                }
+            });
+
+            return view;
+        }
+
+        /**
+         * Returns the string representation of the recurrence period of the transaction
+         * @param periodMillis Recurrence period in milliseconds
+         * @return String formatted representation of recurrence period
+         */
+        public String getRecurrenceAsString(long periodMillis){
+            String[] recurrencePeriods = getResources().getStringArray(R.array.recurrence_options);
+            String[] recurrenceStrings = getResources().getStringArray(R.array.recurrence_entries);
+
+            int index = 0;
+            for (String recurrencePeriod : recurrencePeriods) {
+                long period = Long.parseLong(recurrencePeriod);
+                if (period == periodMillis){
+                    break;
+                }
+                index++;
+            }
+            return recurrenceStrings[index];
+        }
+
+        @Override
+        public void bindView(View view, Context context, Cursor cursor) {
+            super.bindView(view, context, cursor);
+            AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
+            long accountID = accountsDbAdapter.getAccountID(cursor.getString(DatabaseAdapter.COLUMN_ACCOUNT_UID));
+
+            Money amount = new Money(
+                    cursor.getString(DatabaseAdapter.COLUMN_AMOUNT),
+                    mTransactionsDbAdapter.getCurrencyCode(accountID));
+
+            TextView tramount = (TextView) view.findViewById(R.id.transaction_amount);
+            tramount.setText(amount.formattedString(Locale.getDefault()));
+
+            if (amount.isNegative())
+                tramount.setTextColor(getResources().getColor(R.color.debit_red));
+            else
+                tramount.setTextColor(getResources().getColor(R.color.credit_green));
+
+            TextView trNote = (TextView) view.findViewById(R.id.secondary_text);
+            trNote.setText("Repeats  " + getRecurrenceAsString(cursor.getLong(DatabaseAdapter.COLUMN_RECURRENCE_PERIOD))) ;
+
+            String currentAccountUid = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_ACCOUNT_UID));
+            int position = cursor.getPosition();
+            boolean hasSectionHeader;
+
+            if (position == 0){
+                hasSectionHeader = true;
+            } else {
+                cursor.moveToPosition(position - 1);
+                String previousAccountUid = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_ACCOUNT_UID));
+                cursor.moveToPosition(position);
+
+                hasSectionHeader = !previousAccountUid.equals(currentAccountUid);
+            }
+
+            TextView dateHeader = (TextView) view.findViewById(R.id.date_section_header);
+
+            if (hasSectionHeader){
+                dateHeader.setText(getString(R.string.label_account) + ": " + accountsDbAdapter.getAccountName(currentAccountUid));
+                dateHeader.setVisibility(View.VISIBLE);
+            } else {
+                dateHeader.setVisibility(View.GONE);
+            }
+
+            accountsDbAdapter.close();
+        }
+
+    }
+
+    /**
+     * {@link DatabaseCursorLoader} for loading recurring transactions asynchronously from the database
+     * @author Ngewi Fet <ngewif@gmail.com>
+     */
+    protected static class RecurringTransactionsCursorLoader extends DatabaseCursorLoader {
+
+        public RecurringTransactionsCursorLoader(Context context) {
+            super(context);
+        }
+
+        @Override
+        public Cursor loadInBackground() {
+            mDatabaseAdapter = new TransactionsDbAdapter(getContext());
+            Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllRecurringTransactions();
+
+            if (c != null)
+                registerContentObserver(c);
+            return c;
+        }
+    }
+
+}
+
diff --git a/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java b/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
index 03c65ff9..fee01b1d 100644
--- a/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
+++ b/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
@@ -122,6 +122,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
 
         if (qualifiedName.equalsIgnoreCase(TAG_CURRENCY)){
             if (mAccount != null){
+                Log.i(LOG_TAG, mAccount.getName() + " account has no currency!");
                 String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
                 mAccount.setCurrency(Currency.getInstance(currencyCode));
             }
@@ -132,7 +133,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         }
 
         if (qualifiedName.equalsIgnoreCase(TAG_ACCOUNT)){
-            Log.i(LOG_TAG, "Saving account...");
+            Log.d(LOG_TAG, "Saving account...");
             mDatabaseAdapter.addAccount(mAccount);
 
             //reset ISO 4217 flag for next account
@@ -148,6 +149,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         if (qualifiedName.equalsIgnoreCase(TAG_SLOT_VALUE)){
             if (mInPlaceHolderSlot){
                 if (characterString.equals("true")){
+                    Log.d(LOG_TAG, "Setting account placeholder flag");
                     mAccount.setPlaceHolderFlag(true);
                 };
                 mInPlaceHolderSlot = false;
