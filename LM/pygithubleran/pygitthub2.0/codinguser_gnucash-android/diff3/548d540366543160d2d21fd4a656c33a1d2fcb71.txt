From e951c9bce1e89fdb92348f8cb00242088cd3fd6d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 21 Aug 2015 12:23:16 +0200
Subject: [PATCH 01/16] Temporarily disable the input formatter.

We must be able to enter simple mathematical expressions.
---
 .../org/gnucash/android/ui/transaction/TransactionFormFragment.java     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index e88c6854..62dd12df 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -548,7 +548,7 @@ private void openSplitEditor(){
 	 */
 	private void setListeners() {
         mAmountInputFormatter = new AmountTextWatcher(mAmountEditText); //new AmountInputFormatter(mAmountEditText);
-        mAmountEditText.addTextChangedListener(mAmountInputFormatter);
+        //mAmountEditText.addTextChangedListener(mAmountInputFormatter);
         mAmountEditText.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {

From c35235107f27b12e1231493a2d20ca3b3ecf0e56 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 21 Aug 2015 12:32:12 +0200
Subject: [PATCH 02/16] Change the type of the EditText to allow to enter text
 freely.

Again, we want to enter mathematical expressions.
---
 app/src/main/res/layout/fragment_new_transaction.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index 37b5eb1c..c5c124ce 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -54,7 +54,7 @@
 				android:layout_weight="3"
 				android:layout_height="wrap_content"
 				android:hint="@string/label_transaction_amount"
-				android:inputType="number"
+				android:inputType="text"
 				android:nextFocusDown="@+id/input_description"
 				android:drawableRight="@drawable/content_split_holo_light"
 				android:drawableEnd="@drawable/content_split_holo_light"

From c183a9f1fa166d2715fbfa93380987f27c38d8f2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 24 Aug 2015 18:06:50 +0200
Subject: [PATCH 03/16] Compute mathematical expressions in the amount field.

If the field contains a mathematical expression, it is replaced with its
results when the focus changes to another field.
---
 app/build.gradle                                   |  3 +-
 .../ui/transaction/TransactionFormFragment.java    | 39 ++++++++++++++++++++++
 2 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/app/build.gradle b/app/build.gradle
index 82d9719a..1991f863 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -162,7 +162,8 @@ dependencies {
             'com.google.android.gms:play-services-drive:7.0.0',
             'com.crashlytics.android:crashlytics:1.+',
             'com.android.support:cardview-v7:22.2.0',
-            'com.android.support:recyclerview-v7:22.2.0'
+            'com.android.support:recyclerview-v7:22.2.0',
+            'net.objecthunter:exp4j:0.4.5'
     )
 
     testCompile('org.robolectric:robolectric:3.0',
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 62dd12df..8b414720 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -54,6 +54,9 @@
 import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrenceFormatter;
 import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
 
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
@@ -567,6 +570,42 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
+        mAmountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (!hasFocus) {
+                    String amountText = mAmountEditText.getText().toString();
+
+                    if (amountText.trim().isEmpty())
+                        return;
+
+                    // FIXME: replace the decimal separator of the current locale with '.'
+                    ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+                    Expression expression;
+
+                    try {
+                        expression = expressionBuilder.build();
+                    } catch (RuntimeException e) {
+                        setEditTextError();
+                        return;
+                    }
+
+                    if (expression != null && expression.validate().isValid())
+                        // FIXME: limit the decimal places
+                        // FIXME: use the locale decimal separator
+                        mAmountEditText.setText(Double.toString(expression.evaluate()));
+                    else
+                        setEditTextError();
+                }
+            }
+
+            private void setEditTextError() {
+                // FIXME: i18n
+                mAmountEditText.setError("Invalid expression.");
+                // TODO: log error
+            }
+        });
+
 		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {

From a9ebfc5a9aaeacc994fe34fbd15a221dcc1f40b8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 4 Sep 2015 19:22:18 +0200
Subject: [PATCH 04/16] Use a calculator keyboard for the amount edit text.

Implemented with an adapted CustomKeyboard taken from here:

http://www.fampennings.nl/maarten/android/09keyboard/index.htm
http://forum.xda-developers.com/showthread.php?t=2497237

Just the minimum implemented. It needs a lot of polishment.
---
 .../ui/transaction/TransactionFormFragment.java    |   5 +-
 .../gnucash/android/ui/util/CustomKeyboard.java    | 230 ++++++++++++++++++
 .../main/res/layout/fragment_new_transaction.xml   | 268 +++++++++++----------
 app/src/main/res/xml/calculator_keyboard.xml       |  31 +++
 4 files changed, 406 insertions(+), 128 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
 create mode 100644 app/src/main/res/xml/calculator_keyboard.xml

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 8b414720..3a6abf1d 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -73,6 +73,7 @@
 import org.gnucash.android.ui.util.AmountInputFormatter;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.TransactionTypeSwitch;
+import org.gnucash.android.ui.util.CustomKeyboard;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
@@ -218,6 +219,7 @@
     private List<Split> mSplitsList = new ArrayList<Split>();
 
     private boolean mEditMode = false;
+    private CustomKeyboard mCalculatorKeyboard;
 
     /**
 	 * Create the view and retrieve references to the UI elements
@@ -301,7 +303,8 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             mEditMode = true;
 		}
 
-
+        mCalculatorKeyboard = new CustomKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
+        mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
 	}
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
new file mode 100644
index 00000000..adc9fda3
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -0,0 +1,230 @@
+/**
+ * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * If you use this software in a product, an acknowledgment in the product
+ * documentation would be appreciated but is not required.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.inputmethodservice.Keyboard;
+import android.inputmethodservice.KeyboardView;
+import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Layout;
+import android.view.HapticFeedbackConstants;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnFocusChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+
+/**
+ * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
+ *
+ * @author Maarten Pennings, extended by SimplicityApks
+ * @date 2012 December 23
+ */
+public class CustomKeyboard {
+
+    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    private KeyboardView mKeyboardView;
+    /** A link to the activity that hosts the {@link #mKeyboardView}. */
+    private Activity mHostActivity;
+    private boolean hapticFeedback;
+
+    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
+        @Override
+        public void onKey(int primaryCode, int[] keyCodes) {
+            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+
+            /*
+            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
+                return;
+            */
+
+            EditText edittext = (EditText) focusCurrent;
+            Editable editable = edittext.getText();
+            int start = edittext.getSelectionStart();
+            // delete the selection, if chars are selected:
+            int end = edittext.getSelectionEnd();
+
+            if (end > start)
+                editable.delete(start, end);
+
+            switch (primaryCode) {
+                case 48:
+                case 49:
+                case 50:
+                case 51:
+                case 52:
+                case 53:
+                case 54:
+                case 55:
+                case 56:
+                case 57:
+                    editable.insert(start, Character.toString((char) primaryCode));
+                    break;
+                case KeyEvent.KEYCODE_BACK:
+                    hideCustomKeyboard();
+                    break;
+                case -5:
+                    editable.delete(start - 1, start);
+            }
+        }
+
+        @Override
+        public void onPress(int arg0) {
+            // vibrate if haptic feedback is enabled:
+            if (hapticFeedback && arg0 != 0)
+                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
+        }
+
+        @Override public void onRelease(int primaryCode) { }
+        @Override public void onText(CharSequence text) { }
+        @Override public void swipeLeft() { }
+        @Override public void swipeRight() { }
+        @Override public void swipeDown() { }
+        @Override public void swipeUp() { }
+    };
+
+    /**
+     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
+     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
+     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
+     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
+     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
+     *
+     * @param host The hosting activity.
+     * @param viewid The id of the KeyboardView.
+     * @param layoutid The id of the xml file containing the keyboard layout.
+     */
+    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+        mHostActivity = host;
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
+        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
+        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
+        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
+        // Hide the standard keyboard initially
+        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+    }
+
+    /** Returns whether the CustomKeyboard is visible. */
+    public boolean isCustomKeyboardVisible() {
+        return mKeyboardView.getVisibility() == View.VISIBLE;
+    }
+
+    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    public void showCustomKeyboard(View v) {
+        if (v != null)
+            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+        mKeyboardView.setVisibility(View.VISIBLE);
+        mKeyboardView.setEnabled(true);
+    }
+
+    /** Make the CustomKeyboard invisible. */
+    public void hideCustomKeyboard() {
+        mKeyboardView.setVisibility(View.GONE);
+        mKeyboardView.setEnabled(false);
+    }
+
+    /**
+     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
+     *
+     * @param resid The resource id of the EditText that registers to the custom keyboard.
+     */
+    public void registerEditText(int resid) {
+        // Find the EditText 'resid'
+        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
+        // Make the custom keyboard appear
+        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    showCustomKeyboard(v);
+                else
+                    hideCustomKeyboard();
+            }
+        });
+
+        edittext.setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        /**
+         * Try to show cursor the complicated way:
+         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
+         * fixes the cursor not movable bug
+         */
+        OnTouchListener otl = new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!isCustomKeyboardVisible())
+                    showCustomKeyboard(v);
+
+                /*
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_MOVE:
+                        Layout layout = ((EditText) v).getLayout();
+                        float x = event.getX() + edittext.getScrollX();
+                        int offset = layout.getOffsetForHorizontal(0, x);
+
+                        if (offset > 0)
+                            if (x > layout.getLineMax(0))
+                                edittext.setSelection(offset);     // touch was at the end of the text
+                            else
+                                edittext.setSelection(offset - 1);
+                        break;
+                }
+                */
+
+                edittext.onTouchEvent(event);               // Call native handler
+
+                return false;
+            }
+
+        };
+
+        edittext.setOnTouchListener(otl);
+    }
+
+    /**
+     * Enables or disables the Haptic feedback on keyboard touches
+     * @param goEnabled true if you want haptic feedback, falso otherwise
+     */
+    public void enableHapticFeedback(boolean goEnabled) {
+        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
+        hapticFeedback = goEnabled;
+    }
+}
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index c5c124ce..9945ef72 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -15,133 +15,147 @@
  limitations under the License.
 -->
 
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
 	android:layout_width="match_parent"
 	android:layout_height="match_parent">
 
-	<TableLayout android:id="@+id/fragment_transaction_form"
-		android:layout_width="match_parent"
-		android:layout_height="wrap_content"
-		android:padding="@dimen/dialog_padding"
-		android:orientation="vertical" >
-
-		<TableRow style="@style/FormRow">
-		<AutoCompleteTextView
-			android:id="@+id/input_transaction_name"
-			android:layout_width="match_parent"
-			android:layout_height="wrap_content"
-			android:hint="@string/label_transaction_name"
-			android:inputType="textCapSentences"
-			android:imeOptions="actionNext"
-			android:nextFocusDown="@+id/input_transaction_amount"
-			android:background="@android:color/transparent"
-			android:textSize="22sp" />
-		</TableRow>
-		<View style="@style/Divider" android:layout_marginLeft="0dp" />
-
-		<TableRow style="@style/FormRow">
-			<TextView
-				android:id="@+id/currency_symbol"
-				style="@style/FormIcon"
-				android:gravity="center"
-				android:textColor="@color/debit_red"
-				android:textSize="22dp"
-				android:text="$" />
-
-			<EditText
-				android:id="@+id/input_transaction_amount"
-				android:layout_width="0dp"
-				android:layout_weight="3"
-				android:layout_height="wrap_content"
-				android:hint="@string/label_transaction_amount"
-				android:inputType="text"
-				android:nextFocusDown="@+id/input_description"
-				android:drawableRight="@drawable/content_split_holo_light"
-				android:drawableEnd="@drawable/content_split_holo_light"
-				android:background="@android:color/transparent"
-				android:textColor="@color/debit_red"
-				android:textSize="20sp" />
-
-			<org.gnucash.android.ui.util.TransactionTypeSwitch
-				android:id="@+id/input_transaction_type"
-				android:layout_width="0dp"
-				android:layout_weight="2"
-				android:layout_height="wrap_content"
-				android:textOn="@string/label_debit"
-				android:textOff="@string/label_credit"
-				android:textAllCaps="true"
-				android:gravity="end|center_vertical"
-				android:textColor="@color/debit_red"
-				android:checked="true"/>
-
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow android:id="@+id/layout_double_entry"
-			style="@style/FormRow" >
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_forward"/>
-			<Spinner
-				android:id="@+id/input_double_entry_accounts_spinner"
-				android:layout_width="0dp"
-				android:layout_weight="5"
-				android:layout_height="wrap_content"  />
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow style="@style/FormRow" >
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_time"/>
-
-			<TextView android:id="@+id/input_date"
-				android:layout_width="0dp"
-				android:layout_weight="3"
-				android:layout_height="wrap_content"
-				android:gravity="center"      />
-
-			<TextView android:id="@+id/input_time"
-				android:layout_width="0dp"
-				android:layout_weight="2"
-				android:layout_height="wrap_content"
-				android:gravity="center"        />
-		</TableRow>
-		<View style="@style/Divider" />
-
-		<TableRow style="@style/FormRow">
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_sort_by_size"/>
-
-			<EditText android:id="@+id/input_description"
-				android:layout_width="0dp"
-				android:layout_weight="5"
-				android:layout_height="wrap_content"
-				android:singleLine="false"
-				android:background="@android:color/transparent"
-				android:hint="@string/label_transaction_description"
-				android:inputType="textMultiLine|textCapSentences" />
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow style="@style/FormRow">
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_rotate_right"/>
-
-			<TextView android:id="@+id/input_recurrence"
-				android:layout_width="0dp"
-				android:layout_height="wrap_content"
-				android:layout_weight="5"
-				android:gravity="center"
-				android:text="@string/label_tap_to_create_schedule"
-				style="@style/Dropdown.TextView" />
-
-		</TableRow>
-
-		<CheckBox android:id="@+id/checkbox_save_template"
-			android:layout_width="match_parent"
-			android:layout_height="wrap_content"
-			android:layout_marginBottom="@dimen/form_row_bottom_margin"
-			android:visibility="gone"
-			android:text="@string/label_save_template" />
-		<!-- Not exposing the transaction template checkbox to the UI at this time -->
-	</TableLayout>
-</ScrollView>
\ No newline at end of file
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <TableLayout android:id="@+id/fragment_transaction_form"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/dialog_padding"
+            android:orientation="vertical" >
+
+            <TableRow style="@style/FormRow">
+            <AutoCompleteTextView
+                android:id="@+id/input_transaction_name"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:hint="@string/label_transaction_name"
+                android:inputType="textCapSentences"
+                android:imeOptions="actionNext"
+                android:nextFocusDown="@+id/input_transaction_amount"
+                android:background="@android:color/transparent"
+                android:textSize="22sp" />
+            </TableRow>
+            <View style="@style/Divider" android:layout_marginLeft="0dp" />
+
+            <TableRow style="@style/FormRow">
+                <TextView
+                    android:id="@+id/currency_symbol"
+                    style="@style/FormIcon"
+                    android:gravity="center"
+                    android:textColor="@color/debit_red"
+                    android:textSize="22dp"
+                    android:text="$" />
+
+                <EditText
+                    android:id="@+id/input_transaction_amount"
+                    android:layout_width="0dp"
+                    android:layout_weight="3"
+                    android:layout_height="wrap_content"
+                    android:hint="@string/label_transaction_amount"
+                    android:inputType="none"
+                    android:nextFocusDown="@+id/input_description"
+                    android:drawableRight="@drawable/content_split_holo_light"
+                    android:drawableEnd="@drawable/content_split_holo_light"
+                    android:background="@android:color/transparent"
+                    android:textColor="@color/debit_red"
+                    android:textSize="20sp" />
+
+                <org.gnucash.android.ui.util.TransactionTypeSwitch
+                    android:id="@+id/input_transaction_type"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:textOn="@string/label_debit"
+                    android:textOff="@string/label_credit"
+                    android:textAllCaps="true"
+                    android:gravity="end|center_vertical"
+                    android:textColor="@color/debit_red"
+                    android:checked="true"/>
+
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow android:id="@+id/layout_double_entry"
+                style="@style/FormRow" >
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_forward"/>
+                <Spinner
+                    android:id="@+id/input_double_entry_accounts_spinner"
+                    android:layout_width="0dp"
+                    android:layout_weight="5"
+                    android:layout_height="wrap_content"  />
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow style="@style/FormRow" >
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_time"/>
+
+                <TextView android:id="@+id/input_date"
+                    android:layout_width="0dp"
+                    android:layout_weight="3"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"      />
+
+                <TextView android:id="@+id/input_time"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"        />
+            </TableRow>
+            <View style="@style/Divider" />
+
+            <TableRow style="@style/FormRow">
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_sort_by_size"/>
+
+                <EditText android:id="@+id/input_description"
+                    android:layout_width="0dp"
+                    android:layout_weight="5"
+                    android:layout_height="wrap_content"
+                    android:singleLine="false"
+                    android:background="@android:color/transparent"
+                    android:hint="@string/label_transaction_description"
+                    android:inputType="textMultiLine|textCapSentences" />
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow style="@style/FormRow">
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_rotate_right"/>
+
+                <TextView android:id="@+id/input_recurrence"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="5"
+                    android:gravity="center"
+                    android:text="@string/label_tap_to_create_schedule"
+                    style="@style/Dropdown.TextView" />
+
+            </TableRow>
+
+            <CheckBox android:id="@+id/checkbox_save_template"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="@dimen/form_row_bottom_margin"
+                android:visibility="gone"
+                android:text="@string/label_save_template" />
+            <!-- Not exposing the transaction template checkbox to the UI at this time -->
+        </TableLayout>
+    </ScrollView>
+    <android.inputmethodservice.KeyboardView android:id="@+id/calculator_keyboard"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:visibility="gone" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
new file mode 100644
index 00000000..dcddfc59
--- /dev/null
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- FIXME: make locale independent -->
+<Keyboard xmlns:android="http://schemas.android.com/apk/res/android"
+    android:keyWidth="20%p"
+    android:keyHeight="10%p">
+
+    <Row>
+        <Key android:codes="55" android:keyLabel="7" android:keyEdgeFlags="left" />
+        <Key android:codes="56" android:keyLabel="8" />
+        <Key android:codes="57" android:keyLabel="9" />
+        <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
+            android:isRepeatable="true" android:horizontalGap="6.25%p" />
+    </Row>
+    <Row>
+        <Key android:codes="52" android:keyLabel="4" android:keyEdgeFlags="left" />
+        <Key android:codes="53" android:keyLabel="5" />
+        <Key android:codes="54" android:keyLabel="6" />
+        <Key android:codes="55006" android:keyLabel="CLR"
+            android:horizontalGap="6.25%p" android:keyEdgeFlags="right" />
+    </Row>
+    <Row>
+        <Key android:codes="49" android:keyLabel="1" android:keyEdgeFlags="left" />
+        <Key android:codes="50" android:keyLabel="2" />
+        <Key android:codes="51" android:keyLabel="3" />
+    </Row>
+    <Row>
+        <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
+        <Key android:codes="5001" android:keyLabel="." />
+        <Key android:codes="5002" android:keyLabel="=" android:keyEdgeFlags="right" />
+    </Row>
+</Keyboard>
\ No newline at end of file

From 48086423ef8e4ad350991569b1d7962ed59dece3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sat, 5 Sep 2015 11:49:03 +0200
Subject: [PATCH 05/16] Fix line separators.

---
 .../gnucash/android/ui/util/CustomKeyboard.java    | 460 ++++++++++-----------
 1 file changed, 230 insertions(+), 230 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index adc9fda3..c8b6b9d6 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -1,230 +1,230 @@
-/**
- * Copyright 2013 Maarten Pennings extended by SimplicityApks
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * If you use this software in a product, an acknowledgment in the product
- * documentation would be appreciated but is not required.
- */
-
-package org.gnucash.android.ui.util;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.inputmethodservice.Keyboard;
-import android.inputmethodservice.KeyboardView;
-import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
-import android.text.Editable;
-import android.text.InputType;
-import android.text.Layout;
-import android.view.HapticFeedbackConstants;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnFocusChangeListener;
-import android.view.View.OnTouchListener;
-import android.view.WindowManager;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.EditText;
-
-
-/**
- * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
- *
- * @author Maarten Pennings, extended by SimplicityApks
- * @date 2012 December 23
- */
-public class CustomKeyboard {
-
-    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
-    private KeyboardView mKeyboardView;
-    /** A link to the activity that hosts the {@link #mKeyboardView}. */
-    private Activity mHostActivity;
-    private boolean hapticFeedback;
-
-    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
-        @Override
-        public void onKey(int primaryCode, int[] keyCodes) {
-            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
-
-            /*
-            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
-                return;
-            */
-
-            EditText edittext = (EditText) focusCurrent;
-            Editable editable = edittext.getText();
-            int start = edittext.getSelectionStart();
-            // delete the selection, if chars are selected:
-            int end = edittext.getSelectionEnd();
-
-            if (end > start)
-                editable.delete(start, end);
-
-            switch (primaryCode) {
-                case 48:
-                case 49:
-                case 50:
-                case 51:
-                case 52:
-                case 53:
-                case 54:
-                case 55:
-                case 56:
-                case 57:
-                    editable.insert(start, Character.toString((char) primaryCode));
-                    break;
-                case KeyEvent.KEYCODE_BACK:
-                    hideCustomKeyboard();
-                    break;
-                case -5:
-                    editable.delete(start - 1, start);
-            }
-        }
-
-        @Override
-        public void onPress(int arg0) {
-            // vibrate if haptic feedback is enabled:
-            if (hapticFeedback && arg0 != 0)
-                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
-        }
-
-        @Override public void onRelease(int primaryCode) { }
-        @Override public void onText(CharSequence text) { }
-        @Override public void swipeLeft() { }
-        @Override public void swipeRight() { }
-        @Override public void swipeDown() { }
-        @Override public void swipeUp() { }
-    };
-
-    /**
-     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
-     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
-     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
-     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
-     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
-     *
-     * @param host The hosting activity.
-     * @param viewid The id of the KeyboardView.
-     * @param layoutid The id of the xml file containing the keyboard layout.
-     */
-    public CustomKeyboard(Activity host, int viewid, int layoutid) {
-        mHostActivity = host;
-        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
-        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
-        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
-        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
-        // Hide the standard keyboard initially
-        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
-    }
-
-    /** Returns whether the CustomKeyboard is visible. */
-    public boolean isCustomKeyboardVisible() {
-        return mKeyboardView.getVisibility() == View.VISIBLE;
-    }
-
-    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
-    public void showCustomKeyboard(View v) {
-        if (v != null)
-            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
-
-        mKeyboardView.setVisibility(View.VISIBLE);
-        mKeyboardView.setEnabled(true);
-    }
-
-    /** Make the CustomKeyboard invisible. */
-    public void hideCustomKeyboard() {
-        mKeyboardView.setVisibility(View.GONE);
-        mKeyboardView.setEnabled(false);
-    }
-
-    /**
-     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
-     *
-     * @param resid The resource id of the EditText that registers to the custom keyboard.
-     */
-    public void registerEditText(int resid) {
-        // Find the EditText 'resid'
-        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
-        // Make the custom keyboard appear
-        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
-            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (hasFocus)
-                    showCustomKeyboard(v);
-                else
-                    hideCustomKeyboard();
-            }
-        });
-
-        edittext.setOnClickListener(new OnClickListener() {
-            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
-            @Override
-            public void onClick(View v) {
-                showCustomKeyboard(v);
-            }
-        });
-
-        // Disable spell check (hex strings look like words to Android)
-        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
-
-        /**
-         * Try to show cursor the complicated way:
-         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
-         * fixes the cursor not movable bug
-         */
-        OnTouchListener otl = new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (!isCustomKeyboardVisible())
-                    showCustomKeyboard(v);
-
-                /*
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_MOVE:
-                        Layout layout = ((EditText) v).getLayout();
-                        float x = event.getX() + edittext.getScrollX();
-                        int offset = layout.getOffsetForHorizontal(0, x);
-
-                        if (offset > 0)
-                            if (x > layout.getLineMax(0))
-                                edittext.setSelection(offset);     // touch was at the end of the text
-                            else
-                                edittext.setSelection(offset - 1);
-                        break;
-                }
-                */
-
-                edittext.onTouchEvent(event);               // Call native handler
-
-                return false;
-            }
-
-        };
-
-        edittext.setOnTouchListener(otl);
-    }
-
-    /**
-     * Enables or disables the Haptic feedback on keyboard touches
-     * @param goEnabled true if you want haptic feedback, falso otherwise
-     */
-    public void enableHapticFeedback(boolean goEnabled) {
-        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
-        hapticFeedback = goEnabled;
-    }
-}
+/**
+ * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * If you use this software in a product, an acknowledgment in the product
+ * documentation would be appreciated but is not required.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.inputmethodservice.Keyboard;
+import android.inputmethodservice.KeyboardView;
+import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Layout;
+import android.view.HapticFeedbackConstants;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnFocusChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+
+/**
+ * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
+ *
+ * @author Maarten Pennings, extended by SimplicityApks
+ * @date 2012 December 23
+ */
+public class CustomKeyboard {
+
+    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    private KeyboardView mKeyboardView;
+    /** A link to the activity that hosts the {@link #mKeyboardView}. */
+    private Activity mHostActivity;
+    private boolean hapticFeedback;
+
+    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
+        @Override
+        public void onKey(int primaryCode, int[] keyCodes) {
+            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+
+            /*
+            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
+                return;
+            */
+
+            EditText edittext = (EditText) focusCurrent;
+            Editable editable = edittext.getText();
+            int start = edittext.getSelectionStart();
+            // delete the selection, if chars are selected:
+            int end = edittext.getSelectionEnd();
+
+            if (end > start)
+                editable.delete(start, end);
+
+            switch (primaryCode) {
+                case 48:
+                case 49:
+                case 50:
+                case 51:
+                case 52:
+                case 53:
+                case 54:
+                case 55:
+                case 56:
+                case 57:
+                    editable.insert(start, Character.toString((char) primaryCode));
+                    break;
+                case KeyEvent.KEYCODE_BACK:
+                    hideCustomKeyboard();
+                    break;
+                case -5:
+                    editable.delete(start - 1, start);
+            }
+        }
+
+        @Override
+        public void onPress(int arg0) {
+            // vibrate if haptic feedback is enabled:
+            if (hapticFeedback && arg0 != 0)
+                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
+        }
+
+        @Override public void onRelease(int primaryCode) { }
+        @Override public void onText(CharSequence text) { }
+        @Override public void swipeLeft() { }
+        @Override public void swipeRight() { }
+        @Override public void swipeDown() { }
+        @Override public void swipeUp() { }
+    };
+
+    /**
+     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
+     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
+     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
+     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
+     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
+     *
+     * @param host The hosting activity.
+     * @param viewid The id of the KeyboardView.
+     * @param layoutid The id of the xml file containing the keyboard layout.
+     */
+    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+        mHostActivity = host;
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
+        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
+        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
+        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
+        // Hide the standard keyboard initially
+        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+    }
+
+    /** Returns whether the CustomKeyboard is visible. */
+    public boolean isCustomKeyboardVisible() {
+        return mKeyboardView.getVisibility() == View.VISIBLE;
+    }
+
+    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    public void showCustomKeyboard(View v) {
+        if (v != null)
+            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+        mKeyboardView.setVisibility(View.VISIBLE);
+        mKeyboardView.setEnabled(true);
+    }
+
+    /** Make the CustomKeyboard invisible. */
+    public void hideCustomKeyboard() {
+        mKeyboardView.setVisibility(View.GONE);
+        mKeyboardView.setEnabled(false);
+    }
+
+    /**
+     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
+     *
+     * @param resid The resource id of the EditText that registers to the custom keyboard.
+     */
+    public void registerEditText(int resid) {
+        // Find the EditText 'resid'
+        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
+        // Make the custom keyboard appear
+        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    showCustomKeyboard(v);
+                else
+                    hideCustomKeyboard();
+            }
+        });
+
+        edittext.setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        /**
+         * Try to show cursor the complicated way:
+         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
+         * fixes the cursor not movable bug
+         */
+        OnTouchListener otl = new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!isCustomKeyboardVisible())
+                    showCustomKeyboard(v);
+
+                /*
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_MOVE:
+                        Layout layout = ((EditText) v).getLayout();
+                        float x = event.getX() + edittext.getScrollX();
+                        int offset = layout.getOffsetForHorizontal(0, x);
+
+                        if (offset > 0)
+                            if (x > layout.getLineMax(0))
+                                edittext.setSelection(offset);     // touch was at the end of the text
+                            else
+                                edittext.setSelection(offset - 1);
+                        break;
+                }
+                */
+
+                edittext.onTouchEvent(event);               // Call native handler
+
+                return false;
+            }
+
+        };
+
+        edittext.setOnTouchListener(otl);
+    }
+
+    /**
+     * Enables or disables the Haptic feedback on keyboard touches
+     * @param goEnabled true if you want haptic feedback, falso otherwise
+     */
+    public void enableHapticFeedback(boolean goEnabled) {
+        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
+        hapticFeedback = goEnabled;
+    }
+}

From 8afc7a4f943af2d149a0001411c959d56b2147f1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sat, 5 Sep 2015 11:53:09 +0200
Subject: [PATCH 06/16] Simplify and remove unneeded code.

---
 .../gnucash/android/ui/util/CustomKeyboard.java    | 30 +++-------------------
 1 file changed, 4 insertions(+), 26 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index c8b6b9d6..247659bf 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -20,14 +20,11 @@
 package org.gnucash.android.ui.util;
 
 import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
 import android.inputmethodservice.Keyboard;
 import android.inputmethodservice.KeyboardView;
 import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
 import android.text.Editable;
 import android.text.InputType;
-import android.text.Layout;
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -67,9 +64,9 @@ public void onKey(int primaryCode, int[] keyCodes) {
             EditText edittext = (EditText) focusCurrent;
             Editable editable = edittext.getText();
             int start = edittext.getSelectionStart();
-            // delete the selection, if chars are selected:
             int end = edittext.getSelectionEnd();
 
+            // delete the selection, if chars are selected:
             if (end > start)
                 editable.delete(start, end);
 
@@ -90,6 +87,7 @@ public void onKey(int primaryCode, int[] keyCodes) {
                     hideCustomKeyboard();
                     break;
                 case -5:
+                    // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
             }
         }
@@ -186,37 +184,17 @@ public void onClick(View v) {
          * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
          * fixes the cursor not movable bug
          */
-        OnTouchListener otl = new OnTouchListener() {
+        edittext.setOnTouchListener(new OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
                 if (!isCustomKeyboardVisible())
                     showCustomKeyboard(v);
 
-                /*
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_MOVE:
-                        Layout layout = ((EditText) v).getLayout();
-                        float x = event.getX() + edittext.getScrollX();
-                        int offset = layout.getOffsetForHorizontal(0, x);
-
-                        if (offset > 0)
-                            if (x > layout.getLineMax(0))
-                                edittext.setSelection(offset);     // touch was at the end of the text
-                            else
-                                edittext.setSelection(offset - 1);
-                        break;
-                }
-                */
-
                 edittext.onTouchEvent(event);               // Call native handler
 
                 return false;
             }
-
-        };
-
-        edittext.setOnTouchListener(otl);
+        });
     }
 
     /**

From 19831f1ce1c721ecd1833e2cfbdec5ba3845bd49 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 6 Sep 2015 11:57:34 +0200
Subject: [PATCH 07/16] Implement basic calculator keys.

---
 .../java/org/gnucash/android/ui/util/CustomKeyboard.java    |  8 ++++++++
 app/src/main/res/xml/calculator_keyboard.xml                | 13 ++++++++-----
 2 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 247659bf..a0a2b861 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -71,6 +71,11 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 editable.delete(start, end);
 
             switch (primaryCode) {
+                case 42:
+                case 43:
+                case 45:
+                case 46:
+                case 47:
                 case 48:
                 case 49:
                 case 50:
@@ -83,9 +88,12 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 57:
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
+                /*
+                FIXME: this should be implemented in Activity's onBackPressed()
                 case KeyEvent.KEYCODE_BACK:
                     hideCustomKeyboard();
                     break;
+                */
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
index dcddfc59..813058b1 100644
--- a/app/src/main/res/xml/calculator_keyboard.xml
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -9,23 +9,26 @@
         <Key android:codes="56" android:keyLabel="8" />
         <Key android:codes="57" android:keyLabel="9" />
         <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
-            android:isRepeatable="true" android:horizontalGap="6.25%p" />
+            android:isRepeatable="true" />
     </Row>
     <Row>
         <Key android:codes="52" android:keyLabel="4" android:keyEdgeFlags="left" />
         <Key android:codes="53" android:keyLabel="5" />
         <Key android:codes="54" android:keyLabel="6" />
-        <Key android:codes="55006" android:keyLabel="CLR"
-            android:horizontalGap="6.25%p" android:keyEdgeFlags="right" />
+        <Key android:codes="42" android:keyLabel="*" />
+        <Key android:codes="47" android:keyLabel="/" android:keyEdgeFlags="right" />
     </Row>
     <Row>
         <Key android:codes="49" android:keyLabel="1" android:keyEdgeFlags="left" />
         <Key android:codes="50" android:keyLabel="2" />
         <Key android:codes="51" android:keyLabel="3" />
+        <Key android:codes="43" android:keyLabel="+" />
+        <Key android:codes="45" android:keyLabel="-" android:keyEdgeFlags="right" />
     </Row>
     <Row>
         <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
-        <Key android:codes="5001" android:keyLabel="." />
-        <Key android:codes="5002" android:keyLabel="=" android:keyEdgeFlags="right" />
+        <Key android:codes="46" android:keyLabel="." />
+        <Key android:codes="1001" android:keyLabel="=" android:horizontalGap="40%"
+            android:keyEdgeFlags="right" />
     </Row>
 </Keyboard>
\ No newline at end of file

From 470b2cc390fea9a84a94cec960e6c476e264cd95 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 6 Sep 2015 16:45:08 +0200
Subject: [PATCH 08/16] Hide the calculator keyboard when the back key is
 pressed.

---
 .../android/ui/transaction/TransactionFormFragment.java |  2 ++
 .../android/ui/transaction/TransactionsActivity.java    | 17 +++++++++++++++++
 .../org/gnucash/android/ui/util/CustomKeyboard.java     | 14 ++++++++------
 3 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 3a6abf1d..7bdc2204 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -305,6 +305,8 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         mCalculatorKeyboard = new CustomKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
         mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
+        // FIXME: decouple from TransactionsActivity
+        ((TransactionsActivity) getActivity()).setOnBackListener(mCalculatorKeyboard);
 	}
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index ca07c4bc..9865ecb2 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -54,6 +54,7 @@
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.account.AccountsListFragment;
 import org.gnucash.android.ui.passcode.PassLockActivity;
+import org.gnucash.android.ui.util.CustomKeyboard;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.OnTransactionClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
@@ -155,6 +156,7 @@ public void onNothingSelected(AdapterView<?> parent) {
     private PagerAdapter mPagerAdapter;
     private Spinner mToolbarSpinner;
     private TabLayout mTabLayout;
+    private CustomKeyboard mOnBackListener;
 
 
     /**
@@ -567,6 +569,21 @@ private void showTransactionFormFragment(Bundle args){
 		fragmentTransaction.commit();
 	}
 
+    public void setOnBackListener(CustomKeyboard keyboard) {
+        mOnBackListener = keyboard;
+    }
+
+    @Override
+    public void onBackPressed() {
+        boolean eventProcessed = false;
+
+        if (mOnBackListener != null)
+            eventProcessed = mOnBackListener.onBackPressed();
+
+        if (!eventProcessed)
+            super.onBackPressed();
+    }
+
     /**
      * Display the balance of a transaction in a text view and format the text color to match the sign of the amount
      * @param balanceTextView {@link android.widget.TextView} where balance is to be displayed
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index a0a2b861..ce68f22b 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -88,12 +88,6 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 57:
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
-                /*
-                FIXME: this should be implemented in Activity's onBackPressed()
-                case KeyEvent.KEYCODE_BACK:
-                    hideCustomKeyboard();
-                    break;
-                */
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
@@ -213,4 +207,12 @@ public void enableHapticFeedback(boolean goEnabled) {
         mKeyboardView.setHapticFeedbackEnabled(goEnabled);
         hapticFeedback = goEnabled;
     }
+
+    public boolean onBackPressed() {
+        if (isCustomKeyboardVisible()) {
+            hideCustomKeyboard();
+            return true;
+        } else
+            return false;
+    }
 }

From bd20338f3e0abb7435085e655054707490a7896b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 7 Sep 2015 18:56:05 +0200
Subject: [PATCH 09/16] Fix conflict between the expression evaluator and the
 calcualtor keyboard.

---
 .../ui/transaction/TransactionFormFragment.java    | 36 -------------------
 .../gnucash/android/ui/util/CustomKeyboard.java    | 40 +++++++++++++++++++++-
 2 files changed, 39 insertions(+), 37 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 7bdc2204..1974368a 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -575,42 +575,6 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
-        mAmountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (!hasFocus) {
-                    String amountText = mAmountEditText.getText().toString();
-
-                    if (amountText.trim().isEmpty())
-                        return;
-
-                    // FIXME: replace the decimal separator of the current locale with '.'
-                    ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
-                    Expression expression;
-
-                    try {
-                        expression = expressionBuilder.build();
-                    } catch (RuntimeException e) {
-                        setEditTextError();
-                        return;
-                    }
-
-                    if (expression != null && expression.validate().isValid())
-                        // FIXME: limit the decimal places
-                        // FIXME: use the locale decimal separator
-                        mAmountEditText.setText(Double.toString(expression.evaluate()));
-                    else
-                        setEditTextError();
-                }
-            }
-
-            private void setEditTextError() {
-                // FIXME: i18n
-                mAmountEditText.setError("Invalid expression.");
-                // TODO: log error
-            }
-        });
-
 		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index ce68f22b..eb30b1e9 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -36,6 +36,9 @@
 import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
 
 /**
  * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
@@ -91,6 +94,9 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
+                    break;
+                case 1001:
+                    evaluateEditTextExpression(edittext);
             }
         }
 
@@ -165,8 +171,10 @@ public void registerEditText(int resid) {
             public void onFocusChange(View v, boolean hasFocus) {
                 if (hasFocus)
                     showCustomKeyboard(v);
-                else
+                else {
                     hideCustomKeyboard();
+                    evaluateEditTextExpression((EditText) v);
+                }
             }
         });
 
@@ -215,4 +223,34 @@ public boolean onBackPressed() {
         } else
             return false;
     }
+
+    private void evaluateEditTextExpression(EditText editText) {
+        String amountText = editText.getText().toString();
+
+        if (amountText.trim().isEmpty())
+            return;
+
+        // FIXME: replace the decimal separator of the current locale with '.'
+        ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+        Expression expression;
+
+        try {
+            expression = expressionBuilder.build();
+        } catch (RuntimeException e) {
+            // FIXME: i18n
+            editText.setError("Invalid expression.");
+            // TODO: log error
+            return;
+        }
+
+        if (expression != null && expression.validate().isValid())
+            // FIXME: limit the decimal places
+            // FIXME: use the locale decimal separator
+            editText.setText(Double.toString(expression.evaluate()));
+        else {
+            // FIXME: i18n
+            editText.setError("Invalid expression.");
+            // TODO: log error
+        }
+    }
 }

From b6c840e4394e720d88a1af1d794187dca03c74f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 7 Sep 2015 21:01:07 +0200
Subject: [PATCH 10/16] Fix crash when the amount text is empty and backspace
 is pressed.

---
 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index eb30b1e9..06e88ab0 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -69,6 +69,7 @@ public void onKey(int primaryCode, int[] keyCodes) {
             int start = edittext.getSelectionStart();
             int end = edittext.getSelectionEnd();
 
+            // FIXME: use replace() down
             // delete the selection, if chars are selected:
             if (end > start)
                 editable.delete(start, end);
@@ -89,11 +90,12 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 55:
                 case 56:
                 case 57:
+                    //editable.replace(start, end, Character.toString((char) primaryCode));
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
                 case -5:
-                    // FIXME: it crashes when at the beginning of the line
-                    editable.delete(start - 1, start);
+                    int deleteStart = start > 0 ? start - 1: 0;
+                    editable.delete(deleteStart, end);
                     break;
                 case 1001:
                     evaluateEditTextExpression(edittext);
@@ -200,6 +202,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 if (!isCustomKeyboardVisible())
                     showCustomKeyboard(v);
 
+                // XXX: Use dispatchTouchEvent()?
                 edittext.onTouchEvent(event);               // Call native handler
 
                 return false;

From 3b2eba5bd71548bd1b424fcdf9503740047881e9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 9 Sep 2015 16:42:49 +0200
Subject: [PATCH 11/16] Avoid the standard keyboard poping up on long click.

---
 .../main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 06e88ab0..6bbbcd31 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -208,6 +208,17 @@ public boolean onTouch(View v, MotionEvent event) {
                 return false;
             }
         });
+
+        // FIXME: for some reason, this prevents the text selection from working
+        edittext.setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                if (v != null)
+                    ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+                return false;
+            }
+        });
     }
 
     /**

From 06539733aec012670e64815610f7e2b15412b01f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 9 Sep 2015 18:03:21 +0200
Subject: [PATCH 12/16] Fix visualization of the backspace key.

---
 app/src/main/res/xml/calculator_keyboard.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
index 813058b1..e41a8f8e 100644
--- a/app/src/main/res/xml/calculator_keyboard.xml
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -8,7 +8,7 @@
         <Key android:codes="55" android:keyLabel="7" android:keyEdgeFlags="left" />
         <Key android:codes="56" android:keyLabel="8" />
         <Key android:codes="57" android:keyLabel="9" />
-        <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
+        <Key android:codes="-5" android:keyIcon="@drawable/ic_backspace_normal_dark"
             android:isRepeatable="true" />
     </Row>
     <Row>

From c93f805a7b97ed9ec687e8f503f87005659bc912 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 9 Sep 2015 23:00:24 +0200
Subject: [PATCH 13/16] Add a "next" key to focus the next field.

---
 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 6 ++++++
 app/src/main/res/xml/calculator_keyboard.xml                      | 3 ++-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 6bbbcd31..37079c4a 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -91,6 +91,7 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 56:
                 case 57:
                     //editable.replace(start, end, Character.toString((char) primaryCode));
+                    // XXX: could be android:keyOutputText attribute used instead of this?
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
                 case -5:
@@ -99,6 +100,11 @@ public void onKey(int primaryCode, int[] keyCodes) {
                     break;
                 case 1001:
                     evaluateEditTextExpression(edittext);
+                    break;
+                case 1002:
+                    // FIXME: show the keyboard too
+                    edittext.focusSearch(View.FOCUS_DOWN).requestFocus();
+                    break;
             }
         }
 
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
index e41a8f8e..49038476 100644
--- a/app/src/main/res/xml/calculator_keyboard.xml
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -28,7 +28,8 @@
     <Row>
         <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
         <Key android:codes="46" android:keyLabel="." />
-        <Key android:codes="1001" android:keyLabel="=" android:horizontalGap="40%"
+        <Key android:codes="1001" android:keyLabel="=" android:horizontalGap="20%" />
+        <Key android:codes="1002" android:keyIcon="@drawable/navigation_next_item"
             android:keyEdgeFlags="right" />
     </Row>
 </Keyboard>
\ No newline at end of file

From ee17a70efdb4fe97befe5bd03769268f62113ecc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 17 Sep 2015 18:51:33 +0200
Subject: [PATCH 14/16] Added known issues of the CustomKeyboard.

---
 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 37079c4a..5ed0ddb0 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -43,6 +43,11 @@
 /**
  * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
  *
+ * Known issues:
+ *  - It's not possible to select text.
+ *  - When in landscape, the EditText is covered by the keyboard.
+ *  - No i18n.
+ *
  * @author Maarten Pennings, extended by SimplicityApks
  * @date 2012 December 23
  */

From 5424646fbf4824de6b9d236f88f83780e8b77111 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 18 Sep 2015 12:26:15 +0200
Subject: [PATCH 15/16] Fixes saving of a new transaction using amount entered
 with calculator

Fixes parsing of amount quantities
---
 .../main/java/org/gnucash/android/model/Money.java |  5 ++
 .../java/org/gnucash/android/ui/FormActivity.java  |  7 +-
 .../ui/transaction/TransactionFormFragment.java    | 86 +++++++++++++++-------
 ...CustomKeyboard.java => CalculatorKeyboard.java} | 58 ++++++---------
 4 files changed, 88 insertions(+), 68 deletions(-)
 rename app/src/main/java/org/gnucash/android/ui/util/{CustomKeyboard.java => CalculatorKeyboard.java} (88%)

diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 81a06b7a..c7a66e47 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -285,6 +285,11 @@ public long getDenominator() {
 		throw new RuntimeException("Unsupported number of fraction digits " + getScale());
 	}
 
+	/**
+	 * Returns the scale (precision) used for the decimal places of this amount.
+	 * <p>The scale used depends on the currency</p>
+	 * @return Scale of amount as integer
+	 */
 	private int getScale() {
 		int scale = mCurrency.getDefaultFractionDigits();
 		if (scale < 0) {
diff --git a/app/src/main/java/org/gnucash/android/ui/FormActivity.java b/app/src/main/java/org/gnucash/android/ui/FormActivity.java
index ffbb5cae..b9b76eb9 100644
--- a/app/src/main/java/org/gnucash/android/ui/FormActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/FormActivity.java
@@ -26,7 +26,6 @@
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.view.MenuItem;
-import android.view.inputmethod.EditorInfo;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
@@ -35,7 +34,7 @@
 import org.gnucash.android.ui.export.ExportFormFragment;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.SplitEditorFragment;
-import org.gnucash.android.ui.util.CustomKeyboard;
+import org.gnucash.android.ui.util.CalculatorKeyboard;
 
 /**
  * Activity for displaying forms in the application.
@@ -47,7 +46,7 @@
 
     private String mAccountUID;
 
-    private CustomKeyboard mOnBackListener;
+    private CalculatorKeyboard mOnBackListener;
 
     public enum FormType {ACCOUNT, TRANSACTION, EXPORT, SPLIT_EDITOR}
 
@@ -179,7 +178,7 @@ private void showFormFragment(Fragment fragment){
     }
 
 
-    public void setOnBackListener(CustomKeyboard keyboard) {
+    public void setOnBackListener(CalculatorKeyboard keyboard) {
         mOnBackListener = keyboard;
     }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 9679a8b9..a48b4b12 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.res.Configuration;
 import android.database.Cursor;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
@@ -56,9 +57,6 @@
 import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrenceFormatter;
 import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
 
-import net.objecthunter.exp4j.Expression;
-import net.objecthunter.exp4j.ExpressionBuilder;
-
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
@@ -74,10 +72,10 @@
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.dialog.TransferFundsDialogFragment;
 import org.gnucash.android.ui.util.AmountInputFormatter;
+import org.gnucash.android.ui.util.CalculatorKeyboard;
 import org.gnucash.android.ui.util.OnTransferFundsListener;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.TransactionTypeSwitch;
-import org.gnucash.android.ui.util.CustomKeyboard;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
@@ -215,10 +213,14 @@
 
     private String mAccountUID;
 
-    private List<Split> mSplitsList = new ArrayList<Split>();
+    private List<Split> mSplitsList = new ArrayList<>();
 
     private boolean mEditMode = false;
-    private CustomKeyboard mCalculatorKeyboard;
+
+    /**
+     * Custom calculator keyboard
+     */
+    private CalculatorKeyboard mCalculatorKeyboard;
 
     /**
      * Split quantity which will be set from the funds transfer dialog
@@ -271,6 +273,12 @@ private void startTransferFunds() {
     }
 
     @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        initCalculatorKeyboard();
+    }
+
+    @Override
 	public void onActivityCreated(Bundle savedInstanceState) {
 		super.onActivityCreated(savedInstanceState);
 		setHasOptionsMenu(true);
@@ -340,12 +348,19 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             mEditMode = true;
 		}
 
-        mCalculatorKeyboard = new CustomKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
+        initCalculatorKeyboard();
+	}
+
+    /**
+     * Initializes the calculator keyboard
+     */
+    private void initCalculatorKeyboard() {
+        mCalculatorKeyboard = new CalculatorKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
         mCalculatorKeyboard.setCurrency(Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountUID)));
         mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
         // FIXME: decouple from FormActivity
         ((FormActivity) getActivity()).setOnBackListener(mCalculatorKeyboard);
-	}
+    }
 
     /**
      * Extension of SimpleCursorAdapter which is used to populate the fields for the list items
@@ -636,15 +651,15 @@ public boolean onTouch(View v, MotionEvent event) {
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
 
-			@Override
-			public void onClick(View v) {
-				long dateMillis = 0;
-				try {
-					Date date = DATE_FORMATTER.parse(mDateTextView.getText().toString());
-					dateMillis = date.getTime();
-				} catch (ParseException e) {
-					Log.e(getTag(), "Error converting input time to Date object");
-				}
+            @Override
+            public void onClick(View v) {
+                long dateMillis = 0;
+                try {
+                    Date date = DATE_FORMATTER.parse(mDateTextView.getText().toString());
+                    dateMillis = date.getTime();
+                } catch (ParseException e) {
+                    Log.e(getTag(), "Error converting input time to Date object");
+                }
                 Calendar calendar = Calendar.getInstance();
                 calendar.setTimeInMillis(dateMillis);
 
@@ -655,8 +670,8 @@ public void onClick(View v) {
                         TransactionFormFragment.this,
                         year, monthOfYear, dayOfMonth);
                 datePickerDialog.show(getFragmentManager(), "date_picker_fragment");
-			}
-		});
+            }
+        });
 
 		mTimeTextView.setOnClickListener(new View.OnClickListener() {
 
@@ -740,7 +755,7 @@ private void saveNewTransaction() {
 				mTime.get(Calendar.SECOND));
 		String description = mDescriptionEditText.getText().toString();
 		String notes = mNotesEditText.getText().toString();
-		BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
+		BigDecimal amountBigd = new BigDecimal(mAmountEditText.getText().toString().replaceAll(",", ".").trim());
 
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getAccountCurrencyCode(mAccountUID));
 		Money amount 	= new Money(amountBigd, currency).absolute();
@@ -792,7 +807,8 @@ private void saveNewTransaction() {
             } else {
                 mTransaction = new Transaction(description);
 
-                if (mSplitsList.isEmpty()) { //amount entered in the simple interface (not using splits Editor)
+                //****************** amount entered in the simple interface (not using splits Editor) ************************
+                if (mSplitsList.isEmpty()) {
                     Split split = new Split(amount, mAccountUID);
                     split.setType(mTransactionTypeButton.getTransactionType());
                     mTransaction.addSplit(split);
@@ -918,14 +934,17 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return true;
 
 		case R.id.menu_save:
-            if (mAmountEditText.getText().length() == 0) {
-                Toast.makeText(getActivity(), R.string.toast_transanction_amount_required, Toast.LENGTH_SHORT).show();
-            } else if (mUseDoubleEntry && mTransferAccountSpinner.getCount() == 0){
-                Toast.makeText(getActivity(),
-                        R.string.toast_disable_double_entry_to_save_transaction,
-                        Toast.LENGTH_LONG).show();
-            } else {
+            if (canSave()){
                 saveNewTransaction();
+            } else {
+                if (mAmountEditText.getText().length() == 0) {
+                    Toast.makeText(getActivity(), R.string.toast_transanction_amount_required, Toast.LENGTH_SHORT).show();
+                }
+                if (mUseDoubleEntry && mTransferAccountSpinner.getCount() == 0){
+                    Toast.makeText(getActivity(),
+                            R.string.toast_disable_double_entry_to_save_transaction,
+                            Toast.LENGTH_LONG).show();
+                }
             }
 			return true;
 
@@ -935,6 +954,17 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	}
 
     /**
+     * Checks if the pre-requisites for saving the transaction are fulfilled
+     * <p>The conditions checked are that a valid amount is entered and that a transfer account is set (where applicable)</p>
+     * @return {@code true} if the transaction can be saved, {@code false} otherwise
+     */
+    private boolean canSave(){
+        mCalculatorKeyboard.evaluateEditTextExpression(mAmountEditText);
+        return (mAmountEditText.getText().length() > 0 && mAmountEditText.getError() == null)
+                || (mUseDoubleEntry && mTransferAccountSpinner.getCount() == 0);
+    }
+
+    /**
      * Called by the split editor fragment to notify of finished editing
      * @param splitList List of splits produced in the fragment
      */
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java
similarity index 88%
rename from app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
rename to app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java
index 0774ce7b..97a4bded 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java
@@ -1,5 +1,10 @@
 /**
  * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ *
+ * Modified by:
+ * Copyright 2015 lex Magaz Graa <rivaldi8@gmail.com>
+ * Copyright 2015 Ngewi Fet <ngewif@gmail.com>
+ *
  * <p/>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,6 +28,7 @@
 import android.inputmethodservice.Keyboard;
 import android.inputmethodservice.KeyboardView;
 import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.support.annotation.LayoutRes;
 import android.text.Editable;
 import android.text.InputType;
 import android.util.Log;
@@ -64,10 +70,10 @@
  * @author Maarten Pennings, extended by SimplicityApks
  * @date 2012 December 23
  */
-public class CustomKeyboard {
+public class CalculatorKeyboard {
 
     public static final int KEY_CODE_DECIMAL_SEPARATOR = 46;
-    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    /** A link to the KeyboardView that is used to render this CalculatorKeyboard. */
     private KeyboardView mKeyboardView;
     /** A link to the activity that hosts the {@link #mKeyboardView}. */
     private Activity mHostActivity;
@@ -156,13 +162,13 @@ public void onPress(int arg0) {
      * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
      *
      * @param host The hosting activity.
-     * @param viewid The id of the KeyboardView.
-     * @param layoutid The id of the xml file containing the keyboard layout.
+     * @param keyboardViewId The id of the KeyboardView.
+     * @param xmlLayoutResId The id of the xml file containing the keyboard layout.
      */
-    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+    public CalculatorKeyboard(Activity host, int keyboardViewId, @LayoutRes int xmlLayoutResId) {
         mHostActivity = host;
-        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
-        Keyboard keyboard = new Keyboard(mHostActivity, layoutid);
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(keyboardViewId);
+        Keyboard keyboard = new Keyboard(mHostActivity, xmlLayoutResId);
         for (Keyboard.Key key : keyboard.getKeys()) {
             if (key.codes[0] == KEY_CODE_DECIMAL_SEPARATOR){
                 key.label = mDecimalSeparator;
@@ -176,12 +182,12 @@ public CustomKeyboard(Activity host, int viewid, int layoutid) {
         mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
     }
 
-    /** Returns whether the CustomKeyboard is visible. */
+    /** Returns whether the CalculatorKeyboard is visible. */
     public boolean isCustomKeyboardVisible() {
         return mKeyboardView.getVisibility() == View.VISIBLE;
     }
 
-    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    /** Make the CalculatorKeyboard visible, and hide the system keyboard for view v. */
     public void showCustomKeyboard(View v) {
         if (v != null)
             ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
@@ -190,7 +196,7 @@ public void showCustomKeyboard(View v) {
         mKeyboardView.setEnabled(true);
     }
 
-    /** Make the CustomKeyboard invisible. */
+    /** Make the CalculatorKeyboard invisible. */
     public void hideCustomKeyboard() {
         mKeyboardView.setVisibility(View.GONE);
         mKeyboardView.setEnabled(false);
@@ -230,30 +236,6 @@ public void onClick(View v) {
         // Disable spell check (hex strings look like words to Android)
         edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
 
-        /**
-         * Try to show cursor the complicated way:
-         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
-         * fixes the cursor not movable bug
-         */
-
-        //TODO: find a way to set this listener if the view doesn't already have one
-        //e.g. when using the calculator in split editor
-/*
-        edittext.setOnTouchListener(new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (!isCustomKeyboardVisible())
-                    showCustomKeyboard(v);
-
-
-                // XXX: Use dispatchTouchEvent()?
-                edittext.onTouchEvent(event);               // Call native handler
-
-                return false;
-            }
-        });
-*/
-
         // FIXME: for some reason, this prevents the text selection from working
         edittext.setOnLongClickListener(new View.OnLongClickListener() {
             @Override
@@ -266,6 +248,10 @@ public boolean onLongClick(View v) {
         });
     }
 
+    /**
+     * Sets the currency to be used for this calculation
+     * @param currency Currency of the amount being computed
+     */
     public void setCurrency(Currency currency){
         this.mCurrency = currency;
     }
@@ -287,7 +273,7 @@ public boolean onBackPressed() {
             return false;
     }
 
-    private void evaluateEditTextExpression(EditText editText) {
+    public void evaluateEditTextExpression(EditText editText) {
         String amountText = editText.getText().toString();
         amountText = amountText.replaceAll(",", ".");
         if (amountText.trim().isEmpty())
@@ -318,7 +304,7 @@ private void evaluateEditTextExpression(EditText editText) {
             String resultString = formatter.format(result.doubleValue());
 
             editText.setText(resultString);
-            editText.setSelection(result.toPlainString().length());
+            editText.setSelection(resultString.length());
         } else {
             // FIXME: i18n
             editText.setError("Invalid expression!");

From 932e349571b49b285923e6cac1ae14da265d340b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 18 Sep 2015 17:04:50 +0200
Subject: [PATCH 16/16] Use the custom calculator keyboard for the split editor

Fix negative sign shown for positive amounts in split editor
Create new custom EditText which uses the calculator
Remove imbalance from split editor layout / use menu option for adding split
Mark "exported" column in transaction table as deprecated
Code cleanup and refactoring
---
 .../gnucash/android/app/GnuCashApplication.java    |   2 -
 .../org/gnucash/android/db/DatabaseSchema.java     |   6 +
 .../ui/transaction/SplitEditorFragment.java        |  97 ++-----
 .../ui/transaction/TransactionFormFragment.java    | 147 +++-------
 .../android/ui/util/CalculatorEditText.java        | 322 +++++++++++++++++++++
 .../android/ui/util/CalculatorKeyboard.java        | 143 ++-------
 .../android/ui/util/TransactionTypeSwitch.java     |  11 +-
 app/src/main/res/layout/dialog_transfer_funds.xml  | 260 +++++++++--------
 app/src/main/res/layout/fragment_split_editor.xml  |  79 ++---
 .../main/res/layout/fragment_transaction_form.xml  |   9 +-
 app/src/main/res/layout/item_split_entry.xml       |  13 +-
 app/src/main/res/menu/split_editor_actions.xml     |  27 ++
 app/src/main/res/values-de/strings.xml             |   1 +
 app/src/main/res/values-el/strings.xml             |   1 +
 app/src/main/res/values-es-rMX/strings.xml         |   1 +
 app/src/main/res/values-es/strings.xml             |   1 +
 app/src/main/res/values-fr/strings.xml             |   1 +
 app/src/main/res/values-hu/strings.xml             |   1 +
 app/src/main/res/values-it/strings.xml             |   1 +
 app/src/main/res/values-nb/strings.xml             |   1 +
 app/src/main/res/values-nl/strings.xml             |   1 +
 app/src/main/res/values-pl/strings.xml             |   1 +
 app/src/main/res/values-pt-rBR/strings.xml         |   1 +
 app/src/main/res/values-ru/strings.xml             |   1 +
 app/src/main/res/values-uk/strings.xml             |   1 +
 app/src/main/res/values-zh-rTW/strings.xml         |   1 +
 app/src/main/res/values-zh/strings.xml             |   1 +
 app/src/main/res/values/arrays.xml                 |  15 +
 app/src/main/res/values/attrs.xml                  |  22 ++
 app/src/main/res/values/strings.xml                |   1 +
 30 files changed, 696 insertions(+), 473 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/ui/util/CalculatorEditText.java
 create mode 100644 app/src/main/res/menu/split_editor_actions.xml
 create mode 100644 app/src/main/res/values/attrs.xml

diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index d98a0b64..850babde 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -24,14 +24,12 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.graphics.Color;
-import android.os.Build;
 import android.preference.PreferenceManager;
 import android.util.Log;
 
 import com.crashlytics.android.Crashlytics;
 import com.crashlytics.android.core.CrashlyticsCore;
 
-import org.gnucash.android.BuildConfig;
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.CommoditiesDbAdapter;
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 88b9928c..de4b3e72 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -80,6 +80,12 @@ private DatabaseSchema(){}
         public static final String COLUMN_CURRENCY              = "currency_code";
         public static final String COLUMN_COMMODITY_UID         = "commodity_uid";
         public static final String COLUMN_TIMESTAMP             = "timestamp";
+
+        /**
+         * Flag for marking transactions which have been exported
+         * @deprecated Transactions are exported based on last modified timestamp
+         */
+        @Deprecated
         public static final String COLUMN_EXPORTED              = "is_exported";
         public static final String COLUMN_TEMPLATE              = "is_template";
         public static final String COLUMN_SCHEDX_ACTION_UID     = "scheduled_action_uid";
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
index 37401935..21a0a410 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
@@ -18,6 +18,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.database.Cursor;
+import android.inputmethodservice.KeyboardView;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.widget.SimpleCursorAdapter;
@@ -50,7 +51,8 @@
 import org.gnucash.android.ui.FormActivity;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.dialog.TransferFundsDialogFragment;
-import org.gnucash.android.ui.util.AmountInputFormatter;
+import org.gnucash.android.ui.util.CalculatorEditText;
+import org.gnucash.android.ui.util.CalculatorKeyboard;
 import org.gnucash.android.ui.util.OnTransferFundsListener;
 import org.gnucash.android.ui.util.TransactionTypeSwitch;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
@@ -71,9 +73,8 @@
  */
 public class SplitEditorFragment extends Fragment {
 
-    @Bind(R.id.split_list_layout) LinearLayout mSplitsLinearLayout;
-    @Bind(R.id.imbalance_textview) TextView mImbalanceTextView;
-    @Bind(R.id.btn_add_split) Button mAddSplit;
+    @Bind(R.id.split_list_layout)   LinearLayout mSplitsLinearLayout;
+    @Bind(R.id.calculator_keyboard) KeyboardView mKeyboardView;
 
     private AccountsDbAdapter mAccountsDbAdapter;
     private Cursor mCursor;
@@ -81,11 +82,11 @@
     private List<View> mSplitItemViewList;
     private String mAccountUID;
 
-    private BalanceTextWatcher mBalanceUpdater = new BalanceTextWatcher();
     private BigDecimal mBaseAmount = BigDecimal.ZERO;
 
     private ArrayList<String> mRemovedSplitUIDs = new ArrayList<>();
 
+    CalculatorKeyboard mCalculatorKeyboard;
     /**
      * Create and return a new instance of the fragment with the appropriate paramenters
      * @param args Arguments to be set to the fragment. <br>
@@ -102,13 +103,6 @@ public static SplitEditorFragment newInstance(Bundle args){
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.fragment_split_editor, container, false);
         ButterKnife.bind(this, view);
-
-        mAddSplit.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                addSplitView(null);
-            }
-        });
         return view;
     }
 
@@ -118,9 +112,10 @@ public void onActivityCreated(Bundle savedInstanceState) {
 
         ActionBar actionBar = ((AppCompatActivity)getActivity()).getSupportActionBar();
         assert actionBar != null;
-        actionBar.setTitle(R.string.title_transaction_splits);
+        actionBar.setTitle(R.string.title_split_editor);
         setHasOptionsMenu(true);
 
+        mCalculatorKeyboard = new CalculatorKeyboard(getActivity(), mKeyboardView, R.xml.calculator_keyboard);
         mSplitItemViewList = new ArrayList<>();
 
         //we are editing splits for a new transaction.
@@ -147,8 +142,6 @@ public void onActivityCreated(Bundle savedInstanceState) {
             view.findViewById(R.id.input_accounts_spinner).setEnabled(false);
             view.findViewById(R.id.btn_remove_split).setVisibility(View.GONE);
         }
-
-        updateTotal();
     }
 
     private void loadSplitViews(List<Split> splitList) {
@@ -159,7 +152,7 @@ private void loadSplitViews(List<Split> splitList) {
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.default_save_actions, menu);
+        inflater.inflate(R.menu.split_editor_actions, menu);
     }
 
     @Override
@@ -175,6 +168,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 saveSplits();
                 return true;
 
+            case R.id.menu_add_split:
+                addSplitView(null);
+                return true;
+
             default:
                 return super.onOptionsItemSelected(item);
         }
@@ -217,7 +214,7 @@ private void initArgs() {
      */
     class SplitViewHolder implements OnTransferFundsListener{
         @Bind(R.id.input_split_memo)        EditText splitMemoEditText;
-        @Bind(R.id.input_split_amount)      EditText splitAmountEditText;
+        @Bind(R.id.input_split_amount)      CalculatorEditText splitAmountEditText;
         @Bind(R.id.btn_remove_split)        ImageView removeSplitButton;
         @Bind(R.id.input_accounts_spinner)  Spinner accountsSpinner;
         @Bind(R.id.split_currency_symbol)   TextView splitCurrencyTextView;
@@ -226,7 +223,6 @@ private void initArgs() {
 
         View splitView;
         Money quantity;
-        AmountInputFormatter amountInputFormatter;
 
         public SplitViewHolder(View splitView, Split split){
             ButterKnife.bind(this, splitView);
@@ -242,8 +238,7 @@ public void transferComplete(Money amount) {
         }
 
         private void setListeners(Split split){
-            amountInputFormatter = new AmountInputFormatter(splitAmountEditText);
-            splitAmountEditText.addTextChangedListener(amountInputFormatter);
+            splitAmountEditText.bindListeners(mCalculatorKeyboard);
 
             removeSplitButton.setOnClickListener(new View.OnClickListener() {
                 @Override
@@ -251,7 +246,6 @@ public void onClick(View view) {
                     mRemovedSplitUIDs.add(splitUidTextView.getText().toString());
                     mSplitsLinearLayout.removeView(splitView);
                     mSplitItemViewList.remove(splitView);
-                    updateTotal();
                 }
             });
 
@@ -264,6 +258,7 @@ public void onClick(View view) {
             splitUidTextView.setText(UUID.randomUUID().toString());
 
             if (split != null) {
+                splitAmountEditText.setCurrency(split.getValue().getCurrency());
                 splitAmountEditText.setText(split.getFormattedValue().toPlainString());
                 splitCurrencyTextView.setText(split.getValue().getCurrency().getSymbol());
                 splitMemoEditText.setText(split.getMemo());
@@ -276,14 +271,6 @@ public void onClick(View view) {
 
             accountsSpinner.setOnItemSelectedListener(new SplitAccountListener(splitTypeButton, this));
 
-            //put these balance update triggers last last so as to avoid computing while still loading
-            splitAmountEditText.addTextChangedListener(mBalanceUpdater);
-            splitTypeButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    updateTotal();
-                }
-            });
         }
     }
 
@@ -330,10 +317,11 @@ private void saveSplits() {
         List<Split> splitList = new ArrayList<>();
         for (View splitView : mSplitItemViewList) {
             SplitViewHolder viewHolder = (SplitViewHolder) splitView.getTag();
-            if (viewHolder.splitAmountEditText.getText().toString().isEmpty())
+            if (viewHolder.splitAmountEditText.getText().length() == 0)
                 continue;
 
-            BigDecimal amountBigDecimal = TransactionFormFragment.parseInputToDecimal(viewHolder.splitAmountEditText.getText().toString());
+            BigDecimal amountBigDecimal = viewHolder.splitAmountEditText.getValue();
+
             String currencyCode = mAccountsDbAdapter.getCurrencyCode(mAccountUID);
             Money valueAmount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
 
@@ -350,45 +338,6 @@ private void saveSplits() {
     }
 
     /**
-     * Updates the displayed total for the transaction.
-     * Computes the total of the splits, the unassigned balance and the split sum
-     */
-    private void updateTotal(){
-        List<Split> splitList   = extractSplitsFromView();
-        String currencyCode     = mAccountsDbAdapter.getCurrencyCode(mAccountUID);
-        Money splitSum          = Money.createZeroInstance(currencyCode);
-        for (Split split : splitList) {
-            Money amount = split.getValue().absolute();
-            if (split.getType() == TransactionType.DEBIT)
-                splitSum = splitSum.subtract(amount);
-            else
-                splitSum = splitSum.add(amount);
-        }
-        TransactionsActivity.displayBalance(mImbalanceTextView, splitSum);
-    }
-
-    /**
-     * Updates the displayed balance of the accounts when the amount of a split is changed
-     */
-    private class BalanceTextWatcher implements TextWatcher {
-
-        @Override
-        public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-        }
-
-        @Override
-        public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-
-        }
-
-        @Override
-        public void afterTextChanged(Editable editable) {
-            updateTotal();
-        }
-    }
-
-    /**
      * Listens to changes in the transfer account and updates the currency symbol, the label of the
      * transaction type and if neccessary
      */
@@ -420,13 +369,11 @@ public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int
                 return;
             }
 
-            String stringAmount = mSplitViewHolder.splitAmountEditText.getText().toString();
-            if (stringAmount.isEmpty())
+            BigDecimal amountBigD = mSplitViewHolder.splitAmountEditText.getValue();
+            if (amountBigD == null)
                 return;
 
-            Money amount = new Money(
-                    TransactionFormFragment.parseInputToDecimal(stringAmount),
-                    Currency.getInstance(fromCurrencyCode));
+            Money amount = new Money(amountBigD, Currency.getInstance(fromCurrencyCode));
             TransferFundsDialogFragment fragment
                     = TransferFundsDialogFragment.getInstance(amount, targetCurrencyCode, mSplitViewHolder);
             fragment.show(getFragmentManager(), "tranfer_funds_editor");
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index a48b4b12..26446bdd 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -22,6 +22,7 @@
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.database.Cursor;
+import android.inputmethodservice.KeyboardView;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.app.Fragment;
@@ -30,7 +31,6 @@
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
-import android.text.Editable;
 import android.text.format.DateUtils;
 import android.text.format.Time;
 import android.util.Log;
@@ -71,8 +71,7 @@
 import org.gnucash.android.ui.FormActivity;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.dialog.TransferFundsDialogFragment;
-import org.gnucash.android.ui.util.AmountInputFormatter;
-import org.gnucash.android.ui.util.CalculatorKeyboard;
+import org.gnucash.android.ui.util.CalculatorEditText;
 import org.gnucash.android.ui.util.OnTransferFundsListener;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.TransactionTypeSwitch;
@@ -91,6 +90,9 @@
 import java.util.List;
 import java.util.Locale;
 
+import butterknife.Bind;
+import butterknife.ButterKnife;
+
 /**
  * Fragment for creating or editing transactions
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -140,58 +142,50 @@
 	/**
 	 * Button for setting the transaction type, either credit or debit
 	 */
-	private TransactionTypeSwitch mTransactionTypeButton;
+	@Bind(R.id.input_transaction_type) TransactionTypeSwitch mTransactionTypeSwitch;
 
 	/**
 	 * Input field for the transaction name (description)
 	 */
-	private AutoCompleteTextView mDescriptionEditText;
+	@Bind(R.id.input_transaction_name) AutoCompleteTextView mDescriptionEditText;
 
 	/**
 	 * Input field for the transaction amount
 	 */
-	private EditText mAmountEditText;
+	@Bind(R.id.input_transaction_amount) CalculatorEditText mAmountEditText;
 
 	/**
 	 * Field for the transaction currency.
 	 * The transaction uses the currency of the account
 	 */
-	private TextView mCurrencyTextView;
+	@Bind(R.id.currency_symbol) TextView mCurrencyTextView;
 
 	/**
 	 * Input field for the transaction description (note)
 	 */
-	private EditText mNotesEditText;
+	@Bind(R.id.input_description) EditText mNotesEditText;
 
 	/**
 	 * Input field for the transaction date
 	 */
-	private TextView mDateTextView;
+	@Bind(R.id.input_date) TextView mDateTextView;
 
 	/**
 	 * Input field for the transaction time
 	 */
-	private TextView mTimeTextView;
-
-	/**
-	 * {@link Calendar} for holding the set date
-	 */
-	private Calendar mDate;
-
-	/**
-	 * {@link Calendar} object holding the set time
-	 */
-	private Calendar mTime;
+	@Bind(R.id.input_time) TextView mTimeTextView;
 
 	/**
 	 * Spinner for selecting the transfer account
 	 */
-	private Spinner mTransferAccountSpinner;
+	@Bind(R.id.input_transfer_account_spinner) Spinner mTransferAccountSpinner;
 
     /**
      * Checkbox indicating if this transaction should be saved as a template or not
      */
-    private CheckBox mSaveTemplateCheckbox;
+    @Bind(R.id.checkbox_save_template) CheckBox mSaveTemplateCheckbox;
+
+    @Bind(R.id.input_recurrence) TextView mRecurrenceTextView;
 
     /**
      * Flag to note if double entry accounting is in use or not
@@ -199,18 +193,25 @@
 	private boolean mUseDoubleEntry;
 
     /**
+     * {@link Calendar} for holding the set date
+     */
+    private Calendar mDate;
+
+    /**
+     * {@link Calendar} object holding the set time
+     */
+    private Calendar mTime;
+
+    /**
      * The AccountType of the account to which this transaction belongs.
      * Used for determining the accounting rules for credits and debits
      */
     AccountType mAccountType;
 
-    TextView mRecurrenceTextView;
 
     private String mRecurrenceRule;
     private EventRecurrence mEventRecurrence = new EventRecurrence();
 
-    private AmountInputFormatter mAmountInputFormatter;
-
     private String mAccountUID;
 
     private List<Split> mSplitsList = new ArrayList<>();
@@ -218,11 +219,6 @@
     private boolean mEditMode = false;
 
     /**
-     * Custom calculator keyboard
-     */
-    private CalculatorKeyboard mCalculatorKeyboard;
-
-    /**
      * Split quantity which will be set from the funds transfer dialog
      */
     private Money mSplitQuantity;
@@ -234,18 +230,8 @@
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View v = inflater.inflate(R.layout.fragment_transaction_form, container, false);
-
-		mDescriptionEditText = (AutoCompleteTextView) v.findViewById(R.id.input_transaction_name);
-		mNotesEditText = (EditText) v.findViewById(R.id.input_description);
-		mDateTextView           = (TextView) v.findViewById(R.id.input_date);
-		mTimeTextView           = (TextView) v.findViewById(R.id.input_time);
-		mAmountEditText         = (EditText) v.findViewById(R.id.input_transaction_amount);
-		mCurrencyTextView       = (TextView) v.findViewById(R.id.currency_symbol);
-		mTransactionTypeButton  = (TransactionTypeSwitch) v.findViewById(R.id.input_transaction_type);
-		mTransferAccountSpinner = (Spinner) v.findViewById(R.id.input_transfer_account_spinner);
-        mRecurrenceTextView     = (TextView) v.findViewById(R.id.input_recurrence);
-        mSaveTemplateCheckbox = (CheckBox) v.findViewById(R.id.checkbox_save_template);
-
+        ButterKnife.bind(this, v);
+        mAmountEditText.bindListeners((KeyboardView) v.findViewById(R.id.calculator_keyboard));
         return v;
 	}
 
@@ -258,11 +244,11 @@ private void startTransferFunds() {
         String targetCurrency = mAccountsDbAdapter.getCurrencyCode((mAccountsDbAdapter.getUID(id)));
 
         if (fromCurrency.equals(Currency.getInstance(targetCurrency))
-                || !mAmountInputFormatter.isInputModified()
+                || !mAmountEditText.isInputModified()
                 || mSplitQuantity != null) //if both accounts have same currency
             return;
 
-        BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
+        BigDecimal amountBigd = mAmountEditText.getValue();
         if (mSplitQuantity != null || amountBigd.equals(BigDecimal.ZERO))
             return;
         Money amount 	= new Money(amountBigd, fromCurrency).absolute();
@@ -275,7 +261,6 @@ private void startTransferFunds() {
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-        initCalculatorKeyboard();
     }
 
     @Override
@@ -347,22 +332,9 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 			initializeViewsWithTransaction();
             mEditMode = true;
 		}
-
-        initCalculatorKeyboard();
 	}
 
     /**
-     * Initializes the calculator keyboard
-     */
-    private void initCalculatorKeyboard() {
-        mCalculatorKeyboard = new CalculatorKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
-        mCalculatorKeyboard.setCurrency(Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountUID)));
-        mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
-        // FIXME: decouple from FormActivity
-        ((FormActivity) getActivity()).setOnBackListener(mCalculatorKeyboard);
-    }
-
-    /**
      * Extension of SimpleCursorAdapter which is used to populate the fields for the list items
      * in the transactions suggestions (auto-complete transaction description).
      */
@@ -418,7 +390,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
                 mTransaction = new Transaction(mTransactionsDbAdapter.getRecord(id), true);
                 mTransaction.setTime(System.currentTimeMillis());
                 //we check here because next method will modify it and we want to catch user-modification
-                boolean amountEntered = mAmountInputFormatter.isInputModified();
+                boolean amountEntered = mAmountEditText.isInputModified();
                 initializeViewsWithTransaction();
                 List<Split> splitList = mTransaction.getSplits();
                 boolean isSplitPair = splitList.size() == 2 && splitList.get(0).isPairOf(splitList.get(1));
@@ -451,10 +423,10 @@ private void initializeViewsWithTransaction(){
 		mDescriptionEditText.setText(mTransaction.getDescription());
         mDescriptionEditText.setSelection(mDescriptionEditText.getText().length());
 
-        mTransactionTypeButton.setAccountType(mAccountType);
-        mTransactionTypeButton.setChecked(mTransaction.getBalance(mAccountUID).isNegative());
+        mTransactionTypeSwitch.setAccountType(mAccountType);
+        mTransactionTypeSwitch.setChecked(mTransaction.getBalance(mAccountUID).isNegative());
 
-		if (!mAmountInputFormatter.isInputModified()){
+		if (!mAmountEditText.isInputModified()){
             //when autocompleting, only change the amount if the user has not manually changed it already
             mAmountEditText.setText(mTransaction.getBalance(mAccountUID).toPlainString());
         }
@@ -510,7 +482,7 @@ private void initializeViewsWithTransaction(){
 
     private void setAmountEditViewVisible(int visibility) {
         getView().findViewById(R.id.layout_double_entry).setVisibility(visibility);
-        mTransactionTypeButton.setVisibility(visibility);
+        mTransactionTypeSwitch.setVisibility(visibility);
     }
 
     private void toggleAmountInputEntryMode(boolean enabled){
@@ -537,9 +509,9 @@ private void initalizeViews() {
 		mTimeTextView.setText(TIME_FORMATTER.format(time));
 		mTime = mDate = Calendar.getInstance();
 
-        mTransactionTypeButton.setAccountType(mAccountType);
+        mTransactionTypeSwitch.setAccountType(mAccountType);
 		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
-        mTransactionTypeButton.setChecked(TransactionType.valueOf(typePref));
+        mTransactionTypeSwitch.setChecked(TransactionType.valueOf(typePref));
 
 		String code = Money.DEFAULT_CURRENCY_CODE;
 		if (mAccountUID != null){
@@ -594,7 +566,7 @@ private void openSplitEditor(){
         String baseAmountString;
 
         if (mTransaction == null){ //if we are creating a new transaction (not editing an existing one)
-            BigDecimal enteredAmount = parseInputToDecimal(mAmountEditText.getText().toString());
+            BigDecimal enteredAmount = mAmountEditText.getValue();
             baseAmountString = enteredAmount.toPlainString();
         } else {
             Money biggestAmount = Money.createZeroInstance(mTransaction.getCurrencyCode());
@@ -623,8 +595,6 @@ private void openSplitEditor(){
 	 * Sets click listeners for the dialog buttons
 	 */
 	private void setListeners() {
-        mAmountInputFormatter = new AmountTextWatcher(mAmountEditText);
-        //mAmountEditText.addTextChangedListener(mAmountInputFormatter);
         mAmountEditText.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
@@ -637,8 +607,8 @@ public boolean onTouch(View v, MotionEvent event) {
                     if (event.getRawX() >= (mAmountEditText.getRight() - mAmountEditText.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {
                         openSplitEditor();
                         return true;
-                    } else if (!mCalculatorKeyboard.isCustomKeyboardVisible()) {
-                        mCalculatorKeyboard.showCustomKeyboard(v);
+                    } else if (!mAmountEditText.getCalculatorKeyboard().isCustomKeyboardVisible()) {
+                        mAmountEditText.getCalculatorKeyboard().showCustomKeyboard(v);
                     }
                 }
 
@@ -647,7 +617,7 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
-		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
+		mTransactionTypeSwitch.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
 
@@ -746,6 +716,7 @@ public void run() {
 	 * and save a transaction
 	 */
 	private void saveNewTransaction() {
+        mAmountEditText.getCalculatorKeyboard().hideCustomKeyboard();
 		Calendar cal = new GregorianCalendar(
 				mDate.get(Calendar.YEAR),
 				mDate.get(Calendar.MONTH),
@@ -755,7 +726,7 @@ private void saveNewTransaction() {
 				mTime.get(Calendar.SECOND));
 		String description = mDescriptionEditText.getText().toString();
 		String notes = mNotesEditText.getText().toString();
-		BigDecimal amountBigd = new BigDecimal(mAmountEditText.getText().toString().replaceAll(",", ".").trim());
+		BigDecimal amountBigd = mAmountEditText.getValue();
 
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getAccountCurrencyCode(mAccountUID));
 		Money amount 	= new Money(amountBigd, currency).absolute();
@@ -776,10 +747,10 @@ private void saveNewTransaction() {
             //if it is a simple transfer where the editor was not used, then respect the button
             for (Split split : mSplitsList) {
                 if (split.getAccountUID().equals(mAccountUID)){
-                    split.setType(mTransactionTypeButton.getTransactionType());
+                    split.setType(mTransactionTypeSwitch.getTransactionType());
                     split.setValue(amount);
                 } else {
-                    split.setType(mTransactionTypeButton.getTransactionType().invert());
+                    split.setType(mTransactionTypeSwitch.getTransactionType().invert());
                     if (mSplitQuantity != null)
                         split.setQuantity(mSplitQuantity);
                     split.setValue(amount);
@@ -810,7 +781,7 @@ private void saveNewTransaction() {
                 //****************** amount entered in the simple interface (not using splits Editor) ************************
                 if (mSplitsList.isEmpty()) {
                     Split split = new Split(amount, mAccountUID);
-                    split.setType(mTransactionTypeButton.getTransactionType());
+                    split.setType(mTransactionTypeSwitch.getTransactionType());
                     mTransaction.addSplit(split);
 
                     String transferAcctUID;
@@ -959,8 +930,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
      * @return {@code true} if the transaction can be saved, {@code false} otherwise
      */
     private boolean canSave(){
-        mCalculatorKeyboard.evaluateEditTextExpression(mAmountEditText);
-        return (mAmountEditText.getText().length() > 0 && mAmountEditText.getError() == null)
+        return (mAmountEditText.isInputValid())
                 || (mUseDoubleEntry && mTransferAccountSpinner.getCount() == 0);
     }
 
@@ -973,7 +943,7 @@ public void setSplitList(List<Split> splitList, List<String> removedSplitUIDs){
         Money balance = Transaction.computeBalance(mAccountUID, mSplitsList);
 
         mAmountEditText.setText(balance.toPlainString());
-        mTransactionTypeButton.setChecked(balance.isNegative());
+        mTransactionTypeSwitch.setChecked(balance.isNegative());
         //once we set the split list, do not allow direct editing of the total
         if (mSplitsList.size() > 1){
             toggleAmountInputEntryMode(false);
@@ -1087,25 +1057,4 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
             setSplitList(splitList, removedSplits);
         }
     }
-
-    /**
-     * Formats the amount and adds a negative sign if the amount will decrease the account balance
-     */
-    public class AmountTextWatcher extends AmountInputFormatter {
-
-        public AmountTextWatcher(EditText amountInput) {
-            super(amountInput);
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            String value = s.toString();
-            if (value.length() > 0 && mTransactionTypeButton.isChecked()){
-                if (s.charAt(0) != '-'){
-                    s = Editable.Factory.getInstance().newEditable("-" + value);
-                }
-            }
-            super.afterTextChanged(s);
-        }
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CalculatorEditText.java b/app/src/main/java/org/gnucash/android/ui/util/CalculatorEditText.java
new file mode 100644
index 00000000..16955a6c
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/util/CalculatorEditText.java
@@ -0,0 +1,322 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.inputmethodservice.KeyboardView;
+import android.support.annotation.XmlRes;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+import com.crashlytics.android.Crashlytics;
+
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.ui.FormActivity;
+
+import java.math.BigDecimal;
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
+import java.util.Currency;
+import java.util.Locale;
+
+/**
+ * A custom EditText which supports computations and uses a custom calculator keyboard.
+ * <p>Afer the view is inflated, make sure to call {@link #bindListeners(KeyboardView)}
+ * with the view from your layout where the calculator keyboard should be displayed:</p>
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class CalculatorEditText extends EditText {
+    CalculatorKeyboard mCalculatorKeyboard;
+    private Currency mCurrency = Currency.getInstance(GnuCashApplication.getDefaultCurrencyCode());
+    private Context mContext;
+
+    /**
+     * Flag which is set if the contents of this view have been modified
+     */
+    private boolean isContentModified = false;
+
+    private int mCalculatorKeysLayout;
+    private KeyboardView mCalculatorKeyboardView;
+
+    public CalculatorEditText(Context context) {
+        super(context);
+        this.mContext = context;
+    }
+
+    public CalculatorEditText(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context, attrs);
+    }
+
+    public CalculatorEditText(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context, attrs);
+    }
+
+    /**
+     * Overloaded constructor
+     * Reads any attributes which are specified in XML and applies them
+     * @param context Activity context
+     * @param attrs View attributes
+     */
+    private void init(Context context, AttributeSet attrs){
+        this.mContext = context;
+        TypedArray a = context.getTheme().obtainStyledAttributes(
+                attrs,
+                R.styleable.CalculatorEditText,
+                0, 0);
+
+        try {
+            mCalculatorKeysLayout = a.getResourceId(R.styleable.CalculatorEditText_keyboardKeysLayout, R.xml.calculator_keyboard);
+        } finally {
+            a.recycle();
+        }
+
+        addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                isContentModified = true;
+            }
+        });
+    }
+
+    public void bindListeners(CalculatorKeyboard calculatorKeyboard){
+        mCalculatorKeyboard = calculatorKeyboard;
+        mContext = calculatorKeyboard.getContext();
+        setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    mCalculatorKeyboard.showCustomKeyboard(v);
+                else {
+                    mCalculatorKeyboard.hideCustomKeyboard();
+                    evaluate();
+                }
+            }
+        });
+
+        setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener we can show the custom keyboard again,
+            // by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                mCalculatorKeyboard.showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        setInputType(getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        // FIXME: for some reason, this prevents the text selection from working
+        setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                if (v != null)
+                    ((InputMethodManager) GnuCashApplication.getAppContext()
+                            .getSystemService(Activity.INPUT_METHOD_SERVICE))
+                            .hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+                return false;
+            }
+        });
+
+        setOnTouchListener(new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!mCalculatorKeyboard.isCustomKeyboardVisible())
+                    mCalculatorKeyboard.showCustomKeyboard(v);
+
+
+                // XXX: Use dispatchTouchEvent()?
+                onTouchEvent(event);               // Call native handler
+                return false;
+            }
+        });
+
+        ((FormActivity)mContext).setOnBackListener(mCalculatorKeyboard);
+    }
+    /**
+     * Initializes listeners on the edittext
+     */
+    public void bindListeners(KeyboardView keyboardView){
+        bindListeners(new CalculatorKeyboard(mContext, keyboardView, mCalculatorKeysLayout));
+    }
+
+    /**
+     * Returns the calculator keyboard instantiated by this edittext
+     * @return CalculatorKeyboard
+     */
+    public CalculatorKeyboard getCalculatorKeyboard(){
+        return mCalculatorKeyboard;
+    }
+
+    /**
+     * Returns the view Id of the keyboard view
+     * @return Keyboard view
+     */
+    public KeyboardView getCalculatorKeyboardView() {
+        return mCalculatorKeyboardView;
+    }
+
+    /**
+     * Set the keyboard view used for displaying the keyboard
+     * @param calculatorKeyboardView Calculator keyboard view
+     */
+    public void setCalculatorKeyboardView(KeyboardView calculatorKeyboardView) {
+        this.mCalculatorKeyboardView = calculatorKeyboardView;
+        bindListeners(calculatorKeyboardView);
+    }
+
+    /**
+     * Returns the XML resource ID describing the calculator keys layout
+     * @return XML resource ID
+     */
+    public int getCalculatorKeysLayout() {
+        return mCalculatorKeysLayout;
+    }
+
+    /**
+     * Sets the XML resource describing the layout of the calculator keys
+     * @param mCalculatorKeysLayout XML resource ID
+     */
+    public void setCalculatorKeysLayout(@XmlRes int mCalculatorKeysLayout) {
+        this.mCalculatorKeysLayout = mCalculatorKeysLayout;
+        bindListeners(mCalculatorKeyboardView);
+    }
+
+    /**
+     * Sets the calculator keyboard to use for this EditText
+     * @param keyboard Properly intialized calculator keyobard
+     */
+    public void setCalculatorKeyboard(CalculatorKeyboard keyboard){
+        this.mCalculatorKeyboard = keyboard;
+    }
+
+    /**
+     * Returns the currency used for computations
+     * @return ISO 4217 currency
+     */
+    public Currency getCurrency() {
+        return mCurrency;
+    }
+
+    /**
+     * Sets the currency to use for calculations
+     * The currency determines the number of decimal places used
+     * @param currency ISO 4217 currency
+     */
+    public void setCurrency(Currency currency) {
+        this.mCurrency = currency;
+    }
+
+    /**
+     * Evaluates the arithmetic expression in the editText and sets the text property
+     * @return Result of arithmetic evaluation which is same as text displayed in edittext
+     */
+    public String evaluate(){
+        String amountText = getText().toString();
+        amountText = amountText.replaceAll(",", ".");
+        if (amountText.trim().isEmpty())
+            return amountText.trim();
+
+        ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+        Expression expression;
+
+        try {
+            expression = expressionBuilder.build();
+        } catch (RuntimeException e) {
+            // FIXME: i18n
+            setError("Invalid expression!");
+            String msg = "Invalid expression: " + amountText;
+            Log.e(this.getClass().getSimpleName(), msg);
+            Crashlytics.log(msg);
+            return "";
+        }
+
+        if (expression != null && expression.validate().isValid()) {
+            BigDecimal result = new BigDecimal(expression.evaluate());
+            result = result.setScale(mCurrency.getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
+
+            DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
+            formatter.setMinimumFractionDigits(0);
+            formatter.setMaximumFractionDigits(mCurrency.getDefaultFractionDigits());
+            formatter.setGroupingUsed(false);
+            String resultString = formatter.format(result.doubleValue());
+
+            setText(resultString);
+            setSelection(resultString.length());
+        } else {
+            // FIXME: i18n
+            setError("Invalid expression!");
+            Log.w(VIEW_LOG_TAG, "Expression is null or invalid: " + expression);
+        }
+        return getText().toString();
+    }
+
+    /**
+     * Evaluates the expression in the text and returns true if the result is valid
+     * @return @{code true} if the input is valid, {@code false} otherwise
+     */
+    public boolean isInputValid(){
+        evaluate();
+        return getText().length() > 0 && getError() == null;
+    }
+
+    /**
+     * Returns true if the content of this view has been modified
+     * @return {@code true} if content has changed, {@code false} otherwise
+     */
+    public boolean isInputModified(){
+        return this.isContentModified;
+    }
+
+    /**
+     * Returns the value of the amount in the edit text or null if the field is empty.
+     * Performs an evaluation of the expression first
+     * @return BigDecimal value
+     */
+    public BigDecimal getValue(){
+        evaluate();
+        String amountText = getText().toString();
+        if (amountText.isEmpty())
+            return null;
+        return new BigDecimal(amountText.replaceAll(",", ".").trim());
+    }
+}
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java
index 97a4bded..384ca205 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CalculatorKeyboard.java
@@ -25,10 +25,13 @@
 package org.gnucash.android.ui.util;
 
 import android.app.Activity;
+import android.content.Context;
 import android.inputmethodservice.Keyboard;
 import android.inputmethodservice.KeyboardView;
 import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.support.annotation.IdRes;
 import android.support.annotation.LayoutRes;
+import android.support.annotation.XmlRes;
 import android.text.Editable;
 import android.text.InputType;
 import android.util.Log;
@@ -69,34 +72,36 @@
  *
  * @author Maarten Pennings, extended by SimplicityApks
  * @date 2012 December 23
+ *
+ * @author lex Magaz Graa <rivaldi8@gmail.com>
+ * @author Ngewi Fet <ngewif@gmail.com>
+ *
  */
 public class CalculatorKeyboard {
 
     public static final int KEY_CODE_DECIMAL_SEPARATOR = 46;
     /** A link to the KeyboardView that is used to render this CalculatorKeyboard. */
     private KeyboardView mKeyboardView;
-    /** A link to the activity that hosts the {@link #mKeyboardView}. */
-    private Activity mHostActivity;
-    private boolean hapticFeedback;
 
-    private Currency mCurrency = Currency.getInstance(GnuCashApplication.getDefaultCurrencyCode());
+    private Context mContext;
+    private boolean hapticFeedback;
 
     final String mDecimalSeparator = Character.toString(DecimalFormatSymbols.getInstance().getDecimalSeparator());
 
     private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
         @Override
         public void onKey(int primaryCode, int[] keyCodes) {
-            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+            View focusCurrent = ((Activity)mContext).getWindow().getCurrentFocus();
 
             /*
             if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
                 return;
             */
 
-            EditText edittext = (EditText) focusCurrent;
-            Editable editable = edittext.getText();
-            int start = edittext.getSelectionStart();
-            int end = edittext.getSelectionEnd();
+            CalculatorEditText calculatorEditText = (CalculatorEditText) focusCurrent;
+            Editable editable = calculatorEditText.getText();
+            int start = calculatorEditText.getSelectionStart();
+            int end = calculatorEditText.getSelectionEnd();
 
             // FIXME: use replace() down
             // delete the selection, if chars are selected:
@@ -130,11 +135,11 @@ public void onKey(int primaryCode, int[] keyCodes) {
                     editable.delete(deleteStart, end);
                     break;
                 case 1001:
-                    evaluateEditTextExpression(edittext);
+                    calculatorEditText.evaluate();
                     break;
                 case 1002:
                     // FIXME: show the keyboard too
-                    edittext.focusSearch(View.FOCUS_DOWN).requestFocus();
+                    calculatorEditText.focusSearch(View.FOCUS_DOWN).requestFocus();
                     break;
             }
         }
@@ -159,16 +164,15 @@ public void onPress(int arg0) {
      * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
      * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
      * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
-     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
      *
-     * @param host The hosting activity.
-     * @param keyboardViewId The id of the KeyboardView.
-     * @param xmlLayoutResId The id of the xml file containing the keyboard layout.
+     * @param context Context within with the calculator is created
+     * @param keyboardView KeyboardView in the layout
+     * @param keyboardLayoutResId The id of the xml file containing the keyboard layout.
      */
-    public CalculatorKeyboard(Activity host, int keyboardViewId, @LayoutRes int xmlLayoutResId) {
-        mHostActivity = host;
-        mKeyboardView = (KeyboardView) mHostActivity.findViewById(keyboardViewId);
-        Keyboard keyboard = new Keyboard(mHostActivity, xmlLayoutResId);
+    public CalculatorKeyboard(Context context, KeyboardView keyboardView, @XmlRes int keyboardLayoutResId) {
+        mContext = context;
+        mKeyboardView = keyboardView;
+        Keyboard keyboard = new Keyboard(mContext, keyboardLayoutResId);
         for (Keyboard.Key key : keyboard.getKeys()) {
             if (key.codes[0] == KEY_CODE_DECIMAL_SEPARATOR){
                 key.label = mDecimalSeparator;
@@ -179,7 +183,7 @@ public CalculatorKeyboard(Activity host, int keyboardViewId, @LayoutRes int xmlL
         mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
         mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
         // Hide the standard keyboard initially
-        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+        ((Activity)mContext).getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
     }
 
     /** Returns whether the CalculatorKeyboard is visible. */
@@ -190,7 +194,7 @@ public boolean isCustomKeyboardVisible() {
     /** Make the CalculatorKeyboard visible, and hide the system keyboard for view v. */
     public void showCustomKeyboard(View v) {
         if (v != null)
-            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+            ((InputMethodManager) mContext.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
 
         mKeyboardView.setVisibility(View.VISIBLE);
         mKeyboardView.setEnabled(true);
@@ -203,60 +207,6 @@ public void hideCustomKeyboard() {
     }
 
     /**
-     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
-     *
-     * @param resid The resource id of the EditText that registers to the custom keyboard.
-     */
-    public void registerEditText(int resid) {
-        // Find the EditText 'resid'
-        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
-        // Make the custom keyboard appear
-        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
-            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (hasFocus)
-                    showCustomKeyboard(v);
-                else {
-                    hideCustomKeyboard();
-                    evaluateEditTextExpression((EditText) v);
-                }
-            }
-        });
-
-        edittext.setOnClickListener(new OnClickListener() {
-            // NOTE By setting the on click listener we can show the custom keyboard again,
-            // by tapping on an edit box that already had focus (but that had the keyboard hidden).
-            @Override
-            public void onClick(View v) {
-                showCustomKeyboard(v);
-            }
-        });
-
-        // Disable spell check (hex strings look like words to Android)
-        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
-
-        // FIXME: for some reason, this prevents the text selection from working
-        edittext.setOnLongClickListener(new View.OnLongClickListener() {
-            @Override
-            public boolean onLongClick(View v) {
-                if (v != null)
-                    ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
-
-                return false;
-            }
-        });
-    }
-
-    /**
-     * Sets the currency to be used for this calculation
-     * @param currency Currency of the amount being computed
-     */
-    public void setCurrency(Currency currency){
-        this.mCurrency = currency;
-    }
-
-    /**
      * Enables or disables the Haptic feedback on keyboard touches
      * @param goEnabled true if you want haptic feedback, falso otherwise
      */
@@ -273,42 +223,11 @@ public boolean onBackPressed() {
             return false;
     }
 
-    public void evaluateEditTextExpression(EditText editText) {
-        String amountText = editText.getText().toString();
-        amountText = amountText.replaceAll(",", ".");
-        if (amountText.trim().isEmpty())
-            return;
-
-        ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
-        Expression expression;
-
-        try {
-            expression = expressionBuilder.build();
-        } catch (RuntimeException e) {
-            // FIXME: i18n
-            editText.setError("Invalid expression!");
-            String msg = "Invalid expression: " + amountText;
-            Log.e(this.getClass().getSimpleName(), msg);
-            Crashlytics.log(msg);
-            return;
-        }
-
-        if (expression != null && expression.validate().isValid()) {
-            BigDecimal result = new BigDecimal(expression.evaluate());
-            result = result.setScale(mCurrency.getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
-
-            DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
-            formatter.setMinimumFractionDigits(0);
-            formatter.setMaximumFractionDigits(mCurrency.getDefaultFractionDigits());
-            formatter.setGroupingUsed(false);
-            String resultString = formatter.format(result.doubleValue());
-
-            editText.setText(resultString);
-            editText.setSelection(resultString.length());
-        } else {
-            // FIXME: i18n
-            editText.setError("Invalid expression!");
-            // TODO: log error
-        }
+    /**
+     * Returns the context of this keyboard
+     * @return Context
+     */
+    public Context getContext(){
+        return mContext;
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeSwitch.java b/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeSwitch.java
index f93164a1..b62b6fd8 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeSwitch.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeSwitch.java
@@ -166,8 +166,15 @@ public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
             }
             String amountText = mAmountEditText.getText().toString();
             if (amountText.length() > 0){
-                String changedSignText = TransactionFormFragment.parseInputToDecimal(amountText).negate().toPlainString();
-                mAmountEditText.setText(changedSignText); //trigger an edit to update the number sign
+                String newText = amountText;
+                if (isChecked && !amountText.startsWith("-")){
+                    newText = "-" + amountText;
+                }
+                if (!isChecked && amountText.startsWith("-")){
+                    newText = amountText.substring(1);
+                }
+                mAmountEditText.setText(newText);
+                mAmountEditText.setSelection(newText.length());
             }
         }
     }
diff --git a/app/src/main/res/layout/dialog_transfer_funds.xml b/app/src/main/res/layout/dialog_transfer_funds.xml
index 65c59081..8e4493f8 100644
--- a/app/src/main/res/layout/dialog_transfer_funds.xml
+++ b/app/src/main/res/layout/dialog_transfer_funds.xml
@@ -14,137 +14,157 @@
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
-<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:gnucash="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
-    android:orientation="vertical"
     android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:focusableInTouchMode="true">
-    <TableRow android:padding="@dimen/dialog_padding">
-        <TextView android:text="Amount:"
-            android:textSize="16sp"
-            android:layout_weight="1"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content" />
-        <TextView android:id="@+id/amount_to_convert"
-            android:textSize="18sp"
-            tools:text="$ 2000.00"
-            android:layout_weight="2"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content" />
-    </TableRow>
+    android:layout_height="match_parent">
 
-    <TableRow android:padding="@dimen/dialog_padding">
-        <TextView
-            android:text="From:"
-            android:layout_width="0dp"
-            android:layout_weight="1"
-            android:textSize="16sp"
-            android:gravity="left"
-            android:layout_height="wrap_content" />
-        <TextView android:id="@+id/from_currency"
-            android:layout_width="0dp"
-            android:layout_weight="1.5"
-            android:layout_height="wrap_content"
-            android:textStyle="bold"
-            android:textSize="18sp"
-            tools:text="USD"/>
-        <TextView android:text="To:"
-            android:layout_width="0dp"
-            android:layout_weight="1"
-            android:layout_height="wrap_content"
-            android:textSize="16sp" />
-        <TextView android:id="@+id/to_currency"
-            android:layout_width="0dp"
-            android:layout_weight="1.5"
-            android:layout_height="wrap_content"
-            android:textStyle="bold"
-            android:textSize="18sp"
-            tools:text="EUR"/>
-    </TableRow>
-
-    <TextView
-        android:padding="@dimen/dialog_padding"
+    <ScrollView
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="Provide either the converted amount or exchange rate in order to transfer funds"
-        />
-    <TableRow android:gravity="center_vertical"
-        android:paddingTop="@dimen/dialog_padding"
-        android:paddingLeft="@dimen/dialog_padding"
-        android:paddingRight="@dimen/dialog_padding">
-        <RadioButton android:id="@+id/radio_exchange_rate"
-            android:layout_width="0dp"
-            android:layout_weight="0.5"
-            android:layout_height="wrap_content"
-            android:checked="false" />
-
-        <android.support.design.widget.TextInputLayout
-            android:id="@+id/exchange_rate_text_input_layout"
-            android:layout_width="0dp"
-            android:layout_weight="2"
-            android:layout_height="wrap_content">
-        <EditText android:id="@+id/input_exchange_rate"
+        android:layout_height="match_parent">
+        <TableLayout
+            android:orientation="vertical"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:enabled="false"
-            android:inputType="number"
-            android:hint="Exchange rate"/>
-        </android.support.design.widget.TextInputLayout>
+            android:focusableInTouchMode="true">
+            <TableRow android:padding="@dimen/dialog_padding">
+                <TextView android:text="Amount:"
+                    android:textSize="16sp"
+                    android:layout_weight="1"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content" />
+                <TextView android:id="@+id/amount_to_convert"
+                    android:textSize="18sp"
+                    tools:text="$ 2000.00"
+                    android:layout_weight="2"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content" />
+            </TableRow>
 
-        <!-- TODO: re-enable this button when fetching of price quotes is implemented -->
-        <Button android:id="@+id/btn_fetch_exchange_rate"
-            style="?attr/borderlessButtonStyle"
-            android:textColor="@color/theme_accent"
-            android:layout_width="0dp"
-            android:layout_weight="1"
-            android:layout_height="wrap_content"
-            android:enabled="false"
-            android:visibility="gone"
-            android:text="Fetch quote"/>
-    </TableRow>
-    <TextView android:id="@+id/label_exchange_rate_example"
-        android:paddingLeft="@dimen/dialog_padding"
-        android:paddingRight="@dimen/dialog_padding"
-        android:paddingBottom="@dimen/dialog_padding"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:gravity="center"
-        tools:text="1 USD = 1.34 EUR"
-        />
+            <TableRow android:padding="@dimen/dialog_padding">
+                <TextView
+                    android:text="From:"
+                    android:layout_width="0dp"
+                    android:layout_weight="1"
+                    android:textSize="16sp"
+                    android:gravity="left"
+                    android:layout_height="wrap_content" />
+                <TextView android:id="@+id/from_currency"
+                    android:layout_width="0dp"
+                    android:layout_weight="1.5"
+                    android:layout_height="wrap_content"
+                    android:textStyle="bold"
+                    android:textSize="18sp"
+                    tools:text="USD"/>
+                <TextView android:text="To:"
+                    android:layout_width="0dp"
+                    android:layout_weight="1"
+                    android:layout_height="wrap_content"
+                    android:textSize="16sp" />
+                <TextView android:id="@+id/to_currency"
+                    android:layout_width="0dp"
+                    android:layout_weight="1.5"
+                    android:layout_height="wrap_content"
+                    android:textStyle="bold"
+                    android:textSize="18sp"
+                    tools:text="EUR"/>
+            </TableRow>
 
-    <TableRow android:gravity="center_vertical"
-        android:padding="@dimen/dialog_padding">
-        <RadioButton android:id="@+id/radio_converted_amount"
-            android:layout_width="0dp"
-            android:layout_weight="0.5"
-            android:layout_height="wrap_content"
-            android:checked="true" />
+            <TextView
+                android:padding="@dimen/dialog_padding"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="Provide either the converted amount or exchange rate in order to transfer funds"
+                />
+            <TableRow android:gravity="center_vertical"
+                android:paddingTop="@dimen/dialog_padding"
+                android:paddingLeft="@dimen/dialog_padding"
+                android:paddingRight="@dimen/dialog_padding">
+                <RadioButton android:id="@+id/radio_exchange_rate"
+                    android:layout_width="0dp"
+                    android:layout_weight="0.5"
+                    android:layout_height="wrap_content"
+                    android:checked="false" />
 
-        <android.support.design.widget.TextInputLayout
-            android:id="@+id/converted_amount_text_input_layout"
-            android:layout_width="0dp"
-            android:layout_weight="2"
-            android:layout_height="wrap_content">
-            <EditText android:id="@+id/input_converted_amount"
+                <android.support.design.widget.TextInputLayout
+                    android:id="@+id/exchange_rate_text_input_layout"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content">
+                    <EditText android:id="@+id/input_exchange_rate"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:enabled="false"
+                        android:inputType="numberDecimal"
+                        gnucash:keyboardKeysLayout="@xml/calculator_keyboard"
+                        android:hint="Exchange rate"/>
+                </android.support.design.widget.TextInputLayout>
+
+                <!-- TODO: re-enable this button when fetching of price quotes is implemented -->
+                <Button android:id="@+id/btn_fetch_exchange_rate"
+                    style="?attr/borderlessButtonStyle"
+                    android:textColor="@color/theme_accent"
+                    android:layout_width="0dp"
+                    android:layout_weight="1"
+                    android:layout_height="wrap_content"
+                    android:enabled="false"
+                    android:visibility="gone"
+                    android:text="Fetch quote"/>
+            </TableRow>
+            <TextView android:id="@+id/label_exchange_rate_example"
+                android:paddingLeft="@dimen/dialog_padding"
+                android:paddingRight="@dimen/dialog_padding"
+                android:paddingBottom="@dimen/dialog_padding"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:inputType="number"
-                android:hint="Converted Amount">
-                <requestFocus />
-            </EditText>
-        </android.support.design.widget.TextInputLayout>
+                android:gravity="center"
+                tools:text="1 USD = 1.34 EUR"
+                />
 
-        <TextView android:id="@+id/target_currency"
-            android:textSize="16sp"
-            android:layout_weight="0.7"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center"
-            tools:text="EUR"/>
-    </TableRow>
+            <TableRow android:gravity="center_vertical"
+                android:padding="@dimen/dialog_padding">
+                <RadioButton android:id="@+id/radio_converted_amount"
+                    android:layout_width="0dp"
+                    android:layout_weight="0.5"
+                    android:layout_height="wrap_content"
+                    android:checked="true" />
 
-    <include layout="@layout/default_buttons"
+                <android.support.design.widget.TextInputLayout
+                    android:id="@+id/converted_amount_text_input_layout"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content">
+                    <EditText android:id="@+id/input_converted_amount"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:inputType="numberDecimal"
+                        android:hint="Converted Amount">
+                        <requestFocus />
+                    </EditText>
+                </android.support.design.widget.TextInputLayout>
+
+                <TextView android:id="@+id/target_currency"
+                    android:textSize="16sp"
+                    android:layout_weight="0.7"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    tools:text="EUR"/>
+            </TableRow>
+
+            <include layout="@layout/default_buttons"
+                android:layout_height="wrap_content"
+                android:layout_width="wrap_content"/>
+        </TableLayout>
+    </ScrollView>
+    <android.inputmethodservice.KeyboardView android:id="@+id/calculator_keyboard"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_width="wrap_content"/>
-</TableLayout>
\ No newline at end of file
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:visibility="gone" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/fragment_split_editor.xml b/app/src/main/res/layout/fragment_split_editor.xml
index f3d48b82..7e7bbb6f 100644
--- a/app/src/main/res/layout/fragment_split_editor.xml
+++ b/app/src/main/res/layout/fragment_split_editor.xml
@@ -16,62 +16,37 @@ limitations under the License.
 -->
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    android:orientation="vertical"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                android:paddingLeft="@dimen/dialog_padding"
-                android:paddingRight="@dimen/dialog_padding"
-                android:paddingTop="@dimen/dialog_padding"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
     tools:context=".ui.FormActivity">
 
-    <ScrollView android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                android:layout_above="@+id/footer">
-        <LinearLayout android:id="@+id/split_list_layout"
-                      android:layout_width="match_parent"
-                      android:layout_height="wrap_content"
-                      android:orientation="vertical">
-            <!-- Split edit views will be added here at runtime-->
-        </LinearLayout>
-    </ScrollView>
-
-
-    <include layout="@layout/horizontal_line"
-             android:layout_width="match_parent"
-             android:layout_height="1dp"
-             android:layout_above="@id/footer"/>
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <ScrollView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/dialog_padding"
+            android:layout_above="@+id/footer">
+            <LinearLayout android:id="@+id/split_list_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:minHeight="200dp"
+                android:orientation="vertical">
+                <!-- Split edit views will be added here at runtime-->
+            </LinearLayout>
+        </ScrollView>
 
-    <Button android:id="@+id/btn_add_split"
-        android:layout_width="wrap_content"
+    </LinearLayout>
+    <android.inputmethodservice.KeyboardView android:id="@+id/calculator_keyboard"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:minWidth="100dp"
         android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
         android:layout_alignParentRight="true"
-        android:layout_alignParentEnd="true"
-        android:layout_gravity="center"
-        android:textColor="@android:color/white"
-        android:text="@string/btn_add_split"/>
-
-    <LinearLayout android:id="@+id/footer"
-                 android:layout_width="match_parent"
-                 android:layout_height="wrap_content"
-                 android:layout_above="@id/btn_add_split">
-
-            <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="match_parent"
-                    android:textAppearance="?android:attr/textAppearanceSmall"
-                    android:gravity="center_vertical"
-                    android:text="@string/label_imbalance"/>
-
-            <TextView android:id="@+id/imbalance_textview"
-                      android:layout_width="0dp"
-                      android:layout_height="match_parent"
-                      android:layout_weight="1"
-                      android:textAppearance="?android:attr/textAppearanceSmall"
-                      android:gravity="right|center_vertical"
-                      tools:text="$200"/>
-    </LinearLayout>
-
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:visibility="gone" />
 </RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/fragment_transaction_form.xml b/app/src/main/res/layout/fragment_transaction_form.xml
index d2b66c4a..1f8a6c1f 100644
--- a/app/src/main/res/layout/fragment_transaction_form.xml
+++ b/app/src/main/res/layout/fragment_transaction_form.xml
@@ -16,15 +16,13 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:gnucash="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
     <ScrollView
         android:layout_width="match_parent"
         android:layout_height="match_parent">
-        android:padding="@dimen/dialog_padding"
-        android:stretchColumns="1"
-        android:orientation="vertical" >
 
         <TableLayout android:id="@+id/fragment_transaction_form"
             android:layout_width="match_parent"
@@ -57,7 +55,7 @@
                     android:textSize="22dp"
                     android:text="$" />
 
-                <EditText
+                <org.gnucash.android.ui.util.CalculatorEditText
                     android:id="@+id/input_transaction_amount"
                     android:layout_width="0dp"
                     android:layout_weight="3"
@@ -69,7 +67,8 @@
                     android:drawableEnd="@drawable/content_split_holo_light"
                     android:background="@android:color/transparent"
                     android:textColor="@color/debit_red"
-                    android:textSize="20sp" />
+                    android:textSize="20sp"
+                    gnucash:keyboardKeysLayout="@xml/calculator_keyboard"/>
 
                 <org.gnucash.android.ui.util.TransactionTypeSwitch
                     android:id="@+id/input_transaction_type"
diff --git a/app/src/main/res/layout/item_split_entry.xml b/app/src/main/res/layout/item_split_entry.xml
index 74fc1061..dd62af0f 100644
--- a/app/src/main/res/layout/item_split_entry.xml
+++ b/app/src/main/res/layout/item_split_entry.xml
@@ -16,6 +16,7 @@ limitations under the License.
 -->
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
+    xmlns:gnucash="http://schemas.android.com/apk/res-auto"
         android:layout_height="match_parent"
         android:layout_width="match_parent"
         android:orientation="vertical">
@@ -35,20 +36,20 @@ limitations under the License.
                 android:textSize="22sp"
                 android:text="$"/>
 
-        <EditText
+        <org.gnucash.android.ui.util.CalculatorEditText
                 android:id="@+id/input_split_amount"
                 android:layout_width="0dp"
                 android:layout_weight="3"
                 android:layout_height="match_parent"
                 android:layout_marginBottom="@dimen/dialog_padding"
                 android:hint="@string/label_transaction_amount"
-                android:inputType="number"
+                android:inputType="none"
                 android:nextFocusDown="@+id/input_split_memo"
                 android:textColor="@color/debit_red"
-            android:gravity="center_vertical"
-            android:textSize="18sp"
-            android:background="@android:color/transparent"
-                />
+                android:gravity="center_vertical"
+                android:textSize="18sp"
+                android:background="@android:color/transparent"
+                gnucash:keyboardKeysLayout="@xml/calculator_keyboard" />
 
         <org.gnucash.android.ui.util.TransactionTypeSwitch
             android:id="@+id/btn_split_type"
diff --git a/app/src/main/res/menu/split_editor_actions.xml b/app/src/main/res/menu/split_editor_actions.xml
new file mode 100644
index 00000000..937e9396
--- /dev/null
+++ b/app/src/main/res/menu/split_editor_actions.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+-->
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item android:id="@+id/menu_add_split"
+        android:icon="@drawable/ic_add_white_24dp"
+        android:title="@string/btn_add_split"
+        app:showAsAction="always"/>
+
+    <item android:id="@+id/menu_save"
+        android:title="@string/btn_save"
+        app:showAsAction="always|withText"/>
+</menu>
\ No newline at end of file
diff --git a/app/src/main/res/values-de/strings.xml b/app/src/main/res/values-de/strings.xml
index 9dc13776..0d369ba9 100644
--- a/app/src/main/res/values-de/strings.xml
+++ b/app/src/main/res/values-de/strings.xml
@@ -522,6 +522,7 @@ No user-identifiable information will be collected as part of this process!</str
 	<string name="title_setup_gnucash">Setup GnuCash</string>
 	<string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
 	<string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+	<string name="title_split_editor">Split Editor</string>
 	<string-array name="report_time_range">
 		<item>All time</item>
 		<item>Current month</item>
diff --git a/app/src/main/res/values-el/strings.xml b/app/src/main/res/values-el/strings.xml
index 602a8ef3..eca4cb61 100644
--- a/app/src/main/res/values-el/strings.xml
+++ b/app/src/main/res/values-el/strings.xml
@@ -541,6 +541,7 @@ No user-identifiable information will be collected as part of this process!
 	<string name="title_setup_gnucash">Setup GnuCash</string>
 	<string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
 	<string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+	<string name="title_split_editor">Split Editor</string>
 	<string-array name="report_time_range">
 		<item>All time</item>
 		<item>Current month</item>
diff --git a/app/src/main/res/values-es-rMX/strings.xml b/app/src/main/res/values-es-rMX/strings.xml
index 06555f1d..60c2e19a 100644
--- a/app/src/main/res/values-es-rMX/strings.xml
+++ b/app/src/main/res/values-es-rMX/strings.xml
@@ -526,6 +526,7 @@ No user-identifiable information will be collected as part of this process!
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-es/strings.xml b/app/src/main/res/values-es/strings.xml
index 9863b027..83e660be 100644
--- a/app/src/main/res/values-es/strings.xml
+++ b/app/src/main/res/values-es/strings.xml
@@ -523,6 +523,7 @@ Este proceso solo recoge informaci&#243;n que no permite identificar al usuario<
 	<string name="title_setup_gnucash">Setup GnuCash</string>
 	<string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
 	<string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+	<string name="title_split_editor">Split Editor</string>
 	<string-array name="report_time_range">
 		<item>All time</item>
 		<item>Current month</item>
diff --git a/app/src/main/res/values-fr/strings.xml b/app/src/main/res/values-fr/strings.xml
index ee0189eb..a292f54b 100644
--- a/app/src/main/res/values-fr/strings.xml
+++ b/app/src/main/res/values-fr/strings.xml
@@ -523,6 +523,7 @@ Aucune information permettant d\'identifier l\'utilisateur ne sera recueillis da
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-hu/strings.xml b/app/src/main/res/values-hu/strings.xml
index e07bb308..794d7897 100644
--- a/app/src/main/res/values-hu/strings.xml
+++ b/app/src/main/res/values-hu/strings.xml
@@ -527,6 +527,7 @@ No user-identifiable information will be collected as part of this process!
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-it/strings.xml b/app/src/main/res/values-it/strings.xml
index 48f7bfac..cf17ebda 100644
--- a/app/src/main/res/values-it/strings.xml
+++ b/app/src/main/res/values-it/strings.xml
@@ -527,6 +527,7 @@ No user-identifiable information will be collected as part of this process!
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-nb/strings.xml b/app/src/main/res/values-nb/strings.xml
index 67d6ee55..db7151a7 100644
--- a/app/src/main/res/values-nb/strings.xml
+++ b/app/src/main/res/values-nb/strings.xml
@@ -524,6 +524,7 @@ Ingen brukerinformasjon vil bli delt i denne prosessen!
 	<string name="title_setup_gnucash">Setup GnuCash</string>
 	<string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
 	<string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+	<string name="title_split_editor">Split Editor</string>
 	<string-array name="report_time_range">
 		<item>All time</item>
 		<item>Current month</item>
diff --git a/app/src/main/res/values-nl/strings.xml b/app/src/main/res/values-nl/strings.xml
index 1f26202c..b5aa2199 100644
--- a/app/src/main/res/values-nl/strings.xml
+++ b/app/src/main/res/values-nl/strings.xml
@@ -528,6 +528,7 @@ No user-identifiable information will be collected as part of this process!
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-pl/strings.xml b/app/src/main/res/values-pl/strings.xml
index 32c8880a..c91e3abf 100644
--- a/app/src/main/res/values-pl/strings.xml
+++ b/app/src/main/res/values-pl/strings.xml
@@ -524,6 +524,7 @@
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-pt-rBR/strings.xml b/app/src/main/res/values-pt-rBR/strings.xml
index 17ac2916..e5fde424 100644
--- a/app/src/main/res/values-pt-rBR/strings.xml
+++ b/app/src/main/res/values-pt-rBR/strings.xml
@@ -526,6 +526,7 @@ Nenhuma informao de  identificao do usurio ser coletada neste proces
 	<string name="title_setup_gnucash">Setup GnuCash</string>
 	<string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
 	<string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+	<string name="title_split_editor">Split Editor</string>
 	<string-array name="report_time_range">
 		<item>All time</item>
 		<item>Current month</item>
diff --git a/app/src/main/res/values-ru/strings.xml b/app/src/main/res/values-ru/strings.xml
index 1825c4bf..b5651a09 100644
--- a/app/src/main/res/values-ru/strings.xml
+++ b/app/src/main/res/values-ru/strings.xml
@@ -530,6 +530,7 @@
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-uk/strings.xml b/app/src/main/res/values-uk/strings.xml
index 48d97d5e..b31ccb34 100644
--- a/app/src/main/res/values-uk/strings.xml
+++ b/app/src/main/res/values-uk/strings.xml
@@ -510,6 +510,7 @@
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-zh-rTW/strings.xml b/app/src/main/res/values-zh-rTW/strings.xml
index de9b0d2d..4eacdb09 100644
--- a/app/src/main/res/values-zh-rTW/strings.xml
+++ b/app/src/main/res/values-zh-rTW/strings.xml
@@ -524,6 +524,7 @@ No user-identifiable information will be collected as part of this process!
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index 5591db95..063d6a26 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -525,6 +525,7 @@ No user-identifiable information will be collected as part of this process!
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index 29fff55f..f324e138 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -1,4 +1,19 @@
 <?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 <resources>
     <array name="account_colors">
         <item>#0B57A4</item> <!-- aqua -->
diff --git a/app/src/main/res/values/attrs.xml b/app/src/main/res/values/attrs.xml
new file mode 100644
index 00000000..95887275
--- /dev/null
+++ b/app/src/main/res/values/attrs.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<resources>
+    <declare-styleable name="CalculatorEditText">
+        <attr name="keyboardKeysLayout" format="reference" />
+    </declare-styleable>
+
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index c55be383..4df85f44 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -530,6 +530,7 @@
     <string name="title_setup_gnucash">Setup GnuCash</string>
     <string name="wizard_title_welcome_to_gnucash">Welcome to GnuCash</string>
     <string name="msg_wizard_welcome_page">Before you dive in, \nlet\'s setup a few things first\n\nTo continue, press Next</string>
+    <string name="title_split_editor">Split Editor</string>
     <string-array name="report_time_range">
         <item>All time</item>
         <item>Current month</item>
