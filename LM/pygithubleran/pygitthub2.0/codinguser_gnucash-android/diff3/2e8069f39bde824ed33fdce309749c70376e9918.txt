From 95fc7786ab5b85bae3fcb66cd3c68bc9c9497e81 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Tue, 29 Dec 2015 17:21:13 +0100
Subject: [PATCH 1/3] Add more tests for deleting accounts.

Ensure to reproduce https://github.com/codinguser/gnucash-android/issues/460
---
 .../android/test/ui/AccountsActivityTest.java      | 134 ++++++++++++++++-----
 1 file changed, 106 insertions(+), 28 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 8d1bd115..1f89c039 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -71,12 +71,15 @@
 import static android.support.test.espresso.action.ViewActions.scrollTo;
 import static android.support.test.espresso.action.ViewActions.swipeRight;
 import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.doesNotExist;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.hasDescendant;
 import static android.support.test.espresso.matcher.ViewMatchers.isChecked;
 import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
 import static android.support.test.espresso.matcher.ViewMatchers.isNotChecked;
 import static android.support.test.espresso.matcher.ViewMatchers.withEffectiveVisibility;
 import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withParent;
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.allOf;
@@ -87,11 +90,17 @@
 
 @RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
-    private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
+    private static final String ACCOUNTS_CURRENCY_CODE = "USD";
     // Don't add static here, otherwise it gets set to null by super.tearDown()
-    private final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
-    private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
-    private static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
+    private final Commodity ACCOUNTS_CURRENCY = Commodity.getInstance(ACCOUNTS_CURRENCY_CODE);
+    private static final String SIMPLE_ACCOUNT_NAME = "Simple account";
+    private static final String SIMPLE_ACCOUNT_UID = "simple-account";
+    private static final String ROOT_ACCOUNT_NAME = "Root account";
+    private static final String ROOT_ACCOUNT_UID = "root-account";
+    private static final String PARENT_ACCOUNT_NAME = "Parent account";
+    private static final String PARENT_ACCOUNT_UID = "parent-account";
+    private static final String CHILD_ACCOUNT_UID = "child-account";
+    private static final String CHILD_ACCOUNT_NAME = "Child account";
     public static final String TEST_DB_NAME = "test_gnucash_db.sqlite";
 
     private DatabaseHelper mDbHelper;
@@ -125,9 +134,32 @@ public void setUp() throws Exception {
         mAccountsDbAdapter      = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
         mAccountsDbAdapter.deleteAllRecords(); //clear the data
 
-        Account account = new Account(DUMMY_ACCOUNT_NAME, new CommoditiesDbAdapter(mDb).getCommodity(DUMMY_ACCOUNT_CURRENCY_CODE));
-        account.setUID(DUMMY_ACCOUNT_UID);
-		mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
+		Account simpleAccount = new Account(SIMPLE_ACCOUNT_NAME);
+        simpleAccount.setUID(SIMPLE_ACCOUNT_UID);
+		simpleAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
+		mAccountsDbAdapter.addRecord(simpleAccount, DatabaseAdapter.UpdateMethod.insert);
+
+        Account rootAccount = new Account(ROOT_ACCOUNT_NAME);
+        rootAccount.setUID(ROOT_ACCOUNT_UID);
+        rootAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
+        rootAccount.setPlaceHolderFlag(true);
+        rootAccount.setAccountType(AccountType.LIABILITY);
+        mAccountsDbAdapter.addRecord(rootAccount);
+
+        Account parentAccount = new Account(PARENT_ACCOUNT_NAME);
+        parentAccount.setUID(PARENT_ACCOUNT_UID);
+        parentAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
+        parentAccount.setAccountType(AccountType.LIABILITY);
+        parentAccount.setParentUID(ROOT_ACCOUNT_UID);
+        mAccountsDbAdapter.addRecord(parentAccount);
+
+        Account childAccount = new Account(CHILD_ACCOUNT_NAME);
+        childAccount.setUID(CHILD_ACCOUNT_UID);
+        childAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
+        childAccount.setAccountType(AccountType.LIABILITY);
+        childAccount.setParentUID(PARENT_ACCOUNT_UID);
+        mAccountsDbAdapter.addRecord(childAccount);
+
         refreshAccountsList();
     }
 
@@ -138,7 +170,7 @@ public void testPreconditions() {
         assertNotNull(mDb);
         assertNotNull(mSplitsDbAdapter);
         assertNotNull(mTransactionsDbAdapter);
-        assertNotNull(DUMMY_ACCOUNT_CURRENCY);
+        assertNotNull(ACCOUNTS_CURRENCY);
     }
 
     /**
@@ -178,7 +210,7 @@ public void testSearchAccounts(){
         String SEARCH_ACCOUNT_NAME = "Search Account";
 
         Account account = new Account(SEARCH_ACCOUNT_NAME);
-        account.setParentUID(DUMMY_ACCOUNT_UID);
+        account.setParentUID(SIMPLE_ACCOUNT_UID);
         mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
         //enter search query
@@ -188,7 +220,7 @@ public void testSearchAccounts(){
         onView(withText(SEARCH_ACCOUNT_NAME)).check(matches(isDisplayed()));
 
         onView(withId(R.id.search_src_text)).perform(clearText());
-        onView(withId(R.id.primary_text)).check(matches(not(withText(SEARCH_ACCOUNT_NAME))));
+        onView(withText(SEARCH_ACCOUNT_NAME)).check(doesNotExist());
     }
 
     /**
@@ -213,7 +245,7 @@ public void testCreateAccount(){
 
         List<Account> accounts = mAccountsDbAdapter.getAllRecords();
         assertThat(accounts).isNotNull();
-        assertThat(accounts).hasSize(2);
+        assertThat(accounts).hasSize(5);
         Account newestAccount = accounts.get(0); //because of alphabetical sorting
 
         assertThat(newestAccount.getName()).isEqualTo(NEW_ACCOUNT_NAME);
@@ -237,6 +269,7 @@ public void testChangeParentAccount() {
         onView(withId(R.id.checkbox_parent_account)).perform(scrollTo())
                 .check(matches(isNotChecked()))
                 .perform(click());
+        // FIXME: explicitly select the parent account
 
         onView(withId(R.id.menu_save)).perform(click());
 
@@ -244,7 +277,7 @@ public void testChangeParentAccount() {
         String parentUID = editedAccount.getParentUID();
 
         assertThat(parentUID).isNotNull();
-        assertThat(DUMMY_ACCOUNT_UID).isEqualTo(parentUID);
+        assertThat(ROOT_ACCOUNT_UID).isEqualTo(parentUID);
     }
 
     /**
@@ -254,7 +287,7 @@ public void testChangeParentAccount() {
      */
     @Test
     public void shouldHideParentAccountViewWhenNoParentsExist(){
-        onView(allOf(withText(DUMMY_ACCOUNT_NAME), isDisplayed())).perform(click());
+        onView(allOf(withText(SIMPLE_ACCOUNT_NAME), isDisplayed())).perform(click());
         onView(withId(R.id.fragment_transaction_list)).perform(swipeRight());
         onView(withId(R.id.fab_create_transaction)).check(matches(isDisplayed())).perform(click());
         sleep(1000);
@@ -274,16 +307,17 @@ public void shouldHideParentAccountViewWhenNoParentsExist(){
         onView(withId(R.id.menu_save)).perform(click());
         sleep(1000);
         //no sub-accounts
-        assertThat(mAccountsDbAdapter.getSubAccountCount(DUMMY_ACCOUNT_UID)).isEqualTo(0);
+        assertThat(mAccountsDbAdapter.getSubAccountCount(SIMPLE_ACCOUNT_UID)).isEqualTo(0);
         assertThat(mAccountsDbAdapter.getSubAccountCount(mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID())).isEqualTo(2);
         assertThat(mAccountsDbAdapter.getSimpleAccountList()).extracting("mAccountType").contains(AccountType.TRADING);
     }
 
     @Test
     public void testEditAccount(){
-        String editedAccountName = "Edited Account";
+        String editedAccountName = "An Edited Account";
         sleep(2000);
-        onView(withId(R.id.options_menu)).perform(click());
+        onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
+                     withId(R.id.options_menu))).perform(click());
         onView(withText(R.string.title_edit_account)).perform(click());
 
         onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
@@ -296,32 +330,33 @@ public void testEditAccount(){
         Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
 
         assertThat(latest.getName()).isEqualTo(editedAccountName);
-        assertThat(latest.getCurrency().getCurrencyCode()).isEqualTo(DUMMY_ACCOUNT_CURRENCY_CODE);
+        assertThat(latest.getCurrency().getCurrencyCode()).isEqualTo(ACCOUNTS_CURRENCY_CODE);
     }
 
     @Test
     public void editingAccountShouldNotDeleteTransactions(){
-        onView(allOf(withId(R.id.options_menu), isDisplayed()))
-                .perform(click());
+        onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
+                     withId(R.id.options_menu),
+                     isDisplayed())).perform(click());
 
         Account account = new Account("Transfer Account");
-        account.setCommodity(Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode()));
+        account.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY.getCurrencyCode()));
         Transaction transaction = new Transaction("Simple transaction");
-        transaction.setCurrencyCode(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode());
-        Split split = new Split(new Money(BigDecimal.TEN, DUMMY_ACCOUNT_CURRENCY), account.getUID());
+        transaction.setCurrencyCode(ACCOUNTS_CURRENCY.getCurrencyCode());
+        Split split = new Split(new Money(BigDecimal.TEN, ACCOUNTS_CURRENCY), account.getUID());
         transaction.addSplit(split);
-        transaction.addSplit(split.createPair(DUMMY_ACCOUNT_UID));
+        transaction.addSplit(split.createPair(SIMPLE_ACCOUNT_UID));
         account.addTransaction(transaction);
         mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
-        assertThat(mAccountsDbAdapter.getRecord(DUMMY_ACCOUNT_UID).getTransactionCount()).isEqualTo(1);
+        assertThat(mAccountsDbAdapter.getRecord(SIMPLE_ACCOUNT_UID).getTransactionCount()).isEqualTo(1);
         assertThat(mSplitsDbAdapter.getSplitsForTransaction(transaction.getUID())).hasSize(2);
 
         onView(withText(R.string.title_edit_account)).perform(click());
 
         onView(withId(R.id.menu_save)).perform(click());
-        assertThat(mAccountsDbAdapter.getRecord(DUMMY_ACCOUNT_UID).getTransactionCount()).isEqualTo(1);
-        assertThat(mSplitsDbAdapter.fetchSplitsForAccount(DUMMY_ACCOUNT_UID).getCount()).isEqualTo(1);
+        assertThat(mAccountsDbAdapter.getRecord(SIMPLE_ACCOUNT_UID).getTransactionCount()).isEqualTo(1);
+        assertThat(mSplitsDbAdapter.fetchSplitsForAccount(SIMPLE_ACCOUNT_UID).getCount()).isEqualTo(1);
         assertThat(mSplitsDbAdapter.getSplitsForTransaction(transaction.getUID())).hasSize(2);
 
     }
@@ -342,7 +377,8 @@ private void sleep(long millis) {
     @Test(expected = IllegalArgumentException.class)
     public void testDeleteSimpleAccount() {
         sleep(2000);
-        onView(withId(R.id.options_menu)).perform(click());
+        onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
+                withId(R.id.options_menu))).perform(click());
         onView(withText(R.string.menu_delete)).perform(click());
 
         //the account has no sub-accounts
@@ -353,7 +389,49 @@ public void testDeleteSimpleAccount() {
 //        onView(withId(R.id.btn_save)).perform(click());
 
         //should throw expected exception
-        mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
+        mAccountsDbAdapter.getID(SIMPLE_ACCOUNT_UID);
+    }
+
+    @Test
+    public void testDeleteAccountWithSubaccounts() {
+        sleep(2000);
+        onView(withText(ROOT_ACCOUNT_NAME)).perform(click());
+        onView(allOf(withParent(hasDescendant(withText(PARENT_ACCOUNT_NAME))),
+                     withId(R.id.options_menu))).perform(click());
+        onView(withText(R.string.menu_delete)).perform(click());
+
+        onView(allOf(withParent(withId(R.id.accounts_options)),
+                     withId(R.id.radio_delete))).perform(click());
+        onView(withText(R.string.alert_dialog_ok_delete)).perform(click());
+
+        assertTrue("Parent account has not been deleted.", !accountExists(PARENT_ACCOUNT_UID));
+        assertTrue("Child account has not been deleted after deleting its parent account.",
+                   !accountExists(CHILD_ACCOUNT_UID));
+    }
+
+    @Test
+    public void testDeleteAccountMovingSubaccounts() {
+        sleep(2000);
+        onView(withText(ROOT_ACCOUNT_NAME)).perform(click());
+        onView(allOf(withParent(hasDescendant(withText(PARENT_ACCOUNT_NAME))),
+                withId(R.id.options_menu))).perform(click());
+        onView(withText(R.string.menu_delete)).perform(click());
+
+        onView(allOf(withParent(withId(R.id.accounts_options)),
+                withId(R.id.radio_move))).perform(click());
+        onView(withText(R.string.alert_dialog_ok_delete)).perform(click());
+
+        assertTrue("Parent account has not been deleted.", !accountExists(PARENT_ACCOUNT_UID));
+        assertTrue("Child account should not have been deleted.", accountExists(CHILD_ACCOUNT_UID));
+    }
+
+    private boolean accountExists(String accountId) {
+        try {
+            mAccountsDbAdapter.getID(accountId);
+            return true;
+        } catch (IllegalArgumentException e) {
+            return false;
+        }
     }
 
     //TODO: Test import of account file

From 02f266231f03873586d88d7e541fc7a44232e7a4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 4 Jan 2016 13:01:38 +0100
Subject: [PATCH 2/3] Check if there're transactions or subaccounts before
 doing anything.

Fixes https://github.com/codinguser/gnucash-android/issues/460
---
 .../org/gnucash/android/ui/account/DeleteAccountDialogFragment.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
index 42df0e7d..8b8d48cb 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
@@ -214,14 +214,14 @@ public void onClick(View v) {
 
                 AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
 
-                if (mMoveTransactionsRadioButton.isChecked()){
+                if ((mTransactionCount > 0) && mMoveTransactionsRadioButton.isChecked()){
                     long targetAccountId = mTransactionsDestinationAccountSpinner.getSelectedItemId();
                     //move all the splits
                     SplitsDbAdapter.getInstance().updateRecords(DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID + " = ?",
                             new String[]{mOriginAccountUID}, DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID, accountsDbAdapter.getUID(targetAccountId));
                 }
 
-                if (mMoveAccountsRadioButton.isChecked()){
+                if ((mSubAccountCount > 0) && mMoveAccountsRadioButton.isChecked()){
                     long targetAccountId = mAccountsDestinationAccountSpinner.getSelectedItemId();
                     AccountsDbAdapter.getInstance().reassignDescendantAccounts(mOriginAccountUID, accountsDbAdapter.getUID(targetAccountId));
                 }

From 3d1ee928abd5c6e8a74b5c72b1d48323e3b0a065 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Tue, 5 Jan 2016 20:39:44 +0100
Subject: [PATCH 3/3] Apply code inspector suggestions.

---
 .../android/test/ui/AccountsActivityTest.java      |  6 +--
 .../ui/account/DeleteAccountDialogFragment.java    | 48 +++++++++++-----------
 2 files changed, 24 insertions(+), 30 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 1f89c039..237a569e 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -35,18 +35,14 @@
 import com.kobakei.ratethisapp.RateThisApp;
 
 import org.gnucash.android.R;
-import org.gnucash.android.db.BookDbHelper;
-import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.BooksDbAdapter;
-import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.Book;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
diff --git a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
index 8b8d48cb..8a0fbe9a 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
@@ -56,31 +56,29 @@
     /**
      * Spinner for selecting the account to move the transactions to
      */
-    Spinner mTransactionsDestinationAccountSpinner;
+    private Spinner mTransactionsDestinationAccountSpinner;
 
-    Spinner mAccountsDestinationAccountSpinner;
+    private Spinner mAccountsDestinationAccountSpinner;
 
     /**
      * Dialog positive button. Ok to moving the transactions
      */
-    Button mOkButton;
+    private Button mOkButton;
 
     /**
      * Cancel button
      */
-    Button mCancelButton;
+    private Button mCancelButton;
 
     /**
      * GUID of account from which to move the transactions
      */
-    String mOriginAccountUID = null;
+    private String mOriginAccountUID = null;
 
-    View mAccountOptionsView;
-    View mTransactionOptionsView;
-    RadioButton mMoveAccountsRadioButton;
-    RadioButton mMoveTransactionsRadioButton;
-    RadioButton mDeleteAccountsRadioButton;
-    RadioButton mDeleteTransactionsRadioButton;
+    private RadioButton mMoveAccountsRadioButton;
+    private RadioButton mMoveTransactionsRadioButton;
+    private RadioButton mDeleteAccountsRadioButton;
+    private RadioButton mDeleteTransactionsRadioButton;
 
     private int mTransactionCount;
     private int mSubAccountCount;
@@ -107,24 +105,24 @@ public void onCreate(@Nullable Bundle savedInstanceState) {
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.dialog_account_delete, container, false);
-        mTransactionOptionsView = view.findViewById(R.id.transactions_options);
-        ((TextView)mTransactionOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_transactions);
-        ((TextView)mTransactionOptionsView.findViewById(R.id.description)).setText(R.string.label_delete_account_transactions_description);
-        mDeleteTransactionsRadioButton = (RadioButton) mTransactionOptionsView.findViewById(R.id.radio_delete);
+        View transactionOptionsView = view.findViewById(R.id.transactions_options);
+        ((TextView) transactionOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_transactions);
+        ((TextView) transactionOptionsView.findViewById(R.id.description)).setText(R.string.label_delete_account_transactions_description);
+        mDeleteTransactionsRadioButton = (RadioButton) transactionOptionsView.findViewById(R.id.radio_delete);
         mDeleteTransactionsRadioButton.setText(R.string.label_delete_transactions);
-        mMoveTransactionsRadioButton = ((RadioButton)mTransactionOptionsView.findViewById(R.id.radio_move));
-        mTransactionsDestinationAccountSpinner = (Spinner) mTransactionOptionsView.findViewById(R.id.target_accounts_spinner);
+        mMoveTransactionsRadioButton = ((RadioButton) transactionOptionsView.findViewById(R.id.radio_move));
+        mTransactionsDestinationAccountSpinner = (Spinner) transactionOptionsView.findViewById(R.id.target_accounts_spinner);
 
-        mAccountOptionsView = view.findViewById(R.id.accounts_options);
-        ((TextView)mAccountOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_subaccounts);
-        ((TextView)mAccountOptionsView.findViewById(R.id.description)).setText(R.string.label_delete_account_subaccounts_description);
-        mDeleteAccountsRadioButton = (RadioButton) mAccountOptionsView.findViewById(R.id.radio_delete);
+        View accountOptionsView = view.findViewById(R.id.accounts_options);
+        ((TextView) accountOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_subaccounts);
+        ((TextView) accountOptionsView.findViewById(R.id.description)).setText(R.string.label_delete_account_subaccounts_description);
+        mDeleteAccountsRadioButton = (RadioButton) accountOptionsView.findViewById(R.id.radio_delete);
         mDeleteAccountsRadioButton.setText(R.string.label_delete_sub_accounts);
-        mMoveAccountsRadioButton = (RadioButton)mAccountOptionsView.findViewById(R.id.radio_move);
-        mAccountsDestinationAccountSpinner = (Spinner) mAccountOptionsView.findViewById(R.id.target_accounts_spinner);
+        mMoveAccountsRadioButton = (RadioButton) accountOptionsView.findViewById(R.id.radio_move);
+        mAccountsDestinationAccountSpinner = (Spinner) accountOptionsView.findViewById(R.id.target_accounts_spinner);
 
-        mTransactionOptionsView.setVisibility(mTransactionCount > 0 ? View.VISIBLE : View.GONE);
-        mAccountOptionsView.setVisibility(mSubAccountCount > 0 ? View.VISIBLE : View.GONE);
+        transactionOptionsView.setVisibility(mTransactionCount > 0 ? View.VISIBLE : View.GONE);
+        accountOptionsView.setVisibility(mSubAccountCount > 0 ? View.VISIBLE : View.GONE);
 
         mCancelButton = (Button) view.findViewById(R.id.btn_cancel);
         mOkButton = (Button) view.findViewById(R.id.btn_save);
