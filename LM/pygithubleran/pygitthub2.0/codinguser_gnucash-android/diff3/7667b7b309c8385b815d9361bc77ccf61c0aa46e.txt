From 7667b7b309c8385b815d9361bc77ccf61c0aa46e Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 11 May 2015 11:40:40 +0200
Subject: [PATCH] Added test for #329

Fixed: missing strings generated by gradle causing Travis builds to fail
Code refactoring
---
 .travis.yml                                        |  6 +-
 app/build.gradle                                   |  7 ++-
 .../android/test/ui/AccountsActivityTest.java      | 14 +----
 .../android/test/ui/TransactionsActivityTest.java  | 31 ++++++++++-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  6 +-
 .../ui/transaction/TransactionFormFragment.java    | 17 +++---
 .../ui/transaction/TransactionsActivity.java       |  3 +-
 .../test/unit/db/AccountsDbAdapterTest.java        |  2 +
 .../gnucash/android/test/unit/model/MoneyTest.java | 64 +++++++++-------------
 9 files changed, 74 insertions(+), 76 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index e53614ab..688a9cdd 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,4 +1,3 @@
-sudo: true
 language: android
 jdk: oraclejdk7
 android:
@@ -23,10 +22,7 @@ android:
 
 before_install:
   #- echo yes | android update sdk --all --filter build-tools-22.0.1 --no-ui --force > /dev/null
-  # required libs for android build tools
-  - if [ `uname -m` = x86_64 ]; then sudo apt-get update; fi
-  - if [ `uname -m` = x86_64 ]; then sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch; fi
-      
+
 # Emulator Management: Create, Start and Wait
 before_script:
   - echo no | android create avd --force -n test -t android-19 --abi armeabi-v7a
diff --git a/app/build.gradle b/app/build.gradle
index da667e08..b0fbcd9d 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -34,6 +34,10 @@ android {
             resValue "string", "dropbox_app_key", RELEASE_DROPBOX_APP_KEY
             resValue "string", "dropbox_app_secret", RELEASE_DROPBOX_APP_SECRET
             resValue "string", "manifest_dropbox_app_key", "db-${RELEASE_DROPBOX_APP_KEY}"
+        } else {
+            resValue "string", "dropbox_app_key", "dhjh8ke9wf05948"
+            resValue "string", "dropbox_app_secret", "h2t9fphj3nr4wkw"
+            resValue "string", "manifest_dropbox_app_key", "db-dhjh8ke9wf05948"
         }
     }
 
@@ -81,9 +85,6 @@ android {
             applicationId 'org.gnucash.android.devel'
             testApplicationId 'org.gnucash.android.test.devel'
             resValue "string", "app_name", "GnuCash-devel"
-            resValue "string", "dropbox_app_key", "dhjh8ke9wf05948"
-            resValue "string", "dropbox_app_secret", "h2t9fphj3nr4wkw"
-            resValue "string", "manifest_dropbox_app_key", "db-dhjh8ke9wf05948"
             versionName "${versionMajor}.${versionMinor}.${versionPatch}-dev${versionBuild}_${buildTime()}"
             resValue "string", "app_version_name", "${versionName}"
         }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index ad59cc16..3f9492cc 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -66,6 +66,7 @@ protected void setUp() throws Exception {
 		Context context = getInstrumentation().getTargetContext();
 		Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
 		editor.putBoolean(context.getString(R.string.key_first_run), false);
+        editor.putInt(AccountsActivity.LAST_OPEN_TAB_INDEX, AccountsActivity.INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT);
 		editor.commit();
 
         mDbHelper = new DatabaseHelper(context);
@@ -86,14 +87,6 @@ protected void setUp() throws Exception {
 		account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
 		mAccountsDbAdapter.addAccount(account);
 
-        getInstrumentation().runOnMainSync(new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setTab(AccountsActivity.INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT);
-            }
-        });
-
-
         //the What's new dialog is usually displayed on first run
         String dismissDialog = getActivity().getString(R.string.label_dismiss);
         if (mSolo.waitForText(dismissDialog,1,1000)){
@@ -158,7 +151,6 @@ public void testCreateAccount(){
 
         EditText inputAccountName = (EditText) mSolo.getCurrentActivity().findViewById(R.id.edit_text_account_name);
         String NEW_ACCOUNT_NAME = "A New Account";
-//        mSolo.enterText(0, NEW_ACCOUNT_NAME);
         mSolo.enterText(inputAccountName, NEW_ACCOUNT_NAME);
         mSolo.clickOnActionBarItem(R.id.menu_save);
 
@@ -183,14 +175,12 @@ public void testChangeParentAccount(){
 
         mSolo.clickLongOnText(accountName);
         mSolo.clickOnView(getActivity().findViewById(R.id.context_menu_edit_accounts));
-//        clickSherlockActionBarItem(R.id.context_menu_edit_accounts);
         mSolo.waitForView(EditText.class);
 
         mSolo.clickOnCheckBox(1);
         mSolo.pressSpinnerItem(2, 0);
-//        mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
 
-        clickSherlockActionBarItem(R.id.menu_save);
+        mSolo.clickOnView(getActivity().findViewById(R.id.menu_save));
 
         mSolo.waitForText(getActivity().getString(R.string.title_accounts));
         Account editedAccount = mAccountsDbAdapter.getAccount(accountUID);
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 761b4d9a..8910c478 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -16,6 +16,7 @@
 
 package org.gnucash.android.test.ui;
 
+import android.content.ContentValues;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
@@ -34,6 +35,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.*;
@@ -103,8 +105,8 @@ protected void setUp() throws Exception {
 
         long id1 = mAccountsDbAdapter.addAccount(account);
         long id2 = mAccountsDbAdapter.addAccount(account2);
-        assertTrue(id1 > 0);
-        assertTrue(id2 > 0);
+        assertThat(id1).isGreaterThan(0);
+        assertThat(id2).isGreaterThan(0);
 
         mTransaction = new Transaction(TRANSACTION_NAME);
         mTransaction.setNote("What up?");
@@ -209,7 +211,7 @@ private void validateEditTransactionFields(Transaction transaction){
 
     //TODO: Add test for only one account but with double-entry enabled
 
-	public void atestAddTransaction(){
+	public void testAddTransaction(){
         setDoubleEntryEnabled(true);
         mSolo.waitForText(TRANSACTION_NAME);
 
@@ -311,6 +313,29 @@ public void testDefaultTransactionType(){
         mSolo.goBack();
 	}
 
+	public void testChildAccountsShouldUseParentTransferAccountSetting(){
+		Account transferAccount = new Account("New Transfer Acct");
+		mAccountsDbAdapter.addAccount(transferAccount);
+
+		Account childAccount = new Account("Child Account");
+		childAccount.setParentUID(DUMMY_ACCOUNT_UID);
+		mAccountsDbAdapter.addAccount(childAccount);
+		ContentValues contentValues = new ContentValues();
+		contentValues.put(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, transferAccount.getUID());
+		mAccountsDbAdapter.updateRecord(DUMMY_ACCOUNT_UID, contentValues);
+
+
+		Intent intent = new Intent(mSolo.getCurrentActivity(), TransactionsActivity.class);
+		intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, childAccount.getUID());
+		getActivity().startActivity(intent);
+		mSolo.sleep(1000);
+		Spinner spinner = (Spinner) mSolo.getView(R.id.input_double_entry_accounts_spinner);
+
+		long transferAccountID = mAccountsDbAdapter.getID(transferAccount.getUID());
+		assertThat(transferAccountID).isEqualTo(spinner.getSelectedItemId());
+	}
+
 	public void testToggleTransactionType(){
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		
diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index c33f9e5f..4b643039 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -533,8 +533,8 @@ public String getName(long accountID) {
      * @return List of {@link Account}s in the database
      */
     public List<Account> getSimpleAccountList(){
-        LinkedList<Account> accounts = new LinkedList<Account>();
-        Cursor c = fetchAccounts(null, null, null);
+        LinkedList<Account> accounts = new LinkedList<>();
+        Cursor c = fetchAccounts(null, null, AccountEntry.COLUMN_FULL_NAME + " ASC");
 
         try {
             while (c.moveToNext()) {
@@ -553,7 +553,7 @@ public String getName(long accountID) {
      * @return List of {@link Account}s in the database
      */
     public List<Account> getSimpleAccountList(String where, String[] whereArgs, String orderBy){
-        LinkedList<Account> accounts = new LinkedList<Account>();
+        LinkedList<Account> accounts = new LinkedList<>();
         Cursor c = fetchAccounts(where, whereArgs, orderBy);
         try {
             while (c.moveToNext()) {
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 3ffc4517..a387ae65 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -90,6 +90,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.Locale;
+import java.util.Objects;
 
 /**
  * Fragment for creating or editing transactions
@@ -487,19 +488,15 @@ private void initalizeViews() {
         if (mUseDoubleEntry){
             String currentAccountUID = mAccountUID;
             long defaultTransferAccountID = 0;
-
+            String rootAccountUID = mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID();
             do {
-                long transAccID = mAccountsDbAdapter.getDefaultTransferAccountID(mAccountsDbAdapter.getID(currentAccountUID));
-                if (transAccID > 0) {
-                    defaultTransferAccountID = transAccID;
+                defaultTransferAccountID = mAccountsDbAdapter.getDefaultTransferAccountID(mAccountsDbAdapter.getID(currentAccountUID));
+                if (defaultTransferAccountID > 0) {
+                    setSelectedTransferAccount(defaultTransferAccountID);
+                    break; //we found a parent with default transfer setting
                 }
                 currentAccountUID = mAccountsDbAdapter.getParentAccountUID(currentAccountUID);
-            }
-            while (currentAccountUID != null && defaultTransferAccountID == 0);
-
-            if (defaultTransferAccountID > 0){
-                setSelectedTransferAccount(defaultTransferAccountID);
-            }
+            } while (!currentAccountUID.equals(rootAccountUID));
         }
 	}
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 16e7d945..03a8a730 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -273,7 +273,8 @@ protected void onCreate(Bundle savedInstanceState) {
 
         setupActionBarNavigation();
 
-		if (getIntent().getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {
+        final String action = getIntent().getAction();
+		if (action.equals(Intent.ACTION_INSERT_OR_EDIT) || action.equals(Intent.ACTION_INSERT)) {
             mPager.setVisibility(View.GONE);
             mTitlePageIndicator.setVisibility(View.GONE);
 
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index df41772b..d467e6b3 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -116,6 +116,8 @@ public void shouldCreateDefaultRootAccount(){
         List<Account> accounts = mAccountsDbAdapter.getSimpleAccountList();
         assertThat(accounts).extracting("mAccountType").contains(AccountType.ROOT);
 
+        String rootAccountUID = mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID();
+        assertThat(rootAccountUID).isEqualTo(accounts.get(1).getParentUID());
     }
 
     @Test
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
index 3de2b12a..2e0fbaac 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
@@ -30,14 +30,14 @@
 public class MoneyTest{
 
 	private static final String CURRENCY_CODE = "EUR";
-	private Money 	money;
+	private Money mMoneyInEur;
 	private int 	mHashcode;
 	private String amountString = "15.75";
 
 	@Before
 	public void setUp() throws Exception {
-		money = new Money(new BigDecimal(amountString), Currency.getInstance(CURRENCY_CODE));
-		mHashcode = money.hashCode();
+		mMoneyInEur = new Money(new BigDecimal(amountString), Currency.getInstance(CURRENCY_CODE));
+		mHashcode = mMoneyInEur.hashCode();
 	}
 
 	@Test
@@ -64,91 +64,77 @@ public void testCreation(){
 
 	@Test
 	public void testAddition(){
-		Money result = money.add(new Money("5", CURRENCY_CODE));
+		Money result = mMoneyInEur.add(new Money("5", CURRENCY_CODE));
 		assertEquals("20.75", result.toPlainString());
-		assertNotSame(result, money);
+		assertNotSame(result, mMoneyInEur);
 		validateImmutability();				
 	}
 
-	@Test
+	@Test(expected = IllegalArgumentException.class)
 	public void testAdditionWithIncompatibleCurrency(){
 		Money addend = new Money("4", "USD");
-		Exception expectedException = null;
-		try{
-			money.add(addend);
-		} catch (Exception e) {
-			expectedException = e;
-		}
-		assertNotNull(expectedException);
-		assertTrue(expectedException instanceof IllegalArgumentException);		
+		mMoneyInEur.add(addend);
 	}
 
 	@Test
 	public void testSubtraction(){
-		Money result = money.subtract(new Money("2", CURRENCY_CODE));
+		Money result = mMoneyInEur.subtract(new Money("2", CURRENCY_CODE));
 		assertEquals(new BigDecimal("13.75"), result.asBigDecimal());
-		assertNotSame(result, money);
+		assertNotSame(result, mMoneyInEur);
 		validateImmutability();		
 	}
 
-	@Test
+	@Test(expected = IllegalArgumentException.class)
 	public void testSubtractionWithDifferentCurrency(){
 		Money addend = new Money("4", "USD");
-		Exception expectedException = null;
-		try{
-			money.subtract(addend);
-		} catch (Exception e) {
-			expectedException = e;
-		}
-		assertNotNull(expectedException);
-		assertTrue(expectedException instanceof IllegalArgumentException);		
+		mMoneyInEur.subtract(addend);
 	}
 
 	@Test
 	public void testMultiplication(){
-		Money result = money.multiply(new Money(BigDecimal.TEN, Currency.getInstance(CURRENCY_CODE)));
+		Money result = mMoneyInEur.multiply(new Money(BigDecimal.TEN, Currency.getInstance(CURRENCY_CODE)));
 		assertThat("157.50").isEqualTo(result.toPlainString());
-		assertThat(result).isNotEqualTo(money);
+		assertThat(result).isNotEqualTo(mMoneyInEur);
 		validateImmutability();
 	}
 
 	@Test(expected = IllegalArgumentException.class)
 	public void testMultiplicationWithDifferentCurrencies(){
 		Money addend = new Money("4", "USD");
-		money.multiply(addend);
+		mMoneyInEur.multiply(addend);
 	}
 
 	@Test
 	public void testDivision(){
-		Money result = money.divide(2);
+		Money result = mMoneyInEur.divide(2);
 		assertThat(result.toPlainString()).isEqualTo("7.88");
-		assertThat(result).isNotEqualTo(money);
+		assertThat(result).isNotEqualTo(mMoneyInEur);
 		validateImmutability();
 	}
 
 	@Test(expected = IllegalArgumentException.class)
 	public void testDivisionWithDifferentCurrency(){
 		Money addend = new Money("4", "USD");
-		money.divide(addend);
+		mMoneyInEur.divide(addend);
 	}
 
 	@Test
 	public void testNegation(){
-		Money result = money.negate();
+		Money result = mMoneyInEur.negate();
 		assertThat(result.toPlainString()).startsWith("-");
 		validateImmutability();
 	}
 
 	@Test
 	public void testPrinting(){
-		assertEquals(money.asString(), money.toPlainString());
-		assertEquals(amountString, money.asString());
+		assertEquals(mMoneyInEur.asString(), mMoneyInEur.toPlainString());
+		assertEquals(amountString, mMoneyInEur.asString());
 		
 		// the unicode for Euro symbol is \u20AC
 		String symbol = Currency.getInstance("EUR").getSymbol(Locale.GERMAN);
 		String symbolUS = Currency.getInstance("EUR").getSymbol(Locale.US);
-		assertEquals("15,75 " + symbol, money.formattedString(Locale.GERMAN));		
-		assertEquals("15.75 " + symbolUS, money.formattedString(Locale.US));
+		assertEquals("15,75 " + symbol, mMoneyInEur.formattedString(Locale.GERMAN));
+		assertEquals("15.75 " + symbolUS, mMoneyInEur.formattedString(Locale.US));
 		
 		//always prints with 2 decimal places only
 		Money some = new Money("9.7469");
@@ -156,9 +142,9 @@ public void testPrinting(){
 	}
 
 	public void validateImmutability(){
-		assertEquals(mHashcode, money.hashCode());
-		assertEquals(amountString, money.toPlainString());
-		assertEquals(CURRENCY_CODE, money.getCurrency().getCurrencyCode());
+		assertEquals(mHashcode, mMoneyInEur.hashCode());
+		assertEquals(amountString, mMoneyInEur.toPlainString());
+		assertEquals(CURRENCY_CODE, mMoneyInEur.getCurrency().getCurrencyCode());
 	}
 	
 }
