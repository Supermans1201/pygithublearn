From 36cb90a00ed0bb18c1bc6b6c21b5cfb53c4eed2d Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Sat, 7 Feb 2015 17:09:08 +0200
Subject: [PATCH] Refactored AccountsDbAdapter and SplitsDbAdapter classes

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 34 +++++-------
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 64 ++++++++--------------
 2 files changed, 37 insertions(+), 61 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index bba36ad3..cd251386 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -821,31 +821,21 @@ public Money getAccountBalance(long accountId){
      * @return Account Balance of an account including sub-accounts
      */
     public Money getAccountBalance(String accountUID){
-        Log.d(TAG, "Computing account balance for account ID " + accountUID);
-        String currencyCode = mTransactionsAdapter.getCurrencyCode(accountUID);
-        boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
-        currencyCode = currencyCode == null ? Money.DEFAULT_CURRENCY_CODE : currencyCode;
-        Money balance = Money.createZeroInstance(currencyCode);
-
-        List<String> accountsList = getDescendantAccountUIDs(accountUID,
-                AccountEntry.COLUMN_CURRENCY + " = ? ",
-                new String[]{currencyCode});
-
-        accountsList.add(0, accountUID);
-
-        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
-        Log.d(TAG, "all account list : " + accountsList.size());
-        Money splitSum = splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance);
-        splitsDbAdapter.close();
-        return balance.add(splitSum);
+        return computeBalance(accountUID, -1, -1);
     }
 
     /**
-     * Returns the balance of an account within the specified range while taking sub-accounts into consideration
+     * Returns the balance of an account within the specified time range while taking sub-accounts into consideration
+     * @param accountUID the account's UUID
+     * @param startTimestamp the start timestamp of the time range
+     * @param endTimestamp the end timestamp of the time range
      * @return the balance of an account within the specified range including sub-accounts
      */
-    public Money getAccountBalance(String accountUID, long start, long end) {
-        //ToDo refactor to avoid code duplication
+    public Money getAccountBalance(String accountUID, long startTimestamp, long endTimestamp) {
+        return computeBalance(accountUID, startTimestamp, endTimestamp);
+    }
+
+    private Money computeBalance(String accountUID, long startTimestamp, long endTimestamp) {
         Log.d(TAG, "Computing account balance for account ID " + accountUID);
         String currencyCode = mTransactionsAdapter.getCurrencyCode(accountUID);
         boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
@@ -860,7 +850,9 @@ public Money getAccountBalance(String accountUID, long start, long end) {
 
         SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
         Log.d(TAG, "all account list : " + accountsList.size());
-        Money splitSum = splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance, start, end);
+        Money splitSum = (startTimestamp == -1 && endTimestamp == -1)
+                ? splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance)
+                : splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
         splitsDbAdapter.close();
         return balance.add(splitSum);
     }
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index 1dd629e8..ef314400 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -233,62 +233,46 @@ public Money computeSplitBalance(String accountUID){
      * @return Balance of the splits for this account
      */
     public Money computeSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance){
-        //Cursor cursor = fetchSplitsForAccount(accountUID);
-        if (accountUIDList == null || accountUIDList.size() == 0){
-            return new Money("0", currencyCode);
-        }
-
-        Cursor cursor;
-        cursor = mDb.query(SplitEntry.TABLE_NAME + " , " + TransactionEntry.TABLE_NAME,
-                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+
-                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " END )"},
-                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
-                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0",
-                null, null, null, null);
-
-        if (cursor != null){
-            if (cursor.moveToFirst()) {
-                double amount = cursor.getDouble(0);
-                cursor.close();
-                Log.d(TAG, "amount return " + amount);
-                if (!hasDebitNormalBalance) {
-                    amount = -amount;
-                }
-                return new Money(BigDecimal.valueOf(amount).setScale(2, BigDecimal.ROUND_HALF_UP), Currency.getInstance(currencyCode));
-            }
-            cursor.close();
-        }
-        return new Money("0", currencyCode);
+        return calculateSplitBalance(accountUIDList, currencyCode, hasDebitNormalBalance, -1, -1);
     }
 
     /**
-     * Returns the sum of the splits for given set of accounts within the specified range.
+     * Returns the sum of the splits for given set of accounts within the specified time range.
      * This takes into account the kind of movement caused by the split in the account (which also depends on account type)
      * The Caller must make sure all accounts have the currency, which is passed in as currencyCode
      * @param accountUIDList List of String unique IDs of given set of accounts
      * @param currencyCode currencyCode for all the accounts in the list
      * @param hasDebitNormalBalance Does the final balance has normal debit credit meaning
-     * @param start the start timestamp of the range
-     * @param end the end timestamp of the range
-     * @return Balance of the splits for this account within the specified range
+     * @param startTimestamp the start timestamp of the time range
+     * @param endTimestamp the end timestamp of the time range
+     * @return Balance of the splits for this account within the specified time range
      */
-    public Money computeSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance, long start, long end){
-        //ToDo refactor to avoid code duplication
-        //Cursor cursor = fetchSplitsForAccount(accountUID);
+    public Money computeSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance,
+                                     long startTimestamp, long endTimestamp){
+        return calculateSplitBalance(accountUIDList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
+    }
+
+    private Money calculateSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance,
+                          long startTimestamp, long endTimestamp){
         if (accountUIDList == null || accountUIDList.size() == 0){
             return new Money("0", currencyCode);
         }
 
         Cursor cursor;
+        String[] selectionArgs = null;
+        String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
+                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+
+        if (startTimestamp != -1 && endTimestamp != -1) {
+            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ?";
+            selectionArgs = new String[]{String.valueOf(startTimestamp), String.valueOf(endTimestamp)};
+        }
+
         cursor = mDb.query(SplitEntry.TABLE_NAME + " , " + TransactionEntry.TABLE_NAME,
-                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+
+                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN " +
                         SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " END )"},
-                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
-                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0 AND " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ?",
-                new String[]{String.valueOf(start), String.valueOf(end)}, null, null, null);
+                selection, selectionArgs, null, null, null);
 
         if (cursor != null){
             if (cursor.moveToFirst()) {
