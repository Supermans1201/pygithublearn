From 9332dd621e16fae516a983cc72307924fd05371d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 15:27:34 +0100
Subject: [PATCH] Fixed bug in parsing scheduled actions from xml

Code refactoring: make use of switch(string) and diamond operator from Java 1.7
---
 ...ExporterAsyncTask.java => ExportAsyncTask.java} |   4 +-
 .../android/export/ExportDialogFragment.java       |   2 +-
 .../org/gnucash/android/export/ExportParams.java   |   2 +-
 .../gnucash/android/importer/GncXmlHandler.java    | 137 ++++++++++++---------
 .../gnucash/android/service/SchedulerService.java  |   4 +-
 5 files changed, 82 insertions(+), 67 deletions(-)
 rename app/src/main/java/org/gnucash/android/export/{ExporterAsyncTask.java => ExportAsyncTask.java} (98%)

diff --git a/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
similarity index 98%
rename from app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
rename to app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 6e4ddc7b..2b268da0 100644
--- a/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -59,7 +59,7 @@
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class ExporterAsyncTask extends AsyncTask<ExportParams, Void, Boolean> {
+public class ExportAsyncTask extends AsyncTask<ExportParams, Void, Boolean> {
     /**
      * App context
      */
@@ -77,7 +77,7 @@
      */
     private ExportParams mExportParams;
 
-    public ExporterAsyncTask(Context context){
+    public ExportAsyncTask(Context context){
         this.mContext = context;
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java b/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
index 422005e7..60acebad 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
@@ -107,7 +107,7 @@ public void onClick(View v) {
             dismiss();
 
             Log.i(TAG, "Commencing async export of transactions");
-            new ExporterAsyncTask(getActivity()).execute(exportParameters);
+            new ExportAsyncTask(getActivity()).execute(exportParameters);
 		}
 		
 	}
diff --git a/app/src/main/java/org/gnucash/android/export/ExportParams.java b/app/src/main/java/org/gnucash/android/export/ExportParams.java
index 2aeef6ee..3aed8df6 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportParams.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportParams.java
@@ -21,7 +21,7 @@
  * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
  * actually performs the export.
  * @see org.gnucash.android.export.ExportDialogFragment
- * @see ExporterAsyncTask
+ * @see ExportAsyncTask
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 518a8e9f..84039a9b 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -141,7 +141,8 @@
     int mRecurrenceMultiplier   = 1;
 
     /**
-     * Used for parsing old backup files where recurrence was saved inside the transaction
+     * Used for parsing old backup files where recurrence was saved inside the transaction.
+     * Newer backup files will not require this
      * @deprecated Use the new scheduled action elements instead
      */
     @Deprecated
@@ -187,37 +188,39 @@ private void init(SQLiteDatabase db) {
     @Override
     public void startElement(String uri, String localName,
                              String qualifiedName, Attributes attributes) throws SAXException {
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)) {
-            mAccount = new Account(""); // dummy name, will be replaced when we find name tag
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
-            mTransaction = new Transaction(""); // dummy name will be replaced
-            mTransaction.setExported(true);     // default to exported when import transactions
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_SPLIT)){
-            mSplit = new Split(Money.getZeroInstance(),"");
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_POSTED)){
-            mIsDatePosted = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_ENTERED)){
-            mIsDateEntered = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS)) {
-            mInTemplates = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SCHEDULED_ACTION)){
-            //default to transaction type, will be changed during parsing
-            mScheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_START)){
-            mIsScheduledStart = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_END)){
-            mIsScheduledEnd = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_LAST)){
-            mIsLastRun = true;
+        switch (qualifiedName.toLowerCase()){
+            case GncXmlHelper.TAG_ACCOUNT:
+                mAccount = new Account(""); // dummy name, will be replaced when we find name tag
+                break;
+            case GncXmlHelper.TAG_TRANSACTION:
+                mTransaction = new Transaction(""); // dummy name will be replaced
+                mTransaction.setExported(true);     // default to exported when import transactions
+                break;
+            case GncXmlHelper.TAG_TRN_SPLIT:
+                mSplit = new Split(Money.getZeroInstance(),"");
+                break;
+            case GncXmlHelper.TAG_DATE_POSTED:
+                mIsDatePosted = true;
+                break;
+            case GncXmlHelper.TAG_DATE_ENTERED:
+                mIsDateEntered = true;
+                break;
+            case GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS:
+                mInTemplates = true;
+                break;
+            case GncXmlHelper.TAG_SCHEDULED_ACTION:
+                //default to transaction type, will be changed during parsing
+                mScheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
+                break;
+            case GncXmlHelper.TAG_SX_START:
+                mIsScheduledStart = true;
+                break;
+            case GncXmlHelper.TAG_SX_END:
+                mIsScheduledEnd = true;
+                break;
+            case GncXmlHelper.TAG_SX_LAST:
+                mIsLastRun = true;
+                break;
         }
     }
 
@@ -272,29 +275,34 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
-            if (characterString.equals(GncXmlHelper.KEY_PLACEHOLDER)){
-                mInPlaceHolderSlot = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_COLOR)){
-                mInColorSlot = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_FAVORITE)){
-                mInFavoriteSlot = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_NOTES)){
-                mIsNote = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
-                mInDefaultTransferAccount = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_EXPORTED)){
-                mInExported = true;
-            } else if (characterString.equals(GncXmlHelper.KEY_SPLIT_ACCOUNT)){
-                mInSplitAccountSlot = true;
-            } else if (characterString.equals(GncXmlHelper.KEY_CREDIT_FORMULA)){
-                mInCreditFormulaSlot = true;
-            } else if (characterString.equals(GncXmlHelper.KEY_DEBIT_FORMULA)){
-                mInDebitFormulaSlot = true;
+            switch (characterString) {
+                case GncXmlHelper.KEY_PLACEHOLDER:
+                    mInPlaceHolderSlot = true;
+                    break;
+                case GncXmlHelper.KEY_COLOR:
+                    mInColorSlot = true;
+                    break;
+                case GncXmlHelper.KEY_FAVORITE:
+                    mInFavoriteSlot = true;
+                    break;
+                case GncXmlHelper.KEY_NOTES:
+                    mIsNote = true;
+                    break;
+                case GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT:
+                    mInDefaultTransferAccount = true;
+                    break;
+                case GncXmlHelper.KEY_EXPORTED:
+                    mInExported = true;
+                    break;
+                case GncXmlHelper.KEY_SPLIT_ACCOUNT:
+                    mInSplitAccountSlot = true;
+                    break;
+                case GncXmlHelper.KEY_CREDIT_FORMULA:
+                    mInCreditFormulaSlot = true;
+                    break;
+                case GncXmlHelper.KEY_DEBIT_FORMULA:
+                    mInDebitFormulaSlot = true;
+                    break;
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
@@ -355,6 +363,8 @@ else if (mInTemplates && mInCreditFormulaSlot){
                 } catch (ParseException e) {
                     Log.e(LOG_TAG, "Error parsing template split amount. " + e.getMessage());
                     e.printStackTrace();
+                } finally {
+                    mInCreditFormulaSlot = false;
                 }
             }
             else if (mInTemplates && mInDebitFormulaSlot){
@@ -367,6 +377,8 @@ else if (mInTemplates && mInDebitFormulaSlot){
                 } catch (ParseException e) {
                     Log.e(LOG_TAG, "Error parsing template split amount. " + e.getMessage());
                     e.printStackTrace();
+                } finally {
+                    mInDebitFormulaSlot = false;
                 }
             }
         }
@@ -390,16 +402,19 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
                     mTransaction.setCreatedTimestamp(timestamp);
                     mIsDateEntered = false;
                 }
-                if (mIsScheduledStart){
+                if (mIsScheduledStart && mScheduledAction != null){
                     mScheduledAction.setStartTime(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                    mIsScheduledStart = false;
                 }
 
-                if (mIsScheduledEnd){
+                if (mIsScheduledEnd && mScheduledAction != null){
                     mScheduledAction.setEndTime(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                    mIsScheduledEnd = false;
                 }
 
-                if (mIsLastRun){
+                if (mIsLastRun && mScheduledAction != null){
                     mScheduledAction.setLastRun(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                    mIsLastRun = false;
                 }
             } catch (ParseException e) {
                 e.printStackTrace();
@@ -482,13 +497,13 @@ public void characters(char[] chars, int start, int length) throws SAXException
     @Override
     public void endDocument() throws SAXException {
         super.endDocument();
-        HashMap<String, Account> map = new HashMap<String, Account>(mAccountList.size());
-        HashMap<String, String> mapFullName = new HashMap<String, String>(mAccountList.size());
+        HashMap<String, Account> map = new HashMap<>(mAccountList.size());
+        HashMap<String, String> mapFullName = new HashMap<>(mAccountList.size());
         for(Account account:mAccountList) {
             map.put(account.getUID(), account);
             mapFullName.put(account.getUID(), null);
         }
-        java.util.Stack<Account> stack = new Stack<Account>();
+        java.util.Stack<Account> stack = new Stack<>();
         for (Account account:mAccountList){
             if (mapFullName.get(account.getUID()) != null) {
                 continue;
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 06ac655f..aa00989c 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -26,8 +26,8 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ExportAsyncTask;
 import org.gnucash.android.export.ExportParams;
-import org.gnucash.android.export.ExporterAsyncTask;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
 
@@ -100,7 +100,7 @@ private void executeScheduledEvent(ScheduledAction scheduledAction){
             case EXPORT:
                 ExportParams params = ExportParams.parseCsv(scheduledAction.getTag());
                 try {
-                    new ExporterAsyncTask(GnuCashApplication.getAppContext()).execute(params).get();
+                    new ExportAsyncTask(GnuCashApplication.getAppContext()).execute(params).get();
                 } catch (InterruptedException e) {
                     //TODO: Create special log for scheduler service
                     Log.e(LOG_TAG, e.getMessage());
