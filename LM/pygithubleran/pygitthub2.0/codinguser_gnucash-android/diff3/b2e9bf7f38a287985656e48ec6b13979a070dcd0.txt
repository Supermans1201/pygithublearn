From b2e9bf7f38a287985656e48ec6b13979a070dcd0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 7 Oct 2016 20:09:04 +0200
Subject: [PATCH] Reorder and simplify statements to avoid confusion.

---
 .../gnucash/android/service/ScheduledActionService.java   | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/service/ScheduledActionService.java b/app/src/main/java/org/gnucash/android/service/ScheduledActionService.java
index a8ee68b0..58770873 100644
--- a/app/src/main/java/org/gnucash/android/service/ScheduledActionService.java
+++ b/app/src/main/java/org/gnucash/android/service/ScheduledActionService.java
@@ -143,15 +143,16 @@ private static void executeScheduledEvent(ScheduledAction scheduledAction, SQLit
         // one period has been skipped, all intermediate transactions can be created
 
         scheduledAction.setLastRun(System.currentTimeMillis());
+        //set the execution count in the object because it will be checked for the next iteration in the calling loop
+        scheduledAction.setExecutionCount(executionCount); //this call is important, do not remove!!
         //update the last run time and execution count
         ContentValues contentValues = new ContentValues();
-        contentValues.put(DatabaseSchema.ScheduledActionEntry.COLUMN_LAST_RUN, scheduledAction.getLastRunTime());
-        contentValues.put(DatabaseSchema.ScheduledActionEntry.COLUMN_EXECUTION_COUNT, executionCount);
+        contentValues.put(DatabaseSchema.ScheduledActionEntry.COLUMN_LAST_RUN,
+                          scheduledAction.getLastRunTime());
+        contentValues.put(DatabaseSchema.ScheduledActionEntry.COLUMN_EXECUTION_COUNT,
+                          scheduledAction.getExecutionCount());
         db.update(DatabaseSchema.ScheduledActionEntry.TABLE_NAME, contentValues,
                 DatabaseSchema.ScheduledActionEntry.COLUMN_UID + "=?", new String[]{scheduledAction.getUID()});
-
-        //set the execution count in the object because it will be checked for the next iteration in the calling loop
-        scheduledAction.setExecutionCount(executionCount); //this call is important, do not remove!!
     }
 
     /**
@@ -162,7 +163,6 @@ private static void executeScheduledEvent(ScheduledAction scheduledAction, SQLit
      * @return Number of times backup is executed. This should either be 1 or 0
      */
     private static int executeBackup(ScheduledAction scheduledAction, SQLiteDatabase db) {
-        int executionCount = 0;
         if (!shouldExecuteScheduledBackup(scheduledAction))
             return 0;
 
@@ -170,12 +170,11 @@ private static int executeBackup(ScheduledAction scheduledAction, SQLiteDatabase
         try {
             //wait for async task to finish before we proceed (we are holding a wake lock)
             new ExportAsyncTask(GnuCashApplication.getAppContext(), db).execute(params).get();
-            scheduledAction.setExecutionCount(++executionCount);
         } catch (InterruptedException | ExecutionException e) {
             Crashlytics.logException(e);
             Log.e(LOG_TAG, e.getMessage());
         }
-        return executionCount;
+        return 1;
     }
 
     private static boolean shouldExecuteScheduledBackup(ScheduledAction scheduledAction) {
