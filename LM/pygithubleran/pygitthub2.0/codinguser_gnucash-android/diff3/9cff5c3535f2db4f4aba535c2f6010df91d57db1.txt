From 4f29bcb44585b379f253774bf5a6340ecfb77381 Mon Sep 17 00:00:00 2001
From: Felipe Morato <me@fmorato.com>
Date: Mon, 29 Feb 2016 00:58:12 -0300
Subject: [PATCH 1/3] ownCloud Tests - Open Dialog

---
 .../android/test/ui/OwnCloudExportTest.java        | 109 +++++++++++++++++++++
 1 file changed, 109 insertions(+)
 create mode 100644 app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
new file mode 100644
index 00000000..83bfae54
--- /dev/null
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2016 Felipe Morato <me@fmorato.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.test.ui;
+
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import android.test.ActivityInstrumentationTestCase2;
+import android.util.Log;
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.*;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.ui.settings.PreferenceActivity;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.Currency;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.Espresso.pressBack;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.*;
+
+
+@RunWith(AndroidJUnit4.class)
+public class OwnCloudExportTest extends ActivityInstrumentationTestCase2<PreferenceActivity> {
+
+    private PreferenceActivity mPreferenceActivity;
+
+    public OwnCloudExportTest() { super(PreferenceActivity.class); }
+
+    @Override
+	@Before
+	public void setUp() throws Exception {
+        super.setUp();
+		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
+
+        mPreferenceActivity = getActivity();
+
+        // creates Account and transaction
+        String activeBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
+        DatabaseHelper mDbHelper = new DatabaseHelper(getActivity(), activeBookUID);
+        SQLiteDatabase mDb;
+        try {
+            mDb = mDbHelper.getWritableDatabase();
+        } catch (SQLException e) {
+            Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
+            mDb = mDbHelper.getReadableDatabase();
+        }
+        SplitsDbAdapter mSplitsDbAdapter;
+        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
+        TransactionsDbAdapter mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
+        AccountsDbAdapter mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+        mAccountsDbAdapter.deleteAllRecords();
+
+        String currencyCode = GnuCashApplication.getDefaultCurrencyCode();
+        Account account = new Account("ownCloud", new CommoditiesDbAdapter(mDb).getCommodity(currencyCode));
+        Transaction transaction = new Transaction("birds");
+        transaction.setTime(System.currentTimeMillis());
+        Split split = new Split(new Money("11.11", currencyCode), account.getUID());
+        transaction.addSplit(split);
+        transaction.addSplit(split.createPair(mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode))));
+        account.addTransaction(transaction);
+
+        mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
+
+    }
+
+    @Test
+    public void OpenOwnCloudDialog() {
+        pressBack(); // The activity automatically opens General Settings. . let's go back first
+        onView(withText("Backup & export")).perform(click());
+        onView(withText("ownCloud Sync")).perform(click());
+        onView(withId(R.id.owncloud_hostname)).check(matches(isDisplayed()));
+    }
+
+
+    @After
+    public void tearDown() throws Exception {
+        mPreferenceActivity.finish();
+        super.tearDown();
+    }
+
+}
+

From 7832759bf3b5fe409ef2a1150e80ce5863336f03 Mon Sep 17 00:00:00 2001
From: Felipe Morato <me@fmorato.com>
Date: Mon, 29 Feb 2016 00:59:37 -0300
Subject: [PATCH 2/3] ownCloud Tests - Save credentials

---
 .../android/test/ui/OwnCloudExportTest.java        | 44 +++++++++++++++++++++-
 1 file changed, 42 insertions(+), 2 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
index 83bfae54..4d154ad1 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
@@ -16,6 +16,8 @@
 
 package org.gnucash.android.test.ui;
 
+import android.content.Context;
+import android.content.SharedPreferences;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.support.test.InstrumentationRegistry;
@@ -40,7 +42,7 @@
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.Espresso.pressBack;
-import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.*;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.ViewMatchers.*;
 
@@ -49,6 +51,7 @@
 public class OwnCloudExportTest extends ActivityInstrumentationTestCase2<PreferenceActivity> {
 
     private PreferenceActivity mPreferenceActivity;
+    private SharedPreferences mPrefs;
 
     public OwnCloudExportTest() { super(PreferenceActivity.class); }
 
@@ -98,12 +101,49 @@ public void OpenOwnCloudDialog() {
         onView(withId(R.id.owncloud_hostname)).check(matches(isDisplayed()));
     }
 
+    @Test
+    public void SetOwnCloudCredentials() {
+        pressBack(); // The activity automatically opens General Settings. . let's go back first
+        onView(withText("Backup & export")).perform(click());
+        onView(withText("ownCloud Sync")).perform(click());
+        onView(withId(R.id.owncloud_hostname)).check(matches(isDisplayed()));
+
+        String OC_SERVER = "https://demo.owncloud.org";
+        String OC_USERNAME = "test";
+        String OC_PASSWORD = "test";
+        String OC_DIR = "gc_test";
+
+        onView(withId(R.id.owncloud_hostname)).perform(clearText()).perform(typeText(OC_SERVER), closeSoftKeyboard());
+        onView(withId(R.id.owncloud_username)).perform(clearText()).perform(typeText(OC_USERNAME), closeSoftKeyboard());
+        onView(withId(R.id.owncloud_password)).perform(clearText()).perform(typeText(OC_PASSWORD), closeSoftKeyboard());
+        onView(withId(R.id.owncloud_dir)).perform(clearText()).perform(typeText(OC_DIR), closeSoftKeyboard());
+        onView(withId(R.id.btn_save)).perform(click());
+        sleep(5000);
+        onView(withId(R.id.btn_save)).perform(click());
+
+        mPrefs = mPreferenceActivity.getSharedPreferences(mPreferenceActivity.getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
+        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_server), null), OC_SERVER);
+        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_username), null), OC_USERNAME);
+        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_password), null), OC_PASSWORD);
+        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_dir), null), OC_DIR);
+
+    }
 
     @After
     public void tearDown() throws Exception {
         mPreferenceActivity.finish();
         super.tearDown();
     }
-
+    /**
+     * Sleep the thread for a specified period
+     * @param millis Duration to sleep in milliseconds
+     */
+    private void sleep(long millis) {
+        try {
+            Thread.sleep(millis);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
 }
 

From 64dc95161301e171ed606915feabb0e3ceeac82a Mon Sep 17 00:00:00 2001
From: Felipe Morato <me@fmorato.com>
Date: Fri, 4 Mar 2016 01:21:55 -0300
Subject: [PATCH 3/3] Tests Export to ownCloud.

---
 .../android/test/ui/OwnCloudExportTest.java        | 128 ++++++++++++++-------
 1 file changed, 88 insertions(+), 40 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
index 4d154ad1..4bff7ede 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
@@ -20,7 +20,8 @@
 import android.content.SharedPreferences;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.test.InstrumentationRegistry;
+import android.support.test.espresso.contrib.DrawerActions;
+import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
@@ -32,41 +33,68 @@
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.ui.settings.PreferenceActivity;
-import org.junit.After;
+import org.gnucash.android.ui.account.AccountsActivity;
 import org.junit.Before;
+import org.junit.FixMethodOrder;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
 
 import java.util.Currency;
 
+import static android.support.test.InstrumentationRegistry.getInstrumentation;
 import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.Espresso.pressBack;
 import static android.support.test.espresso.action.ViewActions.*;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
 import static android.support.test.espresso.matcher.ViewMatchers.*;
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertTrue;
+import static org.gnucash.android.test.ui.AccountsActivityTest.preventFirstRunDialogs;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.not;
 
 
 @RunWith(AndroidJUnit4.class)
-public class OwnCloudExportTest extends ActivityInstrumentationTestCase2<PreferenceActivity> {
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
+public class OwnCloudExportTest {
 
-    private PreferenceActivity mPreferenceActivity;
+    private AccountsActivity mAccountsActivity;
     private SharedPreferences mPrefs;
 
-    public OwnCloudExportTest() { super(PreferenceActivity.class); }
+    private String OC_SERVER = "https://demo.owncloud.org";
+    private String OC_USERNAME = "test";
+    private String OC_PASSWORD = "test";
+    private String OC_DIR = "gc_test";
 
-    @Override
-	@Before
-	public void setUp() throws Exception {
-        super.setUp();
-		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
-		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
+    /**
+     * A JUnit {@link Rule @Rule} to launch your activity under test. This is a replacement
+     * for {@link ActivityInstrumentationTestCase2}.
+     * <p>
+     * Rules are interceptors which are executed for each test method and will run before
+     * any of your setup code in the {@link Before @Before} method.
+     * <p>
+     * {@link ActivityTestRule} will create and launch of the activity for you and also expose
+     * the activity under test. To get a reference to the activity you can use
+     * the {@link ActivityTestRule#getActivity()} method.
+     */
+    @Rule
+    public ActivityTestRule<AccountsActivity> mActivityRule = new ActivityTestRule<>(
+            AccountsActivity.class);
+
+    @Before
+    public void setUp() throws Exception {
 
-        mPreferenceActivity = getActivity();
+        mAccountsActivity = mActivityRule.getActivity();
+        mPrefs = mAccountsActivity.getSharedPreferences(
+                mAccountsActivity.getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
+
+        preventFirstRunDialogs(getInstrumentation().getTargetContext());
 
         // creates Account and transaction
         String activeBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
-        DatabaseHelper mDbHelper = new DatabaseHelper(getActivity(), activeBookUID);
+        DatabaseHelper mDbHelper = new DatabaseHelper(mAccountsActivity, activeBookUID);
         SQLiteDatabase mDb;
         try {
             mDb = mDbHelper.getWritableDatabase();
@@ -86,33 +114,32 @@ public void setUp() throws Exception {
         transaction.setTime(System.currentTimeMillis());
         Split split = new Split(new Money("11.11", currencyCode), account.getUID());
         transaction.addSplit(split);
-        transaction.addSplit(split.createPair(mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode))));
+        transaction.addSplit(split.createPair(
+                mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode))));
         account.addTransaction(transaction);
 
         mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
-    }
 
-    @Test
-    public void OpenOwnCloudDialog() {
-        pressBack(); // The activity automatically opens General Settings. . let's go back first
-        onView(withText("Backup & export")).perform(click());
-        onView(withText("ownCloud Sync")).perform(click());
-        onView(withId(R.id.owncloud_hostname)).check(matches(isDisplayed()));
+        SharedPreferences.Editor editor = mPrefs.edit();
+
+        editor.putBoolean(mAccountsActivity.getString(R.string.key_owncloud_sync), false).apply();
+        editor.putInt(mAccountsActivity.getString(R.string.key_last_export_destination), 0);
+        editor.apply();
     }
 
+    /**
+     * It might fail if it takes too long to connect to the server or if there is no network
+     */
     @Test
-    public void SetOwnCloudCredentials() {
-        pressBack(); // The activity automatically opens General Settings. . let's go back first
-        onView(withText("Backup & export")).perform(click());
+    public void OwnCloudCredentials() {
+        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());
+        onView(withId(R.id.nav_view)).perform(swipeUp());
+        onView(withText(R.string.title_settings)).perform(click());
+        onView(withText(R.string.header_backup_and_export_settings)).perform(click());
         onView(withText("ownCloud Sync")).perform(click());
         onView(withId(R.id.owncloud_hostname)).check(matches(isDisplayed()));
 
-        String OC_SERVER = "https://demo.owncloud.org";
-        String OC_USERNAME = "test";
-        String OC_PASSWORD = "test";
-        String OC_DIR = "gc_test";
-
         onView(withId(R.id.owncloud_hostname)).perform(clearText()).perform(typeText(OC_SERVER), closeSoftKeyboard());
         onView(withId(R.id.owncloud_username)).perform(clearText()).perform(typeText(OC_USERNAME), closeSoftKeyboard());
         onView(withId(R.id.owncloud_password)).perform(clearText()).perform(typeText(OC_PASSWORD), closeSoftKeyboard());
@@ -121,18 +148,39 @@ public void SetOwnCloudCredentials() {
         sleep(5000);
         onView(withId(R.id.btn_save)).perform(click());
 
-        mPrefs = mPreferenceActivity.getSharedPreferences(mPreferenceActivity.getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
-        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_server), null), OC_SERVER);
-        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_username), null), OC_USERNAME);
-        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_password), null), OC_PASSWORD);
-        assertEquals(mPrefs.getString(mPreferenceActivity.getString(R.string.key_owncloud_dir), null), OC_DIR);
+        assertEquals(mPrefs.getString(mAccountsActivity.getString(R.string.key_owncloud_server), null), OC_SERVER);
+        assertEquals(mPrefs.getString(mAccountsActivity.getString(R.string.key_owncloud_username), null), OC_USERNAME);
+        assertEquals(mPrefs.getString(mAccountsActivity.getString(R.string.key_owncloud_password), null), OC_PASSWORD);
+        assertEquals(mPrefs.getString(mAccountsActivity.getString(R.string.key_owncloud_dir), null), OC_DIR);
+
+        assertTrue(mPrefs.getBoolean(mAccountsActivity.getString(R.string.key_owncloud_sync), false));
+    }
 
+    @Test
+    public void OwnCloudExport() {
+
+        mPrefs.edit().putBoolean(mAccountsActivity.getString(R.string.key_owncloud_sync), true).commit();
+
+        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());
+        onView(withText(R.string.nav_menu_export)).perform(click());
+        onView(withId(R.id.spinner_export_destination)).perform(click());
+        String[] destinations = mAccountsActivity.getResources().getStringArray(R.array.export_destinations);
+        onView(withText(destinations[3])).perform(click());
+        onView(withId(R.id.menu_save)).perform(click());
+//        onView(withSpinnerText(
+//                mAccountsActivity.getResources().getStringArray(R.array.export_destinations)[3]))
+//                .perform(click());
+        assertToastDisplayed(String.format(mAccountsActivity.getString(R.string.toast_exported_to), "ownCloud -> " + OC_DIR));
     }
 
-    @After
-    public void tearDown() throws Exception {
-        mPreferenceActivity.finish();
-        super.tearDown();
+    /**
+     * Checks that a specific toast message is displayed
+     * @param toastString String that should be displayed
+     */
+    private void assertToastDisplayed(String toastString) {
+        onView(withText(toastString))
+                .inRoot(withDecorView(not(is(mActivityRule.getActivity().getWindow().getDecorView()))))
+                .check(matches(isDisplayed()));
     }
     /**
      * Sleep the thread for a specified period
