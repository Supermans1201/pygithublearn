From bd20338f3e0abb7435085e655054707490a7896b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 7 Sep 2015 18:56:05 +0200
Subject: [PATCH] Fix conflict between the expression evaluator and the
 calcualtor keyboard.

---
 .../ui/transaction/TransactionFormFragment.java    | 36 -------------------
 .../gnucash/android/ui/util/CustomKeyboard.java    | 40 +++++++++++++++++++++-
 2 files changed, 39 insertions(+), 37 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 7bdc2204..1974368a 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -575,42 +575,6 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
-        mAmountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (!hasFocus) {
-                    String amountText = mAmountEditText.getText().toString();
-
-                    if (amountText.trim().isEmpty())
-                        return;
-
-                    // FIXME: replace the decimal separator of the current locale with '.'
-                    ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
-                    Expression expression;
-
-                    try {
-                        expression = expressionBuilder.build();
-                    } catch (RuntimeException e) {
-                        setEditTextError();
-                        return;
-                    }
-
-                    if (expression != null && expression.validate().isValid())
-                        // FIXME: limit the decimal places
-                        // FIXME: use the locale decimal separator
-                        mAmountEditText.setText(Double.toString(expression.evaluate()));
-                    else
-                        setEditTextError();
-                }
-            }
-
-            private void setEditTextError() {
-                // FIXME: i18n
-                mAmountEditText.setError("Invalid expression.");
-                // TODO: log error
-            }
-        });
-
 		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index ce68f22b..eb30b1e9 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -36,6 +36,9 @@
 import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
 
 /**
  * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
@@ -91,6 +94,9 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
+                    break;
+                case 1001:
+                    evaluateEditTextExpression(edittext);
             }
         }
 
@@ -165,8 +171,10 @@ public void registerEditText(int resid) {
             public void onFocusChange(View v, boolean hasFocus) {
                 if (hasFocus)
                     showCustomKeyboard(v);
-                else
+                else {
                     hideCustomKeyboard();
+                    evaluateEditTextExpression((EditText) v);
+                }
             }
         });
 
@@ -215,4 +223,34 @@ public boolean onBackPressed() {
         } else
             return false;
     }
+
+    private void evaluateEditTextExpression(EditText editText) {
+        String amountText = editText.getText().toString();
+
+        if (amountText.trim().isEmpty())
+            return;
+
+        // FIXME: replace the decimal separator of the current locale with '.'
+        ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+        Expression expression;
+
+        try {
+            expression = expressionBuilder.build();
+        } catch (RuntimeException e) {
+            // FIXME: i18n
+            editText.setError("Invalid expression.");
+            // TODO: log error
+            return;
+        }
+
+        if (expression != null && expression.validate().isValid())
+            // FIXME: limit the decimal places
+            // FIXME: use the locale decimal separator
+            editText.setText(Double.toString(expression.evaluate()));
+        else {
+            // FIXME: i18n
+            editText.setError("Invalid expression.");
+            // TODO: log error
+        }
+    }
 }
