From 463784d3bf0aadbf5b8b890ebdaba57e072a008f Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 7 Sep 2013 00:29:23 +0200
Subject: [PATCH 1/8] Implemented exporting to QIF format Created setting for
 default export format

---
 app/res/layout/dialog_export_ofx.xml               |  38 ++++++-
 app/res/values-de/strings.xml                      |   6 ++
 app/res/values-el/strings.xml                      |   6 ++
 app/res/values-es-rMX/strings.xml                  |   6 ++
 app/res/values-es/strings.xml                      |   6 ++
 app/res/values-fr/strings.xml                      |   6 ++
 app/res/values-hu/strings.xml                      |   6 ++
 app/res/values-it/strings.xml                      |   6 ++
 app/res/values-nb/strings.xml                      |   6 ++
 app/res/values-nl/strings.xml                      |   6 ++
 app/res/values-pt-rBR/strings.xml                  |   6 ++
 app/res/values-ru/strings.xml                      |   6 ++
 app/res/values-zh/strings.xml                      |   6 ++
 app/res/values/strings.xml                         |  11 ++
 app/res/xml/fragment_general_preferences.xml       |   7 +-
 app/src/org/gnucash/android/data/Account.java      |  35 ++++++-
 app/src/org/gnucash/android/data/Transaction.java  |  35 +++++++
 .../org/gnucash/android/db/AccountsDbAdapter.java  |   9 +-
 .../gnucash/android/export/qif/QifExporter.java    |  45 ++++++++
 .../org/gnucash/android/export/qif/QifHelper.java  |  74 +++++++++++++
 .../android/ui/accounts/ExportDialogFragment.java  | 116 +++++++++++++++------
 .../ui/settings/GeneralPreferenceFragment.java     |  21 ++++
 22 files changed, 427 insertions(+), 36 deletions(-)
 create mode 100644 app/src/org/gnucash/android/export/qif/QifExporter.java
 create mode 100644 app/src/org/gnucash/android/export/qif/QifHelper.java

diff --git a/app/res/layout/dialog_export_ofx.xml b/app/res/layout/dialog_export_ofx.xml
index 9dbd624b..e032abaa 100644
--- a/app/res/layout/dialog_export_ofx.xml
+++ b/app/res/layout/dialog_export_ofx.xml
@@ -38,8 +38,38 @@
 	        style="@style/ListItem"
 	        android:layout_marginLeft="@dimen/dialog_padding"
 	        android:layout_marginRight="@dimen/dialog_padding"
-	        android:layout_marginBottom="20dp" />
-	       
+	        android:layout_marginBottom="@dimen/dialog_padding" />
+
+        <TextView
+                android:id="@+id/label_export_format"
+                android:text="Export Format"
+                android:layout_height="wrap_content"
+                android:layout_width="wrap_content"
+                android:layout_marginBottom="-8dip"
+                android:layout_marginLeft="@dimen/dialog_padding"
+                style="@style/TextAppearance.EditTransaction_LabelSmall" />
+
+        <RadioGroup xmlns:android="http://schemas.android.com/apk/res/android"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="@dimen/dialog_padding"
+                    android:layout_marginRight="@dimen/dialog_padding"
+                    android:layout_marginBottom="@dimen/dialog_padding"
+                    android:orientation="horizontal">
+
+            <RadioButton android:id="@+id/radio_qif_format"
+                         android:layout_width="wrap_content"
+                         android:layout_height="wrap_content"
+                         android:layout_marginRight="20dp"
+                         android:checked="true"
+                         android:text="QIF" />
+
+            <RadioButton android:id="@+id/radio_ofx_format"
+                         android:layout_width="wrap_content"
+                         android:layout_height="wrap_content"
+                         android:text="OFX"/>
+        </RadioGroup>
+
 	    <CheckBox android:id="@+id/checkbox_export_all"
 	        android:layout_width="wrap_content"
 	        android:layout_height="wrap_content"
@@ -57,8 +87,8 @@
 	        android:layout_marginTop="@dimen/dialog_padding"
 	        android:layout_marginLeft="@dimen/dialog_padding"
 	        android:textAppearance="?android:attr/textAppearanceMedium"
-	        android:text="@string/option_delete_after_export"        
-	        />    
+	        android:text="@string/option_delete_after_export"
+	        />
 	        
 	    <TextView android:layout_marginLeft="@dimen/dialog_padding"
 	        android:text="@string/hint_delete_after_export"
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 2930d3a5..8365f48d 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -340,6 +340,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
@@ -359,4 +361,8 @@
         <item>STOCK</item>
         <item>MUTUAL FUND</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 824b65dc..5ee70dd5 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -354,6 +354,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
@@ -373,4 +375,8 @@
         <item></item>
         <item> </item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index d581f6d4..30e80be4 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -338,6 +338,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
@@ -357,4 +359,8 @@
         <item>ACCIONES</item>
         <item>FONDOS</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 89b972cd..c2133653 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -338,6 +338,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
@@ -357,4 +359,8 @@
         <item>ACCIONES</item>
         <item>FONDOS</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 8ecc0367..d368f03a 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -336,6 +336,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
@@ -355,4 +357,8 @@
         <item>ACTIONS</item>
         <item>FONDS COMMUNS</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index ee566dbb..9ff8a842 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -339,6 +339,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
@@ -358,4 +360,8 @@
         <item>STOCK</item>
         <item>MUTUAL FUND</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 72acddf0..09fe8c2a 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -339,6 +339,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
@@ -358,4 +360,8 @@
         <item>AZIONE</item>
         <item>FONDO COMUNE</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index fcf8f063..f3adc989 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -341,6 +341,8 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
@@ -360,4 +362,8 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
         <item>AKSJE</item>
         <item>AKSJEFOND</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 95c4b639..446907a1 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -340,6 +340,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
@@ -359,4 +361,8 @@
         <item>STOCK</item>
         <item>MUTUAL FUND</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index b45b853d..f0d50e82 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -338,6 +338,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
@@ -357,4 +359,8 @@
         <item>AES</item>
         <item>FUNDO MTUO</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 6eae03d7..295d4f1e 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -336,6 +336,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
@@ -355,4 +357,8 @@
         <item>STOCK</item>
         <item>MUTUAL FUND</item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 8bc9209f..c35bac8e 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -513,6 +513,8 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
@@ -532,4 +534,8 @@
         <item></item>
         <item></item>
     </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index be34f74c..4fd8ee3e 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -536,6 +536,9 @@
     <string name="section_header_transactions">Transactions</string>
     <string name="section_header_accounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
+    <string name="title_default_export_format">Default Export Format</string>
+    <string name="key_default_export_format">default_export_format</string>
+    <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
@@ -570,4 +573,12 @@
         <item>STOCK</item>
         <item>MUTUAL</item>
     </string-array>
+    <string-array name="key_export_format_values">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
+    <string-array name="export_formats">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
 </resources>
diff --git a/app/res/xml/fragment_general_preferences.xml b/app/res/xml/fragment_general_preferences.xml
index 8b684feb..5ea542b2 100644
--- a/app/res/xml/fragment_general_preferences.xml
+++ b/app/res/xml/fragment_general_preferences.xml
@@ -17,7 +17,12 @@
 
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android" >
     <PreferenceCategory android:title="@string/title_export_preference_category">
-        <EditTextPreference android:title="@string/title_default_export_email" 
+        <ListPreference android:title="@string/title_default_export_format"
+                        android:entryValues="@array/key_export_format_values"
+                        android:entries="@array/export_formats"
+                        android:key="@string/key_default_export_format"
+                        android:summary="@string/summary_default_export_format"/>
+        <EditTextPreference android:title="@string/title_default_export_email"
             android:key="@string/key_default_export_email" 
             android:summary="@string/summary_default_export_email"
             android:inputType="textEmailAddress"/>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index c1b4b4ee..e36bc9e2 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -23,6 +23,9 @@
 import java.util.Locale;
 import java.util.UUID;
 
+import android.content.Context;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -45,7 +48,7 @@
 	 * This is used when sending intents from third-party applications
 	 */
 	public static final String MIME_TYPE = "vnd.android.cursor.item/vnd.org.gnucash.android.account";
-	
+
 	/**
 	 * The type of account
 	 * This are the different types specified by the OFX format and 
@@ -453,4 +456,34 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 				
 	}
 
+    /**
+     * Exports the account info and transactions in the QIF format
+     * @param exportAll Flag to determine whether to export all transactions, or only new transactions since last export
+     * @return QIF representation of the account information
+     */
+    public String toQIF(boolean exportAll, Context context) {
+        StringBuffer accountQifBuffer = new StringBuffer();
+        final String newLine = "\n";
+
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+        String fullyQualifiedAccountName = accountsDbAdapter.getFullyQualifiedAccountName(mUID);
+        accountsDbAdapter.close();
+
+        accountQifBuffer.append(QifHelper.ACCOUNT_HEADER).append(newLine);
+        accountQifBuffer.append(QifHelper.ACCOUNT_NAME_PREFIX).append(fullyQualifiedAccountName).append(newLine);
+        accountQifBuffer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
+
+        String header = QifHelper.getQifHeader(mAccountType);
+        accountQifBuffer.append(header + newLine);
+
+        for (Transaction transaction : mTransactionsList) {
+            //ignore those which are loaded as double transactions.
+            // They will be handled as splits
+            if (!transaction.getAccountUID().equals(mUID))
+                continue;
+
+            accountQifBuffer.append(transaction.toQIF(context) + newLine);
+        }
+        return accountQifBuffer.toString();
+    }
 }
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index 7c9cb180..6860f232 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -22,9 +22,11 @@
 import java.util.Locale;
 import java.util.UUID;
 
+import android.content.Context;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.data.Account.OfxAccountType;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -430,4 +432,37 @@ public Element toOfx(Document doc, String accountUID){
 		return transactionNode;
 	}
 
+    /**
+     * Builds a QIF entry representing this transaction
+     * @param context Application context
+     * @return String QIF representation of this transaction
+     */
+    public String toQIF(Context context){
+        final String newLine = "\n";
+
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+
+        StringBuffer transactionQifBuffer = new StringBuffer();
+        transactionQifBuffer.append(QifHelper.DATE_PREFIX + QifHelper.formatDate(mTimestamp) + newLine);
+
+        if (mDoubleEntryAccountUID != null && !mDoubleEntryAccountUID.isEmpty()){
+            String splitAccountFullName = accountsDbAdapter.getFullyQualifiedAccountName(mDoubleEntryAccountUID);
+            transactionQifBuffer.append(QifHelper.SPLIT_CATEGORY_PREFIX + splitAccountFullName + newLine);
+            if (mDescription != null || mDescription.isEmpty()){
+                transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX + mDescription + newLine);
+            }
+            transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX + mAmount.negate().asString() + newLine);
+        } else {
+            transactionQifBuffer.append(QifHelper.AMOUNT_PREFIX + mAmount.asString() + newLine);
+            if (mDescription != null && !mDescription.isEmpty()){
+                transactionQifBuffer.append(QifHelper.MEMO_PREFIX + mDescription + newLine);
+            }
+            transactionQifBuffer.append(QifHelper.CATEGORY_PREFIX + QifHelper.getImbalanceAccountName(mAmount.getCurrency()) + newLine);
+        }
+
+        transactionQifBuffer.append(QifHelper.ENTRY_TERMINATOR + newLine);
+
+        accountsDbAdapter.close();
+        return transactionQifBuffer.toString();
+    }
 }
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 3967754d..e9889c1c 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -38,7 +38,7 @@
     /**
      * Separator used for account name hierarchies between parent and child accounts
      */
-    public static final String ACCOUNT_NAME_SEPARATOR = "::";
+    public static final String ACCOUNT_NAME_SEPARATOR = ":";
 
 	/**
 	 * Transactions database adapter for manipulating transactions associated with accounts
@@ -324,6 +324,7 @@ public String getName(long accountID) {
 	 * @return List of {@link Account}s with unexported transactions
 	 */
 	public List<Account> getExportableAccounts(){
+        //TODO: Optimize to use SQL DISTINCT and load only necessary accounts from db
 		List<Account> accountsList = getAllAccounts();
 		Iterator<Account> it = accountsList.iterator();
 		
@@ -552,6 +553,12 @@ public String getCurrencyCode(String accountUID){
 		return getCurrencyCode(getAccountID(accountUID));
 	}
 
+    /**
+     * Returns the simple name of the account with unique ID <code>accountUID</code>.
+     * @param accountUID Unique identifier of the account
+     * @return Name of the account as String
+     * @see #getFullyQualifiedAccountName(String)
+     */
     public String getAccountName(String accountUID){
         Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
                 new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_NAME},
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
new file mode 100644
index 00000000..e6cd8163
--- /dev/null
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -0,0 +1,45 @@
+package org.gnucash.android.export.qif;
+
+import android.content.Context;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+
+import java.util.List;
+
+/**
+ * @author Ngewi
+ */
+public class QifExporter {
+    boolean mExportAll;
+    Context mContext;
+    private List<Account> mAccountsList;
+
+    public QifExporter(Context context, boolean exportAll){
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+        mAccountsList = exportAll ? accountsDbAdapter.getAllAccounts() : accountsDbAdapter.getExportableAccounts();
+        accountsDbAdapter.close();
+
+        this.mExportAll = exportAll;
+        this.mContext = context;
+    }
+
+    public String generateQIF(){
+        StringBuffer qifBuffer = new StringBuffer();
+
+        TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(mContext);
+        for (Account account : mAccountsList) {
+            if (account.getTransactionCount() == 0)
+                continue;
+
+            qifBuffer.append(account.toQIF(mExportAll, mContext) + "\n");
+
+            //mark as exported
+            transactionsDbAdapter.markAsExported(account.getUID());
+        }
+        transactionsDbAdapter.close();
+
+        return qifBuffer.toString();
+    }
+
+}
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
new file mode 100644
index 00000000..e8fd1f99
--- /dev/null
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -0,0 +1,74 @@
+package org.gnucash.android.export.qif;
+
+import org.gnucash.android.data.Account;
+
+import java.text.SimpleDateFormat;
+import java.util.Currency;
+import java.util.Date;
+
+/**
+ * @author Ngewi
+ */
+public class QifHelper {
+    /*
+    Prefixes for the QIF file
+     */
+    public static final String DATE_PREFIX          = "D";
+    public static final String AMOUNT_PREFIX        = "T";
+    public static final String MEMO_PREFIX          = "M";
+    public static final String CATEGORY_PREFIX      = "L";
+    public static final String SPLIT_MEMO_PREFIX    = "E";
+    public static final String SPLIT_AMOUNT_PREFIX  = "$";
+    public static final String SPLIT_CATEGORY_PREFIX    = "S";
+    public static final String SPLIT_PERCENTAGE_PREFIX  = "%";
+    public static final String ACCOUNT_HEADER           = "!Account";
+    public static final String ACCOUNT_NAME_PREFIX      = "N";
+
+
+    public static final String ENTRY_TERMINATOR = "^";
+    private static final SimpleDateFormat QIF_DATE_FORMATTER = new SimpleDateFormat("yyyy/M/d");
+
+    /**
+     * Formats the date for QIF in the form d MMMM YYYY.
+     * For example 25 January 2013
+     * @param timeMillis Time in milliseconds since epoch
+     * @return Formatted date from the time
+     */
+    public static final String formatDate(long timeMillis){
+        Date date = new Date(timeMillis);
+        return QIF_DATE_FORMATTER.format(date);
+    }
+
+    /**
+     * Returns the QIF header for the transaction based on the account type.
+     * By default, the QIF cash header is used
+     * @param accountType AccountType of account
+     * @return QIF header for the transactions
+     */
+    public static String getQifHeader(Account.AccountType accountType){
+        switch (accountType) {
+            case CASH:
+                return "!Type:Cash";
+            case BANK:
+                return "!Type:Bank";
+            case CREDIT:
+                return "!Type:CCard";
+            case ASSET:
+                return "!Type:Oth A";
+            case LIABILITY:
+                return "!Type:Oth L";
+            default:
+                return "!Type:Cash";
+        }
+    }
+
+    /**
+     * Returns the imbalance account where to store transactions which are not double entry
+     * @param currency Currency of the transaction
+     * @return Imbalance account name
+     */
+    public static String getImbalanceAccountName(Currency currency){
+        //TODO: localize this in the future
+        return "Imbalance-" + currency.getCurrencyCode();
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java b/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
index 27ee3b27..ae20d279 100644
--- a/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
@@ -40,7 +40,9 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import android.widget.*;
 import org.gnucash.android.R;
+import org.gnucash.android.export.qif.QifExporter;
 import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
 import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
@@ -61,11 +63,6 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.Spinner;
-import android.widget.Toast;
 
 /**
  * Dialog fragment for exporting account information as OFX files.
@@ -110,7 +107,11 @@
 	 * Tag for logging
 	 */
 	private static final String TAG = "ExportDialogFragment";
-	
+
+    public enum ExportFormat { QIF, OFX};
+
+    private ExportFormat mExportFormat = ExportFormat.QIF;
+
 	/**
 	 * Click listener for positive button in the dialog.
 	 * @author Ngewi Fet <ngewif@gmail.com>
@@ -119,20 +120,33 @@
 
 		@Override
 		public void onClick(View v) {
-			boolean exportAll = mExportAllCheckBox.isChecked();
-			Document document = null;				
-			try {
-				document = exportOfx(exportAll);
-				writeToExternalStorage(document);
-			} catch (Exception e) {
-				Log.e(TAG, e.getMessage());
-				Toast.makeText(getActivity(), R.string.error_exporting,
-						Toast.LENGTH_LONG).show();
-				dismiss();
-				return;
-			}
-			
-			int position = mDestinationSpinner.getSelectedItemPosition();
+            boolean exportAll = mExportAllCheckBox.isChecked();
+            try {
+                switch (mExportFormat) {
+                    case QIF: {
+                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
+                        String qif = qifExporter.generateQIF();
+
+                        writeQifExternalStorage(qif);
+                    }
+                    break;
+
+                    case OFX: {
+                        Document document = exportOfx(exportAll);
+                        writeOfxToExternalStorage(document);
+                    }
+                    break;
+                }
+            } catch (Exception e) {
+                Log.e(TAG, e.getMessage());
+                Toast.makeText(getActivity(), R.string.error_exporting,
+                        Toast.LENGTH_LONG).show();
+                dismiss();
+                return;
+            }
+
+
+            int position = mDestinationSpinner.getSelectedItemPosition();
 			switch (position) {
 			case 0:					
 				shareFile(mFilePath);				
@@ -141,7 +155,7 @@ public void onClick(View v) {
 			case 1:				
 				File src = new File(mFilePath);
 				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename());
+				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
 				
 				try {
 					copyFile(src, dst);
@@ -176,7 +190,19 @@ public void onClick(View v) {
 		}
 		
 	}
-	
+
+    public void onRadioButtonClicked(View view){
+        switch (view.getId()){
+            case R.id.radio_ofx_format:
+                mExportFormat = ExportFormat.OFX;
+                break;
+            case R.id.radio_qif_format:
+                mExportFormat = ExportFormat.QIF;
+        }
+        mFilePath = buildExportFilename(mExportFormat);
+        return;
+    }
+
 	@Override
 	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
@@ -186,7 +212,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 	@Override
 	public void onActivityCreated(Bundle savedInstanceState) {		
 		super.onActivityCreated(savedInstanceState);
-		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename();
+		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
 		getDialog().setTitle(R.string.menu_export_ofx);
 		bindViews();
 	}
@@ -222,17 +248,41 @@ public void onClick(View v) {
 		});
 		
 		mSaveButton.setOnClickListener(new ExportClickListener());
+
+        String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
+        View.OnClickListener clickListener = new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                onRadioButtonClicked(view);
+            }
+        };
+
+        RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
+        ofxRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name()));
+        ofxRadioButton.setOnClickListener(clickListener);
+
+        RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
+        qifRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name()));
+        qifRadioButton.setOnClickListener(clickListener);
 	}
-	
+
+    private void writeQifExternalStorage(String qif) throws IOException {
+        File file = new File(mFilePath);
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        writer.write(qif);
+
+        writer.flush();
+    }
+
 	/**
 	 * Writes the OFX document <code>doc</code> to external storage
 	 * @param doc Document containing OFX file data
 	 * @throws IOException if file could not be saved
 	 */
-	private void writeToExternalStorage(Document doc) throws IOException{
+	private void writeOfxToExternalStorage(Document doc) throws IOException{
 		File file = new File(mFilePath);
 		
-//		FileWriter writer = new FileWriter(file);
 		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
 		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
 				.getBoolean(getString(R.string.key_xml_ofx_header), false);
@@ -317,11 +367,19 @@ public static void copyFile(File src, File dst) throws IOException
 	 * Builds a file name based on the current time stamp for the exported file
 	 * @return String containing the file name
 	 */
-	public static String buildExportFilename(){
-		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmm", Locale.US);
+	public static String buildExportFilename(ExportFormat format){
+		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
 		String filename = formatter.format(
 				new Date(System.currentTimeMillis())) 
-				+ "_gnucash_all.ofx";
+				+ "_gnucash_all";
+        switch (format) {
+            case QIF:
+                filename += ".qif";
+                break;
+            case OFX:
+                filename += ".ofx";
+                break;
+        }
 		return filename;
 	}
 	
diff --git a/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
index 238492d7..be15e595 100644
--- a/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
@@ -61,8 +61,22 @@ public void onResume() {
 			pref.setSummary(defaultEmail);			
 		}
 		pref.setOnPreferenceChangeListener(this);
+
+        String keyDefaultExportFormat = getString(R.string.key_default_export_format);
+        pref = findPreference(keyDefaultExportFormat);
+        String defaultExportFormat = manager.getString(keyDefaultExportFormat, null);
+        if (defaultExportFormat != null && !defaultExportFormat.trim().isEmpty()){
+            pref.setSummary(defaultExportFormat);
+        }
+        pref.setOnPreferenceChangeListener(this);
 	}
 
+    /**
+     * Listens for changes to the preference and sets the preference summary to the new value
+     * @param preference Preference which has been changed
+     * @param newValue New value for the changed preference
+     * @return <code>true</code> if handled, <code>false</code> otherwise
+     */
 	@Override
 	public boolean onPreferenceChange(Preference preference, Object newValue) {
 		preference.setSummary(newValue.toString());
@@ -76,6 +90,13 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
 				preference.setSummary(R.string.summary_default_export_email);
 			}					
 		}
+
+        if (preference.getKey().equals(getString(R.string.key_default_export_format))){
+            String exportFormat = newValue.toString();
+            if (exportFormat == null || exportFormat.trim().isEmpty()){
+                preference.setSummary(R.string.summary_default_export_format);
+            }
+        }
 		return true;
 	}
 

From 4ebd206018263587cbd11e193375b9b6bd6aff87 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Sep 2013 14:27:32 +0200
Subject: [PATCH 2/8] Started test cases for QIF export and fixing broken tests
 for OFX export Code refactoring

---
 app/res/menu/account_actions.xml                   |   2 +-
 app/res/values-de/strings.xml                      |   1 +
 app/res/values-el/strings.xml                      |   1 +
 app/res/values-es-rMX/strings.xml                  |   1 +
 app/res/values-es/strings.xml                      |   1 +
 app/res/values-fr/strings.xml                      |   1 +
 app/res/values-hu/strings.xml                      |   1 +
 app/res/values-it/strings.xml                      |   1 +
 app/res/values-nb/strings.xml                      |   1 +
 app/res/values-nl/strings.xml                      |   1 +
 app/res/values-pt-rBR/strings.xml                  |   1 +
 app/res/values-ru/strings.xml                      |   1 +
 app/res/values-zh/strings.xml                      |   1 +
 app/res/values/strings.xml                         |   1 +
 app/src/org/gnucash/android/data/Account.java      |   6 +-
 app/src/org/gnucash/android/data/Transaction.java  |   8 +-
 .../accounts => export}/ExportDialogFragment.java  | 880 +++++++++++----------
 .../org/gnucash/android/export/ExportFormat.java   |  39 +
 .../ofx/OfxExporter.java}                          |   6 +-
 .../android/ui/accounts/AccountsListFragment.java  |   4 +-
 ...ExportTest.java => ExportTransactionsTest.java} | 441 ++++++-----
 21 files changed, 742 insertions(+), 657 deletions(-)
 rename app/src/org/gnucash/android/{ui/accounts => export}/ExportDialogFragment.java (94%)
 create mode 100644 app/src/org/gnucash/android/export/ExportFormat.java
 rename app/src/org/gnucash/android/{util/OfxFormatter.java => export/ofx/OfxExporter.java} (97%)
 rename integration-tests/src/org/gnucash/android/test/ui/{OfxExportTest.java => ExportTransactionsTest.java} (71%)

diff --git a/app/res/menu/account_actions.xml b/app/res/menu/account_actions.xml
index 6b594b21..61101df1 100644
--- a/app/res/menu/account_actions.xml
+++ b/app/res/menu/account_actions.xml
@@ -23,7 +23,7 @@
     
         <item android:id="@+id/menu_export"
           android:icon="@drawable/content_import_export_holo_light"
-          android:title="@string/menu_export_ofx"
+          android:title="@string/menu_export_transactions"
           android:showAsAction="never"
           android:orderInCategory="3"/>
 </menu>
\ No newline at end of file
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 8365f48d..c8e3562a 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -342,6 +342,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 5ee70dd5..ac793865 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -356,6 +356,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 30e80be4..23d41528 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -340,6 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index c2133653..4215a056 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -340,6 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index d368f03a..bb7b5c3e 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -338,6 +338,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 9ff8a842..19c3a432 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -341,6 +341,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 09fe8c2a..5e3f6625 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -341,6 +341,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index f3adc989..91c8de10 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -343,6 +343,7 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 446907a1..330cbeec 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -342,6 +342,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index f0d50e82..7e6569ab 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -340,6 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 295d4f1e..da53c039 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -338,6 +338,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index c35bac8e..7ea5255a 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -515,6 +515,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 4fd8ee3e..bf609112 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -539,6 +539,7 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="key_default_export_format">default_export_format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index e36bc9e2..d6304d81 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -25,8 +25,8 @@
 
 import android.content.Context;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifHelper;
-import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -389,7 +389,7 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 		//================= BEGIN BANK ACCOUNT INFO (BANKACCTFROM) =================================
 		
 		Element bankId = doc.createElement("BANKID");
-		bankId.appendChild(doc.createTextNode(OfxFormatter.APP_ID));
+		bankId.appendChild(doc.createTextNode(OfxExporter.APP_ID));
 		
 		Element acctId = doc.createElement("ACCTID");
 		acctId.appendChild(doc.createTextNode(mUID));
@@ -408,7 +408,7 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 		
 		//================= BEGIN ACCOUNT BALANCE INFO =================================
 		String balance = getBalance().toPlainString();
-		String formattedCurrentTimeString = OfxFormatter.getFormattedCurrentTime();
+		String formattedCurrentTimeString = OfxExporter.getFormattedCurrentTime();
 		
 		Element balanceAmount = doc.createElement("BALAMT");
 		balanceAmount.appendChild(doc.createTextNode(balance));			
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index 6860f232..03217d53 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -26,8 +26,8 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.data.Account.OfxAccountType;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifHelper;
-import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -379,12 +379,12 @@ public Element toOfx(Document doc, String accountUID){
 		transactionNode.appendChild(type);
 
 		Element datePosted = doc.createElement("DTPOSTED");
-		datePosted.appendChild(doc.createTextNode(OfxFormatter.getOfxFormattedTime(mTimestamp)));
+		datePosted.appendChild(doc.createTextNode(OfxExporter.getOfxFormattedTime(mTimestamp)));
 		transactionNode.appendChild(datePosted);
 		
 		Element dateUser = doc.createElement("DTUSER");
 		dateUser.appendChild(doc.createTextNode(
-				OfxFormatter.getOfxFormattedTime(mTimestamp)));
+				OfxExporter.getOfxFormattedTime(mTimestamp)));
 		transactionNode.appendChild(dateUser);
 		
 		Element amount = doc.createElement("TRNAMT");
@@ -407,7 +407,7 @@ public Element toOfx(Document doc, String accountUID){
 		
 		if (mDoubleEntryAccountUID != null && mDoubleEntryAccountUID.length() > 0){
 			Element bankId = doc.createElement("BANKID");
-			bankId.appendChild(doc.createTextNode(OfxFormatter.APP_ID));
+			bankId.appendChild(doc.createTextNode(OfxExporter.APP_ID));
 			
 			//select the proper account as the double account
 			String doubleAccountUID = mDoubleEntryAccountUID.equals(accountUID) ? mAccountUID : mDoubleEntryAccountUID;
diff --git a/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
similarity index 94%
rename from app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
rename to app/src/org/gnucash/android/export/ExportDialogFragment.java
index ae20d279..b1d0add8 100644
--- a/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -1,439 +1,441 @@
-/*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.ui.accounts;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.nio.channels.FileChannel;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
-import android.widget.*;
-import org.gnucash.android.R;
-import org.gnucash.android.export.qif.QifExporter;
-import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
-import org.gnucash.android.util.OfxFormatter;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.ProcessingInstruction;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Environment;
-import android.preference.PreferenceManager;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-/**
- * Dialog fragment for exporting account information as OFX files.
- * @author Ngewi Fet <ngewif@gmail.com>
- */
-public class ExportDialogFragment extends DialogFragment {
-		
-	/**
-	 * Spinner for selecting destination for the exported file.
-	 * The destination could either be SD card, or another application which
-	 * accepts files, like Google Drive.
-	 */
-	Spinner mDestinationSpinner;
-	
-	/**
-	 * Checkbox indicating that all transactions should be exported,
-	 * regardless of whether they have been exported previously or not
-	 */
-	CheckBox mExportAllCheckBox;
-	
-	/**
-	 * Checkbox for deleting all transactions after exporting them
-	 */
-	CheckBox mDeleteAllCheckBox;
-	
-	/**
-	 * Save button for saving the exported files
-	 */
-	Button mSaveButton;
-	
-	/**
-	 * Cancels the export dialog
-	 */
-	Button mCancelButton;
-	
-	/**
-	 * File path for saving the OFX files
-	 */
-	String mFilePath;
-	
-	/**
-	 * Tag for logging
-	 */
-	private static final String TAG = "ExportDialogFragment";
-
-    public enum ExportFormat { QIF, OFX};
-
-    private ExportFormat mExportFormat = ExportFormat.QIF;
-
-	/**
-	 * Click listener for positive button in the dialog.
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 */
-	protected class ExportClickListener implements View.OnClickListener {
-
-		@Override
-		public void onClick(View v) {
-            boolean exportAll = mExportAllCheckBox.isChecked();
-            try {
-                switch (mExportFormat) {
-                    case QIF: {
-                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
-                        String qif = qifExporter.generateQIF();
-
-                        writeQifExternalStorage(qif);
-                    }
-                    break;
-
-                    case OFX: {
-                        Document document = exportOfx(exportAll);
-                        writeOfxToExternalStorage(document);
-                    }
-                    break;
-                }
-            } catch (Exception e) {
-                Log.e(TAG, e.getMessage());
-                Toast.makeText(getActivity(), R.string.error_exporting,
-                        Toast.LENGTH_LONG).show();
-                dismiss();
-                return;
-            }
-
-
-            int position = mDestinationSpinner.getSelectedItemPosition();
-			switch (position) {
-			case 0:					
-				shareFile(mFilePath);				
-				break;
-
-			case 1:				
-				File src = new File(mFilePath);
-				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
-				
-				try {
-					copyFile(src, dst);
-				} catch (IOException e) {
-					Toast.makeText(getActivity(), 
-							getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(), 
-							Toast.LENGTH_LONG).show();		
-					Log.e(TAG, e.getMessage());
-					break;
-				}
-				
-				//file already exists, just let the user know
-				Toast.makeText(getActivity(), 
-						getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(), 
-						Toast.LENGTH_LONG).show();					
-				break;
-				
-			default:
-				break;
-			}
-			
-			if (mDeleteAllCheckBox.isChecked()){
-				Fragment currentFragment = getActivity().getSupportFragmentManager()
-						.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-				TransactionsDeleteConfirmationDialog alertFragment = 
-						TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
-				alertFragment.setTargetFragment(currentFragment, 0);
-				alertFragment.show(getActivity().getSupportFragmentManager(), "transactions_delete_confirmation_dialog");
-			}
-			
-			dismiss();
-		}
-		
-	}
-
-    public void onRadioButtonClicked(View view){
-        switch (view.getId()){
-            case R.id.radio_ofx_format:
-                mExportFormat = ExportFormat.OFX;
-                break;
-            case R.id.radio_qif_format:
-                mExportFormat = ExportFormat.QIF;
-        }
-        mFilePath = buildExportFilename(mExportFormat);
-        return;
-    }
-
-	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
-			Bundle savedInstanceState) {
-		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
-	}
-	
-	@Override
-	public void onActivityCreated(Bundle savedInstanceState) {		
-		super.onActivityCreated(savedInstanceState);
-		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
-		getDialog().setTitle(R.string.menu_export_ofx);
-		bindViews();
-	}
-
-	/**
-	 * Collects references to the UI elements and binds click listeners
-	 */
-	private void bindViews(){		
-		View v = getView();
-		mDestinationSpinner = (Spinner) v.findViewById(R.id.spinner_export_destination);
-		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
-		        R.array.export_destinations, android.R.layout.simple_spinner_item);		
-		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
-		mDestinationSpinner.setAdapter(adapter);
-		
-		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
-		mExportAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_export_all);
-		mExportAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_export_all_transactions), false));
-		
-		mDeleteAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_post_export_delete);
-		mDeleteAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_delete_transactions_after_export), false));
-		
-		mSaveButton = (Button) v.findViewById(R.id.btn_save);
-		mSaveButton.setText(R.string.btn_export);
-		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
-		
-		mCancelButton.setOnClickListener(new View.OnClickListener() {
-			
-			@Override
-			public void onClick(View v) {				
-				dismiss();
-			}
-		});
-		
-		mSaveButton.setOnClickListener(new ExportClickListener());
-
-        String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
-        View.OnClickListener clickListener = new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                onRadioButtonClicked(view);
-            }
-        };
-
-        RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
-        ofxRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name()));
-        ofxRadioButton.setOnClickListener(clickListener);
-
-        RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
-        qifRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name()));
-        qifRadioButton.setOnClickListener(clickListener);
-	}
-
-    private void writeQifExternalStorage(String qif) throws IOException {
-        File file = new File(mFilePath);
-
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        writer.write(qif);
-
-        writer.flush();
-    }
-
-	/**
-	 * Writes the OFX document <code>doc</code> to external storage
-	 * @param doc Document containing OFX file data
-	 * @throws IOException if file could not be saved
-	 */
-	private void writeOfxToExternalStorage(Document doc) throws IOException{
-		File file = new File(mFilePath);
-		
-		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
-				.getBoolean(getString(R.string.key_xml_ofx_header), false);
-
-		//if we want SGML OFX headers, write first to string and then prepend header
-		if (useXmlHeader){
-			write(doc, writer, false);
-		} else {			
-			Node ofxNode = doc.getElementsByTagName("OFX").item(0);
-			StringWriter stringWriter = new StringWriter();
-			write(ofxNode, stringWriter, true);
-			
-			StringBuffer stringBuffer = new StringBuffer(OfxFormatter.OFX_SGML_HEADER);
-			stringBuffer.append('\n');
-			writer.write(stringBuffer.toString() + stringWriter.toString());
-		}
-		
-		writer.flush();
-		writer.close();
-	}
-	
-	/**
-	 * Callback for when the activity chooser dialog is completed
-	 */
-	@Override
-	public void onActivityResult(int requestCode, int resultCode, Intent data) {
-		//TODO: fix the exception which is thrown on return
-		if (resultCode == Activity.RESULT_OK){
-			//uploading or emailing has finished. clean up now.
-			File file = new File(mFilePath);
-			file.delete();
-		}
-	}
-	
-	/**
-	 * Starts an intent chooser to allow the user to select an activity to receive
-	 * the exported OFX file
-	 * @param path String path to the file on disk
-	 */
-	private void shareFile(String path){
-		String defaultEmail = PreferenceManager.getDefaultSharedPreferences(getActivity())
-												.getString(getString(R.string.key_default_export_email), null);
-		Intent shareIntent = new Intent(Intent.ACTION_SEND);
-		shareIntent.setType("application/xml");
-		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
-		shareIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.title_export_email));
-		if (defaultEmail != null && defaultEmail.trim().length() > 0){
-			shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
-		}			
-		SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
-		
-		shareIntent.putExtra(Intent.EXTRA_TEXT, getString(R.string.description_export_email) 
-							+ " " + formatter.format(new Date(System.currentTimeMillis())));
-		startActivity(Intent.createChooser(shareIntent, getString(R.string.title_share_ofx_with)));	
-	}
-	
-	/**
-	 * Copies a file from <code>src</code> to <code>dst</code>
-	 * @param src Absolute path to the source file
-	 * @param dst Absolute path to the destination file 
-	 * @throws IOException if the file could not be copied
-	 */
-	public static void copyFile(File src, File dst) throws IOException
-	{
-		//TODO: Make this asynchronous at some time, t in the future.
-	    FileChannel inChannel = new FileInputStream(src).getChannel();
-	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
-	    try
-	    {
-	        inChannel.transferTo(0, inChannel.size(), outChannel);
-	    }
-	    finally
-	    {
-	        if (inChannel != null)
-	            inChannel.close();
-	        if (outChannel != null)
-	            outChannel.close();
-	    }
-	}
-	
-	/**
-	 * Builds a file name based on the current time stamp for the exported file
-	 * @return String containing the file name
-	 */
-	public static String buildExportFilename(ExportFormat format){
-		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
-		String filename = formatter.format(
-				new Date(System.currentTimeMillis())) 
-				+ "_gnucash_all";
-        switch (format) {
-            case QIF:
-                filename += ".qif";
-                break;
-            case OFX:
-                filename += ".ofx";
-                break;
-        }
-		return filename;
-	}
-	
-	/**
-	 * Exports transactions in the database to the OFX format.
-	 * The accounts are written to a DOM document and returned
-	 * @param exportAll Flag to export all transactions or only the new ones since last export
-	 * @return DOM {@link Document} containing the OFX file information
-	 * @throws ParserConfigurationException
-	 */
-	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
-		DocumentBuilderFactory docFactory = DocumentBuilderFactory
-				.newInstance();
-		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
-
-		Document document = docBuilder.newDocument();
-		Element root = document.createElement("OFX");
-		
-		ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxFormatter.OFX_HEADER);
-		document.appendChild(pi);		
-		document.appendChild(root);
-		
-		OfxFormatter exporter = new OfxFormatter(getActivity(), exportAll);
-		exporter.toOfx(document, root);
-		
-		return document;
-	}
-	
-	/**
-	 * Writes out the document held in <code>node</code> to <code>outputWriter</code>
-	 * @param node {@link Node} containing the OFX document structure. Usually the parent node
-	 * @param outputWriter {@link Writer} to use in writing the file to stream
-     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
-	 */
-	public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
-		try {
-			TransformerFactory transformerFactory = TransformerFactory
-					.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			DOMSource source = new DOMSource(node);
-			StreamResult result = new StreamResult(outputWriter);
-			
-			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-			if (omitXmlDeclaration) {
-				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
-			}
-			
-			transformer.transform(source, result);
-		} catch (TransformerConfigurationException txconfigException) {
-			txconfigException.printStackTrace();
-		} catch (TransformerException tfException) {
-			tfException.printStackTrace();
-		}
-	}
-}
-
+/*
+ * Copyright (c) 2012-2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.nio.channels.FileChannel;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import android.widget.*;
+import org.gnucash.android.R;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.export.ofx.OfxExporter;
+import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Environment;
+import android.preference.PreferenceManager;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+/**
+ * Dialog fragment for exporting account information as OFX files.
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class ExportDialogFragment extends DialogFragment {
+		
+	/**
+	 * Spinner for selecting destination for the exported file.
+	 * The destination could either be SD card, or another application which
+	 * accepts files, like Google Drive.
+	 */
+	Spinner mDestinationSpinner;
+	
+	/**
+	 * Checkbox indicating that all transactions should be exported,
+	 * regardless of whether they have been exported previously or not
+	 */
+	CheckBox mExportAllCheckBox;
+	
+	/**
+	 * Checkbox for deleting all transactions after exporting them
+	 */
+	CheckBox mDeleteAllCheckBox;
+	
+	/**
+	 * Save button for saving the exported files
+	 */
+	Button mSaveButton;
+	
+	/**
+	 * Cancels the export dialog
+	 */
+	Button mCancelButton;
+	
+	/**
+	 * File path for saving the OFX files
+	 */
+	String mFilePath;
+	
+	/**
+	 * Tag for logging
+	 */
+	private static final String TAG = "ExportDialogFragment";
+
+    ;
+
+    private ExportFormat mExportFormat = ExportFormat.QIF;
+
+	/**
+	 * Click listener for positive button in the dialog.
+	 * @author Ngewi Fet <ngewif@gmail.com>
+	 */
+	protected class ExportClickListener implements View.OnClickListener {
+
+		@Override
+		public void onClick(View v) {
+            boolean exportAll = mExportAllCheckBox.isChecked();
+            try {
+                switch (mExportFormat) {
+                    case QIF: {
+                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
+                        String qif = qifExporter.generateQIF();
+
+                        writeQifExternalStorage(qif);
+                    }
+                    break;
+
+                    case OFX: {
+                        Document document = exportOfx(exportAll);
+                        writeOfxToExternalStorage(document);
+                    }
+                    break;
+                }
+            } catch (Exception e) {
+                Log.e(TAG, e.getMessage());
+                Toast.makeText(getActivity(), R.string.error_exporting,
+                        Toast.LENGTH_LONG).show();
+                dismiss();
+                return;
+            }
+
+
+            int position = mDestinationSpinner.getSelectedItemPosition();
+			switch (position) {
+			case 0:					
+				shareFile(mFilePath);				
+				break;
+
+			case 1:				
+				File src = new File(mFilePath);
+				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
+				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
+				
+				try {
+					copyFile(src, dst);
+				} catch (IOException e) {
+					Toast.makeText(getActivity(), 
+							getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(), 
+							Toast.LENGTH_LONG).show();		
+					Log.e(TAG, e.getMessage());
+					break;
+				}
+				
+				//file already exists, just let the user know
+				Toast.makeText(getActivity(), 
+						getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(), 
+						Toast.LENGTH_LONG).show();					
+				break;
+				
+			default:
+				break;
+			}
+			
+			if (mDeleteAllCheckBox.isChecked()){
+				Fragment currentFragment = getActivity().getSupportFragmentManager()
+						.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+				TransactionsDeleteConfirmationDialog alertFragment = 
+						TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
+				alertFragment.setTargetFragment(currentFragment, 0);
+				alertFragment.show(getActivity().getSupportFragmentManager(), "transactions_delete_confirmation_dialog");
+			}
+			
+			dismiss();
+		}
+		
+	}
+
+    public void onRadioButtonClicked(View view){
+        switch (view.getId()){
+            case R.id.radio_ofx_format:
+                mExportFormat = ExportFormat.OFX;
+                break;
+            case R.id.radio_qif_format:
+                mExportFormat = ExportFormat.QIF;
+        }
+        mFilePath = buildExportFilename(mExportFormat);
+        return;
+    }
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
+	}
+	
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {		
+		super.onActivityCreated(savedInstanceState);
+		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
+		getDialog().setTitle(R.string.menu_export_ofx);
+		bindViews();
+	}
+
+	/**
+	 * Collects references to the UI elements and binds click listeners
+	 */
+	private void bindViews(){		
+		View v = getView();
+		mDestinationSpinner = (Spinner) v.findViewById(R.id.spinner_export_destination);
+		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
+		        R.array.export_destinations, android.R.layout.simple_spinner_item);		
+		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
+		mDestinationSpinner.setAdapter(adapter);
+		
+		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		mExportAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_export_all);
+		mExportAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_export_all_transactions), false));
+		
+		mDeleteAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_post_export_delete);
+		mDeleteAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_delete_transactions_after_export), false));
+		
+		mSaveButton = (Button) v.findViewById(R.id.btn_save);
+		mSaveButton.setText(R.string.btn_export);
+		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
+		
+		mCancelButton.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {				
+				dismiss();
+			}
+		});
+		
+		mSaveButton.setOnClickListener(new ExportClickListener());
+
+        String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
+        View.OnClickListener clickListener = new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                onRadioButtonClicked(view);
+            }
+        };
+
+        RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
+        ofxRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name()));
+        ofxRadioButton.setOnClickListener(clickListener);
+
+        RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
+        qifRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name()));
+        qifRadioButton.setOnClickListener(clickListener);
+	}
+
+    private void writeQifExternalStorage(String qif) throws IOException {
+        File file = new File(mFilePath);
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        writer.write(qif);
+
+        writer.flush();
+    }
+
+	/**
+	 * Writes the OFX document <code>doc</code> to external storage
+	 * @param doc Document containing OFX file data
+	 * @throws IOException if file could not be saved
+	 */
+	private void writeOfxToExternalStorage(Document doc) throws IOException{
+		File file = new File(mFilePath);
+		
+		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
+				.getBoolean(getString(R.string.key_xml_ofx_header), false);
+
+		//if we want SGML OFX headers, write first to string and then prepend header
+		if (useXmlHeader){
+			write(doc, writer, false);
+		} else {			
+			Node ofxNode = doc.getElementsByTagName("OFX").item(0);
+			StringWriter stringWriter = new StringWriter();
+			write(ofxNode, stringWriter, true);
+			
+			StringBuffer stringBuffer = new StringBuffer(OfxExporter.OFX_SGML_HEADER);
+			stringBuffer.append('\n');
+			writer.write(stringBuffer.toString() + stringWriter.toString());
+		}
+		
+		writer.flush();
+		writer.close();
+	}
+	
+	/**
+	 * Callback for when the activity chooser dialog is completed
+	 */
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		//TODO: fix the exception which is thrown on return
+		if (resultCode == Activity.RESULT_OK){
+			//uploading or emailing has finished. clean up now.
+			File file = new File(mFilePath);
+			file.delete();
+		}
+	}
+	
+	/**
+	 * Starts an intent chooser to allow the user to select an activity to receive
+	 * the exported OFX file
+	 * @param path String path to the file on disk
+	 */
+	private void shareFile(String path){
+		String defaultEmail = PreferenceManager.getDefaultSharedPreferences(getActivity())
+												.getString(getString(R.string.key_default_export_email), null);
+		Intent shareIntent = new Intent(Intent.ACTION_SEND);
+		shareIntent.setType("application/xml");
+		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
+		shareIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.title_export_email));
+		if (defaultEmail != null && defaultEmail.trim().length() > 0){
+			shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
+		}			
+		SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
+		
+		shareIntent.putExtra(Intent.EXTRA_TEXT, getString(R.string.description_export_email) 
+							+ " " + formatter.format(new Date(System.currentTimeMillis())));
+		startActivity(Intent.createChooser(shareIntent, getString(R.string.title_share_ofx_with)));	
+	}
+	
+	/**
+	 * Copies a file from <code>src</code> to <code>dst</code>
+	 * @param src Absolute path to the source file
+	 * @param dst Absolute path to the destination file 
+	 * @throws IOException if the file could not be copied
+	 */
+	public static void copyFile(File src, File dst) throws IOException
+	{
+		//TODO: Make this asynchronous at some time, t in the future.
+	    FileChannel inChannel = new FileInputStream(src).getChannel();
+	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
+	    try
+	    {
+	        inChannel.transferTo(0, inChannel.size(), outChannel);
+	    }
+	    finally
+	    {
+	        if (inChannel != null)
+	            inChannel.close();
+	        if (outChannel != null)
+	            outChannel.close();
+	    }
+	}
+	
+	/**
+	 * Builds a file name based on the current time stamp for the exported file
+	 * @return String containing the file name
+	 */
+	public static String buildExportFilename(ExportFormat format){
+		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
+		String filename = formatter.format(
+				new Date(System.currentTimeMillis())) 
+				+ "_gnucash_all";
+        switch (format) {
+            case QIF:
+                filename += ".qif";
+                break;
+            case OFX:
+                filename += ".ofx";
+                break;
+        }
+		return filename;
+	}
+	
+	/**
+	 * Exports transactions in the database to the OFX format.
+	 * The accounts are written to a DOM document and returned
+	 * @param exportAll Flag to export all transactions or only the new ones since last export
+	 * @return DOM {@link Document} containing the OFX file information
+	 * @throws ParserConfigurationException
+	 */
+	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
+		DocumentBuilderFactory docFactory = DocumentBuilderFactory
+				.newInstance();
+		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+
+		Document document = docBuilder.newDocument();
+		Element root = document.createElement("OFX");
+		
+		ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxExporter.OFX_HEADER);
+		document.appendChild(pi);		
+		document.appendChild(root);
+		
+		OfxExporter exporter = new OfxExporter(getActivity(), exportAll);
+		exporter.toOfx(document, root);
+		
+		return document;
+	}
+	
+	/**
+	 * Writes out the document held in <code>node</code> to <code>outputWriter</code>
+	 * @param node {@link Node} containing the OFX document structure. Usually the parent node
+	 * @param outputWriter {@link Writer} to use in writing the file to stream
+     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
+	 */
+	public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
+		try {
+			TransformerFactory transformerFactory = TransformerFactory
+					.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			DOMSource source = new DOMSource(node);
+			StreamResult result = new StreamResult(outputWriter);
+			
+			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+			if (omitXmlDeclaration) {
+				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+			}
+			
+			transformer.transform(source, result);
+		} catch (TransformerConfigurationException txconfigException) {
+			txconfigException.printStackTrace();
+		} catch (TransformerException tfException) {
+			tfException.printStackTrace();
+		}
+	}
+}
+
diff --git a/app/src/org/gnucash/android/export/ExportFormat.java b/app/src/org/gnucash/android/export/ExportFormat.java
new file mode 100644
index 00000000..6000ebd1
--- /dev/null
+++ b/app/src/org/gnucash/android/export/ExportFormat.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.export;
+
+/**
+ * Enumeration of the different export formats supported by the application
+* @author Ngewi Fet <ngewif@gmail.com>
+*/
+public enum ExportFormat {
+    QIF("Quicken Interchange Format"),
+    OFX("Open Financial eXchange");
+
+    /**
+     * Full name of the export format acronym
+     */
+    private String mDescription;
+
+    ExportFormat(String description) {
+        this.mDescription = description;
+    }
+
+    @Override
+    public String toString() {
+        return mDescription;
+    }
+}
diff --git a/app/src/org/gnucash/android/util/OfxFormatter.java b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
similarity index 97%
rename from app/src/org/gnucash/android/util/OfxFormatter.java
rename to app/src/org/gnucash/android/export/ofx/OfxExporter.java
index 21c609ec..5578670e 100644
--- a/app/src/org/gnucash/android/util/OfxFormatter.java
+++ b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.gnucash.android.util;
+package org.gnucash.android.export.ofx;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -36,7 +36,7 @@
  * Exports the data in the database in OFX format
  * @author Ngewi Fet <ngewi.fet@gmail.com>
  */
-public class OfxFormatter {
+public class OfxExporter {
 
 	/**
 	 * A date formatter used when creating file names for the exported data
@@ -85,7 +85,7 @@
 	 * @param context Application context
 	 * @param exportAll Whether all transactions should be exported or only new ones since last export
 	 */
-	public OfxFormatter(Context context, boolean exportAll) {
+	public OfxExporter(Context context, boolean exportAll) {
 		AccountsDbAdapter dbAdapter = new AccountsDbAdapter(context);
 		mAccountsList = exportAll ? dbAdapter.getAllAccounts() : dbAdapter.getExportableAccounts();
 		mExportAll = exportAll;
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index e174ee6b..3d9bea58 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -40,7 +40,6 @@
 import android.view.ViewGroup;
 import android.widget.*;
 import android.widget.AdapterView.OnItemLongClickListener;
-import android.widget.SearchView;
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import com.actionbarsherlock.app.SherlockListFragment;
@@ -49,11 +48,11 @@
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
-import com.actionbarsherlock.widget.*;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.db.*;
+import org.gnucash.android.export.ExportDialogFragment;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
@@ -61,7 +60,6 @@
 import org.gnucash.android.util.OnAccountClickedListener;
 
 import java.lang.ref.WeakReference;
-import java.util.Locale;
 
 /**
  * Fragment for displaying the list of accounts in the database
diff --git a/integration-tests/src/org/gnucash/android/test/ui/OfxExportTest.java b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
similarity index 71%
rename from integration-tests/src/org/gnucash/android/test/ui/OfxExportTest.java
rename to integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 5faa880a..552ac322 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/OfxExportTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -1,204 +1,237 @@
-/*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.test.ui;
-
-import java.io.File;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.test.util.ActionBarUtils;
-import org.gnucash.android.ui.accounts.AccountsActivity;
-import org.gnucash.android.ui.accounts.ExportDialogFragment;
-
-import android.os.Environment;
-import android.test.ActivityInstrumentationTestCase2;
-import android.widget.Button;
-import android.widget.Spinner;
-
-import com.jayway.android.robotium.solo.Solo;
-
-public class OfxExportTest extends
-		ActivityInstrumentationTestCase2<AccountsActivity> {
-
-	private Solo mSolo;
-	
-	public OfxExportTest() {
-		super(AccountsActivity.class);
-	}
-	
-	@Override
-	protected void setUp() throws Exception {
-		super.setUp();
-		mSolo = new Solo(getInstrumentation(), getActivity());	
-		
-		Account account = new Account("Exportable");		
-		Transaction transaction = new Transaction("9.99", "Pizza");		
-		transaction.setDescription("What up?");
-		transaction.setTime(System.currentTimeMillis());
-		
-		account.addTransaction(transaction);
-		
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.addAccount(account);
-		adapter.close();	
-	}
-	
-	/**
-	 * Tests the export of an OFX file with account information.
-	 * The exported file name contains a timestamp with minute precision.
-	 * If this test fails, it may be due to the file being created and tested in different minutes of the clock
-	 * Just try rerunning it again.
-	 */
-	public void testOfxExport(){
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		mSolo.clickOnButton(3);
-		
-		//the file name is time-based (down to the minute), so we cache it here, 
-		//as close as possible to the export itself to minimize difference
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		mSolo.waitForDialogToClose(10000);
-		
-		
-		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
-		assertNotNull(file);
-		assertTrue(file.exists());
-		
-		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
-		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);
-	}	
-	
-	public void testDeleteTransactionsAfterExport(){
-		TransactionsDbAdapter transAdapter = new TransactionsDbAdapter(getActivity());
-		assertTrue(transAdapter.getAllTransactionsCount() != 0);
-		
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		
-		//check to delete after export
-		mSolo.clickOnCheckBox(1);
-		
-		Button b = (Button) mSolo.getView(R.id.btn_save); //getActivity().findViewById(R.id.btn_save);
-		mSolo.clickOnView(b);
-		mSolo.waitForDialogToClose(2000);
-
-        String deleteConfirm = getActivity().getString(R.string.alert_dialog_ok_delete);
-        mSolo.clickOnText(deleteConfirm);
-		mSolo.waitForDialogToClose(1000);
-        mSolo.sleep(1000);
-
-		assertEquals(0, transAdapter.getAllTransactionsCount());
-		
-		transAdapter.close();
-        mSolo.goBack();
-	}
-	
-	public void testShouldIgnoreExportedTransactions(){
-		testOfxExport();
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		mSolo.clickOnCheckBox(0);
-		mSolo.clickOnButton(3);
-		
-		//the file name is time-based (down to the minute), so we cache it here, 
-		//as close as possible to the export itself to minimize chance of a different name 
-		//due to a different minute
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		mSolo.waitForDialogToClose(10000);
-				
-		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
-		assertNotNull(file);
-		assertTrue(file.exists());
-		//there should be something in the file (OFX headers, etc)
-		assertTrue(file.length() > 0);
-		
-		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
-		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);		
-	}
-	
-	public void testExportAlreadyExportedTransactions(){
-		testOfxExport();
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		mSolo.clickOnCheckBox(0);
-		mSolo.clickOnButton(3);
-		
-		//the file name is time-based (down to the minute), so we cache it here, 
-		//as close as possible to the export itself to minimize chance of a different name 
-		//due to a different minute
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		mSolo.waitForDialogToClose(10000);		
-		
-		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
-		assertNotNull(file);
-		//the file will exist but not contain any account information
-		assertTrue(file.exists());
-
-		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
-		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);		
-	}
-	
-	public void testValidityOfExport(){
-		//TODO: Validate exported file contents with an XML schema, if possible
-	}
-	
-	@Override
-	protected void tearDown() throws Exception {
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.deleteAllRecords();
-		adapter.close();
-		mSolo.finishOpenedActivities();
-		super.tearDown();
-	}
-}
+/*
+ * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.test.ui;
+
+import java.io.File;
+
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Transaction;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.export.ExportDialogFragment;
+
+import android.os.Environment;
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.Button;
+import android.widget.Spinner;
+
+import com.jayway.android.robotium.solo.Solo;
+
+public class ExportTransactionsTest extends
+		ActivityInstrumentationTestCase2<AccountsActivity> {
+
+	private Solo mSolo;
+	
+	public ExportTransactionsTest() {
+		super(AccountsActivity.class);
+	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp();
+		mSolo = new Solo(getInstrumentation(), getActivity());	
+		
+		Account account = new Account("Exportable");		
+		Transaction transaction = new Transaction("9.99", "Pizza");		
+		transaction.setDescription("What up?");
+		transaction.setTime(System.currentTimeMillis());
+		
+		account.addTransaction(transaction);
+		
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.addAccount(account);
+		adapter.close();	
+	}
+	
+	/**
+	 * Tests the export of an OFX file with the transactions from the application.
+	 * The exported file name contains a timestamp with minute precision.
+	 * If this test fails, it may be due to the file being created and tested in different minutes of the clock
+	 * Just try rerunning it again.
+	 */
+	public void testOfxExport(){
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+		
+		//the file name is time-based (down to the minute), so we cache it here, 
+		//as close as possible to the export itself to minimize difference
+		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		
+		mSolo.waitForDialogToClose(2000);
+        mSolo.sleep(2000);
+		
+		
+		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+		assertNotNull(file);
+		assertTrue(file.exists());
+		
+		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
+		boolean isDeleted = file.delete();
+		assertTrue(isDeleted);
+	}
+
+    /**
+     * Test the export of transactions in the QIF format
+     */
+    public void testQifExport(){
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+        mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+        Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+        mSolo.clickOnView(spinner);
+        String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);
+        mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(0);
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+
+        //the file name is time-based (down to the minute), so we cache it here,
+        //as close as possible to the export itself to minimize difference
+        String filename = ExportDialogFragment.buildExportFilename(ExportFormat.QIF);
+
+        mSolo.waitForDialogToClose(10000);
+
+        File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+        assertNotNull(file);
+        assertTrue(file.exists());
+
+        //if this is not deleted, we cannot be certain that the next test will pass on its own merits
+        boolean isDeleted = file.delete();
+        assertTrue(isDeleted);
+    }
+
+	public void testDeleteTransactionsAfterExport(){
+		TransactionsDbAdapter transAdapter = new TransactionsDbAdapter(getActivity());
+		assertTrue(transAdapter.getAllTransactionsCount() != 0);
+		
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+		//check to delete after export
+		mSolo.clickOnCheckBox(1);
+
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+		mSolo.waitForDialogToClose(2000);
+
+        String deleteConfirm = getActivity().getString(R.string.alert_dialog_ok_delete);
+        mSolo.clickOnText(deleteConfirm);
+		mSolo.waitForDialogToClose(1000);
+        mSolo.sleep(1000);
+
+		assertEquals(0, transAdapter.getAllTransactionsCount());
+		
+		transAdapter.close();
+        mSolo.goBack();
+	}
+	
+	public void testShouldIgnoreExportedTransactions(){
+		testOfxExport();
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+		mSolo.clickOnCheckBox(0);
+		mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+
+		//the file name is time-based (down to the minute), so we cache it here, 
+		//as close as possible to the export itself to minimize chance of a different name 
+		//due to a different minute
+		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		
+		mSolo.waitForDialogToClose(10000);
+				
+		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+		assertNotNull(file);
+		assertTrue(file.exists());
+		//there should be something in the file (OFX headers, etc)
+		assertTrue(file.length() > 0);
+		
+		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
+		boolean isDeleted = file.delete();
+		assertTrue(isDeleted);		
+	}
+	
+	public void testExportAlreadyExportedTransactions(){
+		testOfxExport();
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+		mSolo.clickOnCheckBox(0);
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+		
+		//the file name is time-based (down to the minute), so we cache it here, 
+		//as close as possible to the export itself to minimize chance of a different name 
+		//due to a different minute
+		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		
+		mSolo.waitForDialogToClose(10000);		
+		
+		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+		assertNotNull(file);
+		//the file will exist but not contain any account information
+		assertTrue(file.exists());
+
+		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
+		boolean isDeleted = file.delete();
+		assertTrue(isDeleted);		
+	}
+	
+	public void testValidityOfExport(){
+		//TODO: Validate exported file contents with an XML schema, if possible
+	}
+	
+	@Override
+	protected void tearDown() throws Exception {
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.deleteAllRecords();
+		adapter.close();
+		mSolo.finishOpenedActivities();
+		super.tearDown();
+	}
+}

From 0e9014e34bdde233af735f1ba0b39036d04c16bd Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 9 Oct 2013 21:55:08 +0200
Subject: [PATCH 3/8] Updated versions for 1.2.6.beta release

---
 CHANGELOG.md            | 4 ++++
 app/AndroidManifest.xml | 4 ++--
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3a1b3a31..ff0a3c62 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 Change Log
 ===============================================================================
+Version 1.2.6 *(2013-xx-xx)*
+----------------------------
+* Feature: Support for QIF export format
+
 Version 1.2.5 *(2013-09-17)*
 ----------------------------
 * Feature: Search accounts by name
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index b3e5714d..1daf6a06 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,8 +17,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="16"
-    android:versionName="1.2.5" >
+    android:versionCode="17"
+    android:versionName="1.2.6.beta" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
     

From 087e44928aa1cfd12157a28b71db0cf9ba3057d1 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 28 Oct 2013 21:54:02 +0100
Subject: [PATCH 4/8] Fixed export of OFX format Updated versions for
 1.2.6.beta2 release

---
 app/AndroidManifest.xml                                      | 4 ++--
 app/src/org/gnucash/android/export/ExportDialogFragment.java | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 1daf6a06..f2cae059 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,8 +17,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="17"
-    android:versionName="1.2.6.beta" >
+    android:versionCode="18"
+    android:versionName="1.2.6.beta2" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
     
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index b1d0add8..b68cd427 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -201,7 +201,7 @@ public void onRadioButtonClicked(View view){
             case R.id.radio_qif_format:
                 mExportFormat = ExportFormat.QIF;
         }
-        mFilePath = buildExportFilename(mExportFormat);
+        mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
         return;
     }
 

From dbce36f00b708516d022dfb73167baa3d6c35e0e Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 2 Nov 2013 17:32:16 +0100
Subject: [PATCH 5/8] Updated credit/debit handling to match Gnucash desktop -
 fixes #78 Now credit transactions decrease balance in Assets and Expenses
 accounts while debits increase the balance

---
 app/src/org/gnucash/android/data/Account.java      | 24 ++++++++-
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 13 ++++-
 .../ui/transactions/NewTransactionFragment.java    | 63 +++++++++++++++++++---
 .../ui/transactions/TransactionsActivity.java      |  1 +
 4 files changed, 89 insertions(+), 12 deletions(-)

diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index d6304d81..31e29397 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -54,8 +54,28 @@
 	 * This are the different types specified by the OFX format and 
 	 * they are currently not used except for exporting
 	 */
-	public enum AccountType {CASH, BANK, CREDIT, ASSET, LIABILITY, INCOME, EXPENSE,
-							PAYABLE, RECEIVABLE, EQUITY, CURRENCY, STOCK, MUTUAL, ROOT};
+	public enum AccountType {
+        CASH, BANK, CREDIT, ASSET(true), LIABILITY, INCOME, EXPENSE(true),
+        PAYABLE, RECEIVABLE, EQUITY, CURRENCY, STOCK, MUTUAL, ROOT;
+
+        /**
+         * Indicates that this type of account has an inverted state for credits and debits.
+         * Credits decrease the account balance, while debits increase it.
+         */
+        private boolean mInvertedCredit = false;
+
+        private AccountType(boolean invertedCredit){
+            mInvertedCredit = invertedCredit;
+        }
+
+        private AccountType() {
+            //nothing to see here, move along
+        }
+
+        public boolean hasInvertedCredit(){
+            return mInvertedCredit;
+        }
+    };
 
     /**
      * Accounts types which are used by the OFX standard
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index e9889c1c..463956c7 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -285,8 +285,17 @@ public AccountType getAccountType(String uid){
 		}
 		return AccountType.valueOf(type);
 	}
-	
-	/**
+
+    /**
+     * Overloaded method. Resolves the account unique ID from the row ID and makes a call to {@link #getAccountType(String)}
+     * @param accountId Database row ID of the account
+     * @return {@link AccountType} of the account
+     */
+    public AccountType getAccountType(long accountId){
+        return getAccountType(getAccountUID(accountId));
+    }
+
+    /**
 	 * Returns the name of the account with id <code>accountID</code>
 	 * @param accountID Database ID of the account record
 	 * @return Name of the account 
diff --git a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index d233451f..d9bb5d40 100644
--- a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -26,6 +26,7 @@
 
 import android.widget.*;
 import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.data.Transaction;
 import org.gnucash.android.data.Transaction.TransactionType;
@@ -173,6 +174,12 @@
      */
     boolean mAmountManuallyEdited = false;
 
+    /**
+     * The AccountType of the account to which this transaction belongs.
+     * Used for determining the accounting rules for credits and debits
+     */
+    Account.AccountType mAccountType;
+
 	/**
 	 * Create the view and retrieve references to the UI elements
 	 */
@@ -215,8 +222,12 @@ public void onActivityCreated(Bundle savedInstanceState) {
         long transactionId = getArguments().getLong(SELECTED_TRANSACTION_ID);
 		mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
 		mTransaction = mTransactionsDbAdapter.getTransaction(transactionId);
-		
-		setListeners();
+
+        final long accountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
+        mAccountType = mAccountsDbAdapter.getAccountType(accountId);
+        toggleTransactionTypeState();
+
+        setListeners();
 		if (mTransaction == null)
 			initalizeViews();
 		else {
@@ -229,6 +240,22 @@ public void onActivityCreated(Bundle savedInstanceState) {
         initTransactionNameAutocomplete();
 	}
 
+    private void toggleTransactionTypeState() {
+        switch (mAccountType) {
+            case ASSET:
+            case EXPENSE:
+                mTransactionTypeButton.setTextOff(getString(R.string.label_debit));
+                mTransactionTypeButton.setTextOn(getString(R.string.label_credit));
+                break;
+
+            default:
+                mTransactionTypeButton.setTextOff(getString(R.string.label_credit));
+                mTransactionTypeButton.setTextOn(getString(R.string.label_debit));
+                break;
+        }
+        mTransactionTypeButton.invalidate();
+    }
+
     /**
      * Initializes the transaction name field for autocompletion with existing transaction names in the database
      */
@@ -276,7 +303,6 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
 	 * This method is called if the fragment is used for editing a transaction
 	 */
 	private void initializeViewsWithTransaction(){
-				
 		mNameEditText.setText(mTransaction.getName());
 		mTransactionTypeButton.setChecked(mTransaction.getTransactionType() == TransactionType.DEBIT);
 		if (!mAmountManuallyEdited){
@@ -315,11 +341,19 @@ private void initalizeViews() {
 		mDateTextView.setText(DATE_FORMATTER.format(time));
 		mTimeTextView.setText(TIME_FORMATTER.format(time));
 		mTime = mDate = Calendar.getInstance();
-				
+
 		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
 		if (typePref.equals("CREDIT")){
-			mTransactionTypeButton.setChecked(false);
-		}
+            if (mAccountType == Account.AccountType.ASSET || mAccountType == Account.AccountType.EXPENSE)
+                mTransactionTypeButton.setChecked(false);
+            else
+                mTransactionTypeButton.setChecked(true);
+		} else {
+            if (mAccountType == Account.AccountType.ASSET || mAccountType == Account.AccountType.EXPENSE)
+                mTransactionTypeButton.setChecked(true);
+            else
+                mTransactionTypeButton.setChecked(false);
+        }
 				
 		final long accountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
 		String code = Money.DEFAULT_CURRENCY_CODE;
@@ -455,7 +489,16 @@ public void onAccountChanged(long newAccountId){
 		String currencyCode = accountsDbAdapter.getCurrencyCode(newAccountId);
 		Currency currency = Currency.getInstance(currencyCode);
 		mCurrencyTextView.setText(currency.getSymbol(Locale.getDefault()));
-		
+
+        Account.AccountType previousAccountType = mAccountType;
+        mAccountType = accountsDbAdapter.getAccountType(newAccountId);
+        toggleTransactionTypeState();
+
+        //if the new account has a different credit/debit philosophy as the previous one, then toggle the button
+        if (mAccountType.hasInvertedCredit() != previousAccountType.hasInvertedCredit()){
+            mTransactionTypeButton.toggle();
+        }
+
 		updateTransferAccountsList();
 	}
 	
@@ -478,7 +521,11 @@ private void saveNewTransaction() {
 		long accountID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountID(); 		
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getCurrencyCode(accountID));
 		Money amount 	= new Money(amountBigd, currency);
-		TransactionType type = mTransactionTypeButton.isChecked() ? TransactionType.DEBIT : TransactionType.CREDIT;
+		TransactionType type;
+        if (mAccountType.hasInvertedCredit()){
+            type = amount.isNegative() ? TransactionType.CREDIT : TransactionType.DEBIT;
+        } else
+            type = amount.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
 		if (mTransaction != null){
 			mTransaction.setAmount(amount);
 			mTransaction.setName(name);
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index 0bea0c51..b1da8522 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -170,6 +170,7 @@ protected void onCreate(Bundle savedInstanceState) {
             if (transactionId > 0) {
                 mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
                 args.putLong(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
+                args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
             } else {
                 mSectionHeaderTransactions.setText(R.string.title_add_transaction);
                 args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);

From 8637060e54faf6daddebbb78235467f06dceae15 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sun, 3 Nov 2013 19:42:55 +0100
Subject: [PATCH 6/8] Updated version information for 1.2.6.beta3 release

---
 CHANGELOG.md            | 1 +
 app/AndroidManifest.xml | 4 ++--
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index ff0a3c62..394154e1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,7 @@ Change Log
 Version 1.2.6 *(2013-xx-xx)*
 ----------------------------
 * Feature: Support for QIF export format
+* Improved: CREDIT/DEBIT meaning now matches GnuCash desktop. Effect on account balance depends on type of account
 
 Version 1.2.5 *(2013-09-17)*
 ----------------------------
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index f2cae059..11c074f4 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,8 +17,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="18"
-    android:versionName="1.2.6.beta2" >
+    android:versionCode="19"
+    android:versionName="1.2.6.beta3" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
     

From 48079910def5e46e6cbaf5686a69e94f89311ba5 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 5 Dec 2013 12:53:11 +0100
Subject: [PATCH 7/8] Fixed string title of export dialog Fixed: split
 transaction inversion in QIF exports

---
 CHANGELOG.md                                                 | 2 +-
 app/AndroidManifest.xml                                      | 4 ++--
 app/res/values-de/strings.xml                                | 2 +-
 app/res/values-el/strings.xml                                | 2 +-
 app/res/values-es-rMX/strings.xml                            | 2 +-
 app/res/values-es/strings.xml                                | 2 +-
 app/res/values-fr/strings.xml                                | 2 +-
 app/res/values-hu/strings.xml                                | 2 +-
 app/res/values-it/strings.xml                                | 2 +-
 app/res/values-nb/strings.xml                                | 2 +-
 app/res/values-pt-rBR/strings.xml                            | 2 +-
 app/res/values-ru/strings.xml                                | 2 +-
 app/res/values-zh/strings.xml                                | 2 +-
 app/res/values/strings.xml                                   | 2 +-
 app/src/org/gnucash/android/data/Transaction.java            | 2 +-
 app/src/org/gnucash/android/export/ExportDialogFragment.java | 2 +-
 16 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 394154e1..99a5c2a5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,6 @@
 Change Log
 ===============================================================================
-Version 1.2.6 *(2013-xx-xx)*
+Version 1.2.6 *(2013-12-06)*
 ----------------------------
 * Feature: Support for QIF export format
 * Improved: CREDIT/DEBIT meaning now matches GnuCash desktop. Effect on account balance depends on type of account
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 11c074f4..fa43fb54 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,8 +17,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="19"
-    android:versionName="1.2.6.beta3" >
+    android:versionCode="20"
+    android:versionName="1.2.6" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
     
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index c8e3562a..eda08890 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -49,7 +49,7 @@
     <string name="title_selected">%1$d ausgew&#228;hlt</string>
     <string name="label_transactions_total">Summe:</string>
     <string name="label_export_destination">Exportziel</string>
-    <string name="title_export_dialog">Export OFX</string>
+    <string name="title_export_dialog">Buchungen Exportieren</string>
     <string name="option_export_all_transactions">Alle Buchungen exportieren</string>
     <string name="hint_export_choice">Auswhlen, um alle Buchungen zu exportieren. Andernfalls werden nur die neuen Buchungen seit letztem Export exportiert.</string>
     <string name="error_exporting">Fehler beim Exportieren der OFX-Datei</string>    
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index ac793865..ffb01bb3 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -50,7 +50,7 @@
     <string name="title_selected">%1$d </string>
     <string name="label_transactions_total"> :</string>
     <string name="label_export_destination"> </string>
-    <string name="title_export_dialog"> OFX</string>
+    <string name="title_export_dialog">Export transactions</string>
     <string name="option_export_all_transactions">   </string>
     <string name="hint_export_choice">,          .          </string>
     <string name="error_exporting">   OFX</string>    
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 23d41528..de572f7c 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -50,7 +50,7 @@
     <string name="title_selected">%1$d seleccionado</string>
     <string name="label_transactions_total">Total:</string>
     <string name="label_export_destination">Exportar Destino</string>
-    <string name="title_export_dialog">Exportar OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
     <string name="hint_export_choice">Por omisi&#243;n, s&#243;lo las trasacciones nuevas ser&#225;n exportadas. Selecione esta opci&#243;n para exportar todas las transacciones</string>
     <string name="error_exporting">Error al exportar los datos OFX</string>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 4215a056..31d76e91 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -50,7 +50,7 @@
     <string name="title_selected">%1$d seleccionado</string>
     <string name="label_transactions_total">Total:</string>
     <string name="label_export_destination">Destino de la exportaci&#243;n</string>
-    <string name="title_export_dialog">Exportar OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
     <string name="hint_export_choice">Por defecto solo las nuevas transacciones desde la &#250;ltima exportaci&#243;n ser&#225;n exportadas. Seleccione esta opci&#243;n para exportar todas las transacciones</string>
     <string name="error_exporting">Error exportando datos OFX</string>    
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index bb7b5c3e..fa7ca90a 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -50,7 +50,7 @@
     <string name="title_selected">%1$d s&#233;lectionner</string>
     <string name="label_transactions_total">Total:</string>
     <string name="label_export_destination">Destination d\'export</string>
-    <string name="title_export_dialog">Exporter en OFX</string>
+    <string name="title_export_dialog">Exporter les Transactions</string>
     <string name="option_export_all_transactions">Exporter toutes les transactions</string>
     <string name="hint_export_choice">Par d&#233;faut, seul les nouvelles transactions depuis le dernier export seront exporter. Cochez cette option pour exporter toutes les transactions</string>
     <string name="error_exporting">Erreur lors de l\'export des donn&#233;es en OFX</string>    
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 19c3a432..888d3009 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -49,7 +49,7 @@
     <string name="title_selected">%1$d selected</string>
     <string name="label_transactions_total">Total sum:</string>
     <string name="label_export_destination">Export Destination</string>
-    <string name="title_export_dialog">Export OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
     <string name="error_exporting">Error exporting OFX data</string>    
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 5e3f6625..f085d6e8 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -50,7 +50,7 @@
     <string name="title_selected">%1$d selezionate</string>
     <string name="label_transactions_total">Somma totale:</string>
     <string name="label_export_destination">Destinazione di esportazione</string>
-    <string name="title_export_dialog">Esporta OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Esporta tutte le transazioni</string>
     <string name="hint_export_choice">Di default, verranno esportate solo le transazioni dall\'ultima esportazione. Selezionare questa opzione per esportare tutte le transazioni</string>
     <string name="error_exporting">Errore nell\'esportazione dei dati OFX</string>    
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 91c8de10..1223ff16 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -51,7 +51,7 @@
     <string name="title_selected">%1$d valgt</string>
     <string name="label_transactions_total">Totalt belp:</string>
     <string name="label_export_destination">Eksportmottaker</string>
-    <string name="title_export_dialog">Eksporter OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Eksporter alle transaksjoner</string>
     <string name="hint_export_choice">Vanligvis vil kun nye transaksjoner bli eksportert.  Merk dette valget for  eksportere alle transaksjonene</string>
     <string name="error_exporting">Feil ved eksportering av OFX-data</string>    
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 7e6569ab..f04863c5 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -49,7 +49,7 @@
 	  <string name="title_selected">%1$d selecionado</string>
 	  <string name="label_transactions_total">Total:</string>
 	  <string name="label_export_destination">Exportar para:</string>
-	  <string name="title_export_dialog">Exportar OFX</string>
+	  <string name="title_export_dialog">Export Transactions</string>
 	  <string name="option_export_all_transactions">Exportar todas as transaes</string>
 	  <string name="hint_export_choice">Por padro, s sero exportadas as transaes criadas aps o ltimo procedimento de exportar. Selecionar essa opo para exportar todas as transaes.</string>
 	  <string name="error_exporting">Erro ao exportar os dados OFX</string>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index da53c039..63083f66 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -50,7 +50,7 @@
     <string name="title_selected">%1$d </string>
     <string name="label_transactions_total"> :</string>
     <string name="label_export_destination"> </string>
-    <string name="title_export_dialog"> OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions"> </string>
     <string name="hint_export_choice">  ,    .</string>
     <string name="error_exporting">   OFX</string>    
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 7ea5255a..95b5e775 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -48,7 +48,7 @@
     <string name="title_selected">%1$d </string>
     <string name="label_transactions_total"></string>
     <string name="label_export_destination"></string>
-    <string name="title_export_dialog">OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions"></string>
     <string name="hint_export_choice"></string>
     <string name="error_exporting">OFX</string>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index bf609112..ca20308e 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -49,7 +49,7 @@
     <string name="title_selected">%1$d selected</string>
     <string name="label_transactions_total">Total sum:</string>
     <string name="label_export_destination">Export Destination</string>
-    <string name="title_export_dialog">Export OFX</string>
+    <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
     <string name="error_exporting">Error exporting OFX data</string>    
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index 03217d53..b10b3f82 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -451,7 +451,7 @@ public String toQIF(Context context){
             if (mDescription != null || mDescription.isEmpty()){
                 transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX + mDescription + newLine);
             }
-            transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX + mAmount.negate().asString() + newLine);
+            transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX + mAmount.asString() + newLine);
         } else {
             transactionQifBuffer.append(QifHelper.AMOUNT_PREFIX + mAmount.asString() + newLine);
             if (mDescription != null && !mDescription.isEmpty()){
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index b68cd427..fde0a93e 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -215,7 +215,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 	public void onActivityCreated(Bundle savedInstanceState) {		
 		super.onActivityCreated(savedInstanceState);
 		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
-		getDialog().setTitle(R.string.menu_export_ofx);
+		getDialog().setTitle(R.string.title_export_dialog);
 		bindViews();
 	}
 

From 06875fff12298695b54218a026aad08d24cf18e7 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 6 Dec 2013 15:12:12 +0100
Subject: [PATCH 8/8] Fixed: QIF export always exports all transactions (not
 only new ones) Fixed: Exported QIF does not contain transaction description
 Improved: Internationalized imbalance account name Improved: Reliability of
 export. Progress dialog now displayed during export

---
 app/AndroidManifest.xml                            |   2 +-
 app/res/values-de/strings.xml                      |   3 +
 app/res/values-el/strings.xml                      |   3 +
 app/res/values-es-rMX/strings.xml                  |   3 +
 app/res/values-es/strings.xml                      |   3 +
 app/res/values-fr/strings.xml                      |   3 +
 app/res/values-hu/strings.xml                      |   3 +
 app/res/values-it/strings.xml                      |   3 +
 app/res/values-nb/strings.xml                      |   3 +
 app/res/values-nl/strings.xml                      |   3 +
 app/res/values-pt-rBR/strings.xml                  |   3 +
 app/res/values-ru/strings.xml                      |   3 +
 app/res/values-zh/strings.xml                      |   3 +
 app/res/values/strings.xml                         |   3 +
 app/src/org/gnucash/android/data/Account.java      |  16 +-
 app/src/org/gnucash/android/data/Transaction.java  |  34 +--
 .../android/export/ExportDialogFragment.java       | 256 ++--------------
 .../org/gnucash/android/export/ExportParams.java   | 152 ++++++++++
 .../org/gnucash/android/export/ExporterTask.java   | 323 +++++++++++++++++++++
 .../gnucash/android/export/qif/QifExporter.java    |   2 +-
 .../org/gnucash/android/export/qif/QifHelper.java  |   4 +-
 21 files changed, 561 insertions(+), 267 deletions(-)
 create mode 100644 app/src/org/gnucash/android/export/ExportParams.java
 create mode 100644 app/src/org/gnucash/android/export/ExporterTask.java

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index fa43fb54..979451b0 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="20"
+    android:versionCode="21"
     android:versionName="1.2.6" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index eda08890..f6ecd346 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -343,6 +343,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Ausgleichskonto</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index ffb01bb3..9d407c54 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -357,6 +357,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index de572f7c..29350cb1 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -341,6 +341,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 31d76e91..eb3f7e23 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -341,6 +341,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index fa7ca90a..f7b2f3a0 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -339,6 +339,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 888d3009..cf65d343 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -342,6 +342,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index f085d6e8..2a90f25c 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -342,6 +342,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 1223ff16..601ad206 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -344,6 +344,9 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 330cbeec..42ec42b0 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -343,6 +343,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index f04863c5..851de696 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -341,6 +341,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 63083f66..05da2196 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -339,6 +339,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 95b5e775..fdbb7605 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -516,6 +516,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index ca20308e..7e883163 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -540,6 +540,9 @@
     <string name="key_default_export_format">default_export_format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index 31e29397..82df0fd5 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -24,6 +24,7 @@
 import java.util.UUID;
 
 import android.content.Context;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifHelper;
@@ -402,7 +403,7 @@ public static OfxAccountType convertToOfxAccountType(AccountType accountType){
 	 * @param doc XML DOM document for the OFX data
 	 * @param parent Parent node to which to add this account's transactions in XML
 	 */
-	public void toOfx(Document doc, Element parent, boolean allTransactions){
+	public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		Element currency = doc.createElement("CURDEF");
 		currency.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));						
 		
@@ -459,7 +460,7 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 		bankTransactionsList.appendChild(dtend);
 		
 		for (Transaction transaction : mTransactionsList) {
-			if (!allTransactions && transaction.isExported())
+			if (!exportAllTransactions && transaction.isExported())
 				continue;
 			
 			bankTransactionsList.appendChild(transaction.toOfx(doc, mUID));
@@ -478,14 +479,14 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 
     /**
      * Exports the account info and transactions in the QIF format
-     * @param exportAll Flag to determine whether to export all transactions, or only new transactions since last export
+     * @param exportAllTransactions Flag to determine whether to export all transactions, or only new transactions since last export
      * @return QIF representation of the account information
      */
-    public String toQIF(boolean exportAll, Context context) {
+    public String toQIF(boolean exportAllTransactions) {
         StringBuffer accountQifBuffer = new StringBuffer();
         final String newLine = "\n";
 
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
         String fullyQualifiedAccountName = accountsDbAdapter.getFullyQualifiedAccountName(mUID);
         accountsDbAdapter.close();
 
@@ -502,7 +503,10 @@ public String toQIF(boolean exportAll, Context context) {
             if (!transaction.getAccountUID().equals(mUID))
                 continue;
 
-            accountQifBuffer.append(transaction.toQIF(context) + newLine);
+            if (!exportAllTransactions && transaction.isExported())
+                continue;
+
+            accountQifBuffer.append(transaction.toQIF() + newLine);
         }
         return accountQifBuffer.toString();
     }
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index b10b3f82..17349499 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -434,33 +434,29 @@ public Element toOfx(Document doc, String accountUID){
 
     /**
      * Builds a QIF entry representing this transaction
-     * @param context Application context
      * @return String QIF representation of this transaction
      */
-    public String toQIF(Context context){
+    public String toQIF(){
         final String newLine = "\n";
 
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
+
+        //all transactions are double transactions
+        String splitAccountFullName = QifHelper.getImbalanceAccountName(mAmount.getCurrency());
+        if (mDoubleEntryAccountUID != null && mDoubleEntryAccountUID.length() > 0){
+            splitAccountFullName = accountsDbAdapter.getFullyQualifiedAccountName(mDoubleEntryAccountUID);
+        }
 
         StringBuffer transactionQifBuffer = new StringBuffer();
-        transactionQifBuffer.append(QifHelper.DATE_PREFIX + QifHelper.formatDate(mTimestamp) + newLine);
+        transactionQifBuffer.append(QifHelper.DATE_PREFIX).append(QifHelper.formatDate(mTimestamp)).append(newLine);
+        transactionQifBuffer.append(QifHelper.MEMO_PREFIX).append(mName).append(newLine);
 
-        if (mDoubleEntryAccountUID != null && !mDoubleEntryAccountUID.isEmpty()){
-            String splitAccountFullName = accountsDbAdapter.getFullyQualifiedAccountName(mDoubleEntryAccountUID);
-            transactionQifBuffer.append(QifHelper.SPLIT_CATEGORY_PREFIX + splitAccountFullName + newLine);
-            if (mDescription != null || mDescription.isEmpty()){
-                transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX + mDescription + newLine);
-            }
-            transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX + mAmount.asString() + newLine);
-        } else {
-            transactionQifBuffer.append(QifHelper.AMOUNT_PREFIX + mAmount.asString() + newLine);
-            if (mDescription != null && !mDescription.isEmpty()){
-                transactionQifBuffer.append(QifHelper.MEMO_PREFIX + mDescription + newLine);
-            }
-            transactionQifBuffer.append(QifHelper.CATEGORY_PREFIX + QifHelper.getImbalanceAccountName(mAmount.getCurrency()) + newLine);
+        transactionQifBuffer.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(splitAccountFullName).append(newLine);
+        if (mDescription != null && mDescription.length() > 0){
+            transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX).append(mDescription).append(newLine);
         }
-
-        transactionQifBuffer.append(QifHelper.ENTRY_TERMINATOR + newLine);
+        transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(mAmount.asString()).append(newLine);
+        transactionQifBuffer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
 
         accountsDbAdapter.close();
         return transactionQifBuffer.toString();
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index fde0a93e..77bb5b67 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -16,55 +16,23 @@
 
 package org.gnucash.android.export;
 
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.nio.channels.FileChannel;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
-import android.widget.*;
-import org.gnucash.android.R;
-import org.gnucash.android.export.ExportFormat;
-import org.gnucash.android.export.ofx.OfxExporter;
-import org.gnucash.android.export.qif.QifExporter;
-import org.gnucash.android.ui.accounts.AccountsActivity;
-import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.ProcessingInstruction;
-
 import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.net.Uri;
 import android.os.Bundle;
-import android.os.Environment;
 import android.preference.PreferenceManager;
 import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.*;
+import org.gnucash.android.R;
+
+import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
 
 /**
  * Dialog fragment for exporting account information as OFX files.
@@ -122,72 +90,16 @@
 
 		@Override
 		public void onClick(View v) {
-            boolean exportAll = mExportAllCheckBox.isChecked();
-            try {
-                switch (mExportFormat) {
-                    case QIF: {
-                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
-                        String qif = qifExporter.generateQIF();
-
-                        writeQifExternalStorage(qif);
-                    }
-                    break;
-
-                    case OFX: {
-                        Document document = exportOfx(exportAll);
-                        writeOfxToExternalStorage(document);
-                    }
-                    break;
-                }
-            } catch (Exception e) {
-                Log.e(TAG, e.getMessage());
-                Toast.makeText(getActivity(), R.string.error_exporting,
-                        Toast.LENGTH_LONG).show();
-                dismiss();
-                return;
-            }
-
-
+            ExportParams exportParameters = new ExportParams(mExportFormat);
+            exportParameters.setExportAllTransactions(mExportAllCheckBox.isChecked());
+            exportParameters.setTargetFilepath(mFilePath);
             int position = mDestinationSpinner.getSelectedItemPosition();
-			switch (position) {
-			case 0:					
-				shareFile(mFilePath);				
-				break;
+            exportParameters.setExportTarget(position == 0 ? ExportParams.ExportTarget.SHARING : ExportParams.ExportTarget.SD_CARD);
+            exportParameters.setDeleteTransactionsAfterExport(mDeleteAllCheckBox.isChecked());
+
+            Log.i(TAG, "Commencing async export of transactions");
+            new ExporterTask(getActivity()).execute(exportParameters);
 
-			case 1:				
-				File src = new File(mFilePath);
-				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
-				
-				try {
-					copyFile(src, dst);
-				} catch (IOException e) {
-					Toast.makeText(getActivity(), 
-							getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(), 
-							Toast.LENGTH_LONG).show();		
-					Log.e(TAG, e.getMessage());
-					break;
-				}
-				
-				//file already exists, just let the user know
-				Toast.makeText(getActivity(), 
-						getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(), 
-						Toast.LENGTH_LONG).show();					
-				break;
-				
-			default:
-				break;
-			}
-			
-			if (mDeleteAllCheckBox.isChecked()){
-				Fragment currentFragment = getActivity().getSupportFragmentManager()
-						.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-				TransactionsDeleteConfirmationDialog alertFragment = 
-						TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
-				alertFragment.setTargetFragment(currentFragment, 0);
-				alertFragment.show(getActivity().getSupportFragmentManager(), "transactions_delete_confirmation_dialog");
-			}
-			
 			dismiss();
 		}
 		
@@ -268,45 +180,8 @@ public void onClick(View view) {
         qifRadioButton.setOnClickListener(clickListener);
 	}
 
-    private void writeQifExternalStorage(String qif) throws IOException {
-        File file = new File(mFilePath);
-
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        writer.write(qif);
-
-        writer.flush();
-    }
 
 	/**
-	 * Writes the OFX document <code>doc</code> to external storage
-	 * @param doc Document containing OFX file data
-	 * @throws IOException if file could not be saved
-	 */
-	private void writeOfxToExternalStorage(Document doc) throws IOException{
-		File file = new File(mFilePath);
-		
-		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
-				.getBoolean(getString(R.string.key_xml_ofx_header), false);
-
-		//if we want SGML OFX headers, write first to string and then prepend header
-		if (useXmlHeader){
-			write(doc, writer, false);
-		} else {			
-			Node ofxNode = doc.getElementsByTagName("OFX").item(0);
-			StringWriter stringWriter = new StringWriter();
-			write(ofxNode, stringWriter, true);
-			
-			StringBuffer stringBuffer = new StringBuffer(OfxExporter.OFX_SGML_HEADER);
-			stringBuffer.append('\n');
-			writer.write(stringBuffer.toString() + stringWriter.toString());
-		}
-		
-		writer.flush();
-		writer.close();
-	}
-	
-	/**
 	 * Callback for when the activity chooser dialog is completed
 	 */
 	@Override
@@ -319,52 +194,8 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
 		}
 	}
 	
-	/**
-	 * Starts an intent chooser to allow the user to select an activity to receive
-	 * the exported OFX file
-	 * @param path String path to the file on disk
-	 */
-	private void shareFile(String path){
-		String defaultEmail = PreferenceManager.getDefaultSharedPreferences(getActivity())
-												.getString(getString(R.string.key_default_export_email), null);
-		Intent shareIntent = new Intent(Intent.ACTION_SEND);
-		shareIntent.setType("application/xml");
-		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
-		shareIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.title_export_email));
-		if (defaultEmail != null && defaultEmail.trim().length() > 0){
-			shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
-		}			
-		SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
-		
-		shareIntent.putExtra(Intent.EXTRA_TEXT, getString(R.string.description_export_email) 
-							+ " " + formatter.format(new Date(System.currentTimeMillis())));
-		startActivity(Intent.createChooser(shareIntent, getString(R.string.title_share_ofx_with)));	
-	}
-	
-	/**
-	 * Copies a file from <code>src</code> to <code>dst</code>
-	 * @param src Absolute path to the source file
-	 * @param dst Absolute path to the destination file 
-	 * @throws IOException if the file could not be copied
-	 */
-	public static void copyFile(File src, File dst) throws IOException
-	{
-		//TODO: Make this asynchronous at some time, t in the future.
-	    FileChannel inChannel = new FileInputStream(src).getChannel();
-	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
-	    try
-	    {
-	        inChannel.transferTo(0, inChannel.size(), outChannel);
-	    }
-	    finally
-	    {
-	        if (inChannel != null)
-	            inChannel.close();
-	        if (outChannel != null)
-	            outChannel.close();
-	    }
-	}
-	
+
+
 	/**
 	 * Builds a file name based on the current time stamp for the exported file
 	 * @return String containing the file name
@@ -384,58 +215,5 @@ public static String buildExportFilename(ExportFormat format){
         }
 		return filename;
 	}
-	
-	/**
-	 * Exports transactions in the database to the OFX format.
-	 * The accounts are written to a DOM document and returned
-	 * @param exportAll Flag to export all transactions or only the new ones since last export
-	 * @return DOM {@link Document} containing the OFX file information
-	 * @throws ParserConfigurationException
-	 */
-	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
-		DocumentBuilderFactory docFactory = DocumentBuilderFactory
-				.newInstance();
-		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
-
-		Document document = docBuilder.newDocument();
-		Element root = document.createElement("OFX");
-		
-		ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxExporter.OFX_HEADER);
-		document.appendChild(pi);		
-		document.appendChild(root);
-		
-		OfxExporter exporter = new OfxExporter(getActivity(), exportAll);
-		exporter.toOfx(document, root);
-		
-		return document;
-	}
-	
-	/**
-	 * Writes out the document held in <code>node</code> to <code>outputWriter</code>
-	 * @param node {@link Node} containing the OFX document structure. Usually the parent node
-	 * @param outputWriter {@link Writer} to use in writing the file to stream
-     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
-	 */
-	public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
-		try {
-			TransformerFactory transformerFactory = TransformerFactory
-					.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			DOMSource source = new DOMSource(node);
-			StreamResult result = new StreamResult(outputWriter);
-			
-			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-			if (omitXmlDeclaration) {
-				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
-			}
-			
-			transformer.transform(source, result);
-		} catch (TransformerConfigurationException txconfigException) {
-			txconfigException.printStackTrace();
-		} catch (TransformerException tfException) {
-			tfException.printStackTrace();
-		}
-	}
 }
 
diff --git a/app/src/org/gnucash/android/export/ExportParams.java b/app/src/org/gnucash/android/export/ExportParams.java
new file mode 100644
index 00000000..6ad6c496
--- /dev/null
+++ b/app/src/org/gnucash/android/export/ExportParams.java
@@ -0,0 +1,152 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+/**
+ * Encapsulation of the parameters used for exporting transactions.
+ * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
+ * actually performs the export.
+ * @see org.gnucash.android.export.ExportDialogFragment
+ * @see org.gnucash.android.export.ExporterTask
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class ExportParams {
+    /**
+     * Options for the destination of the exported transctions file.
+     * It could be stored on the {@link #SD_CARD} or exported through another program via {@link #SHARING}
+     */
+    public enum ExportTarget {SD_CARD, SHARING};
+
+    /**
+     * Format to use for the exported transactions
+     * By default, the {@link ExportFormat#QIF} format is used
+     */
+    private ExportFormat mExportFormat      = ExportFormat.QIF;
+
+    /**
+     * Flag to determine if all transactions (including previously exported ones) should be exported
+     * By default only new transactions since the last export will be exported.
+     */
+    private boolean mExportAllTransactions  = false;
+
+    /**
+     * Flag to determine if all transactions should be deleted after exporting is complete
+     * By default no transactions are deleted
+     */
+    private boolean mDeleteTransactionsAfterExport = false;
+
+    /**
+     * Destination for the exported transactions
+     */
+    private ExportTarget mExportTarget      = ExportTarget.SHARING;
+
+    /**
+     * File path for the internal saving of transactions before determining export destination.
+     */
+    private String mTargetFilepath;
+
+    /**
+     * Creates a new set of paramters and specifies the export format
+     * @param format Format to use when exporting the transactions
+     */
+    public ExportParams(ExportFormat format){
+        mExportFormat = format;
+    }
+
+    /**
+     * Return the format used for exporting
+     * @return {@link ExportFormat}
+     */
+    public ExportFormat getExportFormat() {
+        return mExportFormat;
+    }
+
+    /**
+     * Set the export format
+     * @param exportFormat {@link ExportFormat}
+     */
+    public void setExportFormat(ExportFormat exportFormat) {
+        this.mExportFormat = exportFormat;
+    }
+
+    /**
+     * Returns flag whether all transactions should be exported, or only new ones since last export
+     * @return <code>true</code> if all transactions should be exported, <code>false</code> otherwise
+     */
+    public boolean shouldExportAllTransactions() {
+        return mExportAllTransactions;
+    }
+
+    /**
+     * Sets flag for exporting all transactions or only new transactions since last export
+     * @param exportAll Boolean flag
+     */
+    public void setExportAllTransactions(boolean exportAll) {
+        this.mExportAllTransactions = exportAll;
+    }
+
+    /**
+     * Returns flag whether transactions should be deleted after export
+     * @return <code>true</code> if all transactions will be deleted, <code>false</code> otherwise
+     */
+    public boolean shouldDeleteTransactionsAfterExport() {
+        return mDeleteTransactionsAfterExport;
+    }
+
+    /**
+     * Set flag to delete transactions after exporting is complete
+     * @param deleteTransactions SEt to <code>true</code> if transactions should be deleted, false if not
+     */
+    public void setDeleteTransactionsAfterExport(boolean deleteTransactions) {
+        this.mDeleteTransactionsAfterExport = deleteTransactions;
+    }
+
+    /**
+     * Get the target for the exported file
+     * @return {@link org.gnucash.android.export.ExportParams.ExportTarget}
+     */
+    public ExportTarget getExportTarget() {
+        return mExportTarget;
+    }
+
+    /**
+     * Set the target for the exported transactions
+     * @param mExportTarget Target for exported transactions
+     */
+    public void setExportTarget(ExportTarget mExportTarget) {
+        this.mExportTarget = mExportTarget;
+    }
+
+    /**
+     * Returns the internal target file path for the exported transactions.
+     * This file path is not accessible outside the context of the application
+     * @return String path to exported transactions
+     */
+    public String getTargetFilepath() {
+        return mTargetFilepath;
+    }
+
+    /**
+     * Sets target file path for transactions in private application storage
+     * @param mTargetFilepath String path to file
+     */
+    public void setTargetFilepath(String mTargetFilepath) {
+        this.mTargetFilepath = mTargetFilepath;
+    }
+
+}
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterTask.java
new file mode 100644
index 00000000..304ba494
--- /dev/null
+++ b/app/src/org/gnucash/android/export/ExporterTask.java
@@ -0,0 +1,323 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.preference.PreferenceManager;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.util.Log;
+import android.widget.Toast;
+import org.gnucash.android.R;
+import org.gnucash.android.export.ofx.OfxExporter;
+import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.*;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.*;
+import java.nio.channels.FileChannel;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * Asynchronous task for exporting transactions.
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class ExporterTask extends AsyncTask<ExportParams, Void, Boolean> {
+    /**
+     * App context
+     */
+    private final Context mContext;
+
+    private ProgressDialog mProgressDialog;
+
+    /**
+     * Log tag
+     */
+    public static final String TAG = "ExporterTask";
+
+    /**
+     * Export parameters
+     */
+    private ExportParams mExportParams;
+
+    public ExporterTask(Context context){
+        this.mContext = context;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+        mProgressDialog = new ProgressDialog(mContext);
+        mProgressDialog.setTitle(R.string.title_progress_exporting_transactions);
+        mProgressDialog.setIndeterminate(true);
+        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        mProgressDialog.show();
+    }
+
+    /**
+     * Generates the appropriate exported transactions file for the given parameters
+     * @param params Export parameters
+     * @return <code>true</code> if export was successful, <code>false</code> otherwise
+     */
+    @Override
+    protected Boolean doInBackground(ExportParams... params) {
+        mExportParams = params[0];
+        boolean exportAllTransactions = mExportParams.shouldExportAllTransactions();
+        try {
+            switch (mExportParams.getExportFormat()) {
+                case QIF: {
+                    QifExporter qifExporter = new QifExporter(mContext, exportAllTransactions);
+                    String qif = qifExporter.generateQIF();
+
+                    writeQifExternalStorage(qif);
+                }
+                return true;
+
+                case OFX: {
+                    Document document = exportOfx(exportAllTransactions);
+                    writeOfxToExternalStorage(document);
+                }
+                return true;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            Log.e(TAG, e.getMessage());
+            Toast.makeText(mContext, R.string.error_exporting,
+                    Toast.LENGTH_LONG).show();
+        };
+        return false;
+    }
+
+    /**
+     * Transmits the exported transactions to the designated location, either SD card or third-party application
+     * @param exportResult Result of background export execution
+     */
+    @Override
+    protected void onPostExecute(Boolean exportResult) {
+        mProgressDialog.dismiss();
+
+        if (!exportResult){
+            Toast.makeText(mContext,
+                    mContext.getString(R.string.toast_error_exporting),
+                    Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        switch (mExportParams.getExportTarget()) {
+            case SHARING:
+                shareFile(mExportParams.getTargetFilepath());
+                break;
+
+            case SD_CARD:
+                File src = new File(mExportParams.getTargetFilepath());
+                new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
+                File dst = new File(Environment.getExternalStorageDirectory()
+                        + "/gnucash/" + ExportDialogFragment.buildExportFilename(mExportParams.getExportFormat()));
+
+                try {
+                    copyFile(src, dst);
+                } catch (IOException e) {
+                    Toast.makeText(mContext,
+                            mContext.getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(),
+                            Toast.LENGTH_LONG).show();
+                    Log.e(TAG, e.getMessage());
+                    break;
+                }
+
+                //file already exists, just let the user know
+                Toast.makeText(mContext,
+                        mContext.getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(),
+                        Toast.LENGTH_LONG).show();
+                break;
+
+            default:
+                break;
+        }
+
+        if (mExportParams.shouldDeleteTransactionsAfterExport()){
+            android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity)mContext).getSupportFragmentManager();
+            Fragment currentFragment = fragmentManager
+                    .findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+            TransactionsDeleteConfirmationDialog alertFragment =
+                    TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
+            alertFragment.setTargetFragment(currentFragment, 0);
+
+            alertFragment.show(fragmentManager, "transactions_delete_confirmation_dialog");
+        }
+
+    }
+
+
+    /**
+     * Exports transactions in the database to the OFX format.
+     * The accounts are written to a DOM document and returned
+     * @param exportAll Flag to export all transactions or only the new ones since last export
+     * @return DOM {@link Document} containing the OFX file information
+     * @throws javax.xml.parsers.ParserConfigurationException
+     */
+    protected Document exportOfx(boolean exportAll) throws ParserConfigurationException {
+        DocumentBuilderFactory docFactory = DocumentBuilderFactory
+                .newInstance();
+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+
+        Document document = docBuilder.newDocument();
+        Element root = document.createElement("OFX");
+
+        ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxExporter.OFX_HEADER);
+        document.appendChild(pi);
+        document.appendChild(root);
+
+        OfxExporter exporter = new OfxExporter(mContext, exportAll);
+        exporter.toOfx(document, root);
+
+        return document;
+    }
+
+    /**
+     * Writes out the String containing the exported transaction in QIF format to disk
+     * @param qif String containing exported transactions
+     * @throws IOException
+     */
+    private void writeQifExternalStorage(String qif) throws IOException {
+        File file = new File(mExportParams.getTargetFilepath());
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        writer.write(qif);
+
+        writer.flush();
+    }
+
+    /**
+     * Writes the OFX document <code>doc</code> to external storage
+     * @param doc Document containing OFX file data
+     * @throws IOException if file could not be saved
+     */
+    private void writeOfxToExternalStorage(Document doc) throws IOException{
+        File file = new File(mExportParams.getTargetFilepath());
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(mContext)
+                .getBoolean(mContext.getString(R.string.key_xml_ofx_header), false);
+
+        //if we want SGML OFX headers, write first to string and then prepend header
+        if (useXmlHeader){
+            write(doc, writer, false);
+        } else {
+            Node ofxNode = doc.getElementsByTagName("OFX").item(0);
+            StringWriter stringWriter = new StringWriter();
+            write(ofxNode, stringWriter, true);
+
+            StringBuffer stringBuffer = new StringBuffer(OfxExporter.OFX_SGML_HEADER);
+            stringBuffer.append('\n');
+            writer.write(stringBuffer.toString() + stringWriter.toString());
+        }
+
+        writer.flush();
+        writer.close();
+    }
+
+    /**
+     * Starts an intent chooser to allow the user to select an activity to receive
+     * the exported OFX file
+     * @param path String path to the file on disk
+     */
+    private void shareFile(String path){
+        String defaultEmail = PreferenceManager.getDefaultSharedPreferences(mContext)
+                .getString(mContext.getString(R.string.key_default_export_email), null);
+        Intent shareIntent = new Intent(Intent.ACTION_SEND);
+        shareIntent.setType("application/xml");
+        shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://" + path));
+        shareIntent.putExtra(Intent.EXTRA_SUBJECT, mContext.getString(R.string.title_export_email));
+        if (defaultEmail != null && defaultEmail.trim().length() > 0){
+            shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
+        }
+        SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
+
+        shareIntent.putExtra(Intent.EXTRA_TEXT, mContext.getString(R.string.description_export_email)
+                + " " + formatter.format(new Date(System.currentTimeMillis())));
+        mContext.startActivity(Intent.createChooser(shareIntent, mContext.getString(R.string.title_share_ofx_with)));
+    }
+
+    /**
+     * Copies a file from <code>src</code> to <code>dst</code>
+     * @param src Absolute path to the source file
+     * @param dst Absolute path to the destination file
+     * @throws IOException if the file could not be copied
+     */
+    public static void copyFile(File src, File dst) throws IOException
+    {
+        //TODO: Make this asynchronous at some time, t in the future.
+        FileChannel inChannel = new FileInputStream(src).getChannel();
+        FileChannel outChannel = new FileOutputStream(dst).getChannel();
+        try
+        {
+            inChannel.transferTo(0, inChannel.size(), outChannel);
+        }
+        finally
+        {
+            if (inChannel != null)
+                inChannel.close();
+            if (outChannel != null)
+                outChannel.close();
+        }
+    }
+
+    /**
+     * Writes out the document held in <code>node</code> to <code>outputWriter</code>
+     * @param node {@link Node} containing the OFX document structure. Usually the parent node
+     * @param outputWriter {@link Writer} to use in writing the file to stream
+     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
+     */
+    public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
+        try {
+            TransformerFactory transformerFactory = TransformerFactory
+                    .newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            DOMSource source = new DOMSource(node);
+            StreamResult result = new StreamResult(outputWriter);
+
+            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+            if (omitXmlDeclaration) {
+                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+            }
+
+            transformer.transform(source, result);
+        } catch (TransformerConfigurationException txconfigException) {
+            txconfigException.printStackTrace();
+        } catch (TransformerException tfException) {
+            tfException.printStackTrace();
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index e6cd8163..35f8c557 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -32,7 +32,7 @@ public String generateQIF(){
             if (account.getTransactionCount() == 0)
                 continue;
 
-            qifBuffer.append(account.toQIF(mExportAll, mContext) + "\n");
+            qifBuffer.append(account.toQIF(mExportAll) + "\n");
 
             //mark as exported
             transactionsDbAdapter.markAsExported(account.getUID());
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index e8fd1f99..0068a1e9 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -1,5 +1,7 @@
 package org.gnucash.android.export.qif;
 
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.data.Account;
 
 import java.text.SimpleDateFormat;
@@ -69,6 +71,6 @@ public static String getQifHeader(Account.AccountType accountType){
      */
     public static String getImbalanceAccountName(Currency currency){
         //TODO: localize this in the future
-        return "Imbalance-" + currency.getCurrencyCode();
+        return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
     }
 }
