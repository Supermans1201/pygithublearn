From a54558220014c899ff09121c1a79fae1c2a13aa0 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Mon, 31 Aug 2015 18:39:25 +0300
Subject: [PATCH 1/9] Added grouping by year

---
 .../android/ui/report/LineChartFragment.java       | 50 +++++++++++++++++-----
 1 file changed, 39 insertions(+), 11 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index 9c5a6863..90350863 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -48,9 +48,11 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.ui.report.ReportsActivity.GroupInterval;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalDateTime;
 import org.joda.time.Months;
+import org.joda.time.Years;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -97,6 +99,8 @@
     private boolean mChartDataPresent = true;
     private Currency mCurrency;
 
+    private GroupInterval mGroupInterval = GroupInterval.MONTH;
+
     /**
      * Reporting period start time
      */
@@ -180,9 +184,15 @@ private LineData getData(List<AccountType> accountTypeList) {
         }
         List<String> xValues = new ArrayList<>();
         while (!startDate.isAfter(endDate)) {
-            xValues.add(startDate.toString(X_AXIS_PATTERN));
-            Log.d(TAG, "X axis " + startDate.toString("MM yy"));
-            startDate = startDate.plusMonths(1);
+            if (mGroupInterval == GroupInterval.YEAR) {
+                xValues.add(startDate.toString(X_AXIS_PATTERN));
+                Log.w(TAG, "X axis " + startDate.toString("yy"));
+                startDate = startDate.plusYears(1);
+            } else {
+                xValues.add(startDate.toString(X_AXIS_PATTERN));
+                Log.d(TAG, "X axis " + startDate.toString("MM yy"));
+                startDate = startDate.plusMonths(1);
+            }
         }
 
         List<LineDataSet> dataSets = new ArrayList<>();
@@ -250,18 +260,36 @@ private LineData getEmptyData() {
         }
         Log.d(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
         Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
-        int months = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
-                latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+
+        int count = 0;
+        if (mGroupInterval == GroupInterval.YEAR) {
+            count = Years.yearsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
+                    latest.withDayOfMonth(1).withMillisOfDay(0)).getYears();
+        } else {
+            count = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
+                    latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+        }
 
         int offset = getXAxisOffset(accountType);
-        List<Entry> values = new ArrayList<>(months + 1);
-        for (int i = 0; i < months + 1; i++) {
-            long start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-            long end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+        List<Entry> values = new ArrayList<>(count + 1);
+        for (int i = 0; i < count + 1; i++) {
+            long start;
+            long end;
+            if (mGroupInterval == GroupInterval.YEAR) {
+                start = earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                end = earliest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                earliest = earliest.plusYears(1);
+            } else {
+                start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                earliest = earliest.plusMonths(1);
+            }
             float balance = (float) mAccountsDbAdapter.getAccountsBalance(accountUIDList, start, end).asDouble();
             values.add(new Entry(balance, i + offset));
             Log.d(TAG, accountType + earliest.toString(" MMM yyyy") + ", balance = " + balance);
-            earliest = earliest.plusMonths(1);
+
         }
 
         return values;
@@ -320,7 +348,7 @@ public void onTimeRangeUpdated(long start, long end) {
     }
 
     @Override
-    public void onGroupingUpdated(ReportsActivity.GroupInterval groupInterval) {
+    public void onGroupingUpdated(GroupInterval groupInterval) {
         //TODO: update chart
     }
 

From 5d28b197eccac5649ad49056825ad5f3daf3d14e Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Mon, 31 Aug 2015 19:29:32 +0300
Subject: [PATCH 2/9] Fixed years between calculation

---
 .../main/java/org/gnucash/android/ui/report/LineChartFragment.java    | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index 90350863..a347c655 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -263,8 +263,8 @@ private LineData getEmptyData() {
 
         int count = 0;
         if (mGroupInterval == GroupInterval.YEAR) {
-            count = Years.yearsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
-                    latest.withDayOfMonth(1).withMillisOfDay(0)).getYears();
+            count = Years.yearsBetween(earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue(),
+                    latest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue()).getYears();
         } else {
             count = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
                     latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();

From 3759b6bcfe0c30f3e854c137101af9aa42245286 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Tue, 1 Sep 2015 19:27:27 +0300
Subject: [PATCH 3/9] Added grouping by quarter

---
 .../android/ui/report/LineChartFragment.java       | 90 +++++++++++++++-------
 1 file changed, 63 insertions(+), 27 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index a347c655..fa56f2d4 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -184,14 +184,24 @@ private LineData getData(List<AccountType> accountTypeList) {
         }
         List<String> xValues = new ArrayList<>();
         while (!startDate.isAfter(endDate)) {
-            if (mGroupInterval == GroupInterval.YEAR) {
-                xValues.add(startDate.toString(X_AXIS_PATTERN));
-                Log.w(TAG, "X axis " + startDate.toString("yy"));
-                startDate = startDate.plusYears(1);
-            } else {
-                xValues.add(startDate.toString(X_AXIS_PATTERN));
-                Log.d(TAG, "X axis " + startDate.toString("MM yy"));
-                startDate = startDate.plusMonths(1);
+            switch (mGroupInterval) {
+                case MONTH:
+                    xValues.add(startDate.toString(X_AXIS_PATTERN));
+                    Log.w(TAG, "X axis " + startDate.toString("MM yy"));
+                    startDate = startDate.plusMonths(1);
+                    break;
+                case QUARTER:
+                    int quarter = getQuarter(new LocalDateTime(startDate.toDate().getTime()));
+                    xValues.add("Q" + quarter + startDate.toString(" yy"));
+                    Log.w(TAG, "X axis " + "Q" + quarter + startDate.toString(" MM yy"));
+                    startDate = startDate.plusMonths(3);
+                    break;
+                case YEAR:
+                    xValues.add(startDate.toString(X_AXIS_PATTERN));
+                    Log.w(TAG, "X axis " + startDate.toString("yy"));
+                    startDate = startDate.plusYears(1);
+                    break;
+//                default:
             }
         }
 
@@ -214,6 +224,10 @@ private LineData getData(List<AccountType> accountTypeList) {
         return lineData;
     }
 
+    private int getQuarter(LocalDateTime date) {
+        return date.getMonthOfYear() / 3 + 1;
+    }
+
     /**
      * Returns a data object that represents situation when no user data available
      * @return a {@code LineData} instance for situation when no user data available
@@ -262,29 +276,47 @@ private LineData getEmptyData() {
         Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
 
         int count = 0;
-        if (mGroupInterval == GroupInterval.YEAR) {
-            count = Years.yearsBetween(earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue(),
-                    latest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue()).getYears();
-        } else {
-            count = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
-                    latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+        switch (mGroupInterval) {
+            case MONTH:
+                count = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
+                        latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+                break;
+            case QUARTER:
+                count = getQuarter(latest) - getQuarter(earliest);
+                Log.w(TAG, "count Q " + count);
+                break;
+            case YEAR:
+                count = Years.yearsBetween(earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue(),
+                        latest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue()).getYears();
+                break;
+//                default:
         }
 
         int offset = getXAxisOffset(accountType);
         List<Entry> values = new ArrayList<>(count + 1);
         for (int i = 0; i < count + 1; i++) {
-            long start;
-            long end;
-            if (mGroupInterval == GroupInterval.YEAR) {
-                start = earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-                end = earliest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
-
-                earliest = earliest.plusYears(1);
-            } else {
-                start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-                end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
-
-                earliest = earliest.plusMonths(1);
+            long start = 0;
+            long end = 0;
+            switch (mGroupInterval) {
+                case QUARTER:
+                    int quarter = getQuarter(earliest);
+                    start = earliest.withMonthOfYear(quarter * 3 - 2).dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = earliest.withMonthOfYear(quarter * 3).dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    earliest = earliest.plusMonths(3);
+                    break;
+                case MONTH:
+                    start = earliest.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = earliest.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    earliest = earliest.plusMonths(1);
+                    break;
+                case YEAR:
+                    start = earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = earliest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    earliest = earliest.plusYears(1);
+                    break;
             }
             float balance = (float) mAccountsDbAdapter.getAccountsBalance(accountUIDList, start, end).asDouble();
             values.add(new Entry(balance, i + offset));
@@ -349,7 +381,11 @@ public void onTimeRangeUpdated(long start, long end) {
 
     @Override
     public void onGroupingUpdated(GroupInterval groupInterval) {
-        //TODO: update chart
+        mGroupInterval = groupInterval;
+        Log.w(TAG, "GroupInterval = " + groupInterval);
+
+        mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
+        mChart.invalidate();
     }
 
     @Override

From c475e74092d4da95cb0bc98705af6a6455525642 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Tue, 1 Sep 2015 20:51:15 +0300
Subject: [PATCH 4/9] Consistent calculation x-axis length and data set size

---
 .../android/ui/report/LineChartFragment.java       | 44 ++++++++++++----------
 1 file changed, 25 insertions(+), 19 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index fa56f2d4..c0bfeed6 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -182,8 +182,11 @@ private LineData getData(List<AccountType> accountTypeList) {
             startDate = new LocalDate(mReportStartTime).withDayOfMonth(1);
             endDate = new LocalDate(mReportEndTime).withDayOfMonth(1);
         }
+
+        int count = getDateDiff(new LocalDateTime(startDate.toDate().getTime()), new LocalDateTime(endDate.toDate().getTime()));
+        Log.w(TAG, "Diff " + count);
         List<String> xValues = new ArrayList<>();
-        while (!startDate.isAfter(endDate)) {
+        for (int i = 0; i <= count; i++) {
             switch (mGroupInterval) {
                 case MONTH:
                     xValues.add(startDate.toString(X_AXIS_PATTERN));
@@ -224,6 +227,25 @@ private LineData getData(List<AccountType> accountTypeList) {
         return lineData;
     }
 
+    /**
+     * Calculates difference between two date values accordingly to {@code mGroupInterval}
+     * @param start start date
+     * @param end end date
+     * @return difference between two dates or {@code -1}
+     */
+    private int getDateDiff(LocalDateTime start, LocalDateTime end) {
+        switch (mGroupInterval) {
+            case QUARTER:
+                return getQuarter(start) - getQuarter(end);
+            case MONTH:
+                return Months.monthsBetween(start.withDayOfMonth(1).withMillisOfDay(0), end.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+            case YEAR:
+                return Years.yearsBetween(start.withDayOfYear(1).withMillisOfDay(0), end.withDayOfYear(1).withMillisOfDay(0)).getYears();
+            default:
+                return -1;
+        }
+    }
+
     private int getQuarter(LocalDateTime date) {
         return date.getMonthOfYear() / 3 + 1;
     }
@@ -275,26 +297,10 @@ private LineData getEmptyData() {
         Log.d(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
         Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
 
-        int count = 0;
-        switch (mGroupInterval) {
-            case MONTH:
-                count = Months.monthsBetween(earliest.withDayOfMonth(1).withMillisOfDay(0),
-                        latest.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
-                break;
-            case QUARTER:
-                count = getQuarter(latest) - getQuarter(earliest);
-                Log.w(TAG, "count Q " + count);
-                break;
-            case YEAR:
-                count = Years.yearsBetween(earliest.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue(),
-                        latest.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue()).getYears();
-                break;
-//                default:
-        }
-
         int offset = getXAxisOffset(accountType);
+        int count = getDateDiff(earliest, latest);
         List<Entry> values = new ArrayList<>(count + 1);
-        for (int i = 0; i < count + 1; i++) {
+        for (int i = 0; i <= count; i++) {
             long start = 0;
             long end = 0;
             switch (mGroupInterval) {

From 2bbe86ff624e7540203e6bcb2549f1ed1e4618ec Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Wed, 2 Sep 2015 14:08:20 +0300
Subject: [PATCH 5/9] Fixed quarter diff calculation

---
 .../org/gnucash/android/ui/report/LineChartFragment.java  | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index c0bfeed6..03faca32 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -172,7 +172,7 @@ public void onResume() {
      */
     private LineData getData(List<AccountType> accountTypeList) {
         calculateEarliestAndLatestTimestamps(accountTypeList);
-
+        // LocalDateTime?
         LocalDate startDate;
         LocalDate endDate;
         if (mReportStartTime == -1 && mReportEndTime == -1) {
@@ -236,7 +236,11 @@ private LineData getData(List<AccountType> accountTypeList) {
     private int getDateDiff(LocalDateTime start, LocalDateTime end) {
         switch (mGroupInterval) {
             case QUARTER:
-                return getQuarter(start) - getQuarter(end);
+                int y = Years.yearsBetween(start.withDayOfYear(1).withMillisOfDay(0), end.withDayOfYear(1).withMillisOfDay(0)).getYears();
+                Log.w(TAG, "year = " + y);
+                Log.w(TAG, "start q = " + getQuarter(start));
+                Log.w(TAG, "end q = " + getQuarter(end));
+                return (getQuarter(end) - getQuarter(start) + 1 + y * 4);
             case MONTH:
                 return Months.monthsBetween(start.withDayOfMonth(1).withMillisOfDay(0), end.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
             case YEAR:
@@ -246,8 +250,13 @@ private int getDateDiff(LocalDateTime start, LocalDateTime end) {
         }
     }
 
+    /**
+     * Returns a quarter of the specified date
+     * @param date date
+     * @return a quarter
+     */
     private int getQuarter(LocalDateTime date) {
-        return date.getMonthOfYear() / 3 + 1;
+        return ((date.getMonthOfYear() - 1) / 3 + 1);
     }
 
     /**

From 9ad004dd775c03961f28e104099cffa21961388c Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Wed, 2 Sep 2015 17:14:17 +0300
Subject: [PATCH 6/9] Fixed x-axis offset

---
 .../gnucash/android/ui/report/LineChartFragment.java | 20 +++-----------------
 1 file changed, 3 insertions(+), 17 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index 03faca32..86dff2d5 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -306,7 +306,7 @@ private LineData getEmptyData() {
         Log.d(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
         Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
 
-        int offset = getXAxisOffset(accountType);
+        int xAxisOffset = getDateDiff(new LocalDateTime(mEarliestTransactionTimestamp), new LocalDateTime(mEarliestTimestampsMap.get(accountType)));
         int count = getDateDiff(earliest, latest);
         List<Entry> values = new ArrayList<>(count + 1);
         for (int i = 0; i <= count; i++) {
@@ -334,7 +334,7 @@ private LineData getEmptyData() {
                     break;
             }
             float balance = (float) mAccountsDbAdapter.getAccountsBalance(accountUIDList, start, end).asDouble();
-            values.add(new Entry(balance, i + offset));
+            values.add(new Entry(balance, i + xAxisOffset));
             Log.d(TAG, accountType + earliest.toString(" MMM yyyy") + ", balance = " + balance);
 
         }
@@ -370,21 +370,7 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
         mEarliestTransactionTimestamp = timestamps.get(0);
         mLatestTransactionTimestamp = timestamps.get(timestamps.size() - 1);
     }
-
-    /**
-     * Returns a difference in months between the global earliest timestamp and the earliest
-     * transaction's timestamp of the specified account type
-     * @param accountType the account type
-     * @return the difference in months
-     */
-    private int getXAxisOffset(AccountType accountType) {
-        return Months.monthsBetween(
-                new LocalDate(mEarliestTransactionTimestamp).withDayOfMonth(1),
-                new LocalDate(mEarliestTimestampsMap.get(accountType)).withDayOfMonth(1)
-        ).getMonths();
-    }
-
-
+    
     @Override
     public void onTimeRangeUpdated(long start, long end) {
         mReportStartTime = start;

From 7bf4a841ea6c1bd99dc6b640771ca87b9a370ece Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Thu, 3 Sep 2015 18:19:12 +0300
Subject: [PATCH 7/9] Removed unnecessary addition on quarter diff

---
 .../gnucash/android/ui/report/LineChartFragment.java  | 19 ++++++++-----------
 1 file changed, 8 insertions(+), 11 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index 86dff2d5..ee2551ca 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -200,8 +200,8 @@ private LineData getData(List<AccountType> accountTypeList) {
                     startDate = startDate.plusMonths(3);
                     break;
                 case YEAR:
-                    xValues.add(startDate.toString(X_AXIS_PATTERN));
-                    Log.w(TAG, "X axis " + startDate.toString("yy"));
+                    xValues.add(startDate.toString("yy"));
+                    Log.w(TAG, "X axis " + startDate.toString("yyyy"));
                     startDate = startDate.plusYears(1);
                     break;
 //                default:
@@ -237,10 +237,7 @@ private int getDateDiff(LocalDateTime start, LocalDateTime end) {
         switch (mGroupInterval) {
             case QUARTER:
                 int y = Years.yearsBetween(start.withDayOfYear(1).withMillisOfDay(0), end.withDayOfYear(1).withMillisOfDay(0)).getYears();
-                Log.w(TAG, "year = " + y);
-                Log.w(TAG, "start q = " + getQuarter(start));
-                Log.w(TAG, "end q = " + getQuarter(end));
-                return (getQuarter(end) - getQuarter(start) + 1 + y * 4);
+                return (getQuarter(end) - getQuarter(start) + y * 4);
             case MONTH:
                 return Months.monthsBetween(start.withDayOfMonth(1).withMillisOfDay(0), end.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
             case YEAR:
@@ -303,10 +300,10 @@ private LineData getEmptyData() {
             earliest = new LocalDateTime(mReportStartTime);
             latest = new LocalDateTime(mReportEndTime);
         }
-        Log.d(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
-        Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
+        Log.e(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
+        Log.e(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
 
-        int xAxisOffset = getDateDiff(new LocalDateTime(mEarliestTransactionTimestamp), new LocalDateTime(mEarliestTimestampsMap.get(accountType)));
+        int xAxisOffset = getDateDiff(new LocalDateTime(mEarliestTransactionTimestamp), earliest);
         int count = getDateDiff(earliest, latest);
         List<Entry> values = new ArrayList<>(count + 1);
         for (int i = 0; i <= count; i++) {
@@ -335,7 +332,7 @@ private LineData getEmptyData() {
             }
             float balance = (float) mAccountsDbAdapter.getAccountsBalance(accountUIDList, start, end).asDouble();
             values.add(new Entry(balance, i + xAxisOffset));
-            Log.d(TAG, accountType + earliest.toString(" MMM yyyy") + ", balance = " + balance);
+            Log.w(TAG, accountType + earliest.toString(" MMM yyyy") + ", balance = " + balance);
 
         }
 
@@ -370,7 +367,7 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
         mEarliestTransactionTimestamp = timestamps.get(0);
         mLatestTransactionTimestamp = timestamps.get(timestamps.size() - 1);
     }
-    
+
     @Override
     public void onTimeRangeUpdated(long start, long end) {
         mReportStartTime = start;

From 80eb0cb4c363639ca45935ea50e2ead0059ce137 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Thu, 3 Sep 2015 18:54:31 +0300
Subject: [PATCH 8/9] Fixed crash on screen orientation change

---
 .../org/gnucash/android/ui/report/ReportsActivity.java  | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java b/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
index 6ce845ee..0fbcf5db 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
@@ -140,13 +140,16 @@ public void onNothingSelected(AdapterView<?> adapterView) {
     @Override
     public void onAttachFragment(Fragment fragment) {
         super.onAttachFragment(fragment);
-        //so far only the pie chart makes meaningful use of a specific date range
-        if (fragment instanceof ReportSummaryFragment || fragment instanceof BalanceSheetFragment){
-            findViewById(R.id.time_range_layout).setVisibility(View.GONE);
-            findViewById(R.id.date_range_divider).setVisibility(View.GONE);
-        } else {
-            findViewById(R.id.time_range_layout).setVisibility(View.VISIBLE);
-            findViewById(R.id.date_range_divider).setVisibility(View.VISIBLE);
+        View timeRangeLayout = findViewById(R.id.time_range_layout);
+        View dateRangeDivider = findViewById(R.id.date_range_divider);
+        if (timeRangeLayout != null && dateRangeDivider != null) {
+            if (fragment instanceof ReportSummaryFragment || fragment instanceof BalanceSheetFragment) {
+                timeRangeLayout.setVisibility(View.GONE);
+                dateRangeDivider.setVisibility(View.GONE);
+            } else {
+                timeRangeLayout.setVisibility(View.VISIBLE);
+                dateRangeDivider.setVisibility(View.VISIBLE);
+            }
         }
     }
 

From e013bba0e90d405e3c501acd3cab95a9bca694f5 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Fri, 4 Sep 2015 19:59:53 +0300
Subject: [PATCH 9/9] Fixed time range when grouping by quarter/year

---
 .../main/java/org/gnucash/android/ui/report/LineChartFragment.java  | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index ee2551ca..6abd1251 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -344,6 +344,12 @@ private LineData getEmptyData() {
      * @param accountTypeList account's types which will be processed
      */
     private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeList) {
+        if (mReportStartTime != -1 && mReportEndTime != -1) {
+            mEarliestTransactionTimestamp = mReportStartTime;
+            mLatestTransactionTimestamp = mReportEndTime;
+            return;
+        }
+
         TransactionsDbAdapter dbAdapter = TransactionsDbAdapter.getInstance();
         for (Iterator<AccountType> iter = accountTypeList.iterator(); iter.hasNext();) {
             AccountType type = iter.next();
