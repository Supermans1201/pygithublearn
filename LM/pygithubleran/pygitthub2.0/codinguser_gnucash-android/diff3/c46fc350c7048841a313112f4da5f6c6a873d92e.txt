From c46fc350c7048841a313112f4da5f6c6a873d92e Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 16 Oct 2014 21:08:46 +0800
Subject: [PATCH] remove annotations

---
 .../gnucash/android/app/GnuCashApplication.java    |  4 -
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 99 ++++++----------------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 31 +++----
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 52 ++++--------
 .../gnucash/android/db/TransactionsDbAdapter.java  | 58 +++++--------
 app/src/org/gnucash/android/export/Exporter.java   |  8 +-
 .../gnucash/android/importer/GncXmlHandler.java    |  6 +-
 .../gnucash/android/importer/GncXmlImporter.java   |  4 +-
 .../gnucash/android/importer/ImportAsyncTask.java  |  3 +-
 app/src/org/gnucash/android/model/Account.java     | 54 ++++--------
 app/src/org/gnucash/android/model/Money.java       | 61 +++++--------
 app/src/org/gnucash/android/model/Split.java       | 43 +++-------
 app/src/org/gnucash/android/model/Transaction.java | 49 ++++-------
 .../android/ui/account/AccountFormFragment.java    |  8 +-
 .../android/ui/account/AccountsListFragment.java   |  4 +-
 .../android/ui/colorpicker/ColorPickerDialog.java  |  2 -
 .../ScheduledTransactionsListFragment.java         |  4 +-
 .../ui/transaction/TransactionFormFragment.java    |  5 +-
 .../dialog/DatePickerDialogFragment.java           |  2 -
 .../dialog/TimePickerDialogFragment.java           |  2 -
 ...ansactionsDeleteConfirmationDialogFragment.java |  4 +-
 21 files changed, 147 insertions(+), 356 deletions(-)

diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index 7fa20445..c7e203a7 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -21,7 +21,6 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
-import android.support.annotation.NonNull;
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -77,17 +76,14 @@ public void onCreate(){
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
     }
 
-    @NonNull
     public static AccountsDbAdapter getAccountsDbAdapter() {
         return mAccountsDbAdapter;
     }
 
-    @NonNull
     public static TransactionsDbAdapter getTransactionDbAdapter() {
         return mTransactionsDbAdapter;
     }
 
-    @NonNull
     public static SplitsDbAdapter getSplitsDbAdapter() {
         return mSplitsDbAdapter;
     }
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index cb3bb965..f1199fea 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -22,11 +22,9 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
-import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import android.util.Log;
-import android.support.annotation.NonNull;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.*;
@@ -51,14 +49,13 @@
 	/**
 	 * Transactions database adapter for manipulating transactions associated with accounts
 	 */
-	@NonNull
     private final TransactionsDbAdapter mTransactionsAdapter;
 
     /**
      * Overloaded constructor. Creates an adapter for an already open database
      * @param db SQliteDatabase instance
      */
-    public AccountsDbAdapter(@NonNull SQLiteDatabase db, @NonNull TransactionsDbAdapter transactionsDbAdapter) {
+    public AccountsDbAdapter(SQLiteDatabase db, TransactionsDbAdapter transactionsDbAdapter) {
         super(db);
         mTransactionsAdapter = transactionsDbAdapter;
     }
@@ -70,7 +67,7 @@ public AccountsDbAdapter(@NonNull SQLiteDatabase db, @NonNull TransactionsDbAdap
 	 * @param account {@link Account} to be inserted to database
 	 * @return Database row ID of the inserted account
 	 */
-	public long addAccount(@NonNull Account account){
+	public long addAccount(Account account){
 		ContentValues contentValues = new ContentValues();
 		contentValues.put(AccountEntry.COLUMN_NAME,         account.getName());
 		contentValues.put(AccountEntry.COLUMN_TYPE,         account.getAccountType().name());
@@ -118,7 +115,7 @@ public long addAccount(@NonNull Account account){
      * @param accountList {@link Account} to be inserted to database
      * @return number of rows inserted
      */
-    public long bulkAddAccounts(@NonNull List<Account> accountList){
+    public long bulkAddAccounts(List<Account> accountList){
         long nRow = 0;
         try {
             mDb.beginTransaction();
@@ -167,7 +164,7 @@ public long bulkAddAccounts(@NonNull List<Account> accountList){
      * @param accountUID Unique ID of the record to be marked as exported
      * @return Number of records marked as exported
      */
-    public int markAsExported(@NonNull String accountUID){
+    public int markAsExported(String accountUID){
         ContentValues contentValues = new ContentValues();
         contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
         return mDb.update(
@@ -195,7 +192,7 @@ public int markAsExported(@NonNull String accountUID){
      * @param newValue New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateAllAccounts(@NonNull String columnKey, @Nullable String newValue){
+    public int updateAllAccounts(String columnKey, String newValue){
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
@@ -212,7 +209,7 @@ public int updateAllAccounts(@NonNull String columnKey, @Nullable String newValu
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateAccount(long accountId, @NonNull String columnKey, @Nullable String newValue){
+    public int updateAccount(long accountId, String columnKey, String newValue){
         return updateRecord(AccountEntry.TABLE_NAME, accountId, columnKey, newValue);
     }
 
@@ -306,7 +303,7 @@ public boolean destructiveDeleteAccount(long rowId){
      * @param newParentUID Unique ID of new parent account
      * @return Number of records which are modified
      */
-    public int reassignParent(@NonNull String oldParentUID, @Nullable String newParentUID){
+    public int reassignParent(String oldParentUID, String newParentUID){
         ContentValues contentValues = new ContentValues();
         if (newParentUID == null)
             contentValues.putNull(AccountEntry.COLUMN_PARENT_ACCOUNT_UID);
@@ -386,8 +383,7 @@ public boolean recursiveDestructiveDelete(long accountId){
 	 * @param c Cursor pointing to account record in database
 	 * @return {@link Account} object constructed from database record
 	 */
-	@NonNull
-    public Account buildAccountInstance(@NonNull Cursor c){
+    public Account buildAccountInstance(Cursor c){
         Account account = buildSimpleAccountInstance(c);
         account.setTransactions(mTransactionsAdapter.getAllTransactionsForAccount(account.getUID()));
 
@@ -403,8 +399,7 @@ public Account buildAccountInstance(@NonNull Cursor c){
      * @param c Cursor pointing to account record in database
      * @return {@link Account} object constructed from database record
      */
-    @NonNull
-    private Account buildSimpleAccountInstance(@NonNull Cursor c) {
+    private Account buildSimpleAccountInstance(Cursor c) {
         Account account = new Account(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME)));
         String uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
         account.setUID(uid);
@@ -426,8 +421,7 @@ private Account buildSimpleAccountInstance(@NonNull Cursor c) {
 	 * @param uid Unique Identifier of account whose parent is to be returned. Should not be null
 	 * @return DB record UID of the parent account, null if the account has no parent
 	 */
-	@Nullable
-    public String getParentAccountUID(@NonNull String uid){
+    public String getParentAccountUID(String uid){
 		Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
 				new String[] {AccountEntry._ID, AccountEntry.COLUMN_PARENT_ACCOUNT_UID},
                 AccountEntry.COLUMN_UID + " = ?",
@@ -452,7 +446,6 @@ public String getParentAccountUID(@NonNull String uid){
      * @return DB record UID of the parent account, null if the account has no parent
      * @see #getParentAccountUID(String)
      */
-    @Nullable
     public String getParentAccountUID(long id){
         return getParentAccountUID(getAccountUID(id));
     }
@@ -462,7 +455,6 @@ public String getParentAccountUID(long id){
 	 * @param rowId Identifier of the account record to be retrieved
 	 * @return {@link Account} object corresponding to database record
 	 */
-	@NonNull
     public Account getAccount(long rowId){
 		Log.v(TAG, "Fetching account with id " + rowId);
 		Cursor c =	fetchRecord(AccountEntry.TABLE_NAME, rowId);
@@ -483,8 +475,7 @@ public Account getAccount(long rowId){
 	 * @param uid Unique ID of the account to be retrieved
 	 * @return {@link Account} object for unique ID <code>uid</code>
 	 */
-	@NonNull
-    public Account getAccount(@NonNull String uid){
+    public Account getAccount(String uid){
 		return getAccount(getID(uid));
 	}	
 	
@@ -493,7 +484,6 @@ public Account getAccount(@NonNull String uid){
      * @param accountId Database row ID of the account
      * @return String color code of account or null if none
      */
-    @Nullable
     public String getAccountColorCode(long accountId){
         Cursor c = mDb.query(AccountEntry.TABLE_NAME,
                 new String[]{AccountEntry._ID, AccountEntry.COLUMN_COLOR_CODE},
@@ -516,7 +506,6 @@ public String getAccountColorCode(long accountId){
      * @param accountId Database row ID of the account
      * @return {@link AccountType} of the account
      */
-    @NonNull
     public AccountType getAccountType(long accountId){
         return getAccountType(getAccountUID(accountId));
     }
@@ -526,7 +515,6 @@ public AccountType getAccountType(long accountId){
 	 * @param accountID Database ID of the account record
 	 * @return Name of the account 
 	 */
-	@NonNull
     public String getName(long accountID) {
 		Cursor c = fetchRecord(AccountEntry.TABLE_NAME, accountID);
         try {
@@ -544,7 +532,6 @@ public String getName(long accountID) {
 	 * Returns a list of all account objects in the system
 	 * @return List of {@link Account}s in the database
 	 */
-	@NonNull
     public List<Account> getAllAccounts(){
 		LinkedList<Account> accounts = new LinkedList<Account>();
 		Cursor c = fetchAllRecords();
@@ -563,7 +550,6 @@ public String getName(long accountID) {
      * No transactions are loaded, just the accounts
      * @return List of {@link Account}s in the database
      */
-    @NonNull
     public List<Account> getSimpleAccountList(){
         LinkedList<Account> accounts = new LinkedList<Account>();
         Cursor c = fetchAccounts(null, null);
@@ -584,8 +570,7 @@ public String getName(long accountID) {
      * No transactions are loaded, just the accounts
      * @return List of {@link Account}s in the database
      */
-    @NonNull
-    public List<Account> getSimpleAccountList(@Nullable String where, @Nullable String[] whereArgs, @Nullable String orderBy){
+    public List<Account> getSimpleAccountList(String where, String[] whereArgs, String orderBy){
         LinkedList<Account> accounts = new LinkedList<Account>();
         Cursor c = fetchAccounts(where, whereArgs, orderBy);
         try {
@@ -602,7 +587,6 @@ public String getName(long accountID) {
 	 * Returns a list of accounts which have transactions that have not been exported yet
 	 * @return List of {@link Account}s with unexported transactions
 	 */
-	@NonNull
     public List<Account> getExportableAccounts(){
         LinkedList<Account> accountsList = new LinkedList<Account>();
         Cursor cursor = mDb.query(
@@ -636,8 +620,7 @@ public String getName(long accountID) {
      * @param currency Currency for the imbalance account
      * @return String unique ID of the account
      */
-    @NonNull
-    public String getOrCreateImbalanceAccountUID(@NonNull Currency currency){
+    public String getOrCreateImbalanceAccountUID(Currency currency){
         String imbalanceAccountName = getImbalanceAccountName(currency);
         String uid = findAccountUidByFullName(imbalanceAccountName);
         if (uid == null){
@@ -657,8 +640,7 @@ public String getOrCreateImbalanceAccountUID(@NonNull Currency currency){
      * @param accountType Type to assign to all accounts created
      * @return String unique ID of the account at bottom of hierarchy
      */
-    @NonNull
-    public String createAccountHierarchy(@NonNull String fullName, @NonNull AccountType accountType) {
+    public String createAccountHierarchy(String fullName, AccountType accountType) {
         if ("".equals(fullName)) {
             throw new IllegalArgumentException("fullName cannot be empty");
         }
@@ -693,7 +675,6 @@ public String createAccountHierarchy(@NonNull String fullName, @NonNull AccountT
      * Returns the unique ID of the opening balance account or creates one if necessary
      * @return String unique ID of the opening balance account
      */
-    @NonNull
     public String getOrCreateOpeningBalanceAccountUID() {
         String openingBalanceAccountName = getOpeningBalanceAccountFullName();
         String uid = findAccountUidByFullName(openingBalanceAccountName);
@@ -708,7 +689,6 @@ public String getOrCreateOpeningBalanceAccountUID() {
      * @param fullName Fully qualified name of the account
      * @return String unique ID of the account
      */
-    @Nullable
     public String findAccountUidByFullName(String fullName){
         Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
                 AccountEntry.COLUMN_FULL_NAME + "= ?", new String[]{fullName},
@@ -729,7 +709,6 @@ public String findAccountUidByFullName(String fullName){
      * GnuCash ROOT accounts are ignored
 	 * @return {@link Cursor} to all account records
 	 */
-    @NonNull
     @Override
 	public Cursor fetchAllRecords(){
 		Log.v(TAG, "Fetching all accounts from db");
@@ -747,7 +726,6 @@ public Cursor fetchAllRecords(){
      * GnuCash ROOT accounts are ignored
      * @return {@link Cursor} to all account records
      */
-    @NonNull
     public Cursor fetchAllRecordsOrderedByFullName(){
         Log.v(TAG, "Fetching all accounts from db");
         String selection =  AccountEntry.COLUMN_TYPE + " != ?" ;
@@ -759,7 +737,6 @@ public Cursor fetchAllRecordsOrderedByFullName(){
                 AccountEntry.COLUMN_FULL_NAME + " ASC");
     }
 
-    @NonNull
     @Override
     public Cursor fetchRecord(long rowId) {
         return fetchRecord(AccountEntry.TABLE_NAME, rowId);
@@ -783,8 +760,7 @@ public boolean deleteRecord(long rowId) {
      * @param whereArgs where args
 	 * @return Cursor set of accounts which fulfill <code>where</code>
 	 */
-    @NonNull
-	public Cursor fetchAccounts(@Nullable String where, @Nullable String[] whereArgs) {
+	public Cursor fetchAccounts(String where, String[] whereArgs) {
         Log.v(TAG, "Fetching all accounts from db where " + where);
         return mDb.query(AccountEntry.TABLE_NAME,
                 null, where, whereArgs, null, null,
@@ -799,8 +775,7 @@ public Cursor fetchAccounts(@Nullable String where, @Nullable String[] whereArgs
      * @param orderBy orderBy clause
      * @return Cursor set of accounts which fulfill <code>where</code>
      */
-    @NonNull
-    public Cursor fetchAccounts(@Nullable String where, @Nullable String[] whereArgs, @Nullable String orderBy){
+    public Cursor fetchAccounts(String where, String[] whereArgs, String orderBy){
         Log.v(TAG, "Fetching all accounts from db where " + where + " order by " + orderBy);
         return mDb.query(AccountEntry.TABLE_NAME,
                 null, where, whereArgs, null, null,
@@ -813,8 +788,7 @@ public Cursor fetchAccounts(@Nullable String where, @Nullable String[] whereArgs
      * @param whereArgs where args
      * @return Cursor set of accounts which fulfill <code>where</code>
      */
-    @NonNull
-    public Cursor fetchAccountsOrderedByFullName(@Nullable String where, @Nullable String[] whereArgs) {
+    public Cursor fetchAccountsOrderedByFullName(String where, String[] whereArgs) {
         Log.v(TAG, "Fetching all accounts from db where " + where);
         return mDb.query(AccountEntry.TABLE_NAME,
                 null, where, whereArgs, null, null,
@@ -824,7 +798,6 @@ public Cursor fetchAccountsOrderedByFullName(@Nullable String where, @Nullable S
      * Returns the balance of an account while taking sub-accounts into consideration
      * @return Account Balance of an account including sub-accounts
      */
-    @NonNull
     public Money getAccountBalance(long accountId){
         Log.d(TAG, "Computing account balance for account ID " + accountId);
         String currencyCode = getCurrencyCode(accountId);
@@ -849,8 +822,7 @@ public Money getAccountBalance(long accountId){
      * Returns the balance of an account while taking sub-accounts into consideration
      * @return Account Balance of an account including sub-accounts
      */
-    @NonNull
-    public Money getAccountBalance(@NonNull String accountUID){
+    public Money getAccountBalance(String accountUID){
         Log.d(TAG, "Computing account balance for account ID " + accountUID);
         String currencyCode = mTransactionsAdapter.getCurrencyCode(accountUID);
         boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
@@ -876,8 +848,7 @@ public Money getAccountBalance(@NonNull String accountUID){
      * @param whereArgs  Condition args to filter accounts
      * @return The descendant accounts list.
      */
-    @NonNull
-    public List<String> getDescendantAccountUIDs(@NonNull String accountUID, @Nullable String where, @Nullable String[] whereArgs) {
+    public List<String> getDescendantAccountUIDs(String accountUID, String where, String[] whereArgs) {
         // accountsList will hold accountUID with all descendant accounts.
         // accountsListLevel will hold descendant accounts of the same level
         ArrayList<String> accountsList = new ArrayList<String>();
@@ -915,7 +886,6 @@ public Money getAccountBalance(@NonNull String accountUID){
      * @param accountId Account ID whose sub-accounts are to be retrieved
      * @return List of IDs for the sub-accounts for account <code>accountId</code>
      */
-    @NonNull
     public List<Long> getSubAccountIds(long accountId){
         List<Long> subAccounts = new ArrayList<Long>();
         String accountUID;
@@ -947,8 +917,7 @@ public Money getAccountBalance(@NonNull String accountUID){
      * @param accountUID GUID of the parent account
      * @return {@link Cursor} to the sub accounts data set
      */
-    @NonNull
-    public Cursor fetchSubAccounts(@NonNull String accountUID) {
+    public Cursor fetchSubAccounts(String accountUID) {
         Log.v(TAG, "Fetching sub accounts for account id " + accountUID);
         return mDb.query(AccountEntry.TABLE_NAME,
                 null,
@@ -960,7 +929,6 @@ public Cursor fetchSubAccounts(@NonNull String accountUID) {
      * Returns the top level accounts i.e. accounts with no parent or with the GnuCash ROOT account as parent
      * @return Cursor to the top level accounts
      */
-    @NonNull
     public Cursor fetchTopLevelAccounts() {
         //condition which selects accounts with no parent, whose UID is not ROOT and whose name is not ROOT
         return fetchAccounts("(" + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL OR "
@@ -973,7 +941,6 @@ public Cursor fetchTopLevelAccounts() {
      * Returns a cursor to accounts which have recently had transactions added to them
      * @return Cursor to recently used accounts
      */
-    @NonNull
     public Cursor fetchRecentAccounts(int numberOfRecent) {
         return mDb.query(TransactionEntry.TABLE_NAME
                         + " LEFT OUTER JOIN " + SplitEntry.TABLE_NAME + " ON "
@@ -995,7 +962,6 @@ public Cursor fetchRecentAccounts(int numberOfRecent) {
      * Fetches favorite accounts from the database
      * @return Cursor holding set of favorite accounts
      */
-    @NonNull
     public Cursor fetchFavoriteAccounts(){
         Log.v(TAG, "Fetching favorite accounts from db");
         String condition = AccountEntry.COLUMN_FAVORITE + " = 1";
@@ -1013,7 +979,6 @@ public Cursor fetchFavoriteAccounts(){
      * <p><b>Note:</b> NULL is an acceptable response, be sure to check for it</p>
      * @return Unique ID of the GnuCash root account.
      */
-    @Nullable
     public String getGnuCashRootAccountUID() {
         Cursor cursor = fetchAccounts(AccountEntry.COLUMN_TYPE + "= ?",
                 new String[]{AccountType.ROOT.name()});
@@ -1033,7 +998,7 @@ public String getGnuCashRootAccountUID() {
      * @param accountUID String Unique ID (GUID) of the account
      * @return Number of sub accounts
      */
-    public int getSubAccountCount(@NonNull String accountUID){
+    public int getSubAccountCount(String accountUID){
         //TODO: at some point when API level 11 and above only is supported, use DatabaseUtils.queryNumEntries
 
         String queryCount = "SELECT COUNT(*) FROM " + AccountEntry.TABLE_NAME + " WHERE "
@@ -1066,7 +1031,7 @@ public int getTotalAccountCount() {
 	 * @return Record ID belonging to account UID
 	 */
     @Override
-	public long getID(@NonNull String accountUID){
+	public long getID(String accountUID){
 		long id = -1;
 		Cursor c = mDb.query(AccountEntry.TABLE_NAME,
 				new String[]{AccountEntry._ID},
@@ -1081,7 +1046,6 @@ public long getID(@NonNull String accountUID){
 		return id;
 	}
 
-    @NonNull
     @Override
     public String getUID(long id) {
         return getAccountUID(id);
@@ -1092,7 +1056,6 @@ public String getUID(long id) {
 	 * @param id Record ID of the account to be removed
 	 * @return Currency code of the account
 	 */
-    @NonNull
 	public String getCurrencyCode(long id){
 		return mTransactionsAdapter.getCurrencyCode(id);
 	}
@@ -1104,8 +1067,7 @@ public String getCurrencyCode(long id){
      * @throws java.lang.IllegalArgumentException if accountUID does not exist
      * @see #getFullyQualifiedAccountName(String)
      */
-    @NonNull
-    public String getAccountName(@NonNull String accountUID){
+    public String getAccountName(String accountUID){
         Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
                 new String[]{AccountEntry._ID, AccountEntry.COLUMN_NAME},
                 AccountEntry.COLUMN_UID + " = ?",
@@ -1148,7 +1110,6 @@ public long getDefaultTransferAccountID(long accountID){
      * @param accountUID Unique ID of account
      * @return Fully qualified (with parent hierarchy) account name
      */
-    @NonNull
     public String getFullyQualifiedAccountName(String accountUID){
         String accountName = getAccountName(accountUID);
         String parentAccountUID = getParentAccountUID(accountUID);
@@ -1167,8 +1128,7 @@ public String getFullyQualifiedAccountName(String accountUID){
      * @param accountUID the account to retrieve full name
      * @return full name registered in DB
      */
-    @Nullable
-    public String getAccountFullName(@NonNull String accountUID) {
+    public String getAccountFullName(String accountUID) {
         Cursor cursor = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_FULL_NAME},
                 AccountEntry.COLUMN_UID + " = ?", new String[]{accountUID},
                 null, null, null);
@@ -1189,7 +1149,6 @@ public String getAccountFullName(@NonNull String accountUID) {
      * @param accountId Database record ID of account
      * @return Fully qualified (with parent hierarchy) account name
      */
-    @NonNull
     public String getFullyQualifiedAccountName(long accountId){
         return getFullyQualifiedAccountName(getAccountUID(accountId));
     }
@@ -1199,7 +1158,7 @@ public String getFullyQualifiedAccountName(long accountId){
      * @param accountUID Unique identifier of the account
      * @return <code>true</code> if the account is a placeholder account, <code>false</code> otherwise
      */
-    public boolean isPlaceholderAccount(@NonNull String accountUID) {
+    public boolean isPlaceholderAccount(String accountUID) {
         Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
                 new String[]{AccountEntry.COLUMN_PLACEHOLDER},
                 AccountEntry.COLUMN_UID + " = ?",
@@ -1245,7 +1204,6 @@ public boolean isFavoriteAccount(long accountId){
     /**
      * Updates all opening balances to the current account balances
      */
-    @NonNull
     public List<Transaction> getAllOpeningBalanceTransactions(){
         Cursor cursor = fetchAccounts(null, null);
         List<Transaction> openingTransactions = new ArrayList<Transaction>();
@@ -1286,8 +1244,7 @@ public boolean isFavoriteAccount(long accountId){
      * @param currency Currency of the transaction
      * @return Imbalance account name
      */
-    @NonNull
-    public static String getImbalanceAccountName(@NonNull Currency currency){
+    public static String getImbalanceAccountName(Currency currency){
         return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
     }
 
@@ -1296,7 +1253,6 @@ public static String getImbalanceAccountName(@NonNull Currency currency){
      * For the English locale, it will be "Equity:Opening Balances"
      * @return Fully qualified account name of the opening balances account
      */
-    @NonNull
     public static String getOpeningBalanceAccountFullName(){
         Context context = GnuCashApplication.getAppContext();
         String parentEquity = context.getString(R.string.account_name_equity).trim();
@@ -1312,7 +1268,6 @@ public static String getOpeningBalanceAccountFullName(){
      * Returns the list of currencies in the database
      * @return List of currencies in the database
      */
-    @NonNull
     public List<Currency> getCurrencies(){
         Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
                 null, null, null, null, null, null);
@@ -1339,7 +1294,7 @@ public int deleteAllRecords(){
         return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
 
-    public int getTransactionMaxSplitNum(@NonNull String accountUID) {
+    public int getTransactionMaxSplitNum(String accountUID) {
         Cursor cursor = mDb.query("trans_extra_info",
                 new String[]{"MAX(trans_split_count)"},
                 "trans_acct_t_uid IN ( SELECT DISTINCT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 07338f04..ecd59deb 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -19,8 +19,6 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import org.gnucash.android.db.DatabaseSchema.*;
 import org.gnucash.android.model.AccountType;
@@ -41,14 +39,13 @@
 	/**
 	 * SQLite database
 	 */
-	@NonNull
     protected final SQLiteDatabase mDb;
 
     /**
      * Opens the database adapter with an existing database
      * @param db SQLiteDatabase object
      */
-    public DatabaseAdapter(@NonNull SQLiteDatabase db) {
+    public DatabaseAdapter(SQLiteDatabase db) {
         this.mDb = db;
         if (!db.isOpen() || db.isReadOnly())
             throw new IllegalArgumentException("Database not open or is read-only. Require writeable database");
@@ -162,8 +159,7 @@ public boolean isOpen(){
 	 * @param rowId ID of record to be retrieved
 	 * @return {@link Cursor} to record retrieved
 	 */
-    @NonNull
-	protected Cursor fetchRecord(@NonNull String tableName, long rowId){
+	protected Cursor fetchRecord(String tableName, long rowId){
 		return mDb.query(tableName, null, DatabaseSchema.CommonColumns._ID + "=" + rowId,
 				null, null, null, null);
 	}
@@ -173,8 +169,7 @@ protected Cursor fetchRecord(@NonNull String tableName, long rowId){
 	 * @param tableName Name of table in database
 	 * @return {@link Cursor} to all records in table <code>tableName</code>
 	 */
-    @NonNull
-	protected Cursor fetchAllRecords(@NonNull String tableName){
+	protected Cursor fetchAllRecords(String tableName){
 		return mDb.query(tableName, 
         		null, null, null, null, null, null);
 	}
@@ -186,7 +181,7 @@ protected Cursor fetchAllRecords(@NonNull String tableName){
 	 * @param rowId ID of record to be deleted
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
 	 */
-	protected boolean deleteRecord(@NonNull String tableName, long rowId){
+	protected boolean deleteRecord(String tableName, long rowId){
 		return mDb.delete(tableName, DatabaseSchema.CommonColumns._ID + "=" + rowId, null) > 0;
 	}
 
@@ -194,7 +189,7 @@ protected boolean deleteRecord(@NonNull String tableName, long rowId){
      * Deletes all records in the database
      * @return Number of deleted records
      */
-    protected int deleteAllRecords(@NonNull String tableName){
+    protected int deleteAllRecords(String tableName){
         return mDb.delete(tableName, null, null);
     }
 
@@ -203,14 +198,12 @@ protected int deleteAllRecords(@NonNull String tableName){
      * @param rowId ID of record to be retrieved
      * @return {@link Cursor} to record retrieved
      */
-    @NonNull
     public abstract Cursor fetchRecord(long rowId);
 
     /**
      * Retrieves all records from database table corresponding to this adapter
      * @return {@link Cursor} to all records in table
      */
-    @NonNull
     public abstract Cursor fetchAllRecords();
 
     /**
@@ -233,8 +226,7 @@ protected int deleteAllRecords(@NonNull String tableName){
      * @return Currency code of the account. "" if accountUID
      *      does not exist in DB
      */
-    @NonNull
-    public String getCurrencyCode(@NonNull String accountUID) {
+    public String getCurrencyCode(String accountUID) {
         Cursor cursor = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
                 new String[] {DatabaseSchema.AccountEntry.COLUMN_CURRENCY},
                 DatabaseSchema.AccountEntry.COLUMN_UID + "= ?",
@@ -256,8 +248,7 @@ public String getCurrencyCode(@NonNull String accountUID) {
      * @return {@link org.gnucash.android.model.AccountType} of the account.
      * @throws java.lang.IllegalArgumentException if accountUID does not exist in DB,
      */
-    @NonNull
-    public AccountType getAccountType(@NonNull String accountUID){
+    public AccountType getAccountType(String accountUID){
         String type = "";
         Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
                 new String[]{DatabaseSchema.AccountEntry.COLUMN_TYPE},
@@ -281,7 +272,6 @@ public AccountType getAccountType(@NonNull String accountUID){
      * @return String containing UID of account
      * @throws java.lang.IllegalArgumentException if accountRowID does not exist
      */
-    @NonNull
     public String getAccountUID(long accountRowID) {
         Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
                 new String[]{DatabaseSchema.AccountEntry.COLUMN_UID},
@@ -304,7 +294,7 @@ public String getAccountUID(long accountRowID) {
      * @return Database row ID of the account
      * @throws java.lang.IllegalArgumentException if accountUID does not exist
      */
-    public long getAccountID(@NonNull String accountUID){
+    public long getAccountID(String accountUID){
         Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
                 new String[]{DatabaseSchema.AccountEntry._ID},
                 DatabaseSchema.AccountEntry.COLUMN_UID + "= ?",
@@ -325,14 +315,13 @@ public long getAccountID(@NonNull String accountUID){
      * @param uid GUID of the record
      * @return Long database identifier of the record
      */
-    public abstract long getID(@NonNull String uid);
+    public abstract long getID(String uid);
 
     /**
      * Returns the global unique identifier of the record
      * @param id Database record ID of the entry
      * @return String GUID of the record
      */
-    @NonNull
     public abstract String getUID(long id);
 
     /**
@@ -342,7 +331,7 @@ public long getAccountID(@NonNull String accountUID){
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateRecord(@NonNull String tableName, long recordId, @NonNull String columnKey, @Nullable String newValue) {
+    public int updateRecord(String tableName, long recordId, String columnKey, String newValue) {
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index a77db545..444b6c42 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -22,8 +22,6 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Log;
 import org.gnucash.android.model.AccountType;
@@ -49,7 +47,7 @@
 
     protected static final String TAG = "SplitsDbAdapter";
 
-    public SplitsDbAdapter(@NonNull SQLiteDatabase db) {
+    public SplitsDbAdapter(SQLiteDatabase db) {
         super(db);
     }
 
@@ -59,7 +57,7 @@ public SplitsDbAdapter(@NonNull SQLiteDatabase db) {
      * @param split {@link org.gnucash.android.model.Split} to be recorded in DB
      * @return Record ID of the newly saved split
      */
-    public long addSplit(@NonNull Split split){
+    public long addSplit(Split split){
         ContentValues contentValues = new ContentValues();
         contentValues.put(SplitEntry.COLUMN_UID,        split.getUID());
         contentValues.put(SplitEntry.COLUMN_AMOUNT,     split.getAmount().absolute().toPlainString());
@@ -85,7 +83,7 @@ public long addSplit(@NonNull Split split){
      * @param splitList {@link org.gnucash.android.model.Split} to be recorded in DB
      * @return Number of records of the newly saved split
      */
-    public long bulkAddSplits(@NonNull List<Split> splitList) {
+    public long bulkAddSplits(List<Split> splitList) {
         long nRow = 0;
         try {
             mDb.beginTransaction();
@@ -126,8 +124,7 @@ public long bulkAddSplits(@NonNull List<Split> splitList) {
      * @param cursor Cursor pointing to transaction record in database
      * @return {@link org.gnucash.android.model.Split} instance
      */
-    @NonNull
-    public Split buildSplitInstance(@NonNull Cursor cursor){
+    public Split buildSplitInstance(Cursor cursor){
         String uid          = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_UID));
         String amountString = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_AMOUNT));
         String typeName     = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_TYPE));
@@ -153,8 +150,7 @@ public Split buildSplitInstance(@NonNull Cursor cursor){
      * @param uid Unique Identifier String of the split transaction
      * @return {@link org.gnucash.android.model.Split} instance
      */
-    @NonNull
-    public Split getSplit(@NonNull String uid){
+    public Split getSplit(String uid){
         return getSplit(getID(uid));
     }
 
@@ -163,7 +159,6 @@ public Split getSplit(@NonNull String uid){
      * @param id Database record ID of the split
      * @return {@link org.gnucash.android.model.Split} instance
      */
-    @NonNull
     public Split getSplit(long id){
         Cursor cursor = fetchRecord(id);
         try {
@@ -184,8 +179,7 @@ public Split getSplit(long id){
      * @param accountUID String unique ID of account
      * @return Balance of the splits for this account
      */
-    @NonNull
-    public Money computeSplitBalance(@NonNull String accountUID) {
+    public Money computeSplitBalance(String accountUID) {
         Cursor cursor = fetchSplitsForAccount(accountUID);
         String currencyCode = getCurrencyCode(accountUID);
         Money splitSum = new Money("0", currencyCode);
@@ -234,8 +228,7 @@ public Money computeSplitBalance(@NonNull String accountUID) {
      * @param hasDebitNormalBalance Does the final balance has normal debit credit meaning
      * @return Balance of the splits for this account
      */
-    @NonNull
-    public Money computeSplitBalance(@NonNull List<String> accountUIDList, @NonNull String currencyCode, boolean hasDebitNormalBalance){
+    public Money computeSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance){
         //Cursor cursor = fetchSplitsForAccount(accountUID);
         if (accountUIDList.size() == 0){
             return new Money("0", currencyCode);
@@ -271,8 +264,7 @@ public Money computeSplitBalance(@NonNull List<String> accountUIDList, @NonNull
      * @param transactionUID String unique ID of transaction
      * @return List of {@link org.gnucash.android.model.Split}s
      */
-    @NonNull
-    public List<Split> getSplitsForTransaction(@NonNull String transactionUID){
+    public List<Split> getSplitsForTransaction(String transactionUID){
         Cursor cursor = fetchSplitsForTransaction(transactionUID);
         List<Split> splitList = new ArrayList<Split>();
         try {
@@ -292,7 +284,6 @@ public Money computeSplitBalance(@NonNull List<String> accountUIDList, @NonNull
      * @see #getSplitsForTransaction(String)
      * @see #getTransactionUID(long)
      */
-    @NonNull
     public List<Split> getSplitsForTransaction(long transactionID){
         return getSplitsForTransaction(getTransactionUID(transactionID));
     }
@@ -303,8 +294,7 @@ public Money computeSplitBalance(@NonNull List<String> accountUIDList, @NonNull
      * @param accountUID String unique ID of account
      * @return List of splits
      */
-    @NonNull
-    public List<Split> getSplitsForTransactionInAccount(@NonNull String transactionUID, @NonNull String accountUID){
+    public List<Split> getSplitsForTransactionInAccount(String transactionUID, String accountUID){
         Cursor cursor = fetchSplitsForTransactionAndAccount(transactionUID, accountUID);
         List<Split> splitList = new ArrayList<Split>();
         if (cursor != null){
@@ -323,8 +313,7 @@ public Money computeSplitBalance(@NonNull List<String> accountUIDList, @NonNull
      * @param sortOrder Sort order for the returned records
      * @return Cursor to split records
      */
-    @NonNull
-    public Cursor fetchSplits(@Nullable String where, @Nullable String[] whereArgs, @Nullable String sortOrder){
+    public Cursor fetchSplits(String where, String[] whereArgs, String sortOrder){
         return mDb.query(SplitEntry.TABLE_NAME,
                 null, where, whereArgs, null, null, sortOrder);
     }
@@ -335,7 +324,7 @@ public Cursor fetchSplits(@Nullable String where, @Nullable String[] whereArgs,
      * @return Database record ID of split
      */
     @Override
-    public long getID(@NonNull String uid){
+    public long getID(String uid){
         Cursor cursor = mDb.query(SplitEntry.TABLE_NAME,
                 new String[] {SplitEntry._ID},
                 SplitEntry.COLUMN_UID + " = ?", new String[]{uid}, null, null, null);
@@ -356,7 +345,6 @@ public long getID(@NonNull String uid){
      * @param id Database record ID of the split
      * @return String unique identifier of the split
      */
-    @NonNull
     @Override
     public String getUID(long id){
         Cursor cursor = mDb.query(SplitEntry.TABLE_NAME,
@@ -378,8 +366,7 @@ public String getUID(long id){
      * @param transactionUID Unique idendtifier of the transaction
      * @return Cursor to splits
      */
-    @NonNull
-    public Cursor fetchSplitsForTransaction(@NonNull String transactionUID){
+    public Cursor fetchSplitsForTransaction(String transactionUID){
         Log.v(TAG, "Fetching all splits for transaction UID " + transactionUID);
         return mDb.query(SplitEntry.TABLE_NAME,
                 null, SplitEntry.COLUMN_TRANSACTION_UID + " = ?",
@@ -392,8 +379,7 @@ public Cursor fetchSplitsForTransaction(@NonNull String transactionUID){
      * @param accountUID String unique ID of account
      * @return Cursor containing splits dataset
      */
-    @NonNull
-    public Cursor fetchSplitsForAccount(@NonNull String accountUID){
+    public Cursor fetchSplitsForAccount(String accountUID){
         Log.d(TAG, "Fetching all splits for account UID " + accountUID);
 
         //This is more complicated than a simple "where account_uid=?" query because
@@ -420,8 +406,7 @@ public Cursor fetchSplitsForAccount(@NonNull String accountUID){
      * @param accountUID String unique ID of account
      * @return Cursor to splits data set
      */
-    @Nullable
-    public Cursor fetchSplitsForTransactionAndAccount(@Nullable String transactionUID, @Nullable String accountUID){
+    public Cursor fetchSplitsForTransactionAndAccount(String transactionUID, String accountUID){
         if (transactionUID == null || accountUID == null)
             return null;
 
@@ -439,7 +424,6 @@ public Cursor fetchSplitsForTransactionAndAccount(@Nullable String transactionUI
      * @param transactionId Database record ID of the transaction
      * @return String unique ID of the transaction or null if transaction with the ID cannot be found.
      */
-    @NonNull
     public String getTransactionUID(long transactionId){
         Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
                 new String[]{TransactionEntry.COLUMN_UID},
@@ -457,13 +441,11 @@ public String getTransactionUID(long transactionId){
         }
     }
 
-    @NonNull
     @Override
     public Cursor fetchRecord(long rowId) {
         return fetchRecord(SplitEntry.TABLE_NAME, rowId);
     }
 
-    @NonNull
     @Override
     public Cursor fetchAllRecords() {
         return fetchAllRecords(SplitEntry.TABLE_NAME);
@@ -496,7 +478,7 @@ public boolean deleteRecord(long rowId) {
      * @param uid String unique ID of split
      * @return <code>true</code> if the split was deleted, <code>false</code> otherwise
      */
-    public boolean deleteSplit(@NonNull String uid) {
+    public boolean deleteSplit(String uid) {
         long id = getID(uid);
         return deleteRecord(id);
     }
@@ -506,7 +488,7 @@ public boolean deleteSplit(@NonNull String uid) {
      * @param transactionUID Unique idendtifier of the transaction
      * @return Database record ID for the transaction
      */
-    public long getTransactionID(@NonNull String transactionUID) {
+    public long getTransactionID(String transactionUID) {
         Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
                 new String[]{TransactionEntry._ID},
                 TransactionEntry.COLUMN_UID + "=?",
@@ -542,7 +524,7 @@ public boolean deleteSplitsForTransaction(long transactionId) {
      * @param accountUID String unique ID of account
      * @return Number of records deleted
      */
-    public int deleteSplitsForTransactionAndAccount(@NonNull String transactionUID, @NonNull String accountUID){
+    public int deleteSplitsForTransactionAndAccount(String transactionUID, String accountUID){
         int deletedCount = mDb.delete(SplitEntry.TABLE_NAME,
                 SplitEntry.COLUMN_TRANSACTION_UID + "= ? AND " + SplitEntry.COLUMN_ACCOUNT_UID + "= ?",
                 new String[]{transactionUID, accountUID});
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index ecb8902e..44b668b2 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -25,8 +25,6 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
@@ -45,19 +43,17 @@
  */
 public class TransactionsDbAdapter extends DatabaseAdapter {
 
-    @NonNull
     private final SplitsDbAdapter mSplitsDbAdapter;
 
     /**
      * Overloaded constructor. Creates adapter for already open db
      * @param db SQlite db instance
      */
-    public TransactionsDbAdapter(@NonNull SQLiteDatabase db, @NonNull SplitsDbAdapter splitsDbAdapter) {
+    public TransactionsDbAdapter(SQLiteDatabase db, SplitsDbAdapter splitsDbAdapter) {
         super(db);
         mSplitsDbAdapter = splitsDbAdapter;
     }
 
-    @NonNull
     public SplitsDbAdapter getSplitDbAdapter() {
         return mSplitsDbAdapter;
     }
@@ -69,7 +65,7 @@ public SplitsDbAdapter getSplitDbAdapter() {
 	 * @param transaction {@link Transaction} to be inserted to database
 	 * @return Database row ID of the inserted transaction
 	 */
-	public long addTransaction(@NonNull Transaction transaction){
+	public long addTransaction(Transaction transaction){
 		ContentValues contentValues = new ContentValues();
 		contentValues.put(TransactionEntry.COLUMN_DESCRIPTION, transaction.getDescription());
 		contentValues.put(TransactionEntry.COLUMN_UID,          transaction.getUID());
@@ -101,7 +97,7 @@ public long addTransaction(@NonNull Transaction transaction){
      * @param transactionList {@link Transaction} transactions to be inserted to database
      * @return Number of transactions inserted
      */
-    public long bulkAddTransactions(@NonNull List<Transaction> transactionList){
+    public long bulkAddTransactions(List<Transaction> transactionList){
         List<Split> splitList = new ArrayList<Split>(transactionList.size()*3);
         long rowInserted = 0;
         try {
@@ -158,7 +154,7 @@ public long bulkAddTransactions(@NonNull List<Transaction> transactionList){
 	 * @param uid Unique Identifier of transaction to be retrieved
 	 * @return Database row ID of transaction with UID <code>uid</code>
 	 */
-	public long fetchTransactionWithUID(@NonNull String uid){
+	public long fetchTransactionWithUID(String uid){
 		Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
 				new String[] {TransactionEntry._ID},
                 TransactionEntry.COLUMN_UID + " = ?",
@@ -180,7 +176,6 @@ public long fetchTransactionWithUID(@NonNull String uid){
 	 * @param rowId Identifier of the transaction record to be retrieved
 	 * @return {@link Transaction} object corresponding to database record
 	 */
-	@NonNull
     public Transaction getTransaction(long rowId) {
         Log.v(TAG, "Fetching transaction with id " + rowId);
         Cursor c = fetchRecord(TransactionEntry.TABLE_NAME, rowId);
@@ -203,8 +198,7 @@ public Transaction getTransaction(long rowId) {
 	 * @return Cursor holding set of transactions for particular account
      * @throws java.lang.IllegalArgumentException if the accountUID is null
 	 */
-    @NonNull
-	public Cursor fetchAllTransactionsForAccount(@NonNull String accountUID){
+	public Cursor fetchAllTransactionsForAccount(String accountUID){
         if (mDb.getVersion() < DatabaseSchema.SPLITS_DB_VERSION){ //legacy from previous database format
             return mDb.query(TransactionEntry.TABLE_NAME, null,
                     "((" + SplitEntry.COLUMN_ACCOUNT_UID + " = '" + accountUID + "') "
@@ -234,7 +228,6 @@ public Cursor fetchAllTransactionsForAccount(@NonNull String accountUID){
      * They are not considered when computing account balances</p>
      * @return Cursor holding set of all recurring transactions
      */
-    @NonNull
     public Cursor fetchAllRecurringTransactions(){
         return mDb.query(TransactionEntry.TABLE_NAME,
                 null,
@@ -249,7 +242,6 @@ public Cursor fetchAllRecurringTransactions(){
 	 * @param accountID ID of the account whose transactions are to be retrieved
 	 * @return Cursor holding set of transactions for particular account
 	 */
-    @NonNull
 	public Cursor fetchAllTransactionsForAccount(long accountID){
 		return fetchAllTransactionsForAccount(getAccountUID(accountID));
 	}
@@ -259,8 +251,7 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
 	 * @param accountUID UID of account whose transactions are to be retrieved
 	 * @return List of {@link Transaction}s for account with UID <code>accountUID</code>
 	 */
-	@NonNull
-    public List<Transaction> getAllTransactionsForAccount(@NonNull String accountUID){
+    public List<Transaction> getAllTransactionsForAccount(String accountUID){
 		Cursor c = fetchAllTransactionsForAccount(accountUID);
 		ArrayList<Transaction> transactionsList = new ArrayList<Transaction>();
         try {
@@ -277,7 +268,6 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
      * Returns all transaction instances in the database.
      * @return List of all transactions
      */
-    @NonNull
     public List<Transaction> getAllTransactions(){
         Cursor cursor = fetchAllRecords();
         List<Transaction> transactions = new ArrayList<Transaction>();
@@ -291,8 +281,7 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
-    @NonNull
-    public Cursor fetchTransactionsWithSplits(@Nullable String [] columns, @Nullable String where, @Nullable String[] whereArgs, @NonNull String orderBy) {
+    public Cursor fetchTransactionsWithSplits(String [] columns, String where, String[] whereArgs, String orderBy) {
         return mDb.query(TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
                         " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
                         " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID,
@@ -300,8 +289,7 @@ public Cursor fetchTransactionsWithSplits(@Nullable String [] columns, @Nullable
                 orderBy);
     }
 
-    @NonNull
-    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(@Nullable String [] columns, @Nullable String where, @Nullable String[] whereArgs, @Nullable String orderBy) {
+    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
         // trans_split_acct , trans_extra_info ON trans_extra_info.trans_acct_t_uid = transactions_uid ,
         // accounts AS account1 ON account1.uid = trans_extra_info.trans_acct_a_uid
@@ -342,8 +330,7 @@ public int getTotalTransactionsCount() {
 	 * @param c Cursor pointing to transaction record in database
 	 * @return {@link Transaction} object constructed from database record
 	 */
-	@NonNull
-    public Transaction buildTransactionInstance(@NonNull Cursor c){
+    public Transaction buildTransactionInstance(Cursor c){
 		String name   = c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_DESCRIPTION));
 		Transaction transaction = new Transaction(name);
 		transaction.setUID(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
@@ -389,7 +376,6 @@ public Transaction buildTransactionInstance(@NonNull Cursor c){
 	 * @return Currency code of the account with Id <code>accountId</code>
 	 * @see #getCurrencyCode(String)
 	 */
-	@NonNull
     public String getCurrencyCode(long accountId){
 		String accountUID = getAccountUID(accountId);
 		return getCurrencyCode(accountUID);
@@ -402,8 +388,7 @@ public String getCurrencyCode(long accountId){
      * @param accountUID GUID of the account
      * @return {@link org.gnucash.android.model.Money} balance of the transaction for that account
      */
-    @NonNull
-    public Money getBalance(@NonNull String transactionUID, @NonNull String accountUID){
+    public Money getBalance(String transactionUID, String accountUID){
         List<Split> splitList = mSplitsDbAdapter.getSplitsForTransactionInAccount(
                 transactionUID, accountUID);
 
@@ -415,7 +400,6 @@ public Money getBalance(@NonNull String transactionUID, @NonNull String accountU
      * @param transactionId Database record ID of transaction
      * @return String unique identifier of the transaction
      */
-    @NonNull
     @Override
     public String getUID(long transactionId) {
         Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
@@ -450,7 +434,7 @@ public boolean deleteRecord(long rowId){
 	 * @param uid String unique ID of transaction
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
 	 */
-	public boolean deleteTransaction(@NonNull String uid){
+	public boolean deleteTransaction(String uid){
         return deleteRecord(getID(uid));
 	}
 	
@@ -470,7 +454,7 @@ public int deleteAllRecords(){
 	 * @param dstAccountUID GUID of the account to which the transaction will be assigned
 	 * @return Number of transactions splits affected
 	 */
-	public int moveTransaction(@NonNull String transactionUID, @NonNull String srcAccountUID, @NonNull String dstAccountUID){
+	public int moveTransaction(String transactionUID, String srcAccountUID, String dstAccountUID){
 		Log.i(TAG, "Moving transaction ID " + transactionUID
                 + " splits from " + srcAccountUID + " to account " + dstAccountUID);
 
@@ -513,7 +497,7 @@ public long getAllTransactionsCount() {
      * @return Database record ID for the transaction
      */
     @Override
-    public long getID(@NonNull String transactionUID){
+    public long getID(String transactionUID){
         Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
                 new String[]{TransactionEntry._ID},
                 TransactionEntry.COLUMN_UID + "='" + transactionUID + "'",
@@ -529,13 +513,11 @@ public long getID(@NonNull String transactionUID){
         }
     }
 
-    @NonNull
     @Override
     public Cursor fetchAllRecords() {
         return fetchAllRecords(TransactionEntry.TABLE_NAME);
     }
 
-    @NonNull
     @Override
     public Cursor fetchRecord(long rowId) {
         return fetchRecord(TransactionEntry.TABLE_NAME, rowId);
@@ -547,8 +529,7 @@ public Cursor fetchRecord(long rowId) {
      * @param prefix Starting characters of the transaction name
      * @return Cursor to the data set containing all matching transactions
      */
-    @NonNull
-    public Cursor fetchTransactionsStartingWith(@NonNull String prefix){
+    public Cursor fetchTransactionsStartingWith(String prefix){
         return mDb.query(TransactionEntry.TABLE_NAME,
                 new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_DESCRIPTION},
                 TransactionEntry.COLUMN_DESCRIPTION + " LIKE '" + prefix + "%'",
@@ -563,11 +544,11 @@ public Cursor fetchTransactionsStartingWith(@NonNull String prefix){
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateTransaction(@NonNull String transactionUID, @NonNull String columnKey, @Nullable String newValue){
+    public int updateTransaction(String transactionUID, String columnKey, String newValue){
         return updateRecord(TransactionEntry.TABLE_NAME, getID(transactionUID), columnKey, newValue);
     }
 
-    public int updateTransaction(@NonNull ContentValues contentValues, @Nullable String whereClause, @Nullable String[] whereArgs){
+    public int updateTransaction(ContentValues contentValues, String whereClause, String[] whereArgs){
         return mDb.update(TransactionEntry.TABLE_NAME, contentValues, whereClause, whereArgs);
     }
 
@@ -576,7 +557,7 @@ public int updateTransaction(@NonNull ContentValues contentValues, @Nullable Str
      * The interval period is packaged within the transaction
      * @param recurringTransaction Transaction which is to be recurring
      */
-    public void scheduleTransaction(@NonNull Transaction recurringTransaction) {
+    public void scheduleTransaction(Transaction recurringTransaction) {
         long recurrencePeriodMillis = recurringTransaction.getRecurrencePeriod();
         long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
         long recurringTransactionId = addTransaction(recurringTransaction);
@@ -593,12 +574,11 @@ public void scheduleTransaction(@NonNull Transaction recurringTransaction) {
      * @param transactionUID GUID of the transaction
      * @return Retrieves a transaction from the database
      */
-    @NonNull
-    public Transaction getTransaction(@NonNull String transactionUID) {
+    public Transaction getTransaction(String transactionUID) {
         return getTransaction(getID(transactionUID));
     }
 
-    public int getNumCurrencies(@NonNull String transactionUID) {
+    public int getNumCurrencies(String transactionUID) {
         Cursor cursor = mDb.query("trans_extra_info",
                 new String[]{"trans_currency_count"},
                 "trans_acct_t_uid=?",
diff --git a/app/src/org/gnucash/android/export/Exporter.java b/app/src/org/gnucash/android/export/Exporter.java
index 50d368cf..befad4fb 100644
--- a/app/src/org/gnucash/android/export/Exporter.java
+++ b/app/src/org/gnucash/android/export/Exporter.java
@@ -20,8 +20,6 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Environment;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -61,15 +59,12 @@
      * Adapter for retrieving accounts to export
      * Subclasses should close this object when they are done with exporting
      */
-    @NonNull
     protected AccountsDbAdapter mAccountsDbAdapter;
-    @NonNull
     protected TransactionsDbAdapter mTransactionsDbAdapter;
-    @NonNull
     protected SplitsDbAdapter mSplitsDbAdapter;
     protected Context mContext;
 
-    public Exporter(ExportParams params, @Nullable SQLiteDatabase db) {
+    public Exporter(ExportParams params, SQLiteDatabase db) {
         this.mParameters = params;
         mContext = GnuCashApplication.getAppContext();
         if (db == null) {
@@ -121,7 +116,6 @@ public static File createBackupFile(){
      * @return Last modified file from backup folder
      * @see #BACKUP_FOLDER_PATH
      */
-    @Nullable
     public static File getMostRecentBackupFile(){
         File backupFolder = new File(BACKUP_FOLDER_PATH);
         if (!backupFolder.exists())
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index d852186f..fa989c6d 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -19,8 +19,6 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.util.Log;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.SplitsDbAdapter;
@@ -123,11 +121,11 @@ public GncXmlHandler(boolean bulk) {
         init(bulk, null);
     }
 
-    public GncXmlHandler(boolean bulk, @NonNull SQLiteDatabase db) {
+    public GncXmlHandler(boolean bulk, SQLiteDatabase db) {
         init(bulk, db);
     }
 
-    private void init(boolean bulk, @Nullable SQLiteDatabase db) {
+    private void init(boolean bulk, SQLiteDatabase db) {
         if (db == null) {
             mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
             mTransactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
diff --git a/app/src/org/gnucash/android/importer/GncXmlImporter.java b/app/src/org/gnucash/android/importer/GncXmlImporter.java
index 808bb524..59636544 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImporter.java
@@ -18,8 +18,6 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.util.Log;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
@@ -48,7 +46,7 @@
      * @param db SQLite Database
      * @param gncXmlInputStream Input stream of GnuCash XML
      */
-    public static void parse(@NonNull SQLiteDatabase db, InputStream gncXmlInputStream) throws Exception {
+    public static void parse(SQLiteDatabase db, InputStream gncXmlInputStream) throws Exception {
         SAXParserFactory spf = SAXParserFactory.newInstance();
         SAXParser sp = spf.newSAXParser();
         XMLReader xr = sp.getXMLReader();
diff --git a/app/src/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
index 982f56d9..e24f376f 100644
--- a/app/src/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
@@ -20,7 +20,6 @@
 import android.content.Context;
 import android.os.AsyncTask;
 import android.os.Build;
-import android.support.annotation.Nullable;
 import android.util.Log;
 import android.widget.Toast;
 import org.gnucash.android.R;
@@ -42,7 +41,7 @@ public ImportAsyncTask(Activity context){
         this.context = context;
     }
 
-    public ImportAsyncTask(Activity context, @Nullable TaskDelegate delegate){
+    public ImportAsyncTask(Activity context, TaskDelegate delegate){
         this.context = context;
         this.mDelegate = delegate;
     }
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index 4bd57510..2b86be7a 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -16,8 +16,6 @@
 
 package org.gnucash.android.model;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import org.gnucash.android.export.ofx.OfxHelper;
 import org.gnucash.android.export.xml.GncXmlHelper;
@@ -73,20 +71,17 @@
 	 * Unique Identifier of the account
 	 * It is generated when the account is created and can be set a posteriori as well
 	 */
-    @NonNull
 	private String mUID;
 	
 	/**
 	 * Name of this account
 	 */
-    @NonNull
 	private String mName;
 
     /**
      * Fully qualified name of this account including the parent hierarchy.
      * On instantiation of an account, the full name is set to the name by default
      */
-    @NonNull
     private String mFullName;
 
 	/**
@@ -98,26 +93,22 @@
 	 * Type of account
 	 * Defaults to {@link AccountType#CASH}
 	 */
-    @NonNull
 	private AccountType mAccountType = AccountType.CASH;
 	
 	/**
 	 * List of transactions in this account
 	 */
-    @NonNull
 	private List<Transaction> mTransactionsList = new ArrayList<Transaction>();
 
 	/**
 	 * Account UID of the parent account. Can be null
 	 */
-    @Nullable
 	private String mParentAccountUID;
 
     /**
      * Save UID of a default account for transfers.
      * All transactions in this account will by default be transfers to the other account
      */
-    @Nullable
     private String mDefaultTransferAccountUID;
 
     /**
@@ -129,7 +120,6 @@
     /**
      * Account color field in hex format #rrggbb
      */
-    @Nullable
     private String mColorCode;
 
     /**
@@ -153,7 +143,7 @@
 	 * Creates a new account with the default currency and a generated unique ID
 	 * @param name Name of the account
 	 */
-	public Account(@NonNull String name) {
+	public Account(String name) {
 		setName(name);
         this.mFullName  = mName;
 		this.mUID       = generateUID();
@@ -165,7 +155,7 @@ public Account(@NonNull String name) {
 	 * @param name Name of the account
 	 * @param currency {@link Currency} to be used by transactions in this account
 	 */
-	public Account(@NonNull String name, @NonNull Currency currency){
+	public Account(String name, Currency currency){
 		setName(name);
         this.mFullName  = mName;
 		this.mUID       = generateUID();
@@ -176,7 +166,7 @@ public Account(@NonNull String name, @NonNull Currency currency){
 	 * Sets the name of the account
 	 * @param name String name of the account
 	 */
-	public void setName(@NonNull String name) {
+	public void setName(String name) {
 		this.mName = name.trim();
 	}
 
@@ -184,7 +174,6 @@ public void setName(@NonNull String name) {
 	 * Returns the name of the account
 	 * @return String containing name of the account
 	 */
-    @NonNull
 	public String getName() {
 		return mName;
 	}
@@ -194,7 +183,6 @@ public String getName() {
      * The full name is the full account hierarchy name
      * @return Fully qualified name of the account
      */
-    @NonNull
     public String getFullName() {
         return mFullName;
     }
@@ -203,7 +191,7 @@ public String getFullName() {
      * Sets the fully qualified name of the account
      * @param fullName Fully qualified account name
      */
-    public void setFullName(@NonNull String fullName) {
+    public void setFullName(String fullName) {
         this.mFullName = fullName;
     }
 
@@ -212,7 +200,6 @@ public void setFullName(@NonNull String fullName) {
 	 * This represents the ACCTID in the exported OFX and should have a maximum of 22 alphanumeric characters
 	 * @return Generated Unique ID string
 	 */
-    @NonNull
 	protected String generateUID(){
 		String uuid = UUID.randomUUID().toString();
 		
@@ -233,7 +220,6 @@ protected String generateUID(){
 	 * Returns the unique ID of this account
 	 * @return String containing unique ID for the account
 	 */
-    @NonNull
 	public String getUID(){
 		return mUID;
 	}
@@ -242,7 +228,7 @@ public String getUID(){
 	 * Sets the unique identifier of this acocunt
 	 * @param uid Unique identifier to be set
 	 */
-	public void setUID(@NonNull String uid){
+	public void setUID(String uid){
 		this.mUID = uid;
 	}
 	
@@ -250,7 +236,6 @@ public void setUID(@NonNull String uid){
 	 * Get the type of account
 	 * @return {@link AccountType} type of account
 	 */
-    @NonNull
 	public AccountType getAccountType() {
 		return mAccountType;
 	}
@@ -260,7 +245,7 @@ public AccountType getAccountType() {
 	 * @param mAccountType Type of account
 	 * @see AccountType
 	 */
-	public void setAccountType(@NonNull AccountType mAccountType) {
+	public void setAccountType(AccountType mAccountType) {
 		this.mAccountType = mAccountType;
 	}
 
@@ -268,7 +253,7 @@ public void setAccountType(@NonNull AccountType mAccountType) {
 	 * Adds a transaction to this account
 	 * @param transaction {@link Transaction} to be added to the account
 	 */
-	public void addTransaction(@NonNull Transaction transaction){
+	public void addTransaction(Transaction transaction){
 		transaction.setCurrencyCode(mCurrency.getCurrencyCode());
 		mTransactionsList.add(transaction);
 	}
@@ -280,7 +265,7 @@ public void addTransaction(@NonNull Transaction transaction){
 	 * and currency of the account respectively
 	 * @param transactionsList List of {@link Transaction}s to be set.
 	 */
-	public void setTransactions(@NonNull List<Transaction> transactionsList){
+	public void setTransactions(List<Transaction> transactionsList){
 		this.mTransactionsList = transactionsList;
 	}
 		
@@ -288,7 +273,7 @@ public void setTransactions(@NonNull List<Transaction> transactionsList){
 	 * Removes <code>transaction</code> from this account
 	 * @param transaction {@link Transaction} to be removed from account
 	 */
-	public void removeTransaction(@NonNull Transaction transaction){
+	public void removeTransaction(Transaction transaction){
 		mTransactionsList.remove(transaction);
 	}
 	
@@ -296,7 +281,6 @@ public void removeTransaction(@NonNull Transaction transaction){
 	 * Returns a list of transactions for this account
 	 * @return Array list of transactions for the account
 	 */
-    @NonNull
 	public List<Transaction> getTransactions(){
 		return mTransactionsList;
 	}
@@ -327,7 +311,6 @@ public boolean hasUnexportedTransactions(){
 	 * It takes into account debit and credit amounts, it does not however consider sub-accounts
 	 * @return {@link Money} aggregate amount of all transactions in account.
 	 */
-    @NonNull
 	public Money getBalance(){
 		Money balance = Money.createZeroInstance(mCurrency.getCurrencyCode());
         for (Transaction transaction : mTransactionsList) {
@@ -340,7 +323,6 @@ public Money getBalance(){
      * Returns the color code of the account in the format #rrggbb
      * @return Color code of the account
      */
-    @Nullable
     public String getColorHexCode() {
         return mColorCode;
     }
@@ -350,7 +332,7 @@ public String getColorHexCode() {
      * @param colorCode Color code to be set in the format #rrggbb or #rgb
      * @throws java.lang.IllegalArgumentException if the color code is not properly formatted
      */
-    public void setColorCode(@Nullable String colorCode) {
+    public void setColorCode(String colorCode) {
         if (colorCode == null)
             return;
 
@@ -379,7 +361,6 @@ public void setFavorite(boolean isFavorite) {
     /**
 	 * @return the mCurrency
 	 */
-    @NonNull
 	public Currency getCurrency() {
 		return mCurrency;
 	}
@@ -388,7 +369,7 @@ public Currency getCurrency() {
 	 * Sets the currency to be used by this account
 	 * @param mCurrency the mCurrency to set
 	 */
-	public void setCurrency(@NonNull Currency mCurrency) {
+	public void setCurrency(Currency mCurrency) {
 		this.mCurrency = mCurrency;
 		//TODO: Maybe at some time t, this method should convert all 
 		//transaction values to the corresponding value in the new currency
@@ -398,7 +379,7 @@ public void setCurrency(@NonNull Currency mCurrency) {
 	 * Sets the Unique Account Identifier of the parent account
 	 * @param parentUID String Unique ID of parent account
 	 */
-	public void setParentUID(@Nullable String parentUID){
+	public void setParentUID(String parentUID){
 		mParentAccountUID = parentUID;
 	}
 	
@@ -406,7 +387,6 @@ public void setParentUID(@Nullable String parentUID){
 	 * Returns the Unique Account Identifier of the parent account
 	 * @return String Unique ID of parent account
 	 */
-    @Nullable
 	public String getParentUID() {
 		return mParentAccountUID;
 	}
@@ -432,7 +412,6 @@ public void setPlaceHolderFlag(boolean isPlaceholder){
      * Return the unique ID of accounts to which to default transfer transactions to
      * @return Unique ID string of default transfer account
      */
-    @Nullable
     public String getDefaultTransferAccountUID() {
         return mDefaultTransferAccountUID;
     }
@@ -441,7 +420,7 @@ public String getDefaultTransferAccountUID() {
      * Set the unique ID of account which is the default transfer target
      * @param defaultTransferAccountUID Unique ID string of default transfer account
      */
-    public void setDefaultTransferAccountUID(@Nullable String defaultTransferAccountUID) {
+    public void setDefaultTransferAccountUID(String defaultTransferAccountUID) {
         this.mDefaultTransferAccountUID = defaultTransferAccountUID;
     }
 
@@ -454,8 +433,7 @@ public void setDefaultTransferAccountUID(@Nullable String defaultTransferAccount
 	 * @see AccountType
 	 * @see OfxAccountType
 	 */
-	@NonNull
-    public static OfxAccountType convertToOfxAccountType(@NonNull AccountType accountType){
+    public static OfxAccountType convertToOfxAccountType(AccountType accountType){
 		switch (accountType) {
 		case CREDIT:
 		case LIABILITY:
@@ -488,7 +466,7 @@ public static OfxAccountType convertToOfxAccountType(@NonNull AccountType accoun
 	 * @param doc XML DOM document for the OFX data
 	 * @param parent Parent node to which to add this account's transactions in XML
 	 */
-	public void toOfx(@NonNull Document doc, @NonNull Element parent, boolean exportAllTransactions){
+	public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		Element currency = doc.createElement(OfxHelper.TAG_CURRENCY_DEF);
 		currency.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));						
 		
@@ -567,7 +545,7 @@ public void toOfx(@NonNull Document doc, @NonNull Element parent, boolean export
      * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
      * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
      */
-    public void toGncXml(@NonNull Document doc, @NonNull Element rootNode) {
+    public void toGncXml(Document doc, Element rootNode) {
         Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
         nameNode.appendChild(doc.createTextNode(mName));
 
diff --git a/app/src/org/gnucash/android/model/Money.java b/app/src/org/gnucash/android/model/Money.java
index acc2068e..d5f48747 100644
--- a/app/src/org/gnucash/android/model/Money.java
+++ b/app/src/org/gnucash/android/model/Money.java
@@ -16,8 +16,6 @@
 
 package org.gnucash.android.model;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import java.math.BigDecimal;
 import java.math.MathContext;
@@ -46,13 +44,11 @@
 	/**
 	 * Currency of the account
 	 */
-    @NonNull
 	private Currency mCurrency;
 	
 	/**
 	 * Amount value held by this object
 	 */
-    @NonNull
 	private BigDecimal mAmount;
 	
 	/**
@@ -71,7 +67,6 @@
 	 * Rounding mode to be applied when performing operations
 	 * Defaults to {@link #DEFAULT_ROUNDING_MODE}
 	 */
-    @NonNull
 	protected RoundingMode ROUNDING_MODE = DEFAULT_ROUNDING_MODE;
 	
 	/**
@@ -97,7 +92,6 @@
      * Returns a Money instance initialized to the local currency and value 0
      * @return Money instance of value 0 in locale currency
      */
-    @NonNull
     public static Money getZeroInstance(){
         return sDefaultZero;
     }
@@ -115,7 +109,7 @@ public Money() {
 	 * @param amount {@link BigDecimal} value of the money instance
 	 * @param currency {@link Currency} associated with the <code>amount</code>
 	 */
-	public Money(@NonNull BigDecimal amount, @NonNull Currency currency){
+	public Money(BigDecimal amount, Currency currency){
 		this.mAmount = amount;
 		this.mCurrency = currency;
 	}
@@ -126,7 +120,7 @@ public Money(@NonNull BigDecimal amount, @NonNull Currency currency){
 	 * @param amount Numrical value of the Money
 	 * @param currencyCode Currency code as specified by ISO 4217
 	 */
-	public Money(@NonNull String amount, @NonNull String currencyCode){
+	public Money(String amount, String currencyCode){
 		setAmount(amount);
 		setCurrency(Currency.getInstance(currencyCode));
 	}
@@ -138,7 +132,7 @@ public Money(@NonNull String amount, @NonNull String currencyCode){
 	 * @param currency {@link Currency} associated with the <code>amount</code>
 	 * @param context {@link MathContext} specifying rounding mode during operations
 	 */
-	public Money(@NonNull BigDecimal amount, @NonNull Currency currency, @NonNull MathContext context){
+	public Money(BigDecimal amount, Currency currency, MathContext context){
 		setAmount(amount);
 		setCurrency(currency);
 		ROUNDING_MODE = context.getRoundingMode();
@@ -150,7 +144,7 @@ public Money(@NonNull BigDecimal amount, @NonNull Currency currency, @NonNull Ma
 	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
 	 * @param amount Value associated with this Money object
 	 */
-	public Money(@NonNull String amount){
+	public Money(String amount){
 		init();
 		setAmount(parseToDecimal(amount));
 	}
@@ -160,7 +154,7 @@ public Money(@NonNull String amount){
 	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
 	 * @param amount Value associated with this Money object
 	 */
-	public Money(@NonNull BigDecimal amount){
+	public Money(BigDecimal amount){
 		init();
 		setAmount(amount);
 	}
@@ -170,7 +164,7 @@ public Money(@NonNull BigDecimal amount){
      * Creates a new Money object which is a clone of <code>money</code>
      * @param money Money instance to be cloned
      */
-    public Money(@NonNull Money money){
+    public Money(Money money){
         setAmount(money.asBigDecimal());
         setCurrency(money.getCurrency());
     }
@@ -180,8 +174,7 @@ public Money(@NonNull Money money){
      * @param currencyCode Currency to use for this money instance
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
-    @NonNull
-    public static Money createZeroInstance(@NonNull String currencyCode){
+    public static Money createZeroInstance(String currencyCode){
         return new Money("0", currencyCode);
     }
 
@@ -198,7 +191,6 @@ private void init() {
 	 * Returns the currency of the money object
 	 * @return {@link Currency} of the money value
 	 */
-    @NonNull
 	public Currency getCurrency() {
 		return mCurrency;
 	}
@@ -209,8 +201,7 @@ public Currency getCurrency() {
 	 * @param currency {@link Currency} to assign to new <code>Money</code> object
 	 * @return {@link Money} object with same value as current object, but with new <code>currency</code>
 	 */
-	@NonNull
-    public Money withCurrency(@NonNull Currency currency){
+    public Money withCurrency(Currency currency){
 		return new Money(mAmount, currency);
 	}
 	
@@ -221,7 +212,7 @@ public Money withCurrency(@NonNull Currency currency){
 	 * Money objects are immutable and hence this method should not be called out of a constructor
 	 * @param currency {@link Currency} to assign to the Money object  
 	 */
-	private void setCurrency(@NonNull Currency currency) {
+	private void setCurrency(Currency currency) {
 		//TODO: Consider doing a conversion of the value as well in the future
 		this.mCurrency = currency;
 	}
@@ -230,7 +221,6 @@ private void setCurrency(@NonNull Currency currency) {
 	 * Returns the amount represented by this Money object
 	 * @return {@link BigDecimal} valure of amount in object
 	 */
-    @NonNull
 	public BigDecimal asBigDecimal() {
 		return mAmount;
 	}
@@ -258,8 +248,7 @@ public String asString(){
 	 * @param locale Locale to use when formatting the object
 	 * @return String containing formatted Money representation
 	 */
-	@NonNull
-    public String formattedString(@NonNull Locale locale){
+    public String formattedString(Locale locale){
 		NumberFormat formatter = NumberFormat.getInstance(locale);
 		formatter.setMinimumFractionDigits(DECIMAL_PLACES);
 		formatter.setMaximumFractionDigits(DECIMAL_PLACES);
@@ -270,7 +259,6 @@ public String formattedString(@NonNull Locale locale){
      * Equivalent to calling formattedString(Locale.getDefault())
      * @return String formatted Money representation in default locale
      */
-    @NonNull
     public String formattedString(){
         return formattedString(Locale.getDefault());
     }
@@ -280,7 +268,6 @@ public String formattedString(){
 	 * The original <code>Money</code> object remains unchanged.
 	 * @return Negated <code>Money</code> object
 	 */
-	@NonNull
     public Money negate(){
 		return new Money(mAmount.negate(), mCurrency);
 	}
@@ -289,7 +276,7 @@ public Money negate(){
 	 * Sets the amount value of this <code>Money</code> object
 	 * @param amount {@link BigDecimal} amount to be set
 	 */
-	private void setAmount(@NonNull BigDecimal amount) {
+	private void setAmount(BigDecimal amount) {
 		mAmount = amount.setScale(DECIMAL_PLACES, ROUNDING_MODE);
 	}
 	
@@ -298,7 +285,7 @@ private void setAmount(@NonNull BigDecimal amount) {
 	 * The <code>amount</code> is parsed by the {@link BigDecimal} constructor
 	 * @param amount {@link String} amount to be set
 	 */
-	private void setAmount(@NonNull String amount){
+	private void setAmount(String amount){
 		setAmount(parseToDecimal(amount));
 	}	
 	
@@ -310,8 +297,7 @@ private void setAmount(@NonNull String amount){
 	 * @return Money object whose value is the sum of this object and <code>money</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	@NonNull
-    public Money add(@NonNull Money addend){
+    public Money add(Money addend){
 		if (!mCurrency.equals(addend.mCurrency))
 			throw new IllegalArgumentException("Only Money with same currency can be added");
 		
@@ -327,8 +313,7 @@ public Money add(@NonNull Money addend){
 	 * @return Money object whose value is the difference of this object and <code>subtrahend</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	@NonNull
-    public Money subtract(@NonNull Money subtrahend){
+    public Money subtract(Money subtrahend){
 		if (!mCurrency.equals(subtrahend.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
@@ -344,8 +329,7 @@ public Money subtract(@NonNull Money subtrahend){
 	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	@NonNull
-    public Money divide(@NonNull Money divisor){
+    public Money divide(Money divisor){
 		if (!mCurrency.equals(divisor.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
@@ -359,7 +343,6 @@ public Money divide(@NonNull Money divisor){
 	 * @param divisor Second operand in the addition.
 	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
 	 */
-	@NonNull
     public Money divide(int divisor){
 		Money moneyDiv = new Money(new BigDecimal(divisor), mCurrency);
 		return divide(moneyDiv);
@@ -373,8 +356,7 @@ public Money divide(int divisor){
 	 * @return Money object whose value is the product of this object and <code>money</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	@NonNull
-    public Money multiply(@NonNull Money money){
+    public Money multiply(Money money){
 		if (!mCurrency.equals(money.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
@@ -388,7 +370,6 @@ public Money multiply(@NonNull Money money){
 	 * @param multiplier Factor to multiply the amount by.
 	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
 	 */
-	@NonNull
     public Money multiply(int multiplier){
 		Money moneyFactor = new Money(new BigDecimal(multiplier), mCurrency);
 		return multiply(moneyFactor);
@@ -406,7 +387,6 @@ public boolean isNegative(){
 	 * Returns the string representation of the amount (without currency) of the Money object
 	 * @return String representation of the amount (without currency) of the Money object
 	 */
-    @NonNull
 	public String toPlainString(){
 		return mAmount.setScale(DECIMAL_PLACES, ROUNDING_MODE).toPlainString();
 	}
@@ -416,7 +396,6 @@ public String toPlainString(){
 	 * to the default locale
 	 * @return String representation of the amount formatted with default locale
 	 */
-	@NonNull
     @Override
 	public String toString() {
 		return formattedString(Locale.getDefault());
@@ -437,7 +416,7 @@ public int hashCode() {
 	 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise
 	 */
 	@Override
-	public boolean equals(@Nullable Object obj) {
+	public boolean equals(Object obj) {
 		if (this == obj)
 			return true;
 		if (obj == null)
@@ -453,7 +432,7 @@ public boolean equals(@Nullable Object obj) {
 	}
 
 	@Override
-	public int compareTo(@NonNull Money another) {
+	public int compareTo(Money another) {
 		if (!mCurrency.equals(another.mCurrency))
 			throw new IllegalArgumentException("Cannot compare different currencies yet");
 		return mAmount.compareTo(another.mAmount);
@@ -464,8 +443,7 @@ public int compareTo(@NonNull Money another) {
 	 * @param amountString Formatted String amount
 	 * @return String amount formatted in the default locale
 	 */
-	@NonNull
-    public static BigDecimal parseToDecimal(@NonNull String amountString){
+    public static BigDecimal parseToDecimal(String amountString){
 		char separator = new DecimalFormatSymbols(Locale.US).getGroupingSeparator();
 		amountString = amountString.replace(Character.toString(separator), "");
 		NumberFormat formatter = NumberFormat.getInstance(Locale.US);		
@@ -485,7 +463,6 @@ public static BigDecimal parseToDecimal(@NonNull String amountString){
      * Returns a new instance of {@link Money} object with the absolute value of the current object
      * @return Money object with absolute value of this instance
      */
-    @NonNull
     public Money absolute() {
         return new Money(mAmount.abs(), mCurrency);
     }
diff --git a/app/src/org/gnucash/android/model/Split.java b/app/src/org/gnucash/android/model/Split.java
index 666deaa5..3dc48318 100644
--- a/app/src/org/gnucash/android/model/Split.java
+++ b/app/src/org/gnucash/android/model/Split.java
@@ -1,7 +1,5 @@
 package org.gnucash.android.model;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
@@ -23,37 +21,31 @@
     /**
      * Amount value of this split
      */
-    @NonNull
     private Money mAmount;
 
     /**
      * Unique ID of this split
      */
-    @NonNull
     private String mUID;
 
     /**
      * Transaction UID which this split belongs to
      */
-    @NonNull
     private String mTransactionUID = "";
 
     /**
      * Account UID which this split belongs to
      */
-    @NonNull
     private String mAccountUID;
 
     /**
      * The type of this transaction, credit or debit
      */
-    @NonNull
     private TransactionType mSplitType = TransactionType.CREDIT;
 
     /**
      * Memo associated with this split
      */
-    @Nullable
     private String mMemo;
 
     /**
@@ -61,7 +53,7 @@
      * @param amount Money amount of this split
      * @param accountUID String UID of transfer account
      */
-    public Split(@NonNull Money amount, @NonNull String accountUID){
+    public Split(Money amount, String accountUID){
         setAmount(amount);
         setAccountUID(accountUID);
         mUID = UUID.randomUUID().toString().replaceAll("-","");
@@ -72,7 +64,7 @@ public Split(@NonNull Money amount, @NonNull String accountUID){
      * @param sourceSplit Split to be cloned
      * @param generateUID Determines if the clone should have a new UID or should maintain the one from source
      */
-    public Split(@NonNull Split sourceSplit, boolean generateUID){
+    public Split(Split sourceSplit, boolean generateUID){
         this.mMemo          = sourceSplit.mMemo;
         this.mAccountUID    = sourceSplit.mAccountUID;
         this.mSplitType     = sourceSplit.mSplitType;
@@ -86,62 +78,55 @@ public Split(@NonNull Split sourceSplit, boolean generateUID){
         }
     }
 
-    @NonNull
     public Money getAmount() {
         return mAmount;
     }
 
-    public void setAmount(@NonNull Money amount) {
+    public void setAmount(Money amount) {
         this.mAmount = amount;
     }
 
-    @NonNull
     public String getUID() {
         return mUID;
     }
 
-    public void setUID(@NonNull String uid) {
+    public void setUID(String uid) {
         this.mUID = uid;
     }
 
-    @NonNull
     public String getTransactionUID() {
         return mTransactionUID;
     }
 
-    public void setTransactionUID(@NonNull String transactionUID) {
+    public void setTransactionUID(String transactionUID) {
         this.mTransactionUID = transactionUID;
     }
 
-    @NonNull
     public String getAccountUID() {
         return mAccountUID;
     }
 
-    public void setAccountUID(@NonNull String accountUID) {
+    public void setAccountUID(String accountUID) {
         this.mAccountUID = accountUID;
     }
 
-    @NonNull
     public TransactionType getType() {
         return mSplitType;
     }
 
-    public void setType(@NonNull TransactionType transactionType) {
+    public void setType(TransactionType transactionType) {
         this.mSplitType = transactionType;
     }
 
-    @Nullable
     public String getMemo() {
         return mMemo;
     }
 
-    public void setMemo(@Nullable String memo) {
+    public void setMemo(String memo) {
         this.mMemo = memo;
     }
 
-    @NonNull
-    public Split createPair(@NonNull String accountUID){
+    public Split createPair(String accountUID){
         Split pair = new Split(mAmount.absolute(), accountUID);
         pair.setType(mSplitType.invert());
         pair.setMemo(mMemo);
@@ -149,7 +134,6 @@ public Split createPair(@NonNull String accountUID){
         return pair;
     }
 
-    @NonNull
     protected Split clone() {
         Split split = new Split(mAmount, mAccountUID);
         split.mUID = mUID;
@@ -165,12 +149,11 @@ protected Split clone() {
      * @param other the other split of the pair to be tested
      * @return whether the two splits are a pair
      */
-    public boolean isPairOf(@NonNull Split other) {
+    public boolean isPairOf(Split other) {
         return mAmount.absolute().equals(other.mAmount.absolute())
                 && mSplitType.invert().equals(other.mSplitType);
     }
 
-    @NonNull
     @Override
     public String toString() {
         return mSplitType.name() + " of " + mAmount.toString() + " in account: " + mAccountUID;
@@ -180,7 +163,6 @@ public String toString() {
      * Returns a string representation of the split which can be parsed again using {@link org.gnucash.android.model.Split#parseSplit(String)}
      * @return the converted CSV string of this split
      */
-    @NonNull
     public String toCsv(){
         String splitString = mAmount.toString() + ";" + mAmount.getCurrency().getCurrencyCode() + ";"
                 + mAccountUID + ";" + mSplitType.name();
@@ -196,7 +178,7 @@ public String toCsv(){
      * @param rootNode Parent node to append the split XML to
      * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
      */
-    public void toGncXml(@NonNull Document doc, @NonNull Element rootNode) {
+    public void toGncXml(Document doc, Element rootNode) {
         Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
         idNode.setAttribute("type", "guid");
         idNode.appendChild(doc.createTextNode(mUID));
@@ -236,8 +218,7 @@ public void toGncXml(@NonNull Document doc, @NonNull Element rootNode) {
      * @param splitString String containing formatted split
      * @return Split instance parsed from the string
      */
-    @NonNull
-    public static Split parseSplit(@NonNull String splitString) {
+    public static Split parseSplit(String splitString) {
         String[] tokens = splitString.split(";");
         Money amount = new Money(tokens[0], tokens[1]);
         Split split = new Split(amount, tokens[2]);
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index bb2ba321..efd16073 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -17,7 +17,6 @@
 package org.gnucash.android.model;
 
 import android.content.Intent;
-import android.support.annotation.NonNull;
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -78,32 +77,27 @@
     /**
      * Currency used by splits in this transaction
      */
-    @NonNull
     private String mCurrencyCode = Money.DEFAULT_CURRENCY_CODE;
 
     /**
      * The splits making up this transaction
      */
-    @NonNull
     private List<Split> mSplitList = new ArrayList<Split>();
 
 	/**
 	 * Unique identifier of the transaction.
 	 * This is automatically generated when the transaction is created.
 	 */
-    @NonNull
 	private String mUID;
 
 	/**
 	 * Name describing the transaction
 	 */
-    @NonNull
 	private String mDescription;
 
 	/**
 	 * An extra note giving details about the transaction
 	 */
-    @NonNull
 	private String mNotes = "";
 
 	/**
@@ -129,7 +123,7 @@
 	 * provided data and initializes the rest to default values.
 	 * @param name Name of the transaction
 	 */
-	public Transaction(@NonNull String name) {
+	public Transaction(String name) {
 		initDefaults();
 		setDescription(name);
 	}
@@ -142,7 +136,7 @@ public Transaction(@NonNull String name) {
      * @param transaction Transaction to be cloned
      * @param generateNewUID Flag to determine if new UID should be assigned or not
      */
-    public Transaction(@NonNull Transaction transaction, boolean generateNewUID){
+    public Transaction(Transaction transaction, boolean generateNewUID){
         initDefaults();
         setDescription(transaction.getDescription());
         setNote(transaction.getNote());
@@ -167,7 +161,6 @@ private void initDefaults(){
      * Returns list of splits for this transaction
      * @return {@link java.util.List} of splits in the transaction
      */
-    @NonNull
     public List<Split> getSplits(){
         return mSplitList;
     }
@@ -177,7 +170,6 @@ private void initDefaults(){
      * @param accountUID Unique Identifier of the account
      * @return List of {@link org.gnucash.android.model.Split}s
      */
-    @NonNull
     public List<Split> getSplits(String accountUID){
         List<Split> splits = new ArrayList<Split>();
         for (Split split : mSplitList) {
@@ -193,7 +185,7 @@ private void initDefaults(){
      * <p>All the splits in the list will have their transaction UID set to this transaction</p>
      * @param splitList List of splits for this transaction
      */
-    public void setSplits(@NonNull List<Split> splitList){
+    public void setSplits(List<Split> splitList){
         mSplitList = splitList;
     }
 
@@ -202,7 +194,7 @@ public void setSplits(@NonNull List<Split> splitList){
      * <p>Sets the split UID and currency to that of this transaction</p>
      * @param split Split for this transaction
      */
-    public void addSplit(@NonNull Split split){
+    public void addSplit(Split split){
         //sets the currency of the split to the currency of the transaction
         split.setAmount(split.getAmount().withCurrency(Currency.getInstance(mCurrencyCode)));
         split.setTransactionUID(mUID);
@@ -216,7 +208,7 @@ public void addSplit(@NonNull Split split){
      * @return Money balance of the transaction for the specified account
      * @see #computeBalance(String, java.util.List)
      */
-    public Money getBalance(@NonNull String accountUID){
+    public Money getBalance(String accountUID){
         return computeBalance(accountUID, mSplitList);
     }
 
@@ -226,7 +218,6 @@ public Money getBalance(@NonNull String accountUID){
      * means there is an extra amount which is unresolved.
      * @return Money imbalance of the transaction
      */
-    @NonNull
     public Money getImbalance(){
         Money imbalance = Money.createZeroInstance(mCurrencyCode);
         for (Split split : mSplitList) {
@@ -246,8 +237,7 @@ public Money getImbalance(){
      * @param splitList List of splits
      * @return Money list of splits
      */
-    @NonNull
-    public static Money computeBalance(@NonNull String accountUID, @NonNull List<Split> splitList) {
+    public static Money computeBalance(String accountUID, List<Split> splitList) {
         AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
         AccountType accountType = accountsDbAdapter.getAccountType(accountUID);
         String currencyCode = accountsDbAdapter.getCurrencyCode(accountUID);
@@ -280,7 +270,6 @@ public static Money computeBalance(@NonNull String accountUID, @NonNull List<Spl
      * Returns the currency code of this transaction.
      * @return ISO 4217 currency code string
      */
-    @NonNull
     public String getCurrencyCode() {
         return mCurrencyCode;
     }
@@ -291,7 +280,7 @@ public String getCurrencyCode() {
      * Transactions always use the currency of their accounts. </p>
      * @param currencyCode String with ISO 4217 currency code
      */
-    public void setCurrencyCode(@NonNull String currencyCode) {
+    public void setCurrencyCode(String currencyCode) {
         this.mCurrencyCode = currencyCode;
     }
 
@@ -300,7 +289,6 @@ public void setCurrencyCode(@NonNull String currencyCode) {
      * @return Currency of the transaction
      * @see #getCurrencyCode()
      */
-    @NonNull
     public Currency getCurrency(){
         return Currency.getInstance(this.mCurrencyCode);
     }
@@ -309,7 +297,6 @@ public Currency getCurrency(){
 	 * Returns the description of the transaction
 	 * @return Transaction description
 	 */
-	@NonNull
     public String getDescription() {
 		return mDescription;
 	}
@@ -318,7 +305,7 @@ public String getDescription() {
 	 * Sets the transaction description
 	 * @param description String description
 	 */
-	public void setDescription(@NonNull String description) {
+	public void setDescription(String description) {
 		this.mDescription = description.trim();
 	}
 
@@ -326,7 +313,7 @@ public void setDescription(@NonNull String description) {
 	 * Add notes to the transaction
 	 * @param notes String containing notes for the transaction
 	 */
-	public void setNote(@NonNull String notes) {
+	public void setNote(String notes) {
 		this.mNotes = notes;
 	}
 
@@ -334,7 +321,6 @@ public void setNote(@NonNull String notes) {
 	 * Returns the transaction notes
 	 * @return String notes of transaction
 	 */
-	@NonNull
     public String getNote() {
 		return mNotes;
 	}
@@ -343,7 +329,7 @@ public String getNote() {
 	 * Set the time of the transaction
 	 * @param timestamp Time when transaction occurred as {@link Date}
 	 */
-	public void setTime(@NonNull Date timestamp){
+	public void setTime(Date timestamp){
 		this.mTimestamp = timestamp.getTime();
 	}
 
@@ -370,7 +356,7 @@ public long getTimeMillis(){
 	 * @param transactionUID Unique ID string
      * @see #resetUID()
 	 */
-	public void setUID(@NonNull String transactionUID) {
+	public void setUID(String transactionUID) {
 		this.mUID = transactionUID;
 	}
 
@@ -384,7 +370,6 @@ public void resetUID(){
 	 * Returns unique ID string for transaction
 	 * @return String with Unique ID of transaction
 	 */
-	@NonNull
     public String getUID() {
 		return mUID;
 	}
@@ -396,8 +381,7 @@ public String getUID() {
      * @param shouldReduceBalance <code>true</code> if type should reduce balance, <code>false</code> otherwise
      * @return TransactionType for the account
      */
-    @NonNull
-    public static TransactionType getTypeForBalance(@NonNull AccountType accountType, boolean shouldReduceBalance){
+    public static TransactionType getTypeForBalance(AccountType accountType, boolean shouldReduceBalance){
         TransactionType type;
         if (accountType.hasDebitNormalBalance()) {
             type = shouldReduceBalance ? TransactionType.CREDIT : TransactionType.DEBIT;
@@ -412,7 +396,7 @@ public static TransactionType getTypeForBalance(@NonNull AccountType accountType
      * @return true if the amount represents a decrease in the account balance, false otherwise
      * @see #getTypeForBalance(AccountType, boolean)
      */
-    public static boolean shouldDecreaseBalance(@NonNull AccountType accountType, @NonNull TransactionType transactionType) {
+    public static boolean shouldDecreaseBalance(AccountType accountType, TransactionType transactionType) {
         if (accountType.hasDebitNormalBalance()) {
             return transactionType == TransactionType.CREDIT;
         } else
@@ -458,7 +442,7 @@ public void setRecurrencePeriod(long recurrenceId) {
      * @param doc XML document to which transaction should be added
      * @param accountUID Unique Identifier of the account which called the method.  @return Element in DOM corresponding to transaction
      */
-	public Element toOFX(@NonNull Document doc, @NonNull String accountUID){
+	public Element toOFX(Document doc, String accountUID){
         Money balance = getBalance(accountUID);
         TransactionType transactionType = balance.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
 
@@ -530,7 +514,7 @@ public Element toOFX(@NonNull Document doc, @NonNull String accountUID){
      * @param rootElement Parent node for the XML
      * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
      */
-    public void toGncXml(@NonNull Document doc, @NonNull Element rootElement) {
+    public void toGncXml(Document doc, Element rootElement) {
         Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
         idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
         idNode.appendChild(doc.createTextNode(mUID));
@@ -595,8 +579,7 @@ public void toGncXml(@NonNull Document doc, @NonNull Element rootElement) {
      * @param transaction Transaction used to create intent
      * @return Intent with transaction details as extras
      */
-    @NonNull
-    public static Intent createIntent(@NonNull Transaction transaction){
+    public static Intent createIntent(Transaction transaction){
         Intent intent = new Intent(Intent.ACTION_INSERT);
         intent.setType(Transaction.MIME_TYPE);
         intent.putExtra(Intent.EXTRA_TITLE, transaction.getDescription());
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 1e9cd7f5..8d5bb616 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -27,7 +27,6 @@
 import android.graphics.Color;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
-import android.support.annotation.NonNull;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.TextUtils;
@@ -208,7 +207,6 @@ public AccountFormFragment() {
 	 * @param dbAdapter {@link AccountsDbAdapter} for saving the account
 	 * @return New instance of the dialog fragment
 	 */
-    @NonNull
 	static public AccountFormFragment newInstance() {
         AccountFormFragment f = new AccountFormFragment();
         f.mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
@@ -228,8 +226,7 @@ public void onCreate(Bundle savedInstanceState) {
 	/**
 	 * Inflates the dialog view and retrieves references to the dialog elements
 	 */
-	@Override @NonNull
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View view = inflater.inflate(R.layout.fragment_new_account, container, false);
 		getSherlockActivity().getSupportActionBar().setTitle(R.string.title_add_account);
@@ -389,7 +386,7 @@ private void initializeViews(){
      * Initializes the preview of the color picker (color square) to the specified color
      * @param colorHex Color of the format #rgb or #rrggbb
      */
-    private void initializeColorSquarePreview(@NonNull String colorHex){
+    private void initializeColorSquarePreview(String colorHex){
         if (colorHex != null)
             mColorSquare.setBackgroundColor(Color.parseColor(colorHex));
         else
@@ -785,7 +782,6 @@ private void saveAccount() {
      * Returns the currently selected account type in the spinner
      * @return {@link org.gnucash.android.model.AccountType} currently selected
      */
-    @NonNull
     private AccountType getSelectedAccountType() {
         int selectedAccountTypeIndex = mAccountTypeSpinner.getSelectedItemPosition();
         String[] accountTypeEntries = getResources().getStringArray(R.array.key_account_type_entries);
diff --git a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
index b9647f98..574a63cd 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -27,7 +27,6 @@
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
@@ -541,8 +540,7 @@ public static DeleteConfirmationDialogFragment newInstance(int title, String uid
             return frag;
         }
 
-        @NonNull
-        @Override
+            @Override
         public Dialog onCreateDialog(Bundle savedInstanceState) {
             int title = getArguments().getInt("title");
             final String uid = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
diff --git a/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
index b2c1899c..add26068 100644
--- a/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
+++ b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
@@ -20,7 +20,6 @@
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.ProgressBar;
@@ -100,7 +99,6 @@ public void onCreate(Bundle savedInstanceState) {
         }
     }
 
-    @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         final Activity activity = getActivity();
diff --git a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index d54c2e00..47ff4710 100644
--- a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -23,7 +23,6 @@
 import android.database.Cursor;
 import android.graphics.Rect;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.support.v4.app.LoaderManager;
 import android.support.v4.content.Loader;
 import android.support.v4.widget.SimpleCursorAdapter;
@@ -411,8 +410,7 @@ public RecurringTransactionsCursorLoader(Context context) {
             super(context);
         }
 
-        @Override @NonNull
-        public Cursor loadInBackground() {
+        @Override        public Cursor loadInBackground() {
             mDatabaseAdapter = GnuCashApplication.getTransactionDbAdapter();
             Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllRecurringTransactions();
 
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index fdf2995c..a4eafa1b 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -22,7 +22,6 @@
 import java.text.ParseException;
 import java.util.*;
 
-import android.support.annotation.NonNull;
 import android.support.v4.app.FragmentManager;
 import android.text.Editable;
 import android.widget.*;
@@ -188,8 +187,7 @@
     /**
 	 * Create the view and retrieve references to the UI elements
 	 */
-	@Override @NonNull
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View v = inflater.inflate(R.layout.fragment_new_transaction, container, false);
 
@@ -835,7 +833,6 @@ public static String stripCurrencyFormatting(String s){
 	 * @param amountString String with amount information
 	 * @return BigDecimal with the amount parsed from <code>amountString</code>
 	 */
-    @NonNull
 	public static BigDecimal parseInputToDecimal(String amountString){
 		String clean = stripCurrencyFormatting(amountString);
         if (clean.length() == 0) //empty string
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
index d1c47f4a..4de631c3 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
@@ -23,7 +23,6 @@
 import android.app.DatePickerDialog.OnDateSetListener;
 import android.app.Dialog;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.support.v4.app.DialogFragment;
 
 /**
@@ -68,7 +67,6 @@ public DatePickerDialogFragment(OnDateSetListener callback, long dateMillis) {
 	/**
 	 * Creates and returns an Android {@link DatePickerDialog}
 	 */
-    @NonNull
     @Override
 	public Dialog onCreateDialog(Bundle savedInstanceState) {
 		Calendar cal = mDate == null ? Calendar.getInstance() : mDate;
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java
index d3fe5955..626bc9a6 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java
@@ -22,7 +22,6 @@
 import android.app.TimePickerDialog;
 import android.app.TimePickerDialog.OnTimeSetListener;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.support.v4.app.DialogFragment;
 
 /**
@@ -66,7 +65,6 @@ public TimePickerDialogFragment(OnTimeSetListener listener, long timeMillis){
 	/**
 	 * Creates and returns an Android {@link TimePickerDialog}
 	 */
-    @NonNull
 	@Override
 	public Dialog onCreateDialog(Bundle savedInstanceState) {
 		Calendar cal = mCurrentTime == null ? Calendar.getInstance() : mCurrentTime;
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 2e8232ad..38d101e5 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -29,7 +29,6 @@
 import android.app.Dialog;
 import android.content.DialogInterface;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
@@ -54,8 +53,7 @@ public static TransactionsDeleteConfirmationDialogFragment newInstance(int title
         return frag;
     }
 
-    @Override @NonNull
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
+    @Override    public Dialog onCreateDialog(Bundle savedInstanceState) {
         int title = getArguments().getInt("title");
         final long rowId = getArguments().getLong(UxArgument.SELECTED_TRANSACTION_IDS);
         int message = rowId == 0 ? R.string.msg_delete_all_transactions_confirmation : R.string.msg_delete_transaction_confirmation;
