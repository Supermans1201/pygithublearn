From 318b234e2e2c65dbb6a8cdaa1bead45d8cf28bdf Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 5 Mar 2015 17:53:36 +0100
Subject: [PATCH 01/52] Improved UX display of scheduled transactions

Fixed: crash when displaying scheduled transactions
Fixed: checkboxes in transaction list are hard to see
fixes #246
---
 .../android/db/ScheduledEventDbAdapter.java        |  6 ++-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 20 ++++---
 .../org/gnucash/android/model/ScheduledEvent.java  | 23 ++++++--
 .../ScheduledTransactionsListFragment.java         | 28 +++++++---
 .../ui/transaction/TransactionsListFragment.java   |  4 ++
 .../main/res/layout/list_item_scheduled_trxn.xml   | 63 +++++++++++++++-------
 6 files changed, 103 insertions(+), 41 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
index 7e0da762..acd73f93 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
@@ -18,6 +18,7 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.support.annotation.NonNull;
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
@@ -115,16 +116,17 @@ public ScheduledEvent getScheduledEvent(String uid){
      * @param eventUID GUID of the event itself
      * @return ScheduledEvent object instance
      */
-    public ScheduledEvent getScheduledEventWithUID(String eventUID){
+    public ScheduledEvent getScheduledEventWithUID(@NonNull String eventUID){
         Cursor cursor = mDb.query(ScheduledEventEntry.TABLE_NAME, null,
                 ScheduledEventEntry.COLUMN_EVENT_UID + "= ?",
                 new String[]{eventUID}, null, null, null);
 
         ScheduledEvent scheduledEvent = null;
-        if (cursor != null) {
+        try {
             if (cursor.moveToFirst()) {
                 scheduledEvent = buildScheduledEventInstance(cursor);
             }
+        } finally {
             cursor.close();
         }
         return scheduledEvent;
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 35ce754b..36b7de03 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -234,6 +234,7 @@ public Transaction getTransaction(long rowId) {
      * @throws java.lang.IllegalArgumentException if the accountUID is null
 	 */
 	public Cursor fetchAllTransactionsForAccount(String accountUID){
+        //TODO: Remove this legacy code. Database has been upgraded
         if (mDb.getVersion() < DatabaseSchema.SPLITS_DB_VERSION){ //legacy from previous database format
             return mDb.query(TransactionEntry.TABLE_NAME, null,
                     "((" + SplitEntry.COLUMN_ACCOUNT_UID + " = '" + accountUID + "') "
@@ -259,16 +260,19 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
 
     /**
      * Fetches all recurring transactions from the database.
-     * <p>These transactions are not considered "normal" transactions, but only serve to note recurring transactions.
-     * They are not considered when computing account balances</p>
+     * <p>Recurring transactions are the transaction templates which have an entry in the scheduled events table</p>
      * @return Cursor holding set of all recurring transactions
      */
-    public Cursor fetchAllRecurringTransactions(){
-        return mDb.query(TransactionEntry.TABLE_NAME,
-                null,
-                TransactionEntry.COLUMN_RECURRENCE_PERIOD + "!= 0",
-                null, null, null,
-                AccountEntry.COLUMN_NAME + " ASC, " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC");
+    public Cursor fetchAllScheduledTransactions(){
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME + " INNER JOIN " + ScheduledEventEntry.TABLE_NAME + " ON "
+                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                + ScheduledEventEntry.TABLE_NAME + "." + ScheduledEventEntry.COLUMN_EVENT_UID);
+
+        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
+
+        return queryBuilder.query(mDb, projectionIn, null, null, null, null, sortOrder);
     }
 
 	/**
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java b/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
index b0a2763b..d08bd7b5 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
@@ -15,10 +15,12 @@
  */
 package org.gnucash.android.model;
 
+import org.gnucash.android.R;
 import org.gnucash.android.ui.util.RecurrenceParser;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 import java.util.UUID;
 
 /**
@@ -116,14 +118,25 @@ public void setTag(String tag) {
         this.mTag = tag;
     }
 
-    @Override
-    public String toString() {
-        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
-        String eventString = mEventType.name() + " recurring every " + mPeriod/RecurrenceParser.DAY_MILLIS + " days starting on "
+    /**
+     * Returns the event schedule (start, end and recurrence)
+     * @return String description of repeat schedule
+     */
+    public String getRepeatString(){
+        //TODO: localize the string
+        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy", Locale.US);
+        String repeatString = "Repeats every " + mPeriod/RecurrenceParser.DAY_MILLIS + " days starting on "
                 + dateFormat.format(new Date(mStartDate));
         if (mEndDate > 0){
-            eventString += " until " + dateFormat.format(mEndDate);
+            repeatString += " until " + dateFormat.format(mEndDate);
         }
+        return repeatString;
+    }
+
+    @Override
+    public String toString() {
+
+        String eventString = mEventType.name() + " - " + getRepeatString();
 
         return eventString;
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index e1c5cbfe..ab7e356f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -18,6 +18,7 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.content.res.Resources;
 import android.database.Cursor;
 import android.graphics.Rect;
 import android.os.Bundle;
@@ -53,6 +54,8 @@
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 
+import java.util.List;
+
 /**
  * Fragment which displays the recurring transactions in the system.
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -316,7 +319,11 @@ public TransactionsCursorAdapter(Context context, int layout, Cursor c,
         public View getView(int position, View convertView, ViewGroup parent) {
             final View view = super.getView(position, convertView, parent);
             final int itemPosition = position;
-            CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+            CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox);
+            //TODO: Revisit this if we ever change the application theme
+            int id = Resources.getSystem().getIdentifier("btn_check_holo_light", "drawable", "android");
+            checkbox.setButtonDrawable(id);
+
             final TextView secondaryText = (TextView) view.findViewById(R.id.secondary_text);
 
             checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
@@ -390,15 +397,20 @@ public void bindView(View view, Context context, Cursor cursor) {
             super.bindView(view, context, cursor);
 
             Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(cursor);
-            TextView amountTextView = (TextView) view.findViewById(R.id.transaction_amount);
-            amountTextView.setText(transaction.getSplits().size() + " splits");
 
-            TextView trNote = (TextView) view.findViewById(R.id.secondary_text);
-//            trNote.setText(context.getString(R.string.label_repeats) + " " +
-//                    getRecurrenceAsString(cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_RECURRENCE_PERIOD)))) ;
+            TextView amountTextView = (TextView) view.findViewById(R.id.right_text);
+            if (transaction.getSplits().size() == 2){
+                if (transaction.getSplits().get(0).isPairOf(transaction.getSplits().get(1))){
+                    amountTextView.setText(transaction.getSplits().get(0).getAmount().formattedString());
+                }
+            } else {
+                amountTextView.setText(transaction.getSplits().size() + " splits");
+            }
+            TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
+
             ScheduledEventDbAdapter scheduledEventDbAdapter = ScheduledEventDbAdapter.getInstance();
             ScheduledEvent event = scheduledEventDbAdapter.getScheduledEventWithUID(transaction.getUID());
-            trNote.setText(event.toString());
+            descriptionTextView.setText(event.getRepeatString());
 
         }
 
@@ -418,7 +430,7 @@ public ScheduledTransactionsCursorLoader(Context context) {
         public Cursor loadInBackground() {
             mDatabaseAdapter = TransactionsDbAdapter.getInstance();
 
-            Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllRecurringTransactions();
+            Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllScheduledTransactions();
 
             registerContentObserver(c);
             return c;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index c98029e3..da81d34f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -18,6 +18,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.content.res.Resources;
 import android.database.Cursor;
 import android.graphics.Rect;
 import android.os.Bundle;
@@ -364,6 +365,9 @@ public View getView(int position, View convertView, ViewGroup parent) {
 			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
             final TextView secondaryText = (TextView) view.findViewById(R.id.secondary_text);
 
+            //TODO: Revisit this if we ever change the application theme
+            int id = Resources.getSystem().getIdentifier("btn_check_holo_light", "drawable", "android");
+            checkbox.setButtonDrawable(id);
             checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 				
 				@Override
diff --git a/app/src/main/res/layout/list_item_scheduled_trxn.xml b/app/src/main/res/layout/list_item_scheduled_trxn.xml
index 94686947..d1e3c595 100644
--- a/app/src/main/res/layout/list_item_scheduled_trxn.xml
+++ b/app/src/main/res/layout/list_item_scheduled_trxn.xml
@@ -22,29 +22,56 @@
                                                    android:orientation="horizontal">
 
         <CheckBox
-                android:id="@+id/checkbox_parent_account"
+                android:id="@+id/checkbox"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:focusable="false"
                 />
 
-        <include
-                layout="@layout/list_item_2_lines"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:layout_marginLeft="5dp"
-                />
+    <RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="wrap_content"
+        android:layout_width="0dp"
+        android:layout_weight="1"
+        android:layout_marginLeft="5dp"
+        android:layout_marginStart="5dp"
+        android:orientation="vertical">
 
         <TextView
-                android:id="@+id/transaction_amount"
-                android:layout_width="wrap_content"
-                android:layout_height="match_parent"
-                android:singleLine="true"
-                android:ellipsize="end"
-                android:text="@string/label_transaction_amount"
-                android:minWidth="100dp"
-                android:gravity="right|center_vertical"
-                android:layout_marginRight="12dp"
-                style="@style/ListItemText"/>
+            android:id="@+id/primary_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:singleLine="true"
+            android:ellipsize="end"
+            android:text="@string/label_transaction_name"
+            style="@style/ListItemText"
+            />
+
+        <TextView
+            android:id="@+id/secondary_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:singleLine="false"
+            android:maxLines="2"
+            android:ellipsize="end"
+            android:layout_below="@id/primary_text"
+            android:textAppearance="?android:attr/textAppearanceSmall"
+            android:text="@string/label_transaction_name"/>
+
+        <TextView
+            android:id="@+id/right_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:singleLine="true"
+            android:ellipsize="start"
+            android:gravity="right"
+            android:layout_alignParentRight="true"
+            android:layout_alignParentEnd="true"
+            android:layout_toRightOf="@id/primary_text"
+            android:layout_toEndOf="@id/primary_text"
+            android:layout_alignParentTop="true"
+            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:textColor="@android:color/black"
+            android:text="Amount"/>
+    </RelativeLayout>
 </org.gnucash.android.ui.util.CheckableLinearLayout>
\ No newline at end of file

From 896329da8306c13ec810c5678a4b3377c8aee215 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Thu, 5 Mar 2015 19:25:13 +0200
Subject: [PATCH 02/52] Fixed: passcode screen can be skipped on Lollipop

---
 .../android/ui/passcode/PassLockActivity.java      | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/passcode/PassLockActivity.java b/app/src/main/java/org/gnucash/android/ui/passcode/PassLockActivity.java
index 6d634dcf..be8ae8fa 100644
--- a/app/src/main/java/org/gnucash/android/ui/passcode/PassLockActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/passcode/PassLockActivity.java
@@ -1,11 +1,25 @@
+/*
+ * Copyright (c) 2014-2015 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.gnucash.android.ui.passcode;
 
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 
-import com.actionbarsherlock.app.SherlockFragmentActivity;
-
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.ui.BaseDrawerActivity;
 import org.gnucash.android.ui.UxArgument;
@@ -25,6 +39,10 @@
     protected void onResume() {
         super.onResume();
 
+        // Only for Android Lollipop that brings a few changes to the recent apps feature
+        if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
+            GnuCashApplication.PASSCODE_SESSION_INIT_TIME = 0;
+        }
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         if (sharedPreferences.getBoolean(UxArgument.ENABLED_PASSCODE, false) && !isSessionActive()) {
             startActivity(new Intent(this, PasscodeLockScreenActivity.class)

From a20d7eb135ba4f7d837eafa597938ae600ffd3ae Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 5 Mar 2015 18:40:59 +0100
Subject: [PATCH 03/52] Acquire wake lock in the scheduled event execution
 service

Event execution service will be re-scheduled when device is rebooted
---
 app/src/main/AndroidManifest.xml                         | 12 +++++++++---
 .../java/org/gnucash/android/app/GnuCashApplication.java |  9 ++++++---
 .../main/java/org/gnucash/android/db/DatabaseHelper.java |  2 +-
 .../{SchedulerReceiver.java => BootReceiver.java}        | 16 +++++++---------
 .../org/gnucash/android/service/SchedulerService.java    | 10 ++++++++--
 .../org/gnucash/android/ui/account/AccountsActivity.java |  1 -
 6 files changed, 31 insertions(+), 19 deletions(-)
 rename app/src/main/java/org/gnucash/android/receivers/{SchedulerReceiver.java => BootReceiver.java} (62%)

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index b99cbf5a..afa2331a 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -45,6 +45,8 @@
     <uses-permission android:name="android.permission.VIBRATE"
                      android:label="Allow device to vibrate with notifications" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"
+        android:label="Schedule repeating transactions when device is rebooted"/>
 
     <application android:name="org.gnucash.android.app.GnuCashApplication"
         android:icon="@drawable/ic_launcher"
@@ -81,8 +83,6 @@
         <service android:name=".service.SchedulerService"
             android:exported="false"
             android:label="GnuCash Android Scheduler Execution Service"/>
-        <receiver android:name=".receivers.SchedulerReceiver"
-            android:exported="false"/>
         <receiver android:name=".receivers.TransactionRecorder"
             android:label="Records transactions received through intents"
             android:permission="org.gnucash.android.permission.RECORD_TRANSACTION">
@@ -109,7 +109,13 @@
 		    <meta-data android:name="android.appwidget.provider"
 		               android:resource="@xml/transaction_appwidget_info" />
 		</receiver>
-        
+        <receiver android:name=".receivers.BootReceiver"
+            android:label="Schedules regular runs for the scheduled events service"
+            android:exported="false">
+            <intent-filter>
+                <action android:name="android.intent.action.BOOT_COMPLETED"/>
+            </intent-filter>
+        </receiver>
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index c2999da6..e7ef50a2 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -155,13 +155,16 @@ public static String getDefaultCurrency(){
         return currencyCode;
     }
 
-    public static void startScheduledEventExecutionService(){
-        Context context = getAppContext();
+    /**
+     * Starts the service for scheduled events and makes the service run daily.
+     * @param context Application context
+     */
+    public static void startScheduledEventExecutionService(Context context){
         Intent alarmIntent = new Intent(context, SchedulerService.class);
         PendingIntent pendingIntent = PendingIntent.getService(context, 0, alarmIntent, 0);
 
         AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
-        alarmManager.cancel(pendingIntent);
+        alarmManager.cancel(pendingIntent); //if it already exists
         alarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                 SystemClock.elapsedRealtime() + AlarmManager.INTERVAL_DAY,
                 AlarmManager.INTERVAL_DAY, pendingIntent);
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index f0efe01e..2ff943e2 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -374,7 +374,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE);
                 //TODO: Migrate existing scheduled transactions (cancel pending intents)
 
-                GnuCashApplication.startScheduledEventExecutionService();
+                GnuCashApplication.startScheduledEventExecutionService(GnuCashApplication.getAppContext());
 
 
             }
diff --git a/app/src/main/java/org/gnucash/android/receivers/SchedulerReceiver.java b/app/src/main/java/org/gnucash/android/receivers/BootReceiver.java
similarity index 62%
rename from app/src/main/java/org/gnucash/android/receivers/SchedulerReceiver.java
rename to app/src/main/java/org/gnucash/android/receivers/BootReceiver.java
index 41c1643c..bcfd451f 100644
--- a/app/src/main/java/org/gnucash/android/receivers/SchedulerReceiver.java
+++ b/app/src/main/java/org/gnucash/android/receivers/BootReceiver.java
@@ -13,26 +13,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.gnucash.android.receivers;
 
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.os.SystemClock;
-import android.support.v4.content.WakefulBroadcastReceiver;
-import android.util.Log;
 
-import org.gnucash.android.service.SchedulerService;
+import org.gnucash.android.app.GnuCashApplication;
 
 /**
- * Broadcast receiver which starts the schedule execution service
+ * Receiver which is called when the device finishes booting.
+ * It starts the service for running scheduled events
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class SchedulerReceiver extends WakefulBroadcastReceiver {
+public class BootReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        Log.i("SchedulerReceiver", "Starting service @ " + SystemClock.elapsedRealtime());
-        Intent service = new Intent(context, SchedulerService.class);
-        startWakefulService(context, service);
+        GnuCashApplication.startScheduledEventExecutionService(context);
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 35edb233..9808071e 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -18,6 +18,7 @@
 
 import android.app.IntentService;
 import android.content.Intent;
+import android.os.PowerManager;
 import android.os.SystemClock;
 import android.util.Log;
 
@@ -28,7 +29,6 @@
 import org.gnucash.android.export.ExporterAsyncTask;
 import org.gnucash.android.model.ScheduledEvent;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.receivers.SchedulerReceiver;
 
 import java.util.List;
 import java.util.concurrent.ExecutionException;
@@ -51,6 +51,11 @@ public SchedulerService() {
 
     @Override
     protected void onHandleIntent(Intent intent) {
+        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
+        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                LOG_TAG);
+        wakeLock.acquire();
+
         ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
         List<ScheduledEvent> scheduledEvents = scheduledEventDbAdapter.getAllScheduledEvents();
 
@@ -67,7 +72,8 @@ protected void onHandleIntent(Intent intent) {
         }
 
         Log.i(LOG_TAG, "Completed service @ " + SystemClock.elapsedRealtime());
-        SchedulerReceiver.completeWakefulIntent(intent);
+
+        wakeLock.release();
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 9a83c020..1f071936 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -59,7 +59,6 @@
 import org.gnucash.android.ui.passcode.PassLockActivity;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transaction.ScheduledEventsActivity;
-import org.gnucash.android.ui.transaction.ScheduledTransactionsListFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.Refreshable;

From 263a24ae0061e683c16577d12be5fda72f7a8e55 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 6 Mar 2015 15:36:54 +0100
Subject: [PATCH 04/52] Fixed: crash when changing the account in the nav bar
 from placeholder account to non-placeholder account

Fixed: Changing the account in the nav bar has no effect when creating transaction  - now it uses the updated account
Fixed: TransactionActivityTests not running
Added test for "on delete cascade" foreign key constraint between accounts and splits
Added @nonnull annotations to some methods in DatabaseAdapter
---
 .../android/test/db/AccountsDbAdapterTest.java     | 44 +++++++++++++++++++---
 .../android/test/ui/TransactionsActivityTest.java  | 11 +++---
 .../org/gnucash/android/db/DatabaseAdapter.java    | 13 +++----
 .../ui/transaction/TransactionFormFragment.java    | 14 +++----
 .../ui/transaction/TransactionsActivity.java       | 11 +++---
 .../ui/transaction/TransactionsListFragment.java   |  2 +-
 6 files changed, 63 insertions(+), 32 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java b/app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java
index b98e70e3..8646307f 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java
@@ -7,6 +7,8 @@
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.db.AccountsDbAdapter;
 
@@ -40,11 +42,9 @@ protected void setUp() throws Exception {
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
 		mAccountsDbAdapter.deleteAllRecords();
 		Account first = new Account(ALPHA_ACCOUNT_NAME);
-		Transaction t1 = new Transaction("T800");
-		Transaction t2 = new Transaction("T1000");
-		
+        first.setUID(ALPHA_ACCOUNT_NAME);
 		Account second = new Account(BRAVO_ACCOUNT_NAME);
-		Transaction t = new Transaction("buyout");
+        second.setUID(BRAVO_ACCOUNT_NAME);
 		
 		mAccountsDbAdapter.addAccount(second);
 		mAccountsDbAdapter.addAccount(first);
@@ -73,7 +73,41 @@ public void testTransactionsHaveSameCurrencyAsAccount(){
 			assertEquals("JPY", t.getBalance(acc1.getUID()).getCurrency().getCurrencyCode());
 		}
 	}
-	
+
+    public void testAddAccountWithTransaction(){
+        Account account1 = new Account("AlphaAccount");
+        Account account2 = new Account("BetaAccount");
+        Transaction transaction = new Transaction("MyTransaction");
+        Split split = new Split(Money.getZeroInstance(), account1.getUID());
+        transaction.addSplit(split);
+        transaction.addSplit(split.createPair(account2.getUID()));
+
+        long id1 = mAccountsDbAdapter.addAccount(account1);
+        long id2 = mAccountsDbAdapter.addAccount(account2);
+
+        assertTrue(id1 > 0);
+        assertTrue(id2 > 0);
+    }
+
+    /**
+     * Tests the foreign key constraint "ON DELETE CASCADE" between accounts and splits
+     */
+    public void testDeletingAccountShouldDeleteSplits(){
+        Transaction transaction = new Transaction("TestTrn");
+        Split split = new Split(Money.getZeroInstance(), ALPHA_ACCOUNT_NAME);
+        transaction.addSplit(split);
+        transaction.addSplit(split.createPair(BRAVO_ACCOUNT_NAME));
+
+        long id = mTransactionsDbAdapter.addTransaction(transaction);
+        assertTrue(id > 0);
+
+        mAccountsDbAdapter.deleteRecord(ALPHA_ACCOUNT_NAME);
+
+        Transaction trxn = mTransactionsDbAdapter.getTransaction(transaction.getUID());
+        assertEquals(1, trxn.getSplits().size());
+        assertEquals(BRAVO_ACCOUNT_NAME, trxn.getSplits().get(0).getAccountUID());
+    }
+
 	@Override
 	protected void tearDown() throws Exception {
 		super.tearDown();
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 144b5fff..0ba4e2b6 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -99,6 +99,11 @@ protected void setUp() throws Exception {
         account2.setUID(TRANSFER_ACCOUNT_UID);
         account2.setCurrency(Currency.getInstance(CURRENCY_CODE));
 
+        long id1 = mAccountsDbAdapter.addAccount(account);
+        long id2 = mAccountsDbAdapter.addAccount(account2);
+        assertTrue(id1 > 0);
+        assertTrue(id2 > 0);
+
         mTransaction = new Transaction(TRANSACTION_NAME);
         mTransaction.setNote("What up?");
         mTransaction.setTime(mTransactionTimeMillis);
@@ -109,11 +114,7 @@ protected void setUp() throws Exception {
         mTransaction.addSplit(split.createPair(TRANSFER_ACCOUNT_UID));
         account.addTransaction(mTransaction);
 
-        //FIXME: Accounts are not saved to database because FOREIGN_KEY constraint on Split table fails
-        long id1 = mAccountsDbAdapter.addAccount(account);
-        long id2 = mAccountsDbAdapter.addAccount(account2);
-        assertTrue(id1 > 0);
-        assertTrue(id2 > 0);
+        mTransactionsDbAdapter.addTransaction(mTransaction);
 
         Intent intent = new Intent(Intent.ACTION_VIEW);
         intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 6a06ac6b..8722173a 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -52,7 +52,7 @@
      * Opens the database adapter with an existing database
      * @param db SQLiteDatabase object
      */
-    public DatabaseAdapter(SQLiteDatabase db, String tableName) {
+    public DatabaseAdapter(SQLiteDatabase db, @NonNull String tableName) {
         this.mTableName = tableName;
         this.mDb = db;
         if (!db.isOpen() || db.isReadOnly())
@@ -237,10 +237,7 @@ public int deleteAllRecords(){
      * @param uid GUID of the record
      * @return Long record ID
      */
-    public long getID(String uid){
-        if (uid == null)
-            return 0;
-
+    public long getID(@NonNull String uid){
         Cursor cursor = mDb.query(mTableName,
                 new String[] {DatabaseSchema.CommonColumns._ID},
                 DatabaseSchema.CommonColumns.COLUMN_UID + " = ?",
@@ -291,7 +288,7 @@ public String getUID(long id){
      * @return Currency code of the account. "" if accountUID
      *      does not exist in DB
      */
-    public String getAccountCurrencyCode(String accountUID) {
+    public String getAccountCurrencyCode(@NonNull String accountUID) {
         Cursor cursor = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
                 new String[] {DatabaseSchema.AccountEntry.COLUMN_CURRENCY},
                 DatabaseSchema.AccountEntry.COLUMN_UID + "= ?",
@@ -313,7 +310,7 @@ public String getAccountCurrencyCode(String accountUID) {
      * @return {@link org.gnucash.android.model.AccountType} of the account.
      * @throws java.lang.IllegalArgumentException if accountUID does not exist in DB,
      */
-    public AccountType getAccountType(String accountUID){
+    public AccountType getAccountType(@NonNull String accountUID){
         String type = "";
         Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
                 new String[]{DatabaseSchema.AccountEntry.COLUMN_TYPE},
@@ -374,7 +371,7 @@ public int updateRecord(@NonNull String tableName, @NonNull String uid, String c
      * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
      * @see #deleteRecord(long)
      */
-    public boolean deleteRecord(String uid){
+    public boolean deleteRecord(@NonNull String uid){
         return deleteRecord(getID(uid));
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index aaf01ea1..63bf27b0 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -432,10 +432,9 @@ private void initalizeViews() {
      * Only accounts with the same currency can be transferred to
      */
 	private void updateTransferAccountsList(){
-		String accountUID = ((TransactionsActivity)getActivity()).getCurrentAccountUID();
 
-		String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + accountUID
-                            + "' AND " + (mMultiCurrency ? "" : (DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(accountUID)
+		String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountUID
+                            + "' AND " + (mMultiCurrency ? "" : (DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(mAccountUID)
                             + "' AND ")) + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
                             + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                             + ")";
@@ -591,7 +590,7 @@ public void onAccountChanged(String newAccountUID) {
 
         mAccountType = accountsDbAdapter.getAccountType(newAccountUID);
         mTransactionTypeButton.setAccountType(mAccountType);
-
+        mAccountUID = newAccountUID;
         updateTransferAccountsList();
     }
 
@@ -611,15 +610,14 @@ private void saveNewTransaction() {
 		String notes = mNotesEditText.getText().toString();
 		BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
 
-		String accountUID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountUID();
-		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getAccountCurrencyCode(accountUID));
+		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getAccountCurrencyCode(mAccountUID));
 		Money amount 	= new Money(amountBigd, currency).absolute();
 
         //capture any edits which were done directly (not using split editor)
         if (mSplitsList.size() == 2 && mSplitsList.get(0).isPairOf(mSplitsList.get(1))) {
             //if it is a simple transfer where the editor was not used, then respect the button
             for (Split split : mSplitsList) {
-                if (split.getAccountUID().equals(accountUID)){
+                if (split.getAccountUID().equals(mAccountUID)){
                     split.setType(mTransactionTypeButton.getTransactionType());
                     split.setAmount(amount);
                 } else {
@@ -636,7 +634,7 @@ private void saveNewTransaction() {
 			mTransaction = new Transaction(description);
 
             if (mSplitsList.isEmpty()) { //amount entered in the simple interface (not using splits Editor)
-                Split split = new Split(amount, accountUID);
+                Split split = new Split(amount, mAccountUID);
                 split.setType(mTransactionTypeButton.getTransactionType());
                 mTransaction.addSplit(split);
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 4efc6be3..9a498bd1 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -33,7 +33,6 @@
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.inputmethod.InputMethodManager;
 import android.widget.SpinnerAdapter;
 import android.widget.TextView;
 
@@ -147,11 +146,12 @@ public boolean onNavigationItemSelected(int position, long itemId) {
 		    	//if we do not return, the transactions list fragment could also be found (although it's not visible)
 		    	return true;
 		    }
-
+            //refresh any fragments in the tab with the new account UID
             refresh();
             return true;
 		  }
 	};
+    private PagerAdapter mPagerAdapter;
 
 
     /**
@@ -265,6 +265,7 @@ public void refresh(String accountUID) {
     public void refresh(){
         refresh(mAccountUID);
         setTitleIndicatorColor();
+        mPagerAdapter.notifyDataSetChanged();
     }
 
 	@Override
@@ -291,8 +292,8 @@ protected void onCreate(Bundle savedInstanceState) {
         } else {	//load the transactions list
             mSectionHeaderTransactions.setVisibility(View.GONE);
 
-            PagerAdapter pagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
-            mPager.setAdapter(pagerAdapter);
+            mPagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
+            mPager.setAdapter(mPagerAdapter);
             mTitlePageIndicator.setViewPager(mPager);
 
             mPager.setCurrentItem(INDEX_TRANSACTIONS_FRAGMENT);
@@ -473,7 +474,7 @@ public Fragment getCurrentPagerFragment(){
 	public String getCurrentAccountUID(){
 		return mAccountUID;
 	}
-	
+
 	/**
 	 * Opens a fragment to create a new transaction. 
 	 * Is called from the XML views
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index da81d34f..2a8c1ed2 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -203,7 +203,7 @@ public void onAttach(Activity activity) {
 	public void onResume() {
 		super.onResume();
 		((TransactionsActivity)getSherlockActivity()).updateNavigationSelection();		
-		refresh(((TransactionsActivity) getActivity()).getCurrentAccountUID());
+		refresh();
 	}
 	
 	@Override

From 38b290bf4ef761633fe435ee4eaae3468ef6aad6 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 9 Mar 2015 12:09:46 +0100
Subject: [PATCH 05/52] Fixed: crash when creating new top level account

---
 .../main/java/org/gnucash/android/ui/account/AccountFormFragment.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 3b607361..32f05bba 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -204,7 +204,6 @@ public AccountFormFragment() {
 	
 	/**
 	 * Construct a new instance of the dialog
-	 * @param dbAdapter {@link AccountsDbAdapter} for saving the account
 	 * @return New instance of the dialog fragment
 	 */
 	static public AccountFormFragment newInstance() {
@@ -239,7 +238,8 @@ public void onCreate(Bundle savedInstanceState) {
             @Override
             public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {
                 loadParentAccountList(getSelectedAccountType());
-                setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
+                if (mParentAccountUID != null)
+                    setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
             }
 
             @Override

From 11d3b4919e9574133ab57ae3f4fb549946518fa5 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 14 Mar 2015 11:58:40 +0100
Subject: [PATCH 06/52] Fixed: bug causing template transactions not to be
 created in the database

Added template flag for transactions to database
Removed unused code for exporting single Accounts/Transactions/Splits as XML

TODO: Properly export template transactions as XML
---
 app/build.gradle                                   |   4 +-
 app/src/main/AndroidManifest.xml                   |   2 +-
 .../gnucash/android/app/GnuCashApplication.java    |   4 +-
 .../org/gnucash/android/db/DatabaseAdapter.java    |  12 +--
 .../org/gnucash/android/db/DatabaseHelper.java     |  10 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |   6 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  32 ------
 .../android/db/ScheduledEventDbAdapter.java        |  14 +--
 .../org/gnucash/android/db/SplitsDbAdapter.java    |  35 +++----
 .../gnucash/android/db/TransactionsDbAdapter.java  |  57 +++--------
 .../gnucash/android/export/qif/QifExporter.java    |   2 +-
 .../gnucash/android/export/xml/GncXmlExporter.java | 110 ---------------------
 .../gnucash/android/export/xml/GncXmlHelper.java   |   1 +
 .../gnucash/android/importer/GncXmlHandler.java    |   7 +-
 .../java/org/gnucash/android/model/Account.java    |  69 -------------
 .../java/org/gnucash/android/model/BaseModel.java  |  47 ++++++++-
 .../main/java/org/gnucash/android/model/Split.java |  39 --------
 .../org/gnucash/android/model/Transaction.java     |  97 +++---------------
 .../gnucash/android/service/SchedulerService.java  |  22 ++++-
 .../android/ui/account/AccountsActivity.java       |  16 +--
 .../android/ui/settings/SettingsActivity.java      |   3 +-
 .../ScheduledTransactionsListFragment.java         |  15 ++-
 .../ui/transaction/TransactionFormFragment.java    |  17 ++--
 build.gradle                                       |   2 +-
 24 files changed, 172 insertions(+), 451 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 2e8b58bb..b6f217c1 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 18
+    compileSdkVersion 19
     buildToolsVersion "21.1.2"
 
     defaultConfig {
         applicationId "org.gnucash.android"
         minSdkVersion 9
-        targetSdkVersion 18
+        targetSdkVersion 19
         versionCode 48
         versionName "1.6.x"
     }
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index afa2331a..c1be1b1e 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -20,7 +20,7 @@
     android:versionCode="48"
     android:versionName="@string/app_version_name" >
 
-    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18"/>
+    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="19"/>
     
     <permission-group 
         android:name="org.gnucash.android.permission.group.GNUCASH"
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index e7ef50a2..09e86289 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -165,8 +165,8 @@ public static void startScheduledEventExecutionService(Context context){
 
         AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
         alarmManager.cancel(pendingIntent); //if it already exists
-        alarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,
-                SystemClock.elapsedRealtime() + AlarmManager.INTERVAL_DAY,
+        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,
+                System.currentTimeMillis() + AlarmManager.INTERVAL_DAY,
                 AlarmManager.INTERVAL_DAY, pendingIntent);
 
     }
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 8722173a..fb944a8b 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -84,8 +84,8 @@ private void createTempView() {
                         + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " , "
                         + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " AS "
                         + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + " , "
-                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS "
-                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " , "
                         + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_UID + " AS "
                         + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_UID + " , "
                         + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS "
@@ -335,7 +335,7 @@ public AccountType getAccountType(@NonNull String accountUID){
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateRecord(String tableName, long recordId, String columnKey, String newValue) {
+    protected int updateRecord(String tableName, long recordId, String columnKey, String newValue) {
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
@@ -353,14 +353,14 @@ public int updateRecord(String tableName, long recordId, String columnKey, Strin
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateRecord(@NonNull String tableName, @NonNull String uid, String columnKey, String newValue) {
+    public int updateRecord(@NonNull String uid, @NonNull String columnKey, String newValue) {
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
         } else {
             contentValues.put(columnKey, newValue);
         }
-        return mDb.update(tableName, contentValues,
+        return mDb.update(mTableName, contentValues,
                 CommonColumns.COLUMN_UID + "= ?", new String[]{uid});
     }
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 2ff943e2..7b147b15 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -88,10 +88,10 @@
 			+ TransactionEntry.COLUMN_NOTES         + " text, "
 			+ TransactionEntry.COLUMN_TIMESTAMP     + " integer not null, "
 			+ TransactionEntry.COLUMN_EXPORTED      + " tinyint default 0, "
+			+ TransactionEntry.COLUMN_TEMPLATE      + " tinyint default 0, "
             + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
-            + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0, "
-            + TransactionEntry.COLUMN_CREATED_AT       + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
-            + TransactionEntry.COLUMN_MODIFIED_AT      + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
+            + TransactionEntry.COLUMN_CREATED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+            + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
 			+ ");" + createUpdatedAtTrigger(TransactionEntry.TABLE_NAME);
 
     /**
@@ -358,6 +358,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 Log.i(LOG_TAG, "Upgrading database to version 8");
                 //TODO: consider just backing up, recreating database and reimporting
                 //FIXME: We really need to do this because the ON DELETE CASCADE constraint does not exist on older db versions
+
                 //TODO: Also, we need to go through db and add second split with imbalance account wherever only one split exists.
 
                 Log.i(LOG_TAG, "Adding hidden flag to accounts table");
@@ -371,9 +372,10 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 MigrationHelper.createUpdatedAndModifiedColumns(db, SplitEntry.TABLE_NAME);
 
                 Log.i(LOG_TAG, "Creating scheduled events table");
-                db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE);
+                db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE); //TODO: Use the actual SQL statements
                 //TODO: Migrate existing scheduled transactions (cancel pending intents)
 
+                //TODO: Migrate old scheduled events using only SQL, code had changed
                 GnuCashApplication.startScheduledEventExecutionService(GnuCashApplication.getAppContext());
 
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 1641ad99..49177290 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -28,7 +28,7 @@
      * Database version.
      * With any change to the database schema, this number must increase
      */
-    static final int DATABASE_VERSION = 7;
+    static final int DATABASE_VERSION = 7; //TODO: Upgrade database version when migration code is complete
 
     /**
      * Database version where Splits were introduced
@@ -78,6 +78,10 @@ private DatabaseSchema(){}
         public static final String COLUMN_CURRENCY              = "currency_code";
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
+        public static final String COLUMN_TEMPLATE              = "is_template";
+
+        //TODO: find all recurrences and fix
+        @Deprecated
         public static final String COLUMN_RECURRENCE_PERIOD     = "recurrence_period";
 
         public static final String INDEX_UID                    = "transaction_uid_index";
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index fc67e358..87fa1f3b 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -109,38 +109,6 @@ private static String getGnuCashRootAccountUID(SQLiteDatabase db){
     }
 
     /**
-     * Exports the database to a GnuCash XML file and returns the path to the file
-     * @return String with exported GnuCash XML
-     */
-    static String exportGnucashXML(SQLiteDatabase db) throws IOException {
-        Log.i(LOG_TAG, "Exporting database to GnuCash XML");
-        ExportParams exportParams = new ExportParams(ExportFormat.GNC_XML);
-        exportParams.setExportAllTransactions(true);
-        exportParams.setExportTarget(ExportParams.ExportTarget.SD_CARD);
-        exportParams.setDeleteTransactionsAfterExport(false);
-
-        new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-        exportParams.setTargetFilepath(Environment.getExternalStorageDirectory()
-                + "/gnucash/" + Exporter.buildExportFilename(ExportFormat.GNC_XML));
-
-        //we do not use the ExporterAsyncTask here because we want to use an already open db
-        GncXmlExporter exporter = new GncXmlExporter(exportParams, db);
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
-                new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
-        try {
-            String xml = exporter.generateXML();
-            writer.write(xml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } finally {
-            writer.flush();
-            writer.close();
-        }
-
-        return exportParams.getTargetFilepath();
-    }
-
-    /**
      * Imports GnuCash XML into the database from file
      * @param filepath Path to GnuCash XML file
      */
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
index acd73f93..eb8c7cd6 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
@@ -112,24 +112,24 @@ public ScheduledEvent getScheduledEvent(String uid){
     }
 
     /**
-     * Returns an instance of {@link org.gnucash.android.model.ScheduledEvent} from the database record
+     * Returns all {@link org.gnucash.android.model.ScheduledEvent}s from the database with the specified event UID
      * @param eventUID GUID of the event itself
-     * @return ScheduledEvent object instance
+     * @return List of ScheduledEvents
      */
-    public ScheduledEvent getScheduledEventWithUID(@NonNull String eventUID){
+    public List<ScheduledEvent> getScheduledEventsWithUID(@NonNull String eventUID){
         Cursor cursor = mDb.query(ScheduledEventEntry.TABLE_NAME, null,
                 ScheduledEventEntry.COLUMN_EVENT_UID + "= ?",
                 new String[]{eventUID}, null, null, null);
 
-        ScheduledEvent scheduledEvent = null;
+        List<ScheduledEvent> scheduledEvents = new ArrayList<ScheduledEvent>();
         try {
-            if (cursor.moveToFirst()) {
-                scheduledEvent = buildScheduledEventInstance(cursor);
+            while (cursor.moveToNext()) {
+                scheduledEvents.add(buildScheduledEventInstance(cursor));
             }
         } finally {
             cursor.close();
         }
-        return scheduledEvent;
+        return scheduledEvents;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index 996b4ffd..0af0cb45 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -79,9 +79,14 @@ public long addSplit(Split split){
         Log.d(TAG, "Replace transaction split in db");
         long rowId = mDb.replace(SplitEntry.TABLE_NAME, null, contentValues);
 
+        long transactionId = getTransactionID(split.getTransactionUID());
         //when a split is updated, we want mark the transaction as not exported
-        updateRecord(TransactionEntry.TABLE_NAME, getTransactionID(split.getTransactionUID()),
+        updateRecord(TransactionEntry.TABLE_NAME, transactionId,
                 TransactionEntry.COLUMN_EXPORTED, String.valueOf(rowId > 0 ? 0 : 1));
+
+        //modifying a split means modifying the accompanying transaction as well
+        updateRecord(TransactionEntry.TABLE_NAME, transactionId,
+                TransactionEntry.COLUMN_MODIFIED_AT, Long.toString(System.currentTimeMillis()));
         return rowId;
     }
 
@@ -269,7 +274,7 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
         String[] selectionArgs = null;
         String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
                 SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
 
         if (startTimestamp != -1 && endTimestamp != -1) {
             selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ?";
@@ -396,7 +401,7 @@ public Cursor fetchSplitsForAccount(String accountUID){
         queryBuilder.setDistinct(true);
         String[] projectionIn = new String[]{SplitEntry.TABLE_NAME + ".*"};
         String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
-                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
         String[] selectionArgs = new String[]{accountUID};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
 
@@ -458,7 +463,9 @@ public boolean deleteRecord(long rowId) {
         Cursor cursor = fetchSplitsForTransaction(transactionUID);
         try {
             if (cursor.getCount() > 0) {
-                result = deleteTransaction(getTransactionID(transactionUID));
+                long transactionID = getTransactionID(transactionUID);
+                result = mDb.delete(TransactionEntry.TABLE_NAME,
+                        TransactionEntry._ID + "=" + transactionID, null) > 0;
             }
         } finally {
             cursor.close();
@@ -467,17 +474,6 @@ public boolean deleteRecord(long rowId) {
     }
 
     /**
-     * Deletes a split from the database.
-     * This is a convenience method which essentially calls {@link #deleteRecord(long)}
-     * @param uid String unique ID of split
-     * @return <code>true</code> if the split was deleted, <code>false</code> otherwise
-     */
-    public boolean deleteSplit(String uid) {
-        long id = getID(uid);
-        return deleteRecord(id);
-    }
-
-    /**
      * Returns the database record ID for the specified transaction UID
      * @param transactionUID Unique idendtifier of the transaction
      * @return Database record ID for the transaction
@@ -498,7 +494,7 @@ public long getTransactionID(String transactionUID) {
         }
     }
 
-    //TODO: After adding ON DELETE CASCADE to db, remove this method
+    //TODO: After adding ON DELETE CASCADE to db (and migration), remove this method
     /**
      * Deletes all splits for a particular transaction and the transaction itself
      * @param transactionId Database record ID of the transaction
@@ -518,11 +514,4 @@ public boolean deleteSplitsForTransaction(long transactionId) {
         }
     }
 
-    /**
-     * Deletes the transaction from the the database
-     * @param transactionId Database record ID of the transaction
-     */
-    private boolean deleteTransaction(long transactionId) {
-        return TransactionsDbAdapter.getInstance().deleteRecord(transactionId);
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 36b7de03..959fe6f5 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -82,8 +82,8 @@ public long addTransaction(Transaction transaction){
 		contentValues.put(TransactionEntry.COLUMN_TIMESTAMP,    transaction.getTimeMillis());
 		contentValues.put(TransactionEntry.COLUMN_NOTES,        transaction.getNote());
 		contentValues.put(TransactionEntry.COLUMN_EXPORTED,     transaction.isExported() ? 1 : 0);
+		contentValues.put(TransactionEntry.COLUMN_TEMPLATE,     transaction.isTemplate() ? 1 : 0);
         contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
-        contentValues.put(TransactionEntry.COLUMN_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
 
         Log.d(TAG, "Replacing transaction in db");
         long rowId = -1;
@@ -144,21 +144,21 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 + TransactionEntry.COLUMN_EXPORTED      + " , "
                 + TransactionEntry.COLUMN_CURRENCY      + " , "
                 + TransactionEntry.COLUMN_CREATED_AT    + " , "
-                + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?)");
+                + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?)");
             for (Transaction transaction : transactionList) {
-                if (transaction.getRecurrencePeriod() > 0) {
+                if (transaction.isTemplate()) { //TODO: Properly schedule transactions
                     scheduleTransaction(transaction);
                 }
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
-                replaceStatement.bindString(1, transaction.getUID());
+                replaceStatement.bindString(1,  transaction.getUID());
                 replaceStatement.bindString(2,  transaction.getDescription());
                 replaceStatement.bindString(3,  transaction.getNote());
-                replaceStatement.bindLong(4, transaction.getTimeMillis());
+                replaceStatement.bindLong(4,    transaction.getTimeMillis());
                 replaceStatement.bindLong(5,    transaction.isExported() ? 1 : 0);
-                replaceStatement.bindString(6, transaction.getCurrencyCode());
+                replaceStatement.bindString(6,  transaction.getCurrencyCode());
                 replaceStatement.bindString(7,  transaction.getCreatedTimestamp().toString());
-                replaceStatement.bindLong(8,    transaction.getRecurrencePeriod());
+                replaceStatement.bindLong(8,    transaction.isTemplate() ? 1 : 0);
                 replaceStatement.execute();
                 rowInserted ++;
                 splitList.addAll(transaction.getSplits());
@@ -185,28 +185,6 @@ public long bulkAddTransactions(List<Transaction> transactionList){
         return rowInserted;
     }
 
-    /**
-	 * Fetch a transaction from the database which has a unique ID <code>uid</code>
-	 * @param uid Unique Identifier of transaction to be retrieved
-	 * @return Database row ID of transaction with UID <code>uid</code>
-	 */
-	public long fetchTransactionWithUID(String uid){
-		Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
-				new String[] {TransactionEntry._ID},
-                TransactionEntry.COLUMN_UID + " = ?",
-				new String[]{uid}, null, null, null);
-		long result = -1;
-		try {
-            if (cursor.moveToFirst()) {
-                Log.d(TAG, "Transaction already exists. Returning existing id");
-                result = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID)); //0 because only one row was requested
-            }
-        } finally {
-            cursor.close();
-        }
-		return result;
-	}
-
 	/**
 	 * Retrieves a transaction object from a database with database ID <code>rowId</code>
 	 * @param rowId Identifier of the transaction record to be retrieved
@@ -239,7 +217,7 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
             return mDb.query(TransactionEntry.TABLE_NAME, null,
                     "((" + SplitEntry.COLUMN_ACCOUNT_UID + " = '" + accountUID + "') "
                             + "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' ))"
-                            + " AND " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0",
+                            + " AND " + TransactionEntry.COLUMN_TEMPLATE + " = 0",
                     null, null, null, TransactionEntry.COLUMN_TIMESTAMP + " DESC");
         } else {
             SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
@@ -250,7 +228,7 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
             queryBuilder.setDistinct(true);
             String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
             String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
-                    + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+                    + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
             String[] selectionArgs = new String[]{accountUID};
             String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
 
@@ -271,6 +249,7 @@ public Cursor fetchAllScheduledTransactions(){
 
         String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
+        queryBuilder.setDistinct(true);
 
         return queryBuilder.query(mDb, projectionIn, null, null, null, null, sortOrder);
     }
@@ -354,7 +333,7 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
      */
     public int getTotalTransactionsCount() {
         String queryCount = "SELECT COUNT(*) FROM " + TransactionEntry.TABLE_NAME +
-                " WHERE " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " =0";
+                " WHERE " + TransactionEntry.COLUMN_TEMPLATE + " =0";
         Cursor cursor = mDb.rawQuery(queryCount, null);
         try {
             cursor.moveToFirst();
@@ -378,9 +357,7 @@ public Transaction buildTransactionInstance(Cursor c){
 		transaction.setTime(c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
 		transaction.setNote(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NOTES)));
 		transaction.setExported(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_EXPORTED)) == 1);
-
-        long recurrencePeriod = c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_RECURRENCE_PERIOD));
-        transaction.setRecurrencePeriod(recurrencePeriod);
+		transaction.setTemplate(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TEMPLATE)) == 1);
 
         if (mDb.getVersion() < SPLITS_DB_VERSION){ //legacy, will be used once, when migrating the database
             String accountUID = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
@@ -433,6 +410,7 @@ public Money getBalance(String transactionUID, String accountUID){
         return Transaction.computeBalance(accountUID, splitList);
     }
 
+    //TODO: When "on delete cascade" is successfully migrated, we can remove this method and use the base implementation
 	/**
 	 * Deletes transaction record with id <code>rowId</code> and all it's splits
 	 * @param rowId Long database record id
@@ -538,15 +516,12 @@ public int updateTransaction(ContentValues contentValues, String whereClause, St
      * @param recurringTransaction Transaction which is to be recurring
      */
     public void scheduleTransaction(Transaction recurringTransaction) {
-        long recurrencePeriodMillis = recurringTransaction.getRecurrencePeriod();
+        long recurrencePeriodMillis = System.currentTimeMillis(); //recurringTransaction.getRecurrencePeriod();
         long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
         long recurringTransactionId = addTransaction(recurringTransaction);
 
-        PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(GnuCashApplication.getAppContext(),
-                (int)recurringTransactionId, Transaction.createIntent(recurringTransaction), PendingIntent.FLAG_UPDATE_CURRENT);
-        AlarmManager alarmManager = (AlarmManager) GnuCashApplication.getAppContext().getSystemService(Context.ALARM_SERVICE);
-        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, firstRunMillis,
-                recurrencePeriodMillis, recurringPendingIntent);
+
+        //TODO: Properly create ScheduledEvent
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index dd272aa5..bf122cf5 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -64,7 +64,7 @@ public void generateExport(Writer writer) throws ExporterException {
                             AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
                     },
                     // no recurrence transactions
-                    TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                    TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " == 0 AND " +
                             // exclude transactions involving multiple currencies
                             "trans_extra_info.trans_currency_count = 1 AND " +
                             // in qif, split from the one account entry is not recorded (will be auto balanced)
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 28f1991b..19d667ff 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -393,114 +393,4 @@ public static void createBackup(){
             Log.e("GncXmlExporter", "Error creating backup", e);
         }
     }
-
-    /**
-     * Generate GnuCash XML by loading the accounts and transactions from the database and exporting each one.
-     * This method consumes a lot of memory and is slow, but exists for database migrations for backwards compatibility.
-     * <p>The normal exporter interface should be used to generate GncXML files</p>
-     * @return String with the generated XML
-     * @throws ParserConfigurationException if there was an error when generating the XML
-     * @deprecated Use the {@link #generateExport(java.io.Writer)} to generate XML
-     */
-    public String generateXML() throws ParserConfigurationException {
-        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
-        DocumentBuilder documentBuilder = docFactory.newDocumentBuilder();
-
-        Document document = documentBuilder.newDocument();
-        document.setXmlVersion("1.0");
-        document.setXmlStandalone(true);
-
-        Element rootElement = document.createElement(GncXmlHelper.TAG_ROOT);
-        rootElement.setAttribute("xmlns:gnc",    "http://www.gnucash.org/XML/gnc");
-        rootElement.setAttribute("xmlns:act",    "http://www.gnucash.org/XML/act");
-        rootElement.setAttribute("xmlns:book",   "http://www.gnucash.org/XML/book");
-        rootElement.setAttribute("xmlns:cd",     "http://www.gnucash.org/XML/cd");
-        rootElement.setAttribute("xmlns:cmdty",  "http://www.gnucash.org/XML/cmdty");
-        rootElement.setAttribute("xmlns:price",  "http://www.gnucash.org/XML/price");
-        rootElement.setAttribute("xmlns:slot",   "http://www.gnucash.org/XML/slot");
-        rootElement.setAttribute("xmlns:split",  "http://www.gnucash.org/XML/split");
-        rootElement.setAttribute("xmlns:trn",    "http://www.gnucash.org/XML/trn");
-        rootElement.setAttribute("xmlns:ts",     "http://www.gnucash.org/XML/ts");
-
-        Element bookCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        bookCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, GncXmlHelper.ATTR_VALUE_BOOK);
-        bookCountNode.appendChild(document.createTextNode("1"));
-        rootElement.appendChild(bookCountNode);
-
-        Element bookNode = document.createElement(GncXmlHelper.TAG_BOOK);
-        bookNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        rootElement.appendChild(bookNode);
-
-        Element bookIdNode = document.createElement(GncXmlHelper.TAG_BOOK_ID);
-        bookIdNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        bookIdNode.appendChild(document.createTextNode(UUID.randomUUID().toString().replaceAll("-", "")));
-        bookNode.appendChild(bookIdNode);
-
-        Element cmdtyCountData = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        cmdtyCountData.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
-        cmdtyCountData.appendChild(document.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
-        bookNode.appendChild(cmdtyCountData);
-
-        Element accountCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        accountCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
-        int accountCount = mAccountsDbAdapter.getTotalAccountCount();
-        accountCountNode.appendChild(document.createTextNode(String.valueOf(accountCount)));
-        bookNode.appendChild(accountCountNode);
-
-        Element transactionCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        transactionCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
-        int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
-        transactionCountNode.appendChild(document.createTextNode(String.valueOf(transactionCount)));
-        bookNode.appendChild(transactionCountNode);
-
-        String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
-        if (rootAccountUID != null) {
-            Account rootAccount = mAccountsDbAdapter.getAccount(rootAccountUID);
-            rootAccount.toGncXml(document, bookNode);
-        }
-        Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
-
-        //create accounts hierarchically by ordering by full name
-        try {
-            while (accountsCursor.moveToNext()) {
-                long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
-                Account account = mAccountsDbAdapter.getAccount(id);
-                account.toGncXml(document, bookNode);
-            }
-        } finally {
-            accountsCursor.close();
-        }
-
-        //more memory efficient approach than loading all transactions into memory first
-        Cursor transactionsCursor = mTransactionsDbAdapter.fetchAllRecords();
-        try {
-            while (transactionsCursor.moveToNext()) {
-                Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(transactionsCursor);
-                transaction.toGncXml(document, bookNode);
-            }
-        } finally {
-            transactionsCursor.close();
-        }
-
-        document.appendChild(rootElement);
-
-        StringWriter stringWriter = new StringWriter();
-        try {
-            TransformerFactory transformerFactory = TransformerFactory.newInstance();
-
-            Transformer transformer = transformerFactory.newTransformer();
-
-            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-            DOMSource source = new DOMSource(document);
-            StreamResult result = new StreamResult(stringWriter);
-
-            transformer.transform(source, result);
-            stringWriter.flush();
-        } catch (Exception e) {
-            e.printStackTrace();
-            throw new ExporterException(mParameters, e);
-        }
-        return stringWriter.toString();
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 298fa085..299934e0 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -88,6 +88,7 @@
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
 
     //TODO: Remove this in the future when scheduled transactions are improved
+    @Deprecated
     public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
 
     public static final String BOOK_VERSION         = "2.0.0";
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index db0dfa7a..3b6ee9dd 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -292,7 +292,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_DESCRIPTION)){
             mTransaction.setDescription(characterString);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
-            try {
+            try { //TODO: Use the created_at and modified_at dates in the xml
                 if (mIsDatePosted && mTransaction != null) {
                     mTransaction.setTime(GncXmlHelper.parseDate(characterString));
                     mIsDatePosted = false;
@@ -303,7 +303,8 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_RECURRENCE_PERIOD)){
-            mTransaction.setRecurrencePeriod(Long.parseLong(characterString));
+            mTransaction.setTemplate(Long.parseLong(characterString) > 0);
+            //TODO: Remove this and properly parse recurrence events
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ID)){
             mSplit.setUID(characterString);
@@ -327,7 +328,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
                 mTransactionList.add(mTransaction);
             }
             else {
-                if (mTransaction.getRecurrencePeriod() > 0) { //TODO: Fix this when scheduled actions are expanded
+                if (mTransaction.isTemplate()) { //TODO: Fix this when scheduled actions are expanded
                     mTransactionsDbAdapter.scheduleTransaction(mTransaction);
                     mTransactionsDbAdapter.addTransaction(mTransaction);
                 } else {
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 37489005..c35f09a5 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -18,7 +18,6 @@
 
 
 import org.gnucash.android.export.ofx.OfxHelper;
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -516,72 +515,4 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		parent.appendChild(statementTransactions);
 				
 	}
-
-    /**
-     * Method which generates the GnuCash XML DOM for this account
-     * @param doc {@link org.w3c.dom.Document} for creating nodes
-     * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
-     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
-     */
-    public void toGncXml(Document doc, Element rootNode) {
-        Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
-        nameNode.appendChild(doc.createTextNode(mName));
-
-        Element idNode = doc.createElement(GncXmlHelper.TAG_ACCT_ID);
-        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element typeNode = doc.createElement(GncXmlHelper.TAG_TYPE);
-        typeNode.appendChild(doc.createTextNode(mAccountType.name()));
-
-        Element commodityNode = doc.createElement(GncXmlHelper.TAG_COMMODITY);
-        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
-        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
-        commodityNode.appendChild(cmdtySpacenode);
-        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
-        cmdtyIdNode.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));
-        commodityNode.appendChild(cmdtyIdNode);
-
-        Element commodityScuNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SCU);
-        int fractionDigits = mCurrency.getDefaultFractionDigits();
-        commodityScuNode.appendChild(doc.createTextNode(Integer.toString((int) Math.pow(10, fractionDigits))));
-
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_ACCT_DESCRIPTION);
-        descriptionNode.appendChild(doc.createTextNode(mName));
-
-        Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
-        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_PLACEHOLDER,
-                Boolean.toString(mIsPlaceholderAccount), GncXmlHelper.ATTR_VALUE_STRING));
-
-        if (mColorCode != null && mColorCode.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode, GncXmlHelper.ATTR_VALUE_STRING));
-        }
-
-        if (mDefaultTransferAccountUID != null && mDefaultTransferAccountUID.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT, mDefaultTransferAccountUID, "guid"));
-        }
-
-        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc,
-                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite), GncXmlHelper.ATTR_VALUE_STRING));
-
-        Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
-        accountNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        accountNode.appendChild(nameNode);
-        accountNode.appendChild(idNode);
-        accountNode.appendChild(typeNode);
-        accountNode.appendChild(commodityNode);
-        accountNode.appendChild(commodityScuNode);
-        accountNode.appendChild(descriptionNode);
-        accountNode.appendChild(acctSlotsNode);
-
-
-        if (mParentAccountUID != null && mParentAccountUID.trim().length() > 0){
-            Element parentAccountNode = doc.createElement(GncXmlHelper.TAG_PARENT_UID);
-            parentAccountNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            parentAccountNode.appendChild(doc.createTextNode(mParentAccountUID));
-            accountNode.appendChild(parentAccountNode);
-        }
-
-        rootNode.appendChild(accountNode);
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index dc08a9c3..ad322f6c 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -1,11 +1,27 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.gnucash.android.model;
 
 import java.sql.Timestamp;
 import java.util.UUID;
 
 /**
- * Represents the base data model which is persisted to the database.
- * All other models should extend this base model and add entries.
+ * Abstract class representing the base data model which is persisted to the database.
+ * All other models should extend this base model.
  */
 public abstract class BaseModel {
     protected String mUID;
@@ -30,26 +46,53 @@ protected String generateUID(){
         return UUID.randomUUID().toString().replaceAll("-", "");
     }
 
+    /**
+     * Returns the GUID of the model
+     * @return String unique identifier for this model
+     */
     public String getUID() {
         return mUID;
     }
 
+    /**
+     * Sets the GUID of the model
+     * @param uid String unique ID
+     */
     public void setUID(String uid) {
         this.mUID = uid;
     }
 
+    /**
+     * Returns the timestamp when this model entry was created in the database
+     * @return Timestamp of creation of model
+     */
     public Timestamp getCreatedTimestamp() {
         return mCreatedTimestamp;
     }
 
+    /**
+     * Sets the timestamp when the model was created
+     * @param createdTimestamp Timestamp of model creation
+     */
     public void setCreatedTimestamp(Timestamp createdTimestamp) {
         this.mCreatedTimestamp = createdTimestamp;
     }
 
+    /**
+     * Returns the timestamp when the model record in the database was last modified.
+     * @return Timestamp of last modification
+     */
     public Timestamp getModifiedTimestamp() {
         return mModifiedTimestamp;
     }
 
+    /**
+     * Sets the timestamp when the model was last modified in the database
+     * <p>Although the database automatically has triggers for entering the timestamp,
+     * when SQL INSERT OR REPLACE syntax is used, it is possible to override the modified timestamp.
+     * <br/>In that case, it has to be explicitly set in the SQL statement.</p>
+     * @param modifiedTimestamp Timestamp of last modification
+     */
     public void setModifiedTimestamp(Timestamp modifiedTimestamp) {
         this.mModifiedTimestamp = modifiedTimestamp;
     }
diff --git a/app/src/main/java/org/gnucash/android/model/Split.java b/app/src/main/java/org/gnucash/android/model/Split.java
index 9160f71f..91a72e92 100644
--- a/app/src/main/java/org/gnucash/android/model/Split.java
+++ b/app/src/main/java/org/gnucash/android/model/Split.java
@@ -161,45 +161,6 @@ public String toCsv(){
     }
 
     /**
-     * Creates a GnuCash XML representation of this split
-     * @param doc XML {@link org.w3c.dom.Document} for creating the nodes
-     * @param rootNode Parent node to append the split XML to
-     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
-     */
-    public void toGncXml(Document doc, Element rootNode) {
-        Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
-        idNode.setAttribute("type", "guid");
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element memoNode = doc.createElement(GncXmlHelper.TAG_SPLIT_MEMO);
-        if (mMemo != null)
-            memoNode.appendChild(doc.createTextNode(mMemo));
-
-        Element stateNode = doc.createElement(GncXmlHelper.TAG_RECONCILED_STATE);
-        stateNode.appendChild(doc.createTextNode("n"));
-
-        Element valueNode = doc.createElement(GncXmlHelper.TAG_SPLIT_VALUE);
-        valueNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
-
-        Element quantityNode = doc.createElement(GncXmlHelper.TAG_SPLIT_QUANTITY);
-        quantityNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
-
-        Element accountNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ACCOUNT);
-        accountNode.setAttribute("type", "guid");
-        accountNode.appendChild(doc.createTextNode(mAccountUID));
-
-        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRN_SPLIT);
-        splitNode.appendChild(idNode);
-        splitNode.appendChild(memoNode);
-        splitNode.appendChild(stateNode);
-        splitNode.appendChild(valueNode);
-        splitNode.appendChild(quantityNode);
-        splitNode.appendChild(accountNode);
-
-        rootNode.appendChild(splitNode);
-    }
-
-    /**
      * Parses a split which is in the format "<amount>;<currency_code>;<account_uid>;<type>;<memo>".
      * The split input string is the same produced by the {@link Split#toCsv()} method
      *
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index a44cd4b2..302c192a 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -18,10 +18,8 @@
 
 import android.content.Intent;
 
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.Account.OfxAccountType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -44,18 +42,21 @@
 
 	/**
 	 * Key for passing the account unique Identifier as an argument through an {@link Intent}
+     * @deprecated use {@link Split}s instead
 	 */
     @Deprecated
 	public static final String EXTRA_ACCOUNT_UID 	= "org.gnucash.android.extra.account_uid";
 
 	/**
 	 * Key for specifying the double entry account
+     * @deprecated use {@link Split}s instead
 	 */
     @Deprecated
 	public static final String EXTRA_DOUBLE_ACCOUNT_UID = "org.gnucash.android.extra.double_account_uid";
 
 	/**
 	 * Key for identifying the amount of the transaction through an Intent
+     * @deprecated use {@link Split}s instead
 	 */
     @Deprecated
 	public static final String EXTRA_AMOUNT 		= "org.gnucash.android.extra.amount";
@@ -63,6 +64,7 @@
     /**
      * Extra key for the transaction type.
      * This value should typically be set by calling {@link TransactionType#name()}
+     * @deprecated use {@link Split}s instead
      */
     @Deprecated
     public static final String EXTRA_TRANSACTION_TYPE = "org.gnucash.android.extra.transaction_type";
@@ -106,11 +108,9 @@
 	private long mTimestamp;
 
     /**
-     * Recurrence period of this transaction.
-     * <p>If this value is set then it means this transaction is a template which will be used to
-     * create a transaction every turn of the recurrence period</p>
+     * Flag indicating that this transaction is a template
      */
-    private long mRecurrencePeriod = 0;
+    private int mIsTemplate = 0;
 
 	/**
 	 * Overloaded constructor. Creates a new transaction instance with the
@@ -126,7 +126,8 @@ public Transaction(String name) {
      * Copy constructor.
      * Creates a new transaction object which is a clone of the parameter.
      * <p><b>Note:</b> The unique ID of the transaction is not cloned if the parameter <code>generateNewUID</code>,
-     * is set to false. Otherwise, a new one is generated.</p>
+     * is set to false. Otherwise, a new one is generated.<br/>
+     * The export flag and the template flag are not copied from the old transaction to the new.</p>
      * @param transaction Transaction to be cloned
      * @param generateNewUID Flag to determine if new UID should be assigned or not
      */
@@ -136,7 +137,6 @@ public Transaction(Transaction transaction, boolean generateNewUID){
         setNote(transaction.getNote());
         setTime(transaction.getTimeMillis());
         mCurrencyCode = transaction.mCurrencyCode;
-        mRecurrencePeriod = transaction.mRecurrencePeriod;
         //exported flag is left at default value of false
 
         for (Split split : transaction.mSplitList) {
@@ -396,19 +396,19 @@ public boolean isExported(){
 	}
 
     /**
-     * Returns the recurrence period for this transaction
-     * @return Recurrence period for this transaction in milliseconds
+     * Returns {@code true} if this transaction is a template, {@code false} otherwise
+     * @return {@code true} if this transaction is a template, {@code false} otherwise
      */
-    public long getRecurrencePeriod() {
-        return mRecurrencePeriod;
+    public boolean isTemplate(){
+        return mIsTemplate == 1;
     }
 
     /**
-     * Sets the recurrence period for this transaction
-     * @param recurrenceId Recurrence period in milliseconds
+     * Sets flag indicating whether this transaction is a template or not
+     * @param isTemplate Flag indicating if transaction is a template or not
      */
-    public void setRecurrencePeriod(long recurrenceId) {
-        this.mRecurrencePeriod = recurrenceId;
+    public void setTemplate(boolean isTemplate){
+        mIsExported = isTemplate ? 1 : 0;
     }
 
     /**
@@ -485,71 +485,6 @@ public Element toOFX(Document doc, String accountUID){
 	}
 
     /**
-     * Generate the GncXML for the transaction and append to the DOM document
-     * @param doc XML document to which transaction should be added
-     * @param rootElement Parent node for the XML
-     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
-     */
-    public void toGncXml(Document doc, Element rootElement) {
-        Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
-        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element currencyNode = doc.createElement(GncXmlHelper.TAG_TRX_CURRENCY);
-        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
-        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
-        currencyNode.appendChild(cmdtySpacenode);
-        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
-        cmdtyIdNode.appendChild(doc.createTextNode(mCurrencyCode));
-        currencyNode.appendChild(cmdtyIdNode);
-
-        Element datePostedNode = doc.createElement(GncXmlHelper.TAG_DATE_POSTED);
-        Element datePNode = doc.createElement(GncXmlHelper.TAG_DATE);
-        datePNode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
-        datePostedNode.appendChild(datePNode);
-
-        Element dateEneteredNode = doc.createElement(GncXmlHelper.TAG_DATE_ENTERED);
-        Element dateENode = doc.createElement(GncXmlHelper.TAG_DATE);
-        dateENode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
-        dateEneteredNode.appendChild(dateENode);
-
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRN_DESCRIPTION);
-        if (mDescription != null) {
-            descriptionNode.appendChild(doc.createTextNode(mDescription));
-        }
-
-        Element trnSlotsNode = doc.createElement(GncXmlHelper.TAG_TRN_SLOTS);
-        if (mNotes != null && mNotes.length() > 0) {
-            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes, GncXmlHelper.ATTR_VALUE_STRING));
-            //TODO: Consider adding future transactions date as slot here too
-        }
-        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRN_SPLITS);
-        for (Split split : mSplitList) {
-            split.toGncXml(doc, trnSplits);
-        }
-
-        Element transactionNode = doc.createElement(GncXmlHelper.TAG_TRANSACTION);
-        transactionNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        transactionNode.appendChild(idNode);
-        transactionNode.appendChild(currencyNode);
-        transactionNode.appendChild(datePostedNode);
-        transactionNode.appendChild(dateEneteredNode);
-        transactionNode.appendChild(descriptionNode);
-        if (mNotes != null && mNotes.length() > 0){
-            transactionNode.appendChild(trnSlotsNode);
-        }
-        //TODO: Improve xml compatibilty with desktop for scheduled actions
-        if (mRecurrencePeriod != 0) {
-            Element recurrenceNode = doc.createElement(GncXmlHelper.TAG_RECURRENCE_PERIOD);
-            recurrenceNode.appendChild(doc.createTextNode(String.valueOf(mRecurrencePeriod)));
-            transactionNode.appendChild(recurrenceNode);
-        }
-        transactionNode.appendChild(trnSplits);
-
-        rootElement.appendChild(transactionNode);
-    }
-
-    /**
      * Creates an Intent with arguments from the <code>transaction</code>.
      * This intent can be broadcast to create a new transaction
      * @param transaction Transaction used to create intent
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 9808071e..2b73c10a 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -23,6 +23,7 @@
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledEventDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
@@ -30,11 +31,16 @@
 import org.gnucash.android.model.ScheduledEvent;
 import org.gnucash.android.model.Transaction;
 
+import java.text.SimpleDateFormat;
+import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
 /**
- * Service for running scheduled events
+ * Service for running scheduled events.
+ * <p>The service is started and goes through all scheduled event entries in the the database and executes them.
+ * Then it is stopped until the next time it is run. <br>
+ * Scheduled runs of the service should be achieved using an {@link android.app.AlarmManager}</p>
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class SchedulerService extends IntentService {
@@ -46,7 +52,7 @@
      *
      */
     public SchedulerService() {
-        super("SchedulerService");
+        super(LOG_TAG);
     }
 
     @Override
@@ -65,8 +71,8 @@ protected void onHandleIntent(Intent intent) {
             long endTime    = scheduledEvent.getEndTime();
 
             long now = System.currentTimeMillis();
-            //if we did not exceed the endtime, and one execution period has passed since last run
-            if (endTime > 0 && now < endTime && (lastRun + period) < now ){
+            //if we did not exceed the endtime (if there is one), and one execution period has passed since last run
+            if (((endTime > 0 && now < endTime) || endTime == 0) && (lastRun + period) < now ){
                 executeScheduledEvent(scheduledEvent);
             }
         }
@@ -99,13 +105,21 @@ private void executeScheduledEvent(ScheduledEvent scheduledEvent){
                 } catch (InterruptedException e) {
                     //TODO: Create special log for scheduler service
                     Log.e(LOG_TAG, e.getMessage());
+                    return; //return immediately, do not update last run time of event
                 } catch (ExecutionException e) {
                     //TODO: Log to crashlytics
                     e.printStackTrace();
                     Log.e(LOG_TAG, e.getMessage());
+                    return; //return immediately, do not update last run time of event
                 }
                 break;
         }
 
+        //update last run time
+        ScheduledEventDbAdapter.getInstance().updateRecord(
+                scheduledEvent.getUID(),
+                DatabaseSchema.ScheduledEventEntry.COLUMN_LAST_RUN,
+                Long.toString(System.currentTimeMillis())
+        );
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 1f071936..07076059 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -266,12 +266,17 @@ protected void onNewIntent(Intent intent) {
         setTab(index);
     }
 
+    /**
+     * Sets the current tab in the ViewPager
+     * @param index Index of fragment to be loaded
+     */
     public void setTab(int index){
         mPager.setCurrentItem(index);
     }
 
     /**
-     * Loads default setting for currency and performs app first-run initialization
+     * Loads default setting for currency and performs app first-run initialization.
+     * <p>Also handles displaying the What's New dialog</p>
      */
     private void init() {
         PreferenceManager.setDefaultValues(this, R.xml.fragment_transaction_preferences, false);
@@ -283,21 +288,20 @@ private void init() {
         if (firstRun){
             showFirstRunDialog();
             //default to using double entry and save the preference explicitly
-            prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).commit();
-
+            prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).apply();
         }
 
         if (hasNewFeatures()){
             showWhatsNewDialog(this);
+            GnuCashApplication.startScheduledEventExecutionService(this);
         }
-
     }
 
     @Override
     protected void onDestroy() {
         super.onDestroy();
         SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
-        preferences.edit().putInt(LAST_OPEN_TAB_INDEX, mPager.getCurrentItem()).commit();
+        preferences.edit().putInt(LAST_OPEN_TAB_INDEX, mPager.getCurrentItem()).apply();
     }
 
     /**
@@ -315,7 +319,7 @@ private boolean hasNewFeatures(){
         if (currentMinor > previousMinor){
             Editor editor = prefs.edit();
             editor.putInt(getString(R.string.key_previous_minor_version), currentMinor);
-            editor.commit();
+            editor.apply();
             return true;
         }
         return false;
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
index 75bb8c8e..6025e3a3 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -226,8 +226,7 @@ public void setImbalanceAccountsHidden(boolean useDoubleEntry) {
         for (Currency currency : currencies) {
             String uid = accountsDbAdapter.getImbalanceAccountUID(currency);
             if (uid != null){
-                accountsDbAdapter.updateRecord(DatabaseSchema.AccountEntry.TABLE_NAME,
-                        uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
+                accountsDbAdapter.updateRecord(uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
             }
         }
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index ab7e356f..1fc68f83 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -110,11 +110,13 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                         Log.i(TAG, "Cancelling scheduled transaction(s)");
                         String trnUID = mTransactionsDbAdapter.getUID(id);
                         ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-                        ScheduledEvent event = scheduledEventDbAdapter.getScheduledEventWithUID(trnUID);
+                        List<ScheduledEvent> events = scheduledEventDbAdapter.getScheduledEventsWithUID(trnUID);
 
                         if (mTransactionsDbAdapter.deleteRecord(id)){
                             Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
-                            scheduledEventDbAdapter.deleteRecord(event.getUID());
+                            for (ScheduledEvent event : events) {
+                                scheduledEventDbAdapter.deleteRecord(event.getUID());
+                            }
                         }
                     }
                     mode.finish();
@@ -409,11 +411,14 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledEventDbAdapter scheduledEventDbAdapter = ScheduledEventDbAdapter.getInstance();
-            ScheduledEvent event = scheduledEventDbAdapter.getScheduledEventWithUID(transaction.getUID());
-            descriptionTextView.setText(event.getRepeatString());
+            List<ScheduledEvent> events = scheduledEventDbAdapter.getScheduledEventsWithUID(transaction.getUID());
+            StringBuilder repeatStringBuilder = new StringBuilder();
+            for (ScheduledEvent event : events) {
+                repeatStringBuilder.append(event.getRepeatString()).append("\n");
+            }
+            descriptionTextView.setText(repeatStringBuilder.toString());
 
         }
-
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 63bf27b0..5c7b0187 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -674,21 +674,20 @@ private void saveNewTransaction() {
      */
     private void scheduleRecurringTransaction() {
         List<ScheduledEvent> events = RecurrenceParser.parse(mEventRecurrence, ScheduledEvent.EventType.TRANSACTION);
+
+        if (events.size() == 0) //there are no scheduled events detected
+            return;
+
         Transaction recurringTransaction;
-        if (mTransaction.getRecurrencePeriod() > 0) //if we are editing the recurring transaction itself...
-            recurringTransaction = mTransaction;
-        else {
-            recurringTransaction = new Transaction(mTransaction, true);
-            mTransactionsDbAdapter.addTransaction(recurringTransaction);
-            //value does not matter, just should be > 0 to mark as a recurring transaction
-            recurringTransaction.setRecurrencePeriod(RecurrenceParser.DAY_MILLIS);
-        }
+        //creating a new recurring transaction
+        recurringTransaction = new Transaction(mTransaction, true);
+        recurringTransaction.setTemplate(true);
         mTransactionsDbAdapter.addTransaction(recurringTransaction);
 
         ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-
         for (ScheduledEvent event : events) {
             event.setEventUID(recurringTransaction.getUID());
+            event.setLastRun(System.currentTimeMillis());
             scheduledEventDbAdapter.addScheduledEvent(event);
 
             Log.i("TransactionFormFragment", event.toString());
diff --git a/build.gradle b/build.gradle
index 4f9e38cf..eae95265 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,7 +3,7 @@ buildscript {
 		jcenter()
 	}
 	dependencies {
-		classpath 'com.android.tools.build:gradle:1.0.1'
+		classpath 'com.android.tools.build:gradle:1.1.0'
 	}
 }
 

From 31e80aced0317f704434f258dea0b4a044f3e22d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Mar 2015 16:06:18 +0100
Subject: [PATCH 07/52] Implemented XML serialization of transaction templates
 and scheduled events

Updated: date_posted and date_entered in XML now properly reflect the transaction date, and the created_at date
Added some extra fields to ScheduledEvents for better parsing and tracking of events

TODO: Parse scheduled events and transaction templates from XML
---
 .../org/gnucash/android/db/DatabaseAdapter.java    |  12 +-
 .../org/gnucash/android/db/DatabaseHelper.java     |   5 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |   5 +-
 .../android/db/ScheduledEventDbAdapter.java        |  24 +++
 .../java/org/gnucash/android/export/Exporter.java  |   4 +
 .../gnucash/android/export/xml/GncXmlExporter.java | 166 ++++++++++++++++-----
 .../gnucash/android/export/xml/GncXmlHelper.java   |  52 ++++++-
 .../org/gnucash/android/model/ScheduledEvent.java  |  95 +++++++++++-
 .../gnucash/android/service/SchedulerService.java  |  16 +-
 .../gnucash/android/ui/util/RecurrenceParser.java  |   2 +-
 10 files changed, 331 insertions(+), 50 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index fb944a8b..05d8375b 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -205,7 +205,17 @@ public Cursor fetchRecord(long rowId){
 		return mDb.query(mTableName, null, DatabaseSchema.CommonColumns._ID + "=" + rowId,
 				null, null, null, null);
 	}
-	
+
+    /**
+     * Retrieves record with GUID {@code uid} from database table
+     * @param uid GUID of record to be retrieved
+     * @return {@link Cursor} to record retrieved
+     */
+    public Cursor fetchRecord(@NonNull String uid){
+        return mDb.query(mTableName, null, CommonColumns.COLUMN_UID + "=?" ,
+                new String[]{uid}, null, null, null);
+    }
+
 	/**
 	 * Retrieves all records from database table
 	 * @return {@link Cursor} to all records in table <code>tableName</code>
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 7b147b15..28074cca 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -122,6 +122,9 @@
             + ScheduledEventEntry.COLUMN_START_TIME     + " integer not null, "
             + ScheduledEventEntry.COLUMN_END_TIME       + " integer default 0, "
             + ScheduledEventEntry.COLUMN_TAG            + " text, "
+            + ScheduledEventEntry.COLUMN_ENABLED        + " tinyint default 1, " //enabled by default
+            + ScheduledEventEntry.COLUMN_NUM_OCCURRENCES+ " integer default 0, "
+            + ScheduledEventEntry.COLUMN_EXECUTION_COUNT+ " integer default 0, "
             + ScheduledEventEntry.COLUMN_CREATED_AT     + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
             + ScheduledEventEntry.COLUMN_MODIFIED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
             + ");" + createUpdatedAtTrigger(ScheduledEventEntry.TABLE_NAME);
@@ -377,7 +380,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
                 //TODO: Migrate old scheduled events using only SQL, code had changed
                 GnuCashApplication.startScheduledEventExecutionService(GnuCashApplication.getAppContext());
-
+                //TODO: Take care to properly migrate the created_at dates for transactions (use the date already in the transaction)
 
             }
 		}
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 49177290..63ff4e1c 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -115,7 +115,10 @@ private DatabaseSchema(){}
         /**
          * Tags for any scheduled event specific information
          */
-        public static final String COLUMN_TAG           = "tag";
+        public static final String COLUMN_TAG               = "tag";
+        public static final String COLUMN_ENABLED           = "is_enabled";
+        public static final String COLUMN_NUM_OCCURRENCES   = "num_occurrences";
+        public static final String COLUMN_EXECUTION_COUNT   = "execution_count";
 
         public static final String INDEX_UID            = "scheduled_event_uid_index";
     }
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
index eb8c7cd6..49c82328 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
@@ -23,6 +23,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema.ScheduledEventEntry;
+import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.model.ScheduledEvent;
 
 import java.util.ArrayList;
@@ -61,6 +62,9 @@ public long addScheduledEvent(ScheduledEvent scheduledEvent){
         contentValues.put(ScheduledEventEntry.COLUMN_LAST_RUN,  scheduledEvent.getLastRun());
         contentValues.put(ScheduledEventEntry.COLUMN_TYPE,      scheduledEvent.getEventType().name());
         contentValues.put(ScheduledEventEntry.COLUMN_TAG,       scheduledEvent.getTag());
+        contentValues.put(ScheduledEventEntry.COLUMN_ENABLED,   scheduledEvent.isEnabled() ? "1":"0");
+        contentValues.put(ScheduledEventEntry.COLUMN_NUM_OCCURRENCES, scheduledEvent.getNumberOfOccurences());
+        contentValues.put(ScheduledEventEntry.COLUMN_EXECUTION_COUNT, scheduledEvent.getExecutionCount());
 
         Log.d(TAG, "Replace scheduled event in the db");
         return mDb.replace(ScheduledEventEntry.TABLE_NAME, null, contentValues);
@@ -80,6 +84,9 @@ private ScheduledEvent buildScheduledEventInstance(final Cursor cursor){
         long lastRun    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_LAST_RUN));
         String typeString = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TYPE));
         String tag      = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TAG));
+        boolean enabled = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_ENABLED)) > 0;
+        int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_NUM_OCCURRENCES));
+        int execCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_EXECUTION_COUNT));
 
         ScheduledEvent event = new ScheduledEvent(ScheduledEvent.EventType.valueOf(typeString));
         populateModel(cursor, event);
@@ -89,6 +96,9 @@ private ScheduledEvent buildScheduledEventInstance(final Cursor cursor){
         event.setEventUID(eventUid);
         event.setLastRun(lastRun);
         event.setTag(tag);
+        event.setEnabled(enabled);
+        event.setNumberOfOccurences(numOccurrences);
+        event.setExecutionCount(execCount);
 
         return event;
     }
@@ -145,4 +155,18 @@ public ScheduledEvent getScheduledEvent(String uid){
         return scheduledEvents;
     }
 
+    /**
+     * Returns all enabled scheduled actions in the database
+     * @return List of enalbed scheduled actions
+     */
+    public List<ScheduledEvent> getAllEnabledScheduledActions(){
+        Cursor cursor = mDb.query(mTableName,
+                        null, ScheduledEventEntry.COLUMN_ENABLED + "=1", null, null, null, null);
+        List<ScheduledEvent> scheduledEvents = new ArrayList<ScheduledEvent>();
+        while (cursor.moveToNext()){
+            scheduledEvents.add(buildScheduledEventInstance(cursor));
+        }
+        return scheduledEvents;
+    }
+
 }
diff --git a/app/src/main/java/org/gnucash/android/export/Exporter.java b/app/src/main/java/org/gnucash/android/export/Exporter.java
index f554b76a..910ec5a1 100644
--- a/app/src/main/java/org/gnucash/android/export/Exporter.java
+++ b/app/src/main/java/org/gnucash/android/export/Exporter.java
@@ -23,6 +23,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.ScheduledEventDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 
@@ -62,6 +63,7 @@
     protected AccountsDbAdapter mAccountsDbAdapter;
     protected TransactionsDbAdapter mTransactionsDbAdapter;
     protected SplitsDbAdapter mSplitsDbAdapter;
+    protected ScheduledEventDbAdapter mScheduledEventDbAdapter;
     protected Context mContext;
 
     public Exporter(ExportParams params, SQLiteDatabase db) {
@@ -71,10 +73,12 @@ public Exporter(ExportParams params, SQLiteDatabase db) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
             mSplitsDbAdapter = SplitsDbAdapter.getInstance();
+            mScheduledEventDbAdapter = ScheduledEventDbAdapter.getInstance();
         } else {
             mSplitsDbAdapter = new SplitsDbAdapter(db);
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, mSplitsDbAdapter);
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
+            mScheduledEventDbAdapter = new ScheduledEventDbAdapter(db);
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 19d667ff..16d9d403 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 - 2015 Ngewi Fet <ngewif@gmail.com>
  * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -27,23 +27,13 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Transaction;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
+import org.gnucash.android.model.ScheduledEvent;
 import org.xmlpull.v1.XmlPullParserFactory;
 import org.xmlpull.v1.XmlSerializer;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
 import java.io.*;
 import java.math.BigDecimal;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Currency;
 import java.util.List;
@@ -169,7 +159,11 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
         cursor.close();
     }
 
-    public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
+    private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTemplates) throws IOException {
+        String where = null;
+        if (exportTemplates){
+            where = TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_TEMPLATE + "=0";
+        }
         Cursor cursor = mTransactionsDbAdapter.fetchTransactionsWithSplits(
                 new String[]{
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_UID + " AS trans_uid",
@@ -178,14 +172,13 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
-                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS trans_recur",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_CREATED_AT + " AS trans_date_posted",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_UID + " AS split_uid",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_MEMO + " AS split_memo",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_TYPE + " AS split_type",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_AMOUNT + " AS split_amount",
-                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"
-                }, null, null,
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC , " +
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"},
+                        where, null,
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
 
@@ -194,17 +187,11 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
         int fractionDigits;
         BigDecimal denom = new BigDecimal(100);
         String denomString = "100";
-        int recur = 0;
         while (cursor.moveToNext()){
             String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
             if (!lastTrxUID.equals(curTrxUID)) { // new transaction starts
                 if (!lastTrxUID.equals("")) { // there's an old transaction, close it
                     xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
-                    if (recur > 0) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                        xmlSerializer.text(Integer.toString(recur));
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                    }
                     xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
                 }
                 // new transaction
@@ -231,19 +218,23 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
                 xmlSerializer.text(currency);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
-                // date posted
+                // date posted, time which user put on the transaction
                 String strDate = GncXmlHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time")));
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_POSTED);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
                 xmlSerializer.text(strDate);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
-                // date entered
+
+                // date entered, time when the transaction was actually created
+                Timestamp timeEntered = Timestamp.valueOf(cursor.getString(cursor.getColumnIndexOrThrow("trans_date_posted")));
+                String dateEntered = GncXmlHelper.formatDate(timeEntered.getTime());
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.text(strDate);
+                xmlSerializer.text(dateEntered);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+
                 // description
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
                 xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
@@ -267,8 +258,6 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
                     slotValue.add("false");
                 }
                 exportSlots(xmlSerializer, slotKey, slotType, slotValue);
-                // recurrence period, will be write out when all splits are generated.
-                recur = cursor.getInt(cursor.getColumnIndexOrThrow("trans_recur"));
                 // splits start
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
             }
@@ -311,16 +300,118 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
         }
         if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
             xmlSerializer.endTag(null,GncXmlHelper.TAG_TRN_SPLITS);
-            if (recur > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                xmlSerializer.text(Integer.toString(recur));
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-            }
             xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
         }
         cursor.close();
     }
 
+    /**
+     * Serializes {@link org.gnucash.android.model.ScheduledEvent}s from the database to XML
+     * @param xmlSerializer XML serializer
+     * @throws IOException
+     */
+    private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOException{
+        Cursor cursor = mScheduledEventDbAdapter.fetchAllRecords();
+        while (cursor.moveToNext()) {
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SCHEDULED_ACTION);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ID);
+            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_UID));
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, actionUID);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ID);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NAME);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TYPE)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NAME);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ENABLED);
+            boolean enabled = cursor.getShort(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_ENABLED)) > 0;
+            xmlSerializer.text(enabled ? "y" : "n");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ENABLED);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_AUTO_CREATE);
+            xmlSerializer.text("y");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_AUTO_CREATE);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_AUTO_CREATE_NOTIFY);
+            xmlSerializer.text("n"); //TODO: if we ever support notifying before creating a scheduled transaction, then update this
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_AUTO_CREATE_NOTIFY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ADVANCE_CREATE_DAYS);
+            xmlSerializer.text("0");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ADVANCE_CREATE_DAYS);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ADVANCE_REMIND_DAYS);
+            xmlSerializer.text("0");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ADVANCE_REMIND_DAYS);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_INSTANCE_COUNT);
+            xmlSerializer.text("1");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_INSTANCE_COUNT);
+
+            //start date
+            long startTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_START_TIME));
+            serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_START, startTime);
+
+            long lastRunTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_LAST_RUN));
+            if (lastRunTime > 0){
+                serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_LAST, lastRunTime);
+            }
+
+            long endTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_END_TIME));
+            if (endTime > 0) {
+                //end date
+                serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_END, endTime);
+            } else { //add number of occurrences
+                int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_NUM_OCCURRENCES));
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
+                xmlSerializer.text(Integer.toString(numOccurrences));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
+
+                //remaining occurrences
+                int executionCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_EXECUTION_COUNT));
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_REM_OCCUR);
+                xmlSerializer.text(Integer.toString(numOccurrences - executionCount));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_REM_OCCUR);
+            }
+
+            String tag = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TAG));
+            if (tag != null && !tag.isEmpty()){
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_TAG);
+                xmlSerializer.text(tag);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_TAG);
+            }
+            //Ignoring GnuCash XML template account: <sx:templ-acct type="guid">2da76df09056540bb3a37e4a04547d82</sx:templ-acct>
+
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_SCHEDULE);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.RECURRENCE_VERSION);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_RX_MULT);
+            xmlSerializer.text("1");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_MULT);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
+            long period = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_PERIOD));
+            xmlSerializer.text(GncXmlHelper.getScheduledPeriodType(ScheduledEvent.getPeriodType(period)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
+
+            serializeDate(xmlSerializer, GncXmlHelper.TAG_RX_START, startTime);
+
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_SCHEDULE);
+
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SCHEDULED_ACTION);
+        }
+    }
+
+    /**
+     * Serializes a date as a {@code tag} which has a nested {@link GncXmlHelper#TAG_GDATE} which
+     * has the date as a text element formatted using {@link GncXmlHelper#DATE_FORMATTER}
+     * @param xmlSerializer XML serializer
+     * @param tag Enclosing tag
+     * @param timeMillis Date to be formatted and output
+     * @throws IOException
+     */
+    private void serializeDate(XmlSerializer xmlSerializer, String tag, long timeMillis) throws IOException {
+        xmlSerializer.startTag(null, tag);
+        xmlSerializer.startTag(null, GncXmlHelper.TAG_GDATE);
+        xmlSerializer.text(GncXmlHelper.DATE_FORMATTER.format(timeMillis));
+        xmlSerializer.endTag(null, GncXmlHelper.TAG_GDATE);
+        xmlSerializer.endTag(null, tag);
+    }
+
     @Override
     public void generateExport(Writer writer) throws ExporterException{
         try {
@@ -366,7 +457,12 @@ public void generateExport(Writer writer) throws ExporterException{
             exportAccounts(xmlSerializer);
 
             // transactions.
-            exportTransactions(xmlSerializer);
+            exportTransactions(xmlSerializer, false);
+
+            //transaction templates
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTION);
+            exportTransactions(xmlSerializer, true);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTION);
 
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_ROOT);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 299934e0..1bcb02c5 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -18,6 +18,7 @@
 package org.gnucash.android.export.xml;
 
 import org.gnucash.android.model.Money;
+import org.gnucash.android.model.ScheduledEvent;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.TransactionType;
 import org.w3c.dom.Document;
@@ -27,6 +28,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 
 /**
  * Collection of helper tags and methods for Gnc XML export
@@ -43,7 +45,7 @@
     public static final String ATTR_VALUE_STRING    = "string";
     public static final String ATTR_VALUE_GUID      = "guid";
     public static final String ATTR_VALUE_BOOK      = "book";
-    public static final String ATTR_VALUE_GDATE     = "gdate";
+    public static final String TAG_GDATE = "gdate";
 
     /*
     Qualified GnuCash XML tag names
@@ -91,9 +93,32 @@
     @Deprecated
     public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
 
+    public static final String TAG_SCHEDULED_ACTION         = "gnc:schedxaction";
+    public static final String TAG_SX_ID                    = "sx:id";
+    public static final String TAG_SX_NAME                  = "sx:name";
+    public static final String TAG_SX_ENABLED               = "sx:enabled";
+    public static final String TAG_SX_AUTO_CREATE           = "sx:autoCreate";
+    public static final String TAG_SX_AUTO_CREATE_NOTIFY    = "sx:autoCreateNotify";
+    public static final String TAG_SX_ADVANCE_CREATE_DAYS   = "sx:advanceCreateDays";
+    public static final String TAG_SX_ADVANCE_REMIND_DAYS   = "sx:advanceRemindDays";
+    public static final String TAG_SX_INSTANCE_COUNT        = "sx:instanceCount";
+    public static final String TAG_SX_START                 = "sx:start";
+    public static final String TAG_SX_LAST                  = "sx:last";
+    public static final String TAG_SX_END                   = "sx:end";
+    public static final String TAG_SX_NUM_OCCUR             = "sx:num-occur";
+    public static final String TAG_SX_REM_OCCUR             = "sx:rem-occur";
+    public static final String TAG_SX_TAG                   = "sx:tag";
+    public static final String TAG_SX_SCHEDULE              = "sx:schedule";
+    public static final String TAG_RECURRENCE               = "gnc:recurrence";
+    public static final String TAG_RX_MULT                  = "recurrence:mult";
+    public static final String TAG_RX_PERIOD_TYPE           = "recurrence:period_type";
+    public static final String TAG_RX_START                 = "recurrence:start";
+
+
+    public static final String RECURRENCE_VERSION   = "1.0.0";
     public static final String BOOK_VERSION         = "2.0.0";
-    public static final SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
-
+    public static final SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z", Locale.US);
+    public static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
 
     public static final String KEY_PLACEHOLDER      = "placeholder";
     public static final String KEY_COLOR            = "color";
@@ -111,6 +136,27 @@ public static String formatDate(long milliseconds){
     }
 
     /**
+     * Converts the adjective describing the period type into a noun for the XML format
+     * @param periodType PeriodType from the scheduled action
+     * @return Period type as a noun
+     */
+    public static String getScheduledPeriodType(ScheduledEvent.PeriodType periodType){
+        switch (periodType) {
+            case DAILY:
+                return "day";
+            case WEEKLY:
+                return "week";
+            case FORTNIGHTLY:
+                return "fortnight";
+            case MONTHLY:
+                return "month";
+            case YEARLY:
+                return "year";
+            default:
+                return "";
+        }
+    }
+    /**
      * Parses a date string formatted in the format "yyyy-MM-dd HH:mm:ss Z"
      * @param dateString String date representation
      * @return Time in milliseconds since epoch
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java b/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
index d08bd7b5..905d8503 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
@@ -15,13 +15,11 @@
  */
 package org.gnucash.android.model;
 
-import org.gnucash.android.R;
 import org.gnucash.android.ui.util.RecurrenceParser;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
-import java.util.UUID;
 
 /**
 * Represents a scheduled event which is stored in the database and run at regular mPeriod
@@ -40,6 +38,8 @@
      */
     public enum EventType {TRANSACTION, EXPORT}
 
+    public enum PeriodType {DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY}
+
     /**
      * Next scheduled run of Event
      */
@@ -52,14 +52,30 @@
     private String mEventUID;
 
     /**
+     * Flag indicating if this event is enabled or not
+     */
+    private boolean mIsEnabled;
+
+    /**
      * Type of event being scheduled
      */
     private EventType mEventType;
 
+    /**
+     * Number of occurences of this event
+     */
+    private int mNumberOfOccurences = 0;
+
+    /**
+     * How many times this action has already been executed
+     */
+    private int mNumberOfExecutions = 0;
+
     public ScheduledEvent(EventType eventType){
         mEventType = eventType;
         mStartDate = System.currentTimeMillis();
         mEndDate = 0;
+        mIsEnabled = true; //all actions are enabled by default
     }
 
     public EventType getEventType() {
@@ -94,6 +110,30 @@ public void setPeriod(long period) {
         this.mPeriod = period;
     }
 
+    public static PeriodType getPeriodType(long period){
+        int result = (int) (period/RecurrenceParser.DAY_MILLIS);
+        if (result == 0)
+            return PeriodType.DAILY;
+
+        result = (int) (period/RecurrenceParser.WEEK_MILLIS);
+        if (result == 0)
+            return PeriodType.WEEKLY;
+
+        result = (int) (period/(2*RecurrenceParser.WEEK_MILLIS));
+        if (result == 0)
+            return PeriodType.FORTNIGHTLY;
+
+        result = (int) (period/RecurrenceParser.MONTH_MILLIS);
+        if (result == 0)
+            return PeriodType.MONTHLY;
+
+        result = (int) (period/RecurrenceParser.YEAR_MILLIS);
+        if (result == 0)
+            return PeriodType.YEARLY;
+
+        return PeriodType.DAILY;
+    }
+
     public long getStartTime() {
         return mStartDate;
     }
@@ -106,6 +146,15 @@ public long getEndTime() {
         return mEndDate;
     }
 
+    /**
+     * Returns the approximate end time of this scheduled action.
+     * <p>This is useful when the number of occurences was set, rather than a specific end time.
+     * The end time is then computed from the start time, period and number of occurrences.</p>
+     * @return End time in milliseconds for the scheduled action
+     */
+    public long getApproxEndTime(){
+        return mStartDate + (mPeriod * mNumberOfOccurences);
+    }
     public void setEndTime(long endDate) {
         this.mEndDate = endDate;
     }
@@ -118,6 +167,48 @@ public void setTag(String tag) {
         this.mTag = tag;
     }
 
+    public boolean isEnabled(){
+        return mIsEnabled;
+    }
+
+    public void setEnabled(boolean enabled){
+        this.mIsEnabled = enabled;
+    }
+
+    /**
+     * Returns the total number of occurences of this scheduled action.
+     * <p>Typically, this is set explicity, but if not, then it is computed from the values of
+     * the start date, end date and period.</p>
+     * @return Total number of occurences of this action
+     */
+    public int getNumberOfOccurences(){
+        return mNumberOfOccurences;
+    }
+
+    /**
+     * Sets the number of occurences of this action
+     * @param occurencesCount
+     */
+    public void setNumberOfOccurences(int occurencesCount){
+        this.mNumberOfOccurences = occurencesCount;
+    }
+
+    /**
+     * Returns how many times this scheduled action has already been executed
+     * @return Number of times this action has been executed
+     */
+    public int getExecutionCount(){
+        return mNumberOfExecutions;
+    }
+
+    /**
+     * Sets the number of times this scheduled action has been executed
+     * @param executionCount Number of executions
+     */
+    public void setExecutionCount(int executionCount){
+        mNumberOfExecutions = executionCount;
+    }
+
     /**
      * Returns the event schedule (start, end and recurrence)
      * @return String description of repeat schedule
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 2b73c10a..54fc630b 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -31,8 +31,6 @@
 import org.gnucash.android.model.ScheduledEvent;
 import org.gnucash.android.model.Transaction;
 
-import java.text.SimpleDateFormat;
-import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
@@ -63,7 +61,7 @@ protected void onHandleIntent(Intent intent) {
         wakeLock.acquire();
 
         ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-        List<ScheduledEvent> scheduledEvents = scheduledEventDbAdapter.getAllScheduledEvents();
+        List<ScheduledEvent> scheduledEvents = scheduledEventDbAdapter.getAllEnabledScheduledActions();
 
         for (ScheduledEvent scheduledEvent : scheduledEvents) {
             long lastRun    = scheduledEvent.getLastRun();
@@ -72,7 +70,8 @@ protected void onHandleIntent(Intent intent) {
 
             long now = System.currentTimeMillis();
             //if we did not exceed the endtime (if there is one), and one execution period has passed since last run
-            if (((endTime > 0 && now < endTime) || endTime == 0) && (lastRun + period) < now ){
+            if (((endTime > 0 && now < endTime) || (scheduledEvent.getExecutionCount() < scheduledEvent.getNumberOfOccurences()) || endTime == 0)
+                    && (lastRun + period) < now ){
                 executeScheduledEvent(scheduledEvent);
             }
         }
@@ -119,7 +118,12 @@ private void executeScheduledEvent(ScheduledEvent scheduledEvent){
         ScheduledEventDbAdapter.getInstance().updateRecord(
                 scheduledEvent.getUID(),
                 DatabaseSchema.ScheduledEventEntry.COLUMN_LAST_RUN,
-                Long.toString(System.currentTimeMillis())
-        );
+                Long.toString(System.currentTimeMillis()));
+
+        //update the execution count
+        ScheduledEventDbAdapter.getInstance().updateRecord(
+                scheduledEvent.getUID(),
+                DatabaseSchema.ScheduledEventEntry.COLUMN_EXECUTION_COUNT,
+                Integer.toString(scheduledEvent.getExecutionCount()+1));
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
index e9b356d2..828860e2 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
@@ -126,7 +126,7 @@ private static void parseEndTime(EventRecurrence eventRecurrence, ScheduledEvent
             endTime.parse(eventRecurrence.until);
             scheduledEvent.setEndTime(endTime.toMillis(false));
         } else if (eventRecurrence.count > 0){
-            scheduledEvent.setEndTime(scheduledEvent.getStartTime() + (scheduledEvent.getPeriod() * eventRecurrence.count));
+            scheduledEvent.setNumberOfOccurences(eventRecurrence.count);
         }
     }
 

From d847b7b9cb723593a8d8257eabf12ced9da45dec Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Mar 2015 16:16:37 +0100
Subject: [PATCH 08/52] Code refactoring

Renamed ScheduledEvents to ScheduledActions
and all corresponding sub-classes, database adapters and variables.
---
 .../gnucash/android/app/GnuCashApplication.java    |   9 +-
 .../org/gnucash/android/db/DatabaseHelper.java     |  48 +++++----
 .../org/gnucash/android/db/DatabaseSchema.java     |  12 +--
 ...bAdapter.java => ScheduledActionDbAdapter.java} | 112 ++++++++++-----------
 .../gnucash/android/db/TransactionsDbAdapter.java  |   7 +-
 .../java/org/gnucash/android/export/Exporter.java  |   8 +-
 .../gnucash/android/export/xml/GncXmlExporter.java |  28 +++---
 .../gnucash/android/export/xml/GncXmlHelper.java   |   4 +-
 .../{ScheduledEvent.java => ScheduledAction.java}  |  20 ++--
 .../gnucash/android/service/SchedulerService.java  |  44 ++++----
 .../ScheduledTransactionsListFragment.java         |  18 ++--
 .../ui/transaction/TransactionFormFragment.java    |   8 +-
 .../gnucash/android/ui/util/RecurrenceParser.java  |  50 ++++-----
 13 files changed, 181 insertions(+), 187 deletions(-)
 rename app/src/main/java/org/gnucash/android/db/{ScheduledEventDbAdapter.java => ScheduledActionDbAdapter.java} (51%)
 rename app/src/main/java/org/gnucash/android/model/{ScheduledEvent.java => ScheduledAction.java} (92%)

diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 09e86289..c4615c3f 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -23,7 +23,6 @@
 import android.content.SharedPreferences;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
-import android.os.SystemClock;
 import android.preference.PreferenceManager;
 import android.util.Log;
 import org.gnucash.android.R;
@@ -62,7 +61,7 @@
 
     private static SplitsDbAdapter mSplitsDbAdapter;
 
-    private static ScheduledEventDbAdapter mScheduledEventDbAdapter;
+    private static ScheduledActionDbAdapter mScheduledActionDbAdapter;
 
     @Override
     public void onCreate(){
@@ -78,7 +77,7 @@ public void onCreate(){
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-        mScheduledEventDbAdapter = new ScheduledEventDbAdapter(mDb);
+        mScheduledActionDbAdapter = new ScheduledActionDbAdapter(mDb);
     }
 
     public static AccountsDbAdapter getAccountsDbAdapter() {
@@ -93,8 +92,8 @@ public static SplitsDbAdapter getSplitsDbAdapter() {
         return mSplitsDbAdapter;
     }
 
-    public static ScheduledEventDbAdapter getScheduledEventDbAdapter(){
-        return mScheduledEventDbAdapter;
+    public static ScheduledActionDbAdapter getScheduledEventDbAdapter(){
+        return mScheduledActionDbAdapter;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 28074cca..80656e32 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,13 +25,11 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.ScheduledEvent;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
-import static org.gnucash.android.db.DatabaseSchema.ScheduledEventEntry;
 import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
 import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
-
+import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
 /**
  * Helper class for managing the SQLite database.
  * Creates the database and handles upgrades
@@ -112,22 +110,22 @@
             + ");" + createUpdatedAtTrigger(SplitEntry.TABLE_NAME);
 
 
-    public static final String SCHEDULED_EVENTS_TABLE_CREATE = "CREATE TABLE " + ScheduledEventEntry.TABLE_NAME + " ("
-            + ScheduledEventEntry._ID                   + " integer primary key autoincrement, "
-            + ScheduledEventEntry.COLUMN_UID            + " varchar(255) not null UNIQUE, "
-            + ScheduledEventEntry.COLUMN_EVENT_UID      + " varchar(255) not null, "
-            + ScheduledEventEntry.COLUMN_TYPE           + " varchar(255) not null, "
-            + ScheduledEventEntry.COLUMN_PERIOD         + " integer not null, "
-            + ScheduledEventEntry.COLUMN_LAST_RUN       + " integer default 0, "
-            + ScheduledEventEntry.COLUMN_START_TIME     + " integer not null, "
-            + ScheduledEventEntry.COLUMN_END_TIME       + " integer default 0, "
-            + ScheduledEventEntry.COLUMN_TAG            + " text, "
-            + ScheduledEventEntry.COLUMN_ENABLED        + " tinyint default 1, " //enabled by default
-            + ScheduledEventEntry.COLUMN_NUM_OCCURRENCES+ " integer default 0, "
-            + ScheduledEventEntry.COLUMN_EXECUTION_COUNT+ " integer default 0, "
-            + ScheduledEventEntry.COLUMN_CREATED_AT     + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
-            + ScheduledEventEntry.COLUMN_MODIFIED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
-            + ");" + createUpdatedAtTrigger(ScheduledEventEntry.TABLE_NAME);
+    public static final String SCHEDULED_ACTIONS_TABLE_CREATE = "CREATE TABLE " + ScheduledActionEntry.TABLE_NAME + " ("
+            + ScheduledActionEntry._ID                   + " integer primary key autoincrement, "
+            + ScheduledActionEntry.COLUMN_UID            + " varchar(255) not null UNIQUE, "
+            + ScheduledActionEntry.COLUMN_EVENT_UID      + " varchar(255) not null, "
+            + ScheduledActionEntry.COLUMN_TYPE           + " varchar(255) not null, "
+            + ScheduledActionEntry.COLUMN_PERIOD         + " integer not null, "
+            + ScheduledActionEntry.COLUMN_LAST_RUN       + " integer default 0, "
+            + ScheduledActionEntry.COLUMN_START_TIME     + " integer not null, "
+            + ScheduledActionEntry.COLUMN_END_TIME       + " integer default 0, "
+            + ScheduledActionEntry.COLUMN_TAG            + " text, "
+            + ScheduledActionEntry.COLUMN_ENABLED        + " tinyint default 1, " //enabled by default
+            + ScheduledActionEntry.COLUMN_NUM_OCCURRENCES+ " integer default 0, "
+            + ScheduledActionEntry.COLUMN_EXECUTION_COUNT+ " integer default 0, "
+            + ScheduledActionEntry.COLUMN_CREATED_AT     + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+            + ScheduledActionEntry.COLUMN_MODIFIED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
+            + ");" + createUpdatedAtTrigger(ScheduledActionEntry.TABLE_NAME);
 
 
     /**
@@ -375,7 +373,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 MigrationHelper.createUpdatedAndModifiedColumns(db, SplitEntry.TABLE_NAME);
 
                 Log.i(LOG_TAG, "Creating scheduled events table");
-                db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE); //TODO: Use the actual SQL statements
+                db.execSQL(SCHEDULED_ACTIONS_TABLE_CREATE); //TODO: Use the actual SQL statements
                 //TODO: Migrate existing scheduled transactions (cancel pending intents)
 
                 //TODO: Migrate old scheduled events using only SQL, code had changed
@@ -399,7 +397,7 @@ private void createDatabaseTables(SQLiteDatabase db) {
         db.execSQL(ACCOUNTS_TABLE_CREATE);
         db.execSQL(TRANSACTIONS_TABLE_CREATE);
         db.execSQL(SPLITS_TABLE_CREATE);
-        db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE);
+        db.execSQL(SCHEDULED_ACTIONS_TABLE_CREATE);
 
         String createAccountUidIndex = "CREATE UNIQUE INDEX '" + AccountEntry.INDEX_UID + "' ON "
                 + AccountEntry.TABLE_NAME + "(" + AccountEntry.COLUMN_UID + ")";
@@ -410,8 +408,8 @@ private void createDatabaseTables(SQLiteDatabase db) {
         String createSplitUidIndex = "CREATE UNIQUE INDEX '" + SplitEntry.INDEX_UID +"' ON "
                 + SplitEntry.TABLE_NAME + "(" + SplitEntry.COLUMN_UID + ")";
 
-        String createScheduledEventUidIndex = "CREATE UNIQUE INDEX '" + ScheduledEventEntry.INDEX_UID
-                +"' ON " + ScheduledEventEntry.TABLE_NAME + "(" + ScheduledEventEntry.COLUMN_UID + ")";
+        String createScheduledEventUidIndex = "CREATE UNIQUE INDEX '" + ScheduledActionEntry.INDEX_UID
+                +"' ON " + ScheduledActionEntry.TABLE_NAME + "(" + ScheduledActionEntry.COLUMN_UID + ")";
 
         db.execSQL(createAccountUidIndex);
         db.execSQL(createTransactionUidIndex);
@@ -428,7 +426,7 @@ private void dropAllDatabaseTables(SQLiteDatabase db) {
         db.execSQL("DROP TABLE IF EXISTS " + AccountEntry.TABLE_NAME);
         db.execSQL("DROP TABLE IF EXISTS " + TransactionEntry.TABLE_NAME);
         db.execSQL("DROP TABLE IF EXISTS " + SplitEntry.TABLE_NAME);
-        db.execSQL("DROP TABLE IF EXISTS " + ScheduledEventEntry.TABLE_NAME);
+        db.execSQL("DROP TABLE IF EXISTS " + ScheduledActionEntry.TABLE_NAME);
     }
 
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 63ff4e1c..21b0b556 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -103,23 +103,23 @@ private DatabaseSchema(){}
         public static final String INDEX_UID                    = "split_uid_index";
     }
 
-    public static abstract class ScheduledEventEntry implements CommonColumns {
-        public static final String TABLE_NAME           = "scheduled_events";
+    public static abstract class ScheduledActionEntry implements CommonColumns {
+        public static final String TABLE_NAME           = "scheduled_actions";
 
         public static final String COLUMN_TYPE          = "type";
-        public static final String COLUMN_EVENT_UID     = "event_uid";
+        public static final String COLUMN_EVENT_UID     = "action_uid";
         public static final String COLUMN_START_TIME    = "start_time";
         public static final String COLUMN_END_TIME      = "end_time";
         public static final String COLUMN_LAST_RUN      = "last_run";
         public static final String COLUMN_PERIOD        = "period";
         /**
-         * Tags for any scheduled event specific information
+         * Tags for any scheduled action-specific information
          */
         public static final String COLUMN_TAG               = "tag";
         public static final String COLUMN_ENABLED           = "is_enabled";
         public static final String COLUMN_NUM_OCCURRENCES   = "num_occurrences";
         public static final String COLUMN_EXECUTION_COUNT   = "execution_count";
 
-        public static final String INDEX_UID            = "scheduled_event_uid_index";
+        public static final String INDEX_UID            = "scheduled_action_uid_index";
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
similarity index 51%
rename from app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
rename to app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index 49c82328..a5983c69 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -22,73 +22,73 @@
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.DatabaseSchema.ScheduledEventEntry;
-import org.gnucash.android.export.ExportParams;
-import org.gnucash.android.model.ScheduledEvent;
+import org.gnucash.android.model.ScheduledAction;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.gnucash.android.db.DatabaseSchema.*;
+
 /**
  * Database adapter for fetching/saving/modifying scheduled events
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class ScheduledEventDbAdapter extends DatabaseAdapter {
+public class ScheduledActionDbAdapter extends DatabaseAdapter {
 
-    public ScheduledEventDbAdapter(SQLiteDatabase db){
-        super(db, ScheduledEventEntry.TABLE_NAME);
+    public ScheduledActionDbAdapter(SQLiteDatabase db){
+        super(db, ScheduledActionEntry.TABLE_NAME);
     }
 
     /**
      * Returns application-wide instance of database adapter
      * @return ScheduledEventDbAdapter instance
      */
-    public static ScheduledEventDbAdapter getInstance(){
+    public static ScheduledActionDbAdapter getInstance(){
         return GnuCashApplication.getScheduledEventDbAdapter();
     }
 
     /**
      * Adds a scheduled event to the database or replaces the existing entry if one with the same GUID exists
-     * @param scheduledEvent {@link org.gnucash.android.model.ScheduledEvent} to be added
+     * @param scheduledAction {@link org.gnucash.android.model.ScheduledAction} to be added
      * @return Database row ID of the newly created/replaced instance
      */
-    public long addScheduledEvent(ScheduledEvent scheduledEvent){
-        ContentValues contentValues = getContentValues(scheduledEvent);
-        contentValues.put(ScheduledEventEntry.COLUMN_EVENT_UID, scheduledEvent.getEventUID());
-        contentValues.put(ScheduledEventEntry.COLUMN_PERIOD,    scheduledEvent.getPeriod());
-        contentValues.put(ScheduledEventEntry.COLUMN_START_TIME, scheduledEvent.getStartTime());
-        contentValues.put(ScheduledEventEntry.COLUMN_END_TIME,  scheduledEvent.getEndTime());
-        contentValues.put(ScheduledEventEntry.COLUMN_LAST_RUN,  scheduledEvent.getLastRun());
-        contentValues.put(ScheduledEventEntry.COLUMN_TYPE,      scheduledEvent.getEventType().name());
-        contentValues.put(ScheduledEventEntry.COLUMN_TAG,       scheduledEvent.getTag());
-        contentValues.put(ScheduledEventEntry.COLUMN_ENABLED,   scheduledEvent.isEnabled() ? "1":"0");
-        contentValues.put(ScheduledEventEntry.COLUMN_NUM_OCCURRENCES, scheduledEvent.getNumberOfOccurences());
-        contentValues.put(ScheduledEventEntry.COLUMN_EXECUTION_COUNT, scheduledEvent.getExecutionCount());
+    public long addScheduledEvent(ScheduledAction scheduledAction){
+        ContentValues contentValues = getContentValues(scheduledAction);
+        contentValues.put(ScheduledActionEntry.COLUMN_EVENT_UID, scheduledAction.getEventUID());
+        contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    scheduledAction.getPeriod());
+        contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
+        contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
+        contentValues.put(ScheduledActionEntry.COLUMN_LAST_RUN,  scheduledAction.getLastRun());
+        contentValues.put(ScheduledActionEntry.COLUMN_TYPE,      scheduledAction.getActionType().name());
+        contentValues.put(ScheduledActionEntry.COLUMN_TAG,       scheduledAction.getTag());
+        contentValues.put(ScheduledActionEntry.COLUMN_ENABLED,   scheduledAction.isEnabled() ? "1":"0");
+        contentValues.put(ScheduledActionEntry.COLUMN_NUM_OCCURRENCES, scheduledAction.getNumberOfOccurences());
+        contentValues.put(ScheduledActionEntry.COLUMN_EXECUTION_COUNT, scheduledAction.getExecutionCount());
 
         Log.d(TAG, "Replace scheduled event in the db");
-        return mDb.replace(ScheduledEventEntry.TABLE_NAME, null, contentValues);
+        return mDb.replace(ScheduledActionEntry.TABLE_NAME, null, contentValues);
     }
 
     /**
-     * Builds a {@link org.gnucash.android.model.ScheduledEvent} instance from a row to cursor in the database.
+     * Builds a {@link org.gnucash.android.model.ScheduledAction} instance from a row to cursor in the database.
      * The cursor should be already pointing to the right entry in the data set. It will not be modified in any way
      * @param cursor Cursor pointing to data set
      * @return ScheduledEvent object instance
      */
-    private ScheduledEvent buildScheduledEventInstance(final Cursor cursor){
-        String eventUid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_EVENT_UID));
-        long period     = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_PERIOD));
-        long startTime  = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_START_TIME));
-        long endTime    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_END_TIME));
-        long lastRun    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_LAST_RUN));
-        String typeString = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TYPE));
-        String tag      = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TAG));
-        boolean enabled = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_ENABLED)) > 0;
-        int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_NUM_OCCURRENCES));
-        int execCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_EXECUTION_COUNT));
-
-        ScheduledEvent event = new ScheduledEvent(ScheduledEvent.EventType.valueOf(typeString));
+    private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
+        String eventUid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EVENT_UID));
+        long period     = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
+        long startTime  = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_START_TIME));
+        long endTime    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_END_TIME));
+        long lastRun    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_LAST_RUN));
+        String typeString = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TYPE));
+        String tag      = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TAG));
+        boolean enabled = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ENABLED)) > 0;
+        int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_NUM_OCCURRENCES));
+        int execCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EXECUTION_COUNT));
+
+        ScheduledAction event = new ScheduledAction(ScheduledAction.ActionType.valueOf(typeString));
         populateModel(cursor, event);
         event.setPeriod(period);
         event.setStartTime(startTime);
@@ -104,69 +104,69 @@ private ScheduledEvent buildScheduledEventInstance(final Cursor cursor){
     }
 
     /**
-     * Returns an instance of {@link org.gnucash.android.model.ScheduledEvent} from the database record
+     * Returns an instance of {@link org.gnucash.android.model.ScheduledAction} from the database record
      * @param uid GUID of event
      * @return ScheduledEvent object instance
      */
-    public ScheduledEvent getScheduledEvent(String uid){
+    public ScheduledAction getScheduledEvent(String uid){
         Cursor cursor = fetchRecord(getID(uid));
 
-        ScheduledEvent scheduledEvent = null;
+        ScheduledAction scheduledAction = null;
         if (cursor != null) {
             if (cursor.moveToFirst()) {
-                scheduledEvent = buildScheduledEventInstance(cursor);
+                scheduledAction = buildScheduledEventInstance(cursor);
             }
             cursor.close();
         }
-        return scheduledEvent;
+        return scheduledAction;
     }
 
     /**
-     * Returns all {@link org.gnucash.android.model.ScheduledEvent}s from the database with the specified event UID
+     * Returns all {@link org.gnucash.android.model.ScheduledAction}s from the database with the specified event UID
      * @param eventUID GUID of the event itself
      * @return List of ScheduledEvents
      */
-    public List<ScheduledEvent> getScheduledEventsWithUID(@NonNull String eventUID){
-        Cursor cursor = mDb.query(ScheduledEventEntry.TABLE_NAME, null,
-                ScheduledEventEntry.COLUMN_EVENT_UID + "= ?",
+    public List<ScheduledAction> getScheduledEventsWithUID(@NonNull String eventUID){
+        Cursor cursor = mDb.query(ScheduledActionEntry.TABLE_NAME, null,
+                ScheduledActionEntry.COLUMN_EVENT_UID + "= ?",
                 new String[]{eventUID}, null, null, null);
 
-        List<ScheduledEvent> scheduledEvents = new ArrayList<ScheduledEvent>();
+        List<ScheduledAction> scheduledActions = new ArrayList<ScheduledAction>();
         try {
             while (cursor.moveToNext()) {
-                scheduledEvents.add(buildScheduledEventInstance(cursor));
+                scheduledActions.add(buildScheduledEventInstance(cursor));
             }
         } finally {
             cursor.close();
         }
-        return scheduledEvents;
+        return scheduledActions;
     }
 
     /**
      * Returns all scheduled events in the database
      * @return List with all scheduled events
      */
-    public List<ScheduledEvent> getAllScheduledEvents(){
+    public List<ScheduledAction> getAllScheduledEvents(){
         Cursor cursor = fetchAllRecords();
-        List<ScheduledEvent> scheduledEvents = new ArrayList<ScheduledEvent>();
+        List<ScheduledAction> scheduledActions = new ArrayList<ScheduledAction>();
         while (cursor.moveToNext()){
-            scheduledEvents.add(buildScheduledEventInstance(cursor));
+            scheduledActions.add(buildScheduledEventInstance(cursor));
         }
-        return scheduledEvents;
+        return scheduledActions;
     }
 
     /**
      * Returns all enabled scheduled actions in the database
      * @return List of enalbed scheduled actions
      */
-    public List<ScheduledEvent> getAllEnabledScheduledActions(){
+    public List<ScheduledAction> getAllEnabledScheduledActions(){
         Cursor cursor = mDb.query(mTableName,
-                        null, ScheduledEventEntry.COLUMN_ENABLED + "=1", null, null, null, null);
-        List<ScheduledEvent> scheduledEvents = new ArrayList<ScheduledEvent>();
+                        null, ScheduledActionEntry.COLUMN_ENABLED + "=1", null, null, null, null);
+        List<ScheduledAction> scheduledActions = new ArrayList<ScheduledAction>();
         while (cursor.moveToNext()){
-            scheduledEvents.add(buildScheduledEventInstance(cursor));
+            scheduledActions.add(buildScheduledEventInstance(cursor));
         }
-        return scheduledEvents;
+        return scheduledActions;
     }
 
 }
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 959fe6f5..fb8d9c20 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -17,10 +17,7 @@
 
 package org.gnucash.android.db;
 
-import android.app.AlarmManager;
-import android.app.PendingIntent;
 import android.content.ContentValues;
-import android.content.Context;
 import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
@@ -243,9 +240,9 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
      */
     public Cursor fetchAllScheduledTransactions(){
         SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-        queryBuilder.setTables(TransactionEntry.TABLE_NAME + " INNER JOIN " + ScheduledEventEntry.TABLE_NAME + " ON "
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME + " INNER JOIN " + ScheduledActionEntry.TABLE_NAME + " ON "
                 + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
-                + ScheduledEventEntry.TABLE_NAME + "." + ScheduledEventEntry.COLUMN_EVENT_UID);
+                + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_EVENT_UID);
 
         String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
diff --git a/app/src/main/java/org/gnucash/android/export/Exporter.java b/app/src/main/java/org/gnucash/android/export/Exporter.java
index 910ec5a1..e9627a94 100644
--- a/app/src/main/java/org/gnucash/android/export/Exporter.java
+++ b/app/src/main/java/org/gnucash/android/export/Exporter.java
@@ -23,7 +23,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.ScheduledEventDbAdapter;
+import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 
@@ -63,7 +63,7 @@
     protected AccountsDbAdapter mAccountsDbAdapter;
     protected TransactionsDbAdapter mTransactionsDbAdapter;
     protected SplitsDbAdapter mSplitsDbAdapter;
-    protected ScheduledEventDbAdapter mScheduledEventDbAdapter;
+    protected ScheduledActionDbAdapter mScheduledActionDbAdapter;
     protected Context mContext;
 
     public Exporter(ExportParams params, SQLiteDatabase db) {
@@ -73,12 +73,12 @@ public Exporter(ExportParams params, SQLiteDatabase db) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
             mSplitsDbAdapter = SplitsDbAdapter.getInstance();
-            mScheduledEventDbAdapter = ScheduledEventDbAdapter.getInstance();
+            mScheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
         } else {
             mSplitsDbAdapter = new SplitsDbAdapter(db);
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, mSplitsDbAdapter);
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
-            mScheduledEventDbAdapter = new ScheduledEventDbAdapter(db);
+            mScheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 16d9d403..dbb194ff 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -27,7 +27,7 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.model.ScheduledEvent;
+import org.gnucash.android.model.ScheduledAction;
 import org.xmlpull.v1.XmlPullParserFactory;
 import org.xmlpull.v1.XmlSerializer;
 
@@ -306,24 +306,24 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
     }
 
     /**
-     * Serializes {@link org.gnucash.android.model.ScheduledEvent}s from the database to XML
+     * Serializes {@link org.gnucash.android.model.ScheduledAction}s from the database to XML
      * @param xmlSerializer XML serializer
      * @throws IOException
      */
     private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOException{
-        Cursor cursor = mScheduledEventDbAdapter.fetchAllRecords();
+        Cursor cursor = mScheduledActionDbAdapter.fetchAllRecords();
         while (cursor.moveToNext()) {
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SCHEDULED_ACTION);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ID);
-            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_UID));
+            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_UID));
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, actionUID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ID);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NAME);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TYPE)));
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TYPE)));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NAME);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ENABLED);
-            boolean enabled = cursor.getShort(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_ENABLED)) > 0;
+            boolean enabled = cursor.getShort(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ENABLED)) > 0;
             xmlSerializer.text(enabled ? "y" : "n");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ENABLED);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_AUTO_CREATE);
@@ -343,32 +343,32 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_INSTANCE_COUNT);
 
             //start date
-            long startTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_START_TIME));
+            long startTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_START_TIME));
             serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_START, startTime);
 
-            long lastRunTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_LAST_RUN));
+            long lastRunTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_LAST_RUN));
             if (lastRunTime > 0){
                 serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_LAST, lastRunTime);
             }
 
-            long endTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_END_TIME));
+            long endTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_END_TIME));
             if (endTime > 0) {
                 //end date
                 serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_END, endTime);
             } else { //add number of occurrences
-                int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_NUM_OCCURRENCES));
+                int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_NUM_OCCURRENCES));
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
                 xmlSerializer.text(Integer.toString(numOccurrences));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
 
                 //remaining occurrences
-                int executionCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_EXECUTION_COUNT));
+                int executionCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EXECUTION_COUNT));
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_REM_OCCUR);
                 xmlSerializer.text(Integer.toString(numOccurrences - executionCount));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_REM_OCCUR);
             }
 
-            String tag = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_TAG));
+            String tag = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TAG));
             if (tag != null && !tag.isEmpty()){
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_TAG);
                 xmlSerializer.text(tag);
@@ -383,8 +383,8 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.text("1");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_MULT);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
-            long period = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledEventEntry.COLUMN_PERIOD));
-            xmlSerializer.text(GncXmlHelper.getScheduledPeriodType(ScheduledEvent.getPeriodType(period)));
+            long period = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
+            xmlSerializer.text(GncXmlHelper.getScheduledPeriodType(ScheduledAction.getPeriodType(period)));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
 
             serializeDate(xmlSerializer, GncXmlHelper.TAG_RX_START, startTime);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 1bcb02c5..89ac32eb 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -18,7 +18,7 @@
 package org.gnucash.android.export.xml;
 
 import org.gnucash.android.model.Money;
-import org.gnucash.android.model.ScheduledEvent;
+import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.TransactionType;
 import org.w3c.dom.Document;
@@ -140,7 +140,7 @@ public static String formatDate(long milliseconds){
      * @param periodType PeriodType from the scheduled action
      * @return Period type as a noun
      */
-    public static String getScheduledPeriodType(ScheduledEvent.PeriodType periodType){
+    public static String getScheduledPeriodType(ScheduledAction.PeriodType periodType){
         switch (periodType) {
             case DAILY:
                 return "day";
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
similarity index 92%
rename from app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
rename to app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 905d8503..03de9ad8 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledEvent.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -26,7 +26,7 @@
 *
 * @author Ngewi Fet <ngewif@gmail.com>
 */
-public class ScheduledEvent extends BaseModel{
+public class ScheduledAction extends BaseModel{
 
     private long mPeriod;
     private long mStartDate;
@@ -36,7 +36,7 @@
     /**
      * Types of events which can be scheduled
      */
-    public enum EventType {TRANSACTION, EXPORT}
+    public enum ActionType {TRANSACTION, EXPORT}
 
     public enum PeriodType {DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY}
 
@@ -59,7 +59,7 @@
     /**
      * Type of event being scheduled
      */
-    private EventType mEventType;
+    private ActionType mActionType;
 
     /**
      * Number of occurences of this event
@@ -71,19 +71,19 @@
      */
     private int mNumberOfExecutions = 0;
 
-    public ScheduledEvent(EventType eventType){
-        mEventType = eventType;
+    public ScheduledAction(ActionType actionType){
+        mActionType = actionType;
         mStartDate = System.currentTimeMillis();
         mEndDate = 0;
         mIsEnabled = true; //all actions are enabled by default
     }
 
-    public EventType getEventType() {
-        return mEventType;
+    public ActionType getActionType() {
+        return mActionType;
     }
 
-    public void setEventType(EventType eventType) {
-        this.mEventType = eventType;
+    public void setActionType(ActionType actionType) {
+        this.mActionType = actionType;
     }
 
     public String getEventUID() {
@@ -227,7 +227,7 @@ public String getRepeatString(){
     @Override
     public String toString() {
 
-        String eventString = mEventType.name() + " - " + getRepeatString();
+        String eventString = mActionType.name() + " - " + getRepeatString();
 
         return eventString;
     }
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 54fc630b..37af77a4 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -24,11 +24,11 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.ScheduledEventDbAdapter;
+import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.ExporterAsyncTask;
-import org.gnucash.android.model.ScheduledEvent;
+import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
 
 import java.util.List;
@@ -60,19 +60,19 @@ protected void onHandleIntent(Intent intent) {
                 LOG_TAG);
         wakeLock.acquire();
 
-        ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-        List<ScheduledEvent> scheduledEvents = scheduledEventDbAdapter.getAllEnabledScheduledActions();
+        ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
+        List<ScheduledAction> scheduledActions = scheduledActionDbAdapter.getAllEnabledScheduledActions();
 
-        for (ScheduledEvent scheduledEvent : scheduledEvents) {
-            long lastRun    = scheduledEvent.getLastRun();
-            long period     = scheduledEvent.getPeriod();
-            long endTime    = scheduledEvent.getEndTime();
+        for (ScheduledAction scheduledAction : scheduledActions) {
+            long lastRun    = scheduledAction.getLastRun();
+            long period     = scheduledAction.getPeriod();
+            long endTime    = scheduledAction.getEndTime();
 
             long now = System.currentTimeMillis();
             //if we did not exceed the endtime (if there is one), and one execution period has passed since last run
-            if (((endTime > 0 && now < endTime) || (scheduledEvent.getExecutionCount() < scheduledEvent.getNumberOfOccurences()) || endTime == 0)
+            if (((endTime > 0 && now < endTime) || (scheduledAction.getExecutionCount() < scheduledAction.getNumberOfOccurences()) || endTime == 0)
                     && (lastRun + period) < now ){
-                executeScheduledEvent(scheduledEvent);
+                executeScheduledEvent(scheduledAction);
             }
         }
 
@@ -83,12 +83,12 @@ protected void onHandleIntent(Intent intent) {
 
     /**
      * Executes a scheduled event according to the specified parameters
-     * @param scheduledEvent ScheduledEvent to be executed
+     * @param scheduledAction ScheduledEvent to be executed
      */
-    private void executeScheduledEvent(ScheduledEvent scheduledEvent){
-        switch (scheduledEvent.getEventType()){
+    private void executeScheduledEvent(ScheduledAction scheduledAction){
+        switch (scheduledAction.getActionType()){
             case TRANSACTION:
-                String eventUID = scheduledEvent.getEventUID();
+                String eventUID = scheduledAction.getEventUID();
                 TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
                 Transaction trxnTemplate = transactionsDbAdapter.getTransaction(eventUID);
                 Transaction recurringTrxn = new Transaction(trxnTemplate, true);
@@ -98,7 +98,7 @@ private void executeScheduledEvent(ScheduledEvent scheduledEvent){
                 break;
 
             case EXPORT:
-                ExportParams params = ExportParams.parseCsv(scheduledEvent.getTag());
+                ExportParams params = ExportParams.parseCsv(scheduledAction.getTag());
                 try {
                     new ExporterAsyncTask(GnuCashApplication.getAppContext()).execute(params).get();
                 } catch (InterruptedException e) {
@@ -115,15 +115,15 @@ private void executeScheduledEvent(ScheduledEvent scheduledEvent){
         }
 
         //update last run time
-        ScheduledEventDbAdapter.getInstance().updateRecord(
-                scheduledEvent.getUID(),
-                DatabaseSchema.ScheduledEventEntry.COLUMN_LAST_RUN,
+        ScheduledActionDbAdapter.getInstance().updateRecord(
+                scheduledAction.getUID(),
+                DatabaseSchema.ScheduledActionEntry.COLUMN_LAST_RUN,
                 Long.toString(System.currentTimeMillis()));
 
         //update the execution count
-        ScheduledEventDbAdapter.getInstance().updateRecord(
-                scheduledEvent.getUID(),
-                DatabaseSchema.ScheduledEventEntry.COLUMN_EXECUTION_COUNT,
-                Integer.toString(scheduledEvent.getExecutionCount()+1));
+        ScheduledActionDbAdapter.getInstance().updateRecord(
+                scheduledAction.getUID(),
+                DatabaseSchema.ScheduledActionEntry.COLUMN_EXECUTION_COUNT,
+                Integer.toString(scheduledAction.getExecutionCount()+1));
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index 1fc68f83..a4e503e6 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -48,9 +48,9 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseCursorLoader;
 import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.ScheduledEventDbAdapter;
+import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.model.ScheduledEvent;
+import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 
@@ -109,13 +109,13 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                     for (long id : getListView().getCheckedItemIds()) {
                         Log.i(TAG, "Cancelling scheduled transaction(s)");
                         String trnUID = mTransactionsDbAdapter.getUID(id);
-                        ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-                        List<ScheduledEvent> events = scheduledEventDbAdapter.getScheduledEventsWithUID(trnUID);
+                        ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
+                        List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledEventsWithUID(trnUID);
 
                         if (mTransactionsDbAdapter.deleteRecord(id)){
                             Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
-                            for (ScheduledEvent event : events) {
-                                scheduledEventDbAdapter.deleteRecord(event.getUID());
+                            for (ScheduledAction event : events) {
+                                scheduledActionDbAdapter.deleteRecord(event.getUID());
                             }
                         }
                     }
@@ -410,10 +410,10 @@ public void bindView(View view, Context context, Cursor cursor) {
             }
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
-            ScheduledEventDbAdapter scheduledEventDbAdapter = ScheduledEventDbAdapter.getInstance();
-            List<ScheduledEvent> events = scheduledEventDbAdapter.getScheduledEventsWithUID(transaction.getUID());
+            ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
+            List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledEventsWithUID(transaction.getUID());
             StringBuilder repeatStringBuilder = new StringBuilder();
-            for (ScheduledEvent event : events) {
+            for (ScheduledAction event : events) {
                 repeatStringBuilder.append(event.getRepeatString()).append("\n");
             }
             descriptionTextView.setText(repeatStringBuilder.toString());
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 5c7b0187..5cdcfc81 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -673,7 +673,7 @@ private void saveNewTransaction() {
      * @see #saveNewTransaction()
      */
     private void scheduleRecurringTransaction() {
-        List<ScheduledEvent> events = RecurrenceParser.parse(mEventRecurrence, ScheduledEvent.EventType.TRANSACTION);
+        List<ScheduledAction> events = RecurrenceParser.parse(mEventRecurrence, ScheduledAction.ActionType.TRANSACTION);
 
         if (events.size() == 0) //there are no scheduled events detected
             return;
@@ -684,11 +684,11 @@ private void scheduleRecurringTransaction() {
         recurringTransaction.setTemplate(true);
         mTransactionsDbAdapter.addTransaction(recurringTransaction);
 
-        ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-        for (ScheduledEvent event : events) {
+        ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
+        for (ScheduledAction event : events) {
             event.setEventUID(recurringTransaction.getUID());
             event.setLastRun(System.currentTimeMillis());
-            scheduledEventDbAdapter.addScheduledEvent(event);
+            scheduledActionDbAdapter.addScheduledEvent(event);
 
             Log.i("TransactionFormFragment", event.toString());
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
index 828860e2..e40530be 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
@@ -18,7 +18,7 @@
 
 import android.text.format.Time;
 import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrence;
-import org.gnucash.android.model.ScheduledEvent;
+import org.gnucash.android.model.ScheduledAction;
 
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -26,7 +26,7 @@
 
 /**
  * Parses {@link com.doomonafireball.betterpickers.recurrencepicker.EventRecurrence}s to generate
- * {@link org.gnucash.android.model.ScheduledEvent}s
+ * {@link org.gnucash.android.model.ScheduledAction}s
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
@@ -40,16 +40,16 @@
 
 
     /**
-     * Parses an event recurrence to produce {@link org.gnucash.android.model.ScheduledEvent}s for each recurrence.
-     * <p>Each {@link org.gnucash.android.model.ScheduledEvent} represents just one simple repeating schedule, e.g. every Monday.
+     * Parses an event recurrence to produce {@link org.gnucash.android.model.ScheduledAction}s for each recurrence.
+     * <p>Each {@link org.gnucash.android.model.ScheduledAction} represents just one simple repeating schedule, e.g. every Monday.
      * If there are multiple schedules in the recurrence e.g. every Monday and Tuesday, then two ScheduledEvents will be generated</p>
      * @param eventRecurrence Event recurrence pattern obtained from dialog
-     * @param eventType Type of event recurrence
+     * @param actionType Type of event recurrence
      * @return List of ScheduledEvents
      */
-    public static List<ScheduledEvent> parse(EventRecurrence eventRecurrence, ScheduledEvent.EventType eventType){
+    public static List<ScheduledAction> parse(EventRecurrence eventRecurrence, ScheduledAction.ActionType actionType){
         long period = 0;
-        List<ScheduledEvent> scheduledEventList = new ArrayList<ScheduledEvent>();
+        List<ScheduledAction> scheduledActionList = new ArrayList<ScheduledAction>();
         switch(eventRecurrence.freq){
             case EventRecurrence.DAILY: {
                 if (eventRecurrence.interval == 0) //I assume this is a bug from the picker library
@@ -57,10 +57,10 @@
                 else
                     period = eventRecurrence.interval * DAY_MILLIS;
 
-                ScheduledEvent scheduledEvent = new ScheduledEvent(eventType);
-                scheduledEvent.setPeriod(period);
-                parseEndTime(eventRecurrence, scheduledEvent);
-                scheduledEventList.add(scheduledEvent);
+                ScheduledAction scheduledAction = new ScheduledAction(actionType);
+                scheduledAction.setPeriod(period);
+                parseEndTime(eventRecurrence, scheduledAction);
+                scheduledActionList.add(scheduledAction);
             }
                 break;
 
@@ -70,12 +70,12 @@
                 else
                     period = eventRecurrence.interval * WEEK_MILLIS;
                 for (int day : eventRecurrence.byday) {
-                    ScheduledEvent scheduledEvent = new ScheduledEvent(eventType);
-                    scheduledEvent.setPeriod(period);
+                    ScheduledAction scheduledAction = new ScheduledAction(actionType);
+                    scheduledAction.setPeriod(period);
 
-                    scheduledEvent.setStartTime(nextDayOfWeek(day2CalendarDay(day)).getTimeInMillis());
-                    parseEndTime(eventRecurrence, scheduledEvent);
-                    scheduledEventList.add(scheduledEvent);
+                    scheduledAction.setStartTime(nextDayOfWeek(day2CalendarDay(day)).getTimeInMillis());
+                    parseEndTime(eventRecurrence, scheduledAction);
+                    scheduledActionList.add(scheduledAction);
                 }
             }
             break;
@@ -85,14 +85,14 @@
                     period = MONTH_MILLIS;
                 else
                     period = eventRecurrence.interval * MONTH_MILLIS;
-                ScheduledEvent event = new ScheduledEvent(eventType);
+                ScheduledAction event = new ScheduledAction(actionType);
                 event.setPeriod(period);
                 Calendar now = Calendar.getInstance();
                 now.add(Calendar.MONTH, 1);
                 event.setStartTime(now.getTimeInMillis());
                 parseEndTime(eventRecurrence, event);
 
-                scheduledEventList.add(event);
+                scheduledActionList.add(event);
             }
                 break;
 
@@ -101,32 +101,32 @@
                     period = YEAR_MILLIS;
                 else
                     period = eventRecurrence.interval * YEAR_MILLIS;
-                ScheduledEvent event = new ScheduledEvent(eventType);
+                ScheduledAction event = new ScheduledAction(actionType);
                 event.setPeriod(period);
                 Calendar now = Calendar.getInstance();
                 now.add(Calendar.YEAR, 1);
                 event.setStartTime(now.getTimeInMillis());
                 parseEndTime(eventRecurrence, event);
-                scheduledEventList.add(event);
+                scheduledActionList.add(event);
             }
                 break;
         }
-        return scheduledEventList;
+        return scheduledActionList;
     }
 
     /**
      * Parses the end time from an EventRecurrence object and sets it to the <code>scheduledEvent</code>.
      * The end time is specified in the dialog either by number of occurences or a date.
      * @param eventRecurrence Event recurrence pattern obtained from dialog
-     * @param scheduledEvent ScheduledEvent to be to updated
+     * @param scheduledAction ScheduledEvent to be to updated
      */
-    private static void parseEndTime(EventRecurrence eventRecurrence, ScheduledEvent scheduledEvent) {
+    private static void parseEndTime(EventRecurrence eventRecurrence, ScheduledAction scheduledAction) {
         if (eventRecurrence.until != null && eventRecurrence.until.length() > 0) {
             Time endTime = new Time();
             endTime.parse(eventRecurrence.until);
-            scheduledEvent.setEndTime(endTime.toMillis(false));
+            scheduledAction.setEndTime(endTime.toMillis(false));
         } else if (eventRecurrence.count > 0){
-            scheduledEvent.setNumberOfOccurences(eventRecurrence.count);
+            scheduledAction.setNumberOfOccurences(eventRecurrence.count);
         }
     }
 

From 02dcce04dc327d4743f9bffff850b9f396a965a0 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Mar 2015 16:48:53 +0100
Subject: [PATCH 09/52] Added UX for explicit creation of transaction templates

Fixed: bug causing no transaction templates to be saved
Autocomplete in the transaction description field only filters through templates
Recurring transactions always trigger a template to be saved

TODO: Add view for viewing, editing and deleting existing transaction templates
---
 .../gnucash/android/db/TransactionsDbAdapter.java  |  5 ++-
 .../org/gnucash/android/model/Transaction.java     | 12 +++---
 .../ui/transaction/TransactionFormFragment.java    | 46 +++++++++++++++-------
 .../main/res/layout/fragment_new_transaction.xml   |  7 +++-
 app/src/main/res/values-de/strings.xml             |  1 +
 app/src/main/res/values-el/strings.xml             |  1 +
 app/src/main/res/values-es-rMX/strings.xml         |  1 +
 app/src/main/res/values-es/strings.xml             |  1 +
 app/src/main/res/values-fr/strings.xml             |  1 +
 app/src/main/res/values-hu/strings.xml             |  1 +
 app/src/main/res/values-it/strings.xml             |  1 +
 app/src/main/res/values-nb/strings.xml             |  1 +
 app/src/main/res/values-nl/strings.xml             |  1 +
 app/src/main/res/values-pt-rBR/strings.xml         |  1 +
 app/src/main/res/values-ru/strings.xml             |  1 +
 app/src/main/res/values-zh/strings.xml             |  1 +
 app/src/main/res/values/strings.xml                |  1 +
 17 files changed, 60 insertions(+), 23 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index fb8d9c20..8da5e910 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -488,10 +488,11 @@ public long getAllTransactionsCount() {
      * @param prefix Starting characters of the transaction name
      * @return Cursor to the data set containing all matching transactions
      */
-    public Cursor fetchTransactionsStartingWith(String prefix){
+    public Cursor fetchTemplatesStartingWith(String prefix){
         return mDb.query(TransactionEntry.TABLE_NAME,
                 new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_DESCRIPTION},
-                TransactionEntry.COLUMN_DESCRIPTION + " LIKE '" + prefix + "%'",
+                TransactionEntry.COLUMN_TEMPLATE + "=1 AND "
+                        + TransactionEntry.COLUMN_DESCRIPTION + " LIKE '" + prefix + "%'",
                 null, null, null,
                 TransactionEntry.COLUMN_DESCRIPTION + " ASC");
     }
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index 302c192a..e6ee2fd3 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -100,7 +100,7 @@
 	 * Flag indicating if this transaction has been exported before or not
 	 * The transactions are typically exported as bank statement in the OFX format
 	 */
-	private int mIsExported = 0;
+	private boolean mIsExported = false;
 
 	/**
 	 * Timestamp when this transaction occurred
@@ -110,7 +110,7 @@
     /**
      * Flag indicating that this transaction is a template
      */
-    private int mIsTemplate = 0;
+    private boolean mIsTemplate = false;
 
 	/**
 	 * Overloaded constructor. Creates a new transaction instance with the
@@ -384,7 +384,7 @@ public static boolean shouldDecreaseBalance(AccountType accountType, Transaction
 	 * @param isExported <code>true</code> if the transaction has been exported, <code>false</code> otherwise
 	 */
 	public void setExported(boolean isExported){
-		mIsExported = isExported ? 1 : 0;
+		mIsExported = isExported;
 	}
 
 	/**
@@ -392,7 +392,7 @@ public void setExported(boolean isExported){
 	 * @return <code>true</code> if the transaction has been exported, <code>false</code> otherwise
 	 */
 	public boolean isExported(){
-		return mIsExported == 1;
+		return mIsExported;
 	}
 
     /**
@@ -400,7 +400,7 @@ public boolean isExported(){
      * @return {@code true} if this transaction is a template, {@code false} otherwise
      */
     public boolean isTemplate(){
-        return mIsTemplate == 1;
+        return mIsTemplate;
     }
 
     /**
@@ -408,7 +408,7 @@ public boolean isTemplate(){
      * @param isTemplate Flag indicating if transaction is a template or not
      */
     public void setTemplate(boolean isTemplate){
-        mIsExported = isTemplate ? 1 : 0;
+        mIsTemplate = isTemplate;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 5cdcfc81..6af4b081 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -164,6 +164,11 @@
 	private Spinner mDoubleAccountSpinner;
 
     /**
+     * Checkbox indicating if this transaction should be saved as a template or not
+     */
+    private CheckBox mSaveTemplate;
+
+    /**
      * Flag to note if double entry accounting is in use or not
      */
 	private boolean mUseDoubleEntry;
@@ -209,7 +214,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		mDoubleAccountSpinner   = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
         mOpenSplitsButton       = (Button) v.findViewById(R.id.btn_open_splits);
         mRecurrenceTextView     = (TextView) v.findViewById(R.id.input_recurrence);
-		return v;
+        mSaveTemplate           = (CheckBox) v.findViewById(R.id.checkbox_save_template);
+        return v;
 	}
 
 	@Override
@@ -296,7 +302,7 @@ public CharSequence convertToString(Cursor cursor) {
         adapter.setFilterQueryProvider(new FilterQueryProvider() {
             @Override
             public Cursor runQuery(CharSequence name) {
-                return mTransactionsDbAdapter.fetchTransactionsStartingWith(name==null?"":name.toString());
+                return mTransactionsDbAdapter.fetchTemplatesStartingWith(name == null ? "" : name.toString());
             }
         });
 
@@ -378,6 +384,8 @@ private void initializeViewsWithTransaction(){
         if (mMultiCurrency) {
             enableControls(false);
         }
+
+        mSaveTemplate.setChecked(mTransaction.isTemplate());
     }
 
     private void enableControls(boolean b) {
@@ -659,8 +667,17 @@ private void saveNewTransaction() {
         mTransaction.setExported(false);
         //save the normal transaction first
         mTransactionsDbAdapter.addTransaction(mTransaction);
-        scheduleRecurringTransaction();
 
+        if (mSaveTemplate.isChecked()){
+            Transaction templateTransaction;
+            //creating a new recurring transaction
+            templateTransaction = new Transaction(mTransaction, true);
+            templateTransaction.setTemplate(true);
+            mTransactionsDbAdapter.addTransaction(templateTransaction);
+
+            //inside the if statement becuase scheduling always creates a template
+            scheduleRecurringTransaction(templateTransaction.getUID());
+        }
 
         //update widgets, if any
 		WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
@@ -672,27 +689,22 @@ private void saveNewTransaction() {
      * Schedules a recurring transaction (if necessary) after the transaction has been saved
      * @see #saveNewTransaction()
      */
-    private void scheduleRecurringTransaction() {
-        List<ScheduledAction> events = RecurrenceParser.parse(mEventRecurrence, ScheduledAction.ActionType.TRANSACTION);
+    private void scheduleRecurringTransaction(String transactionUID) {
+        List<ScheduledAction> events = RecurrenceParser.parse(mEventRecurrence,
+                ScheduledAction.ActionType.TRANSACTION);
 
         if (events.size() == 0) //there are no scheduled events detected
             return;
 
-        Transaction recurringTransaction;
-        //creating a new recurring transaction
-        recurringTransaction = new Transaction(mTransaction, true);
-        recurringTransaction.setTemplate(true);
-        mTransactionsDbAdapter.addTransaction(recurringTransaction);
-
         ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
         for (ScheduledAction event : events) {
-            event.setEventUID(recurringTransaction.getUID());
+            event.setEventUID(transactionUID);
             event.setLastRun(System.currentTimeMillis());
             scheduledActionDbAdapter.addScheduledEvent(event);
 
             Log.i("TransactionFormFragment", event.toString());
         }
-        if (events.size() > 0)
+        if (events.size() > 0) //TODO: localize this toast string for all supported locales
             Toast.makeText(getActivity(), "Scheduled transaction", Toast.LENGTH_SHORT).show();
     }
 
@@ -846,11 +858,17 @@ public static BigDecimal parseInputToDecimal(String amountString){
     @Override
     public void onRecurrenceSet(String rrule) {
         mRecurrenceRule = rrule;
-        String repeatString = "Not scheduled";
+        String repeatString = "Not scheduled"; //TODO: localize this string
         if (mRecurrenceRule != null){
             mEventRecurrence.parse(mRecurrenceRule);
             repeatString = EventRecurrenceFormatter.getRepeatString(getActivity(), getResources(), mEventRecurrence, true);
 
+            //when recurrence is set, we will definitely be saving a template
+            mSaveTemplate.setChecked(true);
+            mSaveTemplate.setEnabled(false);
+        } else {
+            mSaveTemplate.setEnabled(true);
+            mSaveTemplate.setChecked(false);
         }
 
         mRecurrenceTextView.setText(repeatString);
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index 756b609e..c951fd50 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -171,9 +171,14 @@
                       android:layout_width="match_parent"
                       android:layout_height="wrap_content"
                       android:gravity="center"
-                      android:text="Not scheduled"
+                      android:text="Tap to create schedule"
                       style="@style/Dropdown.TextView" />
 
         </LinearLayout>
+        <CheckBox android:id="@+id/checkbox_save_template"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="@dimen/form_row_bottom_margin"
+            android:text="@string/label_save_template" />
 	</LinearLayout>
 </ScrollView>
\ No newline at end of file
diff --git a/app/src/main/res/values-de/strings.xml b/app/src/main/res/values-de/strings.xml
index be3bcfa3..3a28f70e 100644
--- a/app/src/main/res/values-de/strings.xml
+++ b/app/src/main/res/values-de/strings.xml
@@ -435,4 +435,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-el/strings.xml b/app/src/main/res/values-el/strings.xml
index 2411dcd7..2c013658 100644
--- a/app/src/main/res/values-el/strings.xml
+++ b/app/src/main/res/values-el/strings.xml
@@ -460,4 +460,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-es-rMX/strings.xml b/app/src/main/res/values-es-rMX/strings.xml
index f7acd93f..b0eeaa0d 100644
--- a/app/src/main/res/values-es-rMX/strings.xml
+++ b/app/src/main/res/values-es-rMX/strings.xml
@@ -445,4 +445,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-es/strings.xml b/app/src/main/res/values-es/strings.xml
index a55a3095..61c9bb05 100644
--- a/app/src/main/res/values-es/strings.xml
+++ b/app/src/main/res/values-es/strings.xml
@@ -442,4 +442,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-fr/strings.xml b/app/src/main/res/values-fr/strings.xml
index 08eecbce..ad3619ed 100644
--- a/app/src/main/res/values-fr/strings.xml
+++ b/app/src/main/res/values-fr/strings.xml
@@ -442,4 +442,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-hu/strings.xml b/app/src/main/res/values-hu/strings.xml
index 83dc0e8f..5f24efec 100644
--- a/app/src/main/res/values-hu/strings.xml
+++ b/app/src/main/res/values-hu/strings.xml
@@ -446,4 +446,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
\ No newline at end of file
diff --git a/app/src/main/res/values-it/strings.xml b/app/src/main/res/values-it/strings.xml
index 553aa733..b2fca4f2 100644
--- a/app/src/main/res/values-it/strings.xml
+++ b/app/src/main/res/values-it/strings.xml
@@ -446,4 +446,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-nb/strings.xml b/app/src/main/res/values-nb/strings.xml
index 2580be6e..b0775385 100644
--- a/app/src/main/res/values-nb/strings.xml
+++ b/app/src/main/res/values-nb/strings.xml
@@ -442,4 +442,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-nl/strings.xml b/app/src/main/res/values-nl/strings.xml
index 3c3fad01..5cd048a9 100644
--- a/app/src/main/res/values-nl/strings.xml
+++ b/app/src/main/res/values-nl/strings.xml
@@ -447,4 +447,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-pt-rBR/strings.xml b/app/src/main/res/values-pt-rBR/strings.xml
index 5261de0a..afd5ab8c 100644
--- a/app/src/main/res/values-pt-rBR/strings.xml
+++ b/app/src/main/res/values-pt-rBR/strings.xml
@@ -445,4 +445,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-ru/strings.xml b/app/src/main/res/values-ru/strings.xml
index 3a5dee8c..0976477c 100644
--- a/app/src/main/res/values-ru/strings.xml
+++ b/app/src/main/res/values-ru/strings.xml
@@ -448,4 +448,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index c0fb8226..abcf121c 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -439,4 +439,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index d6aba07a..8d06b36e 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -445,4 +445,5 @@
     <string name="label_chart_no_data">No chart data available</string>
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
+    <string name="label_save_template">Save as template</string>
 </resources>

From de8b158fc64ed931edf88ea0a59d534476a285fa Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Mar 2015 17:04:42 +0100
Subject: [PATCH 10/52] Added the UID of action itself to the export (e.g. the
 transaction template UID)

---
 .../main/java/org/gnucash/android/export/xml/GncXmlExporter.java | 9 +++++++--
 .../main/java/org/gnucash/android/export/xml/GncXmlHelper.java   | 1 +
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index dbb194ff..134e970f 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -316,8 +316,8 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SCHEDULED_ACTION);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ID);
-            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_UID));
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, actionUID);
+            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_UID));
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, scheduledActionUID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ID);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NAME);
             xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TYPE)));
@@ -376,6 +376,11 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             }
             //Ignoring GnuCash XML template account: <sx:templ-acct type="guid">2da76df09056540bb3a37e4a04547d82</sx:templ-acct>
 
+            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EVENT_UID));
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_TEMPL_ACTION);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, actionUID);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_TEMPL_ACTION);
+
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_SCHEDULE);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.RECURRENCE_VERSION);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 89ac32eb..059031b8 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -108,6 +108,7 @@
     public static final String TAG_SX_NUM_OCCUR             = "sx:num-occur";
     public static final String TAG_SX_REM_OCCUR             = "sx:rem-occur";
     public static final String TAG_SX_TAG                   = "sx:tag";
+    public static final String TAG_SX_TEMPL_ACTION          = "sx:templ-action";
     public static final String TAG_SX_SCHEDULE              = "sx:schedule";
     public static final String TAG_RECURRENCE               = "gnc:recurrence";
     public static final String TAG_RX_MULT                  = "recurrence:mult";

From eb37df244385bdd34b46c48d246f829c259bde92 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Mar 2015 17:09:23 +0100
Subject: [PATCH 11/52] Code refactoring - optimized imports over all classes
 in project

---
 app/src/main/AndroidManifest.xml                   |  2 +-
 .../gnucash/android/app/GnuCashApplication.java    |  7 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 21 ++++--
 .../org/gnucash/android/db/DatabaseAdapter.java    |  7 +-
 .../gnucash/android/db/DatabaseCursorLoader.java   |  2 +-
 .../org/gnucash/android/db/DatabaseHelper.java     |  4 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |  2 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  9 +--
 .../android/db/ScheduledActionDbAdapter.java       |  8 +--
 .../gnucash/android/db/TransactionsDbAdapter.java  | 15 ++++-
 .../android/export/ExportDialogFragment.java       | 10 ++-
 .../gnucash/android/export/ExporterAsyncTask.java  | 11 +++-
 .../gnucash/android/export/ofx/OfxExporter.java    | 19 ++++--
 .../gnucash/android/export/qif/QifExporter.java    |  6 +-
 .../gnucash/android/export/xml/GncXmlExporter.java | 14 ++--
 .../gnucash/android/importer/GncXmlHandler.java    | 16 +++--
 .../gnucash/android/importer/GncXmlImporter.java   | 10 +--
 .../gnucash/android/importer/ImportAsyncTask.java  |  2 +-
 .../java/org/gnucash/android/model/Account.java    |  4 +-
 .../main/java/org/gnucash/android/model/Split.java |  6 --
 .../org/gnucash/android/model/Transaction.java     |  5 +-
 .../gnucash/android/receivers/AccountCreator.java  | 11 ++--
 .../receivers/TransactionAppWidgetProvider.java    |  6 +-
 .../android/receivers/TransactionRecorder.java     |  7 +-
 .../org/gnucash/android/ui/BaseDrawerActivity.java |  8 +--
 .../android/ui/account/AccountFormFragment.java    | 17 ++++-
 .../android/ui/account/AccountsActivity.java       |  8 +--
 .../android/ui/account/AccountsListFragment.java   | 22 +++++--
 .../android/ui/colorpicker/ColorPickerDialog.java  |  2 +
 .../android/ui/colorpicker/ColorPickerSwatch.java  |  4 +-
 .../android/ui/colorpicker/ColorSquare.java        |  1 +
 .../android/ui/colorpicker/ColorStateDrawable.java |  8 +--
 .../android/ui/colorpicker/HsvColorComparator.java |  2 +
 .../ui/settings/AboutPreferenceFragment.java       |  4 +-
 .../DeleteAllAccountsConfirmationDialog.java       |  2 +-
 .../DeleteAllTransacationsConfirmationDialog.java  |  1 +
 .../ui/settings/GeneralPreferenceFragment.java     |  8 +--
 .../settings/TransactionsPreferenceFragment.java   |  2 +
 ...Activity.java => ScheduledActionsActivity.java} | 12 ++--
 .../ui/transaction/TransactionFormFragment.java    | 76 ++++++++++++++--------
 .../ui/transaction/TransactionsListFragment.java   | 17 +++--
 .../transaction/dialog/BulkMoveDialogFragment.java | 19 +++---
 .../dialog/DatePickerDialogFragment.java           |  7 +-
 .../dialog/SplitEditorDialogFragment.java          | 17 ++++-
 .../dialog/TimePickerDialogFragment.java           |  6 +-
 ...ansactionsDeleteConfirmationDialogFragment.java | 14 ++--
 .../android/ui/util/AccountBalanceTask.java        |  1 +
 .../android/ui/util/AmountInputFormatter.java      |  1 +
 .../gnucash/android/ui/util/RecurrenceParser.java  |  2 +
 .../ui/util/TransactionTypeToggleButton.java       |  1 +
 .../ui/widget/WidgetConfigurationActivity.java     | 23 ++++---
 .../util/QualifiedAccountNameCursorAdapter.java    |  4 +-
 52 files changed, 309 insertions(+), 184 deletions(-)
 rename app/src/main/java/org/gnucash/android/ui/transaction/{ScheduledEventsActivity.java => ScheduledActionsActivity.java} (88%)

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index c1be1b1e..7fe66d94 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -66,7 +66,7 @@
             android:windowSoftInputMode="stateAlwaysHidden">
         </activity>
         <activity android:name=".ui.settings.SettingsActivity"/>
-        <activity android:name=".ui.transaction.ScheduledEventsActivity" />
+        <activity android:name=".ui.transaction.ScheduledActionsActivity" />
         <activity android:name=".ui.passcode.PasscodePreferenceActivity" />
         <activity android:name=".ui.transaction.TransactionsActivity"
             android:configChanges="orientation|screenSize">
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index c4615c3f..5eb60ae8 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -25,8 +25,13 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
 import android.util.Log;
+
 import org.gnucash.android.R;
-import org.gnucash.android.db.*;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.ScheduledActionDbAdapter;
+import org.gnucash.android.db.SplitsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.service.SchedulerService;
 
 import java.util.Currency;
diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 0003f664..d7389fb1 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -23,16 +23,27 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
-
 import android.util.Log;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.*;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
 
 import java.math.BigDecimal;
-import java.util.*;
-
-import static org.gnucash.android.db.DatabaseSchema.*;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+
+import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
+import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
+import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
 
 /**
  * Manages persistence of {@link Account}s in the database
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 05d8375b..267d3448 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -19,10 +19,13 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-
 import android.support.annotation.NonNull;
 import android.util.Log;
-import org.gnucash.android.db.DatabaseSchema.*;
+
+import org.gnucash.android.db.DatabaseSchema.AccountEntry;
+import org.gnucash.android.db.DatabaseSchema.CommonColumns;
+import org.gnucash.android.db.DatabaseSchema.SplitEntry;
+import org.gnucash.android.db.DatabaseSchema.TransactionEntry;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseCursorLoader.java b/app/src/main/java/org/gnucash/android/db/DatabaseCursorLoader.java
index 25597999..21a426e1 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseCursorLoader.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseCursorLoader.java
@@ -17,9 +17,9 @@
 package org.gnucash.android.db;
 
 import android.content.Context;
-import android.support.v4.content.Loader;
 import android.database.Cursor;
 import android.support.v4.content.AsyncTaskLoader;
+import android.support.v4.content.Loader;
 
 /**
  * Abstract base class for asynchronously loads records from a database and manages the cursor.
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 80656e32..93c49114 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -27,9 +27,9 @@
 import org.gnucash.android.model.AccountType;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
+import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
 import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
 import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
-import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
 /**
  * Helper class for managing the SQLite database.
  * Creates the database and handles upgrades
@@ -113,7 +113,7 @@
     public static final String SCHEDULED_ACTIONS_TABLE_CREATE = "CREATE TABLE " + ScheduledActionEntry.TABLE_NAME + " ("
             + ScheduledActionEntry._ID                   + " integer primary key autoincrement, "
             + ScheduledActionEntry.COLUMN_UID            + " varchar(255) not null UNIQUE, "
-            + ScheduledActionEntry.COLUMN_EVENT_UID      + " varchar(255) not null, "
+            + ScheduledActionEntry.COLUMN_ACTION_UID + " varchar(255) not null, "
             + ScheduledActionEntry.COLUMN_TYPE           + " varchar(255) not null, "
             + ScheduledActionEntry.COLUMN_PERIOD         + " integer not null, "
             + ScheduledActionEntry.COLUMN_LAST_RUN       + " integer default 0, "
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 21b0b556..3aee09a9 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -107,7 +107,7 @@ private DatabaseSchema(){}
         public static final String TABLE_NAME           = "scheduled_actions";
 
         public static final String COLUMN_TYPE          = "type";
-        public static final String COLUMN_EVENT_UID     = "action_uid";
+        public static final String COLUMN_ACTION_UID    = "action_uid";
         public static final String COLUMN_START_TIME    = "start_time";
         public static final String COLUMN_END_TIME      = "end_time";
         public static final String COLUMN_LAST_RUN      = "last_run";
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 87fa1f3b..c84e7cbd 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -18,17 +18,12 @@
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-import android.os.Environment;
 import android.util.Log;
-import org.gnucash.android.export.ExportFormat;
-import org.gnucash.android.export.ExportParams;
-import org.gnucash.android.export.Exporter;
-import org.gnucash.android.export.xml.GncXmlExporter;
+
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.AccountType;
 
-import javax.xml.parsers.ParserConfigurationException;
-import java.io.*;
+import java.io.FileInputStream;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index a5983c69..fed08fb6 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -27,7 +27,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.gnucash.android.db.DatabaseSchema.*;
+import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
 
 /**
  * Database adapter for fetching/saving/modifying scheduled events
@@ -55,7 +55,7 @@ public static ScheduledActionDbAdapter getInstance(){
      */
     public long addScheduledEvent(ScheduledAction scheduledAction){
         ContentValues contentValues = getContentValues(scheduledAction);
-        contentValues.put(ScheduledActionEntry.COLUMN_EVENT_UID, scheduledAction.getEventUID());
+        contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, scheduledAction.getEventUID());
         contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    scheduledAction.getPeriod());
         contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
         contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
@@ -77,7 +77,7 @@ public long addScheduledEvent(ScheduledAction scheduledAction){
      * @return ScheduledEvent object instance
      */
     private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
-        String eventUid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EVENT_UID));
+        String eventUid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ACTION_UID));
         long period     = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
         long startTime  = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_START_TIME));
         long endTime    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_END_TIME));
@@ -128,7 +128,7 @@ public ScheduledAction getScheduledEvent(String uid){
      */
     public List<ScheduledAction> getScheduledEventsWithUID(@NonNull String eventUID){
         Cursor cursor = mDb.query(ScheduledActionEntry.TABLE_NAME, null,
-                ScheduledActionEntry.COLUMN_EVENT_UID + "= ?",
+                ScheduledActionEntry.COLUMN_ACTION_UID + "= ?",
                 new String[]{eventUID}, null, null, null);
 
         List<ScheduledAction> scheduledActions = new ArrayList<ScheduledAction>();
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 8da5e910..ae57cc1c 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -27,13 +27,22 @@
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.*;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
 
-import static org.gnucash.android.db.DatabaseSchema.*;
 import java.util.ArrayList;
 import java.util.Currency;
 import java.util.List;
 
+import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
+import static org.gnucash.android.db.DatabaseSchema.SPLITS_DB_VERSION;
+import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
+import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
+import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
+
 /**
  * Manages persistence of {@link Transaction}s in the database
  * Handles adding, modifying and deleting of transaction records.
@@ -242,7 +251,7 @@ public Cursor fetchAllScheduledTransactions(){
         SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
         queryBuilder.setTables(TransactionEntry.TABLE_NAME + " INNER JOIN " + ScheduledActionEntry.TABLE_NAME + " ON "
                 + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
-                + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_EVENT_UID);
+                + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_ACTION_UID);
 
         String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
diff --git a/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java b/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
index 5ba8b9c9..422005e7 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
@@ -19,16 +19,20 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.app.DialogFragment;
-import android.text.AndroidCharacter;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.*;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.RadioButton;
+import android.widget.Spinner;
+import android.widget.TextView;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 
diff --git a/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
index 6763aa0d..6e4ddc7b 100644
--- a/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
@@ -30,6 +30,7 @@
 import android.support.v4.app.FragmentActivity;
 import android.util.Log;
 import android.widget.Toast;
+
 import org.gnucash.android.R;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
@@ -38,7 +39,15 @@
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.transaction.dialog.TransactionsDeleteConfirmationDialogFragment;
 
-import java.io.*;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
 import java.nio.channels.FileChannel;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
diff --git a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
index d317e2e1..9876a7ed 100644
--- a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
@@ -17,27 +17,32 @@
 
 package org.gnucash.android.export.ofx;
 
-import java.io.IOException;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.util.List;
-
 import android.preference.PreferenceManager;
+
 import org.gnucash.android.R;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.ProcessingInstruction;
 
+import java.io.IOException;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.util.List;
+
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.*;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index bf122cf5..b8847019 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -19,8 +19,6 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 
-import static org.gnucash.android.db.DatabaseSchema.*;
-
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
@@ -31,6 +29,10 @@
 import java.math.BigDecimal;
 import java.util.Currency;
 
+import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
+import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
+import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
+
 /**
  * Exports the accounts and transactions in the database to the QIF format
  *
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 134e970f..2c7db1db 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -22,8 +22,6 @@
 import android.util.Log;
 
 import org.gnucash.android.db.DatabaseSchema;
-import static org.gnucash.android.db.DatabaseSchema.*;
-
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
@@ -31,7 +29,11 @@
 import org.xmlpull.v1.XmlPullParserFactory;
 import org.xmlpull.v1.XmlSerializer;
 
-import java.io.*;
+import java.io.BufferedOutputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
 import java.math.BigDecimal;
 import java.sql.Timestamp;
 import java.util.ArrayList;
@@ -40,6 +42,10 @@
 import java.util.UUID;
 import java.util.zip.GZIPOutputStream;
 
+import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
+import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
+import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
+
 /**
  * Creates a GnuCash XML representation of the accounts and transactions
  *
@@ -376,7 +382,7 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             }
             //Ignoring GnuCash XML template account: <sx:templ-acct type="guid">2da76df09056540bb3a37e4a04547d82</sx:templ-acct>
 
-            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EVENT_UID));
+            String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ACTION_UID));
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_TEMPL_ACTION);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, actionUID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_TEMPL_ACTION);
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 3b6ee9dd..d51e520a 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -17,26 +17,30 @@
 
 package org.gnucash.android.importer;
 
-import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
-import org.gnucash.android.app.GnuCashApplication;
+
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlHelper;
-import org.gnucash.android.model.*;
-import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
 import org.xml.sax.Attributes;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
 
 import java.text.ParseException;
+import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Stack;
 import java.util.regex.Pattern;
-import java.util.List;
-import java.util.ArrayList;
 
 /**
  * Handler for parsing the GnuCash XML file.
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java b/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java
index 59636544..588e3888 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java
@@ -19,19 +19,21 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
+
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.XMLReader;
 
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
 import java.io.BufferedInputStream;
-import java.io.PushbackInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.PushbackInputStream;
 import java.util.zip.GZIPInputStream;
 
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+
 /**
  * Importer for Gnucash XML files and GNCA (GnuCash Android) XML files
  *
diff --git a/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
index a144c078..864d076d 100644
--- a/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
@@ -18,11 +18,11 @@
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.ProgressDialog;
-import android.content.Context;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.util.Log;
 import android.widget.Toast;
+
 import org.gnucash.android.R;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.util.TaskDelegate;
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index c35f09a5..d7ec854a 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -21,7 +21,9 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.List;
 import java.util.regex.Pattern;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/model/Split.java b/app/src/main/java/org/gnucash/android/model/Split.java
index 91a72e92..60a498f3 100644
--- a/app/src/main/java/org/gnucash/android/model/Split.java
+++ b/app/src/main/java/org/gnucash/android/model/Split.java
@@ -1,12 +1,6 @@
 package org.gnucash.android.model;
 
 
-import org.gnucash.android.export.xml.GncXmlHelper;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-
-import java.util.UUID;
-
 /**
  * A split amount in a transaction.
  * Every transaction is made up of at least two splits (representing a double entry transaction)
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index e6ee2fd3..1a699443 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -24,7 +24,10 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.Date;
+import java.util.List;
 
 /**
  * Represents a financial transaction, either credit or debit.
diff --git a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
index ba4b3039..8f0c172f 100644
--- a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
+++ b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
@@ -16,18 +16,17 @@
 
 package org.gnucash.android.receivers;
 
-import java.util.Currency;
-
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.db.AccountsDbAdapter;
-
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
 
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.model.Account;
+
+import java.util.Currency;
+
 /**
  * Broadcast receiver responsible for creating {@link Account}s received through intents.
  * In order to create an <code>Account</code>, you need to broadcast an {@link Intent} with arguments 
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionAppWidgetProvider.java b/app/src/main/java/org/gnucash/android/receivers/TransactionAppWidgetProvider.java
index ee62139b..34974ff8 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionAppWidgetProvider.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionAppWidgetProvider.java
@@ -15,15 +15,15 @@
  */
 package org.gnucash.android.receivers;
 
-import org.gnucash.android.ui.UxArgument;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-
 import android.appwidget.AppWidgetManager;
 import android.appwidget.AppWidgetProvider;
 import android.content.Context;
 import android.content.SharedPreferences.Editor;
 import android.preference.PreferenceManager;
 
+import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+
 /**
  * {@link AppWidgetProvider} which is responsible for managing widgets on the homescreen
  * It receives broadcasts related to updating and deleting widgets
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
index dd188b14..226a376f 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
@@ -22,9 +22,12 @@
 import android.os.Bundle;
 import android.util.Log;
 
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.model.*;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 import java.io.BufferedReader;
diff --git a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
index a2655160..a38e1b84 100644
--- a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
@@ -38,7 +38,7 @@
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.chart.PieChartActivity;
 import org.gnucash.android.ui.settings.SettingsActivity;
-import org.gnucash.android.ui.transaction.ScheduledEventsActivity;
+import org.gnucash.android.ui.transaction.ScheduledActionsActivity;
 
 import java.io.FileNotFoundException;
 import java.io.InputStream;
@@ -196,10 +196,10 @@ protected void selectItem(int position) {
                 break;
 
             case 5: { //show scheduled transactions
-                Intent intent = new Intent(this, ScheduledEventsActivity.class);
+                Intent intent = new Intent(this, ScheduledActionsActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_SINGLE_TOP);
-                intent.putExtra(ScheduledEventsActivity.EXTRA_DISPLAY_MODE,
-                        ScheduledEventsActivity.DisplayMode.TRANSACTION_EVENTS);
+                intent.putExtra(ScheduledActionsActivity.EXTRA_DISPLAY_MODE,
+                        ScheduledActionsActivity.DisplayMode.TRANSACTION_ACTIONS);
                 startActivity(intent);
             }
                 break;
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 32f05bba..9bd2574f 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -34,14 +34,21 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.*;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
 import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.Toast;
+
 import com.actionbarsherlock.app.SherlockFragment;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.Account;
@@ -53,7 +60,11 @@
 import org.gnucash.android.ui.colorpicker.ColorSquare;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Currency;
+import java.util.HashMap;
+import java.util.List;
 
 /**
  * Fragment used for creating and editing accounts
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 07076059..985d0d05 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -58,7 +58,7 @@
 import org.gnucash.android.ui.chart.PieChartActivity;
 import org.gnucash.android.ui.passcode.PassLockActivity;
 import org.gnucash.android.ui.settings.SettingsActivity;
-import org.gnucash.android.ui.transaction.ScheduledEventsActivity;
+import org.gnucash.android.ui.transaction.ScheduledActionsActivity;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
@@ -382,9 +382,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return super.onOptionsItemSelected(item);
 
             case R.id.menu_recurring_transactions:
-                Intent intent = new Intent(this, ScheduledEventsActivity.class);
-                intent.putExtra(ScheduledEventsActivity.EXTRA_DISPLAY_MODE,
-                        ScheduledEventsActivity.DisplayMode.TRANSACTION_EVENTS);
+                Intent intent = new Intent(this, ScheduledActionsActivity.class);
+                intent.putExtra(ScheduledActionsActivity.EXTRA_DISPLAY_MODE,
+                        ScheduledActionsActivity.DisplayMode.TRANSACTION_ACTIONS);
                 startActivity(intent);
                 return true;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
index 97c436f5..80ec5239 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -36,8 +36,15 @@
 import android.view.TouchDelegate;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.*;
+import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemLongClickListener;
+import android.widget.CheckBox;
+import android.widget.ImageButton;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import com.actionbarsherlock.app.SherlockListFragment;
@@ -46,16 +53,19 @@
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseCursorLoader;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
-import org.gnucash.android.db.*;
-import org.gnucash.android.ui.util.AccountBalanceTask;
-import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+import org.gnucash.android.ui.util.AccountBalanceTask;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
+import org.gnucash.android.ui.util.Refreshable;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 /**
  * Fragment for displaying the list of accounts in the database
diff --git a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
index add26068..4e3f4495 100644
--- a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
@@ -23,7 +23,9 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.ProgressBar;
+
 import com.actionbarsherlock.app.SherlockDialogFragment;
+
 import org.gnucash.android.R;
 import org.gnucash.android.ui.colorpicker.ColorPickerSwatch.OnColorSelectedListener;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java
index 8c0f768d..d7ea7422 100644
--- a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java
+++ b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java
@@ -18,14 +18,12 @@
 
 
 import android.content.Context;
-import android.graphics.PorterDuff.Mode;
-import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.graphics.drawable.LayerDrawable;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+
 import org.gnucash.android.R;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorSquare.java b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorSquare.java
index c123988a..34e3539b 100644
--- a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorSquare.java
+++ b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorSquare.java
@@ -20,6 +20,7 @@
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.widget.QuickContactBadge;
+
 import org.gnucash.android.R;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java
index 35fd180a..936ebaab 100644
--- a/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java
+++ b/app/src/main/java/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java
@@ -16,10 +16,10 @@
 
 package org.gnucash.android.ui.colorpicker;
 
-        import android.graphics.Color;
-        import android.graphics.PorterDuff;
-        import android.graphics.drawable.Drawable;
-        import android.graphics.drawable.LayerDrawable;
+import android.graphics.Color;
+import android.graphics.PorterDuff;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.LayerDrawable;
 
 /**
  * A drawable which sets its color filter to a color specified by the user, and changes to a
diff --git a/app/src/main/java/org/gnucash/android/ui/colorpicker/HsvColorComparator.java b/app/src/main/java/org/gnucash/android/ui/colorpicker/HsvColorComparator.java
index 17b3d408..e504dee3 100644
--- a/app/src/main/java/org/gnucash/android/ui/colorpicker/HsvColorComparator.java
+++ b/app/src/main/java/org/gnucash/android/ui/colorpicker/HsvColorComparator.java
@@ -15,7 +15,9 @@
  */
 
 package org.gnucash.android.ui.colorpicker;
+
 import android.graphics.Color;
+
 import java.util.Comparator;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java
index 717d5836..381edfb7 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java
@@ -16,8 +16,6 @@
 
 package org.gnucash.android.ui.settings;
 
-import org.gnucash.android.R;
-
 import android.annotation.TargetApi;
 import android.content.SharedPreferences;
 import android.os.Bundle;
@@ -27,6 +25,8 @@
 
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
+
+import org.gnucash.android.R;
 import org.gnucash.android.ui.account.AccountsActivity;
 
 
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
index 91e66491..f1d73baf 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
@@ -24,8 +24,8 @@
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.widget.Toast;
+
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index b99892e6..20554a4b 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -24,6 +24,7 @@
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.widget.Toast;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
index a60a99ef..aac7aea9 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
@@ -16,20 +16,20 @@
 
 package org.gnucash.android.ui.settings;
 
-import org.gnucash.android.R;
-import org.gnucash.android.model.Money;
-
 import android.annotation.TargetApi;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.Preference;
+import android.preference.Preference.OnPreferenceChangeListener;
 import android.preference.PreferenceFragment;
 import android.preference.PreferenceManager;
-import android.preference.Preference.OnPreferenceChangeListener;
 
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 
+import org.gnucash.android.R;
+import org.gnucash.android.model.Money;
+
 
 /**
  * Fragment for displaying general preferences
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
index 0922554e..29e2cb36 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
@@ -23,8 +23,10 @@
 import android.preference.Preference.OnPreferenceChangeListener;
 import android.preference.PreferenceFragment;
 import android.preference.PreferenceManager;
+
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
+
 import org.gnucash.android.R;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledEventsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java
similarity index 88%
rename from app/src/main/java/org/gnucash/android/ui/transaction/ScheduledEventsActivity.java
rename to app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java
index ada3f79b..013fec49 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledEventsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java
@@ -28,13 +28,13 @@
  * Activity for displaying scheduled actions
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class ScheduledEventsActivity extends PassLockActivity {
+public class ScheduledActionsActivity extends PassLockActivity {
 
-    public enum DisplayMode {ALL_EVENTS, TRANSACTION_EVENTS, EXPORT_EVENTS}
+    public enum DisplayMode {ALL_ACTIONS, TRANSACTION_ACTIONS, EXPORT_ACTIONS}
 
     public static final String EXTRA_DISPLAY_MODE = "org.gnucash.android.extra.DISPLAY_MODE";
 
-    private DisplayMode mDisplayMode = DisplayMode.ALL_EVENTS;
+    private DisplayMode mDisplayMode = DisplayMode.ALL_ACTIONS;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -46,15 +46,15 @@ protected void onCreate(Bundle savedInstanceState) {
             throw new MissingFormatArgumentException("Missing argument for which kind of scheduled events to display");
 
         switch (mDisplayMode){
-            case ALL_EVENTS:
+            case ALL_ACTIONS:
                 showAllScheduledEventsFragment();
                 break;
 
-            case TRANSACTION_EVENTS:
+            case TRANSACTION_ACTIONS:
                 showScheduledTransactionsFragment();
                 break;
 
-            case EXPORT_EVENTS:
+            case EXPORT_ACTIONS:
 
                 break;
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 6af4b081..f96a66cc 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -16,32 +16,6 @@
 
 package org.gnucash.android.ui.transaction;
 
-import java.math.BigDecimal;
-import java.math.RoundingMode;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.util.*;
-
-import android.support.v4.app.FragmentManager;
-import android.text.format.Time;
-import android.text.Editable;
-import android.widget.*;
-import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrence;
-import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrenceFormatter;
-import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
-import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.*;
-import org.gnucash.android.model.*;
-import org.gnucash.android.ui.transaction.dialog.DatePickerDialogFragment;
-import org.gnucash.android.ui.transaction.dialog.SplitEditorDialogFragment;
-import org.gnucash.android.ui.transaction.dialog.TimePickerDialogFragment;
-import org.gnucash.android.ui.UxArgument;
-import org.gnucash.android.ui.util.AmountInputFormatter;
-import org.gnucash.android.ui.util.RecurrenceParser;
-import org.gnucash.android.ui.util.TransactionTypeToggleButton;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-
 import android.app.DatePickerDialog;
 import android.app.DatePickerDialog.OnDateSetListener;
 import android.app.TimePickerDialog;
@@ -52,21 +26,71 @@
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.app.DialogFragment;
+import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.widget.SimpleCursorAdapter;
+import android.text.Editable;
+import android.text.format.Time;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
+import android.widget.AdapterView;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.FilterQueryProvider;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.TimePicker;
+import android.widget.Toast;
 
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockFragment;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrence;
+import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrenceFormatter;
+import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
+
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.ScheduledActionDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.ScheduledAction;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
+import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.transaction.dialog.DatePickerDialogFragment;
+import org.gnucash.android.ui.transaction.dialog.SplitEditorDialogFragment;
+import org.gnucash.android.ui.transaction.dialog.TimePickerDialogFragment;
+import org.gnucash.android.ui.util.AmountInputFormatter;
+import org.gnucash.android.ui.util.RecurrenceParser;
+import org.gnucash.android.ui.util.TransactionTypeToggleButton;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Currency;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+import java.util.Locale;
+
 /**
  * Fragment for creating or editing transactions
  * @author Ngewi Fet <ngewif@gmail.com>
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 2a8c1ed2..7804cc91 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -36,24 +36,31 @@
 import android.view.TouchDelegate;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.*;
+import android.widget.AdapterView;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
 import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.ListView;
+import android.widget.TextView;
+
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockListFragment;
 import com.actionbarsherlock.view.ActionMode;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.*;
+import org.gnucash.android.db.DatabaseCursorLoader;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.dialog.BulkMoveDialogFragment;
 import org.gnucash.android.ui.util.AccountBalanceTask;
+import org.gnucash.android.ui.util.OnTransactionClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
-import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-import org.gnucash.android.ui.util.OnTransactionClickedListener;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
index d9b09e5e..465743f5 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
@@ -16,16 +16,6 @@
 
 package org.gnucash.android.ui.transaction.dialog;
 
-import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.ui.UxArgument;
-import org.gnucash.android.ui.transaction.TransactionsActivity;
-import org.gnucash.android.ui.util.Refreshable;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-
 import android.database.Cursor;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
@@ -37,6 +27,15 @@
 import android.widget.Button;
 import android.widget.Spinner;
 import android.widget.Toast;
+
+import org.gnucash.android.R;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.transaction.TransactionsActivity;
+import org.gnucash.android.ui.util.Refreshable;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
index 1707aa99..f2a70e9d 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
@@ -16,16 +16,15 @@
 
 package org.gnucash.android.ui.transaction.dialog;
 
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-
 import android.app.DatePickerDialog;
 import android.app.DatePickerDialog.OnDateSetListener;
 import android.app.Dialog;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
 
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
 /**
  * Fragment for displaying a date picker dialog
  * @author Ngewi Fet <ngewif@gmail.com>
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 3dbaecbf..0f9f0b71 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -25,13 +25,24 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
-import android.widget.*;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.SplitsDbAdapter;
-import org.gnucash.android.model.*;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java
index 6ad72c50..700f3865 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TimePickerDialogFragment.java
@@ -15,15 +15,15 @@
  */
 package org.gnucash.android.ui.transaction.dialog;
 
-import java.util.Calendar;
-import java.util.GregorianCalendar;
-
 import android.app.Dialog;
 import android.app.TimePickerDialog;
 import android.app.TimePickerDialog.OnTimeSetListener;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
 
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
 /**
  * Fragment for displaying a time choose dialog
  * @author Ngewi Fet <ngewif@gmail.com>
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index c6816689..e7549048 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -16,6 +16,13 @@
  */
 package org.gnucash.android.ui.transaction.dialog;
 
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+
+import com.actionbarsherlock.app.SherlockDialogFragment;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -24,13 +31,6 @@
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsListFragment;
-
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-
-import com.actionbarsherlock.app.SherlockDialogFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 import java.util.ArrayList;
diff --git a/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
index 32dd4240..4317f1d7 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -21,6 +21,7 @@
 import android.os.AsyncTask;
 import android.util.Log;
 import android.widget.TextView;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
diff --git a/app/src/main/java/org/gnucash/android/ui/util/AmountInputFormatter.java b/app/src/main/java/org/gnucash/android/ui/util/AmountInputFormatter.java
index abead0c4..8b711150 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/AmountInputFormatter.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/AmountInputFormatter.java
@@ -18,6 +18,7 @@
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.widget.EditText;
+
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 
 import java.math.BigDecimal;
diff --git a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
index e40530be..70c8c16d 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
@@ -17,7 +17,9 @@
 package org.gnucash.android.ui.util;
 
 import android.text.format.Time;
+
 import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrence;
+
 import org.gnucash.android.model.ScheduledAction;
 
 import java.util.ArrayList;
diff --git a/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeToggleButton.java b/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
index 022141e6..5db2ee27 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
@@ -22,6 +22,7 @@
 import android.widget.EditText;
 import android.widget.TextView;
 import android.widget.ToggleButton;
+
 import org.gnucash.android.R;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Transaction;
diff --git a/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java b/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
index 856295a2..cafc498a 100644
--- a/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
@@ -16,18 +16,6 @@
 
 package org.gnucash.android.ui.widget;
 
-import java.util.Locale;
-
-import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.receivers.TransactionAppWidgetProvider;
-import org.gnucash.android.ui.UxArgument;
-import org.gnucash.android.ui.account.AccountsActivity;
-import org.gnucash.android.ui.transaction.TransactionsActivity;
-
 import android.app.Activity;
 import android.app.PendingIntent;
 import android.appwidget.AppWidgetManager;
@@ -46,8 +34,19 @@
 import android.widget.RemoteViews;
 import android.widget.Spinner;
 import android.widget.Toast;
+
+import org.gnucash.android.R;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.receivers.TransactionAppWidgetProvider;
+import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
+import java.util.Locale;
+
 /**
  * Activity for configuration which account to display on a widget.
  * The activity is opened each time a widget is added to the homescreen
diff --git a/app/src/main/java/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java b/app/src/main/java/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
index 90e7f854..dbd779b1 100644
--- a/app/src/main/java/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
+++ b/app/src/main/java/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
@@ -22,9 +22,7 @@
 import android.text.TextUtils;
 import android.view.View;
 import android.widget.TextView;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseHelper;
+
 import org.gnucash.android.db.DatabaseSchema;
 
 /**

From 885f10da2b34167dfc1909d97035b5130d812b95 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 8 Mar 2015 21:04:30 +0100
Subject: [PATCH 12/52] Add build flavors to allow parallel installation of
 development and production APKs.

---
 app/build.gradle | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/app/build.gradle b/app/build.gradle
index b6f217c1..44656189 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -25,6 +25,14 @@ android {
     lintOptions {
         abortOnError false
     }
+    productFlavors {
+        development {
+            applicationId 'org.gnucash.android.devel'
+            testApplicationId 'org.gnucash.android.test.devel'
+        }
+        production {
+        }
+    }
 }
 
 dependencies {

From 2b439a495f92c96f2952607b06c73beb0d410763 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 8 Mar 2015 21:06:17 +0100
Subject: [PATCH 13/52] Remove androidTest/AndroidManifest.xml.

It's generated automatically by Gradle now.
---
 app/src/androidTest/AndroidManifest.xml | 22 ----------------------
 1 file changed, 22 deletions(-)
 delete mode 100644 app/src/androidTest/AndroidManifest.xml

diff --git a/app/src/androidTest/AndroidManifest.xml b/app/src/androidTest/AndroidManifest.xml
deleted file mode 100644
index 9d914bab..00000000
--- a/app/src/androidTest/AndroidManifest.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.gnucash.android.test"
-    android:versionCode="3"
-    android:versionName="1.2.4" >
-
-    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="18" />
-
-    <uses-permission android:name="org.gnucash.android.permission.RECORD_TRANSACTION" />
-    <uses-permission android:name="org.gnucash.android.permission.CREATE_ACCOUNT" />
-    
-    <instrumentation
-        android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="org.gnucash.android" />
-
-    <application
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name" >
-        <uses-library android:name="android.test.runner" />
-    </application>
-
-</manifest>
\ No newline at end of file

From d63bc6d939bb5082bf7663ca8b205cbeb3f3d3b9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 9 Mar 2015 19:55:51 +0100
Subject: [PATCH 14/52] Set the application name depending on the build flavor.

---
 app/build.gradle                           | 2 ++
 app/src/main/res/values-de/strings.xml     | 1 -
 app/src/main/res/values-el/strings.xml     | 1 -
 app/src/main/res/values-es-rMX/strings.xml | 1 -
 app/src/main/res/values-es/strings.xml     | 1 -
 app/src/main/res/values-fr/strings.xml     | 1 -
 app/src/main/res/values-hu/strings.xml     | 1 -
 app/src/main/res/values-it/strings.xml     | 1 -
 app/src/main/res/values-nb/strings.xml     | 1 -
 app/src/main/res/values-nl/strings.xml     | 1 -
 app/src/main/res/values-pt-rBR/strings.xml | 1 -
 app/src/main/res/values-ru/strings.xml     | 1 -
 app/src/main/res/values-zh/strings.xml     | 1 -
 app/src/main/res/values/strings.xml        | 1 -
 14 files changed, 2 insertions(+), 13 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 44656189..90d8e8d9 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -29,8 +29,10 @@ android {
         development {
             applicationId 'org.gnucash.android.devel'
             testApplicationId 'org.gnucash.android.test.devel'
+            resValue "string", "app_name", "GnuCash (devel)"
         }
         production {
+            resValue "string", "app_name", "GnuCash"
         }
     }
 }
diff --git a/app/src/main/res/values-de/strings.xml b/app/src/main/res/values-de/strings.xml
index 3a28f70e..89c3adf7 100644
--- a/app/src/main/res/values-de/strings.xml
+++ b/app/src/main/res/values-de/strings.xml
@@ -16,7 +16,6 @@
  limitations under the License.
 -->
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Neues Konto</string>
     <string name="title_edit_account">Konto bearbeiten</string>
     <string name="info_details">Info</string>
diff --git a/app/src/main/res/values-el/strings.xml b/app/src/main/res/values-el/strings.xml
index 2c013658..26ccdf23 100644
--- a/app/src/main/res/values-el/strings.xml
+++ b/app/src/main/res/values-el/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account"> </string>
     <string name="title_edit_account"> </string>
     <string name="info_details"></string>
diff --git a/app/src/main/res/values-es-rMX/strings.xml b/app/src/main/res/values-es-rMX/strings.xml
index b0eeaa0d..fe0664a0 100644
--- a/app/src/main/res/values-es-rMX/strings.xml
+++ b/app/src/main/res/values-es-rMX/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Crear cuenta</string>
     <string name="title_edit_account">Editar cuenta</string>
     <string name="info_details">Detalles</string>
diff --git a/app/src/main/res/values-es/strings.xml b/app/src/main/res/values-es/strings.xml
index 61c9bb05..ac956e60 100644
--- a/app/src/main/res/values-es/strings.xml
+++ b/app/src/main/res/values-es/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Crear Cuenta</string>
     <string name="title_edit_account">Editar Cuenta</string>
     <string name="info_details">Info</string>
diff --git a/app/src/main/res/values-fr/strings.xml b/app/src/main/res/values-fr/strings.xml
index ad3619ed..1fa637c4 100644
--- a/app/src/main/res/values-fr/strings.xml
+++ b/app/src/main/res/values-fr/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Cr&#233;er un compte</string>
     <string name="title_edit_account">diter le compte</string>
     <string name="info_details">Informations</string>
diff --git a/app/src/main/res/values-hu/strings.xml b/app/src/main/res/values-hu/strings.xml
index 5f24efec..8a4c8707 100644
--- a/app/src/main/res/values-hu/strings.xml
+++ b/app/src/main/res/values-hu/strings.xml
@@ -16,7 +16,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
diff --git a/app/src/main/res/values-it/strings.xml b/app/src/main/res/values-it/strings.xml
index b2fca4f2..17238e53 100644
--- a/app/src/main/res/values-it/strings.xml
+++ b/app/src/main/res/values-it/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Crea conto</string>
     <string name="title_edit_account">Modifica conto</string>
     <string name="info_details">Informazioni</string>
diff --git a/app/src/main/res/values-nb/strings.xml b/app/src/main/res/values-nb/strings.xml
index b0775385..aa2417fb 100644
--- a/app/src/main/res/values-nb/strings.xml
+++ b/app/src/main/res/values-nb/strings.xml
@@ -18,7 +18,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Opprett konto</string>
     <string name="title_edit_account">Rediger konto</string>
     <string name="info_details">Informasjon</string>
diff --git a/app/src/main/res/values-nl/strings.xml b/app/src/main/res/values-nl/strings.xml
index 5cd048a9..fcffe2a4 100644
--- a/app/src/main/res/values-nl/strings.xml
+++ b/app/src/main/res/values-nl/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Nieuw rekening</string>
     <string name="title_edit_account">Rekening bewerken</string>
     <string name="info_details">Info</string>
diff --git a/app/src/main/res/values-pt-rBR/strings.xml b/app/src/main/res/values-pt-rBR/strings.xml
index afd5ab8c..3fbd6680 100644
--- a/app/src/main/res/values-pt-rBR/strings.xml
+++ b/app/src/main/res/values-pt-rBR/strings.xml
@@ -16,7 +16,6 @@
  limitations under the License.
 -->
 <resources>
-	  <string name="app_name">GnuCash</string>
 	  <string name="title_add_account">Criar Conta</string>
 	  <string name="title_edit_account">Editar Conta</string>
 	  <string name="info_details">Info</string>
diff --git a/app/src/main/res/values-ru/strings.xml b/app/src/main/res/values-ru/strings.xml
index 0976477c..3cc0a298 100644
--- a/app/src/main/res/values-ru/strings.xml
+++ b/app/src/main/res/values-ru/strings.xml
@@ -17,7 +17,6 @@
 -->
 
 <resources>
-    <string name="app_name">Gnucash</string>
     <string name="title_add_account"> </string>
     <string name="title_edit_account"> </string>
     <string name="info_details"></string>
diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index abcf121c..52761220 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -16,7 +16,6 @@
  limitations under the License.
 -->
 <resources>
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account"></string>
     <string name="title_edit_account"></string>
     <string name="info_details"></string>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 8d06b36e..31ae59f1 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -16,7 +16,6 @@
 -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="app_name">GnuCash</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>

From bdf9bdcc7f1845c3dfd0590518f07f685ed723c8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 8 Mar 2015 21:08:12 +0100
Subject: [PATCH 15/52] Fix formatting of build.gradle.

Otherwise Android Studio keeps changing the formating with each
modification.
---
 app/build.gradle | 13 ++++---------
 1 file changed, 4 insertions(+), 9 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 90d8e8d9..885d36c9 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -3,7 +3,6 @@ apply plugin: 'com.android.application'
 android {
     compileSdkVersion 19
     buildToolsVersion "21.1.2"
-
     defaultConfig {
         applicationId "org.gnucash.android"
         minSdkVersion 9
@@ -11,7 +10,6 @@ android {
         versionCode 48
         versionName "1.6.x"
     }
-
     buildTypes {
         release {
             minifyEnabled false
@@ -21,7 +19,6 @@ android {
             debuggable true
         }
     }
-
     lintOptions {
         abortOnError false
     }
@@ -39,16 +36,14 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile ('com.android.support:support-v4:21.0.+',
-            'com.actionbarsherlock:actionbarsherlock:4.4.0@aar',			
+    compile('com.android.support:support-v4:21.0.+',
+            'com.actionbarsherlock:actionbarsherlock:4.4.0@aar',
             'com.viewpagerindicator:library:2.4.1@aar',
             'com.doomonafireball.betterpickers:library:1.5.2',
             'com.commonsware.cwac:merge:1.1.+',
             'org.quanqi:mpandroidchart:1.7.4', //TODO: Upgrade only when we support Android API 14 and over)
             'joda-time:joda-time:2.7'
     )
-			
-	androidTestCompile ('com.jayway.android.robotium:robotium-solo:5.2.1',
-			'com.squareup:fest-android:1.0.6')
-
+    androidTestCompile('com.jayway.android.robotium:robotium-solo:5.2.1',
+            'com.squareup:fest-android:1.0.6')
 }
\ No newline at end of file

From 78667aae414b238dad269788b797d56e3111f1ba Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 19 Mar 2015 19:57:00 +0100
Subject: [PATCH 16/52] Make gradlew executable.

---
 gradlew | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 mode change 100644 => 100755 gradlew

diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755

From f1281e6e9285ff390074cf7064476da673f222ad Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 21 Mar 2015 18:12:18 +0800
Subject: [PATCH 17/52] import with null parent

---
 app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index d51e520a..9ffd5273 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -378,7 +378,10 @@ public void endDocument() throws SAXException {
                     }
                     String parentUID = acc.getParentUID();
                     Account parentAccount = map.get(parentUID);
-                    if (parentAccount.getAccountType() == AccountType.ROOT) {
+                    // In accounts tree that are not imported, top level ROOT account
+                    // does not exist, which will make all top level accounts have a
+                    // null parent
+                    if (parentAccount == null || parentAccount.getAccountType() == AccountType.ROOT) {
                         // top level account, full name is the same as its name
                         mapFullName.put(acc.getUID(), acc.getName());
                         stack.pop();

From 53d413dec6ad53e54280d60a81c3a77fe3824b94 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 09:58:27 +0100
Subject: [PATCH 18/52] Upgraded Java language level to 1.7

Fixed: crash when opening an account (without parents) for editing
Fixed: crash when saving new accounts which do not have a parent
Fixed: crash when opening Settings preferences due to API level 19
---
 app/build.gradle                                            |  4 ++++
 app/src/androidTest/res/values/strings.xml                  |  1 -
 .../org/gnucash/android/ui/account/AccountFormFragment.java | 13 +++++++++----
 .../org/gnucash/android/ui/settings/SettingsActivity.java   |  9 +++++++++
 4 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 885d36c9..8c6632aa 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -32,6 +32,10 @@ android {
             resValue "string", "app_name", "GnuCash"
         }
     }
+    compileOptions { //we want switch with strings during xml parsing
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
 }
 
 dependencies {
diff --git a/app/src/androidTest/res/values/strings.xml b/app/src/androidTest/res/values/strings.xml
index b32576cf..443aab95 100644
--- a/app/src/androidTest/res/values/strings.xml
+++ b/app/src/androidTest/res/values/strings.xml
@@ -2,6 +2,5 @@
 <resources>
 
     <string name="hello">Hello World!</string>
-    <string name="app_name">GnuCash Android Integration Tests</string>
 
 </resources>
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 9bd2574f..b49d5ad7 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -316,8 +316,10 @@ public void onActivityCreated(Bundle savedInstanceState) {
             mAccount = mAccountsDbAdapter.getAccount(mAccountUID);
             getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
         }
+
         mRootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
-        mRootAccountId = mAccountsDbAdapter.getID(mRootAccountUID);
+        if (mRootAccountUID != null)
+            mRootAccountId = mAccountsDbAdapter.getID(mRootAccountUID);
 
         //need to load the cursor adapters for the spinners before initializing the views
         loadAccountTypesList();
@@ -348,7 +350,10 @@ private void initializeViewsWithAccount(Account account){
             // null parent, set Parent as root
             mParentAccountUID = mRootAccountUID;
         }
-        setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
+
+        if (mParentAccountUID != null) {
+            setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
+        }
 
         String currencyCode = account.getCurrency().getCurrencyCode();
         setSelectedCurrency(currencyCode);
@@ -360,7 +365,7 @@ private void initializeViewsWithAccount(Account account){
 
         mNameEditText.setText(account.getName());
 
-        if (mUseDoubleEntry) {
+        if (mUseDoubleEntry && account.getDefaultTransferAccountUID() != null) {
             long doubleDefaultAccountId = mAccountsDbAdapter.getID(account.getDefaultTransferAccountUID());
             setDefaultTransferAccountSelection(doubleDefaultAccountId);
         }
@@ -741,7 +746,7 @@ private void saveAccount() {
             mAccount.setDefaultTransferAccountUID(null);
         }
 
-        long parentAccountId = mAccountsDbAdapter.getID(mParentAccountUID);
+        long parentAccountId = mParentAccountUID == null ? -1 : mAccountsDbAdapter.getID(mParentAccountUID);
         // update full names
         if (nameChanged || mDescendantAccountUIDs == null || newParentAccountId != parentAccountId) {
             // current account name changed or new Account or parent account changed
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
index 6025e3a3..87f12125 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -219,6 +219,15 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
 		return true;
 	}
 
+    @Override
+    protected boolean isValidFragment(String fragmentName) {
+        return GeneralPreferenceFragment.class.getName().equals(fragmentName)
+                || AccountPreferencesFragment.class.getName().equals(fragmentName)
+                || PasscodePreferenceFragment.class.getName().equals(fragmentName)
+                || TransactionsPreferenceFragment.class.getName().equals(fragmentName)
+                || AboutPreferenceFragment.class.getName().equals(fragmentName);
+    }
+
     public void setImbalanceAccountsHidden(boolean useDoubleEntry) {
         String isHidden = useDoubleEntry ? "0" : "1";
         AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();

From 2a9c994a00d813a1c23bbbb3cf68689dc63471f8 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 14:54:01 +0100
Subject: [PATCH 19/52] Implemented import of scheduled transactions from XML

Updated writing of scheduled transactions to XML to more closely match GnuCash desktop
Added bulk saving of scheduled actions to db
Fixed: writing of scheduled actions did not add the GUID of the action
---
 .../org/gnucash/android/db/DatabaseSchema.java     |  21 +--
 .../android/db/ScheduledActionDbAdapter.java       |  57 +++++-
 .../gnucash/android/db/TransactionsDbAdapter.java  |  19 +-
 .../gnucash/android/export/xml/GncXmlExporter.java |  54 +++++-
 .../gnucash/android/export/xml/GncXmlHelper.java   |  60 ++-----
 .../gnucash/android/importer/GncXmlHandler.java    | 191 ++++++++++++++++++---
 .../org/gnucash/android/model/ScheduledAction.java | 120 ++++++++++---
 .../gnucash/android/service/SchedulerService.java  |   2 +-
 .../ui/transaction/TransactionFormFragment.java    |   4 +-
 9 files changed, 397 insertions(+), 131 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 3aee09a9..bba49b48 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -104,18 +104,15 @@ private DatabaseSchema(){}
     }
 
     public static abstract class ScheduledActionEntry implements CommonColumns {
-        public static final String TABLE_NAME           = "scheduled_actions";
-
-        public static final String COLUMN_TYPE          = "type";
-        public static final String COLUMN_ACTION_UID    = "action_uid";
-        public static final String COLUMN_START_TIME    = "start_time";
-        public static final String COLUMN_END_TIME      = "end_time";
-        public static final String COLUMN_LAST_RUN      = "last_run";
-        public static final String COLUMN_PERIOD        = "period";
-        /**
-         * Tags for any scheduled action-specific information
-         */
-        public static final String COLUMN_TAG               = "tag";
+        public static final String TABLE_NAME               = "scheduled_actions";
+
+        public static final String COLUMN_TYPE              = "type";
+        public static final String COLUMN_ACTION_UID        = "action_uid";
+        public static final String COLUMN_START_TIME        = "start_time";
+        public static final String COLUMN_END_TIME          = "end_time";
+        public static final String COLUMN_LAST_RUN          = "last_run";
+        public static final String COLUMN_PERIOD            = "period";
+        public static final String COLUMN_TAG               = "tag"; //for any action-specific information
         public static final String COLUMN_ENABLED           = "is_enabled";
         public static final String COLUMN_NUM_OCCURRENCES   = "num_occurrences";
         public static final String COLUMN_EXECUTION_COUNT   = "execution_count";
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index fed08fb6..edda39ee 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -18,6 +18,7 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteStatement;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
@@ -53,9 +54,9 @@ public static ScheduledActionDbAdapter getInstance(){
      * @param scheduledAction {@link org.gnucash.android.model.ScheduledAction} to be added
      * @return Database row ID of the newly created/replaced instance
      */
-    public long addScheduledEvent(ScheduledAction scheduledAction){
+    public long addScheduledAction(ScheduledAction scheduledAction){
         ContentValues contentValues = getContentValues(scheduledAction);
-        contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, scheduledAction.getEventUID());
+        contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, scheduledAction.getActionUID());
         contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    scheduledAction.getPeriod());
         contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
         contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
@@ -71,13 +72,61 @@ public long addScheduledEvent(ScheduledAction scheduledAction){
     }
 
     /**
+     * Adds a multiple scheduled actions to the database in one transaction.
+     * @param scheduledActionList List of ScheduledActions
+     * @return Returns the number of rows inserted
+     */
+    public int bulkAddScheduledActions(List<ScheduledAction> scheduledActionList){
+        Log.d(TAG, "Bulk adding scheduled actions to the database");
+        int nRow = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + ScheduledActionEntry.TABLE_NAME + " ( "
+                    + ScheduledActionEntry.COLUMN_UID 	            + " , "
+                    + ScheduledActionEntry.COLUMN_ACTION_UID        + " , "
+                    + ScheduledActionEntry.COLUMN_TYPE              + " , "
+                    + ScheduledActionEntry.COLUMN_START_TIME        + " , "
+                    + ScheduledActionEntry.COLUMN_END_TIME          + " , "
+                    + ScheduledActionEntry.COLUMN_LAST_RUN 		    + " , "
+                    + ScheduledActionEntry.COLUMN_PERIOD 	        + " , "
+                    + ScheduledActionEntry.COLUMN_ENABLED           + " , "
+                    + ScheduledActionEntry.COLUMN_CREATED_AT        + " , "
+                    + ScheduledActionEntry.COLUMN_TAG               + " , "
+                    + ScheduledActionEntry.COLUMN_NUM_OCCURRENCES   + " , "
+                    + ScheduledActionEntry.COLUMN_EXECUTION_COUNT   + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");
+            for (ScheduledAction schedxAction:scheduledActionList) {
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1,  schedxAction.getUID());
+                replaceStatement.bindString(2,  schedxAction.getActionUID());
+                replaceStatement.bindString(3,  schedxAction.getActionType().name());
+                replaceStatement.bindLong(4,    schedxAction.getStartTime());
+                replaceStatement.bindLong(5,    schedxAction.getEndTime());
+                replaceStatement.bindLong(6,    schedxAction.getLastRun());
+                replaceStatement.bindLong(7,    schedxAction.getPeriod());
+                replaceStatement.bindLong(8,    schedxAction.isEnabled() ? 1 : 0);
+                replaceStatement.bindString(9,  schedxAction.getCreatedTimestamp().toString());
+                replaceStatement.bindString(10, schedxAction.getTag());
+                replaceStatement.bindString(11, Integer.toString(schedxAction.getNumberOfOccurences()));
+                replaceStatement.bindString(12, Integer.toString(schedxAction.getExecutionCount()));
+
+                replaceStatement.execute();
+                nRow ++;
+            }
+            mDb.setTransactionSuccessful();
+        }
+        finally {
+            mDb.endTransaction();
+        }
+        return nRow;
+    }
+    /**
      * Builds a {@link org.gnucash.android.model.ScheduledAction} instance from a row to cursor in the database.
      * The cursor should be already pointing to the right entry in the data set. It will not be modified in any way
      * @param cursor Cursor pointing to data set
      * @return ScheduledEvent object instance
      */
     private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
-        String eventUid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ACTION_UID));
+        String actionUid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ACTION_UID));
         long period     = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
         long startTime  = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_START_TIME));
         long endTime    = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_END_TIME));
@@ -93,7 +142,7 @@ private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
         event.setPeriod(period);
         event.setStartTime(startTime);
         event.setEndTime(endTime);
-        event.setEventUID(eventUid);
+        event.setActionUID(actionUid);
         event.setLastRun(lastRun);
         event.setTag(tag);
         event.setEnabled(enabled);
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index ae57cc1c..89ab4790 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -152,9 +152,6 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 + TransactionEntry.COLUMN_CREATED_AT    + " , "
                 + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?)");
             for (Transaction transaction : transactionList) {
-                if (transaction.isTemplate()) { //TODO: Properly schedule transactions
-                    scheduleTransaction(transaction);
-                }
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
                 replaceStatement.bindString(1,  transaction.getUID());
@@ -518,20 +515,6 @@ public int updateTransaction(ContentValues contentValues, String whereClause, St
     }
 
     /**
-     * Schedules <code>recurringTransaction</code> to be executed at specific intervals.
-     * The interval period is packaged within the transaction
-     * @param recurringTransaction Transaction which is to be recurring
-     */
-    public void scheduleTransaction(Transaction recurringTransaction) {
-        long recurrencePeriodMillis = System.currentTimeMillis(); //recurringTransaction.getRecurrencePeriod();
-        long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
-        long recurringTransactionId = addTransaction(recurringTransaction);
-
-
-        //TODO: Properly create ScheduledEvent
-    }
-
-    /**
      * Returns a transaction for the given transaction GUID
      * @param transactionUID GUID of the transaction
      * @return Retrieves a transaction from the database
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 2c7db1db..6aaf0627 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -26,6 +26,7 @@
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.ScheduledAction;
+import org.gnucash.android.model.TransactionType;
 import org.xmlpull.v1.XmlPullParserFactory;
 import org.xmlpull.v1.XmlSerializer;
 
@@ -70,7 +71,7 @@ private void exportSlots(XmlSerializer xmlSerializer,
                 slotKey.size() == 0 || slotType.size() != slotKey.size() || slotValue.size() != slotKey.size()) {
             return;
         }
-        xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+
         for (int i = 0; i < slotKey.size(); i++) {
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
@@ -82,7 +83,6 @@ private void exportSlots(XmlSerializer xmlSerializer,
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
         }
-        xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
     }
 
     private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
@@ -148,7 +148,10 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
             slotKey.add(GncXmlHelper.KEY_FAVORITE);
             slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
             slotValue.add(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_FAVORITE)) != 0));
+
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
             exportSlots(xmlSerializer, slotKey, slotType, slotValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
 
             // parent uid
             String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
@@ -263,7 +266,11 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                     slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
                     slotValue.add("false");
                 }
+
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SLOTS);
                 exportSlots(xmlSerializer, slotKey, slotType, slotValue);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SLOTS);
+
                 // splits start
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
             }
@@ -300,8 +307,38 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
             // account guid
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid")));
+            String splitAccountUID = cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid"));
+            xmlSerializer.text(splitAccountUID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+
+            //if we are exporting a template transaction, then we need to add some extra slots
+            if (exportTemplates){
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_SLOTS);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                xmlSerializer.text(GncXmlHelper.KEY_SCHEDX_ACTION); //FIXME: not all templates may be scheduled actions
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, "frame");
+
+                List<String> slotKeys = new ArrayList<>();
+                List<String> slotTypes = new ArrayList<>();
+                List<String> slotValues = new ArrayList<>();
+                slotKeys.add(GncXmlHelper.KEY_SPLIT_ACCOUNT);
+                slotTypes.add(GncXmlHelper.ATTR_VALUE_GUID);
+                slotValues.add(splitAccountUID);
+                TransactionType type = TransactionType.valueOf(trxType);
+                slotKeys.add(type == TransactionType.CREDIT ? GncXmlHelper.KEY_CREDIT_FORMULA : GncXmlHelper.KEY_DEBIT_FORMULA);
+                slotTypes.add(GncXmlHelper.ATTR_VALUE_STRING);
+                slotValues.add(GncXmlHelper.getNumberFormatForTemplateSplits().format(value.doubleValue()));
+
+                exportSlots(xmlSerializer, slotKeys, slotTypes, slotValues);
+
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_SLOTS);
+            }
+
             xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLIT);
         }
         if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
@@ -380,11 +417,14 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
                 xmlSerializer.text(tag);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_TAG);
             }
+
+            //TODO: possibly generate temporary template accounts to keep gnucash desktop happy
             //Ignoring GnuCash XML template account: <sx:templ-acct type="guid">2da76df09056540bb3a37e4a04547d82</sx:templ-acct>
 
             String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ACTION_UID));
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_TEMPL_ACTION);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, actionUID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(actionUID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_TEMPL_ACTION);
 
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_SCHEDULE);
@@ -395,7 +435,7 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_MULT);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
             long period = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
-            xmlSerializer.text(GncXmlHelper.getScheduledPeriodType(ScheduledAction.getPeriodType(period)));
+            xmlSerializer.text(ScheduledAction.getPeriodType(period).name());
             xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
 
             serializeDate(xmlSerializer, GncXmlHelper.TAG_RX_START, startTime);
@@ -471,9 +511,9 @@ public void generateExport(Writer writer) throws ExporterException{
             exportTransactions(xmlSerializer, false);
 
             //transaction templates
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTION);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS);
             exportTransactions(xmlSerializer, true);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTION);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS);
 
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_ROOT);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 059031b8..5e112c22 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 - 2015 Ngewi Fet <ngewif@gmail.com>
  * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -18,13 +18,13 @@
 package org.gnucash.android.export.xml;
 
 import org.gnucash.android.model.Money;
-import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.TransactionType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
 import java.math.BigDecimal;
+import java.text.NumberFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -45,7 +45,7 @@
     public static final String ATTR_VALUE_STRING    = "string";
     public static final String ATTR_VALUE_GUID      = "guid";
     public static final String ATTR_VALUE_BOOK      = "book";
-    public static final String TAG_GDATE = "gdate";
+    public static final String TAG_GDATE            = "gdate";
 
     /*
     Qualified GnuCash XML tag names
@@ -68,7 +68,7 @@
     public static final String TAG_SLOT_VALUE       = "slot:value";
     public static final String TAG_ACT_SLOTS        = "act:slots";
     public static final String TAG_SLOT             = "slot";
-    public static final String TAG_ACCT_DESCRIPTION = "act:description";
+    public static final String TAG_ACCT_DESCRIPTION = "act:description"; //TODO: Use this when we add descriptions to the database
 
     public static final String TAG_TRANSACTION      = "gnc:transaction";
     public static final String TAG_TRX_ID           = "trn:id";
@@ -80,7 +80,7 @@
     public static final String TAG_TRN_SPLITS       = "trn:splits";
     public static final String TAG_TRN_SPLIT        = "trn:split";
     public static final String TAG_TRN_SLOTS        = "trn:slots";
-    public static final String TAG_TEMPLATE_TRANSACTION = "gnc:template-transactions";
+    public static final String TAG_TEMPLATE_TRANSACTIONS = "gnc:template-transactions";
 
     public static final String TAG_SPLIT_ID         = "split:id";
     public static final String TAG_SPLIT_MEMO       = "split:memo";
@@ -88,6 +88,7 @@
     public static final String TAG_SPLIT_ACCOUNT    = "split:account";
     public static final String TAG_SPLIT_VALUE      = "split:value";
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
+    public static final String TAG_SPLIT_SLOTS      = "split:slots";
 
     //TODO: Remove this in the future when scheduled transactions are improved
     @Deprecated
@@ -127,6 +128,11 @@
     public static final String KEY_NOTES            = "notes";
     public static final String KEY_DEFAULT_TRANSFER_ACCOUNT = "default_transfer_account";
     public static final String KEY_EXPORTED         = "exported";
+    public static final String KEY_SCHEDX_ACTION = "sched-xaction";
+    public static final String KEY_SPLIT_ACCOUNT    = "key_account";
+    public static final String KEY_DEBIT_FORMULA    = "debit-formula";
+    public static final String KEY_CREDIT_FORMULA   = "credit-formula";
+
 
     /**
      * Formats dates for the GnuCash XML format
@@ -137,27 +143,6 @@ public static String formatDate(long milliseconds){
     }
 
     /**
-     * Converts the adjective describing the period type into a noun for the XML format
-     * @param periodType PeriodType from the scheduled action
-     * @return Period type as a noun
-     */
-    public static String getScheduledPeriodType(ScheduledAction.PeriodType periodType){
-        switch (periodType) {
-            case DAILY:
-                return "day";
-            case WEEKLY:
-                return "week";
-            case FORTNIGHTLY:
-                return "fortnight";
-            case MONTHLY:
-                return "month";
-            case YEARLY:
-                return "year";
-            default:
-                return "";
-        }
-    }
-    /**
      * Parses a date string formatted in the format "yyyy-MM-dd HH:mm:ss Z"
      * @param dateString String date representation
      * @return Time in milliseconds since epoch
@@ -193,23 +178,12 @@ public static BigDecimal parseMoney(String amountString){
     }
 
     /**
-     * Helper method for creating slot key-value pairs in the GnuCash XML structure.
-     * <p>This method is only a helper for creating slots whose values are of string type</p>
-     * @param doc {@link org.w3c.dom.Document} for creating nodes
-     * @param key Slot key as string
-     * @param value Slot value as String
-     * @return Element node containing the key-value pair
+     * Returns a {@link java.text.NumberFormat} for parsing or writing amounts in template splits
+     * @return NumberFormat object
      */
-    public static Element createSlot(Document doc, String key, String value, String valueType){
-        Element slotNode  = doc.createElement(TAG_SLOT);
-        Element slotKeyNode = doc.createElement(TAG_SLOT_KEY);
-        slotKeyNode.appendChild(doc.createTextNode(key));
-        Element slotValueNode = doc.createElement(TAG_SLOT_VALUE);
-        slotValueNode.setAttribute(ATTR_KEY_TYPE, valueType);
-        slotValueNode.appendChild(doc.createTextNode(value));
-        slotNode.appendChild(slotKeyNode);
-        slotNode.appendChild(slotValueNode);
-
-        return slotNode;
+    public static NumberFormat getNumberFormatForTemplateSplits(){
+        //TODO: Check if GnuCash desktop always using this formatting or if it is device locale specific
+        return NumberFormat.getNumberInstance(Locale.GERMANY);
     }
+
 }
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 9ffd5273..b96bbcb4 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2013 - 2015 Ngewi Fet <ngewif@gmail.com>
  * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -21,12 +21,14 @@
 import android.util.Log;
 
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
@@ -34,11 +36,15 @@
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
 
+import java.math.BigDecimal;
+import java.sql.Timestamp;
+import java.text.NumberFormat;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Stack;
 import java.util.regex.Pattern;
 
@@ -102,6 +108,16 @@
     String mIgnoreElement = null;
 
     /**
+     * {@link ScheduledAction} instance for each scheduled action parsed
+     */
+    ScheduledAction mScheduledAction;
+
+    /**
+     * List of scheduled actions to be bulk inserted
+     */
+    List<ScheduledAction> mScheduledActionsList;
+
+    /**
      * Showing whether we are in bulk import mode
      */
     boolean mBulk = false;
@@ -111,14 +127,36 @@
     boolean mInFavoriteSlot     = false;
     boolean mISO4217Currency    = false;
     boolean mIsDatePosted       = false;
+    boolean mIsDateEntered      = false;
     boolean mIsNote             = false;
     boolean mInDefaultTransferAccount = false;
     boolean mInExported         = false;
+    boolean mInTemplates        = false;
+    boolean mInSplitAccountSlot = false;
+    boolean mInCreditFormulaSlot = false;
+    boolean mInDebitFormulaSlot = false;
+    boolean mIsScheduledStart   = false;
+    boolean mIsScheduledEnd     = false;
+    boolean mIsLastRun          = false;
+
+    /**
+     * Multiplier for the recurrence period type. e.g. period type of week and multiplier of 2 means bi-weekly
+     */
+    int mRecurrenceMultiplier   = 1;
+
+    /**
+     * Used for parsing old backup files where recurrence was saved inside the transaction
+     * @deprecated Use the new scheduled action elements instead
+     */
+    @Deprecated
+    private long mRecurrencePeriod = 0;
 
     private TransactionsDbAdapter mTransactionsDbAdapter;
 
+    private ScheduledActionDbAdapter mScheduledActionsDbAdapter;
+
     public GncXmlHandler() {
-        init(false, null);
+        init(true, null);
     }
 
     public GncXmlHandler(boolean bulk) {
@@ -133,15 +171,18 @@ private void init(boolean bulk, SQLiteDatabase db) {
         if (db == null) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
+            mScheduledActionsDbAdapter = ScheduledActionDbAdapter.getInstance();
         } else {
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
+            mScheduledActionsDbAdapter = new ScheduledActionDbAdapter(db);
         }
         mContent = new StringBuilder();
         mBulk = bulk;
         if (bulk) {
-            mAccountList = new ArrayList<Account>();
-            mTransactionList = new ArrayList<Transaction>();
+            mAccountList = new ArrayList<>();
+            mTransactionList = new ArrayList<>();
+            mScheduledActionsList = new ArrayList<>();
         }
     }
 
@@ -161,8 +202,24 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_SPLIT)){
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_POSTED)){
             mIsDatePosted = true;
         }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TEMPLATE_TRANSACTION)) {
-            mIgnoreElement = GncXmlHelper.TAG_TEMPLATE_TRANSACTION;
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_ENTERED)){
+            mIsDateEntered = true;
+        }
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS)) {
+            mInTemplates = true;
+        }
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SCHEDULED_ACTION)){
+            //default to transaction type, will be changed during parsing
+            mScheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
+        }
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_START)){
+            mIsScheduledStart = true;
+        }
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_END)){
+            mIsScheduledEnd = true;
+        }
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_LAST)){
+            mIsLastRun = true;
         }
     }
 
@@ -209,16 +266,17 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_PARENT_UID)){
             mAccount.setParentUID(characterString);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
-            if (mBulk) {
-                mAccountList.add(mAccount);
-            }
-            else {
-                Log.d(LOG_TAG, "Saving account...");
-                mAccountsDbAdapter.addAccount(mAccount);
+            if (!mInTemplates) { //we ignore template accounts, we have no use for them
+                if (mBulk) {
+                    mAccountList.add(mAccount);
+                } else {
+                    Log.d(LOG_TAG, "Saving account...");
+                    mAccountsDbAdapter.addAccount(mAccount);
+                }
+                mAccount = null;
+                //reset ISO 4217 flag for next account
+                mISO4217Currency = false;
             }
-            mAccount = null;
-            //reset ISO 4217 flag for next account
-            mISO4217Currency = false;
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
             if (characterString.equals(GncXmlHelper.KEY_PLACEHOLDER)){
@@ -238,6 +296,12 @@ else if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
             }
             else if (characterString.equals(GncXmlHelper.KEY_EXPORTED)){
                 mInExported = true;
+            } else if (characterString.equals(GncXmlHelper.KEY_SPLIT_ACCOUNT)){
+                mInSplitAccountSlot = true;
+            } else if (characterString.equals(GncXmlHelper.KEY_CREDIT_FORMULA)){
+                mInCreditFormulaSlot = true;
+            } else if (characterString.equals(GncXmlHelper.KEY_DEBIT_FORMULA)){
+                mInDebitFormulaSlot = true;
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
@@ -285,6 +349,33 @@ else if (mInExported){
                     mInExported = false;
                 }
             }
+            else if (mInTemplates && mInSplitAccountSlot){
+                mSplit.setAccountUID(characterString);
+            }
+            else if (mInTemplates && mInCreditFormulaSlot){
+                NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.GERMANY);
+                try {
+                    Number number = numberFormat.parse(characterString);
+                    Money amount = new Money(new BigDecimal(number.doubleValue()), mTransaction.getCurrency());
+                    mSplit.setAmount(amount.absolute());
+                    mSplit.setType(TransactionType.CREDIT);
+                } catch (ParseException e) {
+                    Log.e(LOG_TAG, "Error parsing template split amount. " + e.getMessage());
+                    e.printStackTrace();
+                }
+            }
+            else if (mInTemplates && mInDebitFormulaSlot){
+                NumberFormat numberFormat = GncXmlHelper.getNumberFormatForTemplateSplits();
+                try {
+                    Number number = numberFormat.parse(characterString);
+                    Money amount = new Money(new BigDecimal(number.doubleValue()), mTransaction.getCurrency());
+                    mSplit.setAmount(amount.absolute());
+                    mSplit.setType(TransactionType.DEBIT);
+                } catch (ParseException e) {
+                    Log.e(LOG_TAG, "Error parsing template split amount. " + e.getMessage());
+                    e.printStackTrace();
+                }
+            }
         }
 
 
@@ -296,19 +387,35 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_DESCRIPTION)){
             mTransaction.setDescription(characterString);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
-            try { //TODO: Use the created_at and modified_at dates in the xml
+            try {
                 if (mIsDatePosted && mTransaction != null) {
                     mTransaction.setTime(GncXmlHelper.parseDate(characterString));
                     mIsDatePosted = false;
                 }
+                if (mIsDateEntered && mTransaction != null){
+                    Timestamp timestamp = new Timestamp(GncXmlHelper.parseDate(characterString));
+                    mTransaction.setCreatedTimestamp(timestamp);
+                    mIsDateEntered = false;
+                }
+                if (mIsScheduledStart){
+                    mScheduledAction.setStartTime(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                }
+
+                if (mIsScheduledEnd){
+                    mScheduledAction.setEndTime(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                }
+
+                if (mIsLastRun){
+                    mScheduledAction.setLastRun(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                }
             } catch (ParseException e) {
                 e.printStackTrace();
                 throw new SAXException("Unable to parse transaction time", e);
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_RECURRENCE_PERIOD)){
-            mTransaction.setTemplate(Long.parseLong(characterString) > 0);
-            //TODO: Remove this and properly parse recurrence events
+            mRecurrencePeriod = Long.parseLong(characterString);
+            mTransaction.setTemplate(mRecurrencePeriod > 0);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ID)){
             mSplit.setUID(characterString);
@@ -328,18 +435,56 @@ else if (qualifiedName.equals(GncXmlHelper.TAG_TRN_SPLIT)){
             mTransaction.addSplit(mSplit);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
+            mTransaction.setTemplate(mInTemplates);
             if (mBulk) {
                 mTransactionList.add(mTransaction);
-            }
-            else {
-                if (mTransaction.isTemplate()) { //TODO: Fix this when scheduled actions are expanded
-                    mTransactionsDbAdapter.scheduleTransaction(mTransaction);
+            } else {
+                if (mRecurrencePeriod > 0) { //if we find an old format recurrence period, parse it
+                    mTransaction.setTemplate(true);
                     mTransactionsDbAdapter.addTransaction(mTransaction);
+                    ScheduledAction scheduledAction = ScheduledAction.parseScheduledAction(mTransaction, mRecurrencePeriod);
+                    mScheduledActionsDbAdapter.addScheduledAction(scheduledAction);
                 } else {
                     mTransactionsDbAdapter.addTransaction(mTransaction);
                 }
             }
+            mRecurrencePeriod = 0;
             mTransaction = null;
+        } else if (qualifiedName.equals(GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS)){
+            mInTemplates = false;
+        }
+
+        // ========================= PROCESSING SCHEDULED ACTIONS ==================================
+        else if (qualifiedName.equals(GncXmlHelper.TAG_SX_ID)){
+            mScheduledAction.setUID(characterString);
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_SX_NAME)){
+            ScheduledAction.ActionType type = ScheduledAction.ActionType.valueOf(characterString);
+            mScheduledAction.setActionType(type);
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_SX_ENABLED)){
+            mScheduledAction.setEnabled(characterString.equalsIgnoreCase("y"));
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_SX_NUM_OCCUR)){
+            mScheduledAction.setNumberOfOccurences(Integer.parseInt(characterString));
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_RX_MULT)){
+            mRecurrenceMultiplier = Integer.parseInt(characterString);
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_RX_PERIOD_TYPE)){
+            ScheduledAction.PeriodType periodType = ScheduledAction.PeriodType.valueOf(characterString.toUpperCase());
+            periodType.setMultiplier(mRecurrenceMultiplier);
+            mScheduledAction.setPeriod(periodType);
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_SX_TEMPL_ACTION)){
+            mScheduledAction.setActionUID(characterString);
+        }
+        else if (qualifiedName.equals(GncXmlHelper.TAG_SCHEDULED_ACTION)){
+            if (mBulk){
+                mScheduledActionsList.add(mScheduledAction);
+            } else {
+                mScheduledActionsDbAdapter.addScheduledAction(mScheduledAction);
+            }
         }
 
         //reset the accumulated characters
@@ -406,6 +551,8 @@ public void endDocument() throws SAXException {
             Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
             long nTransactions = mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
             Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
+            int nSchedActions = mScheduledActionsDbAdapter.bulkAddScheduledActions(mScheduledActionsList);
+            Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
             long endTime = System.nanoTime();
             Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
         }
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 03de9ad8..12747b1f 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -38,7 +38,29 @@
      */
     public enum ActionType {TRANSACTION, EXPORT}
 
-    public enum PeriodType {DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY}
+    public enum PeriodType {
+        DAY, WEEK, MONTH, YEAR;
+
+        int mMultiplier = 1; //multiplier for the period type
+
+        /**
+         * Sets the multiplier for this period type
+         * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
+         * @param multiplier Multiplier for this period type
+         */
+        public void setMultiplier(int multiplier){
+            mMultiplier = multiplier;
+        }
+
+        /**
+         * Returns the multiplier for this period type. The default multiplier is 1.
+         * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
+         * @return  Multiplier for this period type
+         */
+        public int getMultiplier(){
+            return mMultiplier;
+        }
+    }
 
     /**
      * Next scheduled run of Event
@@ -49,7 +71,7 @@
      * Unique ID of the template from which the recurring event will be executed.
      * For example, transaction UID
      */
-    private String mEventUID;
+    private String mActionUID;
 
     /**
      * Flag indicating if this event is enabled or not
@@ -86,12 +108,12 @@ public void setActionType(ActionType actionType) {
         this.mActionType = actionType;
     }
 
-    public String getEventUID() {
-        return mEventUID;
+    public String getActionUID() {
+        return mActionUID;
     }
 
-    public void setEventUID(String eventUID) {
-        this.mEventUID = eventUID;
+    public void setActionUID(String actionUID) {
+        this.mActionUID = actionUID;
     }
 
     public long getLastRun() {
@@ -110,28 +132,74 @@ public void setPeriod(long period) {
         this.mPeriod = period;
     }
 
-    public static PeriodType getPeriodType(long period){
-        int result = (int) (period/RecurrenceParser.DAY_MILLIS);
-        if (result == 0)
-            return PeriodType.DAILY;
+    /**
+     * Sets the period given the period type.
+     * The {@link org.gnucash.android.model.ScheduledAction.PeriodType} should have the multiplier set,
+     * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
+     * @param periodType Type of period
+     */
+    public void setPeriod(PeriodType periodType){
+        int multiplier = periodType.getMultiplier();
+        switch (periodType){
+            case DAY:
+                mPeriod = RecurrenceParser.DAY_MILLIS * multiplier;
+                break;
+            case WEEK:
+                mPeriod = RecurrenceParser.WEEK_MILLIS * multiplier;
+                break;
+            case MONTH:
+                mPeriod = RecurrenceParser.MONTH_MILLIS * multiplier;
+                break;
+            case YEAR:
+                mPeriod = RecurrenceParser.YEAR_MILLIS * multiplier;
+                break;
+        }
+    }
 
-        result = (int) (period/RecurrenceParser.WEEK_MILLIS);
-        if (result == 0)
-            return PeriodType.WEEKLY;
+    /**
+     * Returns the period type for this scheduled action
+     * @return Period type of the action
+     */
+    public PeriodType getPeriodType(){
+        return getPeriodType(mPeriod);
+    }
 
-        result = (int) (period/(2*RecurrenceParser.WEEK_MILLIS));
-        if (result == 0)
-            return PeriodType.FORTNIGHTLY;
+    /**
+     * Computes the {@link org.gnucash.android.model.ScheduledAction.PeriodType} for a given {@code period}
+     * @param period Period in milliseconds since Epoch
+     * @return PeriodType corresponding to the period
+     */
+    public static PeriodType getPeriodType(long period){
+        PeriodType periodType = PeriodType.DAY;
+        int result = (int) (period/RecurrenceParser.YEAR_MILLIS);
+        if (result > 0) {
+            periodType = PeriodType.YEAR;
+            periodType.setMultiplier(result);
+            return periodType;
+        }
 
         result = (int) (period/RecurrenceParser.MONTH_MILLIS);
-        if (result == 0)
-            return PeriodType.MONTHLY;
+        if (result > 0) {
+            periodType = PeriodType.MONTH;
+            periodType.setMultiplier(result);
+            return periodType;
+        }
+
+        result = (int) (period/RecurrenceParser.WEEK_MILLIS);
+        if (result > 0) {
+            periodType = PeriodType.WEEK;
+            periodType.setMultiplier(result);
+            return periodType;
+        }
 
-        result = (int) (period/RecurrenceParser.YEAR_MILLIS);
-        if (result == 0)
-            return PeriodType.YEARLY;
+        result = (int) (period/RecurrenceParser.DAY_MILLIS);
+        if (result > 0) {
+            periodType = PeriodType.DAY;
+            periodType.setMultiplier(result);
+            return periodType;
+        }
 
-        return PeriodType.DAILY;
+        return periodType;
     }
 
     public long getStartTime() {
@@ -155,6 +223,7 @@ public long getEndTime() {
     public long getApproxEndTime(){
         return mStartDate + (mPeriod * mNumberOfOccurences);
     }
+
     public void setEndTime(long endDate) {
         this.mEndDate = endDate;
     }
@@ -224,6 +293,13 @@ public String getRepeatString(){
         return repeatString;
     }
 
+    public static ScheduledAction parseScheduledAction(Transaction transaction, long period){
+        ScheduledAction scheduledAction = new ScheduledAction(ActionType.TRANSACTION);
+        scheduledAction.mActionUID = transaction.getUID();
+        scheduledAction.mPeriod = period;
+        return scheduledAction;
+    }
+
     @Override
     public String toString() {
 
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 37af77a4..06ac655f 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -88,7 +88,7 @@ protected void onHandleIntent(Intent intent) {
     private void executeScheduledEvent(ScheduledAction scheduledAction){
         switch (scheduledAction.getActionType()){
             case TRANSACTION:
-                String eventUID = scheduledAction.getEventUID();
+                String eventUID = scheduledAction.getActionUID();
                 TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
                 Transaction trxnTemplate = transactionsDbAdapter.getTransaction(eventUID);
                 Transaction recurringTrxn = new Transaction(trxnTemplate, true);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index f96a66cc..0b6b2e4a 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -722,9 +722,9 @@ private void scheduleRecurringTransaction(String transactionUID) {
 
         ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
         for (ScheduledAction event : events) {
-            event.setEventUID(transactionUID);
+            event.setActionUID(transactionUID);
             event.setLastRun(System.currentTimeMillis());
-            scheduledActionDbAdapter.addScheduledEvent(event);
+            scheduledActionDbAdapter.addScheduledAction(event);
 
             Log.i("TransactionFormFragment", event.toString());
         }

From 03d43a537d7bb06eb57a2c9163fae48a0f70705c Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 15:09:48 +0100
Subject: [PATCH 20/52] Bulk import is now the default when importing accounts
 from XML.

Removed option to use non-bulk mode
---
 .../gnucash/android/importer/GncXmlHandler.java    | 162 +++++++++------------
 .../gnucash/android/importer/GncXmlImporter.java   |   4 +-
 2 files changed, 74 insertions(+), 92 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index b96bbcb4..518a8e9f 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -117,10 +117,6 @@
      */
     List<ScheduledAction> mScheduledActionsList;
 
-    /**
-     * Showing whether we are in bulk import mode
-     */
-    boolean mBulk = false;
 
     boolean mInColorSlot        = false;
     boolean mInPlaceHolderSlot  = false;
@@ -155,19 +151,23 @@
 
     private ScheduledActionDbAdapter mScheduledActionsDbAdapter;
 
+    /**
+     * Creates a handler for handling XML stream events when parsing the XML backup file
+     */
     public GncXmlHandler() {
-        init(true, null);
-    }
-
-    public GncXmlHandler(boolean bulk) {
-        init(bulk, null);
+        init(null);
     }
 
-    public GncXmlHandler(boolean bulk, SQLiteDatabase db) {
-        init(bulk, db);
+    /**
+     * Overloaded constructor.
+     * Useful when reading XML into an already open database connection e.g. during migration
+     * @param db SQLite database object
+     */
+    public GncXmlHandler(SQLiteDatabase db) {
+        init(db);
     }
 
-    private void init(boolean bulk, SQLiteDatabase db) {
+    private void init(SQLiteDatabase db) {
         if (db == null) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
@@ -178,12 +178,10 @@ private void init(boolean bulk, SQLiteDatabase db) {
             mScheduledActionsDbAdapter = new ScheduledActionDbAdapter(db);
         }
         mContent = new StringBuilder();
-        mBulk = bulk;
-        if (bulk) {
-            mAccountList = new ArrayList<>();
-            mTransactionList = new ArrayList<>();
-            mScheduledActionsList = new ArrayList<>();
-        }
+
+        mAccountList = new ArrayList<>();
+        mTransactionList = new ArrayList<>();
+        mScheduledActionsList = new ArrayList<>();
     }
 
     @Override
@@ -267,12 +265,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_PARENT_UID)){
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
             if (!mInTemplates) { //we ignore template accounts, we have no use for them
-                if (mBulk) {
-                    mAccountList.add(mAccount);
-                } else {
-                    Log.d(LOG_TAG, "Saving account...");
-                    mAccountsDbAdapter.addAccount(mAccount);
-                }
+                mAccountList.add(mAccount);
                 mAccount = null;
                 //reset ISO 4217 flag for next account
                 mISO4217Currency = false;
@@ -436,17 +429,11 @@ else if (qualifiedName.equals(GncXmlHelper.TAG_TRN_SPLIT)){
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
             mTransaction.setTemplate(mInTemplates);
-            if (mBulk) {
-                mTransactionList.add(mTransaction);
-            } else {
-                if (mRecurrencePeriod > 0) { //if we find an old format recurrence period, parse it
-                    mTransaction.setTemplate(true);
-                    mTransactionsDbAdapter.addTransaction(mTransaction);
-                    ScheduledAction scheduledAction = ScheduledAction.parseScheduledAction(mTransaction, mRecurrencePeriod);
-                    mScheduledActionsDbAdapter.addScheduledAction(scheduledAction);
-                } else {
-                    mTransactionsDbAdapter.addTransaction(mTransaction);
-                }
+            mTransactionList.add(mTransaction);
+            if (mRecurrencePeriod > 0) { //if we find an old format recurrence period, parse it
+                mTransaction.setTemplate(true);
+                ScheduledAction scheduledAction = ScheduledAction.parseScheduledAction(mTransaction, mRecurrencePeriod);
+                mScheduledActionsList.add(scheduledAction);
             }
             mRecurrencePeriod = 0;
             mTransaction = null;
@@ -480,11 +467,7 @@ else if (qualifiedName.equals(GncXmlHelper.TAG_SX_TEMPL_ACTION)){
             mScheduledAction.setActionUID(characterString);
         }
         else if (qualifiedName.equals(GncXmlHelper.TAG_SCHEDULED_ACTION)){
-            if (mBulk){
-                mScheduledActionsList.add(mScheduledAction);
-            } else {
-                mScheduledActionsDbAdapter.addScheduledAction(mScheduledAction);
-            }
+            mScheduledActionsList.add(mScheduledAction);
         }
 
         //reset the accumulated characters
@@ -499,62 +482,61 @@ public void characters(char[] chars, int start, int length) throws SAXException
     @Override
     public void endDocument() throws SAXException {
         super.endDocument();
-        if (mBulk) {
-            HashMap<String, Account> map = new HashMap<String, Account>(mAccountList.size());
-            HashMap<String, String> mapFullName = new HashMap<String, String>(mAccountList.size());
-            for(Account account:mAccountList) {
-                map.put(account.getUID(), account);
-                mapFullName.put(account.getUID(), null);
+        HashMap<String, Account> map = new HashMap<String, Account>(mAccountList.size());
+        HashMap<String, String> mapFullName = new HashMap<String, String>(mAccountList.size());
+        for(Account account:mAccountList) {
+            map.put(account.getUID(), account);
+            mapFullName.put(account.getUID(), null);
+        }
+        java.util.Stack<Account> stack = new Stack<Account>();
+        for (Account account:mAccountList){
+            if (mapFullName.get(account.getUID()) != null) {
+                continue;
             }
-            java.util.Stack<Account> stack = new Stack<Account>();
-            for (Account account:mAccountList){
-                if (mapFullName.get(account.getUID()) != null) {
+            stack.push(account);
+            String parentAccountFullName;
+            while (!stack.isEmpty()) {
+                Account acc = stack.peek();
+                if (acc.getAccountType() == AccountType.ROOT) {
+                    // append blank to Root Account, ensure it always sorts first
+                    mapFullName.put(acc.getUID(), " " + acc.getName());
+                    stack.pop();
                     continue;
                 }
-                stack.push(account);
-                String parentAccountFullName;
-                while (!stack.isEmpty()) {
-                    Account acc = stack.peek();
-                    if (acc.getAccountType() == AccountType.ROOT) {
-                        // append blank to Root Account, ensure it always sorts first
-                        mapFullName.put(acc.getUID(), " " + acc.getName());
-                        stack.pop();
-                        continue;
-                    }
-                    String parentUID = acc.getParentUID();
-                    Account parentAccount = map.get(parentUID);
-                    // In accounts tree that are not imported, top level ROOT account
-                    // does not exist, which will make all top level accounts have a
-                    // null parent
-                    if (parentAccount == null || parentAccount.getAccountType() == AccountType.ROOT) {
-                        // top level account, full name is the same as its name
-                        mapFullName.put(acc.getUID(), acc.getName());
-                        stack.pop();
-                        continue;
-                    }
-                    parentAccountFullName = mapFullName.get(parentUID);
-                    if (parentAccountFullName == null) {
-                        // non-top-level account, parent full name still unknown
-                        stack.push(parentAccount);
-                        continue;
-                    }
-                    mapFullName.put(acc.getUID(), parentAccountFullName +
-                            AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
+                String parentUID = acc.getParentUID();
+                Account parentAccount = map.get(parentUID);
+                // In accounts tree that are not imported, top level ROOT account
+                // does not exist, which will make all top level accounts have a
+                // null parent
+                if (parentAccount == null || parentAccount.getAccountType() == AccountType.ROOT) {
+                    // top level account, full name is the same as its name
+                    mapFullName.put(acc.getUID(), acc.getName());
                     stack.pop();
+                    continue;
                 }
+                parentAccountFullName = mapFullName.get(parentUID);
+                if (parentAccountFullName == null) {
+                    // non-top-level account, parent full name still unknown
+                    stack.push(parentAccount);
+                    continue;
+                }
+                mapFullName.put(acc.getUID(), parentAccountFullName +
+                        AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
+                stack.pop();
             }
-            for (Account account:mAccountList){
-                account.setFullName(mapFullName.get(account.getUID()));
-            }
-            long startTime = System.nanoTime();
-            long nAccounts = mAccountsDbAdapter.bulkAddAccounts(mAccountList);
-            Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
-            long nTransactions = mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
-            Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
-            int nSchedActions = mScheduledActionsDbAdapter.bulkAddScheduledActions(mScheduledActionsList);
-            Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
-            long endTime = System.nanoTime();
-            Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
         }
+        for (Account account:mAccountList){
+            account.setFullName(mapFullName.get(account.getUID()));
+        }
+        long startTime = System.nanoTime();
+        long nAccounts = mAccountsDbAdapter.bulkAddAccounts(mAccountList);
+        Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
+        long nTransactions = mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
+        Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
+        int nSchedActions = mScheduledActionsDbAdapter.bulkAddScheduledActions(mScheduledActionsList);
+        Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
+        long endTime = System.nanoTime();
+        Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
+
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java b/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java
index 588e3888..fbf2ce6b 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlImporter.java
@@ -57,7 +57,7 @@ public static void parse(SQLiteDatabase db, InputStream gncXmlInputStream) throw
 
         /** Create handler to handle XML Tags ( extends DefaultHandler ) */
 
-        GncXmlHandler handler = new GncXmlHandler(false, db);
+        GncXmlHandler handler = new GncXmlHandler(db);
 
         xr.setContentHandler(handler);
         xr.parse(new InputSource(bos));
@@ -85,7 +85,7 @@ public static void parse(Context context, InputStream gncXmlInputStream) throws
 
         //TODO: Set an error handler which can log errors
 
-        GncXmlHandler handler = new GncXmlHandler(true);
+        GncXmlHandler handler = new GncXmlHandler();
         xr.setContentHandler(handler);
         long startTime = System.nanoTime();
         xr.parse(new InputSource(bos));

From 9332dd621e16fae516a983cc72307924fd05371d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 15:27:34 +0100
Subject: [PATCH 21/52] Fixed bug in parsing scheduled actions from xml

Code refactoring: make use of switch(string) and diamond operator from Java 1.7
---
 ...ExporterAsyncTask.java => ExportAsyncTask.java} |   4 +-
 .../android/export/ExportDialogFragment.java       |   2 +-
 .../org/gnucash/android/export/ExportParams.java   |   2 +-
 .../gnucash/android/importer/GncXmlHandler.java    | 137 ++++++++++++---------
 .../gnucash/android/service/SchedulerService.java  |   4 +-
 5 files changed, 82 insertions(+), 67 deletions(-)
 rename app/src/main/java/org/gnucash/android/export/{ExporterAsyncTask.java => ExportAsyncTask.java} (98%)

diff --git a/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
similarity index 98%
rename from app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
rename to app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 6e4ddc7b..2b268da0 100644
--- a/app/src/main/java/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -59,7 +59,7 @@
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class ExporterAsyncTask extends AsyncTask<ExportParams, Void, Boolean> {
+public class ExportAsyncTask extends AsyncTask<ExportParams, Void, Boolean> {
     /**
      * App context
      */
@@ -77,7 +77,7 @@
      */
     private ExportParams mExportParams;
 
-    public ExporterAsyncTask(Context context){
+    public ExportAsyncTask(Context context){
         this.mContext = context;
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java b/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
index 422005e7..60acebad 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportDialogFragment.java
@@ -107,7 +107,7 @@ public void onClick(View v) {
             dismiss();
 
             Log.i(TAG, "Commencing async export of transactions");
-            new ExporterAsyncTask(getActivity()).execute(exportParameters);
+            new ExportAsyncTask(getActivity()).execute(exportParameters);
 		}
 		
 	}
diff --git a/app/src/main/java/org/gnucash/android/export/ExportParams.java b/app/src/main/java/org/gnucash/android/export/ExportParams.java
index 2aeef6ee..3aed8df6 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportParams.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportParams.java
@@ -21,7 +21,7 @@
  * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
  * actually performs the export.
  * @see org.gnucash.android.export.ExportDialogFragment
- * @see ExporterAsyncTask
+ * @see ExportAsyncTask
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 518a8e9f..84039a9b 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -141,7 +141,8 @@
     int mRecurrenceMultiplier   = 1;
 
     /**
-     * Used for parsing old backup files where recurrence was saved inside the transaction
+     * Used for parsing old backup files where recurrence was saved inside the transaction.
+     * Newer backup files will not require this
      * @deprecated Use the new scheduled action elements instead
      */
     @Deprecated
@@ -187,37 +188,39 @@ private void init(SQLiteDatabase db) {
     @Override
     public void startElement(String uri, String localName,
                              String qualifiedName, Attributes attributes) throws SAXException {
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)) {
-            mAccount = new Account(""); // dummy name, will be replaced when we find name tag
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
-            mTransaction = new Transaction(""); // dummy name will be replaced
-            mTransaction.setExported(true);     // default to exported when import transactions
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_SPLIT)){
-            mSplit = new Split(Money.getZeroInstance(),"");
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_POSTED)){
-            mIsDatePosted = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_ENTERED)){
-            mIsDateEntered = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS)) {
-            mInTemplates = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SCHEDULED_ACTION)){
-            //default to transaction type, will be changed during parsing
-            mScheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_START)){
-            mIsScheduledStart = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_END)){
-            mIsScheduledEnd = true;
-        }
-        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SX_LAST)){
-            mIsLastRun = true;
+        switch (qualifiedName.toLowerCase()){
+            case GncXmlHelper.TAG_ACCOUNT:
+                mAccount = new Account(""); // dummy name, will be replaced when we find name tag
+                break;
+            case GncXmlHelper.TAG_TRANSACTION:
+                mTransaction = new Transaction(""); // dummy name will be replaced
+                mTransaction.setExported(true);     // default to exported when import transactions
+                break;
+            case GncXmlHelper.TAG_TRN_SPLIT:
+                mSplit = new Split(Money.getZeroInstance(),"");
+                break;
+            case GncXmlHelper.TAG_DATE_POSTED:
+                mIsDatePosted = true;
+                break;
+            case GncXmlHelper.TAG_DATE_ENTERED:
+                mIsDateEntered = true;
+                break;
+            case GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS:
+                mInTemplates = true;
+                break;
+            case GncXmlHelper.TAG_SCHEDULED_ACTION:
+                //default to transaction type, will be changed during parsing
+                mScheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
+                break;
+            case GncXmlHelper.TAG_SX_START:
+                mIsScheduledStart = true;
+                break;
+            case GncXmlHelper.TAG_SX_END:
+                mIsScheduledEnd = true;
+                break;
+            case GncXmlHelper.TAG_SX_LAST:
+                mIsLastRun = true;
+                break;
         }
     }
 
@@ -272,29 +275,34 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
-            if (characterString.equals(GncXmlHelper.KEY_PLACEHOLDER)){
-                mInPlaceHolderSlot = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_COLOR)){
-                mInColorSlot = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_FAVORITE)){
-                mInFavoriteSlot = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_NOTES)){
-                mIsNote = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
-                mInDefaultTransferAccount = true;
-            }
-            else if (characterString.equals(GncXmlHelper.KEY_EXPORTED)){
-                mInExported = true;
-            } else if (characterString.equals(GncXmlHelper.KEY_SPLIT_ACCOUNT)){
-                mInSplitAccountSlot = true;
-            } else if (characterString.equals(GncXmlHelper.KEY_CREDIT_FORMULA)){
-                mInCreditFormulaSlot = true;
-            } else if (characterString.equals(GncXmlHelper.KEY_DEBIT_FORMULA)){
-                mInDebitFormulaSlot = true;
+            switch (characterString) {
+                case GncXmlHelper.KEY_PLACEHOLDER:
+                    mInPlaceHolderSlot = true;
+                    break;
+                case GncXmlHelper.KEY_COLOR:
+                    mInColorSlot = true;
+                    break;
+                case GncXmlHelper.KEY_FAVORITE:
+                    mInFavoriteSlot = true;
+                    break;
+                case GncXmlHelper.KEY_NOTES:
+                    mIsNote = true;
+                    break;
+                case GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT:
+                    mInDefaultTransferAccount = true;
+                    break;
+                case GncXmlHelper.KEY_EXPORTED:
+                    mInExported = true;
+                    break;
+                case GncXmlHelper.KEY_SPLIT_ACCOUNT:
+                    mInSplitAccountSlot = true;
+                    break;
+                case GncXmlHelper.KEY_CREDIT_FORMULA:
+                    mInCreditFormulaSlot = true;
+                    break;
+                case GncXmlHelper.KEY_DEBIT_FORMULA:
+                    mInDebitFormulaSlot = true;
+                    break;
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
@@ -355,6 +363,8 @@ else if (mInTemplates && mInCreditFormulaSlot){
                 } catch (ParseException e) {
                     Log.e(LOG_TAG, "Error parsing template split amount. " + e.getMessage());
                     e.printStackTrace();
+                } finally {
+                    mInCreditFormulaSlot = false;
                 }
             }
             else if (mInTemplates && mInDebitFormulaSlot){
@@ -367,6 +377,8 @@ else if (mInTemplates && mInDebitFormulaSlot){
                 } catch (ParseException e) {
                     Log.e(LOG_TAG, "Error parsing template split amount. " + e.getMessage());
                     e.printStackTrace();
+                } finally {
+                    mInDebitFormulaSlot = false;
                 }
             }
         }
@@ -390,16 +402,19 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
                     mTransaction.setCreatedTimestamp(timestamp);
                     mIsDateEntered = false;
                 }
-                if (mIsScheduledStart){
+                if (mIsScheduledStart && mScheduledAction != null){
                     mScheduledAction.setStartTime(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                    mIsScheduledStart = false;
                 }
 
-                if (mIsScheduledEnd){
+                if (mIsScheduledEnd && mScheduledAction != null){
                     mScheduledAction.setEndTime(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                    mIsScheduledEnd = false;
                 }
 
-                if (mIsLastRun){
+                if (mIsLastRun && mScheduledAction != null){
                     mScheduledAction.setLastRun(GncXmlHelper.DATE_FORMATTER.parse(characterString).getTime());
+                    mIsLastRun = false;
                 }
             } catch (ParseException e) {
                 e.printStackTrace();
@@ -482,13 +497,13 @@ public void characters(char[] chars, int start, int length) throws SAXException
     @Override
     public void endDocument() throws SAXException {
         super.endDocument();
-        HashMap<String, Account> map = new HashMap<String, Account>(mAccountList.size());
-        HashMap<String, String> mapFullName = new HashMap<String, String>(mAccountList.size());
+        HashMap<String, Account> map = new HashMap<>(mAccountList.size());
+        HashMap<String, String> mapFullName = new HashMap<>(mAccountList.size());
         for(Account account:mAccountList) {
             map.put(account.getUID(), account);
             mapFullName.put(account.getUID(), null);
         }
-        java.util.Stack<Account> stack = new Stack<Account>();
+        java.util.Stack<Account> stack = new Stack<>();
         for (Account account:mAccountList){
             if (mapFullName.get(account.getUID()) != null) {
                 continue;
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 06ac655f..aa00989c 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -26,8 +26,8 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ExportAsyncTask;
 import org.gnucash.android.export.ExportParams;
-import org.gnucash.android.export.ExporterAsyncTask;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
 
@@ -100,7 +100,7 @@ private void executeScheduledEvent(ScheduledAction scheduledAction){
             case EXPORT:
                 ExportParams params = ExportParams.parseCsv(scheduledAction.getTag());
                 try {
-                    new ExporterAsyncTask(GnuCashApplication.getAppContext()).execute(params).get();
+                    new ExportAsyncTask(GnuCashApplication.getAppContext()).execute(params).get();
                 } catch (InterruptedException e) {
                     //TODO: Create special log for scheduler service
                     Log.e(LOG_TAG, e.getMessage());

From 9f0aefb3c4a9f8f56ad09a426ac246771c88dbf4 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 16:11:01 +0100
Subject: [PATCH 22/52] Fixed: app crashes on Gingerbread versions due to
 incompatible styles in navigation drawer xml

fixes #291
closes #292
Set navigation drawer headers to green.
---
 .../org/gnucash/android/ui/BaseDrawerActivity.java |  4 ++++
 app/src/main/res/layout-v14/drawer_list_item.xml   | 27 ++++++++++++++++++++++
 app/src/main/res/layout/drawer_list_item.xml       | 20 ++++++++--------
 3 files changed, 41 insertions(+), 10 deletions(-)
 create mode 100644 app/src/main/res/layout-v14/drawer_list_item.xml

diff --git a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
index a38e1b84..6d19ab52 100644
--- a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
@@ -111,6 +111,7 @@ private MergeAdapter createNavDrawerMergeAdapter() {
         ArrayAdapter<String> accountsNavAdapter = new ArrayAdapter<String>(this,
                 R.layout.drawer_list_item, accountNavOptions);
 
+        int titleColorGreen = getResources().getColor(R.color.title_green);
 
         ArrayList<String> transactionsNavOptions = new ArrayList<String>();
         transactionsNavOptions.add("Scheduled Transactions");
@@ -122,9 +123,11 @@ private MergeAdapter createNavDrawerMergeAdapter() {
         LayoutInflater inflater = getLayoutInflater();
         TextView accountHeader = (TextView) inflater.inflate(R.layout.drawer_section_header, null);
         accountHeader.setText("Accounts");
+        accountHeader.setTextColor(titleColorGreen);
 
         TextView transactionHeader = (TextView) inflater.inflate(R.layout.drawer_section_header, null);
         transactionHeader.setText("Transactions");
+        transactionHeader.setTextColor(titleColorGreen);
         MergeAdapter mergeAdapter = new MergeAdapter();
         mergeAdapter.addView(accountHeader);
         mergeAdapter.addAdapter(accountsNavAdapter);
@@ -134,6 +137,7 @@ private MergeAdapter createNavDrawerMergeAdapter() {
         mergeAdapter.addView(inflater.inflate(R.layout.horizontal_line, null));
         TextView settingsHeader = (TextView) inflater.inflate(R.layout.drawer_section_header, null);
         settingsHeader.setText("Settings");
+        settingsHeader.setTextColor(titleColorGreen);
 
         ArrayList<String> aboutNavOptions = new ArrayList<String>();
         aboutNavOptions.add("Backup & Export");
diff --git a/app/src/main/res/layout-v14/drawer_list_item.xml b/app/src/main/res/layout-v14/drawer_list_item.xml
new file mode 100644
index 00000000..075a456f
--- /dev/null
+++ b/app/src/main/res/layout-v14/drawer_list_item.xml
@@ -0,0 +1,27 @@
+<!--
+  Copyright 2013 The Android Open Source Project
+  Copyright 2015 Ngewi Fet <ngewif@gmail.com>
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+          android:id="@android:id/text1"
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:textAppearance="?android:attr/textAppearanceListItemSmall"
+          android:gravity="center_vertical"
+          android:paddingLeft="16dp"
+          android:paddingRight="16dp"
+          android:textColor="#fff"
+          android:minHeight="?android:attr/listPreferredItemHeightSmall"/>
\ No newline at end of file
diff --git a/app/src/main/res/layout/drawer_list_item.xml b/app/src/main/res/layout/drawer_list_item.xml
index 96ec5830..fbf7b653 100644
--- a/app/src/main/res/layout/drawer_list_item.xml
+++ b/app/src/main/res/layout/drawer_list_item.xml
@@ -1,5 +1,6 @@
 <!--
   Copyright 2013 The Android Open Source Project
+  Copyright 2015 Ngewi Fet <ngewif@gmail.com>
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
@@ -15,13 +16,12 @@
   -->
 
 <TextView xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@android:id/text1"
-          android:layout_width="match_parent"
-          android:layout_height="wrap_content"
-          android:textAppearance="?android:attr/textAppearanceListItemSmall"
-          android:gravity="center_vertical"
-          android:paddingLeft="16dp"
-          android:paddingRight="16dp"
-          android:textColor="#fff"
-          android:background="?android:attr/activatedBackgroundIndicator"
-          android:minHeight="?android:attr/listPreferredItemHeightSmall"/>
\ No newline at end of file
+    android:id="@android:id/text1"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textAppearance="?android:attr/textAppearanceSmall"
+    android:gravity="center_vertical"
+    android:paddingLeft="16dp"
+    android:paddingRight="16dp"
+    android:textColor="#fff"
+    android:minHeight="40dp"/>
\ No newline at end of file

From a65e8690f5b18859476be948792296860f1ae4b0 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 23 Mar 2015 16:26:54 +0100
Subject: [PATCH 23/52] Fixed: home button in scheduled actions activity does
 not open nav drawer

Code refactoring
---
 .../java/org/gnucash/android/db/DatabaseHelper.java     |  1 +
 .../java/org/gnucash/android/db/DatabaseSchema.java     |  1 -
 .../ui/transaction/ScheduledActionsActivity.java        |  2 ++
 .../transaction/ScheduledTransactionsListFragment.java  | 11 -----------
 .../android/ui/transaction/TransactionFormFragment.java |  2 +-
 app/src/main/res/values/donottranslate.xml              | 17 -----------------
 6 files changed, 4 insertions(+), 30 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 93c49114..bdf0c0a4 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -53,6 +53,7 @@
 	 * Account which the origin account this transaction in double entry mode.
      * This is no longer used since the introduction of splits
 	 */
+    //TODO: find and eliminate uses. Its services are no longer required
     @Deprecated
 	public static final String KEY_DOUBLE_ENTRY_ACCOUNT_UID 	= "double_account_uid";
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index bba49b48..91e1df08 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -80,7 +80,6 @@ private DatabaseSchema(){}
         public static final String COLUMN_EXPORTED              = "is_exported";
         public static final String COLUMN_TEMPLATE              = "is_template";
 
-        //TODO: find all recurrences and fix
         @Deprecated
         public static final String COLUMN_RECURRENCE_PERIOD     = "recurrence_period";
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java
index 013fec49..8ba54cb3 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledActionsActivity.java
@@ -19,6 +19,8 @@
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
 
+import com.actionbarsherlock.view.MenuItem;
+
 import org.gnucash.android.R;
 import org.gnucash.android.ui.passcode.PassLockActivity;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index a4e503e6..3a0fb65e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -218,17 +218,6 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
     }
 
     @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()){
-            case android.R.id.home:
-                getActivity().finish();
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    @Override
     public Loader<Cursor> onCreateLoader(int arg0, Bundle arg1) {
         Log.d(TAG, "Creating transactions loader");
         return new ScheduledTransactionsCursorLoader(getActivity());
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 0b6b2e4a..4aeeabaa 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -764,7 +764,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
             else if (mAmountEditText.getText().length() == 0) {
                 Toast.makeText(getActivity(), R.string.toast_transanction_amount_required, Toast.LENGTH_SHORT).show();
             } else if (mUseDoubleEntry && mDoubleAccountSpinner.getCount() == 0){
-                //TODO: Or automatically create an imbalance account
+                //TODO: Localize string
                 Toast.makeText(getActivity(),
                         "Create & specify a transfer account OR disable double-entry in settings to save the transaction",
                         Toast.LENGTH_LONG).show();
diff --git a/app/src/main/res/values/donottranslate.xml b/app/src/main/res/values/donottranslate.xml
index a88ebebf..39f06ff0 100644
--- a/app/src/main/res/values/donottranslate.xml
+++ b/app/src/main/res/values/donottranslate.xml
@@ -1,22 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <!-- ==================================================================== -->
-    <!-- TODO: Move these strings to proper language files when feature is done -->
-    <string-array name="recurrence_period_strings">
-        <item>NONE</item>
-        <item>DAILY</item>
-        <item>WEEKLY</item>
-        <item>MONTHLY</item>
-    </string-array>
-    <string-array name="nav_drawer_entries">
-        <item>Accounts</item>
-        <item>Favorites</item>
-        <item>Export Transactions</item>
-        <item>Scheduled Transactions</item>
-        <item>Settings</item>
-    </string-array>
-
-    <!-- ==================================================================== -->
     <string name="app_version_name">1.6.x</string>
     <string name="key_default_currency">default_currency</string>
     <string name="key_first_run">key_first_run</string>

From 5e49ece9b2d1874b2ab258284aeeb81996bd9fe6 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 24 Mar 2015 09:35:26 +0100
Subject: [PATCH 24/52] Added option to mark account as favorite from context
 menu

---
 .../android/ui/account/AccountsListFragment.java   | 38 ++++++++++------------
 .../ui/transaction/TransactionsActivity.java       |  6 ----
 app/src/main/res/menu/account_context_menu.xml     |  5 +++
 3 files changed, 23 insertions(+), 26 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
index 80ec5239..427f722a 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -156,23 +156,40 @@
      */
     private ActionMode.Callback mActionModeCallbacks = new Callback() {
 
+        String mSelectedAccountUID;
+
         @Override
         public boolean onCreateActionMode(ActionMode mode, Menu menu) {
             MenuInflater inflater = mode.getMenuInflater();
             inflater.inflate(R.menu.account_context_menu, menu);
             mode.setTitle(getString(R.string.title_selected, 1));
+            mSelectedAccountUID = mAccountsDbAdapter.getUID(mSelectedItemId);
             return true;
         }
 
         @Override
         public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
             // nothing to see here, move along
-            return false;
+            MenuItem favoriteAccountMenuItem = menu.findItem(R.id.menu_favorite_account);
+            boolean isFavoriteAccount = AccountsDbAdapter.getInstance().isFavoriteAccount(mSelectedAccountUID);
+
+            int favoriteIcon = isFavoriteAccount ? android.R.drawable.btn_star_big_on : android.R.drawable.btn_star_big_off;
+            favoriteAccountMenuItem.setIcon(favoriteIcon);
+
+            return true;
         }
 
         @Override
         public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
             switch (item.getItemId()) {
+                case R.id.menu_favorite_account:
+                    boolean isFavorite = mAccountsDbAdapter.isFavoriteAccount(mSelectedAccountUID);
+                    //toggle favorite preference
+                    mAccountsDbAdapter.updateAccount(mSelectedItemId,
+                            DatabaseSchema.AccountEntry.COLUMN_FAVORITE, isFavorite ? "0" : "1");
+                    mode.invalidate();
+                    return true;
+
                 case R.id.context_menu_edit_accounts:
                     openCreateOrEditActivity(mSelectedItemId);
                     mode.finish();
@@ -404,25 +421,6 @@ public void refresh(String parentAccountUID) {
     @Override
     public void refresh() {
         getLoaderManager().restartLoader(0, null, this);
-
-/*
-        //TODO: Figure out a way to display account balances per currency
-		boolean doubleEntryActive = PreferenceManager.getDefaultSharedPreferences(getActivity())
-				.getBoolean(getString(R.string.key_use_double_entry), false);
-
-		TextView tv = (TextView) getView().findViewById(R.id.transactions_sum);
-		Money balance = null;
-		if (doubleEntryActive){
-			balance = mAccountsDbAdapter.getDoubleEntryAccountsBalance();
-		} else {
-			balance = mAccountsDbAdapter.getAllAccountsBalance();
-		}
-		tv.setText(balance.formattedString(Locale.getDefault()));
-		if (balance.isNegative())
-			tv.setTextColor(getResources().getColor(R.color.debit_red));
-		else
-			tv.setTextColor(getResources().getColor(R.color.credit_green));
-*/
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 9a498bd1..56b8e4eb 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -96,11 +96,6 @@
     private static final int DEFAULT_NUM_PAGES = 2;
 
     /**
-     * Menu item for marking an account as a favorite
-     */
-    MenuItem mFavoriteAccountMenu;
-
-    /**
      * GUID of {@link Account} whose transactions are displayed
      */
     private String mAccountUID = null;
@@ -402,7 +397,6 @@ public void updateNavigationSelection() {
 
     @Override
     public boolean onPrepareOptionsMenu(Menu menu) {
-        mFavoriteAccountMenu = menu.findItem(R.id.menu_favorite_account);
         MenuItem favoriteAccountMenuItem = menu.findItem(R.id.menu_favorite_account);
 
         if (favoriteAccountMenuItem == null) //when the activity is used to edit a transaction
diff --git a/app/src/main/res/menu/account_context_menu.xml b/app/src/main/res/menu/account_context_menu.xml
index 194cc573..2a898969 100644
--- a/app/src/main/res/menu/account_context_menu.xml
+++ b/app/src/main/res/menu/account_context_menu.xml
@@ -16,6 +16,11 @@
 -->
 
 <menu xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item android:id="@+id/menu_favorite_account"
+        android:icon="@android:drawable/btn_star_big_off"
+        android:title="@string/menu_title_favorite"
+        android:showAsAction="ifRoom" />
+
     <item android:id="@+id/context_menu_edit_accounts"
           android:icon="@drawable/content_edit_holo_dark"
           android:title="@string/title_edit_account"

From cce13368a815d1f1a4da9a09f8215580f6dd7474 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 24 Mar 2015 17:58:52 +0100
Subject: [PATCH 25/52] Updated the account delete dialog to properly delete
 accounts

* The sub-accounts and transactions are handled separately, now with options to either delete them, or move them to another account.
* When an account is deleted, its splits are also automatically assigned to an imbalance account if double-entry mode is activated.
* Code refactoring

TODO: Localize string resources introduced
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 225 +++++++------------
 .../org/gnucash/android/db/DatabaseAdapter.java    |  15 +-
 .../org/gnucash/android/db/DatabaseHelper.java     | 192 +++++++++--------
 .../gnucash/android/db/TransactionsDbAdapter.java  |  78 +++----
 .../android/ui/account/AccountsListFragment.java   |  96 +--------
 .../ui/account/DeleteAccountDialogFragment.java    | 238 +++++++++++++++++++++
 app/src/main/res/layout/dialog_account_delete.xml  |  32 ++-
 .../main/res/layout/radio_group_delete_or_move.xml |  54 +++++
 8 files changed, 558 insertions(+), 372 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
 create mode 100644 app/src/main/res/layout/radio_group_delete_or_move.xml

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index d7389fb1..bc2e1f8b 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -22,6 +22,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -237,171 +238,101 @@ public int updateAccount(long accountId, String columnKey, String newValue){
         return updateRecord(AccountEntry.TABLE_NAME, accountId, columnKey, newValue);
     }
 
-	/**
-	 * Deletes an account with database id <code>rowId</code>
-	 * All the transactions in the account will also be deleted
-     * All descendant account will be assigned to the account's parent
-	 * @param rowId Database id of the account record to be deleted
-	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise.
-	 */
-	public boolean destructiveDeleteAccount(long rowId){
-        String accountUID = getUID(rowId);
-        if (getAccountType(accountUID) == AccountType.ROOT) {
-            // refuse to delete ROOT
-            return false;
-        }
-		Log.d(TAG, "Delete account with rowId and all its associated splits: " + rowId);
+    /**
+     * This method goes through all the children of {@code accountUID} and updates the parent account
+     * to {@code newParentAccountUID}. The fully qualified account names for all descendant accounts will also be updated.
+     * @param accountUID GUID of the account
+     * @param newParentAccountUID GUID of the new parent account
+     */
+    public void reassignDescendantAccounts(@NonNull String accountUID, @NonNull String newParentAccountUID) {
         List<String> descendantAccountUIDs = getDescendantAccountUIDs(accountUID, null, null);
-
-        mDb.beginTransaction();
-        try {
-            if (descendantAccountUIDs.size() > 0) {
-                List<Account> descendantAccounts = getSimpleAccountList(
-                        AccountEntry.COLUMN_UID + " IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')",
-                        null,
-                        null
-                );
-                HashMap<String, Account> mapAccounts = new HashMap<String, Account>();
-                for (Account account : descendantAccounts)
-                    mapAccounts.put(account.getUID(), account);
-                String parentAccountFullName;
-                String parentAccountUID = getParentAccountUID(accountUID);
-                if (parentAccountUID == null || getAccountType(parentAccountUID) == AccountType.ROOT) {
-                    parentAccountFullName = "";
-                } else {
-                    parentAccountFullName = getAccountFullName(parentAccountUID);
-                }
-                ContentValues contentValues = new ContentValues();
-                for (String acctUID : descendantAccountUIDs) {
-                    Account acct = mapAccounts.get(acctUID);
-                    if (accountUID.equals(acct.getParentUID())) {
-                        // direct descendant
-                        acct.setParentUID(parentAccountUID);
-                        if (parentAccountFullName == null || parentAccountFullName.length() == 0) {
-                            acct.setFullName(acct.getName());
-                        } else {
-                            acct.setFullName(parentAccountFullName + ACCOUNT_NAME_SEPARATOR + acct.getName());
-                        }
-                        // update DB
-                        contentValues.clear();
-                        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, parentAccountUID);
-                        contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
-                        mDb.update(
-                                AccountEntry.TABLE_NAME, contentValues,
-                                AccountEntry.COLUMN_UID + " = ?",
-                                new String[]{acct.getUID()}
-                        );
+        if (descendantAccountUIDs.size() > 0) {
+            List<Account> descendantAccounts = getSimpleAccountList(
+                    AccountEntry.COLUMN_UID + " IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')",
+                    null,
+                    null
+            );
+            HashMap<String, Account> mapAccounts = new HashMap<>();
+            for (Account account : descendantAccounts)
+                mapAccounts.put(account.getUID(), account);
+            String parentAccountFullName;
+            if (newParentAccountUID == null || getAccountType(newParentAccountUID) == AccountType.ROOT) {
+                parentAccountFullName = "";
+            } else {
+                parentAccountFullName = getAccountFullName(newParentAccountUID);
+            }
+            ContentValues contentValues = new ContentValues();
+            for (String acctUID : descendantAccountUIDs) {
+                Account acct = mapAccounts.get(acctUID);
+                if (accountUID.equals(acct.getParentUID())) {
+                    // direct descendant
+                    acct.setParentUID(newParentAccountUID);
+                    if (parentAccountFullName == null || parentAccountFullName.isEmpty()) {
+                        acct.setFullName(acct.getName());
                     } else {
-                        // indirect descendant
-                        acct.setFullName(
-                                mapAccounts.get(acct.getParentUID()).getFullName() +
-                                        ACCOUNT_NAME_SEPARATOR + acct.getName()
-                        );
-                        // update DB
-                        contentValues.clear();
-                        contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
-                        mDb.update(
-                                AccountEntry.TABLE_NAME, contentValues,
-                                AccountEntry.COLUMN_UID + " = ?",
-                                new String[]{acct.getUID()}
-                        );
+                        acct.setFullName(parentAccountFullName + ACCOUNT_NAME_SEPARATOR + acct.getName());
                     }
+                    // update DB
+                    contentValues.clear();
+                    contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, newParentAccountUID);
+                    contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
+                    mDb.update(
+                            AccountEntry.TABLE_NAME, contentValues,
+                            AccountEntry.COLUMN_UID + " = ?",
+                            new String[]{acct.getUID()}
+                    );
+                } else {
+                    // indirect descendant
+                    acct.setFullName(
+                            mapAccounts.get(acct.getParentUID()).getFullName() +
+                                    ACCOUNT_NAME_SEPARATOR + acct.getName()
+                    );
+                    // update DB
+                    contentValues.clear();
+                    contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
+                    mDb.update(
+                            AccountEntry.TABLE_NAME, contentValues,
+                            AccountEntry.COLUMN_UID + " = ?",
+                            new String[]{acct.getUID()}
+                    );
                 }
             }
-            // TODO: with "ON DELETE CASCADE", re-assign to imbalance accounts before delete.
-            //       deleteRecord(AccountEntry.TABLE_NAME, rowId); will delete related
-            //       transactions and splits
-            //delete splits in this account
-            mDb.delete(SplitEntry.TABLE_NAME,
-                    SplitEntry.COLUMN_TRANSACTION_UID  + " IN ( SELECT DISTINCT "
-                    + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
-                    + " FROM trans_split_acct WHERE "
-                    + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID
-                    + " = ? )",
-                    new String[]{getUID(rowId)});
-            // delete empty transactions
-            // trans_split_acct is an inner joint, empty transactions will
-            // not be selected in this view
-            mDb.delete(TransactionEntry.TABLE_NAME,
-                    TransactionEntry.COLUMN_UID  + " NOT IN ( SELECT DISTINCT "
-                            + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
-                            + " FROM trans_split_acct )",
-                    null);
-            deleteRecord(rowId);
-            mDb.setTransactionSuccessful();
-            return true;
-        }
-        finally {
-            mDb.endTransaction();
         }
-	}
-
-    /**
-     * Reassigns all accounts with parent UID <code>oldParentUID</code> to <code>newParentUID</code>
-     * @param oldParentUID Old parent account Unique ID
-     * @param newParentUID Unique ID of new parent account
-     * @return Number of records which are modified
-     */
-    public int reassignParent(String oldParentUID, String newParentUID){
-        ContentValues contentValues = new ContentValues();
-        if (newParentUID == null)
-            contentValues.putNull(AccountEntry.COLUMN_PARENT_ACCOUNT_UID);
-        else
-            contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, newParentUID);
-
-        return mDb.update(AccountEntry.TABLE_NAME,
-                contentValues,
-                AccountEntry.COLUMN_PARENT_ACCOUNT_UID + "= ?",
-                new String[]{oldParentUID});
-    }
-
-	/**
-	 * Deletes an account while preserving the linked transactions
-	 * Reassigns all transactions belonging to the account with id <code>rowId</code> to 
-	 * the account with id <code>accountReassignId</code> before deleting the account.
-	 * @param accountId Database record ID of the account to be deleted
-	 * @param accountReassignId Record ID of the account to which to reassign the transactions from the previous
-	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise.
-	 */
-	public boolean transactionPreservingDelete(long accountId, long accountReassignId){
-        Log.d(TAG, "Migrating transaction splits to new account");
-        ContentValues contentValues = new ContentValues();
-        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, accountReassignId);
-        mDb.update(SplitEntry.TABLE_NAME,
-                contentValues,
-                SplitEntry.COLUMN_ACCOUNT_UID + "=?",
-                new String[]{getUID(accountId)});
-        return destructiveDeleteAccount(accountId);
     }
 
     /**
-     * Deletes an account and all its sub-accounts and splits with it
+     * Deletes an account and its transactions, and all its sub-accounts and their transactions.
+     * <p>Not only the splits belonging to the account and its descendants will be deleted, rather,
+     * the complete transactions associated with this account and its descendants
+     * (i.e. as long as the transaction has at least one split belonging to one of the accounts).
+     * This prevents an split imbalance from being caused.</p>
+     * <p>If you want to preserve transactions, make sure to first reassign the children accounts (see {@link #reassignDescendantAccounts(String, String)}
+     * before calling this method. This method will however not delete a root account. </p>
+     * <p><b>This method does a thorough delete, use with caution!!!</b></p>
      * @param accountId Database record ID of account
      * @return <code>true</code> if the account and subaccounts were all successfully deleted, <code>false</code> if
      * even one was not deleted
+     * @see #reassignDescendantAccounts(String, String)
      */
-    public boolean recursiveDestructiveDelete(long accountId){
-        Log.d(TAG, "Delete account with rowId with its transactions and sub-accounts: " + accountId);
+    public boolean recursiveDeleteAccount(long accountId){
         String accountUID = getUID(accountId);
+        if (getAccountType(accountUID) == AccountType.ROOT) {
+            // refuse to delete ROOT
+            return false;
+        }
+
+        Log.d(TAG, "Delete account with rowId with its transactions and sub-accounts: " + accountId);
+
         List<String> descendantAccountUIDs = getDescendantAccountUIDs(accountUID, null, null);
         mDb.beginTransaction();
         try {
-            descendantAccountUIDs.add(accountUID);
+            descendantAccountUIDs.add(accountUID); //add account to descendants list just for convenience
+            for (String descendantAccountUID : descendantAccountUIDs) {
+                mTransactionsAdapter.deleteTransactionsForAccount(descendantAccountUID);
+            }
+
             String accountUIDList = "'" + TextUtils.join("','", descendantAccountUIDs) + "'";
-            // delete splits
-            mDb.delete(
-                    SplitEntry.TABLE_NAME,
-                    SplitEntry.COLUMN_ACCOUNT_UID + " IN (" + accountUIDList + ")",
-                    null
-            );
-            // delete transactions that do not have any splits associate them any more
-            mDb.delete(
-                    TransactionEntry.TABLE_NAME,
-                    "NOT EXISTS ( SELECT * FROM " + SplitEntry.TABLE_NAME +
-                    " WHERE " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                    " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " ) ",
-                    null
-            );
+
             // delete accounts
             mDb.delete(
                     AccountEntry.TABLE_NAME,
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 267d3448..312b06a3 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -367,14 +367,25 @@ protected int updateRecord(String tableName, long recordId, String columnKey, St
      * @return Number of records affected
      */
     public int updateRecord(@NonNull String uid, @NonNull String columnKey, String newValue) {
+        return updateRecords(CommonColumns.COLUMN_UID + "= ?", new String[]{uid}, columnKey, newValue);
+    }
+
+    /**
+     * Updates all records which match the {@code where} clause with the {@code newValue} for the column
+     * @param where SQL where clause
+     * @param whereArgs String arguments for where clause
+     * @param columnKey Name of column to be updated
+     * @param newValue New value to be assigned to the columnKey
+     * @return Number of records affected
+     */
+    public int updateRecords(String where, String[] whereArgs, @NonNull String columnKey, String newValue){
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
         } else {
             contentValues.put(columnKey, newValue);
         }
-        return mDb.update(mTableName, contentValues,
-                CommonColumns.COLUMN_UID + "= ?", new String[]{uid});
+        return mDb.update(mTableName, contentValues, where, whereArgs);
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index bdf0c0a4..632b1b39 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -166,7 +166,7 @@ public void onOpen(SQLiteDatabase db) {
     @Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		Log.i(LOG_TAG, "Upgrading database from version "
-				+ oldVersion + " to " + newVersion);
+                + oldVersion + " to " + newVersion);
 
 		if (oldVersion < newVersion){
 			//introducing double entry accounting
@@ -265,95 +265,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
             if (oldVersion == 6 && newVersion >= DatabaseSchema.SPLITS_DB_VERSION){
                 Log.i(LOG_TAG, "Upgrading database to version 7");
-                db.beginTransaction();
-                try {
-                    // backup transaction table
-                    db.execSQL("ALTER TABLE " + TransactionEntry.TABLE_NAME + " RENAME TO " + TransactionEntry.TABLE_NAME + "_bak");
-                    // create new transaction table
-                    db.execSQL("create table " + TransactionEntry.TABLE_NAME + " ("
-                            + TransactionEntry._ID + " integer primary key autoincrement, "
-                            + TransactionEntry.COLUMN_UID + " varchar(255) not null, "
-                            + TransactionEntry.COLUMN_DESCRIPTION + " varchar(255), "
-                            + TransactionEntry.COLUMN_NOTES + " text, "
-                            + TransactionEntry.COLUMN_TIMESTAMP + " integer not null, "
-                            + TransactionEntry.COLUMN_EXPORTED + " tinyint default 0, "
-                            + TransactionEntry.COLUMN_CURRENCY + " varchar(255) not null, "
-                            + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0, "
-                            + "UNIQUE (" + TransactionEntry.COLUMN_UID + ") "
-                            + ");");
-                    // initialize new transaction table wiht data from old table
-                    db.execSQL("INSERT INTO " + TransactionEntry.TABLE_NAME + " ( "
-                                    + TransactionEntry._ID + " , "
-                                    + TransactionEntry.COLUMN_UID + " , "
-                                    + TransactionEntry.COLUMN_DESCRIPTION + " , "
-                                    + TransactionEntry.COLUMN_NOTES + " , "
-                                    + TransactionEntry.COLUMN_TIMESTAMP + " , "
-                                    + TransactionEntry.COLUMN_EXPORTED + " , "
-                                    + TransactionEntry.COLUMN_CURRENCY + " , "
-                                    + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " )  SELECT "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry._ID + " , "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_UID + " , "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_DESCRIPTION + " , "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_NOTES + " , "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_TIMESTAMP + " , "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_EXPORTED + " , "
-                                    + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY + " , "
-                                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_RECURRENCE_PERIOD
-                                    + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
-                                    + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid == " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
-                    );
-                    // create split table
-                    db.execSQL("CREATE TABLE " + SplitEntry.TABLE_NAME + " ("
-                            + SplitEntry._ID + " integer primary key autoincrement, "
-                            + SplitEntry.COLUMN_UID + " varchar(255) not null, "
-                            + SplitEntry.COLUMN_MEMO + " text, "
-                            + SplitEntry.COLUMN_TYPE + " varchar(255) not null, "
-                            + SplitEntry.COLUMN_AMOUNT + " varchar(255) not null, "
-                            + SplitEntry.COLUMN_ACCOUNT_UID + " varchar(255) not null, "
-                            + SplitEntry.COLUMN_TRANSACTION_UID + " varchar(255) not null, "
-                            + "FOREIGN KEY (" + SplitEntry.COLUMN_ACCOUNT_UID + ") REFERENCES " + AccountEntry.TABLE_NAME + " (" + AccountEntry.COLUMN_UID + "), "
-                            + "FOREIGN KEY (" + SplitEntry.COLUMN_TRANSACTION_UID + ") REFERENCES " + TransactionEntry.TABLE_NAME + " (" + TransactionEntry.COLUMN_UID + "), "
-                            + "UNIQUE (" + SplitEntry.COLUMN_UID + ") "
-                            + ");");
-                    // Initialize split table with data from backup transaction table
-                    // New split table is initialized after the new transaction table as the
-                    // foreign key constraint will stop any data from being inserted
-                    // If new split table is created before the backup is made, the foreign key
-                    // constraint will be rewritten to refer to the backup transaction table
-                    db.execSQL("INSERT INTO " + SplitEntry.TABLE_NAME + " ( "
-                            + SplitEntry.COLUMN_UID + " , "
-                            + SplitEntry.COLUMN_TYPE + " , "
-                            + SplitEntry.COLUMN_AMOUNT + " , "
-                            + SplitEntry.COLUMN_ACCOUNT_UID + " , "
-                            + SplitEntry.COLUMN_TRANSACTION_UID + " ) SELECT "
-                            + "LOWER(HEX(RANDOMBLOB(16))) , "
-                            + "CASE WHEN " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " IN ( 'CASH' , 'BANK', 'ASSET', 'EXPENSE', 'RECEIVABLE', 'STOCK', 'MUTUAL' ) THEN CASE WHEN "
-                                    + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'CREDIT' ELSE 'DEBIT' END ELSE CASE WHEN "
-                                    + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'DEBIT' ELSE 'CREDIT' END END , "
-                            + "ABS ( " + TransactionEntry.TABLE_NAME + "_bak.amount ) , "
-                            + TransactionEntry.TABLE_NAME + "_bak.account_uid , "
-                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_UID
-                            + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
-                            + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
-                            + " UNION SELECT "
-                            + "LOWER(HEX(RANDOMBLOB(16))) AS " + SplitEntry.COLUMN_UID + " , "
-                            + "CASE WHEN " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " IN ( 'CASH' , 'BANK', 'ASSET', 'EXPENSE', 'RECEIVABLE', 'STOCK', 'MUTUAL' ) THEN CASE WHEN "
-                                    + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'DEBIT' ELSE 'CREDIT' END ELSE CASE WHEN "
-                                    + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'CREDIT' ELSE 'DEBIT' END END , "
-                            + "ABS ( " + TransactionEntry.TABLE_NAME + "_bak.amount ) , "
-                            + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " , "
-                            + TransactionEntry.TABLE_NAME + "_baK." + TransactionEntry.COLUMN_UID
-                            + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
-                            + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
-                            + " WHERE " + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " IS NOT NULL"
-                    );
-                    // drop backup transaction table
-                    db.execSQL("DROP TABLE " + TransactionEntry.TABLE_NAME + "_bak");
-                    db.setTransactionSuccessful();
-                    oldVersion = DatabaseSchema.SPLITS_DB_VERSION;
-                } finally {
-                    db.endTransaction();
-                }
+                oldVersion = upgradeToVersion7(db);
             }
 
             if (oldVersion == 7 && newVersion >= 8){
@@ -390,6 +302,106 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 	}
 
     /**
+     * Code for upgrading the database to the {@link DatabaseSchema#SPLITS_DB_VERSION}
+     * Main new featurs is the introduction of multiple-splits for transactions
+     * @param db SQLite Database
+     * @return The new database version is upgrade was successful, or the old db version if it failed
+     */
+    private int upgradeToVersion7(SQLiteDatabase db) {
+        int oldVersion = 6;
+        db.beginTransaction();
+        try {
+            // backup transaction table
+            db.execSQL("ALTER TABLE " + TransactionEntry.TABLE_NAME + " RENAME TO " + TransactionEntry.TABLE_NAME + "_bak");
+            // create new transaction table
+            db.execSQL("create table " + TransactionEntry.TABLE_NAME + " ("
+                    + TransactionEntry._ID + " integer primary key autoincrement, "
+                    + TransactionEntry.COLUMN_UID + " varchar(255) not null, "
+                    + TransactionEntry.COLUMN_DESCRIPTION + " varchar(255), "
+                    + TransactionEntry.COLUMN_NOTES + " text, "
+                    + TransactionEntry.COLUMN_TIMESTAMP + " integer not null, "
+                    + TransactionEntry.COLUMN_EXPORTED + " tinyint default 0, "
+                    + TransactionEntry.COLUMN_CURRENCY + " varchar(255) not null, "
+                    + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0, "
+                    + "UNIQUE (" + TransactionEntry.COLUMN_UID + ") "
+                    + ");");
+            // initialize new transaction table wiht data from old table
+            db.execSQL("INSERT INTO " + TransactionEntry.TABLE_NAME + " ( "
+                            + TransactionEntry._ID + " , "
+                            + TransactionEntry.COLUMN_UID + " , "
+                            + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                            + TransactionEntry.COLUMN_NOTES + " , "
+                            + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                            + TransactionEntry.COLUMN_EXPORTED + " , "
+                            + TransactionEntry.COLUMN_CURRENCY + " , "
+                            + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " )  SELECT "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry._ID + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_UID + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_NOTES + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_EXPORTED + " , "
+                            + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_RECURRENCE_PERIOD
+                            + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
+                            + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid == " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
+            );
+            // create split table
+            db.execSQL("CREATE TABLE " + SplitEntry.TABLE_NAME + " ("
+                    + SplitEntry._ID + " integer primary key autoincrement, "
+                    + SplitEntry.COLUMN_UID + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_MEMO + " text, "
+                    + SplitEntry.COLUMN_TYPE + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_AMOUNT + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_ACCOUNT_UID + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_TRANSACTION_UID + " varchar(255) not null, "
+                    + "FOREIGN KEY (" + SplitEntry.COLUMN_ACCOUNT_UID + ") REFERENCES " + AccountEntry.TABLE_NAME + " (" + AccountEntry.COLUMN_UID + "), "
+                    + "FOREIGN KEY (" + SplitEntry.COLUMN_TRANSACTION_UID + ") REFERENCES " + TransactionEntry.TABLE_NAME + " (" + TransactionEntry.COLUMN_UID + "), "
+                    + "UNIQUE (" + SplitEntry.COLUMN_UID + ") "
+                    + ");");
+            // Initialize split table with data from backup transaction table
+            // New split table is initialized after the new transaction table as the
+            // foreign key constraint will stop any data from being inserted
+            // If new split table is created before the backup is made, the foreign key
+            // constraint will be rewritten to refer to the backup transaction table
+            db.execSQL("INSERT INTO " + SplitEntry.TABLE_NAME + " ( "
+                    + SplitEntry.COLUMN_UID + " , "
+                    + SplitEntry.COLUMN_TYPE + " , "
+                    + SplitEntry.COLUMN_AMOUNT + " , "
+                    + SplitEntry.COLUMN_ACCOUNT_UID + " , "
+                    + SplitEntry.COLUMN_TRANSACTION_UID + " ) SELECT "
+                    + "LOWER(HEX(RANDOMBLOB(16))) , "
+                    + "CASE WHEN " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " IN ( 'CASH' , 'BANK', 'ASSET', 'EXPENSE', 'RECEIVABLE', 'STOCK', 'MUTUAL' ) THEN CASE WHEN "
+                            + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'CREDIT' ELSE 'DEBIT' END ELSE CASE WHEN "
+                            + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'DEBIT' ELSE 'CREDIT' END END , "
+                    + "ABS ( " + TransactionEntry.TABLE_NAME + "_bak.amount ) , "
+                    + TransactionEntry.TABLE_NAME + "_bak.account_uid , "
+                    + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_UID
+                    + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
+                    + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
+                    + " UNION SELECT "
+                    + "LOWER(HEX(RANDOMBLOB(16))) AS " + SplitEntry.COLUMN_UID + " , "
+                    + "CASE WHEN " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " IN ( 'CASH' , 'BANK', 'ASSET', 'EXPENSE', 'RECEIVABLE', 'STOCK', 'MUTUAL' ) THEN CASE WHEN "
+                            + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'DEBIT' ELSE 'CREDIT' END ELSE CASE WHEN "
+                            + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'CREDIT' ELSE 'DEBIT' END END , "
+                    + "ABS ( " + TransactionEntry.TABLE_NAME + "_bak.amount ) , "
+                    + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " , "
+                    + TransactionEntry.TABLE_NAME + "_baK." + TransactionEntry.COLUMN_UID
+                    + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
+                    + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
+                    + " WHERE " + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " IS NOT NULL"
+            );
+            // drop backup transaction table
+            db.execSQL("DROP TABLE " + TransactionEntry.TABLE_NAME + "_bak");
+            db.setTransactionSuccessful();
+            oldVersion = DatabaseSchema.SPLITS_DB_VERSION;
+        } finally {
+            db.endTransaction();
+        }
+        return oldVersion;
+    }
+
+    /**
      * Creates the tables in the database
      * @param db Database instance
      */
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 89ab4790..9b4cc474 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -215,29 +215,47 @@ public Transaction getTransaction(long rowId) {
      * @throws java.lang.IllegalArgumentException if the accountUID is null
 	 */
 	public Cursor fetchAllTransactionsForAccount(String accountUID){
-        //TODO: Remove this legacy code. Database has been upgraded
-        if (mDb.getVersion() < DatabaseSchema.SPLITS_DB_VERSION){ //legacy from previous database format
-            return mDb.query(TransactionEntry.TABLE_NAME, null,
-                    "((" + SplitEntry.COLUMN_ACCOUNT_UID + " = '" + accountUID + "') "
-                            + "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' ))"
-                            + " AND " + TransactionEntry.COLUMN_TEMPLATE + " = 0",
-                    null, null, null, TransactionEntry.COLUMN_TIMESTAMP + " DESC");
-        } else {
-            SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-            queryBuilder.setTables(TransactionEntry.TABLE_NAME
-                    + " INNER JOIN " + SplitEntry.TABLE_NAME + " ON "
-                    + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
-                    + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
-            queryBuilder.setDistinct(true);
-            String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
-            String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
-                    + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
-            String[] selectionArgs = new String[]{accountUID};
-            String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
-
-            return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
-        }
-	}
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME
+                + " INNER JOIN " + SplitEntry.TABLE_NAME + " ON "
+                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
+        queryBuilder.setDistinct(true);
+        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+        String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
+                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
+        String[] selectionArgs = new String[]{accountUID};
+        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
+
+        return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
+    }
+
+    /**
+     * Deletes all transactions which contain a split in the account.
+     * <p><b>Note:</b>As long as the transaction has one split which belongs to the account {@code accountUID},
+     * it will be deleted. The other splits belonging to the transaction will also go away</p>
+     * @param accountUID GUID of the account
+     */
+    public void deleteTransactionsForAccount(String accountUID){
+        String rawDeleteQuery = "DELETE FROM " + TransactionEntry.TABLE_NAME + " WHERE " + TransactionEntry.COLUMN_UID + " IN "
+                + " (SELECT " + SplitEntry.COLUMN_TRANSACTION_UID + " FROM " + SplitEntry.TABLE_NAME + " WHERE "
+                + SplitEntry.COLUMN_ACCOUNT_UID + " = ?)";
+        mDb.execSQL(rawDeleteQuery, new String[]{accountUID});
+    }
+
+    /**
+     * Deletes all transactions which have no splits associated with them
+     * @return Number of records deleted
+     */
+    public int deleteTransactionsWithNoSplits(){
+        return mDb.delete(
+                TransactionEntry.TABLE_NAME,
+                "NOT EXISTS ( SELECT * FROM " + SplitEntry.TABLE_NAME +
+                        " WHERE " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " ) ",
+                null
+        );
+    }
 
     /**
      * Fetches all recurring transactions from the database.
@@ -413,20 +431,6 @@ public Money getBalance(String transactionUID, String accountUID){
         return Transaction.computeBalance(accountUID, splitList);
     }
 
-    //TODO: When "on delete cascade" is successfully migrated, we can remove this method and use the base implementation
-	/**
-	 * Deletes transaction record with id <code>rowId</code> and all it's splits
-	 * @param rowId Long database record id
-	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
-	 */
-    @Override
-	public boolean deleteRecord(long rowId){
-		Log.d(TAG, "Delete transaction with record Id: " + rowId);
-        //the splits db adapter handles deletion of the transaction
-		mSplitsDbAdapter.deleteSplitsForTransaction(rowId);
-        return mDb.delete(TransactionEntry.TABLE_NAME, TransactionEntry._ID + "=" + rowId, null) > 0;
-	}
-
     /**
 	 * Assigns transaction with id <code>rowId</code> to account with id <code>accountId</code>
 	 * @param transactionUID GUID of the transaction
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
index 427f722a..c5a8aaa1 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -17,11 +17,8 @@
 package org.gnucash.android.ui.account;
 
 import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
 import android.app.SearchManager;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.database.Cursor;
 import android.graphics.Color;
@@ -38,15 +35,12 @@
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemLongClickListener;
-import android.widget.CheckBox;
 import android.widget.ImageButton;
 import android.widget.ListAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
-import android.widget.Toast;
 
 import com.actionbarsherlock.app.ActionBar;
-import com.actionbarsherlock.app.SherlockDialogFragment;
 import com.actionbarsherlock.app.SherlockListFragment;
 import com.actionbarsherlock.view.ActionMode;
 import com.actionbarsherlock.view.ActionMode.Callback;
@@ -65,7 +59,6 @@
 import org.gnucash.android.ui.util.AccountBalanceTask;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 /**
  * Fragment for displaying the list of accounts in the database
@@ -324,36 +317,21 @@ public void tryDeleteAccount(long rowId) {
         if (acc.getTransactionCount() > 0 || mAccountsDbAdapter.getSubAccountCount(acc.getUID()) > 0) {
             showConfirmationDialog(rowId);
         } else {
-            deleteAccount(rowId, false);
+            mAccountsDbAdapter.deleteRecord(rowId);
+            refresh();
         }
     }
 
     /**
-     * Deletes an account and show a {@link Toast} notification on success.
-     * When an account is deleted, all it's child accounts will be reassigned as children to its parent account
-     * @param rowId Record ID of the account to be deleted
-     */
-    protected void deleteAccount(long rowId, boolean deleteSubAccounts) {
-        boolean deleted     = deleteSubAccounts ?
-                mAccountsDbAdapter.recursiveDestructiveDelete(rowId)
-                : mAccountsDbAdapter.destructiveDeleteAccount(rowId);
-        if (deleted) {
-            Toast.makeText(getActivity(), R.string.toast_account_deleted, Toast.LENGTH_SHORT).show();
-            WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
-        }
-        refresh();
-    }
-
-    /**
      * Shows the delete confirmation dialog
      *
      * @param id Record ID of account to be deleted after confirmation
      */
     public void showConfirmationDialog(long id) {
-        DeleteConfirmationDialogFragment alertFragment =
-                DeleteConfirmationDialogFragment.newInstance(R.string.title_confirm_delete, mAccountsDbAdapter.getUID(id));
+        DeleteAccountDialogFragment alertFragment =
+                DeleteAccountDialogFragment.newInstance(mAccountsDbAdapter.getUID(id));
         alertFragment.setTargetFragment(this, 0);
-        alertFragment.show(getSherlockActivity().getSupportFragmentManager(), "dialog");
+        alertFragment.show(getSherlockActivity().getSupportFragmentManager(), "delete_confirmation_dialog");
     }
 
     /**
@@ -499,70 +477,6 @@ public boolean onClose() {
     }
 
     /**
-     * Delete confirmation dialog
-     * Is displayed when deleting an account which has transactions.
-     * If an account has no transactions, it is deleted immediately with no confirmation required
-     *
-     * @author Ngewi Fet <ngewif@gmail.com>
-     */
-    public static class DeleteConfirmationDialogFragment extends SherlockDialogFragment {
-
-        /**
-         * Creates new instance of the delete confirmation dialog and provides parameters for it
-         * @param title Title to use for the dialog
-         * @param uid GUID of the account to be deleted
-         * @return New instance of the delete confirmation dialog
-         */
-        public static DeleteConfirmationDialogFragment newInstance(int title, String uid) {
-            DeleteConfirmationDialogFragment frag = new DeleteConfirmationDialogFragment();
-            Bundle args = new Bundle();
-            args.putInt("title", title);
-            args.putString(UxArgument.SELECTED_ACCOUNT_UID, uid);
-            frag.setArguments(args);
-            return frag;
-        }
-
-            @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-            int title = getArguments().getInt("title");
-            final String uid = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
-
-            LayoutInflater layoutInflater = getSherlockActivity().getLayoutInflater();
-            final View dialogLayout = layoutInflater.inflate(R.layout.dialog_account_delete, (ViewGroup) getView());
-            AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(getActivity())
-                    .setIcon(android.R.drawable.ic_delete)
-                    .setTitle(title).setMessage(R.string.delete_account_confirmation_message)
-                    .setView(dialogLayout)
-                    .setPositiveButton(R.string.alert_dialog_ok_delete,
-                            new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int whichButton) {
-                                    Context context = getDialog().getContext();
-                                    AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
-                                    if (uid == null) {
-                                        accountsDbAdapter.deleteAllRecords();
-                                        Toast.makeText(context, R.string.toast_all_accounts_deleted, Toast.LENGTH_SHORT).show();
-                                    } else {
-                                        CheckBox deleteSubAccountsCheckBox = (CheckBox) dialogLayout
-                                                .findViewById(R.id.checkbox_delete_sub_accounts);
-                                        long rowId = accountsDbAdapter.getID(uid);
-                                        ((AccountsListFragment) getTargetFragment()).deleteAccount(rowId, deleteSubAccountsCheckBox.isChecked());
-                                    }
-                                }
-                            })
-                    .setNegativeButton(R.string.alert_dialog_cancel,
-                            new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int whichButton) {
-                                    dismiss();
-                                }
-                            }
-
-                    );
-            return dialogBuilder.create();
-        }
-
-        }
-
-    /**
      * Extends {@link DatabaseCursorLoader} for loading of {@link Account} from the
      * database asynchronously.
      * <p>By default it loads only top-level accounts (accounts which have no parent or have GnuCash ROOT account as parent.
diff --git a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
new file mode 100644
index 00000000..126f24c2
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
@@ -0,0 +1,238 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.ui.account;
+
+import android.database.Cursor;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.widget.SimpleCursorAdapter;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.CompoundButton;
+import android.widget.RadioButton;
+import android.widget.Spinner;
+import android.widget.TextView;
+
+import com.actionbarsherlock.app.SherlockDialogFragment;
+
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.SplitsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.ui.util.Refreshable;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
+
+import java.util.Currency;
+import java.util.List;
+
+/**
+ * Delete confirmation dialog for accounts.
+ * It is displayed when deleting an account which has transactions or sub-accounts, and the user
+ * has the option to either move the transactions/sub-accounts, or delete them.
+ * If an account has no transactions, it is deleted immediately with no confirmation required
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class DeleteAccountDialogFragment extends SherlockDialogFragment {
+
+    /**
+     * Spinner for selecting the account to move the transactions to
+     */
+    Spinner mTransactionsDestinationAccountSpinner;
+
+    Spinner mAccountsDestinationAccountSpinner;
+
+    /**
+     * Dialog positive button. Ok to moving the transactions
+     */
+    Button mOkButton;
+
+    /**
+     * Cancel button
+     */
+    Button mCancelButton;
+
+    /**
+     * GUID of account from which to move the transactions
+     */
+    String mOriginAccountUID = null;
+
+    View mAccountOptionsView;
+    View mTransactionOptionsView;
+    RadioButton mMoveAccountsRadioButton;
+    RadioButton mMoveTransactionsRadioButton;
+    RadioButton mDeleteAccountsRadioButton;
+    RadioButton mDeleteTransactionsRadioButton;
+
+    private int mTransactionCount;
+    private int mSubAccountCount;
+
+    /**
+     * Creates new instance of the delete confirmation dialog and provides parameters for it
+     * @param accountUID GUID of the account to be deleted
+     * @return New instance of the delete confirmation dialog
+     */
+    public static DeleteAccountDialogFragment newInstance(String accountUID) {
+        DeleteAccountDialogFragment frag = new DeleteAccountDialogFragment();
+        frag.mOriginAccountUID = accountUID;
+        frag.mSubAccountCount = AccountsDbAdapter.getInstance().getSubAccountCount(accountUID);
+        frag.mTransactionCount = TransactionsDbAdapter.getInstance().getTransactionsCount(accountUID);
+        return frag;
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.dialog_account_delete, container, false);
+        mTransactionOptionsView = view.findViewById(R.id.transactions_options);
+        ((TextView)mTransactionOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_transactions);
+        ((TextView)mTransactionOptionsView.findViewById(R.id.description)).setText("This account contains transactions. \nWhat would you like to do with these transactions");
+        mDeleteTransactionsRadioButton = (RadioButton) mTransactionOptionsView.findViewById(R.id.radio_delete);
+        mDeleteTransactionsRadioButton.setText("Delete transactions");
+        mMoveTransactionsRadioButton = ((RadioButton)mTransactionOptionsView.findViewById(R.id.radio_move));
+        mTransactionsDestinationAccountSpinner = (Spinner) mTransactionOptionsView.findViewById(R.id.target_accounts_spinner);
+
+        mAccountOptionsView = view.findViewById(R.id.accounts_options);
+        ((TextView)mAccountOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_subaccounts);
+        ((TextView)mAccountOptionsView.findViewById(R.id.description)).setText("This account contains sub-accounts. \nWhat would you like to do with these sub-accounts");
+        mDeleteAccountsRadioButton = (RadioButton) mAccountOptionsView.findViewById(R.id.radio_delete);
+        mDeleteAccountsRadioButton.setText(R.string.label_delete_sub_accounts);
+        mMoveAccountsRadioButton = (RadioButton)mAccountOptionsView.findViewById(R.id.radio_move);
+
+        mAccountsDestinationAccountSpinner = (Spinner) mAccountOptionsView.findViewById(R.id.target_accounts_spinner);
+
+
+        mTransactionOptionsView.setVisibility(mTransactionCount > 0 ? View.VISIBLE : View.GONE);
+        mAccountOptionsView.setVisibility(mSubAccountCount > 0 ? View.VISIBLE : View.GONE);
+
+        mCancelButton = (Button) view.findViewById(R.id.btn_cancel);
+        mOkButton = (Button) view.findViewById(R.id.btn_save);
+        mOkButton.setText(R.string.alert_dialog_ok_delete);
+        mOkButton.setCompoundDrawables(getResources().getDrawable(R.drawable.content_discard_holo_light),
+                null, null, null);
+        return view;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        String accountName = AccountsDbAdapter.getInstance().getAccountName(mOriginAccountUID);
+        getDialog().setTitle("Delete: " + accountName);
+        AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
+        List<String> descendantAccountUIDs = accountsDbAdapter.getDescendantAccountUIDs(mOriginAccountUID, null, null);
+
+        String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID    + " != ? AND "
+                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = ? AND "
+                + DatabaseSchema.AccountEntry.COLUMN_TYPE         + " = ? AND "
+                + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0 AND "
+                + DatabaseSchema.AccountEntry.COLUMN_UID + " NOT IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')"
+                + ")";
+        Cursor cursor = accountsDbAdapter.fetchAccountsOrderedByFullName(conditions,
+                new String[]{mOriginAccountUID,
+                        accountsDbAdapter.getCurrencyCode(mOriginAccountUID),
+                        accountsDbAdapter.getAccountType(mOriginAccountUID).name()
+                });
+
+        SimpleCursorAdapter mCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
+                android.R.layout.simple_spinner_item, cursor);
+        mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        mTransactionsDestinationAccountSpinner.setAdapter(mCursorAdapter);
+        mAccountsDestinationAccountSpinner.setAdapter(mCursorAdapter);
+
+        setListeners();
+
+        //this comes after the listeners because of some useful bindings done there
+        if (cursor.getCount() == 0){
+            mMoveAccountsRadioButton.setEnabled(false);
+            mMoveAccountsRadioButton.setChecked(false);
+            mDeleteAccountsRadioButton.setChecked(true);
+            mMoveTransactionsRadioButton.setEnabled(false);
+            mMoveTransactionsRadioButton.setChecked(false);
+            mDeleteTransactionsRadioButton.setChecked(true);
+            mAccountsDestinationAccountSpinner.setVisibility(View.GONE);
+            mTransactionsDestinationAccountSpinner.setVisibility(View.GONE);
+        }
+    }
+
+    /**
+     * Binds click listeners for the dialog buttons
+     */
+    protected void setListeners(){
+        mMoveAccountsRadioButton.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                mAccountsDestinationAccountSpinner.setEnabled(isChecked);
+            }
+        });
+
+        mMoveTransactionsRadioButton.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                mTransactionsDestinationAccountSpinner.setEnabled(isChecked);
+            }
+        });
+
+        mCancelButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                dismiss();
+            }
+        });
+
+        mOkButton.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+
+                AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
+
+                if (mMoveTransactionsRadioButton.isChecked()){
+                    long targetAccountId = mTransactionsDestinationAccountSpinner.getSelectedItemId();
+                    //move all the splits
+                    SplitsDbAdapter.getInstance().updateRecords(DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID + " = ?",
+                            new String[]{mOriginAccountUID}, DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID, accountsDbAdapter.getUID(targetAccountId));
+                }
+
+                if (mMoveAccountsRadioButton.isChecked()){
+                    long targetAccountId = mAccountsDestinationAccountSpinner.getSelectedItemId();
+                    AccountsDbAdapter.getInstance().reassignDescendantAccounts(mOriginAccountUID, accountsDbAdapter.getUID(targetAccountId));
+                }
+
+                if (GnuCashApplication.isDoubleEntryEnabled()){ //reassign splits to imbalance
+                    Currency accountCurrency = Currency.getInstance(accountsDbAdapter.getCurrencyCode(mOriginAccountUID));
+                    String imbalanceAccountUID = accountsDbAdapter.getOrCreateImbalanceAccountUID(accountCurrency);
+                    SplitsDbAdapter.getInstance().updateRecords(
+                            DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID + "=?",
+                            new String[]{mOriginAccountUID},
+                            DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID,
+                            imbalanceAccountUID);
+                } else { //kill them all!!
+                    accountsDbAdapter.recursiveDeleteAccount(accountsDbAdapter.getID(mOriginAccountUID));
+                }
+                WidgetConfigurationActivity.updateAllWidgets(getActivity());
+                ((Refreshable)getTargetFragment()).refresh();
+                dismiss();
+            }
+        });
+    }
+
+}
diff --git a/app/src/main/res/layout/dialog_account_delete.xml b/app/src/main/res/layout/dialog_account_delete.xml
index 0638ae49..92db8461 100644
--- a/app/src/main/res/layout/dialog_account_delete.xml
+++ b/app/src/main/res/layout/dialog_account_delete.xml
@@ -1,7 +1,29 @@
 <?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
 
-<CheckBox xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/checkbox_delete_sub_accounts"
-          android:layout_width="match_parent"
-          android:layout_height="match_parent"
-          android:text="@string/label_delete_sub_accounts" />
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <include android:id="@+id/transactions_options" layout="@layout/radio_group_delete_or_move" />
+    <include android:id="@+id/accounts_options" layout="@layout/radio_group_delete_or_move" />
+
+    <include layout="@layout/default_buttons"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
+</LinearLayout>
diff --git a/app/src/main/res/layout/radio_group_delete_or_move.xml b/app/src/main/res/layout/radio_group_delete_or_move.xml
new file mode 100644
index 00000000..b2c003ce
--- /dev/null
+++ b/app/src/main/res/layout/radio_group_delete_or_move.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<RadioGroup xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:orientation="vertical"
+    android:padding="@dimen/dialog_padding"
+    android:layout_height="wrap_content"
+    android:layout_width="match_parent">
+
+    <TextView android:id="@+id/title_content"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textStyle="bold"
+        tools:text="Transactions" />
+
+    <TextView android:id="@+id/description"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textSize="12sp"
+        tools:text="This account contains transactions. \nWhat would you like to do with these transactions"/>
+
+    <RadioButton
+        android:id="@+id/radio_delete"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:text="@string/label_delete_sub_accounts" />
+
+    <RadioButton
+        android:id="@+id/radio_move"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="center_vertical"
+        android:checked="true"
+        android:text="Move to:" />
+
+    <Spinner android:id="@+id/target_accounts_spinner"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"/>
+
+</RadioGroup>

From eed30667aefa84d633a7f362e96486efe2442a66 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 24 Mar 2015 18:29:37 +0100
Subject: [PATCH 26/52] Show the day in the transaction header date

fixes #240
---
 .../org/gnucash/android/ui/transaction/TransactionsListFragment.java | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 7804cc91..91f7b8b5 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -30,6 +30,7 @@
 import android.support.v4.content.Loader;
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.format.DateFormat;
+import android.text.format.DateUtils;
 import android.util.Log;
 import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
@@ -469,8 +470,8 @@ private void setSectionHeaderVisibility(View view, Cursor cursor) {
             TextView dateHeader = (TextView) view.findViewById(R.id.date_section_header);
 
             if (hasSectionHeader){
-                java.text.DateFormat format = DateFormat.getLongDateFormat(getActivity());
-                String dateString = format.format(new Date(transactionTime));
+                String dateString = DateUtils.formatDateTime(getActivity(), transactionTime,
+                        DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR);
                 dateHeader.setText(dateString);
                 dateHeader.setVisibility(View.VISIBLE);
             } else {

From 3176afef253fa0112d3a9f18d57008e08a98c429 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 24 Mar 2015 20:58:16 +0100
Subject: [PATCH 27/52] Extracted hard-coded strings into string resources

Fixed: bug causing accounts not to be deleted after moving sub-accounts
---
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 20 --------
 .../gnucash/android/db/TransactionsDbAdapter.java  |  6 +++
 .../org/gnucash/android/model/ScheduledAction.java |  6 +--
 .../ui/account/DeleteAccountDialogFragment.java    | 54 +++++++++++++---------
 .../ui/transaction/TransactionFormFragment.java    |  4 +-
 app/src/main/res/layout/dialog_account_delete.xml  |  2 +-
 .../main/res/layout/fragment_new_transaction.xml   |  2 +-
 app/src/main/res/values-de/strings.xml             |  5 ++
 app/src/main/res/values-el/strings.xml             |  5 ++
 app/src/main/res/values-es-rMX/strings.xml         |  5 ++
 app/src/main/res/values-es/strings.xml             |  5 ++
 app/src/main/res/values-fr/strings.xml             |  5 ++
 app/src/main/res/values-hu/strings.xml             |  5 ++
 app/src/main/res/values-it/strings.xml             |  5 ++
 app/src/main/res/values-nb/strings.xml             |  5 ++
 app/src/main/res/values-nl/strings.xml             |  5 ++
 app/src/main/res/values-pt-rBR/strings.xml         |  5 ++
 app/src/main/res/values-ru/strings.xml             |  5 ++
 app/src/main/res/values-zh/strings.xml             |  5 ++
 app/src/main/res/values/strings.xml                |  7 ++-
 20 files changed, 112 insertions(+), 49 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index 0af0cb45..eb76a04c 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -494,24 +494,4 @@ public long getTransactionID(String transactionUID) {
         }
     }
 
-    //TODO: After adding ON DELETE CASCADE to db (and migration), remove this method
-    /**
-     * Deletes all splits for a particular transaction and the transaction itself
-     * @param transactionId Database record ID of the transaction
-     * @return <code>true</code> if at least one split was deleted, <code>false</code> otherwise.
-     */
-    public boolean deleteSplitsForTransaction(long transactionId) {
-        String trxUID = getTransactionUID(transactionId);
-        mDb.beginTransaction();
-        try {
-            boolean result = mDb.delete(SplitEntry.TABLE_NAME,
-                    SplitEntry.COLUMN_TRANSACTION_UID + "=?",
-                    new String[]{trxUID}) > 0;
-            mDb.setTransactionSuccessful();
-            return result;
-        } finally {
-            mDb.endTransaction();
-        }
-    }
-
 }
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 9b4cc474..0310698b 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -527,6 +527,12 @@ public Transaction getTransaction(String transactionUID) {
         return getTransaction(getID(transactionUID));
     }
 
+    /**
+     * Return the number of currencies used in the transaction.
+     * For example if there are different splits with different currencies
+     * @param transactionUID GUID of the transaction
+     * @return Number of currencies within the transaction
+     */
     public int getNumCurrencies(String transactionUID) {
         Cursor cursor = mDb.query("trans_extra_info",
                 new String[]{"trans_currency_count"},
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 12747b1f..32e5d289 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -256,7 +256,7 @@ public int getNumberOfOccurences(){
 
     /**
      * Sets the number of occurences of this action
-     * @param occurencesCount
+     * @param occurencesCount Number of occurences
      */
     public void setNumberOfOccurences(int occurencesCount){
         this.mNumberOfOccurences = occurencesCount;
@@ -285,8 +285,8 @@ public void setExecutionCount(int executionCount){
     public String getRepeatString(){
         //TODO: localize the string
         SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy", Locale.US);
-        String repeatString = "Repeats every " + mPeriod/RecurrenceParser.DAY_MILLIS + " days starting on "
-                + dateFormat.format(new Date(mStartDate));
+        String repeatString = String.format("Repeats every %d %s starting on %s", getPeriodType().getMultiplier(), getPeriodType().name().toLowerCase(),
+                dateFormat.format(new Date(mStartDate)));
         if (mEndDate > 0){
             repeatString += " until " + dateFormat.format(mEndDate);
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
index 126f24c2..ef70aab8 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
@@ -37,6 +37,7 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.model.AccountType;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
@@ -92,11 +93,11 @@
      * @return New instance of the delete confirmation dialog
      */
     public static DeleteAccountDialogFragment newInstance(String accountUID) {
-        DeleteAccountDialogFragment frag = new DeleteAccountDialogFragment();
-        frag.mOriginAccountUID = accountUID;
-        frag.mSubAccountCount = AccountsDbAdapter.getInstance().getSubAccountCount(accountUID);
-        frag.mTransactionCount = TransactionsDbAdapter.getInstance().getTransactionsCount(accountUID);
-        return frag;
+        DeleteAccountDialogFragment fragment = new DeleteAccountDialogFragment();
+        fragment.mOriginAccountUID = accountUID;
+        fragment.mSubAccountCount = AccountsDbAdapter.getInstance().getSubAccountCount(accountUID);
+        fragment.mTransactionCount = TransactionsDbAdapter.getInstance().getTransactionsCount(accountUID);
+        return fragment;
     }
 
     @Override
@@ -104,30 +105,27 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
         View view = inflater.inflate(R.layout.dialog_account_delete, container, false);
         mTransactionOptionsView = view.findViewById(R.id.transactions_options);
         ((TextView)mTransactionOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_transactions);
-        ((TextView)mTransactionOptionsView.findViewById(R.id.description)).setText("This account contains transactions. \nWhat would you like to do with these transactions");
+        ((TextView)mTransactionOptionsView.findViewById(R.id.description)).setText(R.string.label_delete_account_transactions_description);
         mDeleteTransactionsRadioButton = (RadioButton) mTransactionOptionsView.findViewById(R.id.radio_delete);
-        mDeleteTransactionsRadioButton.setText("Delete transactions");
+        mDeleteTransactionsRadioButton.setText(R.string.label_delete_transactions);
         mMoveTransactionsRadioButton = ((RadioButton)mTransactionOptionsView.findViewById(R.id.radio_move));
         mTransactionsDestinationAccountSpinner = (Spinner) mTransactionOptionsView.findViewById(R.id.target_accounts_spinner);
 
         mAccountOptionsView = view.findViewById(R.id.accounts_options);
         ((TextView)mAccountOptionsView.findViewById(R.id.title_content)).setText(R.string.section_header_subaccounts);
-        ((TextView)mAccountOptionsView.findViewById(R.id.description)).setText("This account contains sub-accounts. \nWhat would you like to do with these sub-accounts");
+        ((TextView)mAccountOptionsView.findViewById(R.id.description)).setText(R.string.label_delete_account_subaccounts_description);
         mDeleteAccountsRadioButton = (RadioButton) mAccountOptionsView.findViewById(R.id.radio_delete);
         mDeleteAccountsRadioButton.setText(R.string.label_delete_sub_accounts);
         mMoveAccountsRadioButton = (RadioButton)mAccountOptionsView.findViewById(R.id.radio_move);
-
         mAccountsDestinationAccountSpinner = (Spinner) mAccountOptionsView.findViewById(R.id.target_accounts_spinner);
 
-
         mTransactionOptionsView.setVisibility(mTransactionCount > 0 ? View.VISIBLE : View.GONE);
         mAccountOptionsView.setVisibility(mSubAccountCount > 0 ? View.VISIBLE : View.GONE);
 
         mCancelButton = (Button) view.findViewById(R.id.btn_cancel);
         mOkButton = (Button) view.findViewById(R.id.btn_save);
         mOkButton.setText(R.string.alert_dialog_ok_delete);
-        mOkButton.setCompoundDrawables(getResources().getDrawable(R.drawable.content_discard_holo_light),
-                null, null, null);
+        mOkButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.content_discard_holo_light,0,0,0);
         return view;
     }
 
@@ -135,26 +133,38 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         String accountName = AccountsDbAdapter.getInstance().getAccountName(mOriginAccountUID);
-        getDialog().setTitle("Delete: " + accountName);
+        getDialog().setTitle(getString(R.string.alert_dialog_ok_delete) + ": " + accountName);
         AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
         List<String> descendantAccountUIDs = accountsDbAdapter.getDescendantAccountUIDs(mOriginAccountUID, null, null);
 
-        String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID    + " != ? AND "
+        String currencyCode = accountsDbAdapter.getCurrencyCode(mOriginAccountUID);
+        AccountType accountType = accountsDbAdapter.getAccountType(mOriginAccountUID);
+
+        String transactionDeleteConditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID + " != ? AND "
                 + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = ? AND "
                 + DatabaseSchema.AccountEntry.COLUMN_TYPE         + " = ? AND "
                 + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0 AND "
                 + DatabaseSchema.AccountEntry.COLUMN_UID + " NOT IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')"
                 + ")";
-        Cursor cursor = accountsDbAdapter.fetchAccountsOrderedByFullName(conditions,
-                new String[]{mOriginAccountUID,
-                        accountsDbAdapter.getCurrencyCode(mOriginAccountUID),
-                        accountsDbAdapter.getAccountType(mOriginAccountUID).name()
-                });
+        Cursor cursor = accountsDbAdapter.fetchAccountsOrderedByFullName(transactionDeleteConditions,
+                new String[]{mOriginAccountUID, currencyCode, accountType.name()});
 
         SimpleCursorAdapter mCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
                 android.R.layout.simple_spinner_item, cursor);
         mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         mTransactionsDestinationAccountSpinner.setAdapter(mCursorAdapter);
+
+        //target accounts for transactions and accounts have different conditions
+        String accountMoveConditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID + " != ? AND "
+                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = ? AND "
+                + DatabaseSchema.AccountEntry.COLUMN_TYPE         + " = ? AND "
+                + DatabaseSchema.AccountEntry.COLUMN_UID + " NOT IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')"
+                + ")";
+        cursor = accountsDbAdapter.fetchAccountsOrderedByFullName(accountMoveConditions,
+                new String[]{mOriginAccountUID, currencyCode, accountType.name()});
+        mCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
+                android.R.layout.simple_spinner_item, cursor);
+        mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         mAccountsDestinationAccountSpinner.setAdapter(mCursorAdapter);
 
         setListeners();
@@ -225,9 +235,11 @@ public void onClick(View v) {
                             new String[]{mOriginAccountUID},
                             DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID,
                             imbalanceAccountUID);
-                } else { //kill them all!!
-                    accountsDbAdapter.recursiveDeleteAccount(accountsDbAdapter.getID(mOriginAccountUID));
                 }
+
+                //now kill them all!!
+                accountsDbAdapter.recursiveDeleteAccount(accountsDbAdapter.getID(mOriginAccountUID));
+
                 WidgetConfigurationActivity.updateAllWidgets(getActivity());
                 ((Refreshable)getTargetFragment()).refresh();
                 dismiss();
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 4aeeabaa..44702de2 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -766,7 +766,7 @@ else if (mAmountEditText.getText().length() == 0) {
             } else if (mUseDoubleEntry && mDoubleAccountSpinner.getCount() == 0){
                 //TODO: Localize string
                 Toast.makeText(getActivity(),
-                        "Create & specify a transfer account OR disable double-entry in settings to save the transaction",
+                        R.string.toast_disable_double_entry_to_save_transaction,
                         Toast.LENGTH_LONG).show();
             } else {
                 saveNewTransaction();
@@ -882,7 +882,7 @@ public static BigDecimal parseInputToDecimal(String amountString){
     @Override
     public void onRecurrenceSet(String rrule) {
         mRecurrenceRule = rrule;
-        String repeatString = "Not scheduled"; //TODO: localize this string
+        String repeatString = getString(R.string.label_tap_to_create_schedule);
         if (mRecurrenceRule != null){
             mEventRecurrence.parse(mRecurrenceRule);
             repeatString = EventRecurrenceFormatter.getRepeatString(getActivity(), getResources(), mEventRecurrence, true);
diff --git a/app/src/main/res/layout/dialog_account_delete.xml b/app/src/main/res/layout/dialog_account_delete.xml
index 92db8461..437d910a 100644
--- a/app/src/main/res/layout/dialog_account_delete.xml
+++ b/app/src/main/res/layout/dialog_account_delete.xml
@@ -20,8 +20,8 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
-    <include android:id="@+id/transactions_options" layout="@layout/radio_group_delete_or_move" />
     <include android:id="@+id/accounts_options" layout="@layout/radio_group_delete_or_move" />
+    <include android:id="@+id/transactions_options" layout="@layout/radio_group_delete_or_move" />
 
     <include layout="@layout/default_buttons"
         android:layout_width="match_parent"
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index c951fd50..a148cc4b 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -171,7 +171,7 @@
                       android:layout_width="match_parent"
                       android:layout_height="wrap_content"
                       android:gravity="center"
-                      android:text="Tap to create schedule"
+                      android:text="@string/label_tap_to_create_schedule"
                       style="@style/Dropdown.TextView" />
 
         </LinearLayout>
diff --git a/app/src/main/res/values-de/strings.xml b/app/src/main/res/values-de/strings.xml
index 89c3adf7..366352a9 100644
--- a/app/src/main/res/values-de/strings.xml
+++ b/app/src/main/res/values-de/strings.xml
@@ -435,4 +435,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-el/strings.xml b/app/src/main/res/values-el/strings.xml
index 26ccdf23..319639f5 100644
--- a/app/src/main/res/values-el/strings.xml
+++ b/app/src/main/res/values-el/strings.xml
@@ -460,4 +460,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-es-rMX/strings.xml b/app/src/main/res/values-es-rMX/strings.xml
index fe0664a0..571a2e13 100644
--- a/app/src/main/res/values-es-rMX/strings.xml
+++ b/app/src/main/res/values-es-rMX/strings.xml
@@ -445,4 +445,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-es/strings.xml b/app/src/main/res/values-es/strings.xml
index ac956e60..6eb36f4b 100644
--- a/app/src/main/res/values-es/strings.xml
+++ b/app/src/main/res/values-es/strings.xml
@@ -442,4 +442,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-fr/strings.xml b/app/src/main/res/values-fr/strings.xml
index 1fa637c4..ae46c13d 100644
--- a/app/src/main/res/values-fr/strings.xml
+++ b/app/src/main/res/values-fr/strings.xml
@@ -442,4 +442,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-hu/strings.xml b/app/src/main/res/values-hu/strings.xml
index 8a4c8707..064c0402 100644
--- a/app/src/main/res/values-hu/strings.xml
+++ b/app/src/main/res/values-hu/strings.xml
@@ -446,4 +446,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
\ No newline at end of file
diff --git a/app/src/main/res/values-it/strings.xml b/app/src/main/res/values-it/strings.xml
index 17238e53..229dd7c0 100644
--- a/app/src/main/res/values-it/strings.xml
+++ b/app/src/main/res/values-it/strings.xml
@@ -446,4 +446,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-nb/strings.xml b/app/src/main/res/values-nb/strings.xml
index aa2417fb..3409c8ca 100644
--- a/app/src/main/res/values-nb/strings.xml
+++ b/app/src/main/res/values-nb/strings.xml
@@ -442,4 +442,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-nl/strings.xml b/app/src/main/res/values-nl/strings.xml
index fcffe2a4..192dc6f2 100644
--- a/app/src/main/res/values-nl/strings.xml
+++ b/app/src/main/res/values-nl/strings.xml
@@ -447,4 +447,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-pt-rBR/strings.xml b/app/src/main/res/values-pt-rBR/strings.xml
index 3fbd6680..f66ccf17 100644
--- a/app/src/main/res/values-pt-rBR/strings.xml
+++ b/app/src/main/res/values-pt-rBR/strings.xml
@@ -445,4 +445,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-ru/strings.xml b/app/src/main/res/values-ru/strings.xml
index 3cc0a298..0424058b 100644
--- a/app/src/main/res/values-ru/strings.xml
+++ b/app/src/main/res/values-ru/strings.xml
@@ -448,4 +448,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index 52761220..f5aee637 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -439,4 +439,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 31ae59f1..96b953b1 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -328,7 +328,7 @@
     <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
     <string name="toast_success_importing_accounts">GnuCash Accounts successfully imported</string>
     <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
-    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="title_import_accounts">Import GnuCash XML</string>
     <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
         well.
     </string>
@@ -445,4 +445,9 @@
     <string name="label_chart_overall">Overall</string>
     <string name="label_chart_total">Total\n</string>
     <string name="label_save_template">Save as template</string>
+    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
 </resources>

From 6acbe7e47059964bb43b2c7a5dfee22878591eb8 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 27 Mar 2015 14:28:45 +0800
Subject: [PATCH 28/52] future transactions are not included in balance
 calculation

---
 app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java     | 8 +++++++-
 .../main/java/org/gnucash/android/ui/util/AccountBalanceTask.java | 2 +-
 .../gnucash/android/ui/widget/WidgetConfigurationActivity.java    | 2 +-
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index eb76a04c..d4b581a7 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -277,8 +277,14 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
                 TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
 
         if (startTimestamp != -1 && endTimestamp != -1) {
-            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ?";
+            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ? ";
             selectionArgs = new String[]{String.valueOf(startTimestamp), String.valueOf(endTimestamp)};
+        } else if (startTimestamp == -1 && endTimestamp != -1) {
+            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " <= ?";
+            selectionArgs = new String[]{String.valueOf(endTimestamp)};
+        } else if (startTimestamp != -1 && endTimestamp == -1) {
+            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " >= ?";
+            selectionArgs = new String[]{String.valueOf(startTimestamp)};
         }
 
         cursor = mDb.query(SplitEntry.TABLE_NAME + " , " + TransactionEntry.TABLE_NAME,
diff --git a/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
index 4317f1d7..d74ef258 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -55,7 +55,7 @@ protected Money doInBackground(String... params) {
 
         Money balance = Money.getZeroInstance();
         try {
-            balance = accountsDbAdapter.getAccountBalance(params[0]);
+            balance = accountsDbAdapter.getAccountBalance(params[0], -1, System.currentTimeMillis());
         } catch (IllegalArgumentException ex){
             //sometimes a load computation has been started and the data set changes.
             //the account ID may no longer exist. So we catch that exception here and do nothing
diff --git a/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java b/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
index cafc498a..190c165d 100644
--- a/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
@@ -170,7 +170,7 @@ public static void updateWidget(Context context, int appWidgetId, String account
 		RemoteViews views = new RemoteViews(context.getPackageName(),
 				R.layout.widget_4x1);
 		views.setTextViewText(R.id.account_name, account.getName());
-        Money accountBalance = accountsDbAdapter.getAccountBalance(accountUID);
+        Money accountBalance = accountsDbAdapter.getAccountBalance(accountUID, -1, System.currentTimeMillis());
 
         views.setTextViewText(R.id.transactions_summary,
 				accountBalance.formattedString(Locale.getDefault()));

From 6294fd6c3619d7e89d2170843bcb16c8459f8535 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 28 Mar 2015 11:51:25 +0800
Subject: [PATCH 29/52] Prevent importing different ROOT account

---
 .../java/org/gnucash/android/importer/GncXmlHandler.java | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 84039a9b..748edb60 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -18,6 +18,7 @@
 package org.gnucash.android.importer;
 
 import android.database.sqlite.SQLiteDatabase;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -168,7 +169,7 @@ public GncXmlHandler(SQLiteDatabase db) {
         init(db);
     }
 
-    private void init(SQLiteDatabase db) {
+    private void init(@Nullable SQLiteDatabase db) {
         if (db == null) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
@@ -499,9 +500,22 @@ public void endDocument() throws SAXException {
         super.endDocument();
         HashMap<String, Account> map = new HashMap<>(mAccountList.size());
         HashMap<String, String> mapFullName = new HashMap<>(mAccountList.size());
+        Account rootAccount = null;
         for(Account account:mAccountList) {
             map.put(account.getUID(), account);
             mapFullName.put(account.getUID(), null);
+            if (account.getAccountType() == AccountType.ROOT) {
+                if (rootAccount == null) {
+                    rootAccount = account;
+                } else {
+                    throw new SAXException("Multiple ROOT accounts exists in the import file");
+                }
+            }
+        }
+        if (mAccountsDbAdapter.getTotalAccountCount() != 0) {
+            if (rootAccount == null || !rootAccount.getUID().equals(mAccountsDbAdapter.getGnuCashRootAccountUID())) {
+                throw new SAXException("ROOT in db is different from the import file");
+            }
         }
         java.util.Stack<Account> stack = new Stack<>();
         for (Account account:mAccountList){

From 46be7b4ffe0f6a0e0fa4c7de91087b7822a15212 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 28 Mar 2015 20:48:52 +0800
Subject: [PATCH 30/52] cleanup DB at import. Put cleanup and import into one
 transaction

---
 .../org/gnucash/android/db/DatabaseAdapter.java    | 21 ++++++++++++++++
 .../gnucash/android/importer/GncXmlHandler.java    | 29 +++++++++++-----------
 2 files changed, 36 insertions(+), 14 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 312b06a3..647a0196 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -398,4 +398,25 @@ public int updateRecords(String where, String[] whereArgs, @NonNull String colum
     public boolean deleteRecord(@NonNull String uid){
         return deleteRecord(getID(uid));
     }
+
+    /**
+     * Expose mDb.beginTransaction()
+     */
+    public void beginTransaction() {
+        mDb.beginTransaction();
+    }
+
+    /**
+     * Expose mDb.setTransactionSuccessful()
+     */
+    public void setTransactionSuccessful() {
+        mDb.setTransactionSuccessful();
+    }
+
+    /**
+     * Expose mDb.endTransaction()
+     */
+    public void endTransaction() {
+        mDb.endTransaction();
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 748edb60..76a9356d 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -512,11 +512,6 @@ public void endDocument() throws SAXException {
                 }
             }
         }
-        if (mAccountsDbAdapter.getTotalAccountCount() != 0) {
-            if (rootAccount == null || !rootAccount.getUID().equals(mAccountsDbAdapter.getGnuCashRootAccountUID())) {
-                throw new SAXException("ROOT in db is different from the import file");
-            }
-        }
         java.util.Stack<Account> stack = new Stack<>();
         for (Account account:mAccountList){
             if (mapFullName.get(account.getUID()) != null) {
@@ -558,14 +553,20 @@ public void endDocument() throws SAXException {
             account.setFullName(mapFullName.get(account.getUID()));
         }
         long startTime = System.nanoTime();
-        long nAccounts = mAccountsDbAdapter.bulkAddAccounts(mAccountList);
-        Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
-        long nTransactions = mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
-        Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
-        int nSchedActions = mScheduledActionsDbAdapter.bulkAddScheduledActions(mScheduledActionsList);
-        Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
-        long endTime = System.nanoTime();
-        Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
-
+        mAccountsDbAdapter.beginTransaction();
+        try {
+            mAccountsDbAdapter.deleteAllRecords();
+            long nAccounts = mAccountsDbAdapter.bulkAddAccounts(mAccountList);
+            Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
+            long nTransactions = mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
+            Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
+            int nSchedActions = mScheduledActionsDbAdapter.bulkAddScheduledActions(mScheduledActionsList);
+            Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
+            long endTime = System.nanoTime();
+            Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
+            mAccountsDbAdapter.setTransactionSuccessful();
+        } finally {
+            mAccountsDbAdapter.endTransaction();
+        }
     }
 }

From fc7e79b37bf8abd81e3aa0e65e53a6988625f6a9 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 2 Apr 2015 13:52:46 +0200
Subject: [PATCH 31/52] Updated backspace icon in passcode screen entry

Fixed: Could not install development and release versions parallel on same device
This is due to new security features which prevent apps with different signatures from declaring the same permissions
---
 app/src/main/AndroidManifest.xml                         |   8 ++++----
 app/src/main/res/drawable-hdpi/ic_action_backspace.png   | Bin 0 -> 429 bytes
 app/src/main/res/drawable-ldpi/clear_btn.png             | Bin 4281 -> 0 bytes
 app/src/main/res/drawable-mdpi/clear_btn.png             | Bin 4895 -> 0 bytes
 app/src/main/res/drawable-mdpi/ic_action_backspace.png   | Bin 0 -> 344 bytes
 app/src/main/res/drawable-xhdpi/ic_action_backspace.png  | Bin 0 -> 540 bytes
 app/src/main/res/drawable-xxhdpi/ic_action_backspace.png | Bin 0 -> 730 bytes
 app/src/main/res/layout/fragment_numeric_keyboard.xml    |   2 +-
 8 files changed, 5 insertions(+), 5 deletions(-)
 create mode 100644 app/src/main/res/drawable-hdpi/ic_action_backspace.png
 delete mode 100644 app/src/main/res/drawable-ldpi/clear_btn.png
 delete mode 100644 app/src/main/res/drawable-mdpi/clear_btn.png
 create mode 100644 app/src/main/res/drawable-mdpi/ic_action_backspace.png
 create mode 100644 app/src/main/res/drawable-xhdpi/ic_action_backspace.png
 create mode 100644 app/src/main/res/drawable-xxhdpi/ic_action_backspace.png

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 7fe66d94..e931b0e9 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -27,13 +27,13 @@
         android:label="@string/label_permission_group" 
         android:description="@string/description_permission_group" />
     
-    <permission android:name="org.gnucash.android.permission.CREATE_ACCOUNT" 
+    <permission android:name="${applicationId}.permission.CREATE_ACCOUNT"
         android:label="@string/label_permission_create_account"
-        android:permissionGroup="org.gnucash.android.permission.group.GNUCASH"
+        android:permissionGroup="${applicationId}.permission.group.GNUCASH"
         android:protectionLevel="dangerous" />
-    <permission android:name="org.gnucash.android.permission.RECORD_TRANSACTION" 
+    <permission android:name="${applicationId}.permission.RECORD_TRANSACTION"
         android:label="@string/label_permission_record_transaction"
-        android:permissionGroup="org.gnucash.android.permission.group.GNUCASH"
+        android:permissionGroup="${applicationId}.permission.group.GNUCASH"
         android:protectionLevel="dangerous" />
     
     <uses-permission android:label="@string/label_permission_record_transactions"
diff --git a/app/src/main/res/drawable-hdpi/ic_action_backspace.png b/app/src/main/res/drawable-hdpi/ic_action_backspace.png
new file mode 100644
index 0000000000000000000000000000000000000000..598043105ac90f529e6f81d263435ce5b2eb2497
GIT binary patch
literal 429
zcmV;e0aE^nP)<h;3K|Lk000e1NJLTq001xm001xu1^@s6R|5Hm0000PbVXQnQ*UN;
zcVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBUzPf0{URCwC#mp=}IFcij-IB^EO0|^te
ztA}89bu?Z<&cMte9ChLVx;nEu`)G<m{<Y9of#mxo4GjJBzV`Kdsp9|u0001h#j+YY
zAP54FKD&wIzGYdK7eDI}!5^t@Cl>IaCIq+(4E_gqCc(e02^bmti`q$kRV38nu_9bc
zJD<u+7Ar&~)bCEM=yPQiV3;-s8o#B$-aR5j@N%t?K6^F+3^^~x_lT$mAF<s5#tYje
zf-U&gLPnFGncYSNFY~;*j!Ezrn(x^-0h%<jV3p-bc$Ia0)17amkX&G6$>&p<MkP;8
zi`5sPa10ZwIqz$@)A&nlK}7w+9u)3m?m~<ry4=R&6wz7-7$#O(C7X!OO3bl43ak8z
zu==1eC~U<Egqn3CA2@$|9bi6*P_v(BQhT)C0~RgzKM$HYi&*@l9smFU001nQj{pMz
X3!}OyC`@%B00000NkvXXu0mjf)6lJY

literal 0
HcmV?d00001

diff --git a/app/src/main/res/drawable-ldpi/clear_btn.png b/app/src/main/res/drawable-ldpi/clear_btn.png
deleted file mode 100644
index 2bdcc84df5617ee12241a77e5a260375b15e20d7..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4281
zcmV;q5JvBbP)<h;3K|Lk000e1NJLTq0012T0012b1^@s6R+DEB00004XF*Lt006O%
z3;baP000U>X+uL$Nkc;*P;zf(X>4Tx07wm;mUmQB*%pV-y*Itk5+Wca^cs2zAksTX
z6$DX<Nq|rShJ+?|L<L3^5h+$=RKNj8hazJ|6bplbV%G`s5KzX!QA9=M-HdAq@2xfS
z-kSZ#S>M^`x7XQc?|s+008spb1j2M!0f022SQPH-!CVp(%f$Br7!UytSOLJ{W@ZFO
z_(THK{JlMynW#v{v-a*TfMmPdEWc1DbJqWVks>!kBnAKqMb$PuekK>?0+ds;#ThdH
z1j_W4DKdsJG8Ul;qO2n0#IJ1jr{*iW$(WZW<e?f_&KbNko{YOt-kK%hql^ThT$m-`
zXQO-vWxZ5MngHeZDAUvUoJ;^P6q#Sl=O&?Si84hL8SaVl0ssh<#5ufj4vYCYXr2Ig
zrf1}e1c^yvrV-beY31n1X8Q57Q~6>sE0n`c;fQ!l&-AnmjxZO1uWyz`0VP>&nP`#i
ztsL#`S=Q!g`M=rU9)45(J;-|dRq-b5&z?byo>|{)?5r=n76A4nTALlSzLiw~v~31J
z<>9PP?;rs31pu_(obw)rY+jPY;tVGXi|p)da{-@gE-UCa`=5eu%D;v=_nFJ?`&K)q
z7e9d`Nfk3?MdhZarb|T3%nS~f&t(1g5dY)AIcd$w!z`Siz!&j_=v7hZlnI21XuE|x
zfmo0(WD10T)!}~_HYW!eew}L+XmwuzeT6wtxJd`dZ#@7*BLgIEKY9Xv>st^p3dp{^
zXswa2bB{85{^$B13tWnB;Y>jyQ|9&zk7RNsqAVGs--K+z0uqo1bf5|}fi5rtEMN^B
zfHQCd-XH*kfJhJnmIE$G0%<@5vOzxB0181d*a3EfYH$G5fqKvcPJ%XY23!PJzzuK<
z41h;K3WmW;Fah3yX$XSw5EY_9s*o0>51B&N5F1(uc|$=^I1~fLLy3?Ol0f;;Ca4%H
zgQ}rJP(Ab`bQ-z{U4#0d2hboi2K@njgb|nm(_szR0JebHusa+GN5aeCM0gdP2N%HG
z;Yzp`J`T6S7vUT504#-H!jlL<$Or?`Mpy_N@kBz9SR?@vA#0H$qyni$nvf2p8@Y{0
zk#Xb$28W?xm>3qu8RLgpjNxKdVb)?wFx8l2m{v>|<~C*!GlBVnrDD~wrdTJeKXwT=
z5u1%I#8zOBU|X=4u>;s)>^mF|$G{ol9B_WP7+f-LHLe7=57&&lfa}8z;U@8Tyei%l
z?}87(bMRt(A-)QK9Dg3)j~~XrCy)tR1Z#p1A(kK{Y$Q|=8VKhI{e%(1G*N-5Pjn)N
z5P8I0VkxnX*g?EW941ba6iJ387g8iCnY4jaNopcpCOsy-A(P2EWJhusSwLP-t|Xrz
zUnLKcKTwn?CKOLf97RIePB}`sKzTrUL#0v;sBY9)s+hW+T2H-1eM)^VN0T#`^Oxhv
zt&^*fYnAJldnHel*OzyfUoM{~Um<@={-*r60#U(0!Bc^wuvVc);k3d%g-J!4qLpHZ
zVwz%!VuRu}#Ze`^l7W)95>Kf>>9Eozr6C$Z)1`URxU@~QI@)F0FdauXr2Es8>BaOP
z=)Lp_WhG@><tXJG<r?L)%2EcxFktvIQW>R;lZ?BJkMlI<xzFRz+cvLhUjMu)mH8@e
zDtwh9m1dOzm5-`SRd3Z4)t#zss!!A~Y9?x7YT0W0)h?@z&!^9Kp3j|MH2>uMhw8Ap
ziF&yDYW2hFJ?fJhni{?u85&g@mo&yT8JcdI$(rSw=QPK(Xj%)k1X|@<=e1rim6`6$
zRAwc!i#egKuI;BS(LSWzt39n_sIypSqfWEV6J3%nTQ@<sT(?tqLQhLCSTA3%QSYHX
zQJ<}!q`ybMTYt*H&>-4ii$R;gsG*9XzhRzXqv2yCs*$VFDx+GXJH|L;wsDH_KI2;^
zu!)^Xl1YupO;gy^-c(?^&$Q1BYvyPsG^;hc$D**@Sy`+`)}T4VJji^bd7Jqw3q6Zi
zi=7tT7GEswEK@D(EFW1ZSp`^awCb?>!`j4}Yh7b~$A)U-W3$et-R8BesV(1jzwLcH
znq9En7Q0Tn&-M=XBKs!$F$X<|c!#|X_t<oHD7%Dx)e-CH;keH6jN=C<dnd8eNvGeP
zS<WfW4bGzr3>WYh)GZit(Q)Cp9CDE^WG;+fcyOWARoj*0TI>4EP1lX*cEoMO-Pk?Z
z{kZ!p4@(b`M~lalr<3Oz&kJ6Nm#<fmSFg8{_hRpA@25UGK8Ze!J`=unzN>vN_+kA5
z{dW4@^Vjg_`q%qU1ULk&3Fr!>1V#i_2R;ij2@(Z$1jE4r!MlPVFVbHmT+|i<Li|H^
zg**v03|$raa~LixG^{4<dAL=0et35TEn-DPL&UpCkI2%<M~jUXOBQ!V$w$RS)kjT5
zdqtN;OP5$IS+nFuj9QE!racxP8x?ybc5<or(%nmk<Lu%J<L)jqT$Z!!+H$q!smsr<
zkYB-BaVj1gA06Ki|A`aAspU+r^k2Dm<pkH0yNCOd=f*4NjqzRhW&Du@mxQu}(L|TT
zU5R5!u1OV1;{s1XwcvHKU-E(Esg#hEqbW0~(W%X8gtYjy(?TU-im)qPGd(B0FT*sW
zFhjb^Y1Qsk6QV%TkxVFaS!TPKj{Z#bNQ@+#C4*TDvud*5XGdk9%2CV_=Je#6<ZjCy
z$@9tkel=z_cXemJcK(L^!8Pt{4y}dOu3X!>PIq0wy5aS{>yK?9ZAjVh%SOwMWgFja
zir&;wpi!{CU}&@N=Eg#~LQ&zpEzVmGY{hI9Z0+4<v#n~|mm*%#^<vB7isDZt+>-0x
zS$$Xe-OToc?Y*V;rTcf_b_jRe-RZjXSeas3UfIyD;9afd%<`i0x4T#DzE)vdabOQ=
zk7SRuGN`h>O0Q~1)u-yD>VX=Mn&!Rgd$;YK+Q-}1zu#?t(*cbG#Ronf6db&N$oEid
ztwC+YVcg-Y!_VuY>bk#Ye_ww@?MU&F&qswvrN_dLb=5o6*Egs)ls3YRlE$&)amR1{
z;Ppd$6RYV^Go!iq1UMl%@#4q$AMc(FJlT1QeX8jv{h#)>&{~RGq1N2iiMFIRX?sk2
z-|2wUogK~{EkB$8eDsX=nVPf8XG_nK&J~=SIiGia@<PUi@r#KUhdNhuKDxBz(w(lb
zuHMUmm#<#&xpJx7z5D!Cm#b&4IbAz_oqfIShW(A!9=o2FU+jKq>9y}|z3FhX{g&gc
zj=lwb=lWgyFW&aLedUh-of`v-2Kw$UzI*>(+&$@i-u=-BsSjR1%z8NeX#HdC<Dw@D
zPb!|OKdt@M_}6Bsz4Yv$*I>`Hh-Z(6xI-`hmHDqv!v)W&&nrf>M(RhcN6(D;jNN*%
z^u_SYjF;2ng}*8Ow)d6MtDk;%`@Lsk$;9w$(d(H%O5UixIr`T2ZRcd@<kNR)@201U
z-mAVp_JRGO`(yOSk?HJD_)nFejX!sM3H<VSCT(Ws-}i*``!YINegFUf32;bRa{vG?
zBLDy{BLR4&KXw2B1`bI?K~zW$t(Jdil~owW-}l|UySsPloK$N!#F`9Z`$GaHA`u4b
zr!+FzCisUW%@Kp45G3xmI@$1#(7{Z|(SllS6w^jf{-b}2L4VjPvSw`E&D7zN_Uqo=
z`}X;sz3=7THU~uq4(FWb*Y`Qkd7kHeZR_6++jU*5qoc$2)!N$HT-!EB*Qfn2YkPaU
zGdMVyvzD>y>gpWHttI30(jNPS%#~Z&H8nNP(9lp)bQui>gGGr%qR4Ta5Ty9x;^Lic
z+qT_C&d3NH2UFbsp*Mdhr~sHLft@;a>d|;SUTa(S8?NP+LfXj8WhO8_gLA*KzlcKv
zO-)Tx>@9)&&gz^wRs~fk<vE}cgd3T4;c&Pl5C~XHOH0<m!ongz3(!M(48W{pGHK1t
z&5h$kAH4U_eZUMbmypXED?oj~&d$za!uT;@6&RAiX*7qKSD3#rA28R!+X~1o);-`C
zL9^!P=dZEs1Ms)ifU`gmFd_8-F9En60}Amu=2`eZv#vVemB45KyaDhK(HQ03Uu$V;
zx%JObr$O-+dD}%f!a9Ot1%Q9CKSWs!2uU*a_4R>hG-{H@LwCx`%3ME@(0?6zUnCMK
zME`my6nf$4(W8I*_N5c>6fI>bdl_r=0CmH9AMo_))A=|s3oVgpfU~kx&Te4p9fw<6
zTV0;x({LobV}5S_9r!I7_AOIa2%54`mLgDxaTe<w^iQ<u?(SYcJ3D)sbC=HW1)`^r
zzDu*%&3cVcJ}>_9<Hs+uoN-g8Y7U+}d2+Kd*^^%eB|HX&ci5*a^^)eS40LsM6%eM&
zgy}i5_gxe_Mb}`T0`L`XJ_P^ioSdAmI9DultzK$4mY<&=CF2i>Haa?LaO9~PfbjyQ
zJxuY3F=&z|7K^Dgen_QKDwkAlZtgL79Rg&&4B!_eOjsquxJAa_)&|}<yg_(6R-He8
zKIql0?Z6PxQm0{G>M36lO@ci=J&PDPh_MfNYlkLb(Ii^A(T9j!;P!c5{odgGBBA^d
zc{L6_!&RcE?Ut#jsm<EJvmKQE&^``rqY9r@b!Z`&eg}l>;Jt4mVOuUv9>8c+5x|je
zacVa*cbG~}(-64CP3SYo6>^zk+0-z1*9If<E*C+$rouM^BPrFH4(#7X`4Ts?0b0PA
z1!#=7dzIRrP-KwF>_D<3dqH%}?PVto%0A9aFxAM{G1H^GyxhD2QF#gCcC|v@D$jeG
z$4H_&2~)!fKr?O1P6)Xr9F%=C9DNV9)7JvV4DXi5x^<atoU$?GXX!8=N4*=~#hAV(
zK|ni^F<C9y$;n9*8F;107qZ@Gngo+whl8=N&l5(*5K`yaC89bFi|SBi@wslNY$T-D
zk$VPS4?fD_6z5~ewMnnCveJB=(Ah}|%HBjlLBa3h;gqXTxOy|MjSVX?aAXh660ejV
zL8+Hg2@8<7yaB-8=H})YGKZ<*3-BCeJ#<LzRnjAipTJJ7>@h|f8yi&x2G7Lbe>0M4
zK%XbP*Vm#!(g@x|u@NxrCclGJ3E%{DlNhXT!RsZ&7Ma>HJw5%k^mz9}(6-RY?sDuG
z%^wC7MU$cW0OMVsn5+%Z)x6c#zT~`@o9>5Z%7Qh{H2R1fp`7*?7Z-P`uIar>xWkGJ
zqaV33MU&NBd-*}(5JK#lp1OhKH@wBOgiZ<YCdsB=Y6gnBVY(~;%JJ&i81yo{AN?Yt
z_C2x{=-gwb|3uQDvgm*J5O@->5fsZ&RGpn+_Cg<*+-gH_sF1=t!e?zgdSmR>Fn;pw
z`g&QQA|j-0SUPdy#8bTGX8`X|GN^eIjX|8b%6bz~|IeY6^G@isdP9ZOyJ58eeS5O)
zj}@R|_=5Vv@K*XB9>n{oS|Dd7%nUR|AVkI%;+V?FB5CeG`-s_%4TaQPfOFPZ6;u+L
zA<_4c&>etW#oWTJ3R#2PP@U#J>jdW!rb!ysEPb6b$3sCSgt4suUiDUzW^>X>76;rw
zE`V`v_{XMAn<i9;(vh<&L2hXhOSJzqFyP48TFR2qTua91t$9;lC}UM0UZDfcw95>+
bHMf5QbB2bGuTWZe00000NkvXXu0mjfDez4D

diff --git a/app/src/main/res/drawable-mdpi/clear_btn.png b/app/src/main/res/drawable-mdpi/clear_btn.png
deleted file mode 100644
index c25ead0007b173e214da1f116b675413d10b7d4b..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4895
zcmV+)6X5KLP)<h;3K|Lk000e1NJLTq001Tc001Tk1^@s6s6FYf00004XF*Lt006O%
z3;baP000U>X+uL$Nkc;*P;zf(X>4Tx07wm;mUmQB*%pV-y*Itk5+Wca^cs2zAksTX
z6$DX<Nq|rShJ+?|L<L3^5h+$=RKNj8hazJ|6bplbV%G`s5KzX!QA9=M-HdAq@2xfS
z-kSZ#S>M^`x7XQc?|s+008spb1j2M!0f022SQPH-!CVp(%f$Br7!UytSOLJ{W@ZFO
z_(THK{JlMynW#v{v-a*TfMmPdEWc1DbJqWVks>!kBnAKqMb$PuekK>?0+ds;#ThdH
z1j_W4DKdsJG8Ul;qO2n0#IJ1jr{*iW$(WZW<e?f_&KbNko{YOt-kK%hql^ThT$m-`
zXQO-vWxZ5MngHeZDAUvUoJ;^P6q#Sl=O&?Si84hL8SaVl0ssh<#5ufj4vYCYXr2Ig
zrf1}e1c^yvrV-beY31n1X8Q57Q~6>sE0n`c;fQ!l&-AnmjxZO1uWyz`0VP>&nP`#i
ztsL#`S=Q!g`M=rU9)45(J;-|dRq-b5&z?byo>|{)?5r=n76A4nTALlSzLiw~v~31J
z<>9PP?;rs31pu_(obw)rY+jPY;tVGXi|p)da{-@gE-UCa`=5eu%D;v=_nFJ?`&K)q
z7e9d`Nfk3?MdhZarb|T3%nS~f&t(1g5dY)AIcd$w!z`Siz!&j_=v7hZlnI21XuE|x
zfmo0(WD10T)!}~_HYW!eew}L+XmwuzeT6wtxJd`dZ#@7*BLgIEKY9Xv>st^p3dp{^
zXswa2bB{85{^$B13tWnB;Y>jyQ|9&zk7RNsqAVGs--K+z0uqo1bf5|}fi5rtEMN^B
zfHQCd-XH*kfJhJnmIE$G0%<@5vOzxB0181d*a3EfYH$G5fqKvcPJ%XY23!PJzzuK<
z41h;K3WmW;Fah3yX$XSw5EY_9s*o0>51B&N5F1(uc|$=^I1~fLLy3?Ol0f;;Ca4%H
zgQ}rJP(Ab`bQ-z{U4#0d2hboi2K@njgb|nm(_szR0JebHusa+GN5aeCM0gdP2N%HG
z;Yzp`J`T6S7vUT504#-H!jlL<$Or?`Mpy_N@kBz9SR?@vA#0H$qyni$nvf2p8@Y{0
zk#Xb$28W?xm>3qu8RLgpjNxKdVb)?wFx8l2m{v>|<~C*!GlBVnrDD~wrdTJeKXwT=
z5u1%I#8zOBU|X=4u>;s)>^mF|$G{ol9B_WP7+f-LHLe7=57&&lfa}8z;U@8Tyei%l
z?}87(bMRt(A-)QK9Dg3)j~~XrCy)tR1Z#p1A(kK{Y$Q|=8VKhI{e%(1G*N-5Pjn)N
z5P8I0VkxnX*g?EW941ba6iJ387g8iCnY4jaNopcpCOsy-A(P2EWJhusSwLP-t|Xrz
zUnLKcKTwn?CKOLf97RIePB}`sKzTrUL#0v;sBY9)s+hW+T2H-1eM)^VN0T#`^Oxhv
zt&^*fYnAJldnHel*OzyfUoM{~Um<@={-*r60#U(0!Bc^wuvVc);k3d%g-J!4qLpHZ
zVwz%!VuRu}#Ze`^l7W)95>Kf>>9Eozr6C$Z)1`URxU@~QI@)F0FdauXr2Es8>BaOP
z=)Lp_WhG@><tXJG<r?L)%2EcxFktvIQW>R;lZ?BJkMlI<xzFRz+cvLhUjMu)mH8@e
zDtwh9m1dOzm5-`SRd3Z4)t#zss!!A~Y9?x7YT0W0)h?@z&!^9Kp3j|MH2>uMhw8Ap
ziF&yDYW2hFJ?fJhni{?u85&g@mo&yT8JcdI$(rSw=QPK(Xj%)k1X|@<=e1rim6`6$
zRAwc!i#egKuI;BS(LSWzt39n_sIypSqfWEV6J3%nTQ@<sT(?tqLQhLCSTA3%QSYHX
zQJ<}!q`ybMTYt*H&>-4ii$R;gsG*9XzhRzXqv2yCs*$VFDx+GXJH|L;wsDH_KI2;^
zu!)^Xl1YupO;gy^-c(?^&$Q1BYvyPsG^;hc$D**@Sy`+`)}T4VJji^bd7Jqw3q6Zi
zi=7tT7GEswEK@D(EFW1ZSp`^awCb?>!`j4}Yh7b~$A)U-W3$et-R8BesV(1jzwLcH
znq9En7Q0Tn&-M=XBKs!$F$X<|c!#|X_t<oHD7%Dx)e-CH;keH6jN=C<dnd8eNvGeP
zS<WfW4bGzr3>WYh)GZit(Q)Cp9CDE^WG;+fcyOWARoj*0TI>4EP1lX*cEoMO-Pk?Z
z{kZ!p4@(b`M~lalr<3Oz&kJ6Nm#<fmSFg8{_hRpA@25UGK8Ze!J`=unzN>vN_+kA5
z{dW4@^Vjg_`q%qU1ULk&3Fr!>1V#i_2R;ij2@(Z$1jE4r!MlPVFVbHmT+|i<Li|H^
zg**v03|$raa~LixG^{4<dAL=0et35TEn-DPL&UpCkI2%<M~jUXOBQ!V$w$RS)kjT5
zdqtN;OP5$IS+nFuj9QE!racxP8x?ybc5<or(%nmk<Lu%J<L)jqT$Z!!+H$q!smsr<
zkYB-BaVj1gA06Ki|A`aAspU+r^k2Dm<pkH0yNCOd=f*4NjqzRhW&Du@mxQu}(L|TT
zU5R5!u1OV1;{s1XwcvHKU-E(Esg#hEqbW0~(W%X8gtYjy(?TU-im)qPGd(B0FT*sW
zFhjb^Y1Qsk6QV%TkxVFaS!TPKj{Z#bNQ@+#C4*TDvud*5XGdk9%2CV_=Je#6<ZjCy
z$@9tkel=z_cXemJcK(L^!8Pt{4y}dOu3X!>PIq0wy5aS{>yK?9ZAjVh%SOwMWgFja
zir&;wpi!{CU}&@N=Eg#~LQ&zpEzVmGY{hI9Z0+4<v#n~|mm*%#^<vB7isDZt+>-0x
zS$$Xe-OToc?Y*V;rTcf_b_jRe-RZjXSeas3UfIyD;9afd%<`i0x4T#DzE)vdabOQ=
zk7SRuGN`h>O0Q~1)u-yD>VX=Mn&!Rgd$;YK+Q-}1zu#?t(*cbG#Ronf6db&N$oEid
ztwC+YVcg-Y!_VuY>bk#Ye_ww@?MU&F&qswvrN_dLb=5o6*Egs)ls3YRlE$&)amR1{
z;Ppd$6RYV^Go!iq1UMl%@#4q$AMc(FJlT1QeX8jv{h#)>&{~RGq1N2iiMFIRX?sk2
z-|2wUogK~{EkB$8eDsX=nVPf8XG_nK&J~=SIiGia@<PUi@r#KUhdNhuKDxBz(w(lb
zuHMUmm#<#&xpJx7z5D!Cm#b&4IbAz_oqfIShW(A!9=o2FU+jKq>9y}|z3FhX{g&gc
zj=lwb=lWgyFW&aLedUh-of`v-2Kw$UzI*>(+&$@i-u=-BsSjR1%z8NeX#HdC<Dw@D
zPb!|OKdt@M_}6Bsz4Yv$*I>`Hh-Z(6xI-`hmHDqv!v)W&&nrf>M(RhcN6(D;jNN*%
z^u_SYjF;2ng}*8Ow)d6MtDk;%`@Lsk$;9w$(d(H%O5UixIr`T2ZRcd@<kNR)@201U
z-mAVp_JRGO`(yOSk?HJD_)nFejX!sM3H<VSCT(Ws-}i*``!YINegFUf32;bRa{vG?
zBLDy{BLR4&KXw2B2y{tAK~z`?)tFgql~oYO@4fA93q>HMK|m;49u$Zq#5V+F(HKAy
z*2aJ!O9YhwYElrwzR2=KYGf(0RgtACCK!xik+8k+pqNl1MiNK>16U}<(%as}-~aTR
zk9*r&D3J#}$@H8vXU@$3%*>hZ+y(;w(H8s{xPr@;Epz*qE?t^P*0X&1a-Saz22<9O
z<(}v`kw^r`j~}1WQl*mR0HK!3o804gOn^e=<>fKkjKMs{T|{^$SNvEkRuc+^t~0y_
zRU#7?UjW&waf>|IB49eP8KBQWc|T}0U|z$60+$VCLTXX?5%^V%k3k1=b8}A?7Z?An
z#bjNYH`g8s%oNef@Nj4fG&&p(2QVH0gir8Yi^t>s8XgQVKZM*)<PV~!)^wVDy8fZS
zOaXlXn?HfZWz(Y3sMF;EP{@9TZa@lCKGX;5mXXnrit6j?>goaaeSLlXf>o<l{bst6
zOWT?SW*b+mSkaf0Zp+Nf>}#H2ejPe2FJSayb#?W<nwpwgS?JKAgTmSdDugCO!;tGr
z-UUPey9jSO`cIh+=1p2!V75V^0P_`Ld%+7y4H|X<=F`QC7hh<iEe&Jk%9TCX`#ww4
z0M=gM@c0$_x0Wnfa?)%y-r5A13DOskJl}=!lm|+onhSrgr^K&gnp-Wi8YUjHx`nPW
zeuKeh9I5~h3fv#iNWyx7HUDyX;(^A%G*2L?MBj<0CK@P|O~LpN$w~+(?DPdRS<c4v
z1CcL-x-0Jhb`TwJ!dE1mZ3C84_*AE~K=?+`jZ;oR+B8?7X3UroMoFAgKC@`iqMjb8
z#)k_a<2*p$k&wTrJzk+bfv)$^St;E#-SSZym~D;Kd|*1giYH2Pi2vKVeefi+3*KHR
zR9aeEuXRqkmCJC3aevkm`}gnnzXTqD_}aB=+u?)Fc;*P;26(zdIv{&W6$v7uebXgt
z>&#vAffW@M+1M3NjH?!1SE5T25OGLVz8u~#fVF45hYRuwdt(A8P%<!Y-n^%3YiqY<
zg|k%eIwHTDL?0_1(nZ^Zw=WAEdWIl7w1NHLuYqyi^4P9;Y7DT$-tDt+6{1jKR({lB
zv@0RmXW+b3w{6|J_2*exS!1bPG0H<cCnu*HQFvAR)Btz|-QPCM+}|Qg6Zp=S1BRfR
z(C1-TpBd$rD*8@s^VW3>Pca?ONvrWf7T_X)dm8yK0Qa&y#rh6F6#+=!)DRvC;gQYv
z@8AEJc_1n5W#};v_RG)D*QYIDx7s`=o>~`-2%Lpc#n75dICA707&A~B!3+8d)B~~`
z2ic9M_5frIo<dC`1i&EcJCL8dZr!>nc)^N_3a5v)tMJdu7Of5Q9vYzEtvg^gfv+6O
z_Jq%=qDwfb$!ofCs%2B;IlzT69;NS&_eL<37lMp~0Nl<OLA9?=`G?+w*<!64xpVB3
zdfDu(fwdHmv8bm@rU&eXeP&D<YpQV~2M)QZfV)GViO1r~CuBm}&$xu~to7^HSKFmv
z?mqbH(V<V+4bN64-gM6<Z~mZMNI12nFPz9EdiCn%{ExDqnEyifY%6-*QUr#3No?7&
zC9F$f0*!hXHt{%@+i2@49^>>Xrtay0{(SF)>?fo)>GUcO^XJcR$F!9E8kFRzAYkKw
z(}#R3i9C4b%$fB`39sChn!xPYvn7-7&0~brz1M8r0rPJ{!^^V{^irUwi(UzSQwXh2
zwQAL>l!P72VPpxtA?*>U5c^}~*t5+2I;R6kk=f$Vy1{(}ggpxDpIWz;;xU+dTiuZ`
zts7LRfto-;uA+1M{F0#1DU^UwPECYvGtb}>xKaZDOZN4*a9SE5*9q$5IYHjK1o^-n
zu%zU!WbK%Y5hBS=)*k^9EnK*;v#aP{@#Fv@-9A8U&&$i3hm3CPEP=v<*@Rf7q$|8~
zJoUPCkp{XTY7<y<Mi`%kZi#7F958?+<Z2mb?EvACjM^~0ry7QV0HJ$MJa0XSXH*h)
zaC<+PGiOeO{h27<gN#baJ-~(OV|;cyafp$gp2X_at2<+}NOK<M3gtfb)<L?_E?j;n
zd-v|`82aIWdk^U_2z5oT9(l?i)vz=0Cd0dfu@Iiw%+kA75?I$G!0Oyo^wc7k5s5@f
z&^upx)NtfGbcM>xXe@e~C>(JMNq@|hf#b)IJFjinupu&d@ZfrkkCLka)N|0FLFeIJ
z^o&+8z6+?E==l)d{p31@9(M?2D%f`wJ-4f>sy^bAr5hhWejwc%RJTQkSj%}voso`>
z8#h{*@ndS!Tm>|TUQg=LC{|)$VLl1|33?|(@0vVm?l&I2FT);pX|x8omyq9$r=EA-
zibjtzAA`)@#(MlvdP=RT*K(Q#xcql1;B*BTFC&46A?HFadDSOfe<@|^NMj5It#&bX
zUZ5YyngfL{h4UJHu|Pq7Zb`42lr?D*gme@8v$&fiFTiW^oNjF?w23u&@sUl5?&Z`>
z4ya%3dNSRlpTtG^(QGwVloptTYy<8e0H7U&wTHkdv>fL$e$#uZOs@oekdarB43w0V
zWLH*Js(7kSO#pyyUm>0k%KM(DracT4^65RM1vLYw_dQ-)hmqj`%y8gXr&pNHL+2p<
zic*;E2X7xd<Sv&7NVohbRLpDkXVZ;*+SaVcOxhICw}z)54%4wW1OrY)y$su&JkqUH
z*!^`vcN*Sy7+<5u<rIB`fRk$a=aIm)1ttE?(#M<c<WSfOQ9nrEQ+<%_iJ|JO*M;74
zX92uVb!yF;HGeTr(WQBFtwq4R%_;we(i>gRVZA&t-WiYN;w9ygzI*y0UxIFNs5<Re
zo#LkIBk$j8@t;`pyw|wQG^_t{<(pO1(gi%^p4sX}>~myu0rL1QRr&vr`v>)#9^US5
R#F_vA002ovPDHLkV1jaAgOmUO

diff --git a/app/src/main/res/drawable-mdpi/ic_action_backspace.png b/app/src/main/res/drawable-mdpi/ic_action_backspace.png
new file mode 100644
index 0000000000000000000000000000000000000000..20460712d00ee291239ae31a23374d13f67c286c
GIT binary patch
literal 344
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdz$r9IylHmNblJdl&R0hYC{G?O`
z&)mfH)S%SFl*+=BsWw1GzdT(WLn>}1B}lL?P7vv7Vr1+2q0-yiyR#ugP~h~X1Mlu_
zPCtJyNlM}L!-h_#)AG)SdOIJdST?ZCZ`OHn_)*94fRB4stQ(Fb@G~dXnz$d(5pSF2
zEMO2U@tn=!4^xLZgQ2~^dB;t2x&t`u>i_-GE#f#bdFBJ5h6vsni^Lf+{giawdzn_e
zZ$0UAVnM=w*3^3TN844NGc9<%|Di{~kqExN;sxrzHZI|OB&;ae=ipxubK!-;NkNUB
z4KD6$4o!TJ&==tvq}RZhaO#h)s%k0Qi7Rc(a%wCO2)Q>IHzb7x6)~<<Jm{*hwRmEv
nP|yT5w}ToWe`YW>FfcQ0mIw(nP-?OTh6019tDnm{r-UW|tOSD8

literal 0
HcmV?d00001

diff --git a/app/src/main/res/drawable-xhdpi/ic_action_backspace.png b/app/src/main/res/drawable-xhdpi/ic_action_backspace.png
new file mode 100644
index 0000000000000000000000000000000000000000..50caef11223591096c472e7f3d41a3c1a9aa7cf6
GIT binary patch
literal 540
zcmV+%0^|LOP)<h;3K|Lk000e1NJLTq002M$002M;1^@s6s%dfF0000PbVXQnQ*UN;
zcVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBUzzDYzuRCwC#nXhicFc8MGj*SeAMJpXC
z7zipZ9Uk3iY2Ra|rF)3IL&+iyj|OBUw4|ix$&nW2ukE{wmV7_y<W_29e_!nL#fc&S
z000000000005C7ELNAac$qh9-ise7i{FbKacll*8Gx0SRa~AJyz*NM08Nehyv*F5#
z;%hVm7{%{xWRBwZl)w(u9@PzCoc0G2aWdgxLMi_Dx75B<Q>Yohyymy|deJ}=D&p;U
zUa7fLF+d>Und|HZn$RYGt+E6Jv;7bg#Km_Sps>|-nV=%xa6R%qe@n57<M=br^Ro%_
z*<^VV|05*+Nc|LjGhnM&<kV&YMIn9XTMe)sJ}4Jt#)OxKv1}y8*9@?C;eLdQ)U5fB
zrs?WgG5Q(cSe$T*uOvLp@zj#wpG35>NlI0`S%TF6Q$u3p8c%-`RGJB0Tb)a>BvS_n
zn=oXbS23Zp5)|sxrN|LCq4!xppi|chugwI#r$J^DHXcPz#RTG!>uJ#GRG6_uE)O(Z
zi=52<_c@?%|5IVcnXvY(@Rot%!;Zv8ES7XC!8w}X{a#=yCIr11n%Z&z0000000000
e0048~BESI6)D|wbCj)%|0000<MNUMnLSTYVc<wy_

literal 0
HcmV?d00001

diff --git a/app/src/main/res/drawable-xxhdpi/ic_action_backspace.png b/app/src/main/res/drawable-xxhdpi/ic_action_backspace.png
new file mode 100644
index 0000000000000000000000000000000000000000..b4e4a73faea2f8ff90762afee4bd00d0b340796b
GIT binary patch
literal 730
zcmeAS@N?(olHy`uVBq!ia0vp^2_VeD1|%QND7OGok|nMYCBgY=CFO}lsSJ)O`AMk?
zp1FzXsX?iUDV2pMQ*9U+m})#-978H@y_vn&kI7NQZMveFiI_>-3E_y0Cb2yoThAvv
z4$jE#UaRk<+-WAZZAQSwhzmC=!o{5h63cg<xwHDY%H-CmZ_by0OMm8f#t3LB1~8Q}
zEW7mjYt*J4Q?C6z9vR>7ws`u}sf`~l3vvAK=Ti97!o*>}kl~QOhC<K}<IKmhIiD|X
zZRmJ-UnF<UPT!YG_f8eP2y!^{L3PE(Ei)&zyw80WpJLget60HZzt73>P=D^S2?8=L
z^C!Q5UQqc|Oem~ve}P~7Ggg%sZ(~l_{pJ!fYn9*1E<UGaz3Rb`A6r=@UOc}(H9_ys
zDJCA?O{=^NB<oZe+1z)es?OlGU;c8>o`Op+OO{PO`J}XPX-)m~ul%1rI^3E&@k4u2
z%;l$3d5=HTH<~b^{n-0ww}g%4xU#k7-R1OFY<QTUZ)6{OwpU2!-q}RwAAiq?KX*N`
z|KHtPtfF<C`*pjM(;uF%w%%;If9Lrx-Zy_SJyBWa8lLw|=g-!MT490Z|2ee$jy1Og
zJ&c~Zp-e{M?=|z6{`RMj2WM8#J9Pd&YtftVOZTq#2=^^{yIh97MJT-Is`bJ*9O0|G
zW~~!R3~;*osVS0kX|`jV%9XWmXG{rLDV61LXj`jkv5?kzc9kg$La&;rF1*$g!Nhq>
zHPu)s>pW+4g?dipZOzyN#+nM7TFx&}-LNj`hqmexjccY;)*Z<!e6UucUnw*A=>oP(
z^U7rYo%-3Z?ASErz8T-UYUgOMPtAX?^Lv)#W>X=vUlzBHhTbas&Q}n!&7k|&e|8-Y
z3E_MuMh^pp15Uk9?{hmeF*15!BnhBE$EkJ(W`>k6^Q}u6AJl_Xc)I$ztaD0e0sy0A
BJU;*c

literal 0
HcmV?d00001

diff --git a/app/src/main/res/layout/fragment_numeric_keyboard.xml b/app/src/main/res/layout/fragment_numeric_keyboard.xml
index 7319f335..5f0a790c 100644
--- a/app/src/main/res/layout/fragment_numeric_keyboard.xml
+++ b/app/src/main/res/layout/fragment_numeric_keyboard.xml
@@ -166,7 +166,7 @@
 
             <ImageButton
                 android:id="@+id/delete_btn"
-                android:src="@drawable/clear_btn"
+                android:src="@drawable/ic_action_backspace"
                 style="@style/NumericButton" />
         </LinearLayout>
 

From 4e53691319ecfefa1fc2324d821946c1dce67ea3 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 2 Apr 2015 21:19:27 +0800
Subject: [PATCH 32/52] auto balance transaction

---
 .../main/java/org/gnucash/android/model/Money.java |  4 +
 .../ui/transaction/TransactionFormFragment.java    | 87 +++++++++++++---------
 2 files changed, 57 insertions(+), 34 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index d5f48747..4d2f2d29 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -466,4 +466,8 @@ public static BigDecimal parseToDecimal(String amountString){
     public Money absolute() {
         return new Money(mAmount.abs(), mCurrency);
     }
+
+    public boolean isAmountZero() {
+        return mAmount.equals(BigDecimal.ZERO);
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 44702de2..b089c24e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -659,48 +659,67 @@ private void saveNewTransaction() {
             }
         }
 
-		if (mTransaction != null){ //if editing an existing transaction
-            mTransaction.setSplits(mSplitsList);
-            mTransaction.setDescription(description);
-		} else {
-			mTransaction = new Transaction(description);
+        Money splitSum = Money.createZeroInstance(currency.getCurrencyCode());
+        for (Split split : mSplitsList) {
+            Money amt = split.getAmount().absolute();
+            if (split.getType() == TransactionType.DEBIT)
+                splitSum = splitSum.subtract(amt);
+            else
+                splitSum = splitSum.add(amt);
+        }
+        mAccountsDbAdapter.beginTransaction();
+        try {
+            if (!splitSum.isAmountZero()) {
+                Split imbSplit = new Split(splitSum.negate(), mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency));
+                mSplitsList.add(imbSplit);
+            }
+            if (mTransaction != null) { //if editing an existing transaction
+                mTransaction.setSplits(mSplitsList);
+                mTransaction.setDescription(description);
+            } else {
+                mTransaction = new Transaction(description);
 
-            if (mSplitsList.isEmpty()) { //amount entered in the simple interface (not using splits Editor)
-                Split split = new Split(amount, mAccountUID);
-                split.setType(mTransactionTypeButton.getTransactionType());
-                mTransaction.addSplit(split);
+                if (mSplitsList.isEmpty()) { //amount entered in the simple interface (not using splits Editor)
+                    Split split = new Split(amount, mAccountUID);
+                    split.setType(mTransactionTypeButton.getTransactionType());
+                    mTransaction.addSplit(split);
 
-                String transferAcctUID;
-                if (mUseDoubleEntry) {
-                    long transferAcctId = mDoubleAccountSpinner.getSelectedItemId();
-                    transferAcctUID = mAccountsDbAdapter.getUID(transferAcctId);
-                } else {
-                    transferAcctUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
+                    String transferAcctUID;
+                    if (mUseDoubleEntry) {
+                        long transferAcctId = mDoubleAccountSpinner.getSelectedItemId();
+                        transferAcctUID = mAccountsDbAdapter.getUID(transferAcctId);
+                    } else {
+                        transferAcctUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
+                    }
+                    mTransaction.addSplit(split.createPair(transferAcctUID));
+                } else { //split editor was used to enter splits
+                    mTransaction.setSplits(mSplitsList);
                 }
-                mTransaction.addSplit(split.createPair(transferAcctUID));
-            } else { //split editor was used to enter splits
-                mTransaction.setSplits(mSplitsList);
             }
-		}
 
-        mTransaction.setCurrencyCode(mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID));
-		mTransaction.setTime(cal.getTimeInMillis());
-		mTransaction.setNote(notes);
+            mTransaction.setCurrencyCode(mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID));
+            mTransaction.setTime(cal.getTimeInMillis());
+            mTransaction.setNote(notes);
 
-        // set as not exported.
-        mTransaction.setExported(false);
-        //save the normal transaction first
-        mTransactionsDbAdapter.addTransaction(mTransaction);
+            // set as not exported.
+            mTransaction.setExported(false);
+            //save the normal transaction first
+            mTransactionsDbAdapter.addTransaction(mTransaction);
 
-        if (mSaveTemplate.isChecked()){
-            Transaction templateTransaction;
-            //creating a new recurring transaction
-            templateTransaction = new Transaction(mTransaction, true);
-            templateTransaction.setTemplate(true);
-            mTransactionsDbAdapter.addTransaction(templateTransaction);
+            if (mSaveTemplate.isChecked()) {
+                Transaction templateTransaction;
+                //creating a new recurring transaction
+                templateTransaction = new Transaction(mTransaction, true);
+                templateTransaction.setTemplate(true);
+                mTransactionsDbAdapter.addTransaction(templateTransaction);
 
-            //inside the if statement becuase scheduling always creates a template
-            scheduleRecurringTransaction(templateTransaction.getUID());
+                //inside the if statement because scheduling always creates a template
+                scheduleRecurringTransaction(templateTransaction.getUID());
+            }
+            mAccountsDbAdapter.setTransactionSuccessful();
+        }
+        finally {
+            mAccountsDbAdapter.endTransaction();
         }
 
         //update widgets, if any

From 7a62d35ea33a160bf312771c876d5cd0f62fb83d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 3 Apr 2015 21:28:34 +0200
Subject: [PATCH 33/52] Fixed: split type of imbalance split not set

---
 app/src/main/java/org/gnucash/android/model/Split.java              | 3 +++
 .../org/gnucash/android/ui/transaction/TransactionFormFragment.java | 6 +++++-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Split.java b/app/src/main/java/org/gnucash/android/model/Split.java
index 60a498f3..826d904b 100644
--- a/app/src/main/java/org/gnucash/android/model/Split.java
+++ b/app/src/main/java/org/gnucash/android/model/Split.java
@@ -45,6 +45,9 @@
     public Split(Money amount, String accountUID){
         setAmount(amount);
         setAccountUID(accountUID);
+        //NOTE: This is a rather simplististic approach to the split type.
+        //It typically also depends on the account type of the account. But we do not want to access
+        //the database everytime a split is created. So we keep it simple here. Set the type you want explicity.
         mSplitType = amount.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
     }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index b089c24e..86df926b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -670,7 +670,11 @@ private void saveNewTransaction() {
         mAccountsDbAdapter.beginTransaction();
         try {
             if (!splitSum.isAmountZero()) {
-                Split imbSplit = new Split(splitSum.negate(), mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency));
+                String imbalanceAccountUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
+                //imbalance accounts always have the account type BANK
+                TransactionType splitType = Transaction.getTypeForBalance(AccountType.BANK, splitSum.negate().isNegative());
+                Split imbSplit = new Split(splitSum.absolute(), imbalanceAccountUID);
+                imbSplit.setType(splitType);
                 mSplitsList.add(imbSplit);
             }
             if (mTransaction != null) { //if editing an existing transaction

From 6d91b5f8c047124c8247af87e1b62a7c24ad59a5 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 8 Apr 2015 16:33:03 +0200
Subject: [PATCH 34/52] Renamed export SD card folders to use application ID as
 folder name. Also created separate folders for export and backup.

This enables separation of files between the dev and production builds .Also added migration to move existing files.

Fixed: crash when deleting transactions after export
Improved: No confirmation dialog is shown after export the transactions are immediately deleted
---
 .../org/gnucash/android/db/DatabaseHelper.java     | 160 ++++++++++++++-------
 .../org/gnucash/android/db/DatabaseSchema.java     |   4 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  72 +++++++++-
 .../gnucash/android/export/ExportAsyncTask.java    |  27 ++--
 .../java/org/gnucash/android/export/Exporter.java  |  13 +-
 ...ansactionsDeleteConfirmationDialogFragment.java |   5 +-
 6 files changed, 206 insertions(+), 75 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 632b1b39..019bffb6 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -233,81 +233,93 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
             if (oldVersion == 5 && newVersion >= 6){
                 Log.i(LOG_TAG, "Upgrading database to version 6");
-
-                String addFullAccountNameQuery = " ALTER TABLE " + AccountEntry.TABLE_NAME
-                        + " ADD COLUMN " + AccountEntry.COLUMN_FULL_NAME + " varchar(255) ";
-                db.execSQL(addFullAccountNameQuery);
-
-                //update all existing accounts with their fully qualified name
-                Cursor cursor = db.query(AccountEntry.TABLE_NAME,
-                        new String[]{AccountEntry._ID, AccountEntry.COLUMN_UID},
-                        null, null, null, null, null);
-                while(cursor != null && cursor.moveToNext()){
-                    String uid = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
-                    String fullName = MigrationHelper.getFullyQualifiedAccountName(db, uid);
-
-                    if (fullName == null)
-                        continue;
-
-                    ContentValues contentValues = new ContentValues();
-                    contentValues.put(AccountEntry.COLUMN_FULL_NAME, fullName);
-
-                    long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
-                    db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry._ID + " = " + id, null);
-                }
-
-                if (cursor != null) {
-                    cursor.close();
-                }
-
-                oldVersion = 6;
+                oldVersion = upgradeDbToVersion6(db);
             }
 
             if (oldVersion == 6 && newVersion >= DatabaseSchema.SPLITS_DB_VERSION){
                 Log.i(LOG_TAG, "Upgrading database to version 7");
-                oldVersion = upgradeToVersion7(db);
+                oldVersion = upgradeDbToVersion7(db);
             }
 
             if (oldVersion == 7 && newVersion >= 8){
                 Log.i(LOG_TAG, "Upgrading database to version 8");
-                //TODO: consider just backing up, recreating database and reimporting
-                //FIXME: We really need to do this because the ON DELETE CASCADE constraint does not exist on older db versions
+                oldVersion = upgradeDbToVersion8(db);
+            }
+		}
 
-                //TODO: Also, we need to go through db and add second split with imbalance account wherever only one split exists.
+        if (oldVersion != newVersion) {
+            Log.w(LOG_TAG, "Upgrade for the database failed. The Database is currently at version " + oldVersion);
+        }
+	}
 
-                Log.i(LOG_TAG, "Adding hidden flag to accounts table");
-                String addHiddenFlagSql = "ALTER TABLE " + AccountEntry.TABLE_NAME +
-                        " ADD COLUMN " + AccountEntry.COLUMN_HIDDEN + " tinyint default 0";
-                db.execSQL(addHiddenFlagSql);
+    /**
+     * Upgrades the database from version 7 to version 8.
+     * <p>This migration accomplishes the following:
+     *      <ul>
+     *          <li>Added created_at and modified_at columns to all tables (including triggers for updating the columns).</li>
+     *          <li>New table for scheduled actions</li>
+     *          <li>Auto-balancing of all existing splits</li>
+     *          <li>Added "hidden" flag to accounts table</li>
+     *          <li>Add flag for transaction templates</li>
+     *          <li>Migrate all export/backup files to new locations on SD card</li>
+     *      </ul>
+     * </p>
+     * @param db SQLite Database to be upgraded
+     * @return New database version (8) if upgrade successful, old version (7) if unsuccessful
+     */
+    private int upgradeDbToVersion8(SQLiteDatabase db) {
+        Log.i(LOG_TAG, "Upgrading database to version 8");
+        int oldVersion = 7;
+        //start moving the files in background thread before we do the database stuff
+        new Thread(MigrationHelper.moveExportedFilesToNewDefaultLocation).start();
 
-                Log.i(LOG_TAG, "Adding created_at and modified_at columns to database tables");
-                MigrationHelper.createUpdatedAndModifiedColumns(db, AccountEntry.TABLE_NAME);
-                MigrationHelper.createUpdatedAndModifiedColumns(db, TransactionEntry.TABLE_NAME);
-                MigrationHelper.createUpdatedAndModifiedColumns(db, SplitEntry.TABLE_NAME);
+        db.beginTransaction();
+        try {
+            //TODO: Use raw sql to do all migrations (avoid using code constructs)
 
-                Log.i(LOG_TAG, "Creating scheduled events table");
-                db.execSQL(SCHEDULED_ACTIONS_TABLE_CREATE); //TODO: Use the actual SQL statements
-                //TODO: Migrate existing scheduled transactions (cancel pending intents)
+            Log.i(LOG_TAG, "Adding hidden flag to accounts table");
+            String addHiddenFlagSql = "ALTER TABLE " + AccountEntry.TABLE_NAME +
+                    " ADD COLUMN " + AccountEntry.COLUMN_HIDDEN + " tinyint default 0";
+            db.execSQL(addHiddenFlagSql);
 
-                //TODO: Migrate old scheduled events using only SQL, code had changed
-                GnuCashApplication.startScheduledEventExecutionService(GnuCashApplication.getAppContext());
-                //TODO: Take care to properly migrate the created_at dates for transactions (use the date already in the transaction)
+            //TODO: Add flag for transaction templates
+            //TODO: ADD uid of originating scheduled event to transactions
 
-            }
-		}
+            Log.i(LOG_TAG, "Adding created_at and modified_at columns to database tables");
+            MigrationHelper.createUpdatedAndModifiedColumns(db, AccountEntry.TABLE_NAME);
+            MigrationHelper.createUpdatedAndModifiedColumns(db, TransactionEntry.TABLE_NAME);
+            MigrationHelper.createUpdatedAndModifiedColumns(db, SplitEntry.TABLE_NAME);
 
-        if (oldVersion != newVersion) {
-            Log.w(LOG_TAG, "Upgrade for the database failed. The Database is currently at version " + oldVersion);
+            Log.i(LOG_TAG, "Creating scheduled events table");
+            db.execSQL(SCHEDULED_ACTIONS_TABLE_CREATE); //TODO: Use the actual SQL statements, in case this string changes in the future
+
+            //TODO: Migrate existing scheduled transactions (cancel pending intents)
+            //TODO: Migrate old scheduled events using only SQL, code had changed
+            //TODO: Take care to properly migrate the created_at dates for transactions (use the date already in the transaction)
+            //TODO: auto-balance existing splits during migration
+
+            db.setTransactionSuccessful();
+            oldVersion = 8;
+        } finally {
+            db.endTransaction();
         }
-	}
+
+        GnuCashApplication.startScheduledEventExecutionService(GnuCashApplication.getAppContext());
+
+        return oldVersion;
+    }
 
     /**
-     * Code for upgrading the database to the {@link DatabaseSchema#SPLITS_DB_VERSION}
-     * Main new featurs is the introduction of multiple-splits for transactions
+     * Code for upgrading the database to the {@link DatabaseSchema#SPLITS_DB_VERSION} from version 6.<br>
+     * Tasks accomplished in migration:
+     *  <ul>
+     *      <li>Added new splits table for transaction splits</li>
+     *      <li>Extract existing info from transactions table to populate split table</li>
+     *  </ul>
      * @param db SQLite Database
-     * @return The new database version is upgrade was successful, or the old db version if it failed
+     * @return The new database version if upgrade was successful, or the old db version if it failed
      */
-    private int upgradeToVersion7(SQLiteDatabase db) {
+    private int upgradeDbToVersion7(SQLiteDatabase db) {
         int oldVersion = 6;
         db.beginTransaction();
         try {
@@ -402,6 +414,44 @@ private int upgradeToVersion7(SQLiteDatabase db) {
     }
 
     /**
+     * Upgrades the database from version 5 to version 6.<br>
+     * This migration adds support for fully qualified account names and updates existing accounts.
+     * @param db SQLite Database to be upgraded
+     * @return New database version (6) if upgrade successful, old version (5) if unsuccessful
+     */
+    private int upgradeDbToVersion6(SQLiteDatabase db) {
+        int oldVersion = 5;
+        String addFullAccountNameQuery = " ALTER TABLE " + AccountEntry.TABLE_NAME
+                + " ADD COLUMN " + AccountEntry.COLUMN_FULL_NAME + " varchar(255) ";
+        db.execSQL(addFullAccountNameQuery);
+
+        //update all existing accounts with their fully qualified name
+        Cursor cursor = db.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry._ID, AccountEntry.COLUMN_UID},
+                null, null, null, null, null);
+        while(cursor != null && cursor.moveToNext()){
+            String uid = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+            String fullName = MigrationHelper.getFullyQualifiedAccountName(db, uid);
+
+            if (fullName == null)
+                continue;
+
+            ContentValues contentValues = new ContentValues();
+            contentValues.put(AccountEntry.COLUMN_FULL_NAME, fullName);
+
+            long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
+            db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry._ID + " = " + id, null);
+        }
+
+        if (cursor != null) {
+            cursor.close();
+        }
+
+        oldVersion = 6;
+        return oldVersion;
+    }
+
+    /**
      * Creates the tables in the database
      * @param db Database instance
      */
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 91e1df08..d2d83111 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -39,7 +39,7 @@
     private DatabaseSchema(){}
 
     public interface CommonColumns extends BaseColumns {
-        public static final String COLUMN_UID       = "uid";
+        public static final String COLUMN_UID           = "uid";
         public static final String COLUMN_CREATED_AT    = "created_at";
         public static final String COLUMN_MODIFIED_AT   = "modified_at";
     }
@@ -113,7 +113,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_PERIOD            = "period";
         public static final String COLUMN_TAG               = "tag"; //for any action-specific information
         public static final String COLUMN_ENABLED           = "is_enabled";
-        public static final String COLUMN_NUM_OCCURRENCES   = "num_occurrences";
+        public static final String COLUMN_NUM_OCCURRENCES   = "num_occurrences"; //FIXME: This should not be here, rather transactions table should store UID of action which created it
         public static final String COLUMN_EXECUTION_COUNT   = "execution_count";
 
         public static final String INDEX_UID            = "scheduled_action_uid_index";
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index c84e7cbd..ebf0a069 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,12 +18,19 @@
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.os.Environment;
 import android.util.Log;
 
+import org.gnucash.android.export.Exporter;
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.AccountType;
 
+import java.io.File;
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOError;
+import java.io.IOException;
+import java.nio.channels.FileChannel;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
@@ -132,4 +139,67 @@ static void createUpdatedAndModifiedColumns(SQLiteDatabase db, String tableName)
         db.execSQL(addModifiedColumn);
         db.execSQL(DatabaseHelper.createUpdatedAtTrigger(tableName));
     }
+
+    /**
+     * Copies the contents of the file in {@code src} to {@code dst} and then deletes the {@code src} if copy was successful.
+     * If the file copy was unsuccessful, the src file will not be deleted.
+     * @param src Source file
+     * @param dst Destination file
+     * @throws IOException if an error occurred during the file copy
+     */
+    static void moveFile(File src, File dst) throws IOException {
+        FileChannel inChannel = new FileInputStream(src).getChannel();
+        FileChannel outChannel = new FileOutputStream(dst).getChannel();
+        try {
+            long bytesCopied = inChannel.transferTo(0, inChannel.size(), outChannel);
+            if(bytesCopied >= src.length())
+                src.delete();
+        } finally {
+            if (inChannel != null)
+                inChannel.close();
+            outChannel.close();
+        }
+    }
+
+    /**
+     * Runnable which moves all exported files (exports and backups) from the old SD card location which
+     * was generic to the new folder structure which uses the application ID as folder name.
+     * <p>The new folder structure also futher enables parallel installation of multiple flavours of
+     * the program (like development and production) on the same device.</p>
+     */
+    static final Runnable moveExportedFilesToNewDefaultLocation = new Runnable() {
+        @Override
+        public void run() {
+            File oldExportFolder = new File(Environment.getExternalStorageDirectory() + "/gnucash");
+            if (oldExportFolder.exists()){
+                for (File src : oldExportFolder.listFiles()) {
+                    if (src.isDirectory())
+                        continue;
+                    File dst = new File(Exporter.EXPORT_FOLDER_PATH + "/" + src.getName());
+                    try {
+                        MigrationHelper.moveFile(src, dst);
+                    } catch (IOException e) {
+                        Log.e(LOG_TAG, "Error migrating " + src.getName());
+                        e.printStackTrace();
+                    }
+                }
+            }
+
+            File oldBackupFolder = new File(oldExportFolder, "backup");
+            if (oldBackupFolder.exists()){
+                for (File src : new File(oldExportFolder, "backup").listFiles()) {
+                    File dst = new File(Exporter.BACKUP_FOLDER_PATH + "/" + src.getName());
+                    try {
+                        MigrationHelper.moveFile(src, dst);
+                    } catch (IOException e) {
+                        Log.e(LOG_TAG, "Error migrating backup: " + src.getName());
+                        e.printStackTrace();
+                    }
+                }
+            }
+
+            if (oldBackupFolder.delete())
+                oldExportFolder.delete();
+        }
+    };
 }
diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 2b268da0..a932cfeb 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -32,11 +32,13 @@
 import android.widget.Toast;
 
 import org.gnucash.android.R;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
 import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.transaction.dialog.TransactionsDeleteConfirmationDialogFragment;
 
 import java.io.BufferedReader;
@@ -205,20 +207,21 @@ protected void onPostExecute(Boolean exportResult) {
                 break;
         }
 
-        if (mContext instanceof Activity) {
-            if (mExportParams.shouldDeleteTransactionsAfterExport()) {
-                android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) mContext).getSupportFragmentManager();
-                Fragment currentFragment = ((AccountsActivity) mContext).getCurrentAccountListFragment();
-
-                TransactionsDeleteConfirmationDialogFragment alertFragment =
-                        TransactionsDeleteConfirmationDialogFragment.newInstance(R.string.title_confirm_delete, 0);
-                alertFragment.setTargetFragment(currentFragment, 0);
+        if (mExportParams.shouldDeleteTransactionsAfterExport()) {
+            //TODO: we delete with impunity here, make sure files are backed-up first
+            TransactionsDbAdapter.getInstance().deleteAllRecords();
 
-                alertFragment.show(fragmentManager, "transactions_delete_confirmation_dialog");
+            //now refresh the respective views
+            if (mContext instanceof AccountsActivity){
+                ((AccountsActivity) mContext).getCurrentAccountListFragment().refresh();
+            }
+            if (mContext instanceof TransactionsActivity){
+                ((TransactionsActivity) mContext).refresh();
+            }
+            if (mContext instanceof Activity) {
+                if (mProgressDialog != null && mProgressDialog.isShowing())
+                    mProgressDialog.dismiss();
             }
-
-            if (mProgressDialog != null && mProgressDialog.isShowing())
-                mProgressDialog.dismiss();
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/Exporter.java b/app/src/main/java/org/gnucash/android/export/Exporter.java
index e9627a94..275dbf28 100644
--- a/app/src/main/java/org/gnucash/android/export/Exporter.java
+++ b/app/src/main/java/org/gnucash/android/export/Exporter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 - 2015 Ngewi Fet <ngewif@gmail.com>
  * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -21,6 +21,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Environment;
 
+import org.gnucash.android.BuildConfig;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
@@ -41,15 +42,21 @@
  * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public abstract class Exporter {
+
+    /**
+     * Application folder on external storage
+     */
+    public static final String BASE_FOLDER_PATH = Environment.getExternalStorageDirectory() + "/" + BuildConfig.APPLICATION_ID;
+
     /**
      * Folder where exports like QIF and OFX will be saved for access by external programs
      */
-    public static final String EXPORT_FOLDER_PATH = Environment.getExternalStorageDirectory() + "/gnucash/";
+    public static final String EXPORT_FOLDER_PATH =  BASE_FOLDER_PATH + "/exports/";
 
     /**
      * Folder where GNC_XML backups will be saved
      */
-    public static final String BACKUP_FOLDER_PATH = EXPORT_FOLDER_PATH + "backup/";
+    public static final String BACKUP_FOLDER_PATH = BASE_FOLDER_PATH + "/backups/";
 
     /**
      * Export options
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index e7549048..47341061 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -31,6 +31,7 @@
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsListFragment;
+import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 import java.util.ArrayList;
@@ -80,8 +81,8 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                 } else {
                                     transactionsDbAdapter.deleteRecord(rowId);
                                 }
-                                if (getTargetFragment() instanceof AccountsListFragment) {
-                                    ((AccountsListFragment) getTargetFragment()).refresh();
+                                if (getTargetFragment() instanceof Refreshable) {
+                                    ((Refreshable) getTargetFragment()).refresh();
                                 }
                                 WidgetConfigurationActivity.updateAllWidgets(getActivity());
                             }

From 5972806caeee4f092af61e0980f814fe5ddc0d98 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 8 Apr 2015 16:50:57 +0200
Subject: [PATCH 35/52] Fixed: bug causing transaction amounts not to be saved

Fixed wrong type of  imbalance split added to transactions by undoing changes from 7a62d35ea33a160bf312771c876d5cd0f62fb83d
---
 .../main/java/org/gnucash/android/model/Money.java | 25 +++++++++++-----------
 .../ui/transaction/TransactionFormFragment.java    |  6 +-----
 2 files changed, 13 insertions(+), 18 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 4d2f2d29..7c9a3a02 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -149,16 +149,6 @@ public Money(String amount){
 		setAmount(parseToDecimal(amount));
 	}
 
-	/**
-	 * Overloaded constructor. 
-	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
-	 * @param amount Value associated with this Money object
-	 */
-	public Money(BigDecimal amount){
-		init();
-		setAmount(amount);
-	}
-
     /**
      * Copy constructor.
      * Creates a new Money object which is a clone of <code>money</code>
@@ -175,7 +165,7 @@ public Money(Money money){
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
     public static Money createZeroInstance(String currencyCode){
-        return new Money("0", currencyCode);
+        return new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
     }
 
 	/**
@@ -467,7 +457,16 @@ public Money absolute() {
         return new Money(mAmount.abs(), mCurrency);
     }
 
+	/**
+	 * Checks if the value of this amount is exactly equal to zero.
+	 * @return {@code true} if this money amount is zero, {@code false} otherwise
+	 */
     public boolean isAmountZero() {
-        return mAmount.equals(BigDecimal.ZERO);
-    }
+		try {
+			return mAmount.intValueExact() == 0;
+		} catch (ArithmeticException e){
+			e.printStackTrace();
+			return false;
+		}
+	}
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 86df926b..b089c24e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -670,11 +670,7 @@ private void saveNewTransaction() {
         mAccountsDbAdapter.beginTransaction();
         try {
             if (!splitSum.isAmountZero()) {
-                String imbalanceAccountUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
-                //imbalance accounts always have the account type BANK
-                TransactionType splitType = Transaction.getTypeForBalance(AccountType.BANK, splitSum.negate().isNegative());
-                Split imbSplit = new Split(splitSum.absolute(), imbalanceAccountUID);
-                imbSplit.setType(splitType);
+                Split imbSplit = new Split(splitSum.negate(), mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency));
                 mSplitsList.add(imbSplit);
             }
             if (mTransaction != null) { //if editing an existing transaction

From ee5dbf2cd66f118ef0cee64ebace5d51546bbd22 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 9 Apr 2015 12:13:59 +0200
Subject: [PATCH 36/52] Added beta build flavor

Added more detail (build time and git SHA)  to build version for devel and beta product flavours
---
 app/build.gradle | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 8c6632aa..435c6af9 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,5 +1,22 @@
+import java.text.SimpleDateFormat
+
 apply plugin: 'com.android.application'
 
+def versionMajor = 1
+def versionMinor = 6
+def versionPatch = 0
+def versionBuild = 0
+
+def buildTime() {
+    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
+    df.setTimeZone(TimeZone.getTimeZone("UTC"))
+    return df.format(new Date())
+}
+
+def gitSha() {
+    return 'git rev-parse --short HEAD'.execute().text.trim()
+}
+
 android {
     compileSdkVersion 19
     buildToolsVersion "21.1.2"
@@ -7,8 +24,8 @@ android {
         applicationId "org.gnucash.android"
         minSdkVersion 9
         targetSdkVersion 19
-        versionCode 48
-        versionName "1.6.x"
+        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
+        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
     }
     buildTypes {
         release {
@@ -22,15 +39,24 @@ android {
     lintOptions {
         abortOnError false
     }
+
     productFlavors {
         development {
             applicationId 'org.gnucash.android.devel'
             testApplicationId 'org.gnucash.android.test.devel'
             resValue "string", "app_name", "GnuCash (devel)"
+            versionName "${versionMajor}.${versionMinor}.${versionPatch}-dev${versionBuild} @rev ${gitSha()} - BuildTime ${buildTime()} "
+        }
+
+        beta {
+            resValue "string", "app_name", "GnuCash (beta)"
+            versionName "${versionMajor}.${versionMinor}.${versionPatch}-beta${versionBuild} @rev ${gitSha()} - BuildTime ${buildTime()}"
         }
+
         production {
             resValue "string", "app_name", "GnuCash"
         }
+
     }
     compileOptions { //we want switch with strings during xml parsing
         sourceCompatibility JavaVersion.VERSION_1_7

From d42238803bd23865c25c6cf181380cde7d8ad443 Mon Sep 17 00:00:00 2001
From: lxb <leixb@agilean.cn>
Date: Fri, 10 Apr 2015 12:52:06 +0800
Subject: [PATCH 37/52] keep zh-cn translated to 1.5.5

---
 app/src/main/res/values-zh/strings.xml | 100 +++++++++++++++++----------------
 1 file changed, 52 insertions(+), 48 deletions(-)

diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index f5aee637..5c4251e1 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8" standalone="no"?>
 <!--
  Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
- Copyright (c) 2013 - 2014 Lei Xiao Bao <lxbzmy@gmail.com>
+ Copyright (c) 2013 - 2014 Alex Lei <lxbzmy@gmail.com>
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
@@ -15,7 +15,7 @@
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
-<resources>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="title_add_account"></string>
     <string name="title_edit_account"></string>
     <string name="info_details"></string>
@@ -25,6 +25,11 @@
     <string name="label_account_name"></string>
     <string name="btn_cancel"></string>
     <string name="btn_save"></string>
+    <string name="label_passcode"></string>
+    <string name="toast_wrong_passcode"></string>
+    <string name="toast_passcode_set"></string>
+    <string name="toast_confirm_passcode"></string>
+    <string name="toast_invalid_passcode_confirmation"></string>
     <string name="label_transaction_name"></string>
     <string name="label_transaction_amount"></string>
     <string name="title_add_transaction"></string>
@@ -45,6 +50,7 @@
     <string name="label_transaction_description"></string>
     <string name="menu_move"></string>
     <string name="title_selected">%1$d </string>
+    <string name="label_account_balance"></string>
     <string name="label_export_destination"></string>
     <string name="title_export_dialog"></string>
     <string name="option_export_all_transactions"></string>
@@ -210,7 +216,7 @@
         <item>SDR (Special Drawing Right)</item>
         <item>Serbian Dinar</item>
         <item>Seychelles Rupee</item>
-        <item></item>
+        <item></item>
         <item></item>
         <item>Solomon Islands Dollar</item>
         <item>Som</item>
@@ -244,7 +250,7 @@
         <item></item>
         <item>Uzbekistan Sum</item>
         <item>Vatu</item>
-        <item></item>
+        <item></item>
         <item></item>
         <item></item>
         <item>Yemeni Rial</item>
@@ -268,6 +274,11 @@
     <string name="title_general_prefs"></string>
     <string name="label_widget_configuration"></string>
     <string name="toast_no_transactions_to_export"></string>
+    <string name="header_passcode_settings"></string>
+    <string name="title_passcode_preferences"></string>
+    <string name="title_passcode_enabled"></string>
+    <string name="title_passcode_disabled"></string>
+    <string name="title_change_passcode"></string>
     <string name="title_about_gnucash">GnuCash</string>
     <string name="summary_about_gnucash">Gnucash for androidOFX GnuCash</string>
     <string name="title_about"></string>
@@ -301,13 +312,13 @@
     <string name="summary_xml_ofx_header">GnuCash</string>
     <string name="title_whats_new"></string>
     <string name="whats_new">
-        - General resource and performance optimization\n
-        - Faster computation of account balances\n
-        - Set passcode to restrict access to app (in Settings)\n
-        - Export separate QIF files for each currency in use\n
-        - Use currencey settings when creating account hierarchy\n
-        - Multiple bug fixes and improvements\n
-	</string>
+        - General resource and performance optimization\n
+        - \n
+        - \n
+        - QIF\n
+        - \n
+        - \n
+    </string>
     <string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required"></string>
     <string name="menu_import_accounts">GnuCash</string>
@@ -343,8 +354,8 @@
     <string name="toast_recurring_transaction_deleted"></string>
     <string name="label_placeholder_account"></string>
     <string name="label_default_transfer_account"></string>
-    <string name="label_account_color_and_type"></string>
     <plurals name="label_sub_accounts">
+        <item quantity="one">%d </item>
         <item quantity="other">%d </item>
     </plurals>
     <string-array name="account_type_entry_values">
@@ -361,7 +372,7 @@
         <item></item>
         <item></item>
         <item></item>
-        <item>TRADING</item>
+        <item></item>
     </string-array>
     <string-array name="export_formats">
         <item>QIF</item>
@@ -369,6 +380,11 @@
     </string-array>
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title"></string>
+    <!-- Content description for a color square. -->
+    <string name="color_swatch_description" translatable="false">Color <xliff:g id="color_index" example="14">%1$d</xliff:g></string>
+    <!-- Content description for a selected color square. -->
+    <string name="color_swatch_description_selected" translatable="false">Color <xliff:g id="color_index" example="14">%1$d</xliff:g> selected</string>
+    <string name="label_account_color_and_type"></string>
     <string name="label_delete_sub_accounts"></string>
     <string name="title_recent_accounts"></string>
     <string name="title_favorite_accounts"></string>
@@ -387,19 +403,19 @@
         <item></item>
     </string-array>
     <string name="title_scheduled_transactions"></string>
-    <string name="title_select_export_destination">Select destination for export</string>
+    <string name="title_select_export_destination"></string>
     <string name="hint_split_memo"></string>
     <string name="label_spend"></string>
     <string name="label_receive"></string>
     <string name="label_withdrawal"></string>
     <string name="label_deposit"></string>
     <string name="label_payment"></string>
-    <string name="label_charge">charge</string>
+    <string name="label_charge"></string>
     <string name="label_decrease"></string>
     <string name="label_increase"></string>
     <string name="label_income"></string>
-    <string name="label_rebate">Rebate</string>
-    <string name="label_expense">Expense</string>
+    <string name="label_rebate"></string>
+    <string name="label_expense"></string>
     <string name="label_bill"></string>
     <string name="label_invoice"></string>
     <string name="label_buy"></string>
@@ -410,38 +426,26 @@
     <string name="account_name_equity"></string>
     <string name="summary_save_opening_balances"></string>
     <string name="title_save_opening_balances"></string>
-    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
-    <string name="title_transaction_splits">Transaction splits</string>
+    <string name="export_warning_ofx">OFX </string>
+    <string name="export_warning_qif">QIF</string>
+    <string name="title_transaction_splits"></string>
     <string name="label_imbalance">Imbalance:</string>
-    <string name="btn_add_split">Add split</string>
-    <string name="label_account_balance">Balance:</string>
-    <string name="label_passcode">Enter Passcode</string>
-    <string name="toast_wrong_passcode">Wrong passcode, please try again</string>
-    <string name="toast_passcode_set">Passcode set</string>
-    <string name="toast_confirm_passcode">Please confirm your passcode</string>
-    <string name="toast_invalid_passcode_confirmation">Invalid passcode confirmation. Please try again</string>
-    <string name="header_passcode_settings">Passcode</string>
-    <string name="title_passcode_preferences">Passcode Preferences</string>
-    <string name="title_passcode_enabled">Passcode Turned On</string>
-    <string name="title_passcode_disabled">Passcode Turned Off</string>
-    <string name="title_change_passcode">Change Passcode</string>
-    <string name="toast_error_edit_multi_currency_transaction">Multi-currency transactions cannot be modified</string>
-    <string name="menu_title_favorite">Favorite</string>
+    <string name="btn_add_split"></string>
+    <string name="menu_title_favorite"></string>
     <string name="drawer_open">Navigation drawer opened</string>
     <string name="drawer_close">Navigation drawer closed</string>
-    <string name="title_pie_chart">Pie Chart</string>
-    <string name="menu_chart_report">Chart report</string>
-    <string name="menu_order_by_size">Order by size</string>
-    <string name="menu_toggle_legend">Toggle legend</string>
-    <string name="menu_toggle_labels">Toggle labels</string>
-    <string name="label_chart_no_data">No chart data available</string>
-    <string name="label_chart_overall">Overall</string>
-    <string name="label_chart_total">Total\n</string>
-    <string name="label_save_template">Save as template</string>
-    <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
-    <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
-    <string name="label_delete_transactions">Delete transactions</string>
+    <string name="title_pie_chart"></string>
+    <string name="menu_chart_report"></string>
+    <string name="menu_order_by_size"></string>
+    <string name="menu_toggle_legend"></string>
+    <string name="menu_toggle_labels"></string>
+    <string name="label_chart_no_data"></string>
+    <string name="label_chart_overall"></string>
+    <string name="label_chart_total">\n</string>
+    <string name="label_save_template"></string>
+    <string name="label_delete_account_transactions_description"> \n</string>
+    <string name="label_delete_account_subaccounts_description"> \n</string>
+    <string name="label_delete_transactions"></string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
-    <string name="label_tap_to_create_schedule">Tap to create schedule</string>
-</resources>
+    <string name="label_tap_to_create_schedule"></string>
+</resources>
\ No newline at end of file

From 487bc1287144d5dbbc072a4f2aa29b2c2f1eee8a Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 10 Apr 2015 12:16:14 +0200
Subject: [PATCH 38/52] Improves the auto-complete suggestions when creating
 new transactions

Added more detail in the transaction suggestions dropdown  e.g. amount and date

The suggestions are now generated according to the following guidelines:
* Only include transactions from the same account as the current one,
* Only one matching description is shown (eliminates duplicate names)
* They are sorted by the most recent transaction entries
Closes #309

Updated CONTRIBUTORS and README files
---
 CONTRIBUTORS                                       |  2 +-
 README.md                                          |  4 +-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 28 +++++++++----
 .../ui/transaction/TransactionFormFragment.java    | 35 +++++++++++++---
 app/src/main/res/layout/dropdown_item_2lines.xml   | 46 ++++++++++++++++++++++
 .../main/res/layout/fragment_new_transaction.xml   |  3 ++
 6 files changed, 102 insertions(+), 16 deletions(-)
 create mode 100644 app/src/main/res/layout/dropdown_item_2lines.xml

diff --git a/CONTRIBUTORS b/CONTRIBUTORS
index d2b648f0..f5d925f9 100644
--- a/CONTRIBUTORS
+++ b/CONTRIBUTORS
@@ -17,7 +17,7 @@ Sigurd Gartmann <sigurdga-github@sigurdga.no>
 Pedro Abel <pedroabel@gmail.com>
 windwarrior <lennartbuit@gmail.com>
 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
-Lei Xiao Bao <lxbzmy@gmail.com>
+Alex Lei <lxbzmy@gmail.com>
 Yongxin Wang <fefe.wyx@gmail.com>
 Matthew Hague <matthewhague@zoho.com>
 Spanti Nicola <rydroid_dev@yahoo.com>
diff --git a/README.md b/README.md
index fc3da1af..be3f375c 100644
--- a/README.md
+++ b/README.md
@@ -62,8 +62,8 @@ You could as well contribute code, fixing bugs, new features or automated tests.
 Take a look at the [bug tracker](https://github.com/codinguser/gnucash-android/issues?state=open)
 for ideas where to start.
 
-For development, it is recommended to use the IntelliJ IDEA 14+ IDE for development which is available as free
-community edition. Import the project into the IDE from an external (maven) model.The IDE will resolve dependencies automatically.
+For development, it is recommended to use the Android Studio for development which is available for free.
+Import the project into the IDE using the build.gradle file. The IDE will resolve dependencies automatically.
 
 #Licence
 Gnucash for Android is free software; you can redistribute it and/or 
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 0310698b..f4c639b1 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -494,17 +494,29 @@ public long getAllTransactionsCount() {
 
     /**
      * Returns a cursor to transactions whose name (UI: description) start with the <code>prefix</code>
-     * <p>This method is used for autocomplete suggestions when creating new transactions</p>
+     * <p>This method is used for autocomplete suggestions when creating new transactions. <br/>
+     * The suggestions are either transactions which have at least one split with {@code accountUID} or templates.</p>
      * @param prefix Starting characters of the transaction name
+     * @param accountUID GUID of account within which to search for transactions
      * @return Cursor to the data set containing all matching transactions
      */
-    public Cursor fetchTemplatesStartingWith(String prefix){
-        return mDb.query(TransactionEntry.TABLE_NAME,
-                new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_DESCRIPTION},
-                TransactionEntry.COLUMN_TEMPLATE + "=1 AND "
-                        + TransactionEntry.COLUMN_DESCRIPTION + " LIKE '" + prefix + "%'",
-                null, null, null,
-                TransactionEntry.COLUMN_DESCRIPTION + " ASC");
+    public Cursor fetchTransactionSuggestions(String prefix, String accountUID){
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME
+                + " INNER JOIN " + SplitEntry.TABLE_NAME + " ON "
+                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
+        queryBuilder.setDistinct(true);
+        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+        String selection = "(" + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
+                + " OR " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + "=1 )"
+                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " LIKE '" + prefix + "%'";
+        String[] selectionArgs = new String[]{accountUID};
+        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
+        String groupBy = TransactionEntry.COLUMN_DESCRIPTION;
+        String limit = Integer.toString(5);
+
+        return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, groupBy, null, sortOrder, limit);
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index b089c24e..fa139cff 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -30,6 +30,7 @@
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.Editable;
+import android.text.format.DateUtils;
 import android.text.format.Time;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -305,15 +306,39 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 	}
 
     /**
+     * Extension of SimpleCursorAdapter which is used to populate the fields for the list items
+     * in the transactions suggestions (auto-complete transaction description).
+     */
+    private class DropDownCursorAdapter extends SimpleCursorAdapter{
+
+        public DropDownCursorAdapter(Context context, int layout, Cursor c, String[] from, int[] to) {
+            super(context, layout, c, from, to, 0);
+        }
+
+        @Override
+        public void bindView(View view, Context context, Cursor cursor) {
+            super.bindView(view, context, cursor);
+            String transactionUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_UID));
+            Money balance = TransactionsDbAdapter.getInstance().getBalance(transactionUID, mAccountUID);
+
+            long timestamp = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_TIMESTAMP));
+            String dateString = DateUtils.formatDateTime(getActivity(), timestamp,
+                    DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR);
+
+            TextView secondaryTextView = (TextView) view.findViewById(R.id.secondary_text);
+            secondaryTextView.setText(balance.formattedString() + " on " + dateString); //TODO: Extract string
+        }
+    }
+
+    /**
      * Initializes the transaction name field for autocompletion with existing transaction names in the database
      */
     private void initTransactionNameAutocomplete() {
-        final int[] to = new int[]{android.R.id.text1};
+        final int[] to = new int[]{R.id.primary_text};
         final String[] from = new String[]{DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION};
 
-        SimpleCursorAdapter adapter = new SimpleCursorAdapter(
-                getActivity(), android.R.layout.simple_dropdown_item_1line,
-                null, from, to, 0);
+        SimpleCursorAdapter adapter = new DropDownCursorAdapter(
+                getActivity(), R.layout.dropdown_item_2lines, null, from, to);
 
         adapter.setCursorToStringConverter(new SimpleCursorAdapter.CursorToStringConverter() {
             @Override
@@ -326,7 +351,7 @@ public CharSequence convertToString(Cursor cursor) {
         adapter.setFilterQueryProvider(new FilterQueryProvider() {
             @Override
             public Cursor runQuery(CharSequence name) {
-                return mTransactionsDbAdapter.fetchTemplatesStartingWith(name == null ? "" : name.toString());
+                return mTransactionsDbAdapter.fetchTransactionSuggestions(name == null ? "" : name.toString(), mAccountUID);
             }
         });
 
diff --git a/app/src/main/res/layout/dropdown_item_2lines.xml b/app/src/main/res/layout/dropdown_item_2lines.xml
new file mode 100644
index 00000000..044e61de
--- /dev/null
+++ b/app/src/main/res/layout/dropdown_item_2lines.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_height="?android:attr/listPreferredItemHeight"
+    android:layout_width="match_parent"
+    android:paddingLeft="10dp"
+    android:paddingTop="5dp"
+    android:paddingRight="10dp"
+    android:layout_weight="1"
+    android:orientation="vertical">
+
+    <TextView
+        android:id="@+id/primary_text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:singleLine="true"
+        android:ellipsize="end"
+        tools:text="Transaction description"
+        style="@style/ListItemText"/>
+
+    <TextView
+        android:id="@+id/secondary_text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:singleLine="true"
+        android:ellipsize="end"
+        android:textAppearance="?android:attr/textAppearanceSmall"
+        tools:text="Amount and date"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index a148cc4b..07f1842b 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -175,10 +175,13 @@
                       style="@style/Dropdown.TextView" />
 
         </LinearLayout>
+
         <CheckBox android:id="@+id/checkbox_save_template"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_marginBottom="@dimen/form_row_bottom_margin"
+			android:visibility="gone"
             android:text="@string/label_save_template" />
+		<!-- Not exposing the transaction template checkbox to the UI at this time -->
 	</LinearLayout>
 </ScrollView>
\ No newline at end of file

From d91a78d6d18a72a8f3361fd1b7d212aedf17bb05 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 10 Apr 2015 14:40:11 +0200
Subject: [PATCH 39/52] Template transactions will not be deleted when clearing
 all transactions

---
 .../java/org/gnucash/android/db/AccountsDbAdapter.java |  3 +--
 .../org/gnucash/android/db/TransactionsDbAdapter.java  | 18 ++++++++++++++++++
 .../DeleteAllTransacationsConfirmationDialog.java      |  2 +-
 3 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index bc2e1f8b..55c5213f 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1255,8 +1255,7 @@ public static String getOpeningBalanceAccountFullName(){
 	 */
     @Override
 	public int deleteAllRecords(){
-		mDb.delete(TransactionEntry.TABLE_NAME, null, null);
-        mDb.delete(SplitEntry.TABLE_NAME, null, null);
+		mDb.delete(TransactionEntry.TABLE_NAME, null, null); //this will take the splits along with it
         return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
 
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index f4c639b1..292e105f 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -564,6 +564,16 @@ public int getNumCurrencies(String transactionUID) {
     }
 
     /**
+     * Deletes all transactions except those which are marked as templates.
+     * <p>If you want to delete really all transaction records, use {@link #deleteAllRecords()}</p>
+     * @return Number of records deleted
+     */
+    public int deleteAllNonTemplateTransactions(){
+        String where = TransactionEntry.COLUMN_TEMPLATE + "!=0";
+        return mDb.delete(mTableName, where, null);
+    }
+
+    /**
      * Returns a timestamp of the earliest transaction for the specified account type
      * @param type the account type
      * @return the earliest transaction's timestamp. Returns 1970-01-01 00:00:00.000 if no transaction found
@@ -581,6 +591,14 @@ public long getTimestampOfLatestTransaction(AccountType type) {
         return getTimestamp("MAX", type);
     }
 
+    /**
+     * Returns the earliest or latest timestamp of transactions for a specific account type
+     * @param mod Mode (either MAX or MIN)
+     * @param type AccountType
+     * @return earliest or latest timestamp of transactions
+     * @see #getTimestampOfLatestTransaction(AccountType)
+     * @see #getTimestampOfEarliestTransaction(AccountType)
+     */
     private long getTimestamp(String mod, AccountType type) {
         String sql = "SELECT " + mod + "(" + TransactionEntry.COLUMN_TIMESTAMP + ")" +
                 " FROM " + TransactionEntry.TABLE_NAME +
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index 20554a4b..1e62eeb2 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -68,7 +68,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                     openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
                                 }
                                 TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
-                                transactionsDbAdapter.deleteAllRecords();
+                                transactionsDbAdapter.deleteAllNonTemplateTransactions();
 
                                 if (preserveOpeningBalances) {
                                     transactionsDbAdapter.bulkAddTransactions(openingBalances);

From 99dea00632c892fe94cac2c9f60011efd820e946 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 10 Apr 2015 21:41:44 +0200
Subject: [PATCH 40/52] Auto-balance transactions during import

Fixed: opening balances are deleted after export is completed
Fixed: Regression - no backup created before deleting transactions

Closes #302
---
 .../gnucash/android/export/ExportAsyncTask.java    | 29 ++++++++++++++++++----
 .../gnucash/android/importer/GncXmlHandler.java    | 20 +++++++++++++++
 .../org/gnucash/android/model/Transaction.java     | 29 +++++++++++++++++++++-
 3 files changed, 72 insertions(+), 6 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index a932cfeb..82d21cb4 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -26,20 +26,20 @@
 import android.os.AsyncTask;
 import android.os.Build;
 import android.preference.PreferenceManager;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
 import android.util.Log;
 import android.widget.Toast;
 
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
 import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
-import org.gnucash.android.ui.transaction.dialog.TransactionsDeleteConfirmationDialogFragment;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -208,8 +208,7 @@ protected void onPostExecute(Boolean exportResult) {
         }
 
         if (mExportParams.shouldDeleteTransactionsAfterExport()) {
-            //TODO: we delete with impunity here, make sure files are backed-up first
-            TransactionsDbAdapter.getInstance().deleteAllRecords();
+            backupAndDeleteTransactions();
 
             //now refresh the respective views
             if (mContext instanceof AccountsActivity){
@@ -226,6 +225,26 @@ protected void onPostExecute(Boolean exportResult) {
     }
 
     /**
+     * Backups of the database, saves opening balances (if necessary)
+     * and deletes all non-template transactions in the database.
+     */
+    private void backupAndDeleteTransactions(){
+        GncXmlExporter.createBackup(); //create backup before deleting everything
+        List<Transaction> openingBalances = new ArrayList<Transaction>();
+        boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+        if (preserveOpeningBalances) {
+            openingBalances = AccountsDbAdapter.getInstance().getAllOpeningBalanceTransactions();
+        }
+
+        TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
+        transactionsDbAdapter.deleteAllNonTemplateTransactions();
+
+        if (preserveOpeningBalances) {
+            transactionsDbAdapter.bulkAddTransactions(openingBalances);
+        }
+    }
+
+    /**
      * Starts an intent chooser to allow the user to select an activity to receive
      * the exported OFX file
      * @param path String path to the file on disk
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 76a9356d..1cc931cb 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -433,19 +433,25 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_MEMO)){
             mSplit.setMemo(characterString);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_VALUE)){
+            //the split amount uses the transaction currency, but in the db it will correctly use the account currency
             Money amount = new Money(GncXmlHelper.parseMoney(characterString), mTransaction.getCurrency());
+
+            //this is intentional: GnuCash XML formats split amounts, credits are negative, debits are positive.
             mSplit.setType(amount.isNegative() ? TransactionType.CREDIT : TransactionType.DEBIT);
             mSplit.setAmount(amount.absolute());
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ACCOUNT)){
             mSplit.setAccountUID(characterString);
+            mSplit.setAmount(mSplit.getAmount().withCurrency(getCurrencyForAccount(characterString)));
         }
         else if (qualifiedName.equals(GncXmlHelper.TAG_TRN_SPLIT)){
             mTransaction.addSplit(mSplit);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
             mTransaction.setTemplate(mInTemplates);
+            mTransaction.autoBalance();
             mTransactionList.add(mTransaction);
+
             if (mRecurrencePeriod > 0) { //if we find an old format recurrence period, parse it
                 mTransaction.setTemplate(true);
                 ScheduledAction scheduledAction = ScheduledAction.parseScheduledAction(mTransaction, mRecurrencePeriod);
@@ -569,4 +575,18 @@ public void endDocument() throws SAXException {
             mAccountsDbAdapter.endTransaction();
         }
     }
+
+    /**
+     * Returns the currency for an account which has been parsed (but not yet saved to the db)
+     * <p>This is used when parsing splits to assign the right currencies to the splits</p>
+     * @param accountUID GUID of the account
+     * @return Currency of the account
+     */
+    private Currency getCurrencyForAccount(String accountUID){
+        for (Account account : mAccountList) {
+            if (account.getUID().equals(accountUID))
+                return account.getCurrency();
+        }
+        return Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index 1a699443..9520250c 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -159,6 +159,31 @@ private void initDefaults(){
 	}
 
     /**
+     * Auto-balance the transaction by creating an imbalance split where necessary
+     * <p><b>Note:</b>If a transaction has splits with different currencies, not auto-balancing will be performed.</p>
+     */
+    public void autoBalance(){
+        //FIXME: when multiple currencies per transaction are supported
+        Currency lastCurrency = null;
+        for (Split split : mSplitList) {
+            Currency currentCurrency = split.getAmount().getCurrency();
+            if (lastCurrency == null)
+                lastCurrency = currentCurrency;
+            else if (lastCurrency != currentCurrency){
+                return;
+            }
+        }
+
+        Money imbalance = getImbalance();
+        if (!imbalance.isAmountZero()){
+            Currency currency = Currency.getInstance(mCurrencyCode);
+            Split split = new Split(imbalance.negate(),
+                    AccountsDbAdapter.getInstance().getOrCreateImbalanceAccountUID(currency));
+            mSplitList.add(split);
+        }
+    }
+
+    /**
      * Returns list of splits for this transaction
      * @return {@link java.util.List} of splits in the transaction
      */
@@ -236,7 +261,9 @@ public Money getImbalance(){
 
     /**
      * Computes the balance of the splits belonging to a particular account.
-     * Only those splits which belong to the account will be considered.
+     * <p>Only those splits which belong to the account will be considered.
+     * If the {@code accountUID} is null, then the imbalance of the transaction is computed. This means that either
+     * zero is returned (for balanced transactions) or the imbalance amount will be returned.</p>
      * @param accountUID Unique Identifier of the account
      * @param splitList List of splits
      * @return Money list of splits

From 0fa9038408d9876201db15dbc2b46340aab8db43 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 11 Apr 2015 03:12:57 +0200
Subject: [PATCH 41/52] Improved the parsing and display of scheduled action
 descriptions

Added UID of origin scheduled action to transaction table
Fixed: Scheduled actions not exported to XML
Localized the scheduled action repeat string
Refactored database schema (removed deprecated tables and code)
---
 .../org/gnucash/android/db/DatabaseHelper.java     |  13 +--
 .../org/gnucash/android/db/DatabaseSchema.java     |   6 +-
 .../android/db/ScheduledActionDbAdapter.java       |  12 +--
 .../gnucash/android/db/TransactionsDbAdapter.java  |  33 ++-----
 .../gnucash/android/export/xml/GncXmlExporter.java |  12 ++-
 .../gnucash/android/export/xml/GncXmlHelper.java   |   5 +-
 .../gnucash/android/importer/GncXmlHandler.java    |   5 +-
 .../java/org/gnucash/android/model/PeriodType.java | 108 +++++++++++++++++++++
 .../org/gnucash/android/model/ScheduledAction.java |  89 ++++++++---------
 .../org/gnucash/android/model/Transaction.java     |  21 ++++
 .../gnucash/android/service/SchedulerService.java  |   2 +-
 .../ScheduledTransactionsListFragment.java         |  10 +-
 .../ui/transaction/TransactionFormFragment.java    |   4 +
 .../gnucash/android/ui/util/RecurrenceParser.java  |   2 +-
 app/src/main/res/values-de/strings.xml             |  16 +++
 app/src/main/res/values-el/strings.xml             |  16 +++
 app/src/main/res/values-es-rMX/strings.xml         |  16 +++
 app/src/main/res/values-es/strings.xml             |  16 +++
 app/src/main/res/values-fr/strings.xml             |  16 +++
 app/src/main/res/values-hu/strings.xml             |  16 +++
 app/src/main/res/values-it/strings.xml             |  16 +++
 app/src/main/res/values-nb/strings.xml             |  16 +++
 app/src/main/res/values-nl/strings.xml             |  16 +++
 app/src/main/res/values-pt-rBR/strings.xml         |  16 +++
 app/src/main/res/values-ru/strings.xml             |  16 +++
 app/src/main/res/values-zh/strings.xml             |  16 +++
 app/src/main/res/values/strings.xml                |  16 +++
 27 files changed, 434 insertions(+), 96 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/model/PeriodType.java

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 019bffb6..843d1e16 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -89,6 +89,7 @@
 			+ TransactionEntry.COLUMN_EXPORTED      + " tinyint default 0, "
 			+ TransactionEntry.COLUMN_TEMPLATE      + " tinyint default 0, "
             + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
+            + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " varchar(255), "
             + TransactionEntry.COLUMN_CREATED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
             + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
 			+ ");" + createUpdatedAtTrigger(TransactionEntry.TABLE_NAME);
@@ -122,7 +123,7 @@
             + ScheduledActionEntry.COLUMN_END_TIME       + " integer default 0, "
             + ScheduledActionEntry.COLUMN_TAG            + " text, "
             + ScheduledActionEntry.COLUMN_ENABLED        + " tinyint default 1, " //enabled by default
-            + ScheduledActionEntry.COLUMN_NUM_OCCURRENCES+ " integer default 0, "
+            + ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY + " integer default 0, "
             + ScheduledActionEntry.COLUMN_EXECUTION_COUNT+ " integer default 0, "
             + ScheduledActionEntry.COLUMN_CREATED_AT     + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
             + ScheduledActionEntry.COLUMN_MODIFIED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
@@ -207,7 +208,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             if (oldVersion == 3 && newVersion >= 4){
                 Log.i(LOG_TAG, "Updating database to version 4");
                 String addRecurrencePeriod = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
-                        " ADD COLUMN " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0";
+                        " ADD COLUMN recurrence_period integer default 0";
 
                 String addDefaultTransferAccount = "ALTER TABLE " + AccountEntry.TABLE_NAME
                         + " ADD COLUMN " + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " varchar(255)";
@@ -297,7 +298,7 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
             //TODO: Migrate old scheduled events using only SQL, code had changed
             //TODO: Take care to properly migrate the created_at dates for transactions (use the date already in the transaction)
             //TODO: auto-balance existing splits during migration
-
+            //TODO: add schedx_action_uid column to transactions table
             db.setTransactionSuccessful();
             oldVersion = 8;
         } finally {
@@ -334,7 +335,7 @@ private int upgradeDbToVersion7(SQLiteDatabase db) {
                     + TransactionEntry.COLUMN_TIMESTAMP + " integer not null, "
                     + TransactionEntry.COLUMN_EXPORTED + " tinyint default 0, "
                     + TransactionEntry.COLUMN_CURRENCY + " varchar(255) not null, "
-                    + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0, "
+                    + "recurrence_period integer default 0, "
                     + "UNIQUE (" + TransactionEntry.COLUMN_UID + ") "
                     + ");");
             // initialize new transaction table wiht data from old table
@@ -346,7 +347,7 @@ private int upgradeDbToVersion7(SQLiteDatabase db) {
                             + TransactionEntry.COLUMN_TIMESTAMP + " , "
                             + TransactionEntry.COLUMN_EXPORTED + " , "
                             + TransactionEntry.COLUMN_CURRENCY + " , "
-                            + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " )  SELECT "
+                            + "recurrence_period )  SELECT "
                             + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry._ID + " , "
                             + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_UID + " , "
                             + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_DESCRIPTION + " , "
@@ -354,7 +355,7 @@ private int upgradeDbToVersion7(SQLiteDatabase db) {
                             + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_TIMESTAMP + " , "
                             + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_EXPORTED + " , "
                             + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY + " , "
-                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_RECURRENCE_PERIOD
+                            + TransactionEntry.TABLE_NAME + "_bak.recurrence_period"
                             + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
                             + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid == " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
             );
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index d2d83111..f658ca6d 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -79,9 +79,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
         public static final String COLUMN_TEMPLATE              = "is_template";
-
-        @Deprecated
-        public static final String COLUMN_RECURRENCE_PERIOD     = "recurrence_period";
+        public static final String COLUMN_SCHEDX_ACTION_UID     = "schedx_action_uid";
 
         public static final String INDEX_UID                    = "transaction_uid_index";
     }
@@ -113,7 +111,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_PERIOD            = "period";
         public static final String COLUMN_TAG               = "tag"; //for any action-specific information
         public static final String COLUMN_ENABLED           = "is_enabled";
-        public static final String COLUMN_NUM_OCCURRENCES   = "num_occurrences"; //FIXME: This should not be here, rather transactions table should store UID of action which created it
+        public static final String COLUMN_TOTAL_FREQUENCY   = "total_frequency";
         public static final String COLUMN_EXECUTION_COUNT   = "execution_count";
 
         public static final String INDEX_UID            = "scheduled_action_uid_index";
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index edda39ee..876b6033 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -64,7 +64,7 @@ public long addScheduledAction(ScheduledAction scheduledAction){
         contentValues.put(ScheduledActionEntry.COLUMN_TYPE,      scheduledAction.getActionType().name());
         contentValues.put(ScheduledActionEntry.COLUMN_TAG,       scheduledAction.getTag());
         contentValues.put(ScheduledActionEntry.COLUMN_ENABLED,   scheduledAction.isEnabled() ? "1":"0");
-        contentValues.put(ScheduledActionEntry.COLUMN_NUM_OCCURRENCES, scheduledAction.getNumberOfOccurences());
+        contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, scheduledAction.getTotalFrequency());
         contentValues.put(ScheduledActionEntry.COLUMN_EXECUTION_COUNT, scheduledAction.getExecutionCount());
 
         Log.d(TAG, "Replace scheduled event in the db");
@@ -92,7 +92,7 @@ public int bulkAddScheduledActions(List<ScheduledAction> scheduledActionList){
                     + ScheduledActionEntry.COLUMN_ENABLED           + " , "
                     + ScheduledActionEntry.COLUMN_CREATED_AT        + " , "
                     + ScheduledActionEntry.COLUMN_TAG               + " , "
-                    + ScheduledActionEntry.COLUMN_NUM_OCCURRENCES   + " , "
+                    + ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY + " , "
                     + ScheduledActionEntry.COLUMN_EXECUTION_COUNT   + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");
             for (ScheduledAction schedxAction:scheduledActionList) {
                 replaceStatement.clearBindings();
@@ -106,7 +106,7 @@ public int bulkAddScheduledActions(List<ScheduledAction> scheduledActionList){
                 replaceStatement.bindLong(8,    schedxAction.isEnabled() ? 1 : 0);
                 replaceStatement.bindString(9,  schedxAction.getCreatedTimestamp().toString());
                 replaceStatement.bindString(10, schedxAction.getTag());
-                replaceStatement.bindString(11, Integer.toString(schedxAction.getNumberOfOccurences()));
+                replaceStatement.bindString(11, Integer.toString(schedxAction.getTotalFrequency()));
                 replaceStatement.bindString(12, Integer.toString(schedxAction.getExecutionCount()));
 
                 replaceStatement.execute();
@@ -134,7 +134,7 @@ private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
         String typeString = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TYPE));
         String tag      = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TAG));
         boolean enabled = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ENABLED)) > 0;
-        int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_NUM_OCCURRENCES));
+        int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY));
         int execCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EXECUTION_COUNT));
 
         ScheduledAction event = new ScheduledAction(ScheduledAction.ActionType.valueOf(typeString));
@@ -146,7 +146,7 @@ private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
         event.setLastRun(lastRun);
         event.setTag(tag);
         event.setEnabled(enabled);
-        event.setNumberOfOccurences(numOccurrences);
+        event.setTotalFrequency(numOccurrences);
         event.setExecutionCount(execCount);
 
         return event;
@@ -175,7 +175,7 @@ public ScheduledAction getScheduledEvent(String uid){
      * @param eventUID GUID of the event itself
      * @return List of ScheduledEvents
      */
-    public List<ScheduledAction> getScheduledEventsWithUID(@NonNull String eventUID){
+    public List<ScheduledAction> getScheduledActionsWithUID(@NonNull String eventUID){
         Cursor cursor = mDb.query(ScheduledActionEntry.TABLE_NAME, null,
                 ScheduledActionEntry.COLUMN_ACTION_UID + "= ?",
                 new String[]{eventUID}, null, null, null);
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 292e105f..66bf8aef 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -90,6 +90,7 @@ public long addTransaction(Transaction transaction){
 		contentValues.put(TransactionEntry.COLUMN_EXPORTED,     transaction.isExported() ? 1 : 0);
 		contentValues.put(TransactionEntry.COLUMN_TEMPLATE,     transaction.isTemplate() ? 1 : 0);
         contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
+        contentValues.put(TransactionEntry.COLUMN_SCHEDX_ACTION_UID, transaction.getScheduledActionUID());
 
         Log.d(TAG, "Replacing transaction in db");
         long rowId = -1;
@@ -150,7 +151,8 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 + TransactionEntry.COLUMN_EXPORTED      + " , "
                 + TransactionEntry.COLUMN_CURRENCY      + " , "
                 + TransactionEntry.COLUMN_CREATED_AT    + " , "
-                + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?)");
+                + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " , "
+                + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ? , ?)");
             for (Transaction transaction : transactionList) {
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
@@ -161,7 +163,8 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 replaceStatement.bindLong(5,    transaction.isExported() ? 1 : 0);
                 replaceStatement.bindString(6,  transaction.getCurrencyCode());
                 replaceStatement.bindString(7,  transaction.getCreatedTimestamp().toString());
-                replaceStatement.bindLong(8,    transaction.isTemplate() ? 1 : 0);
+                replaceStatement.bindString(8,  transaction.getScheduledActionUID());
+                replaceStatement.bindLong(9,    transaction.isTemplate() ? 1 : 0);
                 replaceStatement.execute();
                 rowInserted ++;
                 splitList.addAll(transaction.getSplits());
@@ -379,29 +382,11 @@ public Transaction buildTransactionInstance(Cursor c){
 		transaction.setNote(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NOTES)));
 		transaction.setExported(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_EXPORTED)) == 1);
 		transaction.setTemplate(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TEMPLATE)) == 1);
+        transaction.setCurrencyCode(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_CURRENCY)));
+        transaction.setScheduledActionUID(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_SCHEDX_ACTION_UID)));
+        long transactionID = c.getLong(c.getColumnIndexOrThrow(TransactionEntry._ID));
+        transaction.setSplits(mSplitsDbAdapter.getSplitsForTransaction(transactionID));
 
-        if (mDb.getVersion() < SPLITS_DB_VERSION){ //legacy, will be used once, when migrating the database
-            String accountUID = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
-            String amountString = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_AMOUNT));
-            String currencyCode = getAccountCurrencyCode(accountUID);
-            Money amount = new Money(amountString, currencyCode);
-
-            Split split = new Split(amount.absolute(), accountUID);
-            TransactionType type = Transaction.getTypeForBalance(getAccountType(accountUID), amount.isNegative());
-            split.setType(type);
-            transaction.addSplit(split);
-
-            String transferAccountUID = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID));
-            if (transferAccountUID == null) {
-                AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
-                transferAccountUID = accountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode));
-            }
-            transaction.addSplit(split.createPair(transferAccountUID));
-        } else {
-            transaction.setCurrencyCode(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_CURRENCY)));
-            long transactionID = c.getLong(c.getColumnIndexOrThrow(TransactionEntry._ID));
-            transaction.setSplits(mSplitsDbAdapter.getSplitsForTransaction(transactionID));
-        }
 		return transaction;
 	}
 
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 6aaf0627..55a7dadf 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -182,6 +182,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_CREATED_AT + " AS trans_date_posted",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " AS trans_from_sched_action",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_UID + " AS split_uid",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_MEMO + " AS split_memo",
                         SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_TYPE + " AS split_type",
@@ -267,6 +268,12 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                     slotValue.add("false");
                 }
 
+                String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_from_sched_action"));
+                if (scheduledActionUID != null && !scheduledActionUID.isEmpty()){
+                    slotKey.add(GncXmlHelper.KEY_FROM_SCHED_ACTION);
+                    slotType.add(GncXmlHelper.ATTR_VALUE_GUID);
+                    slotValue.add(scheduledActionUID);
+                }
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SLOTS);
                 exportSlots(xmlSerializer, slotKey, slotType, slotValue);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SLOTS);
@@ -399,7 +406,7 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
                 //end date
                 serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_END, endTime);
             } else { //add number of occurrences
-                int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_NUM_OCCURRENCES));
+                int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY));
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
                 xmlSerializer.text(Integer.toString(numOccurrences));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
@@ -515,6 +522,9 @@ public void generateExport(Writer writer) throws ExporterException{
             exportTransactions(xmlSerializer, true);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_TEMPLATE_TRANSACTIONS);
 
+            //scheduled actions
+            exportScheduledActions(xmlSerializer);
+
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_ROOT);
             xmlSerializer.endDocument();
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 5e112c22..6bd2481e 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -126,12 +126,13 @@
     public static final String KEY_COLOR            = "color";
     public static final String KEY_FAVORITE         = "favorite";
     public static final String KEY_NOTES            = "notes";
-    public static final String KEY_DEFAULT_TRANSFER_ACCOUNT = "default_transfer_account";
     public static final String KEY_EXPORTED         = "exported";
-    public static final String KEY_SCHEDX_ACTION = "sched-xaction";
+    public static final String KEY_SCHEDX_ACTION    = "sched-xaction";
     public static final String KEY_SPLIT_ACCOUNT    = "key_account";
     public static final String KEY_DEBIT_FORMULA    = "debit-formula";
     public static final String KEY_CREDIT_FORMULA   = "credit-formula";
+    public static final String KEY_FROM_SCHED_ACTION        = "from-sched-xaction";
+    public static final String KEY_DEFAULT_TRANSFER_ACCOUNT = "default_transfer_account";
 
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 1cc931cb..bf123f4b 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -29,6 +29,7 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -475,13 +476,13 @@ else if (qualifiedName.equals(GncXmlHelper.TAG_SX_ENABLED)){
             mScheduledAction.setEnabled(characterString.equalsIgnoreCase("y"));
         }
         else if (qualifiedName.equals(GncXmlHelper.TAG_SX_NUM_OCCUR)){
-            mScheduledAction.setNumberOfOccurences(Integer.parseInt(characterString));
+            mScheduledAction.setTotalFrequency(Integer.parseInt(characterString));
         }
         else if (qualifiedName.equals(GncXmlHelper.TAG_RX_MULT)){
             mRecurrenceMultiplier = Integer.parseInt(characterString);
         }
         else if (qualifiedName.equals(GncXmlHelper.TAG_RX_PERIOD_TYPE)){
-            ScheduledAction.PeriodType periodType = ScheduledAction.PeriodType.valueOf(characterString.toUpperCase());
+            PeriodType periodType = PeriodType.valueOf(characterString.toUpperCase());
             periodType.setMultiplier(mRecurrenceMultiplier);
             mScheduledAction.setPeriod(periodType);
         }
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
new file mode 100644
index 00000000..21435024
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.model;
+
+import android.content.res.Resources;
+
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+
+/**
+* Represents a type of period which can be associated with a recurring event
+ * @author Ngewi Fet <ngewif@gmail.com>
+ * @see org.gnucash.android.model.ScheduledAction
+*/
+public enum PeriodType {
+    DAY, WEEK, MONTH, YEAR;
+
+    int mMultiplier = 1; //multiplier for the period type
+
+    /**
+     * Sets the multiplier for this period type
+     * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
+     * @param multiplier Multiplier for this period type
+     */
+    public void setMultiplier(int multiplier){
+        mMultiplier = multiplier;
+    }
+
+    /**
+     * Returns the multiplier for this period type. The default multiplier is 1.
+     * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
+     * @return  Multiplier for this period type
+     */
+    public int getMultiplier(){
+        return mMultiplier;
+    }
+
+    /**
+     * Returns the frequency description of this period type.
+     * This is used mostly for generating the recurrence rule.
+     * @return Frequency description
+     */
+    public String getFrequencyDescription() {
+        if (mMultiplier > 1){
+            switch (this) {
+                case DAY:
+                    return "Every " + mMultiplier + " days";
+                case WEEK:
+                    return "Every " + mMultiplier + " weeks";
+                case MONTH:
+                    return "Every " + mMultiplier + " months";
+                case YEAR:
+                    return "Every " + mMultiplier + " years";
+                default:
+                    return "Every " + mMultiplier + " days";
+            }
+        } else {
+            switch (this) {
+                case DAY:
+                    return "Daily";
+                case WEEK:
+                    return "Weekly";
+                case MONTH:
+                    return "Monthly";
+                case YEAR:
+                    return "Yearly";
+                default:
+                    return "Daily";
+            }
+        }
+    }
+
+    /**
+     * Returns a localized string describing this period type's frequency.
+     * @return String describing period type
+     */
+    public String getLocalizedFrequencyDescription(){
+        Resources res = GnuCashApplication.getAppContext().getResources();
+
+        switch (this) {
+            case DAY:
+                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier);
+            case WEEK:
+                return res.getQuantityString(R.plurals.label_every_x_weeks, mMultiplier);
+            case MONTH:
+                return res.getQuantityString(R.plurals.label_every_x_months, mMultiplier);
+            case YEAR:
+                return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier);
+            default:
+                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier);
+        }
+    }
+
+}
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 32e5d289..f76674d2 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -38,30 +38,6 @@
      */
     public enum ActionType {TRANSACTION, EXPORT}
 
-    public enum PeriodType {
-        DAY, WEEK, MONTH, YEAR;
-
-        int mMultiplier = 1; //multiplier for the period type
-
-        /**
-         * Sets the multiplier for this period type
-         * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
-         * @param multiplier Multiplier for this period type
-         */
-        public void setMultiplier(int multiplier){
-            mMultiplier = multiplier;
-        }
-
-        /**
-         * Returns the multiplier for this period type. The default multiplier is 1.
-         * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
-         * @return  Multiplier for this period type
-         */
-        public int getMultiplier(){
-            return mMultiplier;
-        }
-    }
-
     /**
      * Next scheduled run of Event
      */
@@ -84,14 +60,14 @@ public int getMultiplier(){
     private ActionType mActionType;
 
     /**
-     * Number of occurences of this event
+     * Number of times this event is to be executed
      */
-    private int mNumberOfOccurences = 0;
+    private int mTotalFrequency = 0;
 
     /**
      * How many times this action has already been executed
      */
-    private int mNumberOfExecutions = 0;
+    private int mExecutionCount = 0;
 
     public ScheduledAction(ActionType actionType){
         mActionType = actionType;
@@ -134,7 +110,7 @@ public void setPeriod(long period) {
 
     /**
      * Sets the period given the period type.
-     * The {@link org.gnucash.android.model.ScheduledAction.PeriodType} should have the multiplier set,
+     * The {@link PeriodType} should have the multiplier set,
      * e.g. bi-weekly actions have period type {@link PeriodType#WEEK} and multiplier 2
      * @param periodType Type of period
      */
@@ -165,7 +141,7 @@ public PeriodType getPeriodType(){
     }
 
     /**
-     * Computes the {@link org.gnucash.android.model.ScheduledAction.PeriodType} for a given {@code period}
+     * Computes the {@link PeriodType} for a given {@code period}
      * @param period Period in milliseconds since Epoch
      * @return PeriodType corresponding to the period
      */
@@ -221,7 +197,7 @@ public long getEndTime() {
      * @return End time in milliseconds for the scheduled action
      */
     public long getApproxEndTime(){
-        return mStartDate + (mPeriod * mNumberOfOccurences);
+        return mStartDate + (mPeriod * mTotalFrequency);
     }
 
     public void setEndTime(long endDate) {
@@ -246,20 +222,18 @@ public void setEnabled(boolean enabled){
 
     /**
      * Returns the total number of occurences of this scheduled action.
-     * <p>Typically, this is set explicity, but if not, then it is computed from the values of
-     * the start date, end date and period.</p>
      * @return Total number of occurences of this action
      */
-    public int getNumberOfOccurences(){
-        return mNumberOfOccurences;
+    public int getTotalFrequency(){
+        return mTotalFrequency;
     }
 
     /**
      * Sets the number of occurences of this action
      * @param occurencesCount Number of occurences
      */
-    public void setNumberOfOccurences(int occurencesCount){
-        this.mNumberOfOccurences = occurencesCount;
+    public void setTotalFrequency(int occurencesCount){
+        this.mTotalFrequency = occurencesCount;
     }
 
     /**
@@ -267,7 +241,7 @@ public void setNumberOfOccurences(int occurencesCount){
      * @return Number of times this action has been executed
      */
     public int getExecutionCount(){
-        return mNumberOfExecutions;
+        return mExecutionCount;
     }
 
     /**
@@ -275,7 +249,7 @@ public int getExecutionCount(){
      * @param executionCount Number of executions
      */
     public void setExecutionCount(int executionCount){
-        mNumberOfExecutions = executionCount;
+        mExecutionCount = executionCount;
     }
 
     /**
@@ -283,16 +257,43 @@ public void setExecutionCount(int executionCount){
      * @return String description of repeat schedule
      */
     public String getRepeatString(){
-        //TODO: localize the string
-        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy", Locale.US);
-        String repeatString = String.format("Repeats every %d %s starting on %s", getPeriodType().getMultiplier(), getPeriodType().name().toLowerCase(),
-                dateFormat.format(new Date(mStartDate)));
+        String dayOfWeek = new SimpleDateFormat("E", Locale.US).format(new Date(mStartDate));
+        PeriodType periodType = getPeriodType();
+        StringBuilder ruleBuilder = new StringBuilder(periodType.getLocalizedFrequencyDescription());
+        ruleBuilder.append(" on " + dayOfWeek);
+        ruleBuilder.append(";");
         if (mEndDate > 0){
-            repeatString += " until " + dateFormat.format(mEndDate);
+            ruleBuilder.append(" until " + new SimpleDateFormat("M/d", Locale.US).format(new Date(mEndDate)) + ";");
+        } else if (mTotalFrequency > 0){
+            ruleBuilder.append(" for " + mTotalFrequency + " times;");
         }
-        return repeatString;
+        return ruleBuilder.toString();
     }
 
+    /**
+     * Creates an RFC 2445 string which describes this recurring event
+     * @return String describing event
+     */
+    public String getRuleString(){
+        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
+        PeriodType periodType = getPeriodType();
+        StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyDescription());
+        ruleBuilder.append(" on " + dayOfWeek);
+        ruleBuilder.append(";");
+        if (mEndDate > 0){
+            ruleBuilder.append(" until " + new SimpleDateFormat("M/d/yyyy", Locale.US).format(new Date(mEndDate)) + ";");
+        } else if (mTotalFrequency > 0){
+            ruleBuilder.append(" for " + mTotalFrequency + " times;");
+        }
+        return ruleBuilder.toString();
+    }
+
+    /**
+     * Creates a ScheduledAction from a Transaction and a period
+     * @param transaction
+     * @param period
+     * @return
+     */
     public static ScheduledAction parseScheduledAction(Transaction transaction, long period){
         ScheduledAction scheduledAction = new ScheduledAction(ActionType.TRANSACTION);
         scheduledAction.mActionUID = transaction.getUID();
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index 9520250c..eb1c8739 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -115,6 +115,11 @@
      */
     private boolean mIsTemplate = false;
 
+    /**
+     * GUID of ScheduledAction which created this transaction
+     */
+    private String mScheduledActionUID = null;
+
 	/**
 	 * Overloaded constructor. Creates a new transaction instance with the
 	 * provided data and initializes the rest to default values.
@@ -515,6 +520,22 @@ public Element toOFX(Document doc, String accountUID){
 	}
 
     /**
+     * Returns the GUID of the {@link org.gnucash.android.model.ScheduledAction} which created this transaction
+     * @return GUID of scheduled action
+     */
+    public String getScheduledActionUID() {
+        return mScheduledActionUID;
+    }
+
+    /**
+     * Sets the GUID of the {@link org.gnucash.android.model.ScheduledAction} which created this transaction
+     * @param scheduledActionUID GUID of the scheduled action
+     */
+    public void setScheduledActionUID(String scheduledActionUID) {
+        mScheduledActionUID = scheduledActionUID;
+    }
+
+    /**
      * Creates an Intent with arguments from the <code>transaction</code>.
      * This intent can be broadcast to create a new transaction
      * @param transaction Transaction used to create intent
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index aa00989c..02776cd8 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -70,7 +70,7 @@ protected void onHandleIntent(Intent intent) {
 
             long now = System.currentTimeMillis();
             //if we did not exceed the endtime (if there is one), and one execution period has passed since last run
-            if (((endTime > 0 && now < endTime) || (scheduledAction.getExecutionCount() < scheduledAction.getNumberOfOccurences()) || endTime == 0)
+            if (((endTime > 0 && now < endTime) || (scheduledAction.getExecutionCount() < scheduledAction.getTotalFrequency()) || endTime == 0)
                     && (lastRun + period) < now ){
                 executeScheduledEvent(scheduledAction);
             }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index 3a0fb65e..fb33929d 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2013 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -110,7 +110,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                         Log.i(TAG, "Cancelling scheduled transaction(s)");
                         String trnUID = mTransactionsDbAdapter.getUID(id);
                         ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-                        List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledEventsWithUID(trnUID);
+                        List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledActionsWithUID(trnUID);
 
                         if (mTransactionsDbAdapter.deleteRecord(id)){
                             Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
@@ -179,8 +179,8 @@ public void onResume() {
     @Override
     public void onListItemClick(ListView l, View v, int position, long id) {
         super.onListItemClick(l, v, position, id);
-        if (mInEditMode){
-            CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox_parent_account);
+        if (mActionMode != null){
+            CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox);
             checkbox.setChecked(!checkbox.isChecked());
             return;
         }
@@ -400,7 +400,7 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
-            List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledEventsWithUID(transaction.getUID());
+            List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledActionsWithUID(transaction.getUID());
             StringBuilder repeatStringBuilder = new StringBuilder();
             for (ScheduledAction event : events) {
                 repeatStringBuilder.append(event.getRepeatString()).append("\n");
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index fa139cff..f15c9cb2 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -435,6 +435,10 @@ private void initializeViewsWithTransaction(){
         }
 
         mSaveTemplate.setChecked(mTransaction.isTemplate());
+        List<ScheduledAction> scheduledActions = ScheduledActionDbAdapter.getInstance().getScheduledActionsWithUID(mTransaction.getUID());
+        if (!scheduledActions.isEmpty()){
+            mRecurrenceTextView.setText(scheduledActions.get(0).getRuleString());
+        }
     }
 
     private void enableControls(boolean b) {
diff --git a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
index 70c8c16d..fe5b993d 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
@@ -128,7 +128,7 @@ private static void parseEndTime(EventRecurrence eventRecurrence, ScheduledActio
             endTime.parse(eventRecurrence.until);
             scheduledAction.setEndTime(endTime.toMillis(false));
         } else if (eventRecurrence.count > 0){
-            scheduledAction.setNumberOfOccurences(eventRecurrence.count);
+            scheduledAction.setTotalFrequency(eventRecurrence.count);
         }
     }
 
diff --git a/app/src/main/res/values-de/strings.xml b/app/src/main/res/values-de/strings.xml
index 366352a9..11daac28 100644
--- a/app/src/main/res/values-de/strings.xml
+++ b/app/src/main/res/values-de/strings.xml
@@ -440,4 +440,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-el/strings.xml b/app/src/main/res/values-el/strings.xml
index 319639f5..ccd940da 100644
--- a/app/src/main/res/values-el/strings.xml
+++ b/app/src/main/res/values-el/strings.xml
@@ -465,4 +465,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-es-rMX/strings.xml b/app/src/main/res/values-es-rMX/strings.xml
index 571a2e13..c5aa38e7 100644
--- a/app/src/main/res/values-es-rMX/strings.xml
+++ b/app/src/main/res/values-es-rMX/strings.xml
@@ -450,4 +450,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-es/strings.xml b/app/src/main/res/values-es/strings.xml
index 6eb36f4b..f3d4ef35 100644
--- a/app/src/main/res/values-es/strings.xml
+++ b/app/src/main/res/values-es/strings.xml
@@ -447,4 +447,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-fr/strings.xml b/app/src/main/res/values-fr/strings.xml
index ae46c13d..4e0f037e 100644
--- a/app/src/main/res/values-fr/strings.xml
+++ b/app/src/main/res/values-fr/strings.xml
@@ -447,4 +447,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-hu/strings.xml b/app/src/main/res/values-hu/strings.xml
index 064c0402..2b044f00 100644
--- a/app/src/main/res/values-hu/strings.xml
+++ b/app/src/main/res/values-hu/strings.xml
@@ -451,4 +451,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
\ No newline at end of file
diff --git a/app/src/main/res/values-it/strings.xml b/app/src/main/res/values-it/strings.xml
index 229dd7c0..962bb3e3 100644
--- a/app/src/main/res/values-it/strings.xml
+++ b/app/src/main/res/values-it/strings.xml
@@ -451,4 +451,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-nb/strings.xml b/app/src/main/res/values-nb/strings.xml
index 3409c8ca..3fb7aab1 100644
--- a/app/src/main/res/values-nb/strings.xml
+++ b/app/src/main/res/values-nb/strings.xml
@@ -447,4 +447,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-nl/strings.xml b/app/src/main/res/values-nl/strings.xml
index 192dc6f2..aa46a47f 100644
--- a/app/src/main/res/values-nl/strings.xml
+++ b/app/src/main/res/values-nl/strings.xml
@@ -452,4 +452,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-pt-rBR/strings.xml b/app/src/main/res/values-pt-rBR/strings.xml
index f66ccf17..b14635ff 100644
--- a/app/src/main/res/values-pt-rBR/strings.xml
+++ b/app/src/main/res/values-pt-rBR/strings.xml
@@ -450,4 +450,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-ru/strings.xml b/app/src/main/res/values-ru/strings.xml
index 0424058b..70d00498 100644
--- a/app/src/main/res/values-ru/strings.xml
+++ b/app/src/main/res/values-ru/strings.xml
@@ -453,4 +453,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index 5c4251e1..84baea42 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -448,4 +448,20 @@
     <string name="label_delete_transactions"></string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule"></string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 96b953b1..f48ccbd6 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -450,4 +450,20 @@
     <string name="label_delete_transactions">Delete transactions</string>
     <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
     <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+    <plurals name="label_every_x_days">
+        <item quantity="one">Daily</item>
+        <item quantity="other">Every %d days</item>
+    </plurals>
+    <plurals name="label_every_x_weeks">
+        <item quantity="one">Weekly</item>
+        <item quantity="other">Every %d weeks</item>
+    </plurals>
+    <plurals name="label_every_x_months">
+        <item quantity="one">Monthly</item>
+        <item quantity="other">Every %d months</item>
+    </plurals>
+    <plurals name="label_every_x_years">
+        <item quantity="one">Yearly</item>
+        <item quantity="other">Every %d years</item>
+    </plurals>
 </resources>

From 516f719e82465104de35ff42b9f6b041d92bf392 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 11 Apr 2015 12:02:21 +0800
Subject: [PATCH 42/52] add commodity section

---
 .gitignore                                         |  4 +++-
 .../gnucash/android/export/xml/GncXmlExporter.java | 27 ++++++++++++++++++----
 .../gnucash/android/importer/GncXmlHandler.java    |  2 ++
 3 files changed, 28 insertions(+), 5 deletions(-)

diff --git a/.gitignore b/.gitignore
index 40af9d3c..f017eb2b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,4 +18,6 @@ gen-external-apklibs
 *.iws
 out/
 *.project
-*.classpath
\ No newline at end of file
+*.classpath
+# for CPU profile captures generated by Android Studio
+/captures
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 6aaf0627..cbb4a7db 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -463,6 +463,23 @@ private void serializeDate(XmlSerializer xmlSerializer, String tag, long timeMil
         xmlSerializer.endTag(null, tag);
     }
 
+    private void exportCommodity(XmlSerializer xmlSerializer) throws IOException {
+        List<Currency> currencies = mAccountsDbAdapter.getCurrencies();
+        for (Currency currency : currencies) {
+            if (!currency.getCurrencyCode().equals("XXX")) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, "2.0.0");
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.text("ISO4217");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.text(currency.getCurrencyCode());
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
+            }
+        }
+    }
+
     @Override
     public void generateExport(Writer writer) throws ExporterException{
         try {
@@ -489,10 +506,10 @@ public void generateExport(Writer writer) throws ExporterException{
             xmlSerializer.text(UUID.randomUUID().toString().replaceAll("-", ""));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK_ID);
             //commodity count
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
-            xmlSerializer.text(mAccountsDbAdapter.getCurrencies().size() + "");
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+//            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+//            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
+//            xmlSerializer.text(mAccountsDbAdapter.getCurrencies().size() + "");
+//            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             //account count
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
@@ -503,6 +520,8 @@ public void generateExport(Writer writer) throws ExporterException{
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
             xmlSerializer.text(mTransactionsDbAdapter.getTotalTransactionsCount() + "");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            // export the commodities used in the DB
+            //dexportCommodity(xmlSerializer);
             // accounts. bulk import does not rely on account order
             // the cursor gather account in arbitrary order
             exportAccounts(xmlSerializer);
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 76a9356d..2802d802 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -192,10 +192,12 @@ public void startElement(String uri, String localName,
         switch (qualifiedName.toLowerCase()){
             case GncXmlHelper.TAG_ACCOUNT:
                 mAccount = new Account(""); // dummy name, will be replaced when we find name tag
+                mISO4217Currency = false;   // reset commodity class tag
                 break;
             case GncXmlHelper.TAG_TRANSACTION:
                 mTransaction = new Transaction(""); // dummy name will be replaced
                 mTransaction.setExported(true);     // default to exported when import transactions
+                mISO4217Currency = false; // reset commodity class tag
                 break;
             case GncXmlHelper.TAG_TRN_SPLIT:
                 mSplit = new Split(Money.getZeroInstance(),"");

From 7bc13b39ca0cd0e06b527d72c22a3cc9862509e2 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 11 Apr 2015 13:25:35 +0800
Subject: [PATCH 43/52] fix: template currency, double import

---
 .gitignore                                            |  4 +++-
 .../org/gnucash/android/importer/GncXmlHandler.java   |  2 ++
 .../gnucash/android/ui/account/AccountsActivity.java  | 19 -------------------
 3 files changed, 5 insertions(+), 20 deletions(-)

diff --git a/.gitignore b/.gitignore
index 40af9d3c..591a9a22 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,4 +18,6 @@ gen-external-apklibs
 *.iws
 out/
 *.project
-*.classpath
\ No newline at end of file
+*.classpath
+# cpu profile generated by Android Studio
+/captures
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 76a9356d..72611573 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -192,10 +192,12 @@ public void startElement(String uri, String localName,
         switch (qualifiedName.toLowerCase()){
             case GncXmlHelper.TAG_ACCOUNT:
                 mAccount = new Account(""); // dummy name, will be replaced when we find name tag
+                mISO4217Currency = false;
                 break;
             case GncXmlHelper.TAG_TRANSACTION:
                 mTransaction = new Transaction(""); // dummy name will be replaced
                 mTransaction.setExported(true);     // default to exported when import transactions
+                mISO4217Currency = false;
                 break;
             case GncXmlHelper.TAG_TRN_SPLIT:
                 mSplit = new Split(Money.getZeroInstance(),"");
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 985d0d05..87dd87e1 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -555,25 +555,6 @@ public void importAccounts() {
 
     }
 
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        if (resultCode == RESULT_CANCELED){
-            return;
-        }
-
-        switch (requestCode){
-            case REQUEST_PICK_ACCOUNTS_FILE:
-                try {
-                    InputStream accountInputStream = getContentResolver().openInputStream(data.getData());
-                    new ImportAsyncTask(this).execute(accountInputStream);
-                } catch (FileNotFoundException e) {
-                    e.printStackTrace();
-                }
-                break;
-        }
-    }
-
     /**
      * Starts the AccountsActivity and clears the activity stack
      * @param context Application context

From 198e6a91533f477578ae20085419c176fe510903 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 11 Apr 2015 14:30:27 +0200
Subject: [PATCH 44/52] Implemented editing of schedule of a scheduled
 transaction

Requires generating the recurrence rule for the RecurrencePickerDialog
Updated repeat string of recurrence events to be more descriptive
---
 .../android/db/ScheduledActionDbAdapter.java       |  2 +-
 .../gnucash/android/db/TransactionsDbAdapter.java  |  5 +-
 .../java/org/gnucash/android/model/PeriodType.java | 63 ++++++++++++----------
 .../org/gnucash/android/model/ScheduledAction.java | 53 +++++++++++++-----
 .../java/org/gnucash/android/ui/UxArgument.java    |  5 ++
 .../ScheduledTransactionsListFragment.java         | 36 +++----------
 .../ui/transaction/TransactionFormFragment.java    |  8 +--
 .../ui/transaction/TransactionsActivity.java       |  2 +
 8 files changed, 98 insertions(+), 76 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index 876b6033..d5c427cf 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -157,7 +157,7 @@ private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
      * @param uid GUID of event
      * @return ScheduledEvent object instance
      */
-    public ScheduledAction getScheduledEvent(String uid){
+    public ScheduledAction getScheduledAction(String uid){
         Cursor cursor = fetchRecord(getID(uid));
 
         ScheduledAction scheduledAction = null;
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 66bf8aef..9981f591 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -271,9 +271,10 @@ public Cursor fetchAllScheduledTransactions(){
                 + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
                 + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_ACTION_UID);
 
-        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*",
+                ScheduledActionEntry.TABLE_NAME+"."+ScheduledActionEntry.COLUMN_UID};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
-        queryBuilder.setDistinct(true);
+//        queryBuilder.setDistinct(true);
 
         return queryBuilder.query(mDb, projectionIn, null, null, null, null, sortOrder);
     }
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
index 21435024..345de55d 100644
--- a/app/src/main/java/org/gnucash/android/model/PeriodType.java
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -21,6 +21,10 @@
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
 /**
 * Represents a type of period which can be associated with a recurring event
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -55,32 +59,17 @@ public int getMultiplier(){
      * @return Frequency description
      */
     public String getFrequencyDescription() {
-        if (mMultiplier > 1){
-            switch (this) {
-                case DAY:
-                    return "Every " + mMultiplier + " days";
-                case WEEK:
-                    return "Every " + mMultiplier + " weeks";
-                case MONTH:
-                    return "Every " + mMultiplier + " months";
-                case YEAR:
-                    return "Every " + mMultiplier + " years";
-                default:
-                    return "Every " + mMultiplier + " days";
-            }
-        } else {
-            switch (this) {
-                case DAY:
-                    return "Daily";
-                case WEEK:
-                    return "Weekly";
-                case MONTH:
-                    return "Monthly";
-                case YEAR:
-                    return "Yearly";
-                default:
-                    return "Daily";
-            }
+        switch (this) {
+            case DAY:
+                return "DAILY";
+            case WEEK:
+                return "WEEKLY";
+            case MONTH:
+                return "MONTHLY";
+            case YEAR:
+                return "YEARLY";
+            default:
+                return "";
         }
     }
 
@@ -88,7 +77,7 @@ public String getFrequencyDescription() {
      * Returns a localized string describing this period type's frequency.
      * @return String describing period type
      */
-    public String getLocalizedFrequencyDescription(){
+    public String getFrequencyRepeatString(){
         Resources res = GnuCashApplication.getAppContext().getResources();
 
         switch (this) {
@@ -101,8 +90,26 @@ public String getLocalizedFrequencyDescription(){
             case YEAR:
                 return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier);
             default:
-                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier);
+                return "";
         }
     }
 
+    public String getByParts(long startTime){
+        String partString = "";
+        switch (this){
+            case DAY:
+                break;
+            case WEEK:
+                String dayOfWeek = new SimpleDateFormat("E", Locale.US).format(new Date(startTime));
+                //our parser only supports two-letter day names
+                partString = "BYDAY=" + dayOfWeek.substring(0, dayOfWeek.length()-1).toUpperCase();
+            case MONTH:
+                break;
+            case YEAR:
+                break;
+        }
+        return partString;
+    }
+
+
 }
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index f76674d2..30c3fc19 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -16,10 +16,15 @@
 package org.gnucash.android.model;
 
 import org.gnucash.android.ui.util.RecurrenceParser;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
+import java.io.IOException;
+import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
+import java.util.TimeZone;
 
 /**
 * Represents a scheduled event which is stored in the database and run at regular mPeriod
@@ -257,42 +262,62 @@ public void setExecutionCount(int executionCount){
      * @return String description of repeat schedule
      */
     public String getRepeatString(){
-        String dayOfWeek = new SimpleDateFormat("E", Locale.US).format(new Date(mStartDate));
+        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
         PeriodType periodType = getPeriodType();
-        StringBuilder ruleBuilder = new StringBuilder(periodType.getLocalizedFrequencyDescription());
-        ruleBuilder.append(" on " + dayOfWeek);
+        StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyRepeatString());
+        ruleBuilder.append(" on ").append(dayOfWeek);
         ruleBuilder.append(";");
         if (mEndDate > 0){
-            ruleBuilder.append(" until " + new SimpleDateFormat("M/d", Locale.US).format(new Date(mEndDate)) + ";");
+            ruleBuilder.append(" until ")
+                    .append(SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(new Date(mEndDate)))
+                    .append(";");
         } else if (mTotalFrequency > 0){
-            ruleBuilder.append(" for " + mTotalFrequency + " times;");
+            ruleBuilder.append(" for ").append(mTotalFrequency).append(" times;");
         }
         return ruleBuilder.toString();
     }
 
     /**
      * Creates an RFC 2445 string which describes this recurring event
+     * <p>See http://recurrance.sourceforge.net/</p>
      * @return String describing event
      */
     public String getRuleString(){
-        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
+        String separator = ";";
         PeriodType periodType = getPeriodType();
-        StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyDescription());
-        ruleBuilder.append(" on " + dayOfWeek);
-        ruleBuilder.append(";");
+
+        StringBuilder ruleBuilder = new StringBuilder();
+
+//        =======================================================================
+        //This section complies with the formal rules, but the betterpickers library doesn't like/need it
+
+//        SimpleDateFormat startDateFormat = new SimpleDateFormat("'TZID'=zzzz':'yyyyMMdd'T'HHmmss", Locale.US);
+//        ruleBuilder.append("DTSTART;");
+//        ruleBuilder.append(startDateFormat.format(new Date(mStartDate)));
+//            ruleBuilder.append("\n");
+//        ruleBuilder.append("RRULE:");
+//        ========================================================================
+
+        ruleBuilder.append("FREQ=").append(periodType.getFrequencyDescription()).append(separator);
+        ruleBuilder.append("INTERVAL=").append(periodType.getMultiplier()).append(separator);
+        ruleBuilder.append(periodType.getByParts(mStartDate)).append(separator);
+
         if (mEndDate > 0){
-            ruleBuilder.append(" until " + new SimpleDateFormat("M/d/yyyy", Locale.US).format(new Date(mEndDate)) + ";");
+            SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'", Locale.US);
+            df.setTimeZone(TimeZone.getTimeZone("UTC"));
+            ruleBuilder.append("UNTIL=").append(df.format(new Date(mEndDate))).append(separator);
         } else if (mTotalFrequency > 0){
-            ruleBuilder.append(" for " + mTotalFrequency + " times;");
+            ruleBuilder.append("COUNT=").append(mTotalFrequency).append(separator);
         }
+
         return ruleBuilder.toString();
     }
 
     /**
      * Creates a ScheduledAction from a Transaction and a period
-     * @param transaction
-     * @param period
-     * @return
+     * @param transaction Transaction to be scheduled
+     * @param period Period in milliseconds since Epoch
+     * @return Scheduled Action
      */
     public static ScheduledAction parseScheduledAction(Transaction transaction, long period){
         ScheduledAction scheduledAction = new ScheduledAction(ActionType.TRANSACTION);
diff --git a/app/src/main/java/org/gnucash/android/ui/UxArgument.java b/app/src/main/java/org/gnucash/android/ui/UxArgument.java
index 9230bd2c..c2d4ab0f 100644
--- a/app/src/main/java/org/gnucash/android/ui/UxArgument.java
+++ b/app/src/main/java/org/gnucash/android/ui/UxArgument.java
@@ -67,6 +67,11 @@
      */
     public static final String PARENT_ACCOUNT_UID = "parent_account_uid";
 
+    /**
+     * Key for passing the scheduled action UID to the transactions editor
+     */
+    public static final String SCHEDULED_ACTION_UID = "scheduled_action_uid";
+
     //prevent initialization of instances of this class
     private UxArgument(){
         //prevent even the native class from calling the ctor
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index fb33929d..f9cbb3fe 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -193,7 +193,8 @@ public void onListItemClick(ListView l, View v, int position, long id) {
         }
 
         String accountUID = transaction.getSplits().get(0).getAccountUID();
-        openTransactionForEdit(accountUID, mTransactionsDbAdapter.getUID(id));
+        openTransactionForEdit(accountUID, mTransactionsDbAdapter.getUID(id),
+                v.getTag().toString());
     }
 
     /**
@@ -201,11 +202,12 @@ public void onListItemClick(ListView l, View v, int position, long id) {
      * @param accountUID GUID of account to which transaction belongs
      * @param transactionUID GUID of transaction to be edited
      */
-    public void openTransactionForEdit(String accountUID, String transactionUID){
+    public void openTransactionForEdit(String accountUID, String transactionUID, String scheduledActionUid){
         Intent createTransactionIntent = new Intent(getActivity(), TransactionsActivity.class);
         createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
         createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
         createTransactionIntent.putExtra(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
+        createTransactionIntent.putExtra(UxArgument.SCHEDULED_ACTION_UID, scheduledActionUid);
         startActivity(createTransactionIntent);
     }
 
@@ -363,26 +365,6 @@ public void run() {
             return view;
         }
 
-        /**
-         * Returns the string representation of the recurrence period of the transaction
-         * @param periodMillis Recurrence period in milliseconds
-         * @return String formatted representation of recurrence period
-         */
-        public String getRecurrenceAsString(long periodMillis){
-            String[] recurrencePeriods = getResources().getStringArray(R.array.key_recurrence_period_millis);
-            String[] recurrenceStrings = getResources().getStringArray(R.array.recurrence_period_strings);
-
-            int index = 0;
-            for (String recurrencePeriod : recurrencePeriods) {
-                long period = Long.parseLong(recurrencePeriod);
-                if (period == periodMillis){
-                    break;
-                }
-                index++;
-            }
-            return recurrenceStrings[index];
-        }
-
         @Override
         public void bindView(View view, Context context, Cursor cursor) {
             super.bindView(view, context, cursor);
@@ -400,12 +382,10 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
-            List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledActionsWithUID(transaction.getUID());
-            StringBuilder repeatStringBuilder = new StringBuilder();
-            for (ScheduledAction event : events) {
-                repeatStringBuilder.append(event.getRepeatString()).append("\n");
-            }
-            descriptionTextView.setText(repeatStringBuilder.toString());
+            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.ScheduledActionEntry.TABLE_NAME+"."+ DatabaseSchema.ScheduledActionEntry.COLUMN_UID));
+            view.setTag(scheduledActionUID);
+            ScheduledAction scheduledAction = scheduledActionDbAdapter.getScheduledAction(scheduledActionUID);
+            descriptionTextView.setText(scheduledAction.getRepeatString());
 
         }
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index f15c9cb2..288bcae7 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -435,9 +435,11 @@ private void initializeViewsWithTransaction(){
         }
 
         mSaveTemplate.setChecked(mTransaction.isTemplate());
-        List<ScheduledAction> scheduledActions = ScheduledActionDbAdapter.getInstance().getScheduledActionsWithUID(mTransaction.getUID());
-        if (!scheduledActions.isEmpty()){
-            mRecurrenceTextView.setText(scheduledActions.get(0).getRuleString());
+        String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
+        if (scheduledActionUID != null && !scheduledActionUID.isEmpty()) {
+            ScheduledAction scheduledAction = ScheduledActionDbAdapter.getInstance().getScheduledAction(scheduledActionUID);
+            mRecurrenceRule = scheduledAction.getRuleString();
+            mRecurrenceTextView.setText(scheduledAction.getRepeatString());
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 56b8e4eb..3d17af06 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -303,11 +303,13 @@ protected void onCreate(Bundle savedInstanceState) {
      */
     private void initializeCreateOrEditTransaction() {
         String transactionUID = getIntent().getStringExtra(UxArgument.SELECTED_TRANSACTION_UID);
+        String scheduledActionUID = getIntent().getStringExtra(UxArgument.SCHEDULED_ACTION_UID);
         Bundle args = new Bundle();
         if (transactionUID != null) {
             mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
             args.putString(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
             args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
+            args.putString(UxArgument.SCHEDULED_ACTION_UID, scheduledActionUID);
         } else {
             mSectionHeaderTransactions.setText(R.string.title_add_transaction);
             args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);

From 31fd5c91d95560bd25849864060ee66c6f119211 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 11 Apr 2015 17:37:13 +0200
Subject: [PATCH 45/52] Code documentation and refactoring

---
 .../org/gnucash/android/db/DatabaseHelper.java     | 14 +---
 .../gnucash/android/export/xml/GncXmlExporter.java | 18 +++++-
 .../java/org/gnucash/android/model/PeriodType.java |  6 ++
 .../org/gnucash/android/model/ScheduledAction.java | 74 ++++++++++++++++++++--
 .../main/java/org/gnucash/android/model/Split.java | 56 +++++++++++++++-
 .../org/gnucash/android/model/TransactionType.java |  5 ++
 .../org/gnucash/android/ui/BaseDrawerActivity.java | 27 ++++----
 .../ui/transaction/TransactionFormFragment.java    |  1 -
 8 files changed, 169 insertions(+), 32 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 843d1e16..cf3bc009 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -50,14 +50,6 @@
 	private static final String DATABASE_NAME = "gnucash_db";
 
 	/**
-	 * Account which the origin account this transaction in double entry mode.
-     * This is no longer used since the introduction of splits
-	 */
-    //TODO: find and eliminate uses. Its services are no longer required
-    @Deprecated
-	public static final String KEY_DOUBLE_ENTRY_ACCOUNT_UID 	= "double_account_uid";
-
-	/**
 	 * SQL statement to create the accounts table in the database
 	 */
 	private static final String ACCOUNTS_TABLE_CREATE = "create table " + AccountEntry.TABLE_NAME + " ("
@@ -175,7 +167,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 			if (oldVersion == 1 && newVersion >= 2){
 				Log.i(LOG_TAG, "Adding column for double-entry transactions");
 				String addColumnSql = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
-									" ADD COLUMN " + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " varchar(255)";
+									" ADD COLUMN double_account_uid varchar(255)";
 				
 				//introducing sub accounts
 				Log.i(LOG_TAG, "Adding column for parent accounts");
@@ -398,11 +390,11 @@ private int upgradeDbToVersion7(SQLiteDatabase db) {
                             + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'DEBIT' ELSE 'CREDIT' END ELSE CASE WHEN "
                             + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'CREDIT' ELSE 'DEBIT' END END , "
                     + "ABS ( " + TransactionEntry.TABLE_NAME + "_bak.amount ) , "
-                    + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " , "
+                    + TransactionEntry.TABLE_NAME + "_bak.double_account_uid , "
                     + TransactionEntry.TABLE_NAME + "_baK." + TransactionEntry.COLUMN_UID
                     + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
                     + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
-                    + " WHERE " + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " IS NOT NULL"
+                    + " WHERE " + TransactionEntry.TABLE_NAME + "_bak.double_account_uid IS NOT NULL"
             );
             // drop backup transaction table
             db.execSQL("DROP TABLE " + TransactionEntry.TABLE_NAME + "_bak");
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 55a7dadf..2a55a5bb 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -55,10 +55,20 @@
  */
 public class GncXmlExporter extends Exporter{
 
+    /**
+     * Construct a new exporter with export parameters
+     * @param params Parameters for the export
+     */
     public GncXmlExporter(ExportParams params) {
         super(params, null);
     }
 
+    /**
+     * Overloaded constructor.
+     * Creates an exporter with an already open database instance.
+     * @param params Parameters for the export
+     * @param db SQLite database
+     */
     public GncXmlExporter(ExportParams params, SQLiteDatabase db) {
         super(params, db);
     }
@@ -168,6 +178,12 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
         cursor.close();
     }
 
+    /**
+     * Serializes transactions from the database to XML
+     * @param xmlSerializer XML serializer
+     * @param exportTemplates Flag whether to export templates or normal transactions
+     * @throws IOException if the XML serializer cannot be written to
+     */
     private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTemplates) throws IOException {
         String where = null;
         if (exportTemplates){
@@ -356,7 +372,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
     }
 
     /**
-     * Serializes {@link org.gnucash.android.model.ScheduledAction}s from the database to XML
+     * Serializes {@link ScheduledAction}s from the database to XML
      * @param xmlSerializer XML serializer
      * @throws IOException
      */
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
index 345de55d..81039747 100644
--- a/app/src/main/java/org/gnucash/android/model/PeriodType.java
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -94,6 +94,12 @@ public String getFrequencyRepeatString(){
         }
     }
 
+    /**
+     * Returns the parts of the recurrence rule which describe the day or month on which to run the
+     * scheduled transaction. These parts are the BYxxx
+     * @param startTime Start time of transaction used to determine the start day of execution
+     * @return String describing the BYxxx parts of the recurrence rule
+     */
     public String getByParts(long startTime){
         String partString = "";
         switch (this){
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 30c3fc19..f84f983a 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -81,34 +81,66 @@ public ScheduledAction(ActionType actionType){
         mIsEnabled = true; //all actions are enabled by default
     }
 
+    /**
+     * Returns the type of action to be performed by this scheduled action
+     * @return ActionType of the scheduled action
+     */
     public ActionType getActionType() {
         return mActionType;
     }
 
+    /**
+     * Sets the {@link ActionType}
+     * @param actionType Type of action
+     */
     public void setActionType(ActionType actionType) {
         this.mActionType = actionType;
     }
 
+    /**
+     * Returns the GUID of the action covered by this scheduled action
+     * @return GUID of action
+     */
     public String getActionUID() {
         return mActionUID;
     }
 
+    /**
+     * Sets the GUID of the action being scheduled
+     * @param actionUID GUID of the action
+     */
     public void setActionUID(String actionUID) {
         this.mActionUID = actionUID;
     }
 
+    /**
+     * Returns the timestamp of the last execution of this scheduled action
+     * @return Timestamp in milliseconds since Epoch
+     */
     public long getLastRun() {
         return mLastRun;
     }
 
+    /**
+     * Set time of last execution of the scheduled action
+     * @param nextRun Timestamp in milliseconds since Epoch
+     */
     public void setLastRun(long nextRun) {
         this.mLastRun = nextRun;
     }
 
+    /**
+     * Returns the period of this scheduled action
+     * @return Period in milliseconds since Epoch
+     */
     public long getPeriod() {
         return mPeriod;
     }
 
+    /**
+     * Sets the period of the scheduled action
+     * @param period Period in milliseconds since Epoch
+     */
     public void setPeriod(long period) {
         this.mPeriod = period;
     }
@@ -183,14 +215,26 @@ public static PeriodType getPeriodType(long period){
         return periodType;
     }
 
+    /**
+     * Returns the time of first execution of the scheduled action
+     * @return Start time of scheduled action in milliseconds since Epoch
+     */
     public long getStartTime() {
         return mStartDate;
     }
 
+    /**
+     * Sets the time of first execution of the scheduled action
+     * @param startDate Timestamp in milliseconds since Epoch
+     */
     public void setStartTime(long startDate) {
         this.mStartDate = startDate;
     }
 
+    /**
+     * Returns the time of last execution of the scheduled action
+     * @return Timestamp in milliseconds since Epoch
+     */
     public long getEndTime() {
         return mEndDate;
     }
@@ -205,22 +249,47 @@ public long getApproxEndTime(){
         return mStartDate + (mPeriod * mTotalFrequency);
     }
 
+    /**
+     * Sets the end time of the scheduled action
+     * @param endDate Timestamp in milliseconds since Epoch
+     */
     public void setEndTime(long endDate) {
         this.mEndDate = endDate;
     }
 
+    /**
+     * Returns the tag of this scheduled action
+     * <p>The tag saves additional information about the scheduled action,
+     * e.g. such as export parameters for scheduled backups</p>
+     * @return Tag of scheduled action
+     */
     public String getTag() {
         return mTag;
     }
 
+    /**
+     * Sets the tag of the schedules action.
+     * <p>The tag saves additional information about the scheduled action,
+     * e.g. such as export parameters for scheduled backups</p>
+     * @param tag Tag of scheduled action
+     */
     public void setTag(String tag) {
         this.mTag = tag;
     }
 
+    /**
+     * Returns {@code true} if the scheduled action is enabled, {@code false} otherwise
+     * @return {@code true} if the scheduled action is enabled, {@code false} otherwise
+     */
     public boolean isEnabled(){
         return mIsEnabled;
     }
 
+    /**
+     * Toggles the enabled state of the scheduled action
+     * Disabled scheduled actions will not be executed
+     * @param enabled Flag if the scheduled action is enabled or not
+     */
     public void setEnabled(boolean enabled){
         this.mIsEnabled = enabled;
     }
@@ -328,9 +397,6 @@ public static ScheduledAction parseScheduledAction(Transaction transaction, long
 
     @Override
     public String toString() {
-
-        String eventString = mActionType.name() + " - " + getRepeatString();
-
-        return eventString;
+        return mActionType.name() + " - " + getRepeatString();
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Split.java b/app/src/main/java/org/gnucash/android/model/Split.java
index 826d904b..c40e650f 100644
--- a/app/src/main/java/org/gnucash/android/model/Split.java
+++ b/app/src/main/java/org/gnucash/android/model/Split.java
@@ -70,46 +70,94 @@ public Split(Split sourceSplit, boolean generateUID){
         }
     }
 
+    /**
+     * Returns the amount of the split
+     * @return Money amount of the split
+     */
     public Money getAmount() {
         return mAmount;
     }
 
+    /**
+     * Sets the amount of the split
+     * @param amount Money amount of this split
+     */
     public void setAmount(Money amount) {
         this.mAmount = amount;
     }
 
+    /**
+     * Returns transaction GUID to which the split belongs
+     * @return String GUID of the transaction
+     */
     public String getTransactionUID() {
         return mTransactionUID;
     }
 
+    /**
+     * Sets the transaction to which the split belongs
+     * @param transactionUID GUID of transaction
+     */
     public void setTransactionUID(String transactionUID) {
         this.mTransactionUID = transactionUID;
     }
 
+    /**
+     * Returns the account GUID of this split
+     * @return GUID of the account
+     */
     public String getAccountUID() {
         return mAccountUID;
     }
 
+    /**
+     * Sets the GUID of the account of this split
+     * @param accountUID GUID of account
+     */
     public void setAccountUID(String accountUID) {
         this.mAccountUID = accountUID;
     }
 
+    /**
+     * Returns the type of the split
+     * @return {@link TransactionType} of the split
+     */
     public TransactionType getType() {
         return mSplitType;
     }
 
-    public void setType(TransactionType transactionType) {
-        this.mSplitType = transactionType;
+    /**
+     * Sets the type of this split
+     * @param splitType Type of the split
+     */
+    public void setType(TransactionType splitType) {
+        this.mSplitType = splitType;
     }
 
+    /**
+     * Returns the memo of this split
+     * @return String memo of this split
+     */
     public String getMemo() {
         return mMemo;
     }
 
+    /**
+     * Sets this split memo
+     * @param memo String memo of this split
+     */
     public void setMemo(String memo) {
         this.mMemo = memo;
     }
 
+    /**
+     * Creates a split which is a pair of this instance.
+     * A pair split has all the same attributes except that the SplitType is inverted and it belongs
+     * to another account.
+     * @param accountUID GUID of account
+     * @return New split pair of current split
+     * @see TransactionType#invert()
+     */
     public Split createPair(String accountUID){
         Split pair = new Split(mAmount.absolute(), accountUID);
         pair.setType(mSplitType.invert());
@@ -119,6 +167,10 @@ public Split createPair(String accountUID){
         return pair;
     }
 
+    /**
+     * Clones this split and returns an exact copy.
+     * @return New instance of a split which is a copy of the current one
+     */
     protected Split clone() {
         Split split = new Split(mAmount, mAccountUID);
         split.mUID = mUID;
diff --git a/app/src/main/java/org/gnucash/android/model/TransactionType.java b/app/src/main/java/org/gnucash/android/model/TransactionType.java
index 14f4cd97..0306a4c0 100644
--- a/app/src/main/java/org/gnucash/android/model/TransactionType.java
+++ b/app/src/main/java/org/gnucash/android/model/TransactionType.java
@@ -32,6 +32,11 @@
         CREDIT.opposite = DEBIT;
     }
 
+    /**
+     * Inverts the transaction type.
+     * <p>{@link TransactionType#CREDIT} becomes {@link TransactionType#DEBIT} and vice versa</p>
+     * @return Inverted transaction type
+     */
     public TransactionType invert() {
         return opposite;
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
index 6d19ab52..01beb2c8 100644
--- a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
@@ -103,9 +103,10 @@ public void onDrawerOpened(View drawerView) {
     }
 
     private MergeAdapter createNavDrawerMergeAdapter() {
+        //TODO: Localize nav drawer entries when features are finalized
         ArrayList<String> accountNavOptions = new ArrayList<String>();
         accountNavOptions.add("Favorites");
-        accountNavOptions.add("Open...");
+//        accountNavOptions.add("Open...");
         accountNavOptions.add("Reports");
 
         ArrayAdapter<String> accountsNavAdapter = new ArrayAdapter<String>(this,
@@ -140,7 +141,7 @@ private MergeAdapter createNavDrawerMergeAdapter() {
         settingsHeader.setTextColor(titleColorGreen);
 
         ArrayList<String> aboutNavOptions = new ArrayList<String>();
-        aboutNavOptions.add("Backup & Export");
+//        aboutNavOptions.add("Backup & Export");
         aboutNavOptions.add("Settings");
         //TODO: add help view
         ArrayAdapter<String> aboutNavAdapter = new ArrayAdapter<String>(this,
@@ -173,7 +174,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
         return super.onOptionsItemSelected(item);
     }
 
-    /** Swaps fragments in the main content view */
+    /**
+     * Handler for the navigation drawer items
+     * */
     protected void selectItem(int position) {
         switch (position){
             case 1: { //favorite accounts
@@ -184,22 +187,25 @@ protected void selectItem(int position) {
                 startActivity(intent);
             }
                 break;
+/*
 
             case 2: { //Open... files
                 //TODO: open/import GnuCash files
                 Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
-                pickIntent.setType("application/*");
+                pickIntent.setType("application*/
+/*");
                 Intent chooser = Intent.createChooser(pickIntent, "Select GnuCash account file");
 
                 startActivityForResult(chooser, AccountsActivity.REQUEST_PICK_ACCOUNTS_FILE);
             }
                 break;
+*/
 
-            case 3:
+            case 2:
                 startActivity(new Intent(this, PieChartActivity.class));
                 break;
 
-            case 5: { //show scheduled transactions
+            case 4: { //show scheduled transactions
                 Intent intent = new Intent(this, ScheduledActionsActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_SINGLE_TOP);
                 intent.putExtra(ScheduledActionsActivity.EXTRA_DISPLAY_MODE,
@@ -208,17 +214,12 @@ protected void selectItem(int position) {
             }
                 break;
 
-            case 6:{
+            case 5:{
                 AccountsActivity.showExportDialog(this);
             }
                 break;
 
-            case 9: { //Backup and Export
-
-            }
-                break;
-
-            case 10: //Settings activity
+            case 8: //Settings activity
                 startActivity(new Intent(this, SettingsActivity.class));
                 break;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 288bcae7..85996d7b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -814,7 +814,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
             else if (mAmountEditText.getText().length() == 0) {
                 Toast.makeText(getActivity(), R.string.toast_transanction_amount_required, Toast.LENGTH_SHORT).show();
             } else if (mUseDoubleEntry && mDoubleAccountSpinner.getCount() == 0){
-                //TODO: Localize string
                 Toast.makeText(getActivity(),
                         R.string.toast_disable_double_entry_to_save_transaction,
                         Toast.LENGTH_LONG).show();

From dd92da4fc8f1d3c63bd3d5a6d91a7998fe3f5a92 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 12 Apr 2015 19:35:18 +0800
Subject: [PATCH 46/52] remove multi-currency transaction

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 15 ++---
 .../gnucash/android/db/TransactionsDbAdapter.java  | 50 ++++++++++++----
 .../gnucash/android/export/xml/GncXmlExporter.java | 70 ++++++++++++----------
 3 files changed, 84 insertions(+), 51 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 55c5213f..e6e414de 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -23,6 +23,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -728,7 +729,7 @@ public Cursor fetchAllRecordsOrderedByFullName(){
      * @param orderBy orderBy clause
      * @return Cursor set of accounts which fulfill <code>where</code>
      */
-    public Cursor fetchAccounts(String where, String[] whereArgs, String orderBy){
+    public Cursor fetchAccounts(@Nullable String where, @Nullable String[] whereArgs, @Nullable String orderBy){
         if (orderBy == null){
             orderBy = AccountEntry.COLUMN_NAME + " ASC";
         }
@@ -952,24 +953,20 @@ public Cursor fetchFavoriteAccounts(){
     /**
      * Returns the GnuCash ROOT account UID.
      * <p>In GnuCash desktop account structure, there is a root account (which is not visible in the UI) from which
-     * other top level accounts derive. GnuCash Android does not have this ROOT account by default unless the account
-     * structure was imported from GnuCash for desktop. Hence this method also returns <code>null</code> as an
-     * acceptable result.</p>
-     * <p><b>Note:</b> NULL is an acceptable response, be sure to check for it</p>
+     * other top level accounts derive. GnuCash Android also enforces a ROOT account now</p>
      * @return Unique ID of the GnuCash root account.
      */
     public String getGnuCashRootAccountUID() {
         Cursor cursor = fetchAccounts(AccountEntry.COLUMN_TYPE + "= ?",
                 new String[]{AccountType.ROOT.name()}, null);
-        String rootUID = null;
         try {
             if (cursor.moveToFirst()) {
-                rootUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+                return cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
             }
         } finally {
             cursor.close();
         }
-        return rootUID;
+        throw new IllegalArgumentException("ROOT account doesn't exist in DB");
     }
 
     /**
@@ -1097,7 +1094,7 @@ public String getAccountFullName(String accountUID) {
         finally {
             cursor.close();
         }
-        return null;
+        throw new IllegalArgumentException("account UID: " + accountUID + " does not exist");
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 66bf8aef..df61aa1b 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -23,6 +23,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -144,15 +145,15 @@ public long bulkAddTransactions(List<Transaction> transactionList){
         try {
             mDb.beginTransaction();
             SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + TransactionEntry.TABLE_NAME + " ( "
-                + TransactionEntry.COLUMN_UID 		    + " , "
-                + TransactionEntry.COLUMN_DESCRIPTION   + " , "
-                + TransactionEntry.COLUMN_NOTES         + " , "
-                + TransactionEntry.COLUMN_TIMESTAMP     + " , "
-                + TransactionEntry.COLUMN_EXPORTED      + " , "
-                + TransactionEntry.COLUMN_CURRENCY      + " , "
-                + TransactionEntry.COLUMN_CREATED_AT    + " , "
-                + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " , "
-                + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ? , ?)");
+                    + TransactionEntry.COLUMN_UID + " , "
+                    + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                    + TransactionEntry.COLUMN_NOTES + " , "
+                    + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                    + TransactionEntry.COLUMN_EXPORTED + " , "
+                    + TransactionEntry.COLUMN_CURRENCY + " , "
+                    + TransactionEntry.COLUMN_CREATED_AT + " , "
+                    + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " , "
+                    + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ? , ?)");
             for (Transaction transaction : transactionList) {
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
@@ -163,7 +164,12 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 replaceStatement.bindLong(5,    transaction.isExported() ? 1 : 0);
                 replaceStatement.bindString(6,  transaction.getCurrencyCode());
                 replaceStatement.bindString(7,  transaction.getCreatedTimestamp().toString());
-                replaceStatement.bindString(8,  transaction.getScheduledActionUID());
+                if (transaction.getScheduledActionUID() == null) {
+                    replaceStatement.bindNull(8);
+                }
+                else {
+                    replaceStatement.bindString(8, transaction.getScheduledActionUID());
+                }
                 replaceStatement.bindLong(9,    transaction.isTemplate() ? 1 : 0);
                 replaceStatement.execute();
                 rowInserted ++;
@@ -324,10 +330,11 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
-    public Cursor fetchTransactionsWithSplits(String [] columns, String where, String[] whereArgs, String orderBy) {
+    public Cursor fetchTransactionsWithSplits(String [] columns, @Nullable String where, @Nullable String[] whereArgs, @Nullable String orderBy) {
         return mDb.query(TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
                         " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID,
+                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
+                        " , trans_extra_info ON trans_extra_info.trans_acct_t_uid = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID ,
                 columns, where, whereArgs, null, null,
                 orderBy);
     }
@@ -367,6 +374,25 @@ public int getTotalTransactionsCount() {
         }
     }
 
+    public int getTotalTransactionsCount(@Nullable String where, @Nullable String[] whereArgs) {
+        Cursor cursor = mDb.query(true, TransactionEntry.TABLE_NAME + " , trans_extra_info ON "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID
+                        + " = trans_extra_info.trans_acct_t_uid",
+                new String[]{"COUNT(*)"},
+                where,
+                whereArgs,
+                null,
+                null,
+                null,
+                null);
+        try{
+            cursor.moveToFirst();
+            return cursor.getInt(0);
+        } finally {
+            cursor.close();
+        }
+    }
+
 	/**
 	 * Builds a transaction instance with the provided cursor.
 	 * The cursor should already be pointing to the transaction record in the database
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 082b5b69..cce0901c 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -124,9 +124,9 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
             // is omitted
             //
             // account slots, color, placeholder, default transfer account, favorite
-            ArrayList<String> slotKey = new ArrayList<String>();
-            ArrayList<String> slotType = new ArrayList<String>();
-            ArrayList<String> slotValue = new ArrayList<String>();
+            ArrayList<String> slotKey = new ArrayList<>();
+            ArrayList<String> slotType = new ArrayList<>();
+            ArrayList<String> slotValue = new ArrayList<>();
             slotKey.add(GncXmlHelper.KEY_PLACEHOLDER);
             slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
             slotValue.add(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER)) != 0));
@@ -169,10 +169,11 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
     }
 
     private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTemplates) throws IOException {
-        String where = null;
-        if (exportTemplates){
-            where = TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_TEMPLATE + "=0";
+        String where = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + "=0 AND trans_extra_info.trans_currency_count = 1";
+        if (exportTemplates) {
+            where = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + "=1";
         }
+        Log.d(getClass().getSimpleName(), where == null ? "null": where);
         Cursor cursor = mTransactionsDbAdapter.fetchTransactionsWithSplits(
                 new String[]{
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_UID + " AS trans_uid",
@@ -191,7 +192,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                         where, null,
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
-
+        Log.d(getClass().getSimpleName(), "finish query : " + cursor.getCount());
         String lastTrxUID = "";
         Currency trxCurrency;
         int fractionDigits;
@@ -199,6 +200,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
         String denomString = "100";
         while (cursor.moveToNext()){
             String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+            Log.d(getClass().getSimpleName(), "trans : " + curTrxUID);
             if (!lastTrxUID.equals(curTrxUID)) { // new transaction starts
                 if (!lastTrxUID.equals("")) { // there's an old transaction, close it
                     xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
@@ -249,11 +251,12 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
                 xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                Log.d(getClass().getSimpleName(), "trans : " + cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
                 lastTrxUID = curTrxUID;
                 // slots
-                ArrayList<String> slotKey = new ArrayList<String>();
-                ArrayList<String> slotType = new ArrayList<String>();
-                ArrayList<String> slotValue = new ArrayList<String>();
+                ArrayList<String> slotKey = new ArrayList<>();
+                ArrayList<String> slotType = new ArrayList<>();
+                ArrayList<String> slotValue = new ArrayList<>();
 
                 String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
                 boolean exported = cursor.getInt(cursor.getColumnIndexOrThrow("trans_exported")) == 1;
@@ -470,20 +473,17 @@ private void serializeDate(XmlSerializer xmlSerializer, String tag, long timeMil
         xmlSerializer.endTag(null, tag);
     }
 
-    private void exportCommodity(XmlSerializer xmlSerializer) throws IOException {
-        List<Currency> currencies = mAccountsDbAdapter.getCurrencies();
+    private void exportCommodity(XmlSerializer xmlSerializer, List<Currency> currencies) throws IOException {
         for (Currency currency : currencies) {
-            if (!currency.getCurrencyCode().equals("XXX")) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, "2.0.0");
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-                xmlSerializer.text("ISO4217");
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.text(currency.getCurrencyCode());
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
-            }
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, "2.0.0");
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.text("ISO4217");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            xmlSerializer.text(currency.getCurrencyCode());
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
         }
     }
 
@@ -513,10 +513,16 @@ public void generateExport(Writer writer) throws ExporterException{
             xmlSerializer.text(UUID.randomUUID().toString().replaceAll("-", ""));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK_ID);
             //commodity count
-//            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
-//            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
-//            xmlSerializer.text(mAccountsDbAdapter.getCurrencies().size() + "");
-//            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            List<Currency> currencies = mAccountsDbAdapter.getCurrencies();
+            for (int i = 0; i< currencies.size();i++) {
+                if (currencies.get(i).getCurrencyCode().equals("XXX")) {
+                    currencies.remove(i);
+                }
+            }
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
+            xmlSerializer.text(currencies.size() + "");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             //account count
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
@@ -525,14 +531,18 @@ public void generateExport(Writer writer) throws ExporterException{
             //transaction count
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
-            xmlSerializer.text(mTransactionsDbAdapter.getTotalTransactionsCount() + "");
+            xmlSerializer.text(mTransactionsDbAdapter.getTotalTransactionsCount(
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0 AND " +
+                    "trans_extra_info.trans_currency_count = 1",
+                    null
+            ) + "");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             // export the commodities used in the DB
-            //dexportCommodity(xmlSerializer);
+            exportCommodity(xmlSerializer, currencies);
             // accounts. bulk import does not rely on account order
             // the cursor gather account in arbitrary order
             exportAccounts(xmlSerializer);
-
+            Log.d(getClass().getSimpleName(), "finish export accounts");
             // transactions.
             exportTransactions(xmlSerializer, false);
 

From c3b3e0d658f78e08b9f7d241d6021c823ceb6561 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 13 Apr 2015 18:17:11 +0200
Subject: [PATCH 47/52] Fixed: editing the schedule of a scheduled transaction
 instead created a new one

Improved the repeat strings for scheduled actions
Added foreign key constraint to transactions table for scheduled action unique ID
Code refactoring
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 39 ++-----------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 25 ++++++++
 .../org/gnucash/android/db/DatabaseHelper.java     |  5 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |  2 +-
 .../android/db/ScheduledActionDbAdapter.java       | 42 +++++++++++---
 .../gnucash/android/db/TransactionsDbAdapter.java  | 17 +++---
 .../java/org/gnucash/android/model/PeriodType.java |  8 +--
 .../org/gnucash/android/model/ScheduledAction.java | 16 ++++--
 .../ScheduledTransactionsListFragment.java         |  8 +--
 .../ui/transaction/TransactionFormFragment.java    | 67 +++++++++++++++-------
 .../gnucash/android/ui/util/RecurrenceParser.java  |  5 +-
 11 files changed, 146 insertions(+), 88 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 55c5213f..d25e00eb 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1116,17 +1116,8 @@ public String getFullyQualifiedAccountName(long accountId){
      * @return <code>true</code> if the account is a placeholder account, <code>false</code> otherwise
      */
     public boolean isPlaceholderAccount(String accountUID) {
-        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
-                new String[]{AccountEntry.COLUMN_PLACEHOLDER},
-                AccountEntry.COLUMN_UID + " = ?",
-                new String[]{accountUID}, null, null, null);
-
-        try {
-            return cursor.moveToFirst()
-                    && cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1;
-        } finally {
-            cursor.close();
-        }
+        String isPlaceholder = getAttribute(accountUID, AccountEntry.COLUMN_PLACEHOLDER);
+        return Integer.parseInt(isPlaceholder) == 1;
     }
 
     /**
@@ -1135,17 +1126,8 @@ public boolean isPlaceholderAccount(String accountUID) {
      * @return <code>true</code> if the account is hidden, <code>false</code> otherwise
      */
     public boolean isHiddenAccount(String accountUID){
-        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
-                new String[]{AccountEntry.COLUMN_HIDDEN},
-                AccountEntry.COLUMN_UID + " = ?",
-                new String[]{accountUID}, null, null, null);
-
-        try {
-            return cursor.moveToFirst()
-                    && cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_HIDDEN)) == 1;
-        } finally {
-            cursor.close();
-        }
+        String isHidden = getAttribute(accountUID, AccountEntry.COLUMN_HIDDEN);
+        return Integer.parseInt(isHidden) == 1;
     }
 
     /**
@@ -1154,17 +1136,8 @@ public boolean isHiddenAccount(String accountUID){
      * @return <code>true</code> if the account is a favorite account, <code>false</code> otherwise
      */
     public boolean isFavoriteAccount(String accountUID){
-        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
-                new String[]{AccountEntry.COLUMN_FAVORITE},
-                AccountEntry.COLUMN_UID + " = ?", new String[]{accountUID},
-                null, null, null);
-
-        try {
-            return cursor.moveToFirst()
-                    && cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) == 1;
-        } finally {
-            cursor.close();
-        }
+        String isFavorite = getAttribute(accountUID, AccountEntry.COLUMN_FAVORITE);
+        return Integer.parseInt(isFavorite) == 1;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 647a0196..0f976dda 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -400,6 +400,31 @@ public boolean deleteRecord(@NonNull String uid){
     }
 
     /**
+     * Returns an attribute from a specific column in the database for a specific record.
+     * <p>The attribute is returned as a string which can then be converted to another type if
+     * the caller was expecting something other type </p>
+     * @param recordUID GUID of the record
+     * @param columnName Name of the column to be retrieved
+     * @return String value of the column entry
+     * @throws IllegalArgumentException if either the {@code recordUID} or {@code columnName} do not exist in the database
+     */
+    protected String getAttribute(@NonNull String recordUID, @NonNull String columnName){
+        Cursor cursor = mDb.query(mTableName,
+                new String[]{columnName},
+                AccountEntry.COLUMN_UID + " = ?",
+                new String[]{recordUID}, null, null, null);
+
+        try {
+            if (cursor.moveToFirst())
+                return cursor.getString(cursor.getColumnIndexOrThrow(columnName));
+            else
+                throw new IllegalArgumentException("Column or GUID does not exist in the db");
+        } finally {
+            cursor.close();
+        }
+    }
+
+    /**
      * Expose mDb.beginTransaction()
      */
     public void beginTransaction() {
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index cf3bc009..37f9cd96 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -83,7 +83,8 @@
             + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
             + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " varchar(255), "
             + TransactionEntry.COLUMN_CREATED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
-            + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
+            + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+            + "FOREIGN KEY (" 	+ TransactionEntry.COLUMN_SCHEDX_ACTION_UID + ") REFERENCES " + ScheduledActionEntry.TABLE_NAME + " (" + ScheduledActionEntry.COLUMN_UID + ") ON DELETE SET NULL "
 			+ ");" + createUpdatedAtTrigger(TransactionEntry.TABLE_NAME);
 
     /**
@@ -107,7 +108,7 @@
     public static final String SCHEDULED_ACTIONS_TABLE_CREATE = "CREATE TABLE " + ScheduledActionEntry.TABLE_NAME + " ("
             + ScheduledActionEntry._ID                   + " integer primary key autoincrement, "
             + ScheduledActionEntry.COLUMN_UID            + " varchar(255) not null UNIQUE, "
-            + ScheduledActionEntry.COLUMN_ACTION_UID + " varchar(255) not null, "
+            + ScheduledActionEntry.COLUMN_ACTION_UID    + " varchar(255) not null, "
             + ScheduledActionEntry.COLUMN_TYPE           + " varchar(255) not null, "
             + ScheduledActionEntry.COLUMN_PERIOD         + " integer not null, "
             + ScheduledActionEntry.COLUMN_LAST_RUN       + " integer default 0, "
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index f658ca6d..9301449a 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -79,7 +79,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
         public static final String COLUMN_TEMPLATE              = "is_template";
-        public static final String COLUMN_SCHEDX_ACTION_UID     = "schedx_action_uid";
+        public static final String COLUMN_SCHEDX_ACTION_UID     = "scheduled_action_uid";
 
         public static final String INDEX_UID                    = "transaction_uid_index";
     }
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index d5c427cf..7bb909be 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -72,6 +72,29 @@ public long addScheduledAction(ScheduledAction scheduledAction){
     }
 
     /**
+     * Updates only the recurrence attributes of the scheduled action.
+     * The recurrence attributes are the period, start time, end time and/or total frequency.
+     * All other properties of a scheduled event are only used for interal database tracking and are
+     * not central to the recurrence schedule.
+     * <p><b>The GUID of the scheduled action should already exist in the database</b></p>
+     * @param scheduledAction Scheduled action
+     * @return Database record ID of the edited scheduled action
+     */
+    public long updateRecurrenceAttributes(ScheduledAction scheduledAction){
+        ContentValues contentValues = getContentValues(scheduledAction);
+        contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    scheduledAction.getPeriod());
+        contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
+        contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
+        contentValues.put(ScheduledActionEntry.COLUMN_TAG,       scheduledAction.getTag());
+        contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, scheduledAction.getTotalFrequency());
+
+        Log.d(TAG, "Updating scheduled event recurrence attributes");
+        String where = ScheduledActionEntry.COLUMN_UID + "=?";
+        String[] whereArgs = new String[]{scheduledAction.getUID()};
+        return mDb.update(ScheduledActionEntry.TABLE_NAME, contentValues, where, whereArgs);
+    }
+
+    /**
      * Adds a multiple scheduled actions to the database in one transaction.
      * @param scheduledActionList List of ScheduledActions
      * @return Returns the number of rows inserted
@@ -96,16 +119,19 @@ public int bulkAddScheduledActions(List<ScheduledAction> scheduledActionList){
                     + ScheduledActionEntry.COLUMN_EXECUTION_COUNT   + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");
             for (ScheduledAction schedxAction:scheduledActionList) {
                 replaceStatement.clearBindings();
-                replaceStatement.bindString(1,  schedxAction.getUID());
-                replaceStatement.bindString(2,  schedxAction.getActionUID());
-                replaceStatement.bindString(3,  schedxAction.getActionType().name());
-                replaceStatement.bindLong(4,    schedxAction.getStartTime());
-                replaceStatement.bindLong(5,    schedxAction.getEndTime());
-                replaceStatement.bindLong(6,    schedxAction.getLastRun());
-                replaceStatement.bindLong(7,    schedxAction.getPeriod());
+                replaceStatement.bindString(1, schedxAction.getUID());
+                replaceStatement.bindString(2, schedxAction.getActionUID());
+                replaceStatement.bindString(3, schedxAction.getActionType().name());
+                replaceStatement.bindLong(4, schedxAction.getStartTime());
+                replaceStatement.bindLong(5, schedxAction.getEndTime());
+                replaceStatement.bindLong(6, schedxAction.getLastRun());
+                replaceStatement.bindLong(7, schedxAction.getPeriod());
                 replaceStatement.bindLong(8,    schedxAction.isEnabled() ? 1 : 0);
                 replaceStatement.bindString(9,  schedxAction.getCreatedTimestamp().toString());
-                replaceStatement.bindString(10, schedxAction.getTag());
+                if (schedxAction.getTag() == null)
+                    replaceStatement.bindNull(10);
+                else
+                    replaceStatement.bindString(10, schedxAction.getTag());
                 replaceStatement.bindString(11, Integer.toString(schedxAction.getTotalFrequency()));
                 replaceStatement.bindString(12, Integer.toString(schedxAction.getExecutionCount()));
 
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 9981f591..f8074679 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -156,14 +156,17 @@ public long bulkAddTransactions(List<Transaction> transactionList){
             for (Transaction transaction : transactionList) {
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
-                replaceStatement.bindString(1,  transaction.getUID());
-                replaceStatement.bindString(2,  transaction.getDescription());
-                replaceStatement.bindString(3,  transaction.getNote());
-                replaceStatement.bindLong(4,    transaction.getTimeMillis());
-                replaceStatement.bindLong(5,    transaction.isExported() ? 1 : 0);
+                replaceStatement.bindString(1, transaction.getUID());
+                replaceStatement.bindString(2, transaction.getDescription());
+                replaceStatement.bindString(3, transaction.getNote());
+                replaceStatement.bindLong(4, transaction.getTimeMillis());
+                replaceStatement.bindLong(5, transaction.isExported() ? 1 : 0);
                 replaceStatement.bindString(6,  transaction.getCurrencyCode());
                 replaceStatement.bindString(7,  transaction.getCreatedTimestamp().toString());
-                replaceStatement.bindString(8,  transaction.getScheduledActionUID());
+                if (transaction.getScheduledActionUID() == null)
+                    replaceStatement.bindNull(8);
+                else
+                    replaceStatement.bindString(8,  transaction.getScheduledActionUID());
                 replaceStatement.bindLong(9,    transaction.isTemplate() ? 1 : 0);
                 replaceStatement.execute();
                 rowInserted ++;
@@ -272,7 +275,7 @@ public Cursor fetchAllScheduledTransactions(){
                 + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_ACTION_UID);
 
         String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*",
-                ScheduledActionEntry.TABLE_NAME+"."+ScheduledActionEntry.COLUMN_UID};
+                ScheduledActionEntry.TABLE_NAME+"."+ScheduledActionEntry.COLUMN_UID + " AS " + "origin_scheduled_action_uid"};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
 //        queryBuilder.setDistinct(true);
 
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
index 81039747..dc3b2d25 100644
--- a/app/src/main/java/org/gnucash/android/model/PeriodType.java
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -82,13 +82,13 @@ public String getFrequencyRepeatString(){
 
         switch (this) {
             case DAY:
-                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier, mMultiplier);
             case WEEK:
-                return res.getQuantityString(R.plurals.label_every_x_weeks, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_weeks, mMultiplier, mMultiplier);
             case MONTH:
-                return res.getQuantityString(R.plurals.label_every_x_months, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_months, mMultiplier, mMultiplier);
             case YEAR:
-                return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier, mMultiplier);
             default:
                 return "";
         }
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index f84f983a..e0f5a02f 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -331,17 +331,21 @@ public void setExecutionCount(int executionCount){
      * @return String description of repeat schedule
      */
     public String getRepeatString(){
-        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
+        String dayOfWeek = new SimpleDateFormat("EEEE", Locale.US).format(new Date(mStartDate));
         PeriodType periodType = getPeriodType();
         StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyRepeatString());
-        ruleBuilder.append(" on ").append(dayOfWeek);
-        ruleBuilder.append(";");
+
+        if (periodType == PeriodType.WEEK) {
+            ruleBuilder.append(" on ").append(dayOfWeek);
+        }
+
         if (mEndDate > 0){
+            ruleBuilder.append(", ");
             ruleBuilder.append(" until ")
-                    .append(SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(new Date(mEndDate)))
-                    .append(";");
+                    .append(SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(new Date(mEndDate)));
         } else if (mTotalFrequency > 0){
-            ruleBuilder.append(" for ").append(mTotalFrequency).append(" times;");
+            ruleBuilder.append(", ");
+            ruleBuilder.append(" for ").append(mTotalFrequency).append(" times");
         }
         return ruleBuilder.toString();
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index f9cbb3fe..39ef8382 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -110,12 +110,12 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                         Log.i(TAG, "Cancelling scheduled transaction(s)");
                         String trnUID = mTransactionsDbAdapter.getUID(id);
                         ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-                        List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledActionsWithUID(trnUID);
+                        List<ScheduledAction> actions = scheduledActionDbAdapter.getScheduledActionsWithUID(trnUID);
 
                         if (mTransactionsDbAdapter.deleteRecord(id)){
                             Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
-                            for (ScheduledAction event : events) {
-                                scheduledActionDbAdapter.deleteRecord(event.getUID());
+                            for (ScheduledAction action : actions) {
+                                scheduledActionDbAdapter.deleteRecord(action.getUID());
                             }
                         }
                     }
@@ -382,7 +382,7 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
-            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.ScheduledActionEntry.TABLE_NAME+"."+ DatabaseSchema.ScheduledActionEntry.COLUMN_UID));
+            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow("origin_scheduled_action_uid"));
             view.setTag(scheduledActionUID);
             ScheduledAction scheduledAction = scheduledActionDbAdapter.getScheduledAction(scheduledActionUID);
             descriptionTextView.setText(scheduledAction.getRepeatString());
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 85996d7b..8d2b1342 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -59,7 +59,6 @@
 import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
 
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
@@ -191,7 +190,7 @@
     /**
      * Checkbox indicating if this transaction should be saved as a template or not
      */
-    private CheckBox mSaveTemplate;
+    private CheckBox mSaveTemplateCheckbox;
 
     /**
      * Flag to note if double entry accounting is in use or not
@@ -221,6 +220,8 @@
 
     private List<Split> mSplitsList = new ArrayList<Split>();
 
+    private boolean mEditMode = false;
+
     /**
 	 * Create the view and retrieve references to the UI elements
 	 */
@@ -239,7 +240,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		mDoubleAccountSpinner   = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
         mOpenSplitsButton       = (Button) v.findViewById(R.id.btn_open_splits);
         mRecurrenceTextView     = (TextView) v.findViewById(R.id.input_recurrence);
-        mSaveTemplate           = (CheckBox) v.findViewById(R.id.checkbox_save_template);
+        mSaveTemplateCheckbox = (CheckBox) v.findViewById(R.id.checkbox_save_template);
         return v;
 	}
 
@@ -300,6 +301,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             initTransactionNameAutocomplete();
         } else {
 			initializeViewsWithTransaction();
+            mEditMode = true;
 		}
 
 
@@ -434,7 +436,7 @@ private void initializeViewsWithTransaction(){
             enableControls(false);
         }
 
-        mSaveTemplate.setChecked(mTransaction.isTemplate());
+        mSaveTemplateCheckbox.setChecked(mTransaction.isTemplate());
         String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
         if (scheduledActionUID != null && !scheduledActionUID.isEmpty()) {
             ScheduledAction scheduledAction = ScheduledActionDbAdapter.getInstance().getScheduledAction(scheduledActionUID);
@@ -734,19 +736,24 @@ private void saveNewTransaction() {
 
             // set as not exported.
             mTransaction.setExported(false);
-            //save the normal transaction first
+            mTransaction.setTemplate(mSaveTemplateCheckbox.isChecked());
             mTransactionsDbAdapter.addTransaction(mTransaction);
 
-            if (mSaveTemplate.isChecked()) {
-                Transaction templateTransaction;
-                //creating a new recurring transaction
-                templateTransaction = new Transaction(mTransaction, true);
-                templateTransaction.setTemplate(true);
-                mTransactionsDbAdapter.addTransaction(templateTransaction);
-
-                //inside the if statement because scheduling always creates a template
+            if (mSaveTemplateCheckbox.isChecked()) {
+                Transaction templateTransaction = mTransaction;
+                if (!mEditMode) { //means it was new transaction, so a new template
+                    templateTransaction = new Transaction(mTransaction, true);
+                    templateTransaction.setTemplate(true);
+                    mTransactionsDbAdapter.addTransaction(templateTransaction);
+                }
                 scheduleRecurringTransaction(templateTransaction.getUID());
+            } else {
+                String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
+                if (scheduledActionUID != null){ //we were editing a schedule and it was turned off
+                    ScheduledActionDbAdapter.getInstance().deleteRecord(scheduledActionUID);
+                }
             }
+
             mAccountsDbAdapter.setTransactionSuccessful();
         }
         finally {
@@ -764,13 +771,27 @@ private void saveNewTransaction() {
      * @see #saveNewTransaction()
      */
     private void scheduleRecurringTransaction(String transactionUID) {
+        ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
+
         List<ScheduledAction> events = RecurrenceParser.parse(mEventRecurrence,
                 ScheduledAction.ActionType.TRANSACTION);
 
-        if (events.size() == 0) //there are no scheduled events detected
-            return;
+        String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
+
+        if (scheduledActionUID != null) { //if we are editing an existing schedule
+            if ( events.size() == 1) {
+                ScheduledAction scheduledAction = events.get(0);
+                scheduledAction.setUID(scheduledActionUID);
+                scheduledActionDbAdapter.updateRecurrenceAttributes(scheduledAction);
+                Toast.makeText(getActivity(), "Updated transaction schedule", Toast.LENGTH_SHORT).show();
+                return;
+            } else {
+                //if user changed scheduled action so that more than one new schedule would be saved,
+                // then remove the old one
+                ScheduledActionDbAdapter.getInstance().deleteRecord(scheduledActionUID);
+            }
+        }
 
-        ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
         for (ScheduledAction event : events) {
             event.setActionUID(transactionUID);
             event.setLastRun(System.currentTimeMillis());
@@ -778,8 +799,10 @@ private void scheduleRecurringTransaction(String transactionUID) {
 
             Log.i("TransactionFormFragment", event.toString());
         }
-        if (events.size() > 0) //TODO: localize this toast string for all supported locales
-            Toast.makeText(getActivity(), "Scheduled transaction", Toast.LENGTH_SHORT).show();
+        Toast.makeText(getActivity(), "Scheduled transaction", Toast.LENGTH_SHORT).show();
+
+        //TODO: localize this toast string for all supported locales
+
     }
 
 
@@ -937,11 +960,11 @@ public void onRecurrenceSet(String rrule) {
             repeatString = EventRecurrenceFormatter.getRepeatString(getActivity(), getResources(), mEventRecurrence, true);
 
             //when recurrence is set, we will definitely be saving a template
-            mSaveTemplate.setChecked(true);
-            mSaveTemplate.setEnabled(false);
+            mSaveTemplateCheckbox.setChecked(true);
+            mSaveTemplateCheckbox.setEnabled(false);
         } else {
-            mSaveTemplate.setEnabled(true);
-            mSaveTemplate.setChecked(false);
+            mSaveTemplateCheckbox.setEnabled(true);
+            mSaveTemplateCheckbox.setChecked(false);
         }
 
         mRecurrenceTextView.setText(repeatString);
diff --git a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
index fe5b993d..81a03141 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
@@ -50,8 +50,11 @@
      * @return List of ScheduledEvents
      */
     public static List<ScheduledAction> parse(EventRecurrence eventRecurrence, ScheduledAction.ActionType actionType){
-        long period = 0;
+        long period;
         List<ScheduledAction> scheduledActionList = new ArrayList<ScheduledAction>();
+        if (eventRecurrence == null)
+            return scheduledActionList;
+
         switch(eventRecurrence.freq){
             case EventRecurrence.DAILY: {
                 if (eventRecurrence.interval == 0) //I assume this is a bug from the picker library

From 7159ee7c73eecda991f7913c7f9f2169f6d1e983 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 14 Apr 2015 21:10:58 +0800
Subject: [PATCH 48/52] fix:reconcile-state, act:commodity; restore
 multi-currency

---
 .../gnucash/android/export/xml/GncXmlExporter.java    | 19 +++++--------------
 .../org/gnucash/android/export/xml/GncXmlHelper.java  |  3 ++-
 2 files changed, 7 insertions(+), 15 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index cce0901c..30ced6a5 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -86,7 +86,7 @@ private void exportSlots(XmlSerializer xmlSerializer,
     }
 
     private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
-        Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null, null);
+        Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null, DatabaseSchema.AccountEntry.COLUMN_FULL_NAME + " ASC");
         while (cursor.moveToNext()) {
             // write account
             xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
@@ -106,7 +106,7 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
             xmlSerializer.text(acct_type);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_TYPE);
             // commodity
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT_COMMODITY);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
             xmlSerializer.text("ISO4217");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
@@ -114,7 +114,7 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
             String acctCurrencyCode = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_CURRENCY));
             xmlSerializer.text(acctCurrencyCode);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT_COMMODITY);
             // commodity scu
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
             xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
@@ -169,11 +169,10 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
     }
 
     private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTemplates) throws IOException {
-        String where = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + "=0 AND trans_extra_info.trans_currency_count = 1";
+        String where = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + "=0";
         if (exportTemplates) {
             where = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + "=1";
         }
-        Log.d(getClass().getSimpleName(), where == null ? "null": where);
         Cursor cursor = mTransactionsDbAdapter.fetchTransactionsWithSplits(
                 new String[]{
                         TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_UID + " AS trans_uid",
@@ -192,7 +191,6 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                         where, null,
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
-        Log.d(getClass().getSimpleName(), "finish query : " + cursor.getCount());
         String lastTrxUID = "";
         Currency trxCurrency;
         int fractionDigits;
@@ -200,7 +198,6 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
         String denomString = "100";
         while (cursor.moveToNext()){
             String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
-            Log.d(getClass().getSimpleName(), "trans : " + curTrxUID);
             if (!lastTrxUID.equals(curTrxUID)) { // new transaction starts
                 if (!lastTrxUID.equals("")) { // there's an old transaction, close it
                     xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
@@ -251,7 +248,6 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
                 xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
-                Log.d(getClass().getSimpleName(), "trans : " + cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
                 lastTrxUID = curTrxUID;
                 // slots
                 ArrayList<String> slotKey = new ArrayList<>();
@@ -531,18 +527,13 @@ public void generateExport(Writer writer) throws ExporterException{
             //transaction count
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
-            xmlSerializer.text(mTransactionsDbAdapter.getTotalTransactionsCount(
-                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0 AND " +
-                    "trans_extra_info.trans_currency_count = 1",
-                    null
-            ) + "");
+            xmlSerializer.text(mTransactionsDbAdapter.getTotalTransactionsCount() + "");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             // export the commodities used in the DB
             exportCommodity(xmlSerializer, currencies);
             // accounts. bulk import does not rely on account order
             // the cursor gather account in arbitrary order
             exportAccounts(xmlSerializer);
-            Log.d(getClass().getSimpleName(), "finish export accounts");
             // transactions.
             exportTransactions(xmlSerializer, false);
 
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 6bd2481e..026a97ee 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -61,6 +61,7 @@
     public static final String TAG_TYPE             = "act:type";
     public static final String TAG_COMMODITY_ID     = "cmdty:id";
     public static final String TAG_COMMODITY_SPACE  = "cmdty:space";
+    public static final String TAG_ACCOUNT_COMMODITY = "act:commodity";
     public static final String TAG_COMMODITY_SCU    = "act:commodity-scu";
     public static final String TAG_PARENT_UID       = "act:parent";
     public static final String TAG_ACCOUNT          = "gnc:account";
@@ -84,7 +85,7 @@
 
     public static final String TAG_SPLIT_ID         = "split:id";
     public static final String TAG_SPLIT_MEMO       = "split:memo";
-    public static final String TAG_RECONCILED_STATE = "split:reconciled_state";
+    public static final String TAG_RECONCILED_STATE = "split:reconciled-state";
     public static final String TAG_SPLIT_ACCOUNT    = "split:account";
     public static final String TAG_SPLIT_VALUE      = "split:value";
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";

From 393492d04d61f31cc0cbe52ec9445c60c4faa130 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 14 Apr 2015 21:41:53 +0800
Subject: [PATCH 49/52] fix: act:parent, type to guid

---
 app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 30ced6a5..bc6b8a7b 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -157,7 +157,7 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
             String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
             if (!acct_type.equals("ROOT") && parentUID != null && parentUID.length() > 0) {
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_PARENT_UID);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
                 xmlSerializer.text(parentUID);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_PARENT_UID);
             } else {

From 260490904c3ee2b97547c9390dffa26a3e2f9f34 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 14 Apr 2015 22:26:00 +0800
Subject: [PATCH 50/52] Create ROOT account when not exist

---
 app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 384cb634..1618dcc5 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -118,7 +118,7 @@ public long addAccount(Account account){
         long rowId =  mDb.replace(AccountEntry.TABLE_NAME, null, contentValues);
 
 		//now add transactions if there are any
-		if (rowId > 0){
+		if (rowId > 0 && account.getAccountType() != AccountType.ROOT){
             //update the fully qualified account name
             updateAccount(rowId, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(rowId));
 			for (Transaction t : account.getTransactions()) {
@@ -966,7 +966,12 @@ public String getGnuCashRootAccountUID() {
         } finally {
             cursor.close();
         }
-        throw new IllegalArgumentException("ROOT account doesn't exist in DB");
+        // No ROOT exits, create a new one
+        Account rootAccount = new Account("ROOT Account");
+        rootAccount.setAccountType(AccountType.ROOT);
+        rootAccount.setFullName(" ");
+        addAccount(rootAccount);
+        return rootAccount.getUID();
     }
 
     /**

From 79cc370ea5db95e1189d11d397c0e54ab179c132 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 14 Apr 2015 17:03:58 +0200
Subject: [PATCH 51/52] GnuCash Android will always have a root account (even
 when manually creating accounts)

A root account is now automatically generated if there isn't one when creating an account
Only the root account can have it's parent account set to NULL
---
 .../org/gnucash/android/db/AccountsDbAdapter.java     | 19 ++++++++++---------
 .../android/ui/account/AccountFormFragment.java       |  6 +++---
 .../ui/transaction/TransactionFormFragment.java       |  2 +-
 .../ui/transaction/dialog/BulkMoveDialogFragment.java |  2 +-
 .../transaction/dialog/SplitEditorDialogFragment.java |  4 ++--
 5 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 1618dcc5..673acca8 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -103,11 +103,12 @@ public long addAccount(Account account){
         }
         contentValues.put(AccountEntry.COLUMN_FAVORITE,     account.isFavorite() ? 1 : 0);
         contentValues.put(AccountEntry.COLUMN_FULL_NAME,    account.getFullName());
-        if (account.getParentUID() != null) {
-            contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, account.getParentUID());
-        } else {
-            contentValues.putNull(AccountEntry.COLUMN_PARENT_ACCOUNT_UID);
+        String parentAccountUID = account.getParentUID();
+        if (parentAccountUID == null && account.getAccountType() != AccountType.ROOT) {
+            parentAccountUID = getOrCreateGnuCashRootAccountUID();
         }
+        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, parentAccountUID);
+
         if (account.getDefaultTransferAccountUID() != null) {
             contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
         } else {
@@ -629,7 +630,7 @@ public String createAccountHierarchy(String fullName, AccountType accountType) {
             throw new IllegalArgumentException("fullName cannot be empty");
         }
         String[] tokens = fullName.trim().split(ACCOUNT_NAME_SEPARATOR);
-        String uid = getGnuCashRootAccountUID();
+        String uid = getOrCreateGnuCashRootAccountUID();
         String parentName = "";
         ArrayList<Account> accountsList = new ArrayList<Account>();
         for (String token : tokens) {
@@ -914,7 +915,7 @@ public Cursor fetchTopLevelAccounts() {
                         + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?) AND "
                         + AccountEntry.COLUMN_HIDDEN + " = 0 AND "
                         + AccountEntry.COLUMN_TYPE + " != ?",
-                new String[]{"" + getGnuCashRootAccountUID(), AccountType.ROOT.name()}, null);
+                new String[]{"" + getOrCreateGnuCashRootAccountUID(), AccountType.ROOT.name()}, null);
     }
 
     /**
@@ -951,12 +952,12 @@ public Cursor fetchFavoriteAccounts(){
     }
 
     /**
-     * Returns the GnuCash ROOT account UID.
+     * Returns the GnuCash ROOT account UID if one exists (or creates one if necessary).
      * <p>In GnuCash desktop account structure, there is a root account (which is not visible in the UI) from which
      * other top level accounts derive. GnuCash Android also enforces a ROOT account now</p>
      * @return Unique ID of the GnuCash root account.
      */
-    public String getGnuCashRootAccountUID() {
+    public String getOrCreateGnuCashRootAccountUID() {
         Cursor cursor = fetchAccounts(AccountEntry.COLUMN_TYPE + "= ?",
                 new String[]{AccountType.ROOT.name()}, null);
         try {
@@ -1073,7 +1074,7 @@ public String getFullyQualifiedAccountName(String accountUID){
         String accountName = getAccountName(accountUID);
         String parentAccountUID = getParentAccountUID(accountUID);
 
-        if (parentAccountUID == null || parentAccountUID.equalsIgnoreCase(getGnuCashRootAccountUID())){
+        if (parentAccountUID == null || parentAccountUID.equalsIgnoreCase(getOrCreateGnuCashRootAccountUID())){
             return accountName;
         }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index b49d5ad7..e09c97bf 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -317,7 +317,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
             getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
         }
 
-        mRootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+        mRootAccountUID = mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID();
         if (mRootAccountUID != null)
             mRootAccountId = mAccountsDbAdapter.getID(mRootAccountUID);
 
@@ -539,7 +539,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
     private void loadDefaultTransferAccountList(){
         String condition = DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountUID + "' "
                 + " AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + "=0"
-                + " AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID() + "'";
+                + " AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID() + "'";
 
         //using whereArgs (2nd parameter) would produce safer sql,
         // however we get an exception because mAccountUID can be null, or the root account may be null as well
@@ -567,7 +567,7 @@ private void loadParentAccountList(AccountType accountType){
 
         if (mAccount != null){  //if editing an account
             mDescendantAccountUIDs = mAccountsDbAdapter.getDescendantAccountUIDs(mAccount.getUID(), null, null);
-            String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+            String rootAccountUID = mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID();
             List<String> descendantAccountUIDs = new ArrayList<String>(mDescendantAccountUIDs);
             if (rootAccountUID != null)
                 descendantAccountUIDs.add(rootAccountUID);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 8d2b1342..63eb0c3b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -500,7 +500,7 @@ private void updateTransferAccountsList(){
 
 		String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountUID
                             + "' AND " + (mMultiCurrency ? "" : (DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(mAccountUID)
-                            + "' AND ")) + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
+                            + "' AND ")) + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID()
                             + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                             + ")";
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
index 465743f5..fa0b0ddb 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
@@ -110,7 +110,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		Cursor cursor = accountsDbAdapter.fetchAccountsOrderedByFullName(conditions,
                 new String[]{mOriginAccountUID,
                         accountsDbAdapter.getCurrencyCode(mOriginAccountUID),
-                        "" + accountsDbAdapter.getGnuCashRootAccountUID()
+                        "" + accountsDbAdapter.getOrCreateGnuCashRootAccountUID()
                 });
 
 		SimpleCursorAdapter mCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 0f9f0b71..d4207e2b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -206,11 +206,11 @@ private void initArgs() {
 
         String conditions = "(" //+ AccountEntry._ID + " != " + mAccountId + " AND "
                 + (mMultiCurrency ? "" : (DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = ? AND "))
-                + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID() + "' AND "
+                + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID() + "' AND "
                 + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                 + ")";
         mCursor = mAccountsDbAdapter.fetchAccountsOrderedByFullName(conditions,
-                mMultiCurrency ? new String[]{"" + mAccountsDbAdapter.getGnuCashRootAccountUID()} :
+                mMultiCurrency ? new String[]{"" + mAccountsDbAdapter.getOrCreateGnuCashRootAccountUID()} :
                         new String[]{mAccountsDbAdapter.getCurrencyCode(mAccountUID)}
         );
     }

From 522375837ad441e4af42a0510b7159d350d67fa2 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 14 Apr 2015 23:18:45 +0200
Subject: [PATCH 52/52] Fixed: editing a scheduled transaction deletes the
 scheduled action

Improved GnuCash XML export
Fixed: typos in XML export
Added missing namespaces for scheduled and recurrence actions
---
 .../android/db/ScheduledActionDbAdapter.java       | 14 ++++++++++-
 .../gnucash/android/export/xml/GncXmlExporter.java | 29 ++++++++++++++--------
 .../gnucash/android/export/xml/GncXmlHelper.java   |  4 +--
 .../gnucash/android/importer/GncXmlHandler.java    |  1 +
 .../org/gnucash/android/model/ScheduledAction.java |  2 +-
 .../gnucash/android/service/SchedulerService.java  |  2 +-
 .../ui/transaction/TransactionFormFragment.java    | 14 +++++------
 7 files changed, 43 insertions(+), 23 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index 7bb909be..7de737bd 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -236,7 +236,7 @@ public ScheduledAction getScheduledAction(String uid){
      */
     public List<ScheduledAction> getAllEnabledScheduledActions(){
         Cursor cursor = mDb.query(mTableName,
-                        null, ScheduledActionEntry.COLUMN_ENABLED + "=1", null, null, null, null);
+                null, ScheduledActionEntry.COLUMN_ENABLED + "=1", null, null, null, null);
         List<ScheduledAction> scheduledActions = new ArrayList<ScheduledAction>();
         while (cursor.moveToNext()){
             scheduledActions.add(buildScheduledEventInstance(cursor));
@@ -244,4 +244,16 @@ public ScheduledAction getScheduledAction(String uid){
         return scheduledActions;
     }
 
+    /**
+     * Returns the number of instances of the action which have been created from this scheduled action
+     * @param scheduledActionUID GUID of scheduled action
+     * @return Number of transactions created from scheduled action
+     */
+    public long getActionInstanceCount(String scheduledActionUID) {
+        String sql = "SELECT COUNT(*) FROM " + DatabaseSchema.TransactionEntry.TABLE_NAME
+                + " WHERE " + DatabaseSchema.TransactionEntry.COLUMN_SCHEDX_ACTION_UID + "=?";
+        SQLiteStatement statement = mDb.compileStatement(sql);
+        statement.bindString(1, scheduledActionUID);
+        return statement.simpleQueryForLong();
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index cebff9ab..7f479881 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -25,6 +25,7 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.TransactionType;
 import org.xmlpull.v1.XmlPullParserFactory;
@@ -317,7 +318,9 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
             String trxType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
             BigDecimal value = new BigDecimal(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")));
             value = value.multiply(denom);
-            String strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
+            String strValue = "0";
+            if (!exportTemplates) //when doing normal transaction export
+                    strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
             xmlSerializer.text(strValue);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
@@ -352,7 +355,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                 TransactionType type = TransactionType.valueOf(trxType);
                 slotKeys.add(type == TransactionType.CREDIT ? GncXmlHelper.KEY_CREDIT_FORMULA : GncXmlHelper.KEY_DEBIT_FORMULA);
                 slotTypes.add(GncXmlHelper.ATTR_VALUE_STRING);
-                slotValues.add(GncXmlHelper.getNumberFormatForTemplateSplits().format(value.doubleValue()));
+                slotValues.add(GncXmlHelper.getNumberFormatForTemplateSplits().format(value.doubleValue())); //FIXME: Check the proper formatting of the amount string here
 
                 exportSlots(xmlSerializer, slotKeys, slotTypes, slotValues);
 
@@ -385,6 +388,7 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_VALUE_GUID, scheduledActionUID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ID);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NAME);
+            //FIXME: Export the actual name of the transaction (and make sure to fix the import too, it relies on this ACTION_TYPE)
             xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TYPE)));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NAME);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_ENABLED);
@@ -404,7 +408,8 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.text("0");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_ADVANCE_REMIND_DAYS);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_INSTANCE_COUNT);
-            xmlSerializer.text("1");
+            long instanceCount = mScheduledActionDbAdapter.getActionInstanceCount(scheduledActionUID);
+            xmlSerializer.text(Long.toString(instanceCount));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_INSTANCE_COUNT);
 
             //start date
@@ -421,15 +426,15 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
                 //end date
                 serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_END, endTime);
             } else { //add number of occurrences
-                int numOccurrences = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY));
+                int totalFrequency = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY));
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
-                xmlSerializer.text(Integer.toString(numOccurrences));
+                xmlSerializer.text(Integer.toString(totalFrequency));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_NUM_OCCUR);
 
                 //remaining occurrences
                 int executionCount = cursor.getInt(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_EXECUTION_COUNT));
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_REM_OCCUR);
-                xmlSerializer.text(Integer.toString(numOccurrences - executionCount));
+                xmlSerializer.text(Integer.toString(totalFrequency - executionCount));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_REM_OCCUR);
             }
 
@@ -440,7 +445,7 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_SX_TAG);
             }
 
-            //TODO: possibly generate temporary template accounts to keep gnucash desktop happy
+            //FIXME: generate temporary template accounts to keep gnucash desktop happy
             //Ignoring GnuCash XML template account: <sx:templ-acct type="guid">2da76df09056540bb3a37e4a04547d82</sx:templ-acct>
 
             String actionUID = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_ACTION_UID));
@@ -452,12 +457,13 @@ private void exportScheduledActions(XmlSerializer xmlSerializer) throws IOExcept
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SX_SCHEDULE);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.RECURRENCE_VERSION);
+            long period = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
+            PeriodType periodType = ScheduledAction.getPeriodType(period);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_RX_MULT);
-            xmlSerializer.text("1");
+            xmlSerializer.text(String.valueOf(periodType.getMultiplier()));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_MULT);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
-            long period = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_PERIOD));
-            xmlSerializer.text(ScheduledAction.getPeriodType(period).name());
+            xmlSerializer.text(periodType.name().toLowerCase());
             xmlSerializer.endTag(null, GncXmlHelper.TAG_RX_PERIOD_TYPE);
 
             serializeDate(xmlSerializer, GncXmlHelper.TAG_RX_START, startTime);
@@ -502,7 +508,8 @@ private void exportCommodity(XmlSerializer xmlSerializer, List<Currency> currenc
     @Override
     public void generateExport(Writer writer) throws ExporterException{
         try {
-            String[] namespaces = new String[] {"gnc", "act", "book", "cd", "cmdty", "price", "slot", "split", "trn", "ts"};
+            String[] namespaces = new String[] {"gnc", "act", "book", "cd", "cmdty", "price", "slot",
+                    "split", "trn", "ts", "sx", "recurrence"};
             XmlSerializer xmlSerializer = XmlPullParserFactory.newInstance().newSerializer();
             xmlSerializer.setOutput(writer);
             xmlSerializer.startDocument("utf-8", true);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 026a97ee..257a89df 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -110,7 +110,7 @@
     public static final String TAG_SX_NUM_OCCUR             = "sx:num-occur";
     public static final String TAG_SX_REM_OCCUR             = "sx:rem-occur";
     public static final String TAG_SX_TAG                   = "sx:tag";
-    public static final String TAG_SX_TEMPL_ACTION          = "sx:templ-action";
+    public static final String TAG_SX_TEMPL_ACTION          = "sx:templ-action"; //FIXME: This tag is unknown to GnuCash desktop. For full compat, we will need to fix it
     public static final String TAG_SX_SCHEDULE              = "sx:schedule";
     public static final String TAG_RECURRENCE               = "gnc:recurrence";
     public static final String TAG_RX_MULT                  = "recurrence:mult";
@@ -129,7 +129,7 @@
     public static final String KEY_NOTES            = "notes";
     public static final String KEY_EXPORTED         = "exported";
     public static final String KEY_SCHEDX_ACTION    = "sched-xaction";
-    public static final String KEY_SPLIT_ACCOUNT    = "key_account";
+    public static final String KEY_SPLIT_ACCOUNT    = "account";
     public static final String KEY_DEBIT_FORMULA    = "debit-formula";
     public static final String KEY_CREDIT_FORMULA   = "credit-formula";
     public static final String KEY_FROM_SCHED_ACTION        = "from-sched-xaction";
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 44d8eea1..e51b49d4 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -471,6 +471,7 @@ else if (qualifiedName.equals(GncXmlHelper.TAG_SX_ID)){
             mScheduledAction.setUID(characterString);
         }
         else if (qualifiedName.equals(GncXmlHelper.TAG_SX_NAME)){
+            //FIXME: Do not rely on the type, rather lookup the SX_ID from previous tag to find action type
             ScheduledAction.ActionType type = ScheduledAction.ActionType.valueOf(characterString);
             mScheduledAction.setActionType(type);
         }
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index e0f5a02f..91e0cd65 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -46,7 +46,7 @@
     /**
      * Next scheduled run of Event
      */
-    private long mLastRun;
+    private long mLastRun = 0;
 
     /**
      * Unique ID of the template from which the recurring event will be executed.
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 02776cd8..bc0e3b94 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -71,7 +71,7 @@ protected void onHandleIntent(Intent intent) {
             long now = System.currentTimeMillis();
             //if we did not exceed the endtime (if there is one), and one execution period has passed since last run
             if (((endTime > 0 && now < endTime) || (scheduledAction.getExecutionCount() < scheduledAction.getTotalFrequency()) || endTime == 0)
-                    && (lastRun + period) < now ){
+                    && (lastRun + period) <= now ){
                 executeScheduledEvent(scheduledAction);
             }
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 63eb0c3b..eee32486 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -441,6 +441,7 @@ private void initializeViewsWithTransaction(){
         if (scheduledActionUID != null && !scheduledActionUID.isEmpty()) {
             ScheduledAction scheduledAction = ScheduledActionDbAdapter.getInstance().getScheduledAction(scheduledActionUID);
             mRecurrenceRule = scheduledAction.getRuleString();
+            mEventRecurrence.parse(mRecurrenceRule);
             mRecurrenceTextView.setText(scheduledAction.getRepeatString());
         }
     }
@@ -734,19 +735,19 @@ private void saveNewTransaction() {
             mTransaction.setTime(cal.getTimeInMillis());
             mTransaction.setNote(notes);
 
-            // set as not exported.
+            // set as not exported because we have just edited it
             mTransaction.setExported(false);
             mTransaction.setTemplate(mSaveTemplateCheckbox.isChecked());
             mTransactionsDbAdapter.addTransaction(mTransaction);
 
-            if (mSaveTemplateCheckbox.isChecked()) {
-                Transaction templateTransaction = mTransaction;
+            if (mSaveTemplateCheckbox.isChecked()) {//template is automatically checked when a transaction is scheduled
                 if (!mEditMode) { //means it was new transaction, so a new template
-                    templateTransaction = new Transaction(mTransaction, true);
+                    Transaction templateTransaction = new Transaction(mTransaction, true);
                     templateTransaction.setTemplate(true);
                     mTransactionsDbAdapter.addTransaction(templateTransaction);
-                }
-                scheduleRecurringTransaction(templateTransaction.getUID());
+                    scheduleRecurringTransaction(templateTransaction.getUID());
+                } else
+                    scheduleRecurringTransaction(mTransaction.getUID());
             } else {
                 String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
                 if (scheduledActionUID != null){ //we were editing a schedule and it was turned off
@@ -794,7 +795,6 @@ private void scheduleRecurringTransaction(String transactionUID) {
 
         for (ScheduledAction event : events) {
             event.setActionUID(transactionUID);
-            event.setLastRun(System.currentTimeMillis());
             scheduledActionDbAdapter.addScheduledAction(event);
 
             Log.i("TransactionFormFragment", event.toString());
