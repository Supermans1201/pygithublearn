From bc6b5fc87988b92b66f59442e506f15d6eba4f08 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 9 Nov 2012 14:51:08 +0100
Subject: [PATCH] Fixed: Default transaction type setting not working for
 non-English locales Improved French and German translations Improved and
 added tests (tests only really work reliably for Android 4.0) due to
 Robotium/ActionBarSherlock compatibility issues fixes #34, closes #36

---
 GnucashMobile/res/values-de/strings.xml            |   4 +-
 GnucashMobile/res/values-fr/strings.xml            |   8 +-
 GnucashMobile/res/values/strings.xml               |   4 +
 .../res/xml/fragment_transaction_preferences.xml   |   2 +-
 .../android/ui/accounts/AccountsListFragment.java  |   2 +-
 .../settings/TransactionsPreferenceFragment.java   |  11 +-
 .../android/test/ui/AccountsActivityTest.java      |  87 +++++-----
 .../org/gnucash/android/test/ui/OfxExportTest.java |  17 +-
 .../android/test/ui/TransactionsActivityTest.java  | 191 +++++++++++++--------
 9 files changed, 194 insertions(+), 132 deletions(-)

diff --git a/GnucashMobile/res/values-de/strings.xml b/GnucashMobile/res/values-de/strings.xml
index adcc83e3..9b09d279 100644
--- a/GnucashMobile/res/values-de/strings.xml
+++ b/GnucashMobile/res/values-de/strings.xml
@@ -473,6 +473,6 @@
 		<item>Haben</item>
 		<item>Soll</item>
 	</string-array>
-	<string name="delete_all_transactions_confirmation_message">Are you sure you want to delete ALL transactions?</string>
-	<string name="delete_transaction_confirmation_message">Are you sure you want to delete this transaction?</string>
+	<string name="delete_all_transactions_confirmation_message">Wollen Sie wirklich ALLE Buchungen l&#246;schen?</string>
+	<string name="delete_transaction_confirmation_message">Wollen Sie wirklich diese Buchung l&#246;schen?</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/values-fr/strings.xml b/GnucashMobile/res/values-fr/strings.xml
index d4312df3..e2883c83 100644
--- a/GnucashMobile/res/values-fr/strings.xml
+++ b/GnucashMobile/res/values-fr/strings.xml
@@ -465,11 +465,11 @@
 	<string name="title_export_email">Gnucash OFX export</string>
 	<string name="description_export_email">Gnucash OFX Export von </string>
 	<string name="header_transaction_settings">Transactions</string>
-	<string name="title_transaction_preferences">Transaction Preferences</string>
-	<string name="title_account_preferences">Account Preferences</string>
+	<string name="title_transaction_preferences">Prfrences des transactions</string>
+	<string name="title_account_preferences">Prfrences du compte</string>
 	<string name="key_default_transaction_type">default_transaction_type</string>
-	<string name="title_default_transaction_type">Default Transaction Type</string>
-	<string name="summary_default_transaction_type">The type of transaction to use by default, CREDIT or DEBIT</string>
+	<string name="title_default_transaction_type">Type de transaction par dfaut</string>
+	<string name="summary_default_transaction_type">Le type de transaction  utiliser par dfaut, CREDIT ou DEBIT</string>
 	<string-array name="transaction_types">
 		<item>CREDIT</item>
 		<item>DEBIT</item>
diff --git a/GnucashMobile/res/values/strings.xml b/GnucashMobile/res/values/strings.xml
index bf45056f..0a3b6a3e 100644
--- a/GnucashMobile/res/values/strings.xml
+++ b/GnucashMobile/res/values/strings.xml
@@ -473,6 +473,10 @@
 		<item>CREDIT</item>
 		<item>DEBIT</item>
 	</string-array>
+	<string-array name="key_transaction_type_values">
+		<item>CREDIT</item>
+		<item>DEBIT</item>
+	</string-array>
 	<string name="delete_all_transactions_confirmation_message">Are you sure you want to delete ALL transactions?</string>
 	<string name="delete_transaction_confirmation_message">Are you sure you want to delete this transaction?</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/xml/fragment_transaction_preferences.xml b/GnucashMobile/res/xml/fragment_transaction_preferences.xml
index 28c86a51..4c81f2a0 100644
--- a/GnucashMobile/res/xml/fragment_transaction_preferences.xml
+++ b/GnucashMobile/res/xml/fragment_transaction_preferences.xml
@@ -15,5 +15,5 @@
  limitations under the License.
 -->
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <ListPreference android:title="@string/title_default_transaction_type" android:entryValues="@array/transaction_types" android:entries="@array/transaction_types" android:key="@string/key_default_transaction_type" android:summary="@string/summary_default_transaction_type"/>
+    <ListPreference android:title="@string/title_default_transaction_type" android:entryValues="@array/key_transaction_type_values" android:entries="@array/transaction_types" android:key="@string/key_default_transaction_type" android:summary="@string/summary_default_transaction_type"/>
 </PreferenceScreen>
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index 8e8c94ed..caf36827 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -140,7 +140,7 @@
 		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
 			MenuInflater inflater = mode.getMenuInflater();
 	        inflater.inflate(R.menu.account_context_menu, menu);
-	        mode.setTitle("1 selected");
+	        mode.setTitle(getString(R.string.title_selected, 1));
 	        return true;
 		}
 
diff --git a/GnucashMobile/src/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java b/GnucashMobile/src/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
index db84e912..fa5b58e0 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
@@ -53,17 +53,22 @@ public void onResume() {
 		
 		SharedPreferences manager = PreferenceManager.getDefaultSharedPreferences(getActivity());
 		String defaultTransactionType = manager.getString(getString(R.string.key_default_transaction_type), "DEBIT");
-		Preference pref = findPreference(getString(R.string.key_default_transaction_type));
-		pref.setSummary(defaultTransactionType);
+		Preference pref = findPreference(getString(R.string.key_default_transaction_type));		
+		setLocalizedSummary(pref, defaultTransactionType);
 		pref.setOnPreferenceChangeListener(this);
 	}
 
 
 	@Override
 	public boolean onPreferenceChange(Preference preference, Object newValue) {
-		preference.setSummary(newValue.toString());		
+		setLocalizedSummary(preference, newValue.toString());
 		return true;
 	}
 	
+	private void setLocalizedSummary(Preference preference, String value){
+		String localizedLabel = value.equals("DEBIT") ? getString(R.string.label_debit) : getActivity().getString(R.string.label_credit);
+		Preference pref = findPreference(getString(R.string.key_default_transaction_type));
+		pref.setSummary(localizedLabel);
+	}
 	
 }
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java
index 9f2290a7..d5826812 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -36,6 +36,7 @@
 import android.preference.PreferenceManager;
 import android.support.v4.app.Fragment;
 import android.test.ActivityInstrumentationTestCase2;
+import android.widget.Button;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -81,7 +82,7 @@ public void testCreateAccount(){
 		else
 			mSolo.clickOnImage(1);
 		
-		mSolo.waitForText("Create");
+		mSolo.waitForText(getActivity().getString(R.string.title_add_account));
 		mSolo.enterText(0, "New Account");
 		
 		mSolo.clickOnText(getActivity().getString(R.string.btn_save));
@@ -139,6 +140,49 @@ public void testEditAccount(){
 		accAdapter.close();
 	}
 	
+	public void testDeleteAccount(){		
+			Account acc = new Account("TO BE DELETED");
+			acc.setUID("to-be-deleted");
+			
+			Transaction transaction = new Transaction("5.99", "hats");
+			transaction.setAccountUID("to-be-deleted");
+			acc.addTransaction(transaction);
+			AccountsDbAdapter accDbAdapter = new AccountsDbAdapter(getActivity());
+			accDbAdapter.addAccount(acc);		
+			
+			Fragment fragment = getActivity()
+					.getSupportFragmentManager()
+					.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+			assertNotNull(fragment);
+			
+			((AccountsListFragment) fragment).refreshList();
+			
+			mSolo.clickLongOnText("TO BE DELETED");
+							
+			mSolo.clickOnImage(2);
+			//robotium and Sherloock context actionbar don't play nice
+	//		mSolo.clickOnActionBarItem(R.id.context_menu_delete);
+						
+			String deleteConfirm = getActivity().getString(R.string.alert_dialog_ok_delete);
+			Button b = mSolo.getButton(deleteConfirm);
+			mSolo.clickOnView(b);
+			//FIXME: deletion fails often because the confirmation dialog cannot be confirmed
+			//we could also click on the button position, but it is different pre and post 4.0
+			
+			mSolo.waitForDialogToClose(1000);
+			
+			long id = accDbAdapter.getAccountID("to-be-deleted");
+			assertEquals(-1, id);
+			
+			TransactionsDbAdapter transDbAdapter = new TransactionsDbAdapter(getActivity());
+			List<Transaction> transactions = transDbAdapter.getAllTransactionsForAccount("to-be-deleted");
+			
+			assertEquals(0, transactions.size());
+			
+			accDbAdapter.close();
+			transDbAdapter.close();
+		}
+
 	public void testDisplayTransactionsList(){	
 		Fragment fragment = getActivity()
 				.getSupportFragmentManager()
@@ -162,47 +206,6 @@ public void testDisplayTransactionsList(){
 		
 	}
 		
-	public void testDeleteAccount(){		
-		Account acc = new Account("TO BE DELETED");
-		acc.setUID("to-be-deleted");
-		
-		Transaction transaction = new Transaction("5.99", "hats");
-		transaction.setAccountUID("to-be-deleted");
-		acc.addTransaction(transaction);
-		AccountsDbAdapter accDbAdapter = new AccountsDbAdapter(getActivity());
-		accDbAdapter.addAccount(acc);		
-		
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		assertNotNull(fragment);
-		
-		((AccountsListFragment) fragment).refreshList();
-		
-		mSolo.clickLongOnText("TO BE DELETED");
-		
-		mSolo.waitForText(getActivity().getString(R.string.title_edit_account));
-		
-		mSolo.clickOnImage(2);
-		
-		mSolo.clickOnText(getActivity().getString(R.string.alert_dialog_ok_delete));
-		//FIXME: deletion fails often because the confirmation dialog cannot be confirmed
-		//we could also click on the button position, but it is different pre and post 4.0
-		
-		mSolo.waitForDialogToClose(1000);
-		
-		long id = accDbAdapter.getAccountID("to-be-deleted");
-		assertEquals(-1, id);
-		
-		TransactionsDbAdapter transDbAdapter = new TransactionsDbAdapter(getActivity());
-		List<Transaction> transactions = transDbAdapter.getAllTransactionsForAccount("to-be-deleted");
-		
-		assertEquals(0, transactions.size());
-		
-		accDbAdapter.close();
-		transDbAdapter.close();
-	}
-	
 	public void testIntentAccountCreation(){
 		Intent intent = new Intent(Intent.ACTION_INSERT);
 		intent.putExtra(Intent.EXTRA_TITLE, "Intent Account");
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java
index 4445de11..ca7744a2 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java
@@ -28,6 +28,7 @@
 
 import android.os.Environment;
 import android.test.ActivityInstrumentationTestCase2;
+import android.widget.Button;
 import android.widget.Spinner;
 
 import com.jayway.android.robotium.solo.Solo;
@@ -91,8 +92,10 @@ public void testOfxExport(){
 	}	
 	
 	public void testDeleteTransactionsAfterExport(){
-		mSolo.clickOnActionBarItem(R.id.menu_export);
+		TransactionsDbAdapter transAdapter = new TransactionsDbAdapter(getActivity());
+		assertTrue(transAdapter.getAllTransactionsCount() != 0);
 		
+		mSolo.clickOnActionBarItem(R.id.menu_export);		
 		mSolo.waitForText("Export OFX");
 		Spinner spinner = mSolo.getCurrentSpinners().get(0);
 		mSolo.clickOnView(spinner);
@@ -102,11 +105,15 @@ public void testDeleteTransactionsAfterExport(){
 		//check to delete after export
 		mSolo.clickOnCheckBox(1);
 		
-		mSolo.clickOnButton(3);
-		mSolo.waitForDialogToClose(10000);
+		Button b = (Button) mSolo.getView(R.id.btn_save);
+		mSolo.clickOnView(b);
+		mSolo.waitForDialogToClose(2000);
+		
+		//confirm delete
+		Button deleteButton = (Button) mSolo.getView(android.R.id.button1);
+		mSolo.clickOnView(deleteButton);
+		mSolo.waitForDialogToClose(1000);
 		
-		mSolo.clickOnText(getActivity().getString(R.string.alert_dialog_ok_delete));
-		TransactionsDbAdapter transAdapter = new TransactionsDbAdapter(getActivity());
 		assertEquals(0, transAdapter.getAllTransactionsCount());
 		
 		transAdapter.close();
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 970a436d..38479569 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -35,9 +35,15 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
+import android.preference.PreferenceManager;
 import android.support.v4.app.Fragment;
 import android.test.ActivityInstrumentationTestCase2;
+import android.view.View;
 import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.ToggleButton;
 
 import com.jayway.android.robotium.solo.Solo;
 
@@ -98,55 +104,30 @@ private int getTranscationCount(){
 	
 	private void validateNewTransactionFields(){
 		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(new Date(mTransactionTimeMillis));
-		String actualValue = mSolo.getText(6).getText().toString();
+		TextView dateView = (TextView) mSolo.getView(R.id.input_date);//(TextView) getActivity().findViewById(R.id.input_date);
+		String actualValue = dateView.getText().toString();
 		assertEquals(expectedValue, actualValue);
 		
 		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(new Date(mTransactionTimeMillis));
-		actualValue = mSolo.getText(7).getText().toString();
+		TextView timeView = (TextView) mSolo.getView(R.id.input_time); //(TextView) getActivity().findViewById(R.id.input_time);
+		actualValue = timeView.getText().toString();
 		assertEquals(expectedValue, actualValue);
 		
 	}
 	
-	public void testAddTransaction(){	
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		validateTransactionListDisplayed();
-		
-		//Android 2.2 cannot handle this for some reason, use image instead
-//		mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
-		mSolo.clickOnImage(2);
-		mSolo.waitForText("Description");
-		
-		validateNewTransactionFields();
-		
-		//validate creation of transaction
-		mSolo.enterText(0, "Lunch");
-		mSolo.enterText(1, "899");
-		//check that the amount is correctly converted in the input field
-		String value = mSolo.getEditText(1).getText().toString();
-		String expectedValue = NumberFormat.getInstance().format(-8.99); 
-		assertEquals(expectedValue, value);
-		
-		int transactionsCount = getTranscationCount();
-		
-		//Android 2.2 cannot handle this for some reason
-//		mSolo.clickOnActionBarItem(R.id.menu_save);	
-		mSolo.clickOnImage(3);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		validateTransactionListDisplayed();
-		
-		assertEquals(transactionsCount + 1, getTranscationCount());
-	}
-	
 	public void testAddTransactionShouldRequireAmount(){
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		validateTransactionListDisplayed();
 		
 		TransactionsDbAdapter adapter = new TransactionsDbAdapter(getActivity());
 		int beforeCount = adapter.getTransactionsCount(adapter.getAccountID(DUMMY_ACCOUNT_UID));
-		mSolo.clickOnImage(2);
+		mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
 		mSolo.waitForText("Description");
 		mSolo.enterText(0, "Lunch");
-		assertEquals(false, mSolo.getImage(3).isEnabled());
+		
+		//verify that only text does not enable save button
+		View saveButtonView = mSolo.getView(R.id.menu_save);				
+		assertFalse(saveButtonView.isEnabled());//mSolo.getImage(3).isEnabled());
 		mSolo.clickOnActionBarItem(R.id.btn_save);
 		
 		int afterCount = adapter.getTransactionsCount(adapter.getAccountID(DUMMY_ACCOUNT_UID));
@@ -172,49 +153,46 @@ private void validateEditTransactionFields(Transaction transaction){
 		assertEquals(transaction.getDescription(), description);
 		
 		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
-		String actualValue = mSolo.getText(6).getText().toString();
+		TextView dateView = (TextView) mSolo.getView(R.id.input_date);
+		String actualValue = dateView.getText().toString(); //mSolo.getText(6).getText().toString();
 		assertEquals(expectedValue, actualValue);
 		
 		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
-		actualValue = mSolo.getText(7).getText().toString();
+		TextView timeView = (TextView) mSolo.getView(R.id.input_time);
+		actualValue = timeView.getText().toString();// mSolo.getText(7).getText().toString();
 		assertEquals(expectedValue, actualValue);
 	}
 	
-	public void testOpenTransactionEditShouldNotModifyTransaction(){
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		validateTransactionListDisplayed();
-		
-		mSolo.clickOnText(TRANSACTION_NAME);
-		mSolo.waitForText("Note");
-		
-		validateNewTransactionFields();
-		
-		mSolo.clickOnActionBarItem(R.id.menu_save);
-		
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		TransactionsDbAdapter adapter = new TransactionsDbAdapter(getActivity());
-		List<Transaction> transactions = adapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
-		
-		assertEquals(1, transactions.size());
-		Transaction trx = transactions.get(0);
-		assertEquals(TRANSACTION_NAME, trx.getName());
-		assertEquals(trx.getAccountUID(), DUMMY_ACCOUNT_UID);
-		Date expectedDate = new Date(mTransactionTimeMillis);
-		Date trxDate = new Date(trx.getTimeMillis());
-		assertEquals(NewTransactionFragment.DATE_FORMATTER.format(expectedDate), 
-				NewTransactionFragment.DATE_FORMATTER.format(trxDate));
-		assertEquals(NewTransactionFragment.TIME_FORMATTER.format(expectedDate), 
-				NewTransactionFragment.TIME_FORMATTER.format(trxDate));
-		
-		//FIXME: for some reason, the expected time is higher (in the future) than the actual time
-		//this should not be the case since the transaction was created with the expected time
-		//I guess it has to do with the time precision and the fact that the time is repeatedly 
-		//converted to Date objects and back. But just validating the printable date and time should be ok
-//		assertEquals(mTransactionTimeMillis, trx.getTimeMillis());
-	}
-	
+	public void testAddTransaction(){	
+			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+			validateTransactionListDisplayed();
+			
+			//Android 2.2 cannot handle this for some reason, use image instead
+			mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
+//			mSolo.clickOnImage(2);
+			mSolo.waitForText("Description");
+			
+			validateNewTransactionFields();
+			
+			//validate creation of transaction
+			mSolo.enterText(0, "Lunch");
+			mSolo.enterText(1, "899");
+			//check that the amount is correctly converted in the input field
+			String value = mSolo.getEditText(1).getText().toString();
+			String expectedValue = NumberFormat.getInstance().format(-8.99); 
+			assertEquals(expectedValue, value);
+			
+			int transactionsCount = getTranscationCount();
+			
+			//Android 2.2 cannot handle this for some reason
+			mSolo.clickOnActionBarItem(R.id.menu_save);	
+//			mSolo.clickOnImage(3);
+			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+			validateTransactionListDisplayed();
+			
+			assertEquals(transactionsCount + 1, getTranscationCount());
+		}
+
 	public void testEditTransaction(){		
 		//open transactions
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
@@ -233,6 +211,33 @@ public void testEditTransaction(){
 		mSolo.waitForText("Pasta");
 	}
 	
+	public void testDefaultTransactionType(){
+		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		Editor editor = prefs.edit();
+		editor.putString(getActivity().getString(R.string.key_default_transaction_type), "CREDIT");
+		editor.commit();
+		
+		mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
+		mSolo.waitForText(getActivity().getString(R.string.label_transaction_name));
+		
+//		ToggleButton transactionTypeButton = (ToggleButton) mSolo.getView(R.id.input_transaction_type); 
+		ToggleButton transactionTypeButton = (ToggleButton) mSolo.getButton(0);
+		assertTrue(transactionTypeButton.isChecked() == false);
+		
+		mSolo.clickOnActionBarItem(R.id.menu_cancel);
+		
+		//now validate the other case 
+		editor = prefs.edit();
+		editor.putString(getActivity().getString(R.string.key_default_transaction_type), "DEBIT");
+		editor.commit();
+		
+		mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
+		mSolo.waitForText(getActivity().getString(R.string.label_transaction_name));
+		
+		transactionTypeButton = (ToggleButton) mSolo.getButton(0);
+		assertTrue(transactionTypeButton.isChecked());
+	}
+
 	public void testToggleTransactionType(){
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		
@@ -254,7 +259,8 @@ public void testToggleTransactionType(){
 		assertEquals("-9.99", amount.toPlainString());
 		
 		//save the transaction, should now be a debit
-		mSolo.clickOnImage(3);
+//		mSolo.clickOnImage(3);
+		mSolo.clickOnActionBarItem(R.id.menu_save);
 		
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		
@@ -266,10 +272,45 @@ public void testToggleTransactionType(){
 		assertTrue(trx.getAmount().isNegative());
 	}
 	
+	public void testOpenTransactionEditShouldNotModifyTransaction(){
+			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+			
+			validateTransactionListDisplayed();
+			
+			mSolo.clickOnText(TRANSACTION_NAME);
+			mSolo.waitForText("Note");
+			
+			validateNewTransactionFields();
+			
+			mSolo.clickOnActionBarItem(R.id.menu_save);
+			
+			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+			
+			TransactionsDbAdapter adapter = new TransactionsDbAdapter(getActivity());
+			List<Transaction> transactions = adapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+			
+			assertEquals(1, transactions.size());
+			Transaction trx = transactions.get(0);
+			assertEquals(TRANSACTION_NAME, trx.getName());
+			assertEquals(trx.getAccountUID(), DUMMY_ACCOUNT_UID);
+			Date expectedDate = new Date(mTransactionTimeMillis);
+			Date trxDate = new Date(trx.getTimeMillis());
+			assertEquals(NewTransactionFragment.DATE_FORMATTER.format(expectedDate), 
+					NewTransactionFragment.DATE_FORMATTER.format(trxDate));
+			assertEquals(NewTransactionFragment.TIME_FORMATTER.format(expectedDate), 
+					NewTransactionFragment.TIME_FORMATTER.format(trxDate));
+			
+			//FIXME: for some reason, the expected time is higher (in the future) than the actual time
+			//this should not be the case since the transaction was created with the expected time
+			//I guess it has to do with the time precision and the fact that the time is repeatedly 
+			//converted to Date objects and back. But just validating the printable date and time should be ok
+	//		assertEquals(mTransactionTimeMillis, trx.getTimeMillis());
+		}
+
 	public void testDeleteTransaction(){
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		
-		mSolo.clickOnCheckBox(0);
+		mSolo.clickOnCheckBox(0);		
 		mSolo.clickOnImage(2);
 		
 		AccountsDbAdapter accAdapter = new AccountsDbAdapter(getActivity());
@@ -295,7 +336,9 @@ public void testBulkMoveTransactions(){
 		validateTransactionListDisplayed();
 		
 		mSolo.clickOnCheckBox(0);
-		mSolo.clickOnImage(1);
+		mSolo.waitForText(getActivity().getString(R.string.title_selected, 1));
+		//initiate bulk move
+		mSolo.clickOnImage(1);		
 		
 		mSolo.waitForDialogToClose(2000);
 		
