From f5e8cac3548e26caa463860a1eb96ebf3aa33087 Mon Sep 17 00:00:00 2001
From: alceurneto <alceurneto@gmail.com>
Date: Sat, 6 Feb 2016 10:51:01 -0200
Subject: [PATCH] Some refactoring (Fixes #467 and fixes #464).

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  4 ++--
 .../org/gnucash/android/db/DatabaseAdapter.java    |  6 +++---
 .../org/gnucash/android/db/MigrationHelper.java    | 10 ++++-----
 .../org/gnucash/android/db/PricesDbAdapter.java    |  4 ++--
 .../android/db/ScheduledActionDbAdapter.java       |  2 +-
 .../org/gnucash/android/db/SplitsDbAdapter.java    |  4 ++--
 .../gnucash/android/db/TransactionsDbAdapter.java  |  6 +++---
 .../org/gnucash/android/export/ExportParams.java   |  8 ++++----
 .../gnucash/android/export/ofx/OfxExporter.java    |  2 +-
 .../gnucash/android/export/qif/QifExporter.java    |  4 ++--
 .../gnucash/android/export/xml/GncXmlExporter.java |  6 +++---
 .../java/org/gnucash/android/model/BaseModel.java  |  4 ++--
 .../main/java/org/gnucash/android/model/Price.java |  4 ++--
 .../android/ui/export/ExportFormFragment.java      |  2 +-
 .../gnucash/android/util/PreferencesHelper.java    |  4 ++--
 .../org/gnucash/android/util/TimestampHelper.java  |  8 ++++----
 .../android/test/unit/db/MigrationHelperTest.java  |  6 +++---
 .../test/unit/util/PreferencesHelperTest.java      |  2 +-
 .../test/unit/util/TimestampHelperTest.java        | 24 +++++++++++-----------
 19 files changed, 55 insertions(+), 55 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 1d913177..07aad7a7 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -183,7 +183,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Account account
         mReplaceStatement.bindLong(7, account.isFavorite() ? 1 : 0);
         mReplaceStatement.bindString(8, account.getFullName());
         mReplaceStatement.bindLong(9, account.isPlaceholderAccount() ? 1 : 0);
-        mReplaceStatement.bindString(10, TimestampHelper.getUtcStringForTimestamp(account.getCreatedTimestamp()));
+        mReplaceStatement.bindString(10, TimestampHelper.getUtcStringFromTimestamp(account.getCreatedTimestamp()));
         mReplaceStatement.bindLong(11, account.isHidden() ? 1 : 0);
         Commodity commodity = account.getCommodity();
         if (commodity == null)
@@ -530,7 +530,7 @@ public AccountType getAccountType(long accountId){
                         SplitEntry.COLUMN_ACCOUNT_UID,
                 new String[]{AccountEntry.TABLE_NAME + ".*"},
                 TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_MODIFIED_AT + " > ?",
-                new String[]{TimestampHelper.getUtcStringForTimestamp(lastExportTimeStamp)},
+                new String[]{TimestampHelper.getUtcStringFromTimestamp(lastExportTimeStamp)},
                 AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
                 null,
                 null
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 2f0aa62f..705474ae 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -301,7 +301,7 @@ public Model getRecord(long id){
      */
     protected ContentValues populateBaseModelAttributes(@NonNull ContentValues contentValues, @NonNull Model model){
         contentValues.put(CommonColumns.COLUMN_UID, model.getUID());
-        contentValues.put(CommonColumns.COLUMN_CREATED_AT, TimestampHelper.getUtcStringForTimestamp(model.getCreatedTimestamp()));
+        contentValues.put(CommonColumns.COLUMN_CREATED_AT, TimestampHelper.getUtcStringFromTimestamp(model.getCreatedTimestamp()));
         //there is a trigger in the database for updated the modified_at column
         /* Due to the use of SQL REPLACE syntax, we insert the created_at values each time
         * (maintain the original creation time and not the time of creation of the replacement)
@@ -321,8 +321,8 @@ protected void populateBaseModelAttributes(Cursor cursor, BaseModel model){
         String modified= cursor.getString(cursor.getColumnIndexOrThrow(CommonColumns.COLUMN_MODIFIED_AT));
 
         model.setUID(uid);
-        model.setCreatedTimestamp(TimestampHelper.getTimestampForUtcString(created));
-        model.setModifiedTimestamp(TimestampHelper.getTimestampForUtcString(modified));
+        model.setCreatedTimestamp(TimestampHelper.getTimestampFromUtcString(created));
+        model.setModifiedTimestamp(TimestampHelper.getTimestampFromUtcString(modified));
     }
 
 	/**
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 87debbeb..1b43bdee 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -647,7 +647,7 @@ static int upgradeDbToVersion8(SQLiteDatabase db) {
             //================================ END TABLE MIGRATIONS ================================
 
             // String timestamp to be used for all new created entities in migration
-            String timestamp = TimestampHelper.getUtcStringForTimestamp(TimestampHelper.getTimestampForNow());
+            String timestamp = TimestampHelper.getUtcStringFromTimestamp(TimestampHelper.getTimestampFromNow());
 
             //ScheduledActionDbAdapter scheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
             //SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(db);
@@ -698,7 +698,7 @@ static int upgradeDbToVersion8(SQLiteDatabase db) {
             while (cursor.moveToNext()){
                 contentValues.clear();
                 Timestamp timestampT = new Timestamp(cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
-                contentValues.put(TransactionEntry.COLUMN_CREATED_AT, TimestampHelper.getUtcStringForTimestamp(timestampT));
+                contentValues.put(TransactionEntry.COLUMN_CREATED_AT, TimestampHelper.getUtcStringFromTimestamp(timestampT));
                 long transactionId = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID));
                 db.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry._ID + "=" + transactionId, null);
 
@@ -1096,7 +1096,7 @@ static int upgradeDbToVersion10(SQLiteDatabase db){
 
                 boolean exportAll = Boolean.parseBoolean(tokens[2]);
                 if (exportAll){
-                    params.setExportStartTime(TimestampHelper.getTimestampForEpochZero());
+                    params.setExportStartTime(TimestampHelper.getTimestampFromEpochZero());
                 } else {
                     Timestamp timestamp = PreferencesHelper.getLastExportTime();
                     params.setExportStartTime(timestamp);
@@ -1143,9 +1143,9 @@ static int upgradeDbToVersion11(SQLiteDatabase db){
                 String tag = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TAG));
                 String[] tokens = tag.split(";");
                 try {
-                    Timestamp timestamp = TimestampHelper.getTimestampForUtcString(tokens[2]);
+                    Timestamp timestamp = TimestampHelper.getTimestampFromUtcString(tokens[2]);
                 } catch (IllegalArgumentException ex) {
-                    tokens[2] = TimestampHelper.getUtcStringForTimestamp(PreferencesHelper.getLastExportTime());
+                    tokens[2] = TimestampHelper.getUtcStringFromTimestamp(PreferencesHelper.getLastExportTime());
                 } finally {
                     tag = TextUtils.join(";", tokens);
                 }
diff --git a/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
index c4a230f0..5cfce370 100644
--- a/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
@@ -46,7 +46,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Price price) {
         mReplaceStatement.bindString(1, price.getUID());
         mReplaceStatement.bindString(2, price.getCommodityUID());
         mReplaceStatement.bindString(3, price.getCurrencyUID());
-        mReplaceStatement.bindString(4, TimestampHelper.getUtcStringForTimestamp(price.getDate()));
+        mReplaceStatement.bindString(4, TimestampHelper.getUtcStringFromTimestamp(price.getDate()));
         if (price.getSource() != null) {
             mReplaceStatement.bindString(5, price.getSource());
         }
@@ -70,7 +70,7 @@ public Price buildModelInstance(@NonNull final Cursor cursor) {
         long valueDenom   = cursor.getLong(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_VALUE_DENOM));
 
         Price price = new Price(commodityUID, currencyUID);
-        price.setDate(TimestampHelper.getTimestampForUtcString(dateString));
+        price.setDate(TimestampHelper.getTimestampFromUtcString(dateString));
         price.setSource(source);
         price.setType(type);
         price.setValueNum(valueNum);
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index cecf5ea0..add6015d 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -103,7 +103,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final ScheduledAction
         mReplaceStatement.bindLong(6,   schedxAction.getLastRun());
         mReplaceStatement.bindLong(7,   schedxAction.getPeriod());
         mReplaceStatement.bindLong(8,   schedxAction.isEnabled() ? 1 : 0);
-        mReplaceStatement.bindString(9, TimestampHelper.getUtcStringForTimestamp(schedxAction.getCreatedTimestamp()));
+        mReplaceStatement.bindString(9, TimestampHelper.getUtcStringFromTimestamp(schedxAction.getCreatedTimestamp()));
         if (schedxAction.getTag() == null)
             mReplaceStatement.bindNull(10);
         else
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index 727db62c..41fda748 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -78,7 +78,7 @@ public void addRecord(@NonNull final Split split){
 
         //modifying a split means modifying the accompanying transaction as well
         updateRecord(TransactionEntry.TABLE_NAME, transactionId,
-                TransactionEntry.COLUMN_MODIFIED_AT, TimestampHelper.getUtcStringForTimestamp(TimestampHelper.getTimestampForNow()));
+                TransactionEntry.COLUMN_MODIFIED_AT, TimestampHelper.getUtcStringFromTimestamp(TimestampHelper.getTimestampFromNow()));
     }
 
     @Override
@@ -107,7 +107,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Split split) {
         mReplaceStatement.bindLong(5,   split.getValue().getDenominator());
         mReplaceStatement.bindLong(6,   split.getQuantity().getNumerator());
         mReplaceStatement.bindLong(7,   split.getQuantity().getDenominator());
-        mReplaceStatement.bindString(8, TimestampHelper.getUtcStringForTimestamp(split.getCreatedTimestamp()));
+        mReplaceStatement.bindString(8, TimestampHelper.getUtcStringFromTimestamp(split.getCreatedTimestamp()));
         mReplaceStatement.bindString(9, split.getAccountUID());
         mReplaceStatement.bindString(10, split.getTransactionUID());
 
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index b4f68434..31fafe0b 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -188,7 +188,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Transaction tra
             commodity = CommoditiesDbAdapter.getInstance().getCommodity(transaction.getCurrencyCode());
 
         mReplaceStatement.bindString(7, commodity.getUID());
-        mReplaceStatement.bindString(8, TimestampHelper.getUtcStringForTimestamp(transaction.getCreatedTimestamp()));
+        mReplaceStatement.bindString(8, TimestampHelper.getUtcStringFromTimestamp(transaction.getCreatedTimestamp()));
 
         if (transaction.getScheduledActionUID() == null)
             mReplaceStatement.bindNull(9);
@@ -644,11 +644,11 @@ public Timestamp getTimestampOfLastModification(){
                 new String[]{"MAX(" + TransactionEntry.COLUMN_MODIFIED_AT + ")"},
                 null, null, null, null, null);
 
-        Timestamp timestamp = TimestampHelper.getTimestampForNow();
+        Timestamp timestamp = TimestampHelper.getTimestampFromNow();
         if (cursor.moveToFirst()){
             String timeString = cursor.getString(0);
             if (timeString != null){ //in case there were no transactions in the XML file (account structure only)
-                timestamp = TimestampHelper.getTimestampForUtcString(timeString);
+                timestamp = TimestampHelper.getTimestampFromUtcString(timeString);
             }
         }
         cursor.close();
diff --git a/app/src/main/java/org/gnucash/android/export/ExportParams.java b/app/src/main/java/org/gnucash/android/export/ExportParams.java
index 71002ed2..f4a7d0fa 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportParams.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportParams.java
@@ -46,7 +46,7 @@
     /**
      * All transactions created after this date will be exported
      */
-    private Timestamp mExportStartTime = TimestampHelper.getTimestampForEpochZero();
+    private Timestamp mExportStartTime = TimestampHelper.getTimestampFromEpochZero();
 
     /**
      * Flag to determine if all transactions should be deleted after exporting is complete
@@ -134,7 +134,7 @@ public void setExportTarget(ExportTarget mExportTarget) {
 
     @Override
     public String toString() {
-        return "Export all transactions created since " + TimestampHelper.getUtcStringForTimestamp(mExportStartTime) + " UTC"
+        return "Export all transactions created since " + TimestampHelper.getUtcStringFromTimestamp(mExportStartTime) + " UTC"
                 + " as "+ mExportFormat.name() + " to " + mExportTarget.name();
     }
 
@@ -147,7 +147,7 @@ public String toCsv(){
         String separator = ";";
 
         return mExportFormat.name() + separator + mExportTarget.name() + separator
-                + TimestampHelper.getUtcStringForTimestamp(mExportStartTime) + separator
+                + TimestampHelper.getUtcStringFromTimestamp(mExportStartTime) + separator
                 + Boolean.toString(mDeleteTransactionsAfterExport);
     }
 
@@ -160,7 +160,7 @@ public static ExportParams parseCsv(String csvParams){
         String[] tokens = csvParams.split(";");
         ExportParams params = new ExportParams(ExportFormat.valueOf(tokens[0]));
         params.setExportTarget(ExportTarget.valueOf(tokens[1]));
-        params.setExportStartTime(TimestampHelper.getTimestampForUtcString(tokens[2]));
+        params.setExportStartTime(TimestampHelper.getTimestampFromUtcString(tokens[2]));
         params.setDeleteTransactionsAfterExport(Boolean.parseBoolean(tokens[3]));
 
         return params;
diff --git a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
index ca71d1db..850e8bfb 100644
--- a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
@@ -138,7 +138,7 @@ private String generateOfxExport() throws ExporterException {
         boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(mContext)
                 .getBoolean(mContext.getString(R.string.key_xml_ofx_header), false);
 
-        PreferencesHelper.setLastExportTime(TimestampHelper.getTimestampForNow());
+        PreferencesHelper.setLastExportTime(TimestampHelper.getTimestampFromNow());
 
         StringWriter stringWriter = new StringWriter();
         //if we want SGML OFX headers, write first to string and then prepend header
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index 69946d1c..f26c43f0 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -60,7 +60,7 @@ public QifExporter(ExportParams params){
         final String newLine = "\n";
         TransactionsDbAdapter transactionsDbAdapter = mTransactionsDbAdapter;
         try {
-            String lastExportTimeStamp = TimestampHelper.getUtcStringForTimestamp(mExportParams.getExportStartTime());
+            String lastExportTimeStamp = TimestampHelper.getUtcStringFromTimestamp(mExportParams.getExportStartTime());
             Cursor cursor = transactionsDbAdapter.fetchTransactionsWithSplitsWithTransactionAccount(
                     new String[]{
                             TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " AS trans_uid",
@@ -216,7 +216,7 @@ public QifExporter(ExportParams params){
             transactionsDbAdapter.updateTransaction(contentValues, null, null);
 
             /// export successful
-            PreferencesHelper.setLastExportTime(TimestampHelper.getTimestampForNow());
+            PreferencesHelper.setLastExportTime(TimestampHelper.getTimestampFromNow());
             return splitQIF(file);
         } catch (IOException e) {
             throw new ExporterException(mExportParams, e);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index f41aa127..4e259b5e 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -342,7 +342,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
 
                 // date entered, time when the transaction was actually created
-                Timestamp timeEntered = TimestampHelper.getTimestampForUtcString(cursor.getString(cursor.getColumnIndexOrThrow("trans_date_posted")));
+                Timestamp timeEntered = TimestampHelper.getTimestampFromUtcString(cursor.getString(cursor.getColumnIndexOrThrow("trans_date_posted")));
                 String dateEntered = GncXmlHelper.formatDate(timeEntered.getTime());
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TS_DATE);
@@ -539,7 +539,7 @@ private void exportScheduledTransactions(XmlSerializer xmlSerializer) throws IOE
 
             //start date
             String createdTimestamp = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_CREATED_AT));
-            long scheduleStartTime = TimestampHelper.getTimestampForUtcString(createdTimestamp).getTime();
+            long scheduleStartTime = TimestampHelper.getTimestampFromUtcString(createdTimestamp).getTime();
             serializeDate(xmlSerializer, GncXmlHelper.TAG_SX_START, scheduleStartTime);
 
             long lastRunTime = cursor.getLong(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_LAST_RUN));
@@ -659,7 +659,7 @@ private void exportPrices(XmlSerializer xmlSerializer) throws IOException {
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_CURRENCY);
                 // time
-                String strDate = GncXmlHelper.formatDate(TimestampHelper.getTimestampForUtcString(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_DATE))).getTime());
+                String strDate = GncXmlHelper.formatDate(TimestampHelper.getTimestampFromUtcString(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_DATE))).getTime());
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_TIME);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TS_DATE);
                 xmlSerializer.text(strDate);
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index 38c68802..2b113450 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -42,8 +42,8 @@
      * A unique ID will be generated on demand with a call to {@link #getUID()}</p>
      */
     public BaseModel(){
-        mCreatedTimestamp = TimestampHelper.getTimestampForNow();
-        mModifiedTimestamp = TimestampHelper.getTimestampForNow();
+        mCreatedTimestamp = TimestampHelper.getTimestampFromNow();
+        mModifiedTimestamp = TimestampHelper.getTimestampFromNow();
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/model/Price.java b/app/src/main/java/org/gnucash/android/model/Price.java
index b0c2f0cc..79c572f1 100644
--- a/app/src/main/java/org/gnucash/android/model/Price.java
+++ b/app/src/main/java/org/gnucash/android/model/Price.java
@@ -23,7 +23,7 @@
     public static final String SOURCE_USER = "user:xfer-dialog";
 
     public Price(){
-        mDate = TimestampHelper.getTimestampForNow();
+        mDate = TimestampHelper.getTimestampFromNow();
     }
 
     /**
@@ -34,7 +34,7 @@ public Price(){
     public Price(String commodityUID, String currencyUID){
         this.mCommodityUID = commodityUID;
         this.mCurrencyUID = currencyUID;
-        mDate = TimestampHelper.getTimestampForNow();
+        mDate = TimestampHelper.getTimestampFromNow();
     }
 
     public String getCommodityUID() {
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 180e4b3f..05dc1a9f 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -265,7 +265,7 @@ private void startExport(){
 		ExportParams exportParameters = new ExportParams(mExportFormat);
 
 		if (mExportAllSwitch.isChecked()){
-			exportParameters.setExportStartTime(TimestampHelper.getTimestampForEpochZero());
+			exportParameters.setExportStartTime(TimestampHelper.getTimestampFromEpochZero());
 		} else {
 			exportParameters.setExportStartTime(new Timestamp(mExportStartCalendar.getTimeInMillis()));
 		}
diff --git a/app/src/main/java/org/gnucash/android/util/PreferencesHelper.java b/app/src/main/java/org/gnucash/android/util/PreferencesHelper.java
index b48ef746..0937c2fd 100644
--- a/app/src/main/java/org/gnucash/android/util/PreferencesHelper.java
+++ b/app/src/main/java/org/gnucash/android/util/PreferencesHelper.java
@@ -48,7 +48,7 @@ private PreferencesHelper() {}
      * @param lastExportTime the last export time to set.
      */
     public static void setLastExportTime(Timestamp lastExportTime) {
-        final String utcString = TimestampHelper.getUtcStringForTimestamp(lastExportTime);
+        final String utcString = TimestampHelper.getUtcStringFromTimestamp(lastExportTime);
         Log.d(LOG_TAG, "Storing '" + utcString + "' as lastExportTime in Android Preferences.");
         PreferenceManager.getDefaultSharedPreferences(GnuCashApplication.getAppContext())
                 .edit()
@@ -66,6 +66,6 @@ public static Timestamp getLastExportTime() {
                 .getString(PREFERENCE_LAST_EXPORT_TIME_KEY, PREFERENCE_LAST_EXPORT_TIME_DEFAULT_VALUE);
         Log.d(LOG_TAG, "Retrieving '" + utcString + "' as lastExportTime from Android Preferences.");
         return PREFERENCE_LAST_EXPORT_TIME_DEFAULT_VALUE.equals(utcString) ?
-                TimestampHelper.getTimestampForEpochZero() : TimestampHelper.getTimestampForUtcString(utcString);
+                TimestampHelper.getTimestampFromEpochZero() : TimestampHelper.getTimestampFromUtcString(utcString);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/util/TimestampHelper.java b/app/src/main/java/org/gnucash/android/util/TimestampHelper.java
index ca021ca6..407f187c 100644
--- a/app/src/main/java/org/gnucash/android/util/TimestampHelper.java
+++ b/app/src/main/java/org/gnucash/android/util/TimestampHelper.java
@@ -48,14 +48,14 @@ private TimestampHelper() {}
      * @param timestamp The {@link Timestamp} to format.
      * @return The formatted {@link String}.
      */
-    public static String getUtcStringForTimestamp(Timestamp timestamp) {
+    public static String getUtcStringFromTimestamp(Timestamp timestamp) {
         return UTC_DATE_WITH_MILLISECONDS_FORMAT.withZone(UTC_TIME_ZONE).print(timestamp.getTime());
     }
 
     /**
      * @return A {@link Timestamp} with time in milliseconds equals to zero.
      */
-    public static Timestamp getTimestampForEpochZero() {
+    public static Timestamp getTimestampFromEpochZero() {
         return new Timestamp(0);
     }
 
@@ -68,7 +68,7 @@ public static Timestamp getTimestampForEpochZero() {
      * @param utcString A {@link String} in UTC.
      * @return A {@link Timestamp} for given utcString.
      */
-    public static Timestamp getTimestampForUtcString(String utcString) {
+    public static Timestamp getTimestampFromUtcString(String utcString) {
         DateTime dateTime;
         try {
 
@@ -93,7 +93,7 @@ public static Timestamp getTimestampForUtcString(String utcString) {
     /**
      * @return A {@link Timestamp} initialized with the system current time.
      */
-    public static Timestamp getTimestampForNow() {
+    public static Timestamp getTimestampFromNow() {
         return new Timestamp(System.currentTimeMillis());
     }
 }
\ No newline at end of file
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/MigrationHelperTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/MigrationHelperTest.java
index 517b4c47..e2b131d0 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/MigrationHelperTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/MigrationHelperTest.java
@@ -48,17 +48,17 @@ public void shouldSubtractTimeZoneOffset() {
 
         TimeZone timeZone = TimeZone.getTimeZone("GMT-1:00");
         Timestamp result = MigrationHelper.subtractTimeZoneOffset(unixBillenniumTimestamp, timeZone);
-        assertThat(TimestampHelper.getUtcStringForTimestamp(result))
+        assertThat(TimestampHelper.getUtcStringFromTimestamp(result))
                 .isEqualTo(unixBillenniumUtcStringAfterSubtract);
 
         timeZone = TimeZone.getTimeZone("GMT+1:00");
         result = MigrationHelper.subtractTimeZoneOffset(unixBillenniumTimestamp, timeZone);
-        assertThat(TimestampHelper.getUtcStringForTimestamp(result))
+        assertThat(TimestampHelper.getUtcStringFromTimestamp(result))
                 .isEqualTo(unixBillenniumUtcStringAfterSubtract);
 
         timeZone = TimeZone.getTimeZone("GMT+0:00");
         result = MigrationHelper.subtractTimeZoneOffset(unixBillenniumTimestamp, timeZone);
-        assertThat(TimestampHelper.getUtcStringForTimestamp(result))
+        assertThat(TimestampHelper.getUtcStringFromTimestamp(result))
                 .isEqualTo(unixBillenniumUtcString);
     }
 }
\ No newline at end of file
diff --git a/app/src/test/java/org/gnucash/android/test/unit/util/PreferencesHelperTest.java b/app/src/test/java/org/gnucash/android/test/unit/util/PreferencesHelperTest.java
index ceb7d0ae..13cc3d22 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/util/PreferencesHelperTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/util/PreferencesHelperTest.java
@@ -36,7 +36,7 @@
     @Test
     public void shouldGetLastExportTimeDefaultValue() {
         final Timestamp lastExportTime = PreferencesHelper.getLastExportTime();
-        assertThat(lastExportTime).isEqualTo(TimestampHelper.getTimestampForEpochZero());
+        assertThat(lastExportTime).isEqualTo(TimestampHelper.getTimestampFromEpochZero());
     }
 
     @Test
diff --git a/app/src/test/java/org/gnucash/android/test/unit/util/TimestampHelperTest.java b/app/src/test/java/org/gnucash/android/test/unit/util/TimestampHelperTest.java
index 2c9d1091..e887dc0a 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/util/TimestampHelperTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/util/TimestampHelperTest.java
@@ -33,7 +33,7 @@
 public class TimestampHelperTest {
 
     @Test
-    public void shouldGetUtcStringForTimestamp() {
+    public void shouldGetUtcStringFromTimestamp() {
         /**
          * The values used here are well known.
          * See https://en.wikipedia.org/wiki/Unix_time#Notable_events_in_Unix_time
@@ -43,47 +43,47 @@ public void shouldGetUtcStringForTimestamp() {
         final long unixBillennium = 1_000_000_000 * 1000L;
         final String unixBillenniumUtcString = "2001-09-09 01:46:40.000";
         final Timestamp unixBillenniumTimestamp = new Timestamp(unixBillennium);
-        assertThat(TimestampHelper.getUtcStringForTimestamp(unixBillenniumTimestamp))
+        assertThat(TimestampHelper.getUtcStringFromTimestamp(unixBillenniumTimestamp))
                 .isEqualTo(unixBillenniumUtcString);
 
         final long the1234567890thSecond = 1234567890 * 1000L;
         final String the1234567890thSecondUtcString = "2009-02-13 23:31:30.000";
         final Timestamp the1234567890thSecondTimestamp = new Timestamp(the1234567890thSecond);
-        assertThat(TimestampHelper.getUtcStringForTimestamp(the1234567890thSecondTimestamp))
+        assertThat(TimestampHelper.getUtcStringFromTimestamp(the1234567890thSecondTimestamp))
                 .isEqualTo(the1234567890thSecondUtcString);
     }
 
     @Test
-    public void shouldGetTimestampForEpochZero() {
-        Timestamp epochZero = TimestampHelper.getTimestampForEpochZero();
+    public void shouldGetTimestampFromEpochZero() {
+        Timestamp epochZero = TimestampHelper.getTimestampFromEpochZero();
         assertThat(epochZero.getTime()).isZero();
     }
 
     @Test
-    public void shouldGetTimestampForUtcString() {
+    public void shouldGetTimestampFromUtcString() {
         final long unixBillennium = 1_000_000_000 * 1000L;
         final String unixBillenniumUtcString = "2001-09-09 01:46:40";
         final String unixBillenniumWithMillisecondsUtcString = "2001-09-09 01:46:40.000";
         final Timestamp unixBillenniumTimestamp = new Timestamp(unixBillennium);
-        assertThat(TimestampHelper.getTimestampForUtcString(unixBillenniumUtcString))
+        assertThat(TimestampHelper.getTimestampFromUtcString(unixBillenniumUtcString))
                 .isEqualTo(unixBillenniumTimestamp);
-        assertThat(TimestampHelper.getTimestampForUtcString(unixBillenniumWithMillisecondsUtcString))
+        assertThat(TimestampHelper.getTimestampFromUtcString(unixBillenniumWithMillisecondsUtcString))
                 .isEqualTo(unixBillenniumTimestamp);
 
         final long the1234567890thSecond = 1234567890 * 1000L;
         final String the1234567890thSecondUtcString = "2009-02-13 23:31:30";
         final String the1234567890thSecondWithMillisecondsUtcString = "2009-02-13 23:31:30.000";
         final Timestamp the1234567890thSecondTimestamp = new Timestamp(the1234567890thSecond);
-        assertThat(TimestampHelper.getTimestampForUtcString(the1234567890thSecondUtcString))
+        assertThat(TimestampHelper.getTimestampFromUtcString(the1234567890thSecondUtcString))
                 .isEqualTo(the1234567890thSecondTimestamp);
-        assertThat(TimestampHelper.getTimestampForUtcString(the1234567890thSecondWithMillisecondsUtcString))
+        assertThat(TimestampHelper.getTimestampFromUtcString(the1234567890thSecondWithMillisecondsUtcString))
                 .isEqualTo(the1234567890thSecondTimestamp);
     }
 
     @Test
-    public void shouldGetTimestampForNow() {
+    public void shouldGetTimestampFromNow() {
         final long before = System.currentTimeMillis();
-        final long now = TimestampHelper.getTimestampForNow().getTime();
+        final long now = TimestampHelper.getTimestampFromNow().getTime();
         final long after = System.currentTimeMillis();
         assertThat(now).isGreaterThanOrEqualTo(before)
                        .isLessThanOrEqualTo(after);
