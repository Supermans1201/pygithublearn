From aa3a9b078434e0a5a22c7f51ccdda16f176e40ef Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 15 Dec 2012 01:22:50 +0100
Subject: [PATCH] Feature: Nested accounts (arbitrary nesting levels) Improved:
 Creating accounts no longer uses a dialog, it has its own screen

---
 GnucashMobile/res/layout/dialog_new_account.xml    |  43 ----
 GnucashMobile/res/layout/fragment_new_account.xml  |  84 +++++++
 ...action_actions.xml => default_save_actions.xml} |   0
 GnucashMobile/res/values-de/strings.xml            |   2 +-
 GnucashMobile/res/values-el/strings.xml            |   1 +
 GnucashMobile/res/values-es-rMX/strings.xml        |   1 +
 GnucashMobile/res/values-es/strings.xml            |   1 +
 GnucashMobile/res/values-fr/strings.xml            |   1 +
 GnucashMobile/res/values-it/strings.xml            |   4 +-
 GnucashMobile/res/values-nb/strings.xml            |   1 +
 GnucashMobile/res/values-nl/strings.xml            |   1 +
 GnucashMobile/res/values-pt-rBR/strings.xml        |   1 +
 GnucashMobile/res/values-ru/strings.xml            |   1 +
 GnucashMobile/res/values/strings.xml               |   3 +
 .../src/org/gnucash/android/data/Account.java      |  19 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  43 +++-
 .../org/gnucash/android/db/DatabaseAdapter.java    |   1 +
 .../src/org/gnucash/android/db/DatabaseHelper.java |  13 +-
 .../android/ui/accounts/AccountsActivity.java      |   2 +-
 .../android/ui/accounts/AccountsListFragment.java  |  73 +++---
 .../android/ui/accounts/AddAccountFragment.java    | 277 +++++++++++++++++++++
 .../ui/accounts/NewAccountDialogFragment.java      | 243 ------------------
 .../ui/transactions/NewTransactionFragment.java    |   2 +-
 23 files changed, 479 insertions(+), 338 deletions(-)
 delete mode 100644 GnucashMobile/res/layout/dialog_new_account.xml
 create mode 100644 GnucashMobile/res/layout/fragment_new_account.xml
 rename GnucashMobile/res/menu/{new_transaction_actions.xml => default_save_actions.xml} (100%)
 create mode 100644 GnucashMobile/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
 delete mode 100644 GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java

diff --git a/GnucashMobile/res/layout/dialog_new_account.xml b/GnucashMobile/res/layout/dialog_new_account.xml
deleted file mode 100644
index da6bfae3..00000000
--- a/GnucashMobile/res/layout/dialog_new_account.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
- Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- 
- Licensed under the Apache License, Version 2.0 (the "License");
- you may not use this file except in compliance with the License.
- You may obtain a copy of the License at
- 
-    http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical" >
-    
-    <EditText
-        android:id="@+id/edit_text_account_name"
-        android:layout_width="match_parent"
-        android:layout_height="50dp"
-        android:layout_margin="10dp"
-        android:ems="15" 
-        android:inputType="textCapWords"
-        android:singleLine="true"
-        android:ellipsize="start"
-        android:hint="@string/label_account_name">
-        <requestFocus />
-    </EditText>
-    
-    <Spinner android:id="@+id/input_currency_spinner"
-        android:layout_width="match_parent"
-		android:layout_height="wrap_content"
-		android:layout_margin="10dp"		/>
-       
-    <include layout="@layout/default_buttons"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/GnucashMobile/res/layout/fragment_new_account.xml b/GnucashMobile/res/layout/fragment_new_account.xml
new file mode 100644
index 00000000..8e1a611c
--- /dev/null
+++ b/GnucashMobile/res/layout/fragment_new_account.xml
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+    
+    <EditText
+        android:id="@+id/edit_text_account_name"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dp"
+        android:layout_marginLeft="10dp"
+        android:layout_marginRight="10dp"
+        android:layout_marginBottom="20dp"
+        android:ems="15" 
+        android:inputType="textCapWords"
+        android:minHeight="?android:attr/listPreferredItemHeight"
+        android:singleLine="true"
+        android:ellipsize="start"
+        android:hint="@string/label_account_name"
+        style="@style/ListItemText">
+        <requestFocus />
+    </EditText>
+    
+    <TextView
+	    android:text="@string/label_account_currency"
+	    android:layout_height="wrap_content"
+	    android:layout_width="wrap_content"
+	    android:layout_marginBottom="-8dip"
+	    android:layout_marginLeft="10dp"
+	    style="@style/TextAppearance.EditTransaction_LabelSmall" />
+    
+    <Spinner android:id="@+id/input_currency_spinner"
+        android:layout_width="match_parent"
+		android:layout_height="wrap_content"
+		android:layout_marginLeft="10dp"
+		android:layout_marginRight="10dp"
+		android:layout_marginBottom="20dp"
+		style="@style/ListItem"		/>
+
+    
+    <TextView
+	    android:text="@string/label_parent_account"
+	    android:layout_height="wrap_content"
+	    android:layout_width="wrap_content"
+	    android:layout_marginLeft="10dp"
+	    android:layout_marginBottom="-8dip"
+	    style="@style/TextAppearance.EditTransaction_LabelSmall" />
+    
+    <LinearLayout 
+        android:layout_width="match_parent"
+	    android:layout_height="wrap_content"
+	    style="@style/ListItem"
+	    android:orientation="horizontal" >
+	    
+	    <CheckBox android:id="@+id/checkbox"
+	        android:layout_width="wrap_content"
+	        android:layout_height="wrap_content"
+	        android:focusable="false"        />
+	    <Spinner
+	        android:id="@+id/input_parent_account"        
+	        android:layout_width="match_parent"
+	        android:layout_height="wrap_content"
+	        android:layout_marginLeft="10dp"
+			android:layout_marginRight="10dp"			
+	        android:minHeight="?android:attr/listPreferredItemHeight" />
+	</LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/GnucashMobile/res/menu/new_transaction_actions.xml b/GnucashMobile/res/menu/default_save_actions.xml
similarity index 100%
rename from GnucashMobile/res/menu/new_transaction_actions.xml
rename to GnucashMobile/res/menu/default_save_actions.xml
diff --git a/GnucashMobile/res/values-de/strings.xml b/GnucashMobile/res/values-de/strings.xml
index d5327bcc..8652e92f 100644
--- a/GnucashMobile/res/values-de/strings.xml
+++ b/GnucashMobile/res/values-de/strings.xml
@@ -297,5 +297,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>
-	
+	<string name="toast_no_account_name_entered">Bitte tragen Sie einen Kontoname ein</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/values-el/strings.xml b/GnucashMobile/res/values-el/strings.xml
index fc0bc627..f2665d7b 100644
--- a/GnucashMobile/res/values-el/strings.xml
+++ b/GnucashMobile/res/values-el/strings.xml
@@ -303,4 +303,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>		
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
diff --git a/GnucashMobile/res/values-es-rMX/strings.xml b/GnucashMobile/res/values-es-rMX/strings.xml
index 659b06d5..e9a62867 100644
--- a/GnucashMobile/res/values-es-rMX/strings.xml
+++ b/GnucashMobile/res/values-es-rMX/strings.xml
@@ -296,4 +296,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>	
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/values-es/strings.xml b/GnucashMobile/res/values-es/strings.xml
index c21d084a..33634566 100644
--- a/GnucashMobile/res/values-es/strings.xml
+++ b/GnucashMobile/res/values-es/strings.xml
@@ -297,4 +297,5 @@
 	<string name="title_always_delete_exported_transactions">Borrar siempre todas las transacciones exportadas</string>
 	<string name="title_default_export_email">Correo electr&#243;nico por defecto para exportar</string>
 	<string name="summary_default_export_email">La direcci&#243;n de correo electr&#243;nico a la que enviar las exportaciones por defecto. Puedes cambiarla en cada exportaci&#243;n.</string>
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
diff --git a/GnucashMobile/res/values-fr/strings.xml b/GnucashMobile/res/values-fr/strings.xml
index 9ed3740d..c5392cf1 100644
--- a/GnucashMobile/res/values-fr/strings.xml
+++ b/GnucashMobile/res/values-fr/strings.xml
@@ -297,4 +297,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/values-it/strings.xml b/GnucashMobile/res/values-it/strings.xml
index 946f99f5..d8e0b5fb 100644
--- a/GnucashMobile/res/values-it/strings.xml
+++ b/GnucashMobile/res/values-it/strings.xml
@@ -297,5 +297,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>	
-</resources>
-
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
+</resources>
diff --git a/GnucashMobile/res/values-nb/strings.xml b/GnucashMobile/res/values-nb/strings.xml
index 40a86f86..3705be2b 100644
--- a/GnucashMobile/res/values-nb/strings.xml
+++ b/GnucashMobile/res/values-nb/strings.xml
@@ -300,4 +300,5 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>	
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
diff --git a/GnucashMobile/res/values-nl/strings.xml b/GnucashMobile/res/values-nl/strings.xml
index 49f060a0..ed78dc2f 100644
--- a/GnucashMobile/res/values-nl/strings.xml
+++ b/GnucashMobile/res/values-nl/strings.xml
@@ -297,4 +297,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>	
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
diff --git a/GnucashMobile/res/values-pt-rBR/strings.xml b/GnucashMobile/res/values-pt-rBR/strings.xml
index ceeba39b..dffeaf7c 100644
--- a/GnucashMobile/res/values-pt-rBR/strings.xml
+++ b/GnucashMobile/res/values-pt-rBR/strings.xml
@@ -296,4 +296,5 @@
   <string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
   <string name="title_default_export_email">Default export email</string>
   <string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>  
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/values-ru/strings.xml b/GnucashMobile/res/values-ru/strings.xml
index 718e14a9..c2f37ca8 100644
--- a/GnucashMobile/res/values-ru/strings.xml
+++ b/GnucashMobile/res/values-ru/strings.xml
@@ -297,4 +297,5 @@
 	<string name="title_always_delete_exported_transactions">Always delete all exported transactions</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>	
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/res/values/strings.xml b/GnucashMobile/res/values/strings.xml
index 50ed1f6e..93ce2395 100644
--- a/GnucashMobile/res/values/strings.xml
+++ b/GnucashMobile/res/values/strings.xml
@@ -492,4 +492,7 @@
 	<string name="summary_use_double_entry">All transactions will involve two accounts: source and destination accounts</string>
 	<string name="title_use_double_entry">Activate Double Entry</string>
 	<string name="account_balance">Balance</string>
+	<string name="toast_no_account_name_entered">Please enter an account name</string>
+	<string name="label_account_currency">Currency</string>
+	<string name="label_parent_account">Parent account</string>
 </resources>
\ No newline at end of file
diff --git a/GnucashMobile/src/org/gnucash/android/data/Account.java b/GnucashMobile/src/org/gnucash/android/data/Account.java
index 6017f380..078ba0ca 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Account.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Account.java
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Currency;
 import java.util.List;
+import java.util.Locale;
 import java.util.UUID;
 
 import org.w3c.dom.Document;
@@ -49,7 +50,8 @@
 	 * This are the different types specified by the OFX format and 
 	 * they are currently not used except for exporting
 	 */
-	public enum AccountType {CASH, BANK, CREDIT_CARD, ASSET, LIABILITY, INCOME, EXPENSE, EQUITY, CURRENCY, STOCK, MUTUAL_FUND};
+	public enum AccountType {CASH, BANK, CREDIT_CARD, ASSET, LIABILITY, INCOME, EXPENSE, EQUITY, CURRENCY, STOCK, MUTUAL_FUND,
+		CHECKING, SAVINGS, MONEYMRKT, CREDITLINE};
 	
 	/**
 	 * Unique Identifier of the account
@@ -79,6 +81,11 @@
 	private List<Transaction> mTransactionsList = new ArrayList<Transaction>();
 
 	/**
+	 * Account UID of the parent account
+	 */
+	private String mParentAccountUID;
+
+	/**
 	 * An extra key for passing the currency code (according ISO 4217) in an intent
 	 */
 	public static final String EXTRA_CURRENCY_CODE 	= "org.gnucash.android.extra.currency_code";
@@ -135,7 +142,7 @@ protected String generateUID(){
 		}
 		
 		uuid = uuid.substring(uuid.lastIndexOf("-"));
-		String name = mName.toLowerCase().replace(" ", "-");
+		String name = mName.toLowerCase(Locale.US).replace(" ", "-");
 		if (name.length() > 9)
 			name = name.substring(0, 10);
 		uuid = name + uuid;		
@@ -271,6 +278,14 @@ public void setCurrency(Currency mCurrency) {
 		//transaction values to the corresponding value in the new currency
 	}
 
+	public void setParentUID(String parentUID){
+		mParentAccountUID = parentUID;
+	}
+	
+	public String getParentUID() {
+		return mParentAccountUID;
+		
+	}
 	/**
 	 * Converts this account's transactions into XML and adds them to the DOM document
 	 * @param doc XML DOM document for the OFX data
diff --git a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
index e5d0515f..a452f1fd 100644
--- a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -72,6 +72,7 @@ public long addAccount(Account account){
 		contentValues.put(DatabaseHelper.KEY_TYPE, account.getAccountType().name());
 		contentValues.put(DatabaseHelper.KEY_UID, account.getUID());
 		contentValues.put(DatabaseHelper.KEY_CURRENCY_CODE, account.getCurrency().getCurrencyCode());
+		contentValues.put(DatabaseHelper.KEY_PARENT_ACCOUNT_UID, account.getParentUID());
 		
 		long rowId = -1;
 		if ((rowId = getAccountID(account.getUID())) > 0){
@@ -150,6 +151,7 @@ public Account buildAccountInstance(Cursor c){
 		Account account = new Account(c.getString(DatabaseAdapter.COLUMN_NAME));
 		String uid = c.getString(DatabaseAdapter.COLUMN_UID);
 		account.setUID(uid);
+		account.setParentUID(c.getString(DatabaseAdapter.COLUMN_PARENT_ACCOUNT_UID));
 		account.setAccountType(AccountType.valueOf(c.getString(DatabaseAdapter.COLUMN_TYPE)));
 		//make sure the account currency is set before setting the transactions
 		//else the transactions end up with a different currency from the account
@@ -178,6 +180,26 @@ public long getAccountID(String uid){
 	}
 	
 	/**
+	 * Returns the  unique ID of the parent account of the account with unique ID <code>uid</code>
+	 * If the account has no parent, null is returned
+	 * @param uid Unique Identifier of account whose parent is to be returned
+	 * @return DB record UID of the parent account, null if the account has no parent
+	 */
+	public String getParentAccountUID(String uid){
+		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
+				new String[] {DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_PARENT_ACCOUNT_UID}, 
+				DatabaseHelper.KEY_UID + " = '" + uid + "'", null, null, null, null);
+		String result = null;
+		if (cursor != null && cursor.moveToFirst()){
+			Log.d(TAG, "Account already exists. Returning existing id");
+			result = cursor.getString(0); //0 because only one row was requested
+
+			cursor.close();
+		}
+		return result;
+	}	
+	
+	/**
 	 * Retrieves an account object from a database with database ID <code>rowId</code>
 	 * @param rowId Identifier of the account record to be retrieved
 	 * @return {@link Account} object corresponding to database record
@@ -192,7 +214,7 @@ public Account getAccount(long rowId){
 		}
 		return account;
 	}
-	
+		
 	/**
 	 * Returns the {@link Account} object populated with data from the database
 	 * for the record with UID <code>uid</code>
@@ -204,6 +226,24 @@ public Account getAccount(String uid){
 	}	
 	
 	/**
+	 * Returns the unique identifier for the account with record ID <code>id</code>
+	 * @param id Database record id of account
+	 * @return Unique identifier string of the account
+	 */
+	public String getAccountUID(long id){
+		String uid = null;
+		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
+				new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_UID}, 
+				DatabaseHelper.KEY_ROW_ID + "=" + id, 
+				null, null, null, null);
+		if (c != null && c.moveToFirst()){
+			uid = c.getString(1);
+			c.close();
+		}
+		return uid;
+	}
+	
+	/**
 	 * Returns the name of the account with id <code>accountID</code>
 	 * @param accountID Database ID of the account record
 	 * @return Name of the account 
@@ -295,6 +335,7 @@ public Money getAllAccountsBalance(){
 	 * @return Total balance of the accounts while using double entry
 	 */
 	public Money getDoubleEntryAccountsBalance(){
+		//FIXME: This does not take account currency into consideration
 		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
 				new String[]{DatabaseHelper.KEY_ROW_ID}, 
 				null, null, null, null, null);
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
index 341a7007..ec2d0f74 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -52,6 +52,7 @@
 	
 	//columns specific to accounts
 	public static final int COLUMN_CURRENCY_CODE = 4;
+	public static final int COLUMN_PARENT_ACCOUNT_UID = 5;
 	
 	/**
 	 * {@link DatabaseHelper} for creating and opening the database
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
index ee2c5780..6e6138d6 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
@@ -96,6 +96,11 @@
 	public static final String KEY_ACCOUNT_UID 	= "account_uid";
 	
 	/**
+	 * UID of the parent account
+	 */
+	public static final String KEY_PARENT_ACCOUNT_UID = "parent_account_uid";
+	
+	/**
 	 * Account which the origin account this transaction in double entry mode
 	 */
 	public static final String KEY_DOUBLE_ENTRY_ACCOUNT_UID 	= "double_account_uid";
@@ -128,8 +133,9 @@
 			+ KEY_ROW_ID + " integer primary key autoincrement, "
 			+ KEY_UID 	+ " varchar(255) not null, "
 			+ KEY_NAME 	+ " varchar(255) not null, "
-			+ KEY_TYPE 	+ " varchar(255), "
+			+ KEY_TYPE 	+ " varchar(255), "			
 			+ KEY_CURRENCY_CODE + " varchar(255) not null, "
+			+ KEY_PARENT_ACCOUNT_UID + " varchar(255), "
 			+ "UNIQUE (" + KEY_UID + ")"	
 			+ ");";
 	
@@ -180,7 +186,12 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 				Log.i(TAG, "Adding column for splitting transactions");
 				String addColumnSql = "ALTER TABLE " + TRANSACTIONS_TABLE_NAME + 
 									" ADD COLUMN " + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " varchar(255)";
+				
+				String addParentAccountSql = "ALTER TABLE " + ACCOUNTS_TABLE_NAME + 
+						" ADD COLUMN " + KEY_PARENT_ACCOUNT_UID + " varchar(255)";
+	
 				db.execSQL(addColumnSql);
+				db.execSQL(addParentAccountSql);
 			}
 			
 		} else {
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index 992319ae..37377c5c 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -159,7 +159,7 @@ public void onNewAccountClick(View v) {
 		AccountsListFragment accountFragment = (AccountsListFragment) getSupportFragmentManager()
 				.findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
 		if (accountFragment != null)
-			accountFragment.showAddAccountDialog(0);
+			accountFragment.showAddAccountFragment(0);
 	}
 
 	/**
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index d3158261..95236efa 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -76,11 +76,6 @@
  */
 public class AccountsListFragment extends SherlockListFragment implements
 		LoaderCallbacks<Cursor>, OnItemLongClickListener {
-
-	/**
-	 * Request code passed when displaying the "Add Account" dialog. 
-	 */
-	private static final int DIALOG_ADD_ACCOUNT = 0x10;
 	
 	/**
 	 * Logging tag
@@ -95,7 +90,7 @@
 	/**
 	 * Dialog fragment for adding new accounts
 	 */
-	NewAccountDialogFragment mAddAccountFragment;
+	AddAccountFragment mAddAccountFragment;
 	
 	/**
 	 * Database adapter for loading Account records from the database
@@ -154,8 +149,9 @@ public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
 		@Override
 		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
 			switch (item.getItemId()) {
-			case R.id.context_menu_edit_accounts:
-				showAddAccountDialog(mSelectedItemId);
+			case R.id.context_menu_edit_accounts:				
+				showAddAccountFragment(mSelectedItemId);
+				mode.finish();
 				return true;
 
 			case R.id.context_menu_delete:
@@ -285,18 +281,19 @@ public void onListItemClick(ListView l, View v, int position, long id) {
 	
 	@Override
 	public boolean onItemLongClick(AdapterView<?> parent, View view, int position,
-				long id) {
-			if (mActionMode != null) {
-	            return false;
-	        }		
-			mInEditMode = true;
-			mSelectedItemId = id;
-	        // Start the CAB using the ActionMode.Callback defined above
-	        mActionMode = getSherlockActivity().startActionMode(mActionModeCallbacks);
-	             
-	        selectItem(position);
-	        return true;
+			long id) {
+		if (mActionMode != null) {
+			return false;
 		}
+		mInEditMode = true;
+		mSelectedItemId = id;
+		// Start the CAB using the ActionMode.Callback defined above
+		mActionMode = getSherlockActivity().startActionMode(
+				mActionModeCallbacks);
+
+		selectItem(position);
+		return true;
+	}
 
 	/**
 	 * Delete the account with record ID <code>rowId</code>
@@ -392,7 +389,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
 
 		case R.id.menu_add_account:
-			showAddAccountDialog(0);
+			showAddAccountFragment(0);
 			return true;
 
 		case R.id.menu_export:
@@ -441,34 +438,24 @@ public void onDestroy() {
 		mAccountsDbAdapter.close();
 		mAccountsCursorAdapter.close();
 	}	
-	
-	/**
-	 * Show dialog for creating a new {@link Account}
-	 */
-	public void showAddAccountDialog(long accountId) {
-		FragmentManager manager = getSherlockActivity().getSupportFragmentManager();
-		FragmentTransaction ft = manager.beginTransaction();
-		Fragment prev = manager.findFragmentByTag(AccountsActivity.FRAGMENT_NEW_ACCOUNT);
-		
-		if (prev != null) {
-			ft.remove(prev);
-		}
-
-		ft.addToBackStack(null);
 
-		mAddAccountFragment = NewAccountDialogFragment.newInstance(mAccountsDbAdapter);
+	public void showAddAccountFragment(long accountId) {
+		FragmentManager fragmentManager = getSherlockActivity().getSupportFragmentManager();
+		FragmentTransaction fragmentTransaction = fragmentManager
+				.beginTransaction();
+						
 		Bundle args = new Bundle();
 		args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
-		mAddAccountFragment.setArguments(args);
+		AddAccountFragment newAccountFragment = AddAccountFragment.newInstance(mAccountsDbAdapter);	
+		newAccountFragment.setArguments(args);
 		
-		mAddAccountFragment.setTargetFragment(this, DIALOG_ADD_ACCOUNT);
-		if (mActionMode != null){
-			//if we were editing, stop before going somewhere else
-			mActionMode.finish(); 
-		}
-		mAddAccountFragment.show(ft, AccountsActivity.FRAGMENT_NEW_ACCOUNT);
+		fragmentTransaction.replace(R.id.fragment_container,
+				newAccountFragment, AccountsActivity.FRAGMENT_NEW_ACCOUNT);
+		
+		fragmentTransaction.addToBackStack(null);
+		fragmentTransaction.commit();
 	}
-
+	
 	/**
 	 * Displays the dialog for exporting transactions in OFX
 	 */
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AddAccountFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
new file mode 100644
index 00000000..8dc0908e
--- /dev/null
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
@@ -0,0 +1,277 @@
+/*
+ * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.accounts;
+
+import java.util.Arrays;
+import java.util.Currency;
+import java.util.List;
+
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Money;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.ui.transactions.TransactionsListFragment;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.os.Bundle;
+import android.support.v4.widget.SimpleCursorAdapter;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.ArrayAdapter;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.Toast;
+
+import com.actionbarsherlock.app.SherlockFragment;
+import com.actionbarsherlock.view.Menu;
+import com.actionbarsherlock.view.MenuInflater;
+import com.actionbarsherlock.view.MenuItem;
+
+/**
+ * Fragment used for creating and editing accounts
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class AddAccountFragment extends SherlockFragment {
+
+	/**
+	 * EditText for the name of the account to be created/edited
+	 */
+	private EditText mNameEditText;
+	
+	/**
+	 * Spinner for selecting the currency of the account
+	 * Currencies listed are those specified by ISO 4217
+	 */
+	private Spinner mCurrencySpinner;
+	
+	/**
+	 * Accounts database adapter
+	 */
+	private AccountsDbAdapter mAccountsDbAdapter;
+	
+	/**
+	 * List of all currency codes (ISO 4217) supported by the app
+	 */
+	private List<String> mCurrencyCodes;
+	
+	/**
+	 * Record ID of the account which was selected
+	 * This is used if we are editing an account instead of creating one
+	 */
+	private long mSelectedAccountId = 0;
+	
+	/**
+	 * Reference to account object which will be created at end of dialog
+	 */
+	private Account mAccount = null;
+
+	private Cursor mCursor;
+	
+	private SimpleCursorAdapter mCursorAdapter;
+	
+	private Spinner mParentAccountSpinner;
+
+	private CheckBox mParentCheckBox;
+	
+	/**
+	 * Default constructor
+	 * Required, else the app crashes on screen rotation
+	 */
+	public AddAccountFragment() {
+		//nothing to see here, move along
+	}
+	
+	/**
+	 * Construct a new instance of the dialog
+	 * @param dbAdapter {@link AccountsDbAdapter} for saving the account
+	 * @return New instance of the dialog fragment
+	 */
+	static public AddAccountFragment newInstance(AccountsDbAdapter dbAdapter){
+		AddAccountFragment f = new AddAccountFragment();
+		f.mAccountsDbAdapter = dbAdapter;
+		return f;
+	}
+	
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setHasOptionsMenu(true);		
+	}
+	
+	/**
+	 * Inflates the dialog view and retrieves references to the dialog elements
+	 */
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		View view = inflater.inflate(R.layout.fragment_new_account, container, false);
+		getSherlockActivity().getSupportActionBar().setTitle(R.string.title_add_account);
+		mCurrencySpinner = (Spinner) view.findViewById(R.id.input_currency_spinner);
+		mNameEditText = (EditText) view.findViewById(R.id.edit_text_account_name);
+		mNameEditText.requestFocus();
+        
+		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
+		mParentAccountSpinner.setEnabled(false);
+		
+		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox);
+		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
+			
+			@Override
+			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+				mParentAccountSpinner.setEnabled(isChecked);
+			}
+		});
+
+		mSelectedAccountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
+		if (mSelectedAccountId > 0) {
+        	mAccount = mAccountsDbAdapter.getAccount(mSelectedAccountId);
+        	mNameEditText.setText(mAccount.getName());
+        	getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
+        }
+		return view;
+	}
+	
+	/**
+	 * Initializes the values of the views in the dialog
+	 */
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {
+		super.onActivityCreated(savedInstanceState);
+		
+		ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, getResources().getStringArray(R.array.currency_names));
+		
+		arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+		mCurrencySpinner.setAdapter(arrayAdapter);
+		
+		String currencyCode = Money.DEFAULT_CURRENCY_CODE;
+		
+		if (mSelectedAccountId != 0){
+			//if we are editing an account instead of creating one
+			currencyCode = mAccount.getCurrency().getCurrencyCode();
+		}
+		mCurrencyCodes = Arrays.asList(getResources().getStringArray(R.array.currency_codes));
+		
+		if (mCurrencyCodes.contains(currencyCode)){
+			mCurrencySpinner.setSelection(mCurrencyCodes.indexOf(currencyCode));
+		}	
+		
+		loadParentAccountList();
+	}
+	
+	@Override
+	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {		
+		super.onCreateOptionsMenu(menu, inflater);
+		inflater.inflate(R.menu.default_save_actions, menu);
+	}
+	
+	@Override
+	public boolean onOptionsItemSelected(MenuItem item) {
+		switch (item.getItemId()) {
+		case R.id.menu_save:
+			saveAccount();
+			return true;
+
+		case R.id.menu_cancel:
+			finish();
+			return true;
+		}
+		
+		return false;
+	}
+	
+	private void loadParentAccountList(){
+		mCursor = mAccountsDbAdapter.fetchAllAccounts();
+		
+		String[] from = new String[] {DatabaseHelper.KEY_NAME};
+		int[] to = new int[] {android.R.id.text1};
+		mCursorAdapter = new SimpleCursorAdapter(
+				getActivity(), 
+				android.R.layout.simple_spinner_item, 
+				mCursor, from, to, 0);
+		mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
+		mParentAccountSpinner.setAdapter(mCursorAdapter);
+	}
+	
+	/**
+	 * Finishes the fragment appropriately.
+	 * Depends on how the fragment was loaded, it might have a backstack or not
+	 */
+	private void finish() {
+		InputMethodManager imm = (InputMethodManager) getSherlockActivity().getSystemService(
+			      Context.INPUT_METHOD_SERVICE);
+			imm.hideSoftInputFromWindow(mNameEditText.getWindowToken(), 0);
+			
+		getSherlockActivity().getSupportFragmentManager().popBackStack();			
+	}
+	
+	@Override
+	public void onDestroy() {
+		super.onDestroyView();
+		if (mCursor != null)
+			mCursor.close();
+		//do not close the database adapter. We got it from the activity, 
+		//the activity will take care of it.
+	}
+	
+	private void saveAccount() {
+		if (mAccount == null){
+			String name = getEnteredName();
+			if (name == null || name.length() == 0){
+				Toast.makeText(getSherlockActivity(), 
+						R.string.toast_no_account_name_entered, 
+						Toast.LENGTH_LONG).show();
+				return;				
+			}
+			mAccount = new Account(getEnteredName());
+		}
+		else
+			mAccount.setName(getEnteredName());
+			
+		String curCode = mCurrencyCodes.get(mCurrencySpinner
+				.getSelectedItemPosition());
+		mAccount.setCurrency(Currency.getInstance(curCode));
+
+		if (mAccountsDbAdapter == null)
+			mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
+		mAccountsDbAdapter.addAccount(mAccount);
+
+		if (mParentCheckBox.isChecked()){
+			long id = mParentAccountSpinner.getSelectedItemId();
+			mAccount.setParentUID(mAccountsDbAdapter.getAccountUID(id));
+		}
+		WidgetConfigurationActivity.updateAllWidgets(getActivity()
+				.getApplicationContext());
+		finish();
+	}
+	
+	/**
+	 * Retrieves the name of the account which has been entered in the EditText
+	 * @return
+	 */
+	public String getEnteredName(){
+		return mNameEditText.getText().toString().trim();
+	}
+
+}
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
deleted file mode 100644
index da1ebd57..00000000
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
+++ /dev/null
@@ -1,243 +0,0 @@
-/*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.ui.accounts;
-
-import java.util.Arrays;
-import java.util.Currency;
-import java.util.List;
-
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Money;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.ui.transactions.TransactionsListFragment;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-
-import android.os.Bundle;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.WindowManager.LayoutParams;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.Spinner;
-
-import com.actionbarsherlock.app.SherlockDialogFragment;
-
-/**
- * Dialog fragment used for creating and editing accounts
- * @author Ngewi Fet <ngewif@gmail.com>
- */
-public class NewAccountDialogFragment extends SherlockDialogFragment {
-	/**
-	 * Really? You want documentation for this too?
-	 */
-	private Button mSaveButton;
-	
-	/**
-	 * Come on! It's a button, what else should I say?
-	 */
-	private Button mCancelButton;
-	
-	/**
-	 * EditText for the name of the account to be created/edited
-	 */
-	private EditText mNameEditText;
-	
-	/**
-	 * Spinner for selecting the currency of the account
-	 * Currencies listed are those specified by ISO 4217
-	 */
-	private Spinner mCurrencySpinner;
-	
-	/**
-	 * Accounts database adapter
-	 */
-	private AccountsDbAdapter mDbAdapter;
-	
-	/**
-	 * List of all currency codes (ISO 4217) supported by the app
-	 */
-	private List<String> mCurrencyCodes;
-	
-	/**
-	 * Record ID of the account which was selected
-	 * This is used if we are editing an account instead of creating one
-	 */
-	private long mSelectedAccountId = 0;
-	
-	/**
-	 * Reference to account object which will be created at end of dialog
-	 */
-	private Account mAccount = null;
-	
-	/**
-	 * Default constructor
-	 * Required, else the app crashes on screen rotation
-	 */
-	public NewAccountDialogFragment() {
-		//nothing to see here, move along
-	}
-	
-	/**
-	 * Construct a new instance of the dialog
-	 * @param dbAdapter {@link AccountsDbAdapter} for saving the account
-	 * @return New instance of the dialog fragment
-	 */
-	static public NewAccountDialogFragment newInstance(AccountsDbAdapter dbAdapter){
-		NewAccountDialogFragment f = new NewAccountDialogFragment();
-		f.mDbAdapter = dbAdapter;
-		return f;
-	}
-	
-	@Override
-	public void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-		mSelectedAccountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);				
-	}
-	
-	/**
-	 * Inflates the dialog view and retrieves references to the dialog elements
-	 */
-	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
-			Bundle savedInstanceState) {
-		View v = inflater.inflate(R.layout.dialog_new_account, container, false);
-		getDialog().setTitle(R.string.title_add_account);	
-		setStyle(STYLE_NORMAL, R.style.Sherlock___Theme_Dialog);
-		mSaveButton = (Button) v.findViewById(R.id.btn_save);
-		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
-		mCurrencySpinner = (Spinner) v.findViewById(R.id.input_currency_spinner);
-		mNameEditText = (EditText) v.findViewById(R.id.edit_text_account_name);
-		mNameEditText.requestFocus();
-        getDialog().getWindow().setSoftInputMode(
-                LayoutParams.SOFT_INPUT_STATE_VISIBLE);
-        
-        mNameEditText.addTextChangedListener(new NameFieldWatcher());
-		       
-        if (mSelectedAccountId != 0) {
-        	mAccount = mDbAdapter.getAccount(mSelectedAccountId);
-        	mNameEditText.setText(mAccount.getName());  
-        	getDialog().setTitle(R.string.title_edit_account);	
-        }
-		
-		mSaveButton.setOnClickListener(new View.OnClickListener() {
-			
-
-			@Override
-			public void onClick(View v) {
-				if (mAccount == null)
-					mAccount = new Account(getEnteredName());
-				else
-					mAccount.setName(getEnteredName());
-								
-				String curCode = mCurrencyCodes.get(mCurrencySpinner.getSelectedItemPosition());
-				mAccount.setCurrency(Currency.getInstance(curCode));
-				
-				if (mDbAdapter == null)
-					mDbAdapter = new AccountsDbAdapter(getActivity());
-				mDbAdapter.addAccount(mAccount);
-				
-				((AccountsListFragment)getTargetFragment()).refreshList();
-				
-				WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
-				dismiss();				
-			}
-		});
-		
-		mCancelButton.setOnClickListener(new View.OnClickListener() {
-			
-			@Override
-			public void onClick(View v) {
-				NewAccountDialogFragment.this.dismiss();			
-			}
-		});
-		return v;
-	}
-	
-	/**
-	 * Initializes the values of the views in the dialog
-	 */
-	@Override
-	public void onActivityCreated(Bundle savedInstanceState) {
-		super.onActivityCreated(savedInstanceState);
-		
-		ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, getResources().getStringArray(R.array.currency_names));
-		
-		arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-		mCurrencySpinner.setAdapter(arrayAdapter);
-		
-		String currencyCode = Money.DEFAULT_CURRENCY_CODE;
-		
-		if (mSelectedAccountId != 0){
-			//if we are editing an account instead of creating one
-			currencyCode = mAccount.getCurrency().getCurrencyCode();
-		}
-		mCurrencyCodes = Arrays.asList(getResources().getStringArray(R.array.currency_codes));
-		
-		if (mCurrencyCodes.contains(currencyCode)){
-			mCurrencySpinner.setSelection(mCurrencyCodes.indexOf(currencyCode));
-		}		
-	}
-	
-	/**
-	 * Retrieves the name of the account which has been entered in the EditText
-	 * @return
-	 */
-	public String getEnteredName(){
-		return mNameEditText.getText().toString();
-	}
-	
-	/**
-	 * Validation text field watcher which enables the save button only when an account
-	 * name has been provided
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 *
-	 */
-	private class NameFieldWatcher implements TextWatcher {
-
-		/**
-		 * Enable text if an account name has been entered, disable it otherwise
-		 */
-		@Override
-		public void afterTextChanged(Editable s) {
-			if (s.length() > 0)
-				NewAccountDialogFragment.this.mSaveButton.setEnabled(true);
-			else
-				NewAccountDialogFragment.this.mSaveButton.setEnabled(false);
-		}
-
-		@Override
-		public void beforeTextChanged(CharSequence s, int start, int count,
-				int after) {
-			//nothing to see here, move along
-			
-		}
-
-		@Override
-		public void onTextChanged(CharSequence s, int start, int before,
-				int count) {
-			// nothing to see here, move along
-			
-		}
-		
-	}
-
-}
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index 29e2b121..17aad77e 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -474,7 +474,7 @@ public void onDestroyView() {
 	
 	@Override
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-		inflater.inflate(R.menu.new_transaction_actions, menu);
+		inflater.inflate(R.menu.default_save_actions, menu);
 		mSaveMenuItem = menu.findItem(R.id.menu_save);
 		//only initially enable if we are editing a transaction
 		mSaveMenuItem.setEnabled(mTransactionId > 0);
