From 496be34a82b87afd0fee3f0d42b7f8651c052013 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Mon, 5 Oct 2015 19:18:55 +0300
Subject: [PATCH] Avoid line/bar chart redundant repainting on grouping and
 changing time range

---
 .../android/ui/report/BarChartFragment.java        | 18 +++++++++++-------
 .../android/ui/report/LineChartFragment.java       | 22 ++++++++++++----------
 2 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
index 3fa804ed..ac956990 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
@@ -386,18 +386,22 @@ private void setCustomLegend() {
 
     @Override
     public void onTimeRangeUpdated(long start, long end) {
-        mReportStartTime = start;
-        mReportEndTime = end;
+        if (mReportStartTime != start || mReportEndTime != end) {
+            mReportStartTime = start;
+            mReportEndTime = end;
 
-        mChart.setData(getData());
-        displayChart();
+            mChart.setData(getData());
+            displayChart();
+        }
     }
 
     @Override
     public void onGroupingUpdated(GroupInterval groupInterval) {
-        mGroupInterval = groupInterval;
-        mChart.setData(getData());
-        displayChart();
+        if (mGroupInterval != groupInterval) {
+            mGroupInterval = groupInterval;
+            mChart.setData(getData());
+            displayChart();
+        }
     }
 
     @Override
diff --git a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
index 84527cfd..5c9e12aa 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/LineChartFragment.java
@@ -173,6 +173,7 @@ public void onResume() {
      * @return a {@code LineData} instance that represents a user data
      */
     private LineData getData(List<AccountType> accountTypeList) {
+        Log.w(TAG, "getData");
         calculateEarliestAndLatestTimestamps(accountTypeList);
         // LocalDateTime?
         LocalDate startDate;
@@ -378,20 +379,21 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
 
     @Override
     public void onTimeRangeUpdated(long start, long end) {
-        mReportStartTime = start;
-        mReportEndTime = end;
-
-        mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
-        mChart.invalidate();
+        if (mReportStartTime != start || mReportEndTime != end) {
+            mReportStartTime = start;
+            mReportEndTime = end;
+            mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
+            mChart.invalidate();
+        }
     }
 
     @Override
     public void onGroupingUpdated(GroupInterval groupInterval) {
-        mGroupInterval = groupInterval;
-        Log.d(TAG, "GroupInterval " + groupInterval);
-
-        mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
-        mChart.invalidate();
+        if (mGroupInterval != groupInterval) {
+            mGroupInterval = groupInterval;
+            mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
+            mChart.invalidate();
+        }
     }
 
     @Override
