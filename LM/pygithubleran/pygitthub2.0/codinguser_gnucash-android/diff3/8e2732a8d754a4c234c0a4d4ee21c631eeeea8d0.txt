From 8e2732a8d754a4c234c0a4d4ee21c631eeeea8d0 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sun, 4 Nov 2012 17:20:42 +0100
Subject: [PATCH] Fixed: ActionBar navigation list not properly set after
 saving a transaction in a different account Removed extra account selector in
 "New transaction" page. Transaction account can now be set/changed through
 ActionBar navigation list Fixed broken tests

---
 .../res/layout/fragment_new_transaction.xml        |  19 +---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |   4 +-
 .../ui/transactions/NewTransactionFragment.java    | 111 ++++-----------------
 .../ui/transactions/TransactionsActivity.java      |  33 +++---
 .../ui/transactions/TransactionsListFragment.java  |   5 +-
 .../android/test/ui/AccountsActivityTest.java      |   2 +-
 .../android/test/ui/TransactionsActivityTest.java  |   7 --
 7 files changed, 47 insertions(+), 134 deletions(-)

diff --git a/GnucashMobile/res/layout/fragment_new_transaction.xml b/GnucashMobile/res/layout/fragment_new_transaction.xml
index ee739db2..85a23344 100644
--- a/GnucashMobile/res/layout/fragment_new_transaction.xml
+++ b/GnucashMobile/res/layout/fragment_new_transaction.xml
@@ -134,23 +134,6 @@
 			        android:gravity="top"
 			        />
 	   </LinearLayout>
-	    <LinearLayout android:layout_width="match_parent"
-	        android:layout_height="wrap_content"
-	        android:orientation="vertical" >
-	        
-			<TextView
-			    android:id="@+id/label_account"
-			    android:text="@string/label_account"
-			    android:layout_height="wrap_content"
-			    android:layout_width="wrap_content"
-			    android:layout_marginBottom="-8dip"
-			    style="@style/TextAppearance.EditTransaction_LabelSmall" />
-		    <Spinner
-		        android:id="@+id/input_accounts_spinner"        
-		        android:layout_width="match_parent"
-		        android:layout_height="wrap_content" 
-		        android:minHeight="?android:attr/listPreferredItemHeight" />
-	    </LinearLayout>
-	
+
 	</LinearLayout>
 </ScrollView>
\ No newline at end of file
diff --git a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
index 8a9233a6..b3a83394 100644
--- a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -73,7 +73,7 @@ public long addAccount(Account account){
 		contentValues.put(DatabaseHelper.KEY_CURRENCY_CODE, account.getCurrency().getCurrencyCode());
 		
 		long rowId = -1;
-		if ((rowId = fetchAccountWithUID(account.getUID())) > 0){
+		if ((rowId = getAccountID(account.getUID())) > 0){
 			//if account already exists, then just update
 			Log.d(TAG, "Updating existing account");
 			mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME, contentValues, DatabaseHelper.KEY_ROW_ID + " = " + rowId, null);
@@ -162,7 +162,7 @@ public Account buildAccountInstance(Cursor c){
 	 * @param uid Unique Identifier of account to be retrieved
 	 * @return Database row ID of account with UID <code>uid</code>
 	 */
-	public long fetchAccountWithUID(String uid){
+	public long getAccountID(String uid){
 		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
 				new String[] {DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_UID}, 
 				DatabaseHelper.KEY_UID + " = '" + uid + "'", null, null, null, null);
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index af6154ed..e7c35109 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -33,7 +33,6 @@
 import org.gnucash.android.data.Transaction;
 import org.gnucash.android.data.Transaction.TransactionType;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.ui.DatePickerDialogFragment;
 import org.gnucash.android.ui.TimePickerDialogFragment;
@@ -44,12 +43,10 @@
 import android.app.TimePickerDialog;
 import android.app.TimePickerDialog.OnTimeSetListener;
 import android.content.Context;
-import android.database.Cursor;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.FragmentTransaction;
-import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.Log;
@@ -57,13 +54,10 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemSelectedListener;
 import android.widget.CompoundButton;
 import android.widget.CompoundButton.OnCheckedChangeListener;
 import android.widget.DatePicker;
 import android.widget.EditText;
-import android.widget.Spinner;
 import android.widget.TextView;
 import android.widget.TimePicker;
 import android.widget.ToggleButton;
@@ -157,34 +151,13 @@
 	 * {@link Calendar} object holding the set time
 	 */
 	private Calendar mTime;
-	
-	/**
-	 * Spinner for selecting the account for the transaction
-	 */
-	private Spinner mAccountsSpinner;
-	
-	/**
-	 * Accounts database adapter. 
-	 * Used for getting list of transactions to populate the {@link #mAccountsSpinner}
-	 */
-	private AccountsDbAdapter mAccountsDbAdapter;
-	
-	/**
-	 * Cursor adapter for {@link #mAccountsSpinner}
-	 */
-	private SimpleCursorAdapter mCursorAdapter; 
-	
+
 	/**
 	 * ActionBar Menu item for saving the transaction
 	 * A transaction needs atleast a name and amount, only then is the save menu item enabled
 	 */
 	private MenuItem mSaveMenuItem;
-	
-	/**
-	 * Cursor for accounts list spinner
-	 */
-	private Cursor mCursor;
-	
+
 	/**
 	 * Create the view and retrieve references to the UI elements
 	 */
@@ -199,7 +172,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		mTimeTextView = (TextView) v.findViewById(R.id.input_time);
 		mAmountEditText = (EditText) v.findViewById(R.id.input_transaction_amount);		
 		mCurrencyTextView = (TextView) v.findViewById(R.id.currency_symbol);
-		mAccountsSpinner = (Spinner) v.findViewById(R.id.input_accounts_spinner);
 		mTransactionTypeButton = (ToggleButton) v.findViewById(R.id.input_transaction_type);
 		
 		return v;
@@ -214,34 +186,6 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		actionBar.setDisplayHomeAsUpEnabled(true);
 		actionBar.setDisplayShowTitleEnabled(false);
 		
-		String[] from = new String[] {DatabaseHelper.KEY_NAME};
-		int[] to = new int[] {android.R.id.text1};
-		mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
-		mCursor = mAccountsDbAdapter.fetchAllAccounts();
-		
-		mCursorAdapter = new SimpleCursorAdapter(getActivity(), 
-				android.R.layout.simple_spinner_item, 
-				mCursor,
-				from,
-				to, 
-				0);
-		mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-		mAccountsSpinner.setAdapter(mCursorAdapter);
-		mAccountsSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {
-
-			@Override
-			public void onItemSelected(AdapterView<?> parent, View view,
-					int position, long id) {
-				String currencyCode = mAccountsDbAdapter.getCurrency(id);
-				Currency currency = Currency.getInstance(currencyCode);
-				mCurrencyTextView.setText(currency.getSymbol(Locale.getDefault()));
-			}
-
-			@Override
-			public void onNothingSelected(AdapterView<?> parent) {
-				// nothing to see here, move along				
-			}
-		});
 		mTransactionId = getArguments().getLong(SELECTED_TRANSACTION_ID);
 		mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
 		mTransaction = mTransactionsDbAdapter.getTransaction(mTransactionId);
@@ -271,21 +215,11 @@ private void initializeViewsWithTransaction(){
 		cal.setTimeInMillis(mTransaction.getTimeMillis());
 		mDate = mTime = cal;
 				
-		final long accountId = mAccountsDbAdapter.fetchAccountWithUID(mTransaction.getAccountUID());
-		final int count = mCursorAdapter.getCount();
-		for (int pos = 0; pos < count; pos++) {
-			if (mCursorAdapter.getItemId(pos) == accountId)
-				mAccountsSpinner.setSelection(pos);
-		}
 		
+		final long accountId = mTransactionsDbAdapter.getAccountID(mTransaction.getAccountUID());
 		String code = mTransactionsDbAdapter.getCurrencyCode(accountId);
 		Currency accountCurrency = Currency.getInstance(code);
 		mCurrencyTextView.setText(accountCurrency.getSymbol());
-		
-		ActionBar actionBar = getSherlockActivity().getSupportActionBar();
-		actionBar.setHomeButtonEnabled(true);
-		actionBar.setDisplayHomeAsUpEnabled(true);
-		actionBar.setTitle(R.string.title_edit_transaction);
 	}
 	
 	/**
@@ -303,26 +237,14 @@ private void initalizeViews() {
 		}
 				
 		final long accountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
-		refreshSelectedAccount(accountId);
-		
 		String code = Money.DEFAULT_CURRENCY_CODE;
 		if (accountId != 0)
 			code = mTransactionsDbAdapter.getCurrencyCode(accountId);
 		
-			
 		Currency accountCurrency = Currency.getInstance(code);
 		mCurrencyTextView.setText(accountCurrency.getSymbol(Locale.getDefault()));
 	}
 	
-	public void refreshSelectedAccount(long accountId){
-		for (int pos = 0; pos < mCursorAdapter.getCount(); pos++) {
-			if (mCursorAdapter.getItemId(pos) == accountId){
-				mAccountsSpinner.setSelection(pos);				
-				break;
-			}
-		}
-	}
-	
 	/**
 	 * Sets click listeners for the dialog buttons
 	 */
@@ -393,6 +315,14 @@ public void onClick(View v) {
 		});
 	}	
 	
+	public void onAccountChanged(long newAccountId){
+		AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
+		String currencyCode = accountsDbAdapter.getCurrency(newAccountId);
+		Currency currency = Currency.getInstance(currencyCode);
+		mCurrencyTextView.setText(currency.getSymbol(Locale.getDefault()));
+		accountsDbAdapter.close();
+	}
+	
 	/**
 	 * Collects information from the fragment views and uses it to create 
 	 * and save a transaction
@@ -409,7 +339,7 @@ private void saveNewTransaction() {
 		String description = mDescriptionEditText.getText().toString();
 		BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
 		
-		long accountID 	= mAccountsSpinner.getSelectedItemId();
+		long accountID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountID(); //mAccountsSpinner.getSelectedItemId();
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getCurrencyCode(accountID));
 		Money amount 	= new Money(amountBigd, currency);
 		TransactionType type = mTransactionTypeButton.isChecked() ? TransactionType.DEBIT : TransactionType.CREDIT;
@@ -430,15 +360,18 @@ private void saveNewTransaction() {
 		//update widgets, if any
 		WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
 		
-		getSherlockActivity().getSupportFragmentManager().popBackStack();
+		if (getActivity().getSupportFragmentManager().getBackStackEntryCount() == 0){
+			//means we got here directly from the accounts list activity, need to finish
+			getActivity().finish();
+		} else {
+			//go back to transactions list
+			getSherlockActivity().getSupportFragmentManager().popBackStack();
+		}
 	}
 
 	@Override
 	public void onDestroyView() {
 		super.onDestroyView();
-		if (mCursor != null)
-			mCursor.close();
-		mAccountsDbAdapter.close();
 		mTransactionsDbAdapter.close();
 	}
 	
@@ -562,11 +495,7 @@ public void onTextChanged(CharSequence s, int start, int before,
 		private String current = "0";
 		
 		@Override
-		public void afterTextChanged(Editable s) {	
-						
-//			String cleanString = stripCurrencyFormatting(s.toString());
-//			if (cleanString.length() == 0)
-//				return;
+		public void afterTextChanged(Editable s) {
 			if (s.length() == 0)
 				return;
 			
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index 78898298..85d57b5e 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -82,18 +82,19 @@
 	private OnNavigationListener mTransactionListNavigationListener = new OnNavigationListener() {
 
 		  @Override
-		  public boolean onNavigationItemSelected(int position, long itemId) {
-		    mAccountId = itemId;
-		    
+		  public boolean onNavigationItemSelected(int position, long itemId) {		    
+			mAccountId = itemId;
 		    FragmentManager fragmentManager = getSupportFragmentManager();
-
-			NewTransactionFragment newTransactionFragment = (NewTransactionFragment) fragmentManager
-					.findFragmentByTag(TransactionsActivity.FRAGMENT_NEW_TRANSACTION);			
-			if (newTransactionFragment != null){
-				newTransactionFragment.refreshSelectedAccount(itemId);
-				return true;
-			}
-			
+		    
+		    //inform new accounts fragment that account was changed
+		    NewTransactionFragment newTransactionsFragment = (NewTransactionFragment) fragmentManager
+					.findFragmentByTag(FRAGMENT_NEW_TRANSACTION);	
+		    if (newTransactionsFragment != null){
+		    	newTransactionsFragment.onAccountChanged(itemId);
+		    	//if we do not return, the transactions list fragment could also be found (although it's not visible)
+		    	return true; 
+		    }
+		    
 			TransactionsListFragment transactionsListFragment = (TransactionsListFragment) fragmentManager
 					.findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);						
 			if (transactionsListFragment != null) {
@@ -183,7 +184,7 @@ public void updateNavigationSelection() {
 		Cursor accountsCursor = mAccountsDbAdapter.fetchAllAccounts();
 		accountsCursor.moveToFirst();
 		do {
-			long id = accountsCursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+			long id = accountsCursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);			
 			if (mAccountId == id) {
 				getSupportActionBar().setSelectedNavigationItem(i);
 				break;
@@ -223,6 +224,14 @@ protected void onDestroy() {
 	}
 	
 	/**
+	 * Returns the database row ID of the current account
+	 * @return Database row ID of the current account
+	 */
+	public long getCurrentAccountID(){
+		return mAccountId;
+	}
+	
+	/**
 	 * Opens a fragment to create a new transaction. 
 	 * Is called from the XML views
 	 * @param v View which triggered this method
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index b8703507..aec9fc8d 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -206,8 +206,6 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		aBar.setDisplayHomeAsUpEnabled(true);
 
 		setHasOptionsMenu(true);		
-		refreshList();
-		
 	}
 	
 	public void refreshList(long accountId){
@@ -240,7 +238,8 @@ public void onAttach(Activity activity) {
 	@Override
 	public void onResume() {
 		super.onResume();
-		((TransactionsActivity)getSherlockActivity()).updateNavigationSelection();
+		((TransactionsActivity)getSherlockActivity()).updateNavigationSelection();		
+		refreshList(((TransactionsActivity)getActivity()).getCurrentAccountID());
 	}
 	
 	@Override
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java
index 7461c9ee..9f2290a7 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -191,7 +191,7 @@ public void testDeleteAccount(){
 		
 		mSolo.waitForDialogToClose(1000);
 		
-		long id = accDbAdapter.fetchAccountWithUID("to-be-deleted");
+		long id = accDbAdapter.getAccountID("to-be-deleted");
 		assertEquals(-1, id);
 		
 		TransactionsDbAdapter transDbAdapter = new TransactionsDbAdapter(getActivity());
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 698bf24b..f345ce9a 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -106,10 +106,7 @@ private void validateNewTransactionFields(){
 		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(new Date(mTransactionTimeMillis));
 		actualValue = mSolo.getText(7).getText().toString();
 		assertEquals(expectedValue, actualValue);
-		Spinner spinner = mSolo.getCurrentSpinners().get(0);
 		
-		actualValue = ((Cursor)spinner.getSelectedItem()).getString(DatabaseAdapter.COLUMN_NAME);
-		assertEquals(DUMMY_ACCOUNT_NAME, actualValue);
 	}
 	
 	public void testAddTransaction(){	
@@ -183,10 +180,6 @@ private void validateEditTransactionFields(Transaction transaction){
 		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
 		actualValue = mSolo.getText(7).getText().toString();
 		assertEquals(expectedValue, actualValue);
-		Spinner spinner = mSolo.getCurrentSpinners().get(0);
-		
-		actualValue = ((Cursor)spinner.getSelectedItem()).getString(DatabaseAdapter.COLUMN_UID);		
-		assertEquals(transaction.getAccountUID(), actualValue);
 	}
 	
 	public void testOpenTransactionEditShouldNotModifyTransaction(){
