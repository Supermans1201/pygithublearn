From 8f4e42157785a1f71ad2591c4062bf4a334e34e9 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sun, 8 Nov 2015 01:58:12 +0100
Subject: [PATCH] Add option to select export time in export form

Modify CalculatorEditText to use commodities
Export OFX transactions based on time

TODO: add tests
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  12 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |   2 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  56 ++++++
 .../gnucash/android/export/ExportAsyncTask.java    |   8 +-
 .../org/gnucash/android/export/ExportParams.java   |  35 ++--
 .../gnucash/android/export/ofx/OfxExporter.java    |   5 +-
 .../gnucash/android/export/qif/QifExporter.java    |   4 +-
 .../java/org/gnucash/android/model/Account.java    |   6 +-
 .../android/ui/export/ExportFormFragment.java      | 194 ++++++++++++++++-----
 .../ui/transaction/SplitEditorFragment.java        |   2 +-
 .../android/ui/util/widget/CalculatorEditText.java |  22 +--
 app/src/main/res/layout/fragment_export_form.xml   |  60 +++++--
 app/src/main/res/values/strings.xml                |   2 +-
 13 files changed, 308 insertions(+), 100 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 9bb90f6e..63b189a3 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -39,6 +39,7 @@
 import org.gnucash.android.model.TransactionType;
 
 import java.math.BigDecimal;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
@@ -503,12 +504,11 @@ public AccountType getAccountType(long accountId){
     }
 	/**
 	 * Returns a list of accounts which have transactions that have not been exported yet
+     * @param lastExportTimeStamp Timestamp after which to any transactions created/modified should be exported
 	 * @return List of {@link Account}s with unexported transactions
-     * @deprecated This uses the exported flag in the database which is no longer supported.
 	 */
-    @Deprecated
-    public List<Account> getExportableAccounts(){
-        LinkedList<Account> accountsList = new LinkedList<Account>();
+    public List<Account> getExportableAccounts(Timestamp lastExportTimeStamp){
+        LinkedList<Account> accountsList = new LinkedList<>();
         Cursor cursor = mDb.query(
                 TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
                         " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = " +
@@ -517,8 +517,8 @@ public AccountType getAccountType(long accountId){
                         AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." +
                         SplitEntry.COLUMN_ACCOUNT_UID,
                 new String[]{AccountEntry.TABLE_NAME + ".*"},
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " == 0",
-                null,
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_MODIFIED_AT + " > ?",
+                new String[]{lastExportTimeStamp.toString()},
                 AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
                 null,
                 null
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index c39568a3..463c9e06 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -28,7 +28,7 @@
      * Database version.
      * With any change to the database schema, this number must increase
      */
-    public static final int DATABASE_VERSION = 9;
+    public static final int DATABASE_VERSION = 10;
 
     /**
      * Database version where Splits were introduced
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index b8039c6b..9040e2d2 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -24,6 +24,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Environment;
+import android.preference.PreferenceManager;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -31,12 +32,15 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.importer.CommoditiesXmlHandler;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
@@ -1058,4 +1062,56 @@ static int upgradeDbToVersion9(SQLiteDatabase db){
         }
         return oldVersion;
     }
+
+    /**
+     * Upgrades the database to version 10
+     * <p>This method converts all saved scheduled export parameters to the new format using the
+     * timestamp of last export</p>
+     * @param db SQLite database
+     * @return New version number
+     */
+    static int upgradeDbToVersion10(SQLiteDatabase db){
+        Log.i(DatabaseHelper.LOG_TAG, "Upgrading database to version 9");
+        int oldVersion = 9;
+
+        db.beginTransaction();
+        try {
+            Cursor cursor = db.query(ScheduledActionEntry.TABLE_NAME,
+                    new String[]{ScheduledActionEntry.COLUMN_UID, ScheduledActionEntry.COLUMN_TAG},
+                    ScheduledActionEntry.COLUMN_TYPE + " = ?",
+                    new String[]{ScheduledAction.ActionType.BACKUP.name()},
+                    null, null, null);
+
+            ContentValues contentValues = new ContentValues();
+            while (cursor.moveToNext()){
+                String paramString = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_TAG));
+                String[] tokens = paramString.split(";");
+                ExportParams params = new ExportParams(ExportFormat.valueOf(tokens[0]));
+                params.setExportTarget(ExportParams.ExportTarget.valueOf(tokens[1]));
+                params.setDeleteTransactionsAfterExport(Boolean.parseBoolean(tokens[3]));
+
+                boolean exportAll = Boolean.parseBoolean(tokens[2]);
+                if (exportAll){
+                    params.setExportStartTime(Timestamp.valueOf(Exporter.TIMESTAMP_ZERO));
+                } else {
+                    String lastExportTimeStamp = PreferenceManager.getDefaultSharedPreferences(GnuCashApplication.getAppContext())
+                            .getString(Exporter.PREF_LAST_EXPORT_TIME, Exporter.TIMESTAMP_ZERO);
+                    Timestamp timestamp = Timestamp.valueOf(lastExportTimeStamp);
+                    params.setExportStartTime(timestamp);
+                }
+
+                String uid = cursor.getString(cursor.getColumnIndexOrThrow(ScheduledActionEntry.COLUMN_UID));
+                contentValues.clear();
+                contentValues.put(ScheduledActionEntry.COLUMN_UID, uid);
+                contentValues.put(ScheduledActionEntry.COLUMN_TAG, params.toCsv());
+                db.insert(ScheduledActionEntry.TABLE_NAME, null, contentValues);
+            }
+
+            db.setTransactionSuccessful();
+            oldVersion = 10;
+        } finally {
+            db.endTransaction();
+        }
+        return oldVersion;
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 1f07600e..6709a9af 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -143,7 +143,7 @@ protected Boolean doInBackground(ExportParams... params) {
             }
 
         try {
-            File file = new File(mExportParams.getTargetFilepath());
+            File file = new File(mExportParams.getInternalExportPath());
             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
             try {
                 // FIXME: detect if there aren't transactions to export and inform the user
@@ -366,11 +366,11 @@ private void copyExportToDropbox() {
     private List<String> getExportedFiles() throws IOException {
         List<String> exportedFilePaths;
         if (mExportParams.getExportFormat() == ExportFormat.QIF) {
-            String path = mExportParams.getTargetFilepath();
+            String path = mExportParams.getInternalExportPath();
             exportedFilePaths = QifExporter.splitQIF(new File(path));
         } else {
             exportedFilePaths = new ArrayList<>();
-            exportedFilePaths.add(mExportParams.getTargetFilepath());
+            exportedFilePaths.add(mExportParams.getInternalExportPath());
         }
         return exportedFilePaths;
     }
@@ -382,7 +382,7 @@ private void copyExportToDropbox() {
      */
     private File moveExportToSDCard() {
         Log.i(TAG, "Moving exported file to external storage");
-        File src = new File(mExportParams.getTargetFilepath());
+        File src = new File(mExportParams.getInternalExportPath());
         File dst = Exporter.createExportFile(mExportParams.getExportFormat());
 
         try {
diff --git a/app/src/main/java/org/gnucash/android/export/ExportParams.java b/app/src/main/java/org/gnucash/android/export/ExportParams.java
index 6b23ede1..50619cc4 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportParams.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportParams.java
@@ -16,9 +16,16 @@
 
 package org.gnucash.android.export;
 
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.crashlytics.android.Crashlytics;
+
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.ui.export.ExportFormFragment;
 
+import java.sql.Timestamp;
+
 /**
  * Encapsulation of the parameters used for exporting transactions.
  * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
@@ -42,10 +49,9 @@
     private ExportFormat mExportFormat      = ExportFormat.QIF;
 
     /**
-     * Flag to determine if all transactions (including previously exported ones) should be exported
-     * By default only new transactions since the last export will be exported.
+     * All transactions created after this date will be exported
      */
-    private boolean mExportAllTransactions  = false;
+    private Timestamp mExportStartTime = Timestamp.valueOf(Exporter.TIMESTAMP_ZERO);
 
     /**
      * Flag to determine if all transactions should be deleted after exporting is complete
@@ -90,19 +96,20 @@ public void setExportFormat(ExportFormat exportFormat) {
     }
 
     /**
-     * Returns flag whether all transactions should be exported, or only new ones since last export
-     * @return <code>true</code> if all transactions should be exported, <code>false</code> otherwise
+     * Return date from which to start exporting transactions
+     * <p>Transactions created or modified after this timestamp will be exported</p>
+     * @return Timestamp from which to export
      */
-    public boolean shouldExportAllTransactions() {
-        return mExportAllTransactions;
+    public Timestamp getExportStartTime(){
+        return mExportStartTime;
     }
 
     /**
-     * Sets flag for exporting all transactions or only new transactions since last export
-     * @param exportAll Boolean flag
+     * Set the timestamp after which all transactions created/modified will be exported
+     * @param exportStartTime Timestamp
      */
-    public void setExportAllTransactions(boolean exportAll) {
-        this.mExportAllTransactions = exportAll;
+    public void setExportStartTime(Timestamp exportStartTime){
+        this.mExportStartTime = exportStartTime;
     }
 
     /**
@@ -142,7 +149,7 @@ public void setExportTarget(ExportTarget mExportTarget) {
      * This file path is not accessible outside the context of the application
      * @return String path to exported transactions
      */
-    public String getTargetFilepath() {
+    public String getInternalExportPath() {
         return mTargetFilepath;
     }
 
@@ -160,7 +167,7 @@ public String toString() {
     public String toCsv(){
         String separator = ";";
         String csv = mExportFormat.name() + separator + mExportTarget.name() + separator
-                + Boolean.toString(mExportAllTransactions) + separator
+                + mExportStartTime.toString() + separator
                 + Boolean.toString(mDeleteTransactionsAfterExport);
 
         return csv;
@@ -175,7 +182,7 @@ public static ExportParams parseCsv(String csvParams){
         String[] tokens = csvParams.split(";");
         ExportParams params = new ExportParams(ExportFormat.valueOf(tokens[0]));
         params.setExportTarget(ExportTarget.valueOf(tokens[1]));
-        params.setExportAllTransactions(Boolean.parseBoolean(tokens[2]));
+        params.setExportStartTime(Timestamp.valueOf(tokens[2]));
         params.setDeleteTransactionsAfterExport(Boolean.parseBoolean(tokens[3]));
 
         return params;
diff --git a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
index ff9b144e..ab915e40 100644
--- a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
@@ -99,7 +99,7 @@ private void generateOfx(Document doc, Element parent){
 
 
 			//add account details (transactions) to the XML document			
-			account.toOfx(doc, statementTransactionResponse, mParameters.shouldExportAllTransactions());
+			account.toOfx(doc, statementTransactionResponse, mParameters.getExportStartTime());
 			
 			//mark as exported
 			accountsDbAdapter.markAsExported(account.getUID());
@@ -108,8 +108,7 @@ private void generateOfx(Document doc, Element parent){
 	}
 
     public String generateExport() throws ExporterException {
-        mAccountsList = mParameters.shouldExportAllTransactions() ?
-                mAccountsDbAdapter.getAllRecords() : mAccountsDbAdapter.getExportableAccounts();
+        mAccountsList = mAccountsDbAdapter.getExportableAccounts(mParameters.getExportStartTime());
 
         DocumentBuilderFactory docFactory = DocumentBuilderFactory
                 .newInstance();
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index ac5ca01c..95b7485c 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -88,9 +88,7 @@ public void generateExport(Writer writer) throws ExporterException {
                             // or if the transaction has only one split (the whole transaction would be lost if it is not selected)
                             "trans_split_count == 1 )" +
                             (
-                            mParameters.shouldExportAllTransactions() ?
-                                    //"" : " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + "== 0"
-                                    "" : " AND " + TransactionEntry.TABLE_NAME + "_" + DatabaseSchema.CommonColumns.COLUMN_MODIFIED_AT + " > \"" + lastExportTimeStamp + "\""
+                                    " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_MODIFIED_AT + " > \"" + lastExportTimeStamp + "\""
                             ),
                     null,
                     // trans_time ASC : put transactions in time order
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 84dc317e..6df05036 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -472,8 +472,9 @@ public static OfxAccountType convertToOfxAccountType(AccountType accountType){
 	 * Converts this account's transactions into XML and adds them to the DOM document
 	 * @param doc XML DOM document for the OFX data
 	 * @param parent Parent node to which to add this account's transactions in XML
+	 * @param exportStartTime Time from which to export transactions which are created/modified after
 	 */
-	public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
+	public void toOfx(Document doc, Element parent, Timestamp exportStartTime){
 		Element currency = doc.createElement(OfxHelper.TAG_CURRENCY_DEF);
 		currency.appendChild(doc.createTextNode(mCommodity.getCurrencyCode()));
 		
@@ -529,9 +530,8 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		bankTransactionsList.appendChild(dtstart);
 		bankTransactionsList.appendChild(dtend);
 
-		Timestamp lastExportedTimestamp = Timestamp.valueOf(PreferenceManager.getDefaultSharedPreferences(GnuCashApplication.getAppContext()).getString(Exporter.PREF_LAST_EXPORT_TIME, Exporter.TIMESTAMP_ZERO));
 		for (Transaction transaction : mTransactionsList) {
-			if (!exportAllTransactions && /*transaction.isExported()*/ transaction.getModifiedTimestamp().before(lastExportedTimestamp))
+			if (transaction.getModifiedTimestamp().before(exportStartTime))
 				continue;
             bankTransactionsList.appendChild(transaction.toOFX(doc, getUID()));
 		}		
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 0303fde4..45d707c1 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -21,6 +21,7 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
+import android.content.res.Resources;
 import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
@@ -28,6 +29,7 @@
 import android.support.v4.app.FragmentManager;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.SwitchCompat;
 import android.text.format.Time;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -39,13 +41,18 @@
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
 import android.widget.RadioButton;
 import android.widget.Spinner;
 import android.widget.TextView;
 
+import com.codetroopers.betterpickers.calendardatepicker.CalendarDatePickerDialog;
+import com.codetroopers.betterpickers.radialtimepicker.RadialTimePickerDialog;
 import com.codetroopers.betterpickers.recurrencepicker.EventRecurrence;
 import com.codetroopers.betterpickers.recurrencepicker.EventRecurrenceFormatter;
 import com.codetroopers.betterpickers.recurrencepicker.RecurrencePickerDialog;
+import com.crashlytics.android.Crashlytics;
 import com.dropbox.sync.android.DbxAccountManager;
 
 import org.gnucash.android.R;
@@ -54,26 +61,37 @@
 import org.gnucash.android.export.ExportAsyncTask;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
+import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.settings.SettingsActivity;
+import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.util.RecurrenceParser;
 
+import java.sql.Timestamp;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
 import java.util.List;
 
 import butterknife.Bind;
 import butterknife.ButterKnife;
 
+
 /**
  * Dialog fragment for exporting accounts and transactions in various formats
  * <p>The dialog is used for collecting information on the export options and then passing them
  * to the {@link org.gnucash.android.export.Exporter} responsible for exporting</p>
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class
-		ExportFormFragment extends Fragment implements RecurrencePickerDialog.OnRecurrenceSetListener {
+public class ExportFormFragment extends Fragment implements
+		RecurrencePickerDialog.OnRecurrenceSetListener,
+		CalendarDatePickerDialog.OnDateSetListener,
+		RadialTimePickerDialog.OnTimeSetListener {
 		
 	/**
 	 * Spinner for selecting destination for the exported file.
@@ -83,12 +101,6 @@
 	@Bind(R.id.spinner_export_destination) Spinner mDestinationSpinner;
 	
 	/**
-	 * Checkbox indicating that all transactions should be exported,
-	 * regardless of whether they have been exported previously or not
-	 */
-	@Bind(R.id.checkbox_export_all) CheckBox mExportAllCheckBox;
-	
-	/**
 	 * Checkbox for deleting all transactions after exporting them
 	 */
 	@Bind(R.id.checkbox_post_export_delete) CheckBox mDeleteAllCheckBox;
@@ -104,6 +116,24 @@
 	@Bind(R.id.input_recurrence) TextView mRecurrenceTextView;
 
 	/**
+	 * Text view displaying start date to export from
+	 */
+	@Bind(R.id.export_start_date) TextView mExportStartDate;
+
+	@Bind(R.id.export_start_time) TextView mExportStartTime;
+
+	/**
+	 * Switch toggling whether to export all transactions or not
+	 */
+	@Bind(R.id.switch_export_all) SwitchCompat mExportAllSwitch;
+
+	@Bind(R.id.export_date_layout) LinearLayout mExportDateLayout;
+
+	@Bind(R.id.radio_ofx_format) RadioButton mOfxRadioButton;
+	@Bind(R.id.radio_qif_format) RadioButton mQifRadioButton;
+	@Bind(R.id.radio_xml_format) RadioButton mXmlRadioButton;
+
+	/**
 	 * Event recurrence options
 	 */
 	EventRecurrence mEventRecurrence = new EventRecurrence();
@@ -113,6 +143,8 @@
 	 */
 	String mRecurrenceRule;
 
+	Calendar mExportStartCalendar = Calendar.getInstance();
+
 	/**
 	 * Tag for logging
 	 */
@@ -126,7 +158,7 @@
 	private ExportParams.ExportTarget mExportTarget = ExportParams.ExportTarget.SD_CARD;
 
 
-    public void onRadioButtonClicked(View view){
+	public void onRadioButtonClicked(View view){
         switch (view.getId()){
             case R.id.radio_ofx_format:
                 mExportFormat = ExportFormat.OFX;
@@ -136,6 +168,7 @@ public void onRadioButtonClicked(View view){
                 } else {
                     mExportWarningTextView.setVisibility(View.GONE);
                 }
+				mExportDateLayout.setVisibility(View.VISIBLE);
                 break;
 
             case R.id.radio_qif_format:
@@ -147,12 +180,13 @@ public void onRadioButtonClicked(View view){
                 } else {
                     mExportWarningTextView.setVisibility(View.GONE);
                 }
+				mExportDateLayout.setVisibility(View.VISIBLE);
 				break;
 
 			case R.id.radio_xml_format:
 				mExportFormat = ExportFormat.XML;
 				mExportWarningTextView.setText(R.string.export_warning_xml);
-
+				mExportDateLayout.setVisibility(View.GONE);
 				break;
         }
     }
@@ -161,15 +195,13 @@ public void onRadioButtonClicked(View view){
 	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View view = inflater.inflate(R.layout.fragment_export_form, container, false);
+
 		ButterKnife.bind(this, view);
-		return view;
-	}
 
-	@Override
-	public void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-	}
+		bindViewListeners();
 
+		return view;
+	}
 	@Override
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 		inflater.inflate(R.menu.default_save_actions, menu);
@@ -196,7 +228,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	@Override
 	public void onActivityCreated(Bundle savedInstanceState) {		
 		super.onActivityCreated(savedInstanceState);
-        bindViews();
+
 		ActionBar supportActionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
 		assert supportActionBar != null;
 		supportActionBar.setTitle(R.string.title_export_dialog);
@@ -233,7 +265,13 @@ private void getSDWritePermission(){
 	 */
 	private void startExport(){
 		ExportParams exportParameters = new ExportParams(mExportFormat);
-		exportParameters.setExportAllTransactions(mExportAllCheckBox.isChecked());
+
+		if (mExportAllSwitch.isChecked()){
+			exportParameters.setExportStartTime(Timestamp.valueOf(Exporter.TIMESTAMP_ZERO));
+		} else {
+			exportParameters.setExportStartTime(new Timestamp(mExportStartCalendar.getTimeInMillis()));
+		}
+
 		exportParameters.setExportTarget(mExportTarget);
 		exportParameters.setDeleteTransactionsAfterExport(mDeleteAllCheckBox.isChecked());
 
@@ -253,7 +291,8 @@ private void startExport(){
 		//getActivity().finish();
 	}
 
-	private void bindViews(){
+	private void bindViewListeners(){
+		// export destination bindings
 		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
 		        R.array.export_destinations, android.R.layout.simple_spinner_item);
 		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
@@ -300,9 +339,77 @@ public void onNothingSelected(AdapterView<?> parent) {
 
 			}
 		});
+
+
+		//**************** export start time bindings ******************
+		String lastExportTimeStamp = PreferenceManager.getDefaultSharedPreferences(getActivity())
+				.getString(Exporter.PREF_LAST_EXPORT_TIME, Exporter.TIMESTAMP_ZERO);
+		Timestamp timestamp = Timestamp.valueOf(lastExportTimeStamp);
+		mExportStartCalendar.setTimeInMillis(timestamp.getTime());
+
+		Date date = new Date(timestamp.getTime());
+		mExportStartDate.setText(TransactionFormFragment.DATE_FORMATTER.format(date));
+		mExportStartTime.setText(TransactionFormFragment.TIME_FORMATTER.format(date));
+
+		mExportStartDate.setOnClickListener(new View.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				long dateMillis = 0;
+				try {
+					Date date = TransactionFormFragment.DATE_FORMATTER.parse(mExportStartDate.getText().toString());
+					dateMillis = date.getTime();
+				} catch (ParseException e) {
+					Log.e(getTag(), "Error converting input time to Date object");
+				}
+				Calendar calendar = Calendar.getInstance();
+				calendar.setTimeInMillis(dateMillis);
+
+				int year = calendar.get(Calendar.YEAR);
+				int monthOfYear = calendar.get(Calendar.MONTH);
+				int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
+				CalendarDatePickerDialog datePickerDialog = CalendarDatePickerDialog.newInstance(
+						ExportFormFragment.this,
+						year, monthOfYear, dayOfMonth);
+				datePickerDialog.show(getFragmentManager(), "date_picker_fragment");
+			}
+		});
+
+		mExportStartTime.setOnClickListener(new View.OnClickListener() {
+
+			@Override
+			public void onClick(View v) {
+				long timeMillis = 0;
+				try {
+					Date date = TransactionFormFragment.TIME_FORMATTER.parse(mExportStartTime.getText().toString());
+					timeMillis = date.getTime();
+				} catch (ParseException e) {
+					Log.e(getTag(), "Error converting input time to Date object");
+				}
+
+				Calendar calendar = Calendar.getInstance();
+				calendar.setTimeInMillis(timeMillis);
+
+				RadialTimePickerDialog timePickerDialog = RadialTimePickerDialog.newInstance(
+						ExportFormFragment.this, calendar.get(Calendar.HOUR_OF_DAY),
+						calendar.get(Calendar.MINUTE), true);
+				timePickerDialog.show(getFragmentManager(), "time_picker_dialog_fragment");
+			}
+		});
+
 		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
-		mExportAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_export_all_transactions), false));
-		
+		mExportAllSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+			@Override
+			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+				mExportStartDate.setEnabled(!isChecked);
+				mExportStartTime.setEnabled(!isChecked);
+				int color = isChecked ? android.R.color.darker_gray : android.R.color.black;
+				mExportStartDate.setTextColor(getResources().getColor(color));
+				mExportStartTime.setTextColor(getResources().getColor(color));
+			}
+		});
+
+		mExportAllSwitch.setChecked(sharedPrefs.getBoolean(getString(R.string.key_export_all_transactions), false));
 		mDeleteAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_delete_transactions_after_export), false));
 
 		mRecurrenceTextView.setOnClickListener(new View.OnClickListener() {
@@ -334,7 +441,7 @@ public void onClick(View view) {
         String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
         mExportFormat = ExportFormat.valueOf(defaultExportFormat);
 
-        View.OnClickListener clickListener = new View.OnClickListener() {
+        View.OnClickListener radioClickListener = new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 onRadioButtonClicked(view);
@@ -344,28 +451,21 @@ public void onClick(View view) {
 		View v = getView();
 		assert v != null;
 
-        RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
-        ofxRadioButton.setOnClickListener(clickListener);
-        if (defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name())) {
-            ofxRadioButton.performClick();
-        }
-
-        RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
-        qifRadioButton.setOnClickListener(clickListener);
-        if (defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name())){
-            qifRadioButton.performClick();
-        }
+		mOfxRadioButton.setOnClickListener(radioClickListener);
+		mQifRadioButton.setOnClickListener(radioClickListener);
+		mXmlRadioButton.setOnClickListener(radioClickListener);
 
-		RadioButton xmlRadioButton = (RadioButton) v.findViewById(R.id.radio_xml_format);
-		xmlRadioButton.setOnClickListener(clickListener);
-		if (defaultExportFormat.equalsIgnoreCase(ExportFormat.XML.name())){
-			xmlRadioButton.performClick();
+		ExportFormat defaultFormat = ExportFormat.valueOf(defaultExportFormat.toUpperCase());
+		switch (defaultFormat){
+			case QIF: mQifRadioButton.performClick(); break;
+			case OFX: mOfxRadioButton.performClick(); break;
+			case XML: mXmlRadioButton.performClick(); break;
 		}
 
 		if (GnuCashApplication.isDoubleEntryEnabled()){
-			ofxRadioButton.setVisibility(View.GONE);
+			mOfxRadioButton.setVisibility(View.GONE);
 		} else {
-			xmlRadioButton.setVisibility(View.GONE);
+			mXmlRadioButton.setVisibility(View.GONE);
 		}
 
 	}
@@ -393,5 +493,21 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
 		}
 	}
 
+	@Override
+	public void onDateSet(CalendarDatePickerDialog dialog, int year, int monthOfYear, int dayOfMonth) {
+		Calendar cal = new GregorianCalendar(year, monthOfYear, dayOfMonth);
+		mExportStartDate.setText(TransactionFormFragment.DATE_FORMATTER.format(cal.getTime()));
+		mExportStartCalendar.set(Calendar.YEAR, year);
+		mExportStartCalendar.set(Calendar.MONTH, monthOfYear);
+		mExportStartCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
+	}
+
+	@Override
+	public void onTimeSet(RadialTimePickerDialog dialog, int hourOfDay, int minute) {
+		Calendar cal = new GregorianCalendar(0, 0, 0, hourOfDay, minute);
+		mExportStartTime.setText(TransactionFormFragment.TIME_FORMATTER.format(cal.getTime()));
+		mExportStartCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
+		mExportStartCalendar.set(Calendar.MINUTE, minute);
+	}
 }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
index f4500c7f..a3a141a3 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
@@ -265,7 +265,7 @@ public void onClick(View view) {
             splitUidTextView.setText(BaseModel.generateUID());
 
             if (split != null) {
-                splitAmountEditText.setCurrency(split.getValue().getCurrency());
+                splitAmountEditText.setCommodity(split.getValue().getCommodity());
                 splitAmountEditText.setValue(split.getFormattedValue().asBigDecimal());
                 splitCurrencyTextView.setText(split.getValue().getCurrency().getSymbol());
                 splitMemoEditText.setText(split.getMemo());
diff --git a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
index d58de4a4..193d2f66 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
@@ -55,7 +55,8 @@
  */
 public class CalculatorEditText extends EditText {
     CalculatorKeyboard mCalculatorKeyboard;
-    private Currency mCurrency = Currency.getInstance(GnuCashApplication.getDefaultCurrencyCode());
+
+    private Commodity mCommodity = Commodity.DEFAULT_COMMODITY;
     private Context mContext;
 
     /**
@@ -238,17 +239,17 @@ public void setCalculatorKeyboard(CalculatorKeyboard keyboard){
      * Returns the currency used for computations
      * @return ISO 4217 currency
      */
-    public Currency getCurrency() {
-        return mCurrency;
+    public Commodity getCommodity() {
+        return mCommodity;
     }
 
     /**
-     * Sets the currency to use for calculations
-     * The currency determines the number of decimal places used
-     * @param currency ISO 4217 currency
+     * Sets the commodity to use for calculations
+     * The commodity determines the number of decimal places used
+     * @param commodity ISO 4217 currency
      */
-    public void setCurrency(Currency currency) {
-        this.mCurrency = currency;
+    public void setCommodity(Commodity commodity) {
+        this.mCommodity = commodity;
     }
 
     /**
@@ -337,12 +338,11 @@ public BigDecimal getValue(){
      * @param amount BigDecimal amount
      */
     public void setValue(BigDecimal amount){
-        Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-        BigDecimal newAmount = amount.setScale(commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
+        BigDecimal newAmount = amount.setScale(mCommodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
 
         DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
         formatter.setMinimumFractionDigits(0);
-        formatter.setMaximumFractionDigits(commodity.getSmallestFractionDigits());
+        formatter.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
         formatter.setGroupingUsed(false);
         String resultString = formatter.format(newAmount.doubleValue());
 
diff --git a/app/src/main/res/layout/fragment_export_form.xml b/app/src/main/res/layout/fragment_export_form.xml
index 3fafbc43..0d2944c3 100644
--- a/app/src/main/res/layout/fragment_export_form.xml
+++ b/app/src/main/res/layout/fragment_export_form.xml
@@ -17,8 +17,10 @@
 
 <ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
+    android:animateLayoutChanges="true"
     android:layout_width="match_parent"
-    android:layout_height="match_parent">
+    android:layout_height="match_parent"
+    tools:context=".ui.common.FormActivity">
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
@@ -88,18 +90,51 @@
             tools:text="Some format-based export warning"
             android:textColor="@color/title_green"
             android:layout_marginBottom="@dimen/dialog_padding"
-            android:layout_marginLeft="@dimen/dialog_padding"
+            android:layout_marginLeft="100dp"
             style="@style/TextAppearance.Hint" />
 
-        <CheckBox android:id="@+id/checkbox_export_all"
-            android:layout_width="wrap_content"
+    <LinearLayout android:id="@+id/export_date_layout"
+        android:layout_width="match_parent"
+        android:layout_height="?android:attr/listPreferredItemHeight"
+        android:orientation="horizontal">
+        <TextView
+            android:id="@+id/label_export_date"
+            android:text="Since"
+            android:gravity="center_vertical"
+            android:layout_marginLeft="8dp"
+            android:layout_marginRight="8dp"
             android:layout_height="wrap_content"
-            android:textAppearance="?android:attr/textAppearanceMedium"
-            android:text="@string/option_export_all_transactions"
-            />
-        <TextView android:layout_marginLeft="8dp"
-            android:text="@string/hint_export_choice"
-            style="@style/TextAppearance.Hint" />
+            android:layout_width="wrap_content"
+            style="@style/TextAppearance.EditTransaction_Small" />
+        <TextView android:id="@+id/export_start_date"
+            android:layout_width="0dp"
+            android:layout_weight="2"
+            android:layout_height="match_parent"
+            android:gravity="center"
+            android:textSize="15sp"
+            tools:text="25.12.2015"
+            android:textColor="@android:color/black"
+            android:clickable="true"/>
+
+        <TextView android:id="@+id/export_start_time"
+            android:layout_width="0dp"
+            android:layout_weight="1.2"
+            android:layout_height="match_parent"
+            android:gravity="center"
+            android:textSize="15sp"
+            tools:text="15:30H"
+            android:textColor="@android:color/black"
+            android:clickable="true"/>
+        <android.support.v7.widget.SwitchCompat
+            android:id="@+id/switch_export_all"
+            android:text="All time"
+            android:paddingLeft="5dp"
+            android:paddingRight="5dp"
+            android:layout_marginLeft="5dp"
+            android:checked="false"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+    </LinearLayout>
 
         <CheckBox android:id="@+id/checkbox_post_export_delete"
             android:layout_width="wrap_content"
@@ -109,15 +144,12 @@
             android:text="@string/option_delete_after_export"
             />
 
-        <TextView android:layout_marginLeft="8dp"
-            android:text="@string/hint_delete_after_export"
-            style="@style/TextAppearance.Hint" />
-
         <LinearLayout android:id="@+id/recurrence_options"
             style="@style/FormRow">
             <TextView
                 android:id="@+id/label_recurring_transaction"
                 android:text="@string/label_recurring_transaction"
+                android:layout_marginLeft="8dp"
                 android:layout_height="wrap_content"
                 android:layout_width="wrap_content"
                 style="@style/TextAppearance.EditTransaction_Small" />
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 948ec1b4..b0dd8388 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -57,7 +57,7 @@
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
     <string name="toast_export_error">Error exporting %1$s file</string>
     <string name="btn_export">Export</string>
-    <string name="option_delete_after_export">Delete after export</string>
+    <string name="option_delete_after_export">Delete transactions after export</string>
     <string name="hint_delete_after_export">All exported transactions will be deleted when exporting is completed</string>
     <string name="title_settings">Settings</string>
     <string-array name="export_destinations">
