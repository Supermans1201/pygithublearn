From edf7ae5f04342a12c57b533612d276136203b033 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 3 Aug 2016 22:53:19 +0200
Subject: [PATCH] Add tests for GitHub issue #506 bug

Test that opening a multi-currency transaction and saving it again should not modify the transaction
Test that opening a multicurrency transaction and then changing it to be no longer multi-currency should maintain consistent amount for the split value and quantity

Fix getImbalance() method of transactions to ignore multicurrency transactions.
---
 .../android/test/ui/TransactionsActivityTest.java  | 266 ++++++++++++++++++---
 .../android/db/adapter/TransactionsDbAdapter.java  |   4 +-
 .../gnucash/android/importer/GncXmlHandler.java    |   4 +-
 .../org/gnucash/android/model/Transaction.java     |  17 +-
 4 files changed, 247 insertions(+), 44 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 6a52692b..1694ae59 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -71,6 +71,7 @@
 import static android.support.test.espresso.matcher.ViewMatchers.isChecked;
 import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
 import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withParent;
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.allOf;
@@ -82,8 +83,8 @@
 public class TransactionsActivityTest {
     private static final String TRANSACTION_AMOUNT = "9.99";
 	private static final String TRANSACTION_NAME = "Pizza";
-	private static final String DUMMY_ACCOUNT_UID = "transactions-account";
-	private static final String DUMMY_ACCOUNT_NAME = "Transactions Account";
+	private static final String TRANSACTIONS_ACCOUNT_UID = "transactions-account";
+	private static final String TRANSACTIONS_ACCOUNT_NAME = "Transactions Account";
 
     private static final String TRANSFER_ACCOUNT_NAME   = "Transfer account";
     private static final String TRANSFER_ACCOUNT_UID    = "transfer_account";
@@ -109,8 +110,8 @@
 	private Account mTransferAccount;
 
 	public TransactionsActivityTest() {
-		mBaseAccount = new Account(DUMMY_ACCOUNT_NAME, COMMODITY);
-		mBaseAccount.setUID(DUMMY_ACCOUNT_UID);
+		mBaseAccount = new Account(TRANSACTIONS_ACCOUNT_NAME, COMMODITY);
+		mBaseAccount.setUID(TRANSACTIONS_ACCOUNT_UID);
 
 		mTransferAccount = new Account(TRANSFER_ACCOUNT_NAME, COMMODITY);
 		mTransferAccount.setUID(TRANSFER_ACCOUNT_UID);
@@ -120,7 +121,7 @@ public TransactionsActivityTest() {
 		mTransaction.setCommodity(COMMODITY);
 		mTransaction.setNote("What up?");
 		mTransaction.setTime(mTransactionTimeMillis);
-		Split split = new Split(new Money(TRANSACTION_AMOUNT, CURRENCY_CODE), DUMMY_ACCOUNT_UID);
+		Split split = new Split(new Money(TRANSACTION_AMOUNT, CURRENCY_CODE), TRANSACTIONS_ACCOUNT_UID);
 		split.setType(TransactionType.DEBIT);
 
 		mTransaction.addSplit(split);
@@ -156,10 +157,10 @@ public void setUp() throws Exception {
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(1);
 
 		Intent intent = new Intent(Intent.ACTION_VIEW);
-		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
+		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, TRANSACTIONS_ACCOUNT_UID);
 		mTransactionsActivity = mActivityRule.launchActivity(intent);
 
-		refreshTransactionsList();
+		//refreshTransactionsList();
 	}
 
 
@@ -168,7 +169,7 @@ private void validateTransactionListDisplayed(){
 	}
 	
 	private int getTransactionCount(){
-        return mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID).size();
+        return mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID).size();
 	}
 	
 	private void validateTimeInput(long timeMillis){
@@ -183,7 +184,7 @@ private void validateTimeInput(long timeMillis){
 	public void testAddTransactionShouldRequireAmount(){
 		validateTransactionListDisplayed();
 		
-		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
+		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(TRANSACTIONS_ACCOUNT_UID);
         onView(withId(R.id.fab_create_transaction)).perform(click());
 
 		onView(withId(R.id.input_transaction_name))
@@ -198,7 +199,7 @@ public void testAddTransactionShouldRequireAmount(){
 
 		assertToastDisplayed(R.string.toast_transanction_amount_required);
 
-		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
+		int afterCount = mTransactionsDbAdapter.getTransactionsCount(TRANSACTIONS_ACCOUNT_UID);
 		assertThat(afterCount).isEqualTo(beforeCount);
 
 	}
@@ -230,7 +231,7 @@ private void validateEditTransactionFields(Transaction transaction){
 
 		onView(withId(R.id.input_transaction_name)).check(matches(withText(transaction.getDescription())));
 
-		Money balance = transaction.getBalance(DUMMY_ACCOUNT_UID);
+		Money balance = transaction.getBalance(TRANSACTIONS_ACCOUNT_UID);
 		NumberFormat formatter = NumberFormat.getInstance(Locale.getDefault());
 		formatter.setMinimumFractionDigits(2);
 		formatter.setMaximumFractionDigits(2);
@@ -266,7 +267,7 @@ public void testAddTransaction(){
 
         validateTransactionListDisplayed();
 
-        List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+        List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID);
         assertThat(transactions).hasSize(2);
         Transaction transaction = transactions.get(0);
 		assertThat(transaction.getSplits()).hasSize(2);
@@ -409,11 +410,11 @@ public void childAccountsShouldUseParentTransferAccountSetting(){
 		mAccountsDbAdapter.addRecord(new Account("Higher account"), DatabaseAdapter.UpdateMethod.insert);
 
 		Account childAccount = new Account("Child Account");
-		childAccount.setParentUID(DUMMY_ACCOUNT_UID);
+		childAccount.setParentUID(TRANSACTIONS_ACCOUNT_UID);
 		mAccountsDbAdapter.addRecord(childAccount, DatabaseAdapter.UpdateMethod.insert);
 		ContentValues contentValues = new ContentValues();
 		contentValues.put(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, transferAccount.getUID());
-		mAccountsDbAdapter.updateRecord(DUMMY_ACCOUNT_UID, contentValues);
+		mAccountsDbAdapter.updateRecord(TRANSACTIONS_ACCOUNT_UID, contentValues);
 
 		Intent intent = new Intent(mTransactionsActivity, TransactionsActivity.class);
 		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -445,11 +446,11 @@ public void testToggleTransactionType(){
 
 		onView(withId(R.id.menu_save)).perform(click());
 		
-		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID);
 		assertThat(transactions).hasSize(1);
 		Transaction trx = transactions.get(0);
 		assertThat(trx.getSplits()).hasSize(2); //auto-balancing of splits
-		assertThat(trx.getBalance(DUMMY_ACCOUNT_UID).isNegative()).isTrue();
+		assertThat(trx.getBalance(TRANSACTIONS_ACCOUNT_UID).isNegative()).isTrue();
 	}
 
 	@Test
@@ -461,17 +462,29 @@ public void testOpenTransactionEditShouldNotModifyTransaction(){
 
 		clickOnView(R.id.menu_save);
 
-		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID);
 
 		assertThat(transactions).hasSize(1);
-		Transaction trx = transactions.get(0);
-		assertThat(TRANSACTION_NAME).isEqualTo(trx.getDescription());
+		Transaction transaction = transactions.get(0);
+		assertThat(TRANSACTION_NAME).isEqualTo(transaction.getDescription());
 		Date expectedDate = new Date(mTransactionTimeMillis);
-		Date trxDate = new Date(trx.getTimeMillis());
+		Date trxDate = new Date(transaction.getTimeMillis());
 		assertThat(TransactionFormFragment.DATE_FORMATTER.format(expectedDate))
 				.isEqualTo(TransactionFormFragment.DATE_FORMATTER.format(trxDate));
 		assertThat(TransactionFormFragment.TIME_FORMATTER.format(expectedDate))
 				.isEqualTo(TransactionFormFragment.TIME_FORMATTER.format(trxDate));
+
+		Split baseSplit = transaction.getSplits(TRANSACTIONS_ACCOUNT_UID).get(0);
+		Money expectedAmount = new Money(TRANSACTION_AMOUNT, CURRENCY_CODE);
+		assertThat(baseSplit.getValue()).isEqualTo(expectedAmount);
+		assertThat(baseSplit.getQuantity()).isEqualTo(expectedAmount);
+		assertThat(baseSplit.getType()).isEqualTo(TransactionType.DEBIT);
+
+		Split transferSplit = transaction.getSplits(TRANSFER_ACCOUNT_UID).get(0);
+		assertThat(transferSplit.getValue()).isEqualTo(expectedAmount);
+		assertThat(transferSplit.getQuantity()).isEqualTo(expectedAmount);
+		assertThat(transferSplit.getType()).isEqualTo(TransactionType.CREDIT);
+
 	}
 
 	@Test
@@ -479,7 +492,7 @@ public void testDeleteTransaction(){
 		onView(withId(R.id.options_menu)).perform(click());
 		onView(withText(R.string.menu_delete)).perform(click());
 
-		long id = mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
+		long id = mAccountsDbAdapter.getID(TRANSACTIONS_ACCOUNT_UID);
 		assertThat(0).isEqualTo(mTransactionsDbAdapter.getTransactionsCount(id));
 	}
 
@@ -496,7 +509,7 @@ public void testMoveTransaction(){
 
 		onView(withId(R.id.btn_save)).perform(click());
 
-		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID)).hasSize(0);
+		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID)).hasSize(0);
 
 		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(account.getUID())).hasSize(1);
 
@@ -522,7 +535,7 @@ public void editingSplit_shouldNotSetAmountToZero(){
 
 		onView(withId(R.id.btn_split_editor)).perform(click());
 
-//		onView(withSpinnerText(DUMMY_ACCOUNT_NAME)).perform(click()); //// FIXME: 03.11.2015 properly select the spinner
+//		onView(withSpinnerText(TRANSACTIONS_ACCOUNT_NAME)).perform(click()); //// FIXME: 03.11.2015 properly select the spinner
 		onData(withId(R.id.input_accounts_spinner))
 				.inAdapterView(withId(R.id.split_list_layout))
 				.atPosition(1)
@@ -536,7 +549,7 @@ public void editingSplit_shouldNotSetAmountToZero(){
 		//split should have moved from account, it should now be empty
 		onView(withId(R.id.empty_view)).check(matches(isDisplayed()));
 
-		assertThat(mAccountsDbAdapter.getAccountBalance(DUMMY_ACCOUNT_UID)).isEqualTo(Money.createZeroInstance(CURRENCY_CODE));
+		assertThat(mAccountsDbAdapter.getAccountBalance(TRANSACTIONS_ACCOUNT_UID)).isEqualTo(Money.createZeroInstance(CURRENCY_CODE));
 
 		//split
 		assertThat(mAccountsDbAdapter.getAccountBalance(account.getUID())).isEqualTo(new Money("1024", CURRENCY_CODE));
@@ -544,12 +557,12 @@ public void editingSplit_shouldNotSetAmountToZero(){
 
 	@Test
 	public void testDuplicateTransaction(){
-		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID)).hasSize(1);
+		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID)).hasSize(1);
 
 		onView(withId(R.id.options_menu)).perform(click());
 		onView(withText(R.string.menu_duplicate_transaction)).perform(click());
 
-		List<Transaction> dummyAccountTrns = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+		List<Transaction> dummyAccountTrns = mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID);
 		assertThat(dummyAccountTrns).hasSize(2);
 
 		assertThat(dummyAccountTrns.get(0).getDescription()).isEqualTo(dummyAccountTrns.get(1).getDescription());
@@ -559,33 +572,224 @@ public void testDuplicateTransaction(){
 	//TODO: add normal transaction recording
 	@Test
 	public void testLegacyIntentTransactionRecording(){
-		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
+		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(TRANSACTIONS_ACCOUNT_UID);
 		Intent transactionIntent = new Intent(Intent.ACTION_INSERT);
 		transactionIntent.setType(Transaction.MIME_TYPE);
 		transactionIntent.putExtra(Intent.EXTRA_TITLE, "Power intents");
 		transactionIntent.putExtra(Intent.EXTRA_TEXT, "Intents for sale");
 		transactionIntent.putExtra(Transaction.EXTRA_AMOUNT, new BigDecimal(4.99));
-		transactionIntent.putExtra(Transaction.EXTRA_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
+		transactionIntent.putExtra(Transaction.EXTRA_ACCOUNT_UID, TRANSACTIONS_ACCOUNT_UID);
 		transactionIntent.putExtra(Transaction.EXTRA_TRANSACTION_TYPE, TransactionType.DEBIT.name());
 		transactionIntent.putExtra(Account.EXTRA_CURRENCY_CODE, "USD");
 
 		new TransactionRecorder().onReceive(mTransactionsActivity, transactionIntent);
 
-		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
+		int afterCount = mTransactionsDbAdapter.getTransactionsCount(TRANSACTIONS_ACCOUNT_UID);
 		
 		assertThat(beforeCount + 1).isEqualTo(afterCount);
 		
-		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(TRANSACTIONS_ACCOUNT_UID);
 		
 		for (Transaction transaction : transactions) {
 			if (transaction.getDescription().equals("Power intents")){
 				assertThat("Intents for sale").isEqualTo(transaction.getNote());
-				assertThat(4.99).isEqualTo(transaction.getBalance(DUMMY_ACCOUNT_UID).asDouble());
+				assertThat(4.99).isEqualTo(transaction.getBalance(TRANSACTIONS_ACCOUNT_UID).asDouble());
 			}
 		}
 	}
 
 	/**
+	 * Opening a transactions and then hitting save button without changing anything should have no side-effects
+	 * This is similar to the test @{@link #testOpenTransactionEditShouldNotModifyTransaction()}
+	 * with the difference that this test checks multi-currency transactions
+	 */
+	@Test
+	public void openingAndSavingMultiCurrencyTransaction_shouldNotModifyTheSplits(){
+		Commodity bgnCommodity = CommoditiesDbAdapter.getInstance().getCommodity("BGN");
+		Account account = new Account("Zen Account", bgnCommodity);
+
+		mAccountsDbAdapter.addRecord(account);
+
+		onView(withId(R.id.fab_create_transaction)).perform(click());
+		String trnDescription = "Multi-currency trn";
+		onView(withId(R.id.input_transaction_name)).perform(typeText(trnDescription));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("10"));
+		Espresso.closeSoftKeyboard();
+
+		onView(withId(R.id.input_transfer_account_spinner)).perform(click());
+		onView(withText(account.getFullName())).perform(click());
+
+		//at this point, the transfer funds dialog should be shown
+		onView(withText(R.string.msg_provide_exchange_rate)).check(matches(isDisplayed()));
+		onView(withId(R.id.radio_converted_amount)).perform(click());
+		onView(withId(R.id.input_converted_amount)).perform(typeText("5"));
+
+		Espresso.closeSoftKeyboard();
+		onView(withId(R.id.btn_save)).perform(click()); //close currency exchange dialog
+		onView(withId(R.id.menu_save)).perform(click()); //save transaction
+
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(account.getUID());
+		assertThat(transactions).hasSize(1);
+		Transaction transaction = transactions.get(0);
+		assertThat(transaction.getSplits()).hasSize(2);
+		assertThat(transaction.getSplits()).extracting("mAccountUID")
+				.contains(account.getUID()).contains(mBaseAccount.getUID());
+
+
+		onView(allOf(withParent(hasDescendant(withText(trnDescription))),
+				withId(R.id.edit_transaction))).perform(click());
+
+		//do nothing to the transaction, just save it
+		onView(withId(R.id.menu_save)).perform(click());
+
+		transaction = mTransactionsDbAdapter.getRecord(transaction.getUID());
+
+		Split baseSplit = transaction.getSplits(mBaseAccount.getUID()).get(0);
+		Money expectedValueAmount = new Money(BigDecimal.TEN, COMMODITY);
+		assertThat(baseSplit.getValue()).isEqualTo(expectedValueAmount);
+		assertThat(baseSplit.getQuantity()).isEqualTo(expectedValueAmount);
+
+		Split transferSplit = transaction.getSplits(account.getUID()).get(0);
+		Money convertedQuantity = new Money("5", "BGN");
+		assertThat(transferSplit.getValue()).isEqualTo(expectedValueAmount);
+		assertThat(transferSplit.getQuantity()).isEqualTo(convertedQuantity);
+	}
+
+	/**
+	 * If a multi-currency transaction is edited so that it is no longer multicurrency, then the
+	 * values for split and quantity should be adjusted accordingly so that they are consistent
+	 * <p>
+	 *     Basically the test works like this:
+	 *     <ol>
+	 *         <li>Create a multicurrency transaction</li>
+	 *         <li>Change the transfer account so that both splits are of the same currency</li>
+	 *         <li>We now expect both the values and quantities of the splits to be the same</li>
+	 *     </ol>
+	 * </p>
+	 */
+	@Test
+	public void testEditingTransferAccountOfMultiCurrencyTransaction(){
+		mTransactionsDbAdapter.deleteAllRecords(); //clean slate
+		Commodity euroCommodity = CommoditiesDbAdapter.getInstance().getCommodity("EUR");
+		Account euroAccount = new Account("Euro Account", euroCommodity);
+
+		mAccountsDbAdapter.addRecord(euroAccount);
+
+		Money expectedValue = new Money(BigDecimal.TEN, COMMODITY);
+		Money expectedQty = new Money("5", "EUR");
+
+		String trnDescription = "Multicurrency Test Trn";
+		Transaction multiTransaction = new Transaction(trnDescription);
+		Split split1 = new Split(expectedValue, TRANSACTIONS_ACCOUNT_UID);
+		split1.setType(TransactionType.DEBIT);
+		Split split2 = new Split(expectedValue, expectedQty, euroAccount.getUID());
+		split2.setType(TransactionType.CREDIT);
+		multiTransaction.addSplit(split1);
+		multiTransaction.addSplit(split2);
+		multiTransaction.setCommodity(COMMODITY);
+
+		mTransactionsDbAdapter.addRecord(multiTransaction);
+
+		Transaction savedTransaction = mTransactionsDbAdapter.getRecord(multiTransaction.getUID());
+		assertThat(savedTransaction.getSplits()).extracting("mQuantity").contains(expectedQty);
+		assertThat(savedTransaction.getSplits()).extracting("mValue").contains(expectedValue);
+
+		refreshTransactionsList();
+		onView(withText(trnDescription)).check(matches(isDisplayed())); //transaction was added
+		onView(allOf(withParent(hasDescendant(withText(trnDescription))),
+				withId(R.id.edit_transaction))).perform(click());
+
+		//now change the transfer account to be no longer multi-currency
+		onView(withId(R.id.input_transfer_account_spinner)).perform(click());
+		onView(withText(mTransferAccount.getFullName())).perform(click());
+
+		onView(withId(R.id.menu_save)).perform(click());
+
+		//no splits should be in the euro account anymore
+		List<Transaction> euroTransxns = mTransactionsDbAdapter.getAllTransactionsForAccount(euroAccount.getUID());
+		assertThat(euroTransxns).hasSize(0);
+
+		List<Transaction> transferAcctTrns = mTransactionsDbAdapter.getAllTransactionsForAccount(mTransferAccount.getUID());
+		assertThat(transferAcctTrns).hasSize(1);
+
+		Transaction singleCurrencyTrn = transferAcctTrns.get(0);
+		assertThat(singleCurrencyTrn.getUID()).isEqualTo(multiTransaction.getUID()); //should be the same one, just different splits
+
+		//the crux of the test. All splits should now have value and quantity of USD $10
+		List<Split> allSplits = singleCurrencyTrn.getSplits();
+		assertThat(allSplits).extracting("mAccountUID")
+				.contains(mTransferAccount.getUID())
+				.doesNotContain(euroAccount.getUID());
+		assertThat(allSplits).extracting("mValue").contains(expectedValue).doesNotContain(expectedQty);
+		assertThat(allSplits).extracting("mQuantity").contains(expectedValue).doesNotContain(expectedQty);
+	}
+
+	/**
+	 * In this test we check that editing a transaction and switching the transfer account to one
+	 * which is of a different currency and then back again should not have side-effects.
+	 * The split value and quantity should remain consistent.
+	 */
+	@Test
+	public void editingTransferAccount_shouldKeepSplitAmountsConsistent() {
+		mTransactionsDbAdapter.deleteAllRecords(); //clean slate
+		Commodity euroCommodity = CommoditiesDbAdapter.getInstance().getCommodity("EUR");
+		Account euroAccount = new Account("Euro Account", euroCommodity);
+
+		mAccountsDbAdapter.addRecord(euroAccount);
+
+		Money expectedValue = new Money(BigDecimal.TEN, COMMODITY);
+		Money expectedQty = new Money("5", "EUR");
+
+		String trnDescription = "Multicurrency Test Trn";
+		Transaction multiTransaction = new Transaction(trnDescription);
+		Split split1 = new Split(expectedValue, TRANSACTIONS_ACCOUNT_UID);
+		split1.setType(TransactionType.DEBIT);
+		Split split2 = new Split(expectedValue, expectedQty, euroAccount.getUID());
+		split2.setType(TransactionType.CREDIT);
+		multiTransaction.addSplit(split1);
+		multiTransaction.addSplit(split2);
+		multiTransaction.setCommodity(COMMODITY);
+
+		mTransactionsDbAdapter.addRecord(multiTransaction);
+
+		Transaction savedTransaction = mTransactionsDbAdapter.getRecord(multiTransaction.getUID());
+		assertThat(savedTransaction.getSplits()).extracting("mQuantity").contains(expectedQty);
+		assertThat(savedTransaction.getSplits()).extracting("mValue").contains(expectedValue);
+
+		refreshTransactionsList();
+
+		//open transaction for editing
+		onView(withText(trnDescription)).check(matches(isDisplayed())); //transaction was added
+		onView(allOf(withParent(hasDescendant(withText(trnDescription))),
+				withId(R.id.edit_transaction))).perform(click());
+
+		onView(withId(R.id.input_transfer_account_spinner)).perform(click());
+		onView(withText(TRANSFER_ACCOUNT_NAME)).perform(click());
+
+		onView(withId(R.id.input_transfer_account_spinner)).perform(click());
+		onView(withText(euroAccount.getFullName())).perform(click());
+		onView(withId(R.id.input_converted_amount)).perform(typeText("5"));
+		Espresso.closeSoftKeyboard();
+		onView(withId(R.id.btn_save)).perform(click());
+
+		onView(withId(R.id.input_transfer_account_spinner)).perform(click());
+		onView(withText(TRANSFER_ACCOUNT_NAME)).perform(click());
+
+		onView(withId(R.id.menu_save)).perform(click());
+
+		Money transferBalance = mAccountsDbAdapter.getAccountBalance(TRANSFER_ACCOUNT_UID);
+		assertThat(transferBalance).isEqualTo(expectedValue);
+
+		Transaction editedTransaction = mTransactionsDbAdapter.getRecord(multiTransaction.getUID());
+		assertThat(editedTransaction.getBalance(TRANSFER_ACCOUNT_UID)).isEqualTo(expectedValue);
+
+		Split transferAcctSplit = editedTransaction.getSplits(TRANSFER_ACCOUNT_UID).get(0);
+		assertThat(transferAcctSplit.getQuantity()).isEqualTo(expectedValue);
+		assertThat(transferAcctSplit.getValue()).isEqualTo(expectedValue);
+
+	}
+
+	/**
 	 * Simple wrapper for clicking on views with espresso
 	 * @param viewId View resource ID
 	 */
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
index 1a9fb18c..da9341b3 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
@@ -97,10 +97,10 @@ public SplitsDbAdapter getSplitDbAdapter() {
 	 */
     @Override
 	public void addRecord(@NonNull Transaction transaction, UpdateMethod updateMethod){
-        Log.d(LOG_TAG, "Replacing transaction in db");
+        Log.d(LOG_TAG, "Adding transaction to the db via " + updateMethod.name());
         mDb.beginTransaction();
         try {
-            Split imbalanceSplit = transaction.getAutoBalanceSplit();
+            Split imbalanceSplit = transaction.createAutoBalanceSplit();
             if (imbalanceSplit != null){
                 String imbalanceAccountUID = AccountsDbAdapter.getInstance().getOrCreateImbalanceAccountUID(transaction.getCurrency());
                 imbalanceSplit.setAccountUID(imbalanceAccountUID);
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index a358561f..4a610ea6 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -688,7 +688,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 break;
             case GncXmlHelper.TAG_TRANSACTION:
                 mTransaction.setTemplate(mInTemplates);
-                Split imbSplit = mTransaction.getAutoBalanceSplit();
+                Split imbSplit = mTransaction.createAutoBalanceSplit();
                 if (imbSplit != null) {
                     mAutoBalanceSplits.add(imbSplit);
                 }
@@ -899,7 +899,7 @@ public void endDocument() throws SAXException {
 
         // Set the account for created balancing splits to correct imbalance accounts
         for (Split split: mAutoBalanceSplits) {
-            // XXX: yes, getAccountUID() returns a currency code in this case (see Transaction.getAutoBalanceSplit())
+            // XXX: yes, getAccountUID() returns a currency code in this case (see Transaction.createAutoBalanceSplit())
             String currencyCode = split.getAccountUID();
             Account imbAccount = mapImbalanceAccount.get(currencyCode);
             if (imbAccount == null) {
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index e3ee904b..2f661676 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -171,19 +171,18 @@ private void initDefaults(){
 	}
 
     /**
-     * Creates a split which will balance the transaction
-     * <p><b>Note:</b>If a transaction has splits with different currencies, not auto-balancing will be performed.</p>
+     * Creates a split which will balance the transaction, in value.
+     * <p><b>Note:</b>If a transaction has splits with different currencies, no auto-balancing will be performed.</p>
      *
      * <p>The added split will not use any account in db, but will use currency code as account UID.
      * The added split will be returned, to be filled with proper account UID later.</p>
      * @return Split whose amount is the imbalance of this transaction
      */
-    public Split getAutoBalanceSplit(){
-        Money imbalance = getImbalance();
+    public Split createAutoBalanceSplit(){
+        Money imbalance = getImbalance(); //returns imbalance of 0 for multicurrency transactions
         if (!imbalance.isAmountZero()){
-            Currency currency = Currency.getInstance(mCurrencyCode);
-            Split split = new Split(imbalance.negate(),
-                    currency.getCurrencyCode());
+            Split split = new Split(imbalance.negate(), mCurrencyCode); //yes, this is on purpose
+            //the account UID is set to the currency. This should be overridden before saving to db
             addSplit(split);
             return split;
         }
@@ -250,13 +249,13 @@ public Money getBalance(String accountUID){
     /**
      * Computes the imbalance amount for the given transaction.
      * In double entry, all transactions should resolve to zero. But imbalance occurs when there are unresolved splits.
-     * <p>If it is a multi-currency transaction, an imbalance of zero will be returned</p>
+     * <p><b>Note:</b> If this is a multi-currency transaction, an imbalance of zero will be returned</p>
      * @return Money imbalance of the transaction or zero if it is a multi-currency transaction
      */
     public Money getImbalance(){
         Money imbalance = Money.createZeroInstance(mCurrencyCode);
         for (Split split : mSplitList) {
-            if (!split.getValue().getCurrency().getCurrencyCode().equals(mCurrencyCode)) {
+            if (!split.getQuantity().getCurrency().getCurrencyCode().equals(mCurrencyCode)) {
                 // this may happen when importing XML exported from GNCA before 2.0.0
                 // these transactions should only be imported from XML exported from GNC desktop
                 // so imbalance split should not be generated for them
