From 045dc30be2b68f3507f81696745a842cdfb75471 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 8 Jul 2015 16:35:47 +0200
Subject: [PATCH] Fixed: Builds broken

---
 .../gnucash/android/app/GnuCashApplication.java    | 34 +++++++++++++++-------
 .../main/java/org/gnucash/android/model/Money.java | 10 +++++--
 2 files changed, 31 insertions(+), 13 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 247296f5..d7bf9081 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -159,16 +159,7 @@ public static boolean shouldSaveOpeningBalances(boolean defaultValue){
      * @return Default currency code string for the application
      */
     public static String getDefaultCurrencyCode(){
-        Locale locale = Locale.getDefault();
-        //sometimes the locale en_UK is returned which causes a crash with Currency
-        if (locale.getCountry().equals("UK")) {
-            locale = new Locale(locale.getLanguage(), "GB");
-        }
-
-        //for unsupported locale es_LG
-        if (locale.getCountry().equals("LG")){
-            locale = new Locale(locale.getLanguage(), "ES");
-        }
+        Locale locale = getDefaultLocale();
 
         String currencyCode = "USD"; //start with USD as the default
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
@@ -184,6 +175,29 @@ public static String getDefaultCurrencyCode(){
     }
 
     /**
+     * Returns the default locale which is used for currencies, while handling special cases for
+     * locales which are not supported for currency such as en_GB
+     * @return The default locale for this device
+     */
+    public static Locale getDefaultLocale() {
+        Locale locale = Locale.getDefault();
+        //sometimes the locale en_UK is returned which causes a crash with Currency
+        if (locale.getCountry().equals("UK")) {
+            locale = new Locale(locale.getLanguage(), "GB");
+        }
+
+        //for unsupported locale es_LG
+        if (locale.getCountry().equals("LG")){
+            locale = new Locale(locale.getLanguage(), "ES");
+        }
+
+        if (locale.getCountry().equals("en")){
+            locale = Locale.US;
+        }
+        return locale;
+    }
+
+    /**
      * Starts the service for scheduled events and schedules an alarm to call the service twice daily.
      * <p>If the alarm already exists, this method does nothing. If not, the alarm will be created
      * Hence, there is no harm in calling the method repeatedly</p>
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 340bf541..7013dd30 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -92,14 +92,18 @@
      * A zero instance with the currency of the default locale.
      * This can be used anywhere where a starting amount is required without having to create a new object
      */
-    private static final Money sDefaultZero = Money.createZeroInstance(GnuCashApplication.getDefaultCurrencyCode());
+    private static Money sDefaultZero;
 
     /**
      * Returns a Money instance initialized to the local currency and value 0
      * @return Money instance of value 0 in locale currency
      */
     public static Money getZeroInstance(){
-        return sDefaultZero;
+		if (sDefaultZero == null) {
+			String currencyCode = Currency.getInstance(GnuCashApplication.getDefaultLocale()).getCurrencyCode();
+			sDefaultZero = new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
+		}
+		return sDefaultZero;
     }
 
 	/**
@@ -180,7 +184,7 @@ public static Money createZeroInstance(String currencyCode){
 	 */
 	private void init() {
 		mCurrency = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
-		mAmount = new BigDecimal(0).setScale(DEFAULT_DECIMAL_PLACES, DEFAULT_ROUNDING_MODE);
+		mAmount = BigDecimal.ZERO.setScale(DEFAULT_DECIMAL_PLACES, DEFAULT_ROUNDING_MODE);
 	}
 
 	/**
