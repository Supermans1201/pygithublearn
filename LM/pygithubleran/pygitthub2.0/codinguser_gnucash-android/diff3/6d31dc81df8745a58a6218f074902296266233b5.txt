From 6d31dc81df8745a58a6218f074902296266233b5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 27 Mar 2016 19:25:21 +0200
Subject: [PATCH] Simplify code by not returning null from
 Account.getColorHexCode().

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  6 ++++--
 .../java/org/gnucash/android/model/Account.java    | 15 ++++++++------
 .../android/ui/account/AccountFormFragment.java    | 23 +++-------------------
 .../android/ui/report/BarChartFragment.java        |  4 +---
 .../android/ui/report/PieChartFragment.java        |  2 +-
 .../android/ui/report/ReportSummaryFragment.java   |  4 +---
 .../android/test/unit/model/AccountTest.java       |  3 ++-
 7 files changed, 21 insertions(+), 36 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 52b95b1c..a7fcd39e 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -176,7 +176,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Account account
         mReplaceStatement.bindString(3, account.getDescription());
         mReplaceStatement.bindString(4, account.getAccountType().name());
         mReplaceStatement.bindString(5, account.getCurrency().getCurrencyCode());
-        if (account.getColorHexCode() != null) {
+        if (account.getColorHexCode() != Account.DEFAULT_COLOR) {
             mReplaceStatement.bindString(6, account.getColorHexCode());
         }
         mReplaceStatement.bindLong(7, account.isFavorite() ? 1 : 0);
@@ -414,7 +414,9 @@ private Account buildSimpleAccountInstance(Cursor c) {
         account.setCommodity(CommoditiesDbAdapter.getInstance().getCommodity(currency.getCurrencyCode()));
         account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
         account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
-        account.setColorCode(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE)));
+        String color = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
+        if (color != null)
+            account.setColorCode(color);
         account.setFavorite(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) == 1);
         account.setFullName(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_FULL_NAME)));
         account.setHidden(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_HIDDEN)) == 1);
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index b5d7066b..63e69f0a 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -17,6 +17,7 @@
 package org.gnucash.android.model;
 
 
+import android.graphics.Color;
 import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 
@@ -70,7 +71,12 @@
     //TODO: Allow use of #aarrggbb format as well
     public static final String COLOR_HEX_REGEX = "^#(?:[0-9a-fA-F]{3}){1,2}$";
 
-    /**
+	/**
+	 * Default color, if not set explicitly through {@link #setColorCode(String)}.
+	 */
+	public static final String DEFAULT_COLOR = "#cccccc"; // Color.LT_GRAY
+
+	/**
      * Accounts types which are used by the OFX standard
      */
 	public enum OfxAccountType {CHECKING, SAVINGS, MONEYMRKT, CREDITLINE }
@@ -133,7 +139,7 @@
     /**
      * Account color field in hex format #rrggbb
      */
-    private String mColorCode;
+    private String mColorCode = DEFAULT_COLOR;
 
     /**
      * Flag which marks this account as a favorite account
@@ -306,10 +312,7 @@ public String getColorHexCode() {
      * @param colorCode Color code to be set in the format #rrggbb or #rgb
      * @throws java.lang.IllegalArgumentException if the color code is not properly formatted
      */
-    public void setColorCode(String colorCode) {
-        if (colorCode == null)
-            return;
-
+    public void setColorCode(@NonNull String colorCode) {
         if (!Pattern.matches(COLOR_HEX_REGEX, colorCode))
             throw new IllegalArgumentException("Invalid color hex code: " + colorCode);
 
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 4e77e94d..0a29dbd5 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -203,10 +203,7 @@
      */
     private boolean mUseDoubleEntry;
 
-    /**
-     * Default to transparent
-     */
-    private String mSelectedColor = null;
+    private String mSelectedColor = Account.DEFAULT_COLOR;
 
     /**
      * Trigger for color picker dialog
@@ -417,7 +414,7 @@ private void initializeViewsWithAccount(Account account){
         }
 
         mPlaceholderCheckBox.setChecked(account.isPlaceholderAccount());
-        initializeColorSquarePreview(account.getColorHexCode());
+        mColorSquare.setBackgroundColor(Color.parseColor(account.getColorHexCode()));
 
         setAccountTypeSelection(account.getAccountType());
     }
@@ -441,17 +438,6 @@ private void initializeViews(){
     }
 
     /**
-     * Initializes the preview of the color picker (color square) to the specified color
-     * @param colorHex Color of the format #rgb or #rrggbb
-     */
-    private void initializeColorSquarePreview(String colorHex){
-        if (colorHex != null)
-            mColorSquare.setBackgroundColor(Color.parseColor(colorHex));
-        else
-            mColorSquare.setBackgroundColor(Color.LTGRAY);
-    }
-
-    /**
      * Selects the corresponding account type in the spinner
      * @param accountType AccountType to be set
      */
@@ -549,10 +535,7 @@ private void showColorPickerDialog(){
         FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
         int currentColor = Color.LTGRAY;
         if (mAccount != null){
-            String accountColor = mAccount.getColorHexCode();
-            if (accountColor != null){
-                currentColor = Color.parseColor(accountColor);
-            }
+            currentColor = Color.parseColor(mAccount.getColorHexCode());
         }
 
         ColorPickerDialog colorPickerDialogFragment = ColorPickerDialog.newInstance(
diff --git a/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
index 0cd2f3dd..21118404 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
@@ -229,9 +229,7 @@ private BarData getData() {
                         if (!accountToColorMap.containsKey(account.getUID())) {
                             Integer color;
                             if (mUseAccountColor) {
-                                color = (account.getColorHexCode() != null)
-                                        ? Color.parseColor(account.getColorHexCode())
-                                        : COLORS[accountToColorMap.size() % COLORS.length];
+                                color = Color.parseColor(account.getColorHexCode());
                             } else {
                                 color = COLORS[accountToColorMap.size() % COLORS.length];
                             }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/PieChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/PieChartFragment.java
index f4b4ea5e..1c182d7e 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/PieChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/PieChartFragment.java
@@ -199,7 +199,7 @@ private PieData getData() {
                         mReportStartTime, mReportEndTime).asDouble();
                 if (balance > 0) {
                     dataSet.addEntry(new Entry((float) balance, dataSet.getEntryCount()));
-                    colors.add(mUseAccountColor && account.getColorHexCode() != null
+                    colors.add(mUseAccountColor
                             ? Color.parseColor(account.getColorHexCode())
                             : ReportsActivity.COLORS[(dataSet.getEntryCount() - 1) % ReportsActivity.COLORS.length]);
                     labels.add(account.getName());
diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java b/app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java
index 88d2257a..815cd013 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java
@@ -200,9 +200,7 @@ private PieData getData() {
                         Collections.singletonList(account.getUID()), start, end).asDouble();
                 if (balance > 0) {
                     dataSet.addEntry(new Entry((float) balance, dataSet.getEntryCount()));
-                    colors.add(account.getColorHexCode() != null
-                            ? Color.parseColor(account.getColorHexCode())
-                            : ReportsActivity.COLORS[(dataSet.getEntryCount() - 1) % ReportsActivity.COLORS.length]);
+                    colors.add(Color.parseColor(account.getColorHexCode()));
                     labels.add(account.getName());
                 }
             }
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
index 182854f0..359af536 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
@@ -105,8 +105,9 @@ public void settingCurrencyCode_shouldNotSetCommodity(){
 	}
 
 	@Test
-	public void newInstance_shouldHaveNonNullDescription() {
+	public void newInstance_shouldReturnNonNullValues() {
 		Account account = new Account("Test account");
 		assertThat(account.getDescription()).isEqualTo("");
+		assertThat(account.getColorHexCode()).isEqualTo(Account.DEFAULT_COLOR);
 	}
 }
