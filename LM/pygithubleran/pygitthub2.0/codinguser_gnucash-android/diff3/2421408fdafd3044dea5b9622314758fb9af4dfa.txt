From 2421408fdafd3044dea5b9622314758fb9af4dfa Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 7 May 2015 10:19:39 +0200
Subject: [PATCH] Improved unit testing

Added some unit tests for the models
Separated unit tests from android integration tests
Added robolectric 3.0 snapshot dependency
Added equality based on GUID for BaseModel objects
---
 app/build.gradle                                   |  7 +++
 .../gnucash/android/test/model/AccountTest.java    | 13 -----
 .../org/gnucash/android/test/model/SplitTest.java  | 11 ----
 .../android/test/model/TransactionTest.java        | 11 ----
 .../gnucash/android/app/GnuCashApplication.java    |  5 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  4 +-
 .../java/org/gnucash/android/model/BaseModel.java  | 16 ++++++
 .../test/unit}/db/AccountsDbAdapterTest.java       | 67 +++++++++++-----------
 .../test/unit}/db/TransactionsDbAdapterTest.java   | 57 ++++++++----------
 .../android/test/unit/model/AccountTest.java       | 26 +++++++++
 .../android/test/unit}/model/MoneyTest.java        |  2 +-
 .../gnucash/android/test/unit/model/SplitTest.java | 36 ++++++++++++
 .../android/test/unit/model/TransactionTest.java   | 34 +++++++++++
 build.gradle                                       |  3 +-
 14 files changed, 186 insertions(+), 106 deletions(-)
 delete mode 100644 app/src/androidTest/java/org/gnucash/android/test/model/AccountTest.java
 delete mode 100644 app/src/androidTest/java/org/gnucash/android/test/model/SplitTest.java
 delete mode 100644 app/src/androidTest/java/org/gnucash/android/test/model/TransactionTest.java
 rename app/src/{androidTest/java/org/gnucash/android/test => test/java/org/gnucash/android/test/unit}/db/AccountsDbAdapterTest.java (75%)
 rename app/src/{androidTest/java/org/gnucash/android/test => test/java/org/gnucash/android/test/unit}/db/TransactionsDbAdapterTest.java (64%)
 create mode 100644 app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
 rename app/src/{androidTest/java/org/gnucash/android/test => test/java/org/gnucash/android/test/unit}/model/MoneyTest.java (99%)
 create mode 100644 app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
 create mode 100644 app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java

diff --git a/app/build.gradle b/app/build.gradle
index a2712c33..e3cb6f61 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -69,6 +69,7 @@ android {
         }
         debug {
             debuggable true
+            ext.enableCrashlytics = false
         }
     }
     lintOptions {
@@ -102,6 +103,7 @@ android {
 
     
     compileOptions { //we want switch with strings during xml parsing
+        encoding "UTF-8"
         sourceCompatibility JavaVersion.VERSION_1_7
         targetCompatibility JavaVersion.VERSION_1_7
     }
@@ -119,6 +121,11 @@ dependencies {
             'com.google.android.gms:play-services-drive:7.0.0',
             'com.crashlytics.android:crashlytics:1.+'
     )
+
+    testCompile('org.robolectric:robolectric:3.0-SNAPSHOT',
+            'junit:junit:4.12',
+            'org.assertj:assertj-core:1.7.1'
+    )
     androidTestCompile('com.jayway.android.robotium:robotium-solo:5.2.1',
             'com.squareup:fest-android:1.0.6')
 }
\ No newline at end of file
diff --git a/app/src/androidTest/java/org/gnucash/android/test/model/AccountTest.java b/app/src/androidTest/java/org/gnucash/android/test/model/AccountTest.java
deleted file mode 100644
index 0b867103..00000000
--- a/app/src/androidTest/java/org/gnucash/android/test/model/AccountTest.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package org.gnucash.android.test.model;
-
-import org.gnucash.android.model.Account;
-
-import junit.framework.TestCase;
-
-public class AccountTest extends TestCase {
-
-	public AccountTest(String name) {
-		super(name);
-	}
-
-}
diff --git a/app/src/androidTest/java/org/gnucash/android/test/model/SplitTest.java b/app/src/androidTest/java/org/gnucash/android/test/model/SplitTest.java
deleted file mode 100644
index 7fe01791..00000000
--- a/app/src/androidTest/java/org/gnucash/android/test/model/SplitTest.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package org.gnucash.android.test.model;
-
-import junit.framework.TestCase;
-
-/**
- * Date: 09.02.2015
- *
- * @author Ngewi
- */
-public class SplitTest extends TestCase {
-}
diff --git a/app/src/androidTest/java/org/gnucash/android/test/model/TransactionTest.java b/app/src/androidTest/java/org/gnucash/android/test/model/TransactionTest.java
deleted file mode 100644
index 27069a7e..00000000
--- a/app/src/androidTest/java/org/gnucash/android/test/model/TransactionTest.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package org.gnucash.android.test.model;
-
-import junit.framework.TestCase;
-
-public class TransactionTest extends TestCase {
-
-	public TransactionTest(String name) {
-		super(name);
-	}
-
-}
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 79e607c2..cd6d19fa 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -26,6 +26,8 @@
 import android.preference.PreferenceManager;
 import android.util.Log;
 import com.crashlytics.android.Crashlytics;
+
+import org.gnucash.android.BuildConfig;
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
@@ -74,7 +76,8 @@ public void onCreate(){
         GnuCashApplication.context = getApplicationContext();
         //only start logging if user gave consent
 
-        Crashlytics.start(this);
+        if (!BuildConfig.DEBUG)
+            Crashlytics.start(this);
 
         mDbHelper = new DatabaseHelper(getApplicationContext());
         try {
diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 7cbc6e7d..c33f9e5f 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -71,7 +71,7 @@
 	 */
     private final TransactionsDbAdapter mTransactionsAdapter;
 
-    private static String mImbalanceAccountPrefix = GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-";
+//    private static String mImbalanceAccountPrefix = GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-";
 
     /**
      * Overloaded constructor. Creates an adapter for an already open database
@@ -1159,7 +1159,7 @@ public boolean isFavoriteAccount(String accountUID){
     }
 
     public static String getImbalanceAccountPrefix() {
-         return mImbalanceAccountPrefix;
+         return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-";
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index 4100153b..eff68b1f 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -108,4 +108,20 @@ public Timestamp getModifiedTimestamp() {
     public void setModifiedTimestamp(Timestamp modifiedTimestamp) {
         this.mModifiedTimestamp = modifiedTimestamp;
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BaseModel)) return false;
+
+        BaseModel baseModel = (BaseModel) o;
+
+        return mUID.equals(baseModel.mUID);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return mUID.hashCode();
+    }
 }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
similarity index 75%
rename from app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java
rename to app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index 8646307f..e8ad7e16 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -1,45 +1,42 @@
-package org.gnucash.android.test.db;
+package org.gnucash.android.test.unit.db;
 
-import java.util.Currency;
-import java.util.List;
-
-import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.BuildConfig;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
 
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
-import android.test.AndroidTestCase;
-import android.util.Log;
+import java.util.Currency;
+import java.util.List;
 
-public class AccountsDbAdapterTest extends AndroidTestCase {
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class AccountsDbAdapterTest{
 
 	private static final String BRAVO_ACCOUNT_NAME = "Bravo";
 	private static final String ALPHA_ACCOUNT_NAME = "Alpha";
-    private DatabaseHelper mDbHelper;
-    private SQLiteDatabase mDb;
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
-	
-	@Override
-	protected void setUp() throws Exception {		
-		super.setUp();
-        mDbHelper = new DatabaseHelper(getContext());
-        try {
-            mDb = mDbHelper.getWritableDatabase();
-        } catch (SQLException e) {
-            Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
-            mDb = mDbHelper.getReadableDatabase();
-        }
-        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
-        mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+
+	@Before
+	public void setUp() throws Exception {
+
+        mSplitsDbAdapter = SplitsDbAdapter.getInstance();//new SplitsDbAdapter(mDb);
+        mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();//new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();//new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
 		mAccountsDbAdapter.deleteAllRecords();
 		Account first = new Account(ALPHA_ACCOUNT_NAME);
         first.setUID(ALPHA_ACCOUNT_NAME);
@@ -49,15 +46,18 @@ protected void setUp() throws Exception {
 		mAccountsDbAdapter.addAccount(second);
 		mAccountsDbAdapter.addAccount(first);
 	}
-	
+
+    @Test
 	public void testAlphabeticalSorting(){
+
 		List<Account> accountsList = mAccountsDbAdapter.getAllAccounts();
 		assertEquals(2, accountsList.size());
 		//bravo was saved first, but alpha should be first alphabetically
 		assertEquals(ALPHA_ACCOUNT_NAME, accountsList.get(0).getName());
 		assertEquals(BRAVO_ACCOUNT_NAME, accountsList.get(1).getName());
 	}
-	
+
+    @Test
 	public void testTransactionsHaveSameCurrencyAsAccount(){
 		Account acc1 = new Account("Japanese", Currency.getInstance("JPY"));
 		acc1.setUID("simile");
@@ -74,6 +74,7 @@ public void testTransactionsHaveSameCurrencyAsAccount(){
 		}
 	}
 
+    @Test
     public void testAddAccountWithTransaction(){
         Account account1 = new Account("AlphaAccount");
         Account account2 = new Account("BetaAccount");
@@ -92,6 +93,7 @@ public void testAddAccountWithTransaction(){
     /**
      * Tests the foreign key constraint "ON DELETE CASCADE" between accounts and splits
      */
+    @Test
     public void testDeletingAccountShouldDeleteSplits(){
         Transaction transaction = new Transaction("TestTrn");
         Split split = new Split(Money.getZeroInstance(), ALPHA_ACCOUNT_NAME);
@@ -108,11 +110,8 @@ public void testDeletingAccountShouldDeleteSplits(){
         assertEquals(BRAVO_ACCOUNT_NAME, trxn.getSplits().get(0).getAccountUID());
     }
 
-	@Override
-	protected void tearDown() throws Exception {
-		super.tearDown();
+	@After
+	public void tearDown() throws Exception {
 		mAccountsDbAdapter.deleteAllRecords();
-        mDbHelper.close();
-        mDb.close();
 	}
 }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
similarity index 64%
rename from app/src/androidTest/java/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
rename to app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index bd532e0d..f246055c 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -1,46 +1,41 @@
-package org.gnucash.android.test.db;
+package org.gnucash.android.test.unit.db;
 
-import java.util.List;
-
-import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.BuildConfig;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
 
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
-import android.test.AndroidTestCase;
-import android.util.Log;
+import static org.junit.Assert.assertEquals;
 
-public class TransactionsDbAdapterTest extends AndroidTestCase {
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class TransactionsDbAdapterTest {
 	private static final String ALPHA_ACCOUNT_NAME  = "Alpha";
 	private static final String BRAVO_ACCOUNT_NAME  = "Bravo";
 	private static final String ALPHA_ACCOUNT_UID   = "alpha-team";
 	private static final String BRAVO_ACCOUNT_UID   = "bravo-team";
 
-    private DatabaseHelper mDbHelper;
-    private SQLiteDatabase mDb;
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
 	
-	@Override
-	protected void setUp() throws Exception {
-		super.setUp();
-        mDbHelper = new DatabaseHelper(getContext());
-        try {
-            mDb = mDbHelper.getWritableDatabase();
-        } catch (SQLException e) {
-            Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
-            mDb = mDbHelper.getReadableDatabase();
-        }
-        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
-        mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+	@Before
+	public void setUp() throws Exception {
+        mSplitsDbAdapter = SplitsDbAdapter.getInstance();
+        mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 
         Account first = new Account(ALPHA_ACCOUNT_NAME);
 		first.setUID(ALPHA_ACCOUNT_UID);
@@ -65,18 +60,16 @@ protected void setUp() throws Exception {
 		mAccountsDbAdapter.addAccount(second);
 		mAccountsDbAdapter.addAccount(first);
 	}
-	
+
+	@Test
 	public void testTransactionsAreTimeSorted(){
 		List<Transaction> transactionsList = mTransactionsDbAdapter.getAllTransactionsForAccount(ALPHA_ACCOUNT_UID);
 		assertEquals("T1000", transactionsList.get(0).getDescription());
 		assertEquals("T800", transactionsList.get(1).getDescription());
 	}
 	
-	@Override
-	protected void tearDown() throws Exception {
-		super.tearDown();
+	@After
+	public void tearDown() throws Exception {
 		mAccountsDbAdapter.deleteAllRecords();
-        mDbHelper.close();
-        mDb.close();
 	}
 }
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
new file mode 100644
index 00000000..25194af3
--- /dev/null
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
@@ -0,0 +1,26 @@
+package org.gnucash.android.test.unit.model;
+
+import junit.framework.TestCase;
+
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class AccountTest extends TestCase {
+
+
+	public AccountTest(String name) {
+		super(name);
+	}
+
+	public void testAccountUsesDefaultCurrency(){
+		Account account = new Account("Dummy account");
+		assertThat(account.getCurrency().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+	}
+
+	public void testAccountAlwaysHasUID(){
+		Account account = new Account("Dummy");
+		assertThat(account.getUID()).isNotNull();
+	}
+}
diff --git a/app/src/androidTest/java/org/gnucash/android/test/model/MoneyTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
similarity index 99%
rename from app/src/androidTest/java/org/gnucash/android/test/model/MoneyTest.java
rename to app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
index bdf4a878..90beda6d 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/model/MoneyTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.gnucash.android.test.model;
+package org.gnucash.android.test.unit.model;
 
 import java.math.BigDecimal;
 import java.util.Currency;
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
new file mode 100644
index 00000000..f0750355
--- /dev/null
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
@@ -0,0 +1,36 @@
+package org.gnucash.android.test.unit.model;
+
+import junit.framework.TestCase;
+
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Test cases for Splits
+ *
+ * @author Ngewi
+ */
+public class SplitTest extends TestCase {
+
+    public void testAddingSplitToTransaction(){
+        Split split = new Split(Money.getZeroInstance(), "Test");
+        assertThat(split.getTransactionUID()).isEmpty();
+
+        Transaction transaction = new Transaction("Random");
+        transaction.addSplit(split);
+
+        assertThat(transaction.getUID()).isEqualTo(split.getTransactionUID());
+
+    }
+
+    public void testCsvGeneration(){
+
+    }
+
+    public void testParsingCsv(){
+
+    }
+}
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java
new file mode 100644
index 00000000..e5ebffb2
--- /dev/null
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java
@@ -0,0 +1,34 @@
+package org.gnucash.android.test.unit.model;
+
+import junit.framework.TestCase;
+
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Transaction;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class TransactionTest extends TestCase {
+
+	public TransactionTest(String name) {
+		super(name);
+	}
+
+	public void testCloningTransaction(){
+		Transaction transaction = new Transaction("Bobba Fett");
+		assertThat(transaction.getUID()).isNotNull();
+		assertThat(transaction.getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+
+		Transaction clone1 = new Transaction(transaction, false);
+		assertThat(transaction.getUID()).isEqualTo(clone1.getUID());
+		assertEquals(transaction, clone1);
+
+		Transaction clone2 = new Transaction(transaction, true);
+		assertThat(transaction.getUID()).isNotEqualTo(clone2.getUID());
+		assertThat(transaction.getCurrencyCode()).isEqualTo(clone2.getCurrencyCode());
+		assertThat(transaction.getDescription()).isEqualTo(clone2.getDescription());
+		assertThat(transaction.getNote()).isEqualTo(clone2.getNote());
+		assertThat(transaction.getTimeMillis()).isEqualTo(clone2.getTimeMillis());
+		//TODO: Clone the created_at and modified_at times?
+
+	}
+}
diff --git a/build.gradle b/build.gradle
index eb6249b3..d27b2469 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
 		jcenter()
 	}
 	dependencies {
-		classpath 'com.android.tools.build:gradle:1.1.0'
+		classpath 'com.android.tools.build:gradle:1.2.2'
 		classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
 	}
 }
@@ -15,6 +15,7 @@ allprojects {
         maven { url "https://repo.commonsware.com.s3.amazonaws.com"}
 		maven { url 'http://download.crashlytics.com/maven' }
         maven { url "https://jitpack.io" }
+		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
         jcenter()		
         mavenCentral()
     }
