From d1596e8ac829bc7e2c51b064030bf9942012d1fd Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 27 Jan 2014 11:55:21 +0100
Subject: [PATCH] Feature: Mark accounts as favorite Feature: Display recent &
 favorite accounts in their own views

---
 app/res/layout/activity_accounts.xml               |  28 ++-
 app/res/menu/sub_account_actions.xml               |   4 +
 app/res/menu/transactions_list_actions.xml         |   4 +
 app/res/values-de/strings.xml                      |   5 +-
 app/res/values-el/strings.xml                      |   5 +-
 app/res/values-es-rMX/strings.xml                  |   5 +-
 app/res/values-es/strings.xml                      |   5 +-
 app/res/values-fr/strings.xml                      |   5 +-
 app/res/values-hu/strings.xml                      |   5 +-
 app/res/values-it/strings.xml                      |   5 +-
 app/res/values-nb/strings.xml                      |   5 +-
 app/res/values-nl/strings.xml                      |   5 +-
 app/res/values-pt-rBR/strings.xml                  |   5 +-
 app/res/values-ru/strings.xml                      |   5 +-
 app/res/values-zh/strings.xml                      |   5 +-
 app/res/values/strings.xml                         |   3 +
 app/src/org/gnucash/android/data/Account.java      |  20 ++
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  85 +++++++-
 .../org/gnucash/android/db/DatabaseAdapter.java    |   3 +-
 app/src/org/gnucash/android/db/DatabaseHelper.java |  21 +-
 .../android/ui/accounts/AccountsActivity.java      | 213 ++++++++++++++++-----
 .../android/ui/accounts/AccountsListFragment.java  |  73 +++++--
 .../RecurringTransactionsListFragment.java         |   2 +-
 .../ui/transactions/TransactionsActivity.java      |  74 ++++---
 .../ui/transactions/TransactionsListFragment.java  |  20 +-
 25 files changed, 476 insertions(+), 134 deletions(-)

diff --git a/app/res/layout/activity_accounts.xml b/app/res/layout/activity_accounts.xml
index b45ed25b..bbc5ff25 100644
--- a/app/res/layout/activity_accounts.xml
+++ b/app/res/layout/activity_accounts.xml
@@ -15,9 +15,25 @@
  limitations under the License.
 -->
 
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/fragment_container"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent" >
-    
-</FrameLayout>
\ No newline at end of file
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:id="@+id/fragment_container"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" >
+
+    <com.viewpagerindicator.TitlePageIndicator
+            android:id="@+id/titles"
+            android:layout_height="wrap_content"
+            android:layout_width="fill_parent"
+            android:textColor="@color/title_green"
+            app:footerColor="@color/title_green"
+            app:selectedColor="@color/title_green"
+            app:selectedBold="true"/>
+
+    <android.support.v4.view.ViewPager
+            android:id="@+id/pager"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/res/menu/sub_account_actions.xml b/app/res/menu/sub_account_actions.xml
index 6da5086a..0a9763e9 100644
--- a/app/res/menu/sub_account_actions.xml
+++ b/app/res/menu/sub_account_actions.xml
@@ -15,6 +15,10 @@
  limitations under the License.
 -->
 <menu xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item android:id="@+id/menu_favorite_account"
+          android:icon="@android:drawable/btn_star_big_off"
+          android:showAsAction="always" />
+
     <item android:id="@+id/menu_add_account"
           android:icon="@drawable/content_new_holo_dark"
           android:title="@string/title_add_account"
diff --git a/app/res/menu/transactions_list_actions.xml b/app/res/menu/transactions_list_actions.xml
index 6158f1e9..05ddfb6d 100644
--- a/app/res/menu/transactions_list_actions.xml
+++ b/app/res/menu/transactions_list_actions.xml
@@ -16,6 +16,10 @@
 -->
 
 <menu xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <item android:id="@+id/menu_favorite_account"
+          android:icon="@android:drawable/btn_star_big_off"
+          android:showAsAction="always" />
     <item android:id="@+id/menu_add_transaction"
           android:icon="@drawable/content_new_holo_dark"
           android:title="@string/title_add_transaction"
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 2f7df41a..ddbd990e 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -342,7 +342,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Ausgleichskonto</string>
@@ -378,4 +378,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 36a15629..4f93d559 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -356,7 +356,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -392,4 +392,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index a85e571a..4b341125 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -340,7 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -376,4 +376,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 6e19f95b..db36b152 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -340,7 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -376,4 +376,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index feea7055..60ab6853 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -338,7 +338,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -374,4 +374,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 32bc6988..46017bb6 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -341,7 +341,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -377,4 +377,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 39e726da..18c30a8e 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -341,7 +341,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -377,4 +377,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 559ce807..442d2907 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -343,7 +343,7 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -379,4 +379,7 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index d7c02fe0..cba54f0c 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -342,7 +342,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -378,4 +378,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index e6d521a0..d645aec7 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -340,7 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -376,4 +376,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 4900ffa4..b63b5ed1 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -338,7 +338,7 @@
     <string name="menu_search_accounts"></string>
     <string name="title_default_export_format">   </string>
     <string name="summary_default_export_format"> ,     </string>
-    <string name="menu_export_transactions"> ...</string>
+    <string name="menu_export_transactions"> </string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name"></string>
@@ -374,4 +374,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index c2b8e32f..63bf5255 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -338,7 +338,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
-    <string name="menu_export_transactions">Export transactions...</string>
+    <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
@@ -374,4 +374,7 @@
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 6f98b877..43dff129 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -611,4 +611,7 @@
     <string name="color_swatch_description_selected">Color <xliff:g id="color_index" example="14">%1$d</xliff:g> selected</string>
     <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+    <string name="title_recent_accounts">Recent</string>
+    <string name="title_favorite_accounts">Favorites</string>
+    <string name="title_all_accounts">All</string>
 </resources>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index 2920b05a..6f29d124 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -133,6 +133,11 @@ public boolean hasInvertedCredit(){
      */
     private String mColorCode;
 
+    /**
+     * Flag which marks this account as a favorite account
+     */
+    private boolean mIsFavorite;
+
 	/**
 	 * An extra key for passing the currency code (according ISO 4217) in an intent
 	 */
@@ -360,6 +365,21 @@ public void setColorCode(String colorCode) {
         this.mColorCode = colorCode;
     }
 
+    /**
+     * Tests if this account is a favorite account or not
+     * @return <code>true</code> if account is flagged as favorite, <code>false</code> otherwise
+     */
+    public boolean isFavorite() {
+        return mIsFavorite;
+    }
+
+    /**
+     * Toggles the favorite flag on this account on or off
+     * @param isFavorite <code>true</code> if account should be flagged as favorite, <code>false</code> otherwise
+     */
+    public void setFavorite(boolean isFavorite) {
+        this.mIsFavorite = isFavorite;
+    }
 
     /**
 	 * @return the mCurrency
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 057a3bd4..1cd306ac 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -77,7 +77,7 @@ public long addAccount(Account account){
         contentValues.put(DatabaseHelper.KEY_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
         contentValues.put(DatabaseHelper.KEY_PLACEHOLDER, account.isPlaceholderAccount() ? 1 : 0);
         contentValues.put(DatabaseHelper.KEY_COLOR_CODE, account.getColorHexCode());
-
+        contentValues.put(DatabaseHelper.KEY_FAVORITE, account.isFavorite() ? 1 : 0);
 		long rowId = -1;
 		if ((rowId = getAccountID(account.getUID())) > 0){
 			//if account already exists, then just update
@@ -102,17 +102,32 @@ public long addAccount(Account account){
      * This feature goes through all the rows in the accounts and changes value for <code>columnKey</code> to <code>newValue</code><br/>
      * The <code>newValue</code> parameter is taken as string since SQLite typically stores everything as text.
      * <p><b>This method affects all rows, exercise caution when using it</b></p>
-     * @param columnKey Column name to be changed
+     * @param columnKey Name of column to be updated
      * @param newValue New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateAccounts(String columnKey, String newValue){
+    public int updateAllAccounts(String columnKey, String newValue){
         ContentValues contentValues = new ContentValues();
         contentValues.put(columnKey, newValue);
 
         return mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME, contentValues, null, null);
     }
 
+    /**
+     * Updates a specific entry of an account
+     * @param accountId Database record ID of the account to be updated
+     * @param columnKey Name of column to be updated
+     * @param newValue  New value to be assigned to the columnKey
+     * @return Number of records affected
+     */
+    public int updateAccount(long accountId, String columnKey, String newValue){
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(columnKey, newValue);
+
+        return mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME, contentValues,
+                DatabaseHelper.KEY_ROW_ID + "=" + accountId, null);
+    }
+
 	/**
 	 * Deletes an account with database id <code>rowId</code>
 	 * All the transactions in the account will also be deleted
@@ -201,7 +216,10 @@ public boolean recursiveDestructiveDelete(long accountId){
 
 	/**
 	 * Builds an account instance with the provided cursor.
-	 * The cursor should already be pointing to the account record in the database
+	 * <p>The method will not move the cursor position, so the cursor should already be pointing
+     * to the account record in the database<br/>
+     * <b>Note</b> that this method expects the cursor to contain all columns from the database table</p>
+     *
 	 * @param c Cursor pointing to account record in database
 	 * @return {@link Account} object constructed from database record
 	 */
@@ -218,6 +236,7 @@ public Account buildAccountInstance(Cursor c){
         account.setPlaceHolderFlag(c.getInt(DatabaseAdapter.COLUMN_PLACEHOLDER) == 1);
         account.setDefaultTransferAccountUID(c.getString(DatabaseAdapter.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
         account.setColorCode(c.getString(DatabaseAdapter.COLUMN_COLOR_CODE));
+        account.setFavorite(c.getInt(DatabaseAdapter.COLUMN_FAVORITE) == 1);
 		return account;
 	}
 		
@@ -511,6 +530,7 @@ public Money getAccountBalance(long accountId){
      * @return {@link Cursor} to the sub accounts data set
      */
     public Cursor fetchSubAccounts(long accountId){
+        Log.v(TAG, "Fetching sub accounts for account id " + accountId);
         return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
                 null,
                 DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ?",
@@ -536,6 +556,43 @@ public Cursor fetchTopLevelAccounts(){
     }
 
     /**
+     * Returns a cursor to accounts which have recently had transactions added to them
+     * @return Cursor to recently used accounts
+     */
+    public Cursor fetchRecentAccounts(int numberOfRecents){
+        Cursor recentTxCursor = mDb.query(true, DatabaseHelper.TRANSACTIONS_TABLE_NAME,
+                new String[]{DatabaseHelper.KEY_ACCOUNT_UID},
+                null, null, null, null, DatabaseHelper.KEY_TIMESTAMP, Integer.toString(numberOfRecents));
+        StringBuilder recentAccountUIDs = new StringBuilder("(");
+        while (recentTxCursor.moveToNext()){
+            String uid = recentTxCursor.getString(recentTxCursor.getColumnIndexOrThrow(DatabaseHelper.KEY_ACCOUNT_UID));
+            recentAccountUIDs.append("'" + uid + "'");
+            if (!recentTxCursor.isLast())
+                recentAccountUIDs.append(",");
+        }
+        recentAccountUIDs.append(")");
+        recentTxCursor.close();
+
+        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+                null, DatabaseHelper.KEY_UID + " IN " + recentAccountUIDs.toString(),
+                null, null, null, DatabaseHelper.KEY_NAME + " ASC");
+
+    }
+
+    /**
+     * Fetches favorite accounts from the database
+     * @return Cursor holding set of favorite accounts
+     */
+    public Cursor fetchFavoriteAccounts(){
+        Log.v(TAG, "Fetching favorite accounts from db");
+        String condition = DatabaseHelper.KEY_FAVORITE + " = 1";
+        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+                null, condition, null, null, null,
+                DatabaseHelper.KEY_NAME + " ASC");
+        return cursor;
+    }
+
+    /**
      * Returns the GnuCash ROOT account UID.
      * <p>In GnuCash desktop account structure, there is a root account (which is not visible in the UI) from which
      * other top level accounts derive. GnuCash Android does not have this ROOT account by default unless the account
@@ -742,6 +799,26 @@ public boolean isPlaceholderAccount(long accountId){
         return isPlaceholderAccount(getAccountUID(accountId));
     }
 
+    /**
+     * Returns true if the account is a favorite account, false otherwise
+     * @param accountId Record ID of the account
+     * @return <code>true</code> if the account is a favorite account, <code>false</code> otherwise
+     */
+    public boolean isFavoriteAccount(long accountId){
+        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_FAVORITE},
+                DatabaseHelper.KEY_ROW_ID + " = " + accountId, null,
+                null, null, null);
+
+        if (cursor == null || !cursor.moveToFirst()){
+            return false;
+        }
+        boolean isFavorite = cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_FAVORITE)) == 1;
+        cursor.close();
+
+        return isFavorite;
+    }
+
 	/**
 	 * Deletes all accounts and their transactions from the database
 	 */
diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 499e7e4a..620c8b93 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -57,7 +57,8 @@
     public static final int COLUMN_PLACEHOLDER          = 6;
     public static final int COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID = 7;
     public static final int COLUMN_COLOR_CODE           = 8;
-	
+	public static final int COLUMN_FAVORITE             = 9;
+
 	/**
 	 * {@link DatabaseHelper} for creating and opening the database
 	 */
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index fca70b3e..f27a7527 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -46,7 +46,7 @@
 	 * Database version.
 	 * With any change to the database schema, this number must increase
 	 */
-	private static final int DATABASE_VERSION = 4;
+	private static final int DATABASE_VERSION = 5;
 	
 	/**
 	 * Name of accounts table
@@ -146,6 +146,11 @@
      */
     public static final String KEY_RECURRENCE_PERIOD = "recurrence_period";
 
+    /**
+     * Marks an account as a favourite account
+     */
+    public static final String KEY_FAVORITE = "favorite";
+
 	/**********************************************************************************************************
 	//if you modify the order of the columns (i.e. the way they are created), 
 	//make sure to modify the indices in DatabaseAdapter
@@ -161,9 +166,10 @@
 			+ KEY_TYPE 	+ " varchar(255) not null, "			
 			+ KEY_CURRENCY_CODE + " varchar(255) not null, "
 			+ KEY_PARENT_ACCOUNT_UID + " varchar(255), "
-            + KEY_PLACEHOLDER + " tinyint default 0, "
+            + KEY_PLACEHOLDER   + " tinyint default 0, "
             + KEY_DEFAULT_TRANSFER_ACCOUNT_UID + " varchar(255), "
-            + KEY_COLOR_CODE + " varchar(255), "
+            + KEY_COLOR_CODE    + " varchar(255), "
+            + KEY_FAVORITE 		+ " tinyint default 0, "
 			+ "UNIQUE (" + KEY_UID + ")"	
 			+ ");";
 	
@@ -260,6 +266,15 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
                 oldVersion = 4;
             }
+
+            if (oldVersion == 4 && newVersion >= 5){
+                Log.i(TAG, "Upgrading database to version 5");
+                String addAccountFavorite = " ALTER TABLE " + ACCOUNTS_TABLE_NAME
+                        + " ADD COLUMN " + KEY_FAVORITE + " tinyint default 0";
+                db.execSQL(addAccountFavorite);
+
+                oldVersion = 5;
+            }
 		}
 
         if (oldVersion != newVersion) {
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index 29b40f70..7190b4e6 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -31,28 +31,33 @@
 import android.preference.PreferenceManager;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentStatePagerAdapter;
 import android.support.v4.app.FragmentTransaction;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
 import android.util.Log;
+import android.util.SparseArray;
 import android.view.View;
+import android.view.ViewGroup;
 import android.widget.Toast;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Account.AccountType;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.ui.Refreshable;
 import org.gnucash.android.ui.transactions.RecurringTransactionsListFragment;
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
 import org.gnucash.android.util.GnucashAccountXmlHandler;
 import org.gnucash.android.util.OnAccountClickedListener;
 
-import java.util.ArrayList;
-import java.util.Currency;
-import java.util.Locale;
+import java.util.*;
 
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
@@ -80,9 +85,39 @@
 	/**
 	 * Logging tag
 	 */
-	protected static final String TAG = "AccountsActivity";	
-	
-	/**
+	protected static final String TAG = "AccountsActivity";
+
+    /**
+     * Intent action for viewing recurring transactions
+     */
+    public static final String ACTION_VIEW_RECURRING = "org.gnucash.android.action.VEIW_RECURRING";
+
+    /**
+     * Number of pages to show
+     */
+    private static final int DEFAULT_NUM_PAGES = 3;
+
+    /**
+     * Index for the recent accounts tab
+     */
+    public static final int INDEX_RECENT_ACCOUNTS_FRAGMENT = 0;
+
+    /**
+     * Index of the top level (all) accounts tab
+     */
+    public static final int INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT = 1;
+
+    /**
+     * Index of the favorite accounts tab
+     */
+    public static final int INDEX_FAVORITE_ACCOUNTS_FRAGMENT = 2;
+
+    /**
+     * Map containing fragments for the different tabs
+     */
+    private SparseArray<Refreshable> mFragmentPageReferenceMap = new SparseArray<Refreshable>();
+
+    /**
 	 * Stores the indices of accounts which have been selected by the user for creation from the dialog.
 	 * The account names are stored as string resources and the selected indices are then used to choose which accounts to create
 	 * The dialog for creating default accounts is only shown when the app is started for the first time.
@@ -93,38 +128,84 @@
 	 * Dialog which is shown to the user on first start prompting the user to create some accounts
 	 */
 	private AlertDialog mDefaultAccountsDialog;
-	
+
+
+    /**
+     * Adapter for managing the sub-account and transaction fragment pages in the accounts view
+     */
+    private class AccountViewPagerAdapter extends FragmentStatePagerAdapter {
+
+        public AccountViewPagerAdapter(FragmentManager fm){
+            super(fm);
+        }
+
+        @Override
+        public Fragment getItem(int i) {
+            AccountsListFragment currentFragment;
+            switch (i){
+                case INDEX_RECENT_ACCOUNTS_FRAGMENT:
+                    currentFragment = AccountsListFragment.newInstance(AccountsListFragment.DisplayMode.RECENT);
+                    break;
+
+                case INDEX_FAVORITE_ACCOUNTS_FRAGMENT:
+                    currentFragment = AccountsListFragment.newInstance(AccountsListFragment.DisplayMode.FAVORITES);
+                    break;
+
+                case INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT:
+                default:
+                    currentFragment = AccountsListFragment.newInstance(AccountsListFragment.DisplayMode.TOP_LEVEL);
+                    break;
+            }
+
+            mFragmentPageReferenceMap.put(i, currentFragment);
+            return currentFragment;
+        }
+
+        @Override
+        public void destroyItem(ViewGroup container, int position, Object object) {
+            super.destroyItem(container, position, object);
+            mFragmentPageReferenceMap.remove(position);
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            switch (position){
+                case INDEX_RECENT_ACCOUNTS_FRAGMENT:
+                    return getString(R.string.title_recent_accounts);
+
+                case INDEX_FAVORITE_ACCOUNTS_FRAGMENT:
+                    return getString(R.string.title_favorite_accounts);
+
+                case INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT:
+                default:
+                    return getString(R.string.title_all_accounts);
+            }
+        }
+
+        @Override
+        public int getCount() {
+            return DEFAULT_NUM_PAGES;
+        }
+    }
+
+
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_accounts);
 
-		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
-		Locale locale = Locale.getDefault();
-		//sometimes the locale en_UK is returned which causes a crash with Currency
-		if (locale.getCountry().equals("UK")) {
-		    locale = new Locale(locale.getLanguage(), "GB");
-		}
-		String currencyCode = null;
-		try { //there are some strange locales out there
-			currencyCode = prefs.getString(getString(R.string.key_default_currency), 
-					Currency.getInstance(locale).getCurrencyCode());
-		} catch (Exception e) {
-			Log.e(TAG, e.getMessage());
-			currencyCode = "USD"; //just use USD and let the user choose
-		}
-					
-		Money.DEFAULT_CURRENCY_CODE = currencyCode;		
-		
-		boolean firstRun = prefs.getBoolean(getString(R.string.key_first_run), true);
-		if (firstRun){
-			createDefaultAccounts();
-		}
+        init();
+
+        ViewPager pager = (ViewPager) findViewById(R.id.pager);
+        TitlePageIndicator titlePageIndicator = (TitlePageIndicator) findViewById(R.id.titles);
 
         final Intent intent = getIntent();
         String action = intent.getAction();
         if (action != null && action.equals(Intent.ACTION_INSERT_OR_EDIT)) {
             //enter account creation/edit mode if that was specified
+            pager.setVisibility(View.GONE);
+            titlePageIndicator.setVisibility(View.GONE);
+
             long accountId = intent.getLongExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, 0L);
             if (accountId > 0)
                 showEditAccountFragment(accountId);
@@ -132,30 +213,52 @@ public void onCreate(Bundle savedInstanceState) {
                 long parentAccountId = intent.getLongExtra(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, 0L);
                 showAddAccountFragment(parentAccountId);
             }
+        } else if (action != null && action.equals(ACTION_VIEW_RECURRING)) {
+            pager.setVisibility(View.GONE);
+            titlePageIndicator.setVisibility(View.GONE);
+            showRecurringTransactionsFragment();
         } else {
             //show the simple accounts list
+            PagerAdapter mPagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
+            pager.setAdapter(mPagerAdapter);
+            titlePageIndicator.setViewPager(pager);
+            pager.setCurrentItem(INDEX_TOP_LEVEL_ACCOUNTS_FRAGMENT);
+        }
 
-            FragmentManager fragmentManager = getSupportFragmentManager();
-            AccountsListFragment accountsListFragment = (AccountsListFragment) fragmentManager
-                    .findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
-
-            if (accountsListFragment == null) {
-                FragmentTransaction fragmentTransaction = fragmentManager
-                        .beginTransaction();
-                fragmentTransaction.add(R.id.fragment_container,
-                        new AccountsListFragment(), FRAGMENT_ACCOUNTS_LIST);
+	}
 
-                fragmentTransaction.commit();
-            } else
-                accountsListFragment.refresh();
+    /**
+     * Loads default setting for currency and performs app first-run initialization
+     */
+    private void init() {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
+        Locale locale = Locale.getDefault();
+        //sometimes the locale en_UK is returned which causes a crash with Currency
+        if (locale.getCountry().equals("UK")) {
+            locale = new Locale(locale.getLanguage(), "GB");
+        }
+        String currencyCode = null;
+        try { //there are some strange locales out there
+            currencyCode = prefs.getString(getString(R.string.key_default_currency),
+                    Currency.getInstance(locale).getCurrencyCode());
+        } catch (Exception e) {
+            Log.e(TAG, e.getMessage());
+            currencyCode = "USD"; //just use USD and let the user choose
         }
 
+        Money.DEFAULT_CURRENCY_CODE = currencyCode;
+
         if (hasNewFeatures()){
-			showWhatsNewDialog();
-		}
-	}
+            showWhatsNewDialog();
+        }
 
-	/**
+        boolean firstRun = prefs.getBoolean(getString(R.string.key_first_run), true);
+        if (firstRun){
+            createDefaultAccounts();
+        }
+    }
+
+    /**
 	 * Checks if the minor version has been increased and displays the What's New dialog box.
 	 * This is the minor version as per semantic versioning.
 	 * @return <code>true</code> if the minor version has been increased, <code>false</code> otherwise.
@@ -225,7 +328,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	        return true;
 
             case R.id.menu_recurring_transactions:
-                showRecurringTransactionsFragment();
+                Intent intent = new Intent(this, AccountsActivity.class);
+                intent.setAction(ACTION_VIEW_RECURRING);
+                startActivity(intent);
                 return true;
 		default:
 			return false;
@@ -233,6 +338,16 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	}
 
     /**
+     * Creates an intent which can be used start activity for creating new account
+     * @return Intent which can be used to start activity for creating new account
+     */
+    private Intent createNewAccountIntent(){
+        Intent addAccountIntent = new Intent(this, AccountsActivity.class);
+        addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+        return addAccountIntent;
+    }
+
+    /**
      * Shows form fragment for creating a new account
      * @param parentAccountId Record ID of the parent account present. Can be 0 for top-level account
      */
@@ -255,7 +370,6 @@ private void showRecurringTransactionsFragment(){
         fragmentTransaction.replace(R.id.fragment_container,
                 recurringTransactionsFragment, "fragment_recurring_transactions");
 
-        fragmentTransaction.addToBackStack(null);
         fragmentTransaction.commit();
     }
     /**
@@ -293,12 +407,7 @@ private void showAccountFormFragment(Bundle args){
 	 * @param v View which triggered this callback
 	 */
 	public void onNewAccountClick(View v) {
-		AccountsListFragment accountFragment = (AccountsListFragment) getSupportFragmentManager()
-				.findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
-		if (accountFragment != null)
-			accountFragment.showAddAccountFragment(0);
-        else
-            showAddAccountFragment(0);
+        startActivity(createNewAccountIntent());
 	}
 
 	/**
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index 03e1b9cb..9ca0ffba 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -37,10 +37,7 @@
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.TextUtils;
 import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.TouchDelegate;
-import android.view.View;
-import android.view.ViewGroup;
+import android.view.*;
 import android.widget.*;
 import android.widget.AdapterView.OnItemLongClickListener;
 import com.actionbarsherlock.app.ActionBar;
@@ -51,6 +48,7 @@
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
@@ -76,17 +74,41 @@
         com.actionbarsherlock.widget.SearchView.OnQueryTextListener,
         com.actionbarsherlock.widget.SearchView.OnCloseListener {
 
+    /**
+     * Describes the kinds of accounts that should be loaded in the accounts list.
+     * This enhances reuse of the accounts list fragment
+     */
+    public enum DisplayMode {
+        TOP_LEVEL, RECENT, FAVORITES
+    }
+
+    /**
+     * Field indicating which kind of accounts to load.
+     * Default value is {@link DisplayMode#TOP_LEVEL}
+     */
+    private DisplayMode mDisplayMode = DisplayMode.TOP_LEVEL;
+
+    /**
+     * Request code for GnuCash account structure file to import
+     */
     public static final int REQUEST_PICK_ACCOUNTS_FILE = 0x1;
+
+    /**
+     * Request code for opening the account to edit
+     */
+    private static final int REQUEST_EDIT_ACCOUNT = 0x10;
+
     /**
      * Key for passing argument for the parent account ID.
      * When this argument is set, only sub-accounts of the account will be loaded.
      */
     public static final String ARG_PARENT_ACCOUNT_ID = "parent_account_id";
+
     /**
      * Logging tag
      */
     protected static final String TAG = "AccountsListFragment";
-    private static final int REQUEST_EDIT_ACCOUNT = 0x10;
+
 
     /**
      * {@link ListAdapter} for the accounts which will be bound to the list
@@ -178,6 +200,12 @@ public void onDestroyActionMode(ActionMode mode) {
         }
     };
 
+    public static AccountsListFragment newInstance(DisplayMode displayMode){
+        AccountsListFragment fragment = new AccountsListFragment();
+        fragment.mDisplayMode = displayMode;
+        return fragment;
+    }
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
@@ -360,14 +388,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
 
             case R.id.menu_add_account:
-                if (mParentAccountId > 0){
-                    Intent addAccountIntent = new Intent(getActivity(), AccountsActivity.class);
-                    addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-                    addAccountIntent.putExtra(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mParentAccountId);
-                    startActivityForResult(addAccountIntent, REQUEST_EDIT_ACCOUNT);
-                } else {
-                    showAddAccountFragment(mParentAccountId);
-                }
+                Intent addAccountIntent = new Intent(getActivity(), AccountsActivity.class);
+                addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+                addAccountIntent.putExtra(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mParentAccountId);
+                startActivityForResult(addAccountIntent, REQUEST_EDIT_ACCOUNT);
                 return true;
 
             case R.id.menu_export:
@@ -482,7 +506,7 @@ public void showExportDialog() {
         if (mCurrentFilter != null){
             return new AccountsCursorLoader(getActivity(), mCurrentFilter);
         } else {
-            return new AccountsCursorLoader(this.getActivity(), accountId);
+            return new AccountsCursorLoader(this.getActivity(), accountId, mDisplayMode);
         }
     }
 
@@ -596,6 +620,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
     private static final class AccountsCursorLoader extends DatabaseCursorLoader {
         private long mParentAccountId = -1;
         private String mFilter;
+        private DisplayMode mDisplayMode = DisplayMode.TOP_LEVEL;
 
         /**
          * Initializes the loader to load accounts from the database.
@@ -604,9 +629,10 @@ public void onClick(DialogInterface dialog, int whichButton) {
          * @param context Application context
          * @param parentAccountId Record ID of the parent account
          */
-        public AccountsCursorLoader(Context context, long parentAccountId) {
+        public AccountsCursorLoader(Context context, long parentAccountId, DisplayMode displayMode) {
             super(context);
             mParentAccountId = parentAccountId;
+            this.mDisplayMode = displayMode;
         }
 
         /**
@@ -632,8 +658,21 @@ public Cursor loadInBackground() {
             } else {
                 if (mParentAccountId > 0)
                     cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchSubAccounts(mParentAccountId);
-                else
-                    cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchTopLevelAccounts();
+                else {
+                    switch (this.mDisplayMode){
+                        case RECENT:
+                            cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchRecentAccounts(10);
+                            break;
+                        case FAVORITES:
+                            cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchFavoriteAccounts();
+                            break;
+                        case TOP_LEVEL:
+                        default:
+                            cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchTopLevelAccounts();
+                            break;
+                    }
+                }
+
             }
 
             if (cursor != null)
diff --git a/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java
index 9ac7e00c..a09e3afe 100644
--- a/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/RecurringTransactionsListFragment.java
@@ -411,7 +411,7 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView dateHeader = (TextView) view.findViewById(R.id.date_section_header);
 
             if (hasSectionHeader){
-                dateHeader.setText(getString(R.string.label_account) + ": " + accountsDbAdapter.getAccountName(currentAccountUid));
+                dateHeader.setText(accountsDbAdapter.getFullyQualifiedAccountName(currentAccountUid));
                 dateHeader.setVisibility(View.VISIBLE);
             } else {
                 dateHeader.setVisibility(View.GONE);
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index 775c8eaa..2d03994b 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -21,11 +21,15 @@
 import android.database.Cursor;
 import android.graphics.Color;
 import android.os.Bundle;
-import android.support.v4.app.*;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentStatePagerAdapter;
+import android.support.v4.app.FragmentTransaction;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import android.support.v4.widget.ResourceCursorAdapter;
 import android.util.Log;
+import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
@@ -34,12 +38,14 @@
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.ActionBar.OnNavigationListener;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
+import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
+import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.ui.Refreshable;
 import org.gnucash.android.ui.accounts.AccountsActivity;
 import org.gnucash.android.ui.accounts.AccountsListFragment;
@@ -47,9 +53,6 @@
 import org.gnucash.android.util.OnTransactionClickedListener;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Activity for displaying, creating and editing transactions
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -90,15 +93,9 @@
     private static final int DEFAULT_NUM_PAGES = 2;
 
     /**
-     * Pager widget for swiping horizontally between views
+     * Menu item for marking an account as a favorite
      */
-    private ViewPager mPager;
-
-    /**
-     * Provides the pages to the view pager widget
-     */
-    private PagerAdapter mPagerAdapter;
-
+    MenuItem mFavoriteAccountMenu;
 
     /**
 	 * Database ID of {@link Account} whose transactions are displayed 
@@ -120,11 +117,6 @@
     private AccountsDbAdapter mAccountsDbAdapter;
 
     /**
-     * Spinner adapter for the action bar navigation list of accounts
-     */
-    private SpinnerAdapter mSpinnerAdapter;
-
-    /**
      * This is the last known color for the title indicator.
      * This is used to remember the color of the top level account if the child account doesn't have one.
      */
@@ -133,7 +125,7 @@
     private TextView mSectionHeaderTransactions;
     private TitlePageIndicator mTitlePageIndicator;
 
-    private Map<Integer, Refreshable> mFragmentPageReferenceMap = new HashMap();
+    private SparseArray<Refreshable> mFragmentPageReferenceMap = new SparseArray<Refreshable>();
 
 	private OnNavigationListener mTransactionListNavigationListener = new OnNavigationListener() {
 
@@ -260,8 +252,8 @@ private boolean isPlaceHolderAccount(){
      */
     @Override
     public void refresh(long accountId) {
-        for (Refreshable refreshableFragment : mFragmentPageReferenceMap.values()) {
-            refreshableFragment.refresh(accountId);
+        for (int i = 0; i < mFragmentPageReferenceMap.size(); i++) {
+            mFragmentPageReferenceMap.valueAt(i).refresh(accountId);
         }
         mTitlePageIndicator.notifyDataSetChanged();
     }
@@ -277,7 +269,7 @@ protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_transactions);
 
-        mPager = (ViewPager) findViewById(R.id.pager);
+        ViewPager pager = (ViewPager) findViewById(R.id.pager);
         mTitlePageIndicator = (TitlePageIndicator) findViewById(R.id.titles);
         mSectionHeaderTransactions = (TextView) findViewById(R.id.section_header_transactions);
 
@@ -290,18 +282,18 @@ protected void onCreate(Bundle savedInstanceState) {
         setupActionBarNavigation();
 
 		if (getIntent().getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {
-            mPager.setVisibility(View.GONE);
+            pager.setVisibility(View.GONE);
             mTitlePageIndicator.setVisibility(View.GONE);
 
             initializeCreateOrEditTransaction();
         } else {	//load the transactions list
             mSectionHeaderTransactions.setVisibility(View.GONE);
 
-            mPagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
-            mPager.setAdapter(mPagerAdapter);
-            mTitlePageIndicator.setViewPager(mPager);
+            PagerAdapter pagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
+            pager.setAdapter(pagerAdapter);
+            mTitlePageIndicator.setViewPager(pager);
 
-            mPager.setCurrentItem(INDEX_TRANSACTIONS_FRAGMENT);
+            pager.setCurrentItem(INDEX_TRANSACTIONS_FRAGMENT);
 		}
 
 		// done creating, activity now running
@@ -364,7 +356,8 @@ private void setTitleIndicatorColor() {
 	private void setupActionBarNavigation() {
 		// set up spinner adapter for navigation list
 		Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecords();
-		mSpinnerAdapter = new QualifiedAccountNameCursorAdapter(getSupportActionBar().getThemedContext(),
+
+        SpinnerAdapter mSpinnerAdapter = new QualifiedAccountNameCursorAdapter(getSupportActionBar().getThemedContext(),
                 R.layout.sherlock_spinner_item, accountsCursor);
 		((ResourceCursorAdapter) mSpinnerAdapter)
 				.setDropDownViewResource(R.layout.sherlock_spinner_dropdown_item);
@@ -397,6 +390,24 @@ public void updateNavigationSelection() {
 	}
 
     @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        mFavoriteAccountMenu = menu.findItem(R.id.menu_favorite_account);
+        MenuItem favoriteAccountMenuItem = menu.findItem(R.id.menu_favorite_account);
+
+        if (favoriteAccountMenuItem == null) //when the activity is used to edit a transaction
+            return super.onPrepareOptionsMenu(menu);
+
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
+        boolean isFavoriteAccount = accountsDbAdapter.isFavoriteAccount(mAccountId);
+        accountsDbAdapter.close();
+
+        int favoriteIcon = isFavoriteAccount ? android.R.drawable.btn_star_big_on : android.R.drawable.btn_star_big_off;
+        favoriteAccountMenuItem.setIcon(favoriteIcon);
+        return super.onPrepareOptionsMenu(menu);
+
+    }
+
+    @Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
 		case android.R.id.home:
@@ -411,6 +422,15 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	        }
 	        return true;
 
+            case R.id.menu_favorite_account:
+                AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
+                boolean isFavorite = accountsDbAdapter.isFavoriteAccount(mAccountId);
+                //toggle favorite preference
+                accountsDbAdapter.updateAccount(mAccountId, DatabaseHelper.KEY_FAVORITE, isFavorite ? "0" : "1");
+                accountsDbAdapter.close();
+                supportInvalidateOptionsMenu();
+                return true;
+
             case R.id.menu_edit_account:
                 Intent editAccountIntent = new Intent(this, AccountsActivity.class);
                 editAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index 2e6754be..b7c44464 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -47,11 +47,9 @@
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseCursorLoader;
-import org.gnucash.android.db.DatabaseHelper;
-import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.db.*;
 import org.gnucash.android.ui.Refreshable;
 import org.gnucash.android.ui.accounts.AccountsListFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
@@ -252,17 +250,17 @@ public void onListItemClick(ListView l, View v, int position, long id) {
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {		
 		inflater.inflate(R.menu.transactions_list_actions, menu);	
 	}
-	
+
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
-		case R.id.menu_add_transaction:
-			mTransactionEditListener.createNewTransaction(mAccountID);
-			return true;
+            case R.id.menu_add_transaction:
+                mTransactionEditListener.createNewTransaction(mAccountID);
+                return true;
 
-		default:
-			return false;
-		}
+            default:
+                return false;
+        }
 	}
 	
 	@Override
