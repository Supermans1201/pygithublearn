From de24fa3b8c1d4bf26b16468bb58266022f2acf0f Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 3 Apr 2013 23:14:13 +0200
Subject: [PATCH] Feature: implemented importing account structure from Gnucash
 desktop. Option offered on first run of app Fixed: Crash when computing
 account balance for accounts with sub-accounts of different currency. Only
 consider sub-accounts of same currency when computing account balance
 Improved: Added account preferences for deleting all accounts Improved:
 Support for GnuCash ROOT account. Account will never be shown to user

---
 app/res/menu/account_actions.xml                   |   2 +-
 app/res/menu/global_actions.xml                    |   2 +-
 app/res/values-de/strings.xml                      |  15 +
 app/res/values-el/strings.xml                      |  15 +
 app/res/values-es-rMX/strings.xml                  |  15 +
 app/res/values-es/strings.xml                      |  15 +
 app/res/values-fr/strings.xml                      |  15 +
 app/res/values-hu/strings.xml                      |  15 +
 app/res/values-it/strings.xml                      |  15 +
 app/res/values-nb/strings.xml                      |  15 +
 app/res/values-nl/strings.xml                      |  15 +
 app/res/values-pt-rBR/strings.xml                  |  15 +
 app/res/values-ru/strings.xml                      |  15 +
 app/res/values/strings.xml                         |  17 +
 app/res/xml/fragment_about_preferences.xml         |   6 +-
 app/res/xml/fragment_account_preferences.xml       |  10 +
 app/res/xml/preference_headers.xml                 |   4 +-
 app/src/org/gnucash/android/data/Account.java      |   7 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  10 +-
 .../android/ui/accounts/AccountsActivity.java      |  73 +-
 .../android/ui/accounts/AccountsListFragment.java  | 961 +++++++++++----------
 .../ui/settings/AccountPreferencesFragment.java    | 102 +++
 .../settings/DeleteAccountsConfirmationDialog.java |  67 ++
 .../android/ui/settings/SettingsActivity.java      |   6 +-
 .../android/util/GnucashAccountXmlHandler.java     | 143 +++
 25 files changed, 1075 insertions(+), 500 deletions(-)
 create mode 100644 app/res/xml/fragment_account_preferences.xml
 create mode 100644 app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
 create mode 100644 app/src/org/gnucash/android/ui/settings/DeleteAccountsConfirmationDialog.java
 create mode 100644 app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java

diff --git a/app/res/menu/account_actions.xml b/app/res/menu/account_actions.xml
index 89fd15bc..6b594b21 100644
--- a/app/res/menu/account_actions.xml
+++ b/app/res/menu/account_actions.xml
@@ -25,5 +25,5 @@
           android:icon="@drawable/content_import_export_holo_light"
           android:title="@string/menu_export_ofx"
           android:showAsAction="never"
-          android:orderInCategory="3"/>            
+          android:orderInCategory="3"/>
 </menu>
\ No newline at end of file
diff --git a/app/res/menu/global_actions.xml b/app/res/menu/global_actions.xml
index 85f9d49c..287712a4 100644
--- a/app/res/menu/global_actions.xml
+++ b/app/res/menu/global_actions.xml
@@ -21,5 +21,5 @@
           android:icon="@drawable/action_settings"
           android:title="@string/title_settings"
           android:showAsAction="never"
-          android:orderInCategory="4"/>    
+          android:orderInCategory="4"/>
 </menu>
\ No newline at end of file
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 02681fb9..a8553734 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -316,6 +316,21 @@
 	</string>
 	<string name="label_dismiss">Schlieen</string>
     <string name="toast_transanction_amount_required">Geben Sie einen Betrag ein um die Buchung speichern zu knnen</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash Accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index deaf40e1..f9f96801 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -322,6 +322,21 @@
 	</string>
 	<string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index ab94bf09..aa0614fb 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -315,6 +315,21 @@
 	</string>
 	<string name="label_dismiss">Dismiss</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index bc2c76c3..fd288ecc 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -316,6 +316,21 @@
 	</string>
 	<string name="label_dismiss">Cerrar</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index de0632a3..5c1841f0 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -316,6 +316,21 @@
 	</string>
 	<string name="label_dismiss">Passer</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 053a5d41..a66685b7 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -315,6 +315,21 @@
 	</string>
 	<string name="label_dismiss">Dismiss</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index dd4a3e3f..e1ac770d 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -316,6 +316,21 @@
 	</string>
 	<string name="label_dismiss">Chiudi</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 71e844c5..21c1c8da 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -319,6 +319,21 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
 	</string>
 	<string name="label_dismiss">Ferdig</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 973ae9e9..34fbeab0 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -316,6 +316,21 @@
 	</string>
 	<string name="label_dismiss">Wijs af</string>
     <string name="toast_transanction_amount_required">Vul een bedrag in om de transactie op te slaan.</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 334bf4e4..ed585228 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -315,6 +315,21 @@
 	  </string>
 	  <string name="label_dismiss">Descartar</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 83fbb9cc..23419a0e 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -316,6 +316,21 @@
 	</string>
 	<string name="label_dismiss">Dismiss</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash accounts successfully imported</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index f97c9f81..c439cd2d 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -509,6 +509,23 @@
 	</string>
 	<string name="label_dismiss">Dismiss</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+    <string name="menu_import_accounts">Import GnuCash Accounts</string>
+    <string name="btn_import_accounts">Import Accounts</string>
+    <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+    <string name="toast_success_importing_accounts">GnuCash Accounts successfully imported</string>
+    <string name="key_import_accounts">import_gnucash_accounts</string>
+    <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+    <string name="title_import_accounts">Import GnuCash accounts</string>
+    <string name="key_delete_all_accounts">delete_all_accounts</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
+    </string>
+    <string name="title_delete_all_accounts">Delete all accounts</string>
+    <string name="header_account_settings">Accounts</string>
+    <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions? \nThis
+        operation cannot be undone!
+    </string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/xml/fragment_about_preferences.xml b/app/res/xml/fragment_about_preferences.xml
index fb1da8c3..de4a3b91 100644
--- a/app/res/xml/fragment_about_preferences.xml
+++ b/app/res/xml/fragment_about_preferences.xml
@@ -16,13 +16,15 @@
 -->
 
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android" >
-    <Preference android:key="@string/key_about" android:summary="@string/summary_about_gnucash" android:title="@string/title_about"/><Preference android:key="@string/key_build_version" android:title="@string/title_build_version"/>
+    <Preference android:key="@string/key_about" android:summary="@string/summary_about_gnucash"
+                android:title="@string/title_about"/>
+    <Preference android:key="@string/key_build_version" android:title="@string/title_build_version"/>
     <Preference android:summary="@string/summary_licence_details" 
         android:title="@string/title_license" 
         android:key="@string/key_license">
         <intent android:action="android.intent.action.VIEW"
         	android:data="http://www.apache.org/licenses/LICENSE-2.0.html" />
-	</Preference>
+	</Preference>
         
 
 </PreferenceScreen>
\ No newline at end of file
diff --git a/app/res/xml/fragment_account_preferences.xml b/app/res/xml/fragment_account_preferences.xml
new file mode 100644
index 00000000..90171fb1
--- /dev/null
+++ b/app/res/xml/fragment_account_preferences.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+    <Preference android:key="@string/key_import_accounts"
+                android:summary="@string/summary_import_accounts"
+                android:title="@string/title_import_accounts" />
+    <Preference android:key="@string/key_delete_all_accounts"
+                android:summary="@string/summary_delete_all_accounts"
+                android:title="@string/title_delete_all_accounts" />
+</PreferenceScreen>
\ No newline at end of file
diff --git a/app/res/xml/preference_headers.xml b/app/res/xml/preference_headers.xml
index fc86f506..60292ac7 100644
--- a/app/res/xml/preference_headers.xml
+++ b/app/res/xml/preference_headers.xml
@@ -16,7 +16,9 @@
 -->
 <preference-headers xmlns:android="http://schemas.android.com/apk/res/android">
     <header android:fragment="org.gnucash.android.ui.settings.GeneralPreferenceFragment"        
-        android:title="@string/header_general_settings" />    
+        android:title="@string/header_general_settings" />
+    <header android:fragment="org.gnucash.android.ui.settings.AccountPreferencesFragment"
+            android:title="@string/header_account_settings" />
     <header android:fragment="org.gnucash.android.ui.settings.TransactionsPreferenceFragment" 
         android:title="@string/header_transaction_settings" />
     <header android:fragment="org.gnucash.android.ui.settings.AboutPreferenceFragment"
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index c3ad8361..cb742040 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -52,8 +52,11 @@
 	 * they are currently not used except for exporting
 	 */
 	public enum AccountType {CASH, BANK, CREDIT_CARD, ASSET, LIABILITY, INCOME, EXPENSE, 
-							PAYABLE, RECEIVABLE, EQUITY, CURRENCY, STOCK, MUTUAL_FUND};
-	
+							PAYABLE, RECEIVABLE, EQUITY, CURRENCY, STOCK, MUTUAL_FUND, ROOT};
+
+    /**
+     * Accounts types which are used by the OFX standard
+     */
 	public enum OfxAccountType {CHECKING, SAVINGS, MONEYMRKT, CREDITLINE };
 		
 	/**
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 3d22fd15..d9128fe9 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -316,8 +316,9 @@ public String getName(long accountID) {
     @Override
 	public Cursor fetchAllRecords(){
 		Log.v(TAG, "Fetching all accounts from db");
+        String selection =  DatabaseHelper.KEY_TYPE + " != " + "'ROOT'";
 		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                null, null, null, null, null,
+                null, selection, null, null, null,
                 DatabaseHelper.KEY_NAME + " ASC");
 		return cursor;
 	}
@@ -366,7 +367,12 @@ public Money getAccountBalance(long accountId){
         Money balance = Money.createInstance(getCurrencyCode(accountId));
         for (long id : subAccounts){
             //recurse because arbitrary nesting depth is allowed
-            balance = balance.add(getAccountBalance(id));
+            Money subBalance = getAccountBalance(id);
+            if (subBalance.getCurrency().equals(balance.getCurrency())){
+                //only add the balances if they are of the same currency
+                //ignore sub accounts of different currency just like GnuCash desktop does
+                balance = balance.add(getAccountBalance(id));
+            }
         }
         return balance.add(mTransactionsAdapter.getTransactionsSum(accountId));
     }
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index ff288188..b52f363d 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -16,19 +16,6 @@
 
 package org.gnucash.android.ui.accounts;
 
-import java.util.ArrayList;
-import java.util.Currency;
-import java.util.Locale;
-
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Money;
-import org.gnucash.android.data.Account.AccountType;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.ui.transactions.TransactionsActivity;
-import org.gnucash.android.ui.transactions.TransactionsListFragment;
-import org.gnucash.android.util.OnAccountClickedListener;
-
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -43,11 +30,25 @@
 import android.support.v4.app.FragmentTransaction;
 import android.util.Log;
 import android.view.View;
-
+import android.widget.Toast;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Account.AccountType;
+import org.gnucash.android.data.Money;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.ui.transactions.TransactionsActivity;
+import org.gnucash.android.ui.transactions.TransactionsListFragment;
+import org.gnucash.android.util.GnucashAccountXmlHandler;
+import org.gnucash.android.util.OnAccountClickedListener;
+
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.Locale;
 
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
@@ -292,16 +293,54 @@ public void onClick(DialogInterface dialog, int which) {
 				removeFirstRunFlag();
 			}
 		});
+
+        builder.setNeutralButton(R.string.btn_import_accounts, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialogInterface, int i) {
+                importAccounts();
+                removeFirstRunFlag();
+            }
+        });
+
 		mDefaultAccountsDialog = builder.create();
 		mDefaultAccountsDialog.show();		
 	}
-		
-	@Override
+
+    public void importAccounts() {
+        Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
+        pickIntent.setType("application/octet-stream");
+        Intent chooser = Intent.createChooser(pickIntent, "Select GnuCash account file");
+
+        startActivityForResult(chooser, AccountsListFragment.REQUEST_PICK_ACCOUNTS_FILE);
+
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (resultCode == RESULT_CANCELED){
+            return;
+        }
+
+        switch (requestCode){
+            case AccountsListFragment.REQUEST_PICK_ACCOUNTS_FILE:
+                try {
+                    GnucashAccountXmlHandler.parse(this, getContentResolver().openInputStream(data.getData()));
+                    Toast.makeText(this, R.string.toast_success_importing_accounts, Toast.LENGTH_LONG).show();
+                } catch (FileNotFoundException e) {
+                    Toast.makeText(this, R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
+                    e.printStackTrace();
+                }
+                break;
+        }
+    }
+
+    @Override
 	public void accountSelected(long accountRowId) {
 		Intent intent = new Intent(this, TransactionsActivity.class);
 		intent.setAction(Intent.ACTION_VIEW);
 		intent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountRowId);
-		
+
 		startActivity(intent);
 	}
 	
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index 9b8269c7..b4bc1d38 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -16,29 +16,15 @@
 
 package org.gnucash.android.ui.accounts;
 
-import java.util.Locale;
-
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Money;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseCursorLoader;
-import org.gnucash.android.db.DatabaseHelper;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.ui.settings.SettingsActivity;
-import org.gnucash.android.ui.transactions.TransactionsActivity;
-import org.gnucash.android.ui.transactions.TransactionsListFragment;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-import org.gnucash.android.util.OnAccountClickedListener;
-
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.database.Cursor;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
@@ -51,14 +37,8 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
+import android.widget.*;
 import android.widget.AdapterView.OnItemLongClickListener;
-import android.widget.ImageView;
-import android.widget.ListAdapter;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import com.actionbarsherlock.app.SherlockListFragment;
@@ -67,111 +47,418 @@
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Money;
+import org.gnucash.android.db.*;
+import org.gnucash.android.ui.settings.SettingsActivity;
+import org.gnucash.android.ui.transactions.TransactionsActivity;
+import org.gnucash.android.ui.transactions.TransactionsListFragment;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+import org.gnucash.android.util.GnucashAccountXmlHandler;
+import org.gnucash.android.util.OnAccountClickedListener;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.Locale;
 
 /**
  * Fragment for displaying the list of accounts in the database
- * @author Ngewi Fet <ngewif@gmail.com>
  *
+ * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class AccountsListFragment extends SherlockListFragment implements
-		LoaderCallbacks<Cursor>, OnItemLongClickListener {
-	
-	/**
-	 * Logging tag
-	 */
-	protected static final String TAG = "AccountsListFragment";
-	
-	/**
-	 * {@link ListAdapter} for the accounts which will be bound to the list
-	 */
-	AccountsCursorAdapter mAccountsCursorAdapter;
-	
-	/**
-	 * Database adapter for loading Account records from the database
-	 */
-	private AccountsDbAdapter mAccountsDbAdapter;	
-	
-	/**
-	 * Listener to be notified when an account is clicked
-	 */
-	private OnAccountClickedListener mAccountSelectedListener;
-	
-	/**
-	 * Flag to indicate if the fragment is in edit mode
-	 * Edit mode means an account has been selected (through long press) and the 
-	 * context action bar (CAB) is activated
-	 */
-	private boolean mInEditMode = false;
-	
-	/**
-	 * Android action mode 
-	 * Is not null only when an accoun is selected and the Context ActionBar (CAB) is activated
-	 */
-	private ActionMode mActionMode = null;
-	
-	/**
-	 * Position which has been selected in the ListView
-	 */
-	private int mSelectedViewPosition = -1;
-	
-	/**
-	 * Stores the database ID of the currently selected account when in action mode.
-	 * This is necessary because getSelectedItemId() does not work properly (by design) 
-	 * in touch mode (which is the majority of devices today)
-	 */
-	private long mSelectedItemId = -1;
-	
-	/**
-	 * Callbacks for the CAB menu
-	 */
-	private ActionMode.Callback mActionModeCallbacks = new Callback() {
-		
-		@Override
-		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
-			MenuInflater inflater = mode.getMenuInflater();
-	        inflater.inflate(R.menu.account_context_menu, menu);
-	        mode.setTitle(getString(R.string.title_selected, 1));
-	        return true;
-		}
+        LoaderCallbacks<Cursor>, OnItemLongClickListener {
 
-		@Override
-		public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-			// nothing to see here, move along
-			return false;
-		}
+    /**
+     * Logging tag
+     */
+    protected static final String TAG = "AccountsListFragment";
+    public static final int REQUEST_PICK_ACCOUNTS_FILE = 0x1;
 
-		@Override
-		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-			switch (item.getItemId()) {
-			case R.id.context_menu_edit_accounts:				
-				showAddAccountFragment(mSelectedItemId);
-				mode.finish();
-				return true;
-
-			case R.id.context_menu_delete:
-				tryDeleteAccount(mSelectedItemId);
-				mode.finish();
-				return true;
-				
-			default:
-				return false;
-			}
-		}
 
-		@Override
-		public void onDestroyActionMode(ActionMode mode) {
-			finishEditMode();
+    /**
+     * Menu item ID for import accounts action
+     */
+    public static final int MENU_IMPORT_ACCOUNTS = 0x11;
+
+    /**
+     * {@link ListAdapter} for the accounts which will be bound to the list
+     */
+    AccountsCursorAdapter mAccountsCursorAdapter;
+    /**
+     * Database adapter for loading Account records from the database
+     */
+    private AccountsDbAdapter mAccountsDbAdapter;
+    /**
+     * Listener to be notified when an account is clicked
+     */
+    private OnAccountClickedListener mAccountSelectedListener;
+    /**
+     * Flag to indicate if the fragment is in edit mode
+     * Edit mode means an account has been selected (through long press) and the
+     * context action bar (CAB) is activated
+     */
+    private boolean mInEditMode = false;
+    /**
+     * Android action mode
+     * Is not null only when an accoun is selected and the Context ActionBar (CAB) is activated
+     */
+    private ActionMode mActionMode = null;
+    /**
+     * Position which has been selected in the ListView
+     */
+    private int mSelectedViewPosition = -1;
+    /**
+     * Stores the database ID of the currently selected account when in action mode.
+     * This is necessary because getSelectedItemId() does not work properly (by design)
+     * in touch mode (which is the majority of devices today)
+     */
+    private long mSelectedItemId = -1;
+    /**
+     * Callbacks for the CAB menu
+     */
+    private ActionMode.Callback mActionModeCallbacks = new Callback() {
+
+        @Override
+        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            MenuInflater inflater = mode.getMenuInflater();
+            inflater.inflate(R.menu.account_context_menu, menu);
+            mode.setTitle(getString(R.string.title_selected, 1));
+            return true;
+        }
+
+        @Override
+        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+            // nothing to see here, move along
+            return false;
+        }
+
+        @Override
+        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+            switch (item.getItemId()) {
+                case R.id.context_menu_edit_accounts:
+                    showAddAccountFragment(mSelectedItemId);
+                    mode.finish();
+                    return true;
+
+                case R.id.context_menu_delete:
+                    tryDeleteAccount(mSelectedItemId);
+                    mode.finish();
+                    return true;
+
+                default:
+                    return false;
+            }
+        }
+
+        @Override
+        public void onDestroyActionMode(ActionMode mode) {
+            finishEditMode();
+        }
+    };
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View v = inflater.inflate(R.layout.fragment_accounts_list, container,
+                false);
+        TextView sumlabelTextView = (TextView) v.findViewById(R.id.label_sum);
+        sumlabelTextView.setText(R.string.account_balance);
+        return v;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
+        mAccountsCursorAdapter = new AccountsCursorAdapter(
+                getActivity().getApplicationContext(),
+                R.layout.list_item_account, null,
+                new String[]{DatabaseHelper.KEY_NAME},
+                new int[]{R.id.primary_text});
+
+        setListAdapter(mAccountsCursorAdapter);
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        ActionBar actionbar = getSherlockActivity().getSupportActionBar();
+        actionbar.setTitle(R.string.title_accounts);
+        actionbar.setDisplayHomeAsUpEnabled(false);
+
+        setHasOptionsMenu(true);
+
+        ListView lv = getListView();
+        lv.setOnItemLongClickListener(this);
+        getLoaderManager().initLoader(0, null, this);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        refreshList();
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        try {
+            mAccountSelectedListener = (OnAccountClickedListener) activity;
+        } catch (ClassCastException e) {
+            throw new ClassCastException(activity.toString() + " must implement OnAccountSelectedListener");
+        }
+    }
+
+    @Override
+    public void onListItemClick(ListView l, View v, int position, long id) {
+        super.onListItemClick(l, v, position, id);
+        if (mInEditMode) {
+            mSelectedItemId = id;
+            selectItem(position);
+            return;
+        }
+        mAccountSelectedListener.accountSelected(id);
+    }
+
+    @Override
+    public boolean onItemLongClick(AdapterView<?> parent, View view, int position,
+                                   long id) {
+        if (mActionMode != null) {
+            return false;
+        }
+        mInEditMode = true;
+        mSelectedItemId = id;
+        // Start the CAB using the ActionMode.Callback defined above
+        mActionMode = getSherlockActivity().startActionMode(
+                mActionModeCallbacks);
+
+        selectItem(position);
+        return true;
+    }
+
+    /**
+     * Delete the account with record ID <code>rowId</code>
+     * It shows the delete confirmation dialog if the account has transactions,
+     * else deletes the account immediately
+     *
+     * @param rowId The record ID of the account
+     */
+    public void tryDeleteAccount(long rowId) {
+        Account acc = mAccountsDbAdapter.getAccount(rowId);
+        if (acc.getTransactionCount() > 0) {
+            showConfirmationDialog(rowId);
+        } else {
+            deleteAccount(rowId);
+        }
+    }
+
+    /**
+     * Deletes an account and show a {@link Toast} notification on success
+     *
+     * @param rowId Record ID of the account to be deleted
+     */
+    protected void deleteAccount(long rowId) {
+        boolean deleted = mAccountsDbAdapter.destructiveDeleteAccount(rowId);
+        if (deleted) {
+            Toast.makeText(getActivity(), R.string.toast_account_deleted, Toast.LENGTH_SHORT).show();
+            WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
+        }
+        refreshList();
+    }
+
+    /**
+     * Shows the delete confirmation dialog
+     *
+     * @param id Record ID of account to be deleted after confirmation
+     */
+    public void showConfirmationDialog(long id) {
+        DeleteConfirmationDialogFragment alertFragment = DeleteConfirmationDialogFragment.newInstance(R.string.title_confirm_delete, id);
+        alertFragment.setTargetFragment(this, 0);
+        alertFragment.show(getSherlockActivity().getSupportFragmentManager(), "dialog");
+    }
+
+    /**
+     * Finish the edit mode and dismisses the Contextual ActionBar
+     * Any selected (highlighted) accounts are deselected
+     */
+    public void finishEditMode() {
+        mInEditMode = false;
+        deselectPreviousSelectedItem();
+        mActionMode = null;
+        mSelectedItemId = -1;
+    }
+
+    /**
+     * Highlights the item at <code>position</code> in the ListView.
+     * Android has facilities for managing list selection but the highlighting
+     * is not reliable when using the ActionBar on pre-Honeycomb devices-
+     *
+     * @param position Position of item to be highlighted
+     */
+    private void selectItem(int position) {
+        deselectPreviousSelectedItem();
+        ListView lv = getListView();
+        lv.setItemChecked(position, true);
+        View v = lv.getChildAt(position - lv.getFirstVisiblePosition());
+        v.setSelected(true);
+        v.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
+        mSelectedViewPosition = position;
+    }
+
+    /**
+     * De-selects the previously selected item in a ListView.
+     * Only one account entry can be highlighted at a time, so the previously selected
+     * one is deselected.
+     */
+    private void deselectPreviousSelectedItem() {
+        if (mSelectedViewPosition >= 0) {
+            ListView lv = getListView();
+            lv.setItemChecked(mSelectedViewPosition, false);
+            View v = getListView().getChildAt(mSelectedViewPosition - lv.getFirstVisiblePosition());
+            if (v == null) {
+                //if we just deleted a row, then the previous position is invalid
+                return;
+            }
+            v.setBackgroundColor(getResources().getColor(android.R.color.transparent));
+            v.setSelected(false);
+        }
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        inflater.inflate(R.menu.account_actions, menu);
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB){
+            MenuItem item = menu.add(0, MENU_IMPORT_ACCOUNTS, 0, R.string.menu_import_accounts);
+            item.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_NEVER);
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+
+            case R.id.menu_add_account:
+                showAddAccountFragment(0);
+                return true;
+
+            case MENU_IMPORT_ACCOUNTS:
+                ((AccountsActivity)getActivity()).importAccounts();
+                return true;
+
+            case R.id.menu_export:
+                showExportDialog();
+                return true;
+
+            case R.id.menu_settings:
+                startActivity(new Intent(getActivity(), SettingsActivity.class));
+                return true;
+
+            default:
+                return false;
+        }
+    }
+
+    /**
+     * Refreshes the list by restarting the {@link DatabaseCursorLoader} associated
+     * with the ListView
+     */
+    public void refreshList() {
+        getLoaderManager().restartLoader(0, null, this);
+
+/*
+        //TODO: Figure out a way to display account balances per currency
+		boolean doubleEntryActive = PreferenceManager.getDefaultSharedPreferences(getActivity())
+				.getBoolean(getString(R.string.key_use_double_entry), false);
+
+		TextView tv = (TextView) getView().findViewById(R.id.transactions_sum);
+		Money balance = null;
+		if (doubleEntryActive){
+			balance = mAccountsDbAdapter.getDoubleEntryAccountsBalance();
+		} else {
+			balance = mAccountsDbAdapter.getAllAccountsBalance();
 		}
-	};
+		tv.setText(balance.formattedString(Locale.getDefault()));
+		if (balance.isNegative())
+			tv.setTextColor(getResources().getColor(R.color.debit_red));
+		else
+			tv.setTextColor(getResources().getColor(R.color.credit_green));
+*/
+    }
+
+    /**
+     * Closes any open database adapters used by the list
+     */
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        mAccountsDbAdapter.close();
+        mAccountsCursorAdapter.close();
+    }
+
+    public void showAddAccountFragment(long accountId) {
+        FragmentManager fragmentManager = getSherlockActivity().getSupportFragmentManager();
+        FragmentTransaction fragmentTransaction = fragmentManager
+                .beginTransaction();
+
+        Bundle args = new Bundle();
+        args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
+        AddAccountFragment newAccountFragment = AddAccountFragment.newInstance(mAccountsDbAdapter);
+        newAccountFragment.setArguments(args);
+
+        fragmentTransaction.replace(R.id.fragment_container,
+                newAccountFragment, AccountsActivity.FRAGMENT_NEW_ACCOUNT);
 
-	/**
-	 * Delete confirmation dialog
-	 * Is displayed when deleting an account which has transactions. 
-	 * If an account has no transactions, it is deleted immediately with no confirmation required
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 *
-	 */
-	public static class DeleteConfirmationDialogFragment extends SherlockDialogFragment {
+        fragmentTransaction.addToBackStack(null);
+        fragmentTransaction.commit();
+    }
+
+    /**
+     * Displays the dialog for exporting transactions in OFX
+     */
+    public void showExportDialog() {
+        FragmentManager manager = getSherlockActivity().getSupportFragmentManager();
+        FragmentTransaction ft = manager.beginTransaction();
+        Fragment prev = manager.findFragmentByTag(AccountsActivity.FRAGMENT_EXPORT_OFX);
+        if (prev != null) {
+            ft.remove(prev);
+        }
+        ft.addToBackStack(null);
+
+        // Create and show the dialog.
+        DialogFragment exportFragment = new ExportDialogFragment();
+        exportFragment.show(ft, AccountsActivity.FRAGMENT_EXPORT_OFX);
+    }
+
+    @Override
+    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
+        Log.d(TAG, "Creating the accounts loader");
+        return new AccountsCursorLoader(this.getActivity().getApplicationContext());
+    }
+
+    @Override
+    public void onLoadFinished(Loader<Cursor> loaderCursor, Cursor cursor) {
+        Log.d(TAG, "Accounts loader finished. Swapping in cursor");
+        mAccountsCursorAdapter.swapCursor(cursor);
+        mAccountsCursorAdapter.notifyDataSetChanged();
+    }
+
+    @Override
+    public void onLoaderReset(Loader<Cursor> arg0) {
+        Log.d(TAG, "Resetting the accounts loader");
+        mAccountsCursorAdapter.swapCursor(null);
+    }
+
+    /**
+     * Delete confirmation dialog
+     * Is displayed when deleting an account which has transactions.
+     * If an account has no transactions, it is deleted immediately with no confirmation required
+     *
+     * @author Ngewi Fet <ngewif@gmail.com>
+     */
+    public static class DeleteConfirmationDialogFragment extends SherlockDialogFragment {
 
         public static DeleteConfirmationDialogFragment newInstance(int title, long id) {
             DeleteConfirmationDialogFragment frag = new DeleteConfirmationDialogFragment();
@@ -186,385 +473,113 @@ public static DeleteConfirmationDialogFragment newInstance(int title, long id) {
         public Dialog onCreateDialog(Bundle savedInstanceState) {
             int title = getArguments().getInt("title");
             final long rowId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
-            
+
             return new AlertDialog.Builder(getActivity())
                     .setIcon(android.R.drawable.ic_delete)
                     .setTitle(title).setMessage(R.string.delete_account_confirmation_message)
                     .setPositiveButton(R.string.alert_dialog_ok_delete,
-                        new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int whichButton) {
-                                ((AccountsListFragment) getTargetFragment()).deleteAccount(rowId);
+                            new DialogInterface.OnClickListener() {
+                                public void onClick(DialogInterface dialog, int whichButton) {
+                                    Context context = getDialog().getContext();
+                                    if (rowId < 0) {
+                                        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+                                        accountsDbAdapter.deleteAllRecords();
+                                        accountsDbAdapter.close();
+                                        Toast.makeText(context, R.string.toast_all_accounts_deleted, Toast.LENGTH_SHORT).show();
+                                    } else
+                                        ((AccountsListFragment) getTargetFragment()).deleteAccount(rowId);
+                                }
                             }
-                        }
                     )
                     .setNegativeButton(R.string.alert_dialog_cancel,
-                        new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int whichButton) {
-                            	dismiss();
+                            new DialogInterface.OnClickListener() {
+                                public void onClick(DialogInterface dialog, int whichButton) {
+                                    dismiss();
+                                }
                             }
-                        }
                     )
                     .create();
         }
     }
-	
-	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
-			Bundle savedInstanceState) {
-		View v = inflater.inflate(R.layout.fragment_accounts_list, container,
-				false);
-		TextView sumlabelTextView = (TextView) v.findViewById(R.id.label_sum);		
-		sumlabelTextView.setText(R.string.account_balance);
-		return v;
-	}
-	
-	@Override
-	public void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-		mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
-		mAccountsCursorAdapter = new AccountsCursorAdapter(
-				getActivity().getApplicationContext(), 
-				R.layout.list_item_account, null,
-				new String[] { DatabaseHelper.KEY_NAME },
-				new int[] { R.id.primary_text });
-						
-		setListAdapter(mAccountsCursorAdapter);
-	}
-	
-	@Override
-	public void onActivityCreated(Bundle savedInstanceState) {
-		super.onActivityCreated(savedInstanceState);
-		
-		ActionBar actionbar = getSherlockActivity().getSupportActionBar();
-		actionbar.setTitle(R.string.title_accounts);
-		actionbar.setDisplayHomeAsUpEnabled(false);
-		
-		setHasOptionsMenu(true);
-				
-		ListView lv = getListView();
-		lv.setOnItemLongClickListener(this);	
-		getLoaderManager().initLoader(0, null, this);		
-	}
-	
-	@Override
-	public void onResume() {	
-		super.onResume();
-		refreshList();
-	}
-	
-	@Override
-	public void onAttach(Activity activity) {
-		super.onAttach(activity);
-		try {
-			mAccountSelectedListener = (OnAccountClickedListener) activity;
-		} catch (ClassCastException e) {
-			throw new ClassCastException(activity.toString() + " must implement OnAccountSelectedListener");
-		}	
-	}
-	
-	@Override
-	public void onListItemClick(ListView l, View v, int position, long id) {
-		super.onListItemClick(l, v, position, id);
-		if (mInEditMode){
-			mSelectedItemId = id;
-			selectItem(position);
-			return;
-		}
-		mAccountSelectedListener.accountSelected(id);
-	}	
-	
-	@Override
-	public boolean onItemLongClick(AdapterView<?> parent, View view, int position,
-			long id) {
-		if (mActionMode != null) {
-			return false;
-		}
-		mInEditMode = true;
-		mSelectedItemId = id;
-		// Start the CAB using the ActionMode.Callback defined above
-		mActionMode = getSherlockActivity().startActionMode(
-				mActionModeCallbacks);
-
-		selectItem(position);
-		return true;
-	}
-
-	/**
-	 * Delete the account with record ID <code>rowId</code>
-	 * It shows the delete confirmation dialog if the account has transactions,
-	 * else deletes the account immediately
-	 * @param rowId The record ID of the account
-	 */
-	public void tryDeleteAccount(long rowId){
-		Account acc = mAccountsDbAdapter.getAccount(rowId);
-		if (acc.getTransactionCount() > 0){
-			showConfirmationDialog(rowId);
-		} else {
-			deleteAccount(rowId);
-		}
-	}
-	
-	/**
-	 * Deletes an account and show a {@link Toast} notification on success
-	 * @param rowId Record ID of the account to be deleted
-	 */
-	protected void deleteAccount(long rowId){		
-		boolean deleted = mAccountsDbAdapter.destructiveDeleteAccount(rowId);
-		if (deleted){
-			Toast.makeText(getActivity(), R.string.toast_account_deleted, Toast.LENGTH_SHORT).show();
-			WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
-		}
-		refreshList();	
-	}
-
-	/**
-	 * Shows the delete confirmation dialog
-	 * @param id Record ID of account to be deleted after confirmation
-	 */
-	public void showConfirmationDialog(long id){
-		DeleteConfirmationDialogFragment alertFragment = DeleteConfirmationDialogFragment.newInstance(R.string.title_confirm_delete, id);
-		alertFragment.setTargetFragment(this, 0);
-		alertFragment.show(getSherlockActivity().getSupportFragmentManager(), "dialog");
-	}
-	
-	/**
-	 * Finish the edit mode and dismisses the Contextual ActionBar
-	 * Any selected (highlighted) accounts are deselected
-	 */
-	public void finishEditMode(){
-		mInEditMode = false;
-		deselectPreviousSelectedItem();
-		mActionMode = null;
-		mSelectedItemId = -1;
-	}
-	
-	/**
-	 * Highlights the item at <code>position</code> in the ListView.
-	 * Android has facilities for managing list selection but the highlighting 
-	 * is not reliable when using the ActionBar on pre-Honeycomb devices-
-	 * @param position Position of item to be highlighted
-	 */
-	private void selectItem(int position){
-		deselectPreviousSelectedItem();		
-		ListView lv = getListView();	
-		lv.setItemChecked(position, true);
-		View v = lv.getChildAt(position - lv.getFirstVisiblePosition());
-		v.setSelected(true);
-        v.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
-        mSelectedViewPosition = position;
-	}
-	
-	/**
-	 * De-selects the previously selected item in a ListView.
-	 * Only one account entry can be highlighted at a time, so the previously selected
-	 * one is deselected. 
-	 */
-	private void deselectPreviousSelectedItem(){
-		if (mSelectedViewPosition >= 0){
-			ListView lv = getListView();
-			lv.setItemChecked(mSelectedViewPosition, false);
-			View v = getListView().getChildAt(mSelectedViewPosition - lv.getFirstVisiblePosition());
-			if (v == null){
-				//if we just deleted a row, then the previous position is invalid
-				return;
-			}
-			v.setBackgroundColor(getResources().getColor(android.R.color.transparent));
-			v.setSelected(false);
-		}
-	}
-	
-	@Override
-	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-		inflater.inflate(R.menu.account_actions, menu);
-	}
-
-	@Override
-	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-
-		case R.id.menu_add_account:
-			showAddAccountFragment(0);
-			return true;
-
-		case R.id.menu_export:
-			showExportDialog();
-			return true;
-			
-		case R.id.menu_settings:
-			startActivity(new Intent(getActivity(), SettingsActivity.class));
-			return true;
-			
-		default:
-			return false;
-		}
-	}
-	
-	/**
-	 * Refreshes the list by restarting the {@link DatabaseCursorLoader} associated
-	 * with the ListView
-	 */
-	public void refreshList(){
-		getLoaderManager().restartLoader(0, null, this);
-				
-/*
-		//TODO: Figure out a way to display account balances
-		boolean doubleEntryActive = PreferenceManager.getDefaultSharedPreferences(getActivity())
-				.getBoolean(getString(R.string.key_use_double_entry), false);
-		
-		TextView tv = (TextView) getView().findViewById(R.id.transactions_sum);	
-		Money balance = null; 
-		if (doubleEntryActive){
-			balance = mAccountsDbAdapter.getDoubleEntryAccountsBalance();
-		} else {
-			balance = mAccountsDbAdapter.getAllAccountsBalance();
-		}
-		tv.setText(balance.formattedString(Locale.getDefault()));
-		if (balance.isNegative())
-			tv.setTextColor(getResources().getColor(R.color.debit_red));
-		else
-			tv.setTextColor(getResources().getColor(R.color.credit_green));
-*/
-	}
-	
-	/**
-	 * Closes any open database adapters used by the list
-	 */
-	@Override
-	public void onDestroy() {
-		super.onDestroy();
-		mAccountsDbAdapter.close();
-		mAccountsCursorAdapter.close();
-	}	
-
-	public void showAddAccountFragment(long accountId) {
-		FragmentManager fragmentManager = getSherlockActivity().getSupportFragmentManager();
-		FragmentTransaction fragmentTransaction = fragmentManager
-				.beginTransaction();
-						
-		Bundle args = new Bundle();
-		args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
-		AddAccountFragment newAccountFragment = AddAccountFragment.newInstance(mAccountsDbAdapter);	
-		newAccountFragment.setArguments(args);
-		
-		fragmentTransaction.replace(R.id.fragment_container,
-				newAccountFragment, AccountsActivity.FRAGMENT_NEW_ACCOUNT);
-		
-		fragmentTransaction.addToBackStack(null);
-		fragmentTransaction.commit();
-	}
-	
-	/**
-	 * Displays the dialog for exporting transactions in OFX
-	 */
-	public void showExportDialog(){
-		FragmentManager manager = getSherlockActivity().getSupportFragmentManager();
-		FragmentTransaction ft = manager.beginTransaction();
-	    Fragment prev = manager.findFragmentByTag(AccountsActivity.FRAGMENT_EXPORT_OFX);
-	    if (prev != null) {
-	        ft.remove(prev);
-	    }
-	    ft.addToBackStack(null);
-
-	    // Create and show the dialog.
-	    DialogFragment exportFragment = new ExportDialogFragment();
-	    exportFragment.show(ft, AccountsActivity.FRAGMENT_EXPORT_OFX);
-	}
-	
-	/**
-	 * Overrides the {@link SimpleCursorAdapter} to provide custom binding of the 
-	 * information from the database to the views
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 */
-	private class AccountsCursorAdapter extends SimpleCursorAdapter {
-		TransactionsDbAdapter transactionsDBAdapter;
-		
-		public AccountsCursorAdapter(Context context, int layout, Cursor c,
-				String[] from, int[] to) {
-			super(context, layout, c, from, to, 0);
-			transactionsDBAdapter = new TransactionsDbAdapter(context);
-		}
 
-		public void close(){
-			transactionsDBAdapter.close();
-		}
-		
-		@Override
-		public void bindView(View v, Context context, Cursor cursor) {
-			// perform the default binding
-			super.bindView(v, context, cursor);
+    /**
+     * Extends {@link DatabaseCursorLoader} for loading of {@link Account} from the
+     * database asynchronously
+     *
+     * @author Ngewi Fet <ngewif@gmail.com>
+     */
+    private static final class AccountsCursorLoader extends DatabaseCursorLoader {
 
-			// add a summary of transactions to the account view
-			TextView summary = (TextView) v
-					.findViewById(R.id.transactions_summary);
-			final long accountId = cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+        public AccountsCursorLoader(Context context) {
+            super(context);
+        }
+
+        @Override
+        public Cursor loadInBackground() {
+            mDatabaseAdapter = new AccountsDbAdapter(getContext());
+            Cursor cursor = mDatabaseAdapter.fetchAllRecords();
+            if (cursor != null)
+                registerContentObserver(cursor);
+            return cursor;
+        }
+    }
+
+    /**
+     * Overrides the {@link SimpleCursorAdapter} to provide custom binding of the
+     * information from the database to the views
+     *
+     * @author Ngewi Fet <ngewif@gmail.com>
+     */
+    private class AccountsCursorAdapter extends SimpleCursorAdapter {
+        TransactionsDbAdapter transactionsDBAdapter;
+
+        public AccountsCursorAdapter(Context context, int layout, Cursor c,
+                                     String[] from, int[] to) {
+            super(context, layout, c, from, to, 0);
+            transactionsDBAdapter = new TransactionsDbAdapter(context);
+        }
+
+        public void close() {
+            transactionsDBAdapter.close();
+        }
+
+        @Override
+        public void bindView(View v, Context context, Cursor cursor) {
+            // perform the default binding
+            super.bindView(v, context, cursor);
+
+            // add a summary of transactions to the account view
+            TextView summary = (TextView) v
+                    .findViewById(R.id.transactions_summary);
+            final long accountId = cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
 
             TextView subAccountTextView = (TextView) v.findViewById(R.id.secondary_text);
             int subAccountCount = mAccountsDbAdapter.getSubAccountCount(accountId);
-            if (subAccountCount > 0){
+            if (subAccountCount > 0) {
                 subAccountTextView.setVisibility(View.VISIBLE);
                 String text = getResources().getQuantityString(R.plurals.label_sub_accounts, subAccountCount, subAccountCount);
                 subAccountTextView.setText(text);
             } else
                 subAccountTextView.setVisibility(View.GONE);
 
-			Money balance = mAccountsDbAdapter.getAccountBalance(accountId);//transactionsDBAdapter.getTransactionsSum(accountId);
-			summary.setText(balance.formattedString(Locale.getDefault()));
-			int fontColor = balance.isNegative() ? getResources().getColor(R.color.debit_red) : 
-				getResources().getColor(R.color.credit_green);
-			summary.setTextColor(fontColor);
-			
-			ImageView newTrans = (ImageView) v.findViewById(R.id.btn_new_transaction);
-			newTrans.setOnClickListener(new View.OnClickListener() {
-				
-				@Override
-				public void onClick(View v) {
-					Intent intent = new Intent(getActivity(), TransactionsActivity.class);
-					intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-					intent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
-					getActivity().startActivity(intent);
-				}
-			});
-		}
-	}
-
-	/**
-	 * Extends {@link DatabaseCursorLoader} for loading of {@link Account} from the 
-	 * database asynchronously
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 */
-	private static final class AccountsCursorLoader extends DatabaseCursorLoader {
-		
-		public AccountsCursorLoader(Context context) {
-			super(context);		
-		}
+            Money balance = mAccountsDbAdapter.getAccountBalance(accountId);
+            summary.setText(balance.formattedString(Locale.getDefault()));
+            int fontColor = balance.isNegative() ? getResources().getColor(R.color.debit_red) :
+                    getResources().getColor(R.color.credit_green);
+            summary.setTextColor(fontColor);
 
-		@Override
-		public Cursor loadInBackground() {			
-			mDatabaseAdapter = new AccountsDbAdapter(getContext());	
-			Cursor cursor = mDatabaseAdapter.fetchAllRecords();
-			if (cursor != null)
-				registerContentObserver(cursor);
-			return cursor;
-		}
-	}
-
-	@Override
-	public Loader<Cursor> onCreateLoader(int id, Bundle args) {
-		Log.d(TAG, "Creating the accounts loader");
-		return new AccountsCursorLoader(this.getActivity().getApplicationContext());		
-	}
-
-	@Override
-	public void onLoadFinished(Loader<Cursor> loaderCursor, Cursor cursor) {
-		Log.d(TAG, "Accounts loader finished. Swapping in cursor");
-		mAccountsCursorAdapter.swapCursor(cursor);
-		mAccountsCursorAdapter.notifyDataSetChanged();
-	}
-
-	@Override
-	public void onLoaderReset(Loader<Cursor> arg0) {
-		Log.d(TAG, "Resetting the accounts loader");
-		mAccountsCursorAdapter.swapCursor(null);
-	}	
+            ImageView newTrans = (ImageView) v.findViewById(R.id.btn_new_transaction);
+            newTrans.setOnClickListener(new View.OnClickListener() {
+
+                @Override
+                public void onClick(View v) {
+                    Intent intent = new Intent(getActivity(), TransactionsActivity.class);
+                    intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+                    intent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
+                    getActivity().startActivity(intent);
+                }
+            });
+        }
+    }
 
 }
diff --git a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
new file mode 100644
index 00000000..8492df0f
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
@@ -0,0 +1,102 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.settings;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.preference.Preference;
+import android.preference.PreferenceFragment;
+import android.widget.Toast;
+import com.actionbarsherlock.app.ActionBar;
+import com.actionbarsherlock.app.SherlockPreferenceActivity;
+import org.gnucash.android.R;
+import org.gnucash.android.ui.accounts.AccountsListFragment;
+import org.gnucash.android.util.GnucashAccountXmlHandler;
+
+import java.io.FileNotFoundException;
+
+/**
+ * Account settings fragment inside the Settings activity
+ *
+ * @author Ngewi Fet <ngewi.fet@gmail.com>
+ */
+public class AccountPreferencesFragment extends PreferenceFragment {
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        addPreferencesFromResource(R.xml.fragment_account_preferences);
+        ActionBar actionBar = ((SherlockPreferenceActivity) getActivity()).getSupportActionBar();
+        actionBar.setHomeButtonEnabled(true);
+        actionBar.setDisplayHomeAsUpEnabled(true);
+        actionBar.setTitle(R.string.title_account_preferences);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        Preference preference = findPreference(getString(R.string.key_import_accounts));
+        preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+            @Override
+            public boolean onPreferenceClick(Preference preference) {
+                importAccounts();
+                return true;
+            }
+        });
+
+        preference = findPreference(getString(R.string.key_delete_all_accounts));
+        preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+            @Override
+            public boolean onPreferenceClick(Preference preference) {
+                DeleteAccountsConfirmationDialog deleteConfirmationDialog = DeleteAccountsConfirmationDialog.newInstance();
+                deleteConfirmationDialog.show(getFragmentManager(), "account_settings");
+                return true;
+            }
+        });
+    }
+
+    private void importAccounts() {
+        Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
+        pickIntent.setType("application/octet-stream");
+        Intent chooser = Intent.createChooser(pickIntent, "Select GnuCash account file");
+
+        startActivityForResult(chooser, AccountsListFragment.REQUEST_PICK_ACCOUNTS_FILE);
+
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_CANCELED){
+            return;
+        }
+
+        switch (requestCode){
+            case AccountsListFragment.REQUEST_PICK_ACCOUNTS_FILE:
+                try {
+                    GnucashAccountXmlHandler.parse(getActivity(), getActivity().getContentResolver().openInputStream(data.getData()));
+
+                    Toast.makeText(getActivity(), R.string.toast_success_importing_accounts, Toast.LENGTH_LONG).show();
+                } catch (FileNotFoundException e) {
+                    Toast.makeText(getActivity(), R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
+                    e.printStackTrace();
+                }
+                break;
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAccountsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAccountsConfirmationDialog.java
new file mode 100644
index 00000000..8278f30f
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAccountsConfirmationDialog.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.settings;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.widget.Toast;
+import org.gnucash.android.R;
+import org.gnucash.android.db.AccountsDbAdapter;
+
+/**
+ * Confirmation dialog for deleting all accounts from the system
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class DeleteAccountsConfirmationDialog extends DialogFragment {
+
+    public static DeleteAccountsConfirmationDialog newInstance() {
+        DeleteAccountsConfirmationDialog frag = new DeleteAccountsConfirmationDialog();
+        return frag;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        return new AlertDialog.Builder(getActivity())
+                .setIcon(android.R.drawable.ic_delete)
+                .setTitle(R.string.title_confirm_delete).setMessage(R.string.confirm_delete_all_accounts)
+                .setPositiveButton(R.string.alert_dialog_ok_delete,
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int whichButton) {
+                                Context context = getDialog().getContext();
+                                AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+                                accountsDbAdapter.deleteAllRecords();
+                                accountsDbAdapter.close();
+                                Toast.makeText(context, R.string.toast_all_accounts_deleted, Toast.LENGTH_SHORT).show();
+
+                            }
+                        }
+                )
+                .setNegativeButton(R.string.alert_dialog_cancel,
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int whichButton) {
+                                dismiss();
+                            }
+                        }
+                )
+                .create();
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index b5a78cae..0a3ce315 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import android.content.Intent;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Money;
 
@@ -34,6 +35,7 @@
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import com.actionbarsherlock.view.MenuItem;
+import org.gnucash.android.ui.accounts.AccountsListFragment;
 
 /**
  * Activity for displaying settings and information about the application
@@ -76,6 +78,7 @@ protected void onCreate(Bundle savedInstanceState) {
 		
 		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB){
 			addPreferencesFromResource(R.xml.fragment_general_preferences);
+//            addPreferencesFromResource(R.xml.fragment_account_preferences);
 			addPreferencesFromResource(R.xml.fragment_transaction_preferences);
 			addPreferencesFromResource(R.xml.fragment_about_preferences);
 			setDefaultCurrencyListener();
@@ -83,7 +86,8 @@ protected void onCreate(Bundle savedInstanceState) {
 			String versionName = manager.getString(getString(R.string.key_build_version), "");
 			Preference pref = findPreference(getString(R.string.key_build_version));
 			pref.setSummary(versionName);
-		}		
+
+		}
 	}
 		
 	@Override
diff --git a/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java b/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
new file mode 100644
index 00000000..5fa3145c
--- /dev/null
+++ b/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
@@ -0,0 +1,143 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.util;
+
+import android.content.Context;
+import android.widget.Toast;
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.xml.sax.Attributes;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.helpers.DefaultHandler;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+import java.io.*;
+import java.util.Currency;
+
+/**
+ * Handler for parsing the GnuCash accounts structure file.
+ * The discovered accounts are automatically added to the database
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class GnucashAccountXmlHandler extends DefaultHandler {
+
+    /*
+     * GnuCash account XML file qualified tag names. Used for matching tags
+     */
+    public static final String TAG_NAME         = "act:name";
+    public static final String TAG_UID          = "act:id";
+    public static final String TAG_TYPE         = "act:type";
+    public static final String TAG_CURRENCY     = "cmdty:id";
+    public static final String TAG_PARENT_UID   = "act:parent";
+    public static final String TAG_ACCOUNT      = "gnc:account";
+
+    private static final String ERROR_TAG   = "GnuCashAccountImporter";
+
+    AccountsDbAdapter mDatabaseAdapter;
+    StringBuilder mContent;
+    Account mAccount;
+
+    boolean mISO4217Currency = false;
+
+    public GnucashAccountXmlHandler(Context context) {
+        mDatabaseAdapter = new AccountsDbAdapter(context);
+        mContent = new StringBuilder();
+    }
+
+    @Override
+    public void startElement(String uri, String localName,
+                             String qualifiedName, Attributes attributes) throws SAXException {
+        if (qualifiedName.equalsIgnoreCase(TAG_ACCOUNT)) {
+            mAccount = new Account("new"); //dummy name, will be replaced when we find name tag
+        }
+    }
+
+    @Override
+    public void endElement(String uri, String localName, String qualifiedName) throws SAXException {
+        String characterString = mContent.toString().trim();
+
+        if (qualifiedName.equalsIgnoreCase(TAG_NAME)) {
+            mAccount.setName(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(TAG_UID)){
+            mAccount.setUID(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(TAG_TYPE)){
+            mAccount.setAccountType(Account.AccountType.valueOf(characterString));
+        }
+
+        if (qualifiedName.equalsIgnoreCase(TAG_CURRENCY)){
+            if (mAccount != null)
+                mAccount.setCurrency(Currency.getInstance(characterString));
+        }
+
+        if (qualifiedName.equalsIgnoreCase(TAG_PARENT_UID)){
+            mAccount.setParentUID(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase("cmdty:space")){
+            if (characterString.equalsIgnoreCase("ISO4217")){
+                mISO4217Currency = true;
+            }
+        }
+
+        if (qualifiedName.equalsIgnoreCase(TAG_ACCOUNT)){
+            //we only save accounts with ISO 4217 currencies. Ignore all else
+            if (mISO4217Currency)
+                mDatabaseAdapter.addAccount(mAccount);
+
+            //reset for next account
+            mISO4217Currency = false;
+        }
+
+        //reset the accumulated characters
+        mContent.setLength(0);
+    }
+
+    @Override
+    public void characters(char[] chars, int start, int length) throws SAXException {
+        mContent.append(chars, start, length);
+    }
+
+    public static void parse(Context context, InputStream accountsInputStream){
+        try {
+            SAXParserFactory spf = SAXParserFactory.newInstance();
+            SAXParser sp = spf.newSAXParser();
+            XMLReader xr = sp.getXMLReader();
+
+            BufferedInputStream bos = new BufferedInputStream(accountsInputStream);
+
+            /** Create handler to handle XML Tags ( extends DefaultHandler ) */
+
+            GnucashAccountXmlHandler handler = new GnucashAccountXmlHandler(context);
+            xr.setContentHandler(handler);
+            xr.parse(new InputSource(bos));
+
+        } catch (Exception e) {
+            Toast.makeText(context, R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
+            e.printStackTrace();
+        }
+    }
+}
