From 6cb113b31b8a430f894c23504006edfe272f3415 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 10 Jun 2016 11:26:21 +0200
Subject: [PATCH] Ignore ownCloud tests on device with no internet connection

Fix PieChartReportTest broken due to wrong book loaded during test
---
 .../gnucash/android/test/ui/OwnCloudExportTest.java   | 19 +++++++++++++++++--
 .../gnucash/android/test/ui/PieChartReportTest.java   | 12 ++++++------
 .../android/test/ui/TransactionsActivityTest.java     |  6 +++---
 .../org/gnucash/android/app/GnuCashApplication.java   | 10 +++++-----
 4 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
index 6bfffe51..c40414e8 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
@@ -20,6 +20,8 @@
 import android.content.SharedPreferences;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
 import android.support.test.espresso.contrib.DrawerActions;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
@@ -39,6 +41,7 @@
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.junit.Assume;
 import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Rule;
@@ -143,15 +146,27 @@ public void setUp() throws Exception {
     }
 
     /**
+     * Test if there is an active internet connection on the device/emulator
+     * @return {@code true} is an internet connection is available, {@code false} otherwise
+     */
+    public static boolean hasActiveInternetConnection(){
+        ConnectivityManager connectivityManager
+                = (ConnectivityManager) GnuCashApplication.getAppContext().getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
+        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
+    }
+
+    /**
      * It might fail if it takes too long to connect to the server or if there is no network
      */
     @Test
     public void OwnCloudCredentials() {
+        Assume.assumeTrue(hasActiveInternetConnection());
         onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());
         onView(withId(R.id.nav_view)).perform(swipeUp());
         onView(withText(R.string.title_settings)).perform(click());
         onView(withText(R.string.header_backup_and_export_settings)).perform(click());
-        onView(withText("ownCloud Sync")).perform(click());
+        onView(withText(R.string.title_owncloud_sync_preference)).perform(click());
         onView(withId(R.id.owncloud_hostname)).check(matches(isDisplayed()));
 
         onView(withId(R.id.owncloud_hostname)).perform(clearText()).perform(typeText(OC_SERVER), closeSoftKeyboard());
@@ -172,7 +187,7 @@ public void OwnCloudCredentials() {
 
     @Test
     public void OwnCloudExport() {
-
+        Assume.assumeTrue(hasActiveInternetConnection());
         mPrefs.edit().putBoolean(mAccountsActivity.getString(R.string.key_owncloud_sync), true).commit();
 
         onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index 662a4cc2..1f171074 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -47,6 +47,7 @@
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
 import org.gnucash.android.test.ui.util.DisableAnimationsRule;
+import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.report.BaseReportFragment;
 import org.gnucash.android.ui.report.ReportsActivity;
 import org.gnucash.android.ui.report.piechart.PieChartFragment;
@@ -120,14 +121,13 @@ public PieChartReportTest() {
 
     @BeforeClass
     public static void prepareTestCase() throws Exception {
-        mAccountsDbAdapter.deleteAllRecords();
         Context context = GnuCashApplication.getAppContext();
         oldActiveBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
         testBookUID = GncXmlImporter.parse(context.getResources().openRawResource(R.raw.default_accounts));
-        BooksDbAdapter.getInstance().setActive(testBookUID);
 
-        mTransactionsDbAdapter = TransactionsDbAdapter.getInstance(); //new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
-        mAccountsDbAdapter = AccountsDbAdapter.getInstance(); //new AccountsDbAdapter(db, mTransactionsDbAdapter);
+        GnuCashApplication.loadBook(testBookUID);
+        mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 
         CURRENCY = CommoditiesDbAdapter.getInstance().getCommodity("USD");
 
@@ -139,7 +139,7 @@ public static void prepareTestCase() throws Exception {
 
 	@Before
 	public void setUp() throws Exception {
-        // creates default accounts
+        mTransactionsDbAdapter.deleteAllRecords();
         mReportsActivity = mActivityRule.getActivity();
         assertThat(mAccountsDbAdapter.getRecordsCount()).isGreaterThan(20); //lots of accounts in the default
         onView(withId(R.id.btn_pie_chart)).perform(click());
@@ -213,7 +213,7 @@ public void testSpinner() throws Exception {
 
         onView(withId(R.id.report_account_type_spinner)).perform(click());
         onView(withText(AccountType.INCOME.name())).perform(click());
-
+        onView(withId(R.id.pie_chart)).perform(clickXY(Position.BEGIN, Position.MIDDLE));
         String selectedText = String.format(PieChartFragment.SELECTED_VALUE_PATTERN, GIFTS_RECEIVED_INCOME_ACCOUNT_NAME, TRANSACTION3_AMOUNT, 100f);
         onView(withId(R.id.selected_chart_slice)).check(matches(withText(selectedText)));
 
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 2eb6b2af..6a52692b 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -139,9 +139,9 @@ public static void prepareTestCase(){
 		mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 		COMMODITY = CommoditiesDbAdapter.getInstance().getCommodity(CURRENCY_CODE);
 
-		PreferenceActivity.getActiveBookSharedPreferences(context)
-				.edit().putBoolean(context.getString(R.string.key_use_compact_list), false)
-				.apply();
+//		PreferenceActivity.getActiveBookSharedPreferences(context)
+//				.edit().putBoolean(context.getString(R.string.key_use_compact_list), false)
+//				.apply();
 	}
 
 	@Before
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 3ebda503..d328c5bb 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -97,7 +97,7 @@
     private static RecurrenceDbAdapter mRecurrenceDbAdapter;
 
     private static BooksDbAdapter mBooksDbAdapter;
-    private DatabaseHelper mDbHelper;
+    private static DatabaseHelper mDbHelper;
 
     /**
      * Returns darker version of specified <code>color</code>.
@@ -144,19 +144,19 @@ public void onCreate(){
      * Initialize database adapter singletons for use in the application
      * This method should be called every time a new book is opened
      */
-    private void initDatabaseAdapters() {
+    private static void initDatabaseAdapters() {
         if (mDbHelper != null){ //close if open
             mDbHelper.getReadableDatabase().close();
         }
 
-        mDbHelper = new DatabaseHelper(getApplicationContext(),
+        mDbHelper = new DatabaseHelper(getAppContext(),
                 mBooksDbAdapter.getActiveBookUID());
         SQLiteDatabase mainDb;
         try {
             mainDb = mDbHelper.getWritableDatabase();
         } catch (SQLException e) {
             Crashlytics.logException(e);
-            Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
+            Log.e("GnuCashApplication", "Error getting database: " + e.getMessage());
             mainDb = mDbHelper.getReadableDatabase();
         }
 
@@ -215,7 +215,7 @@ public static BooksDbAdapter getBooksDbAdapter(){
      * Loads the book with GUID {@code bookUID}
      * @param bookUID GUID of the book to be loaded
      */
-    public void loadBook(String bookUID){
+    public static void loadBook(String bookUID){
         mBooksDbAdapter.setActive(bookUID);
         initDatabaseAdapters();
         AccountsActivity.start(getAppContext());
