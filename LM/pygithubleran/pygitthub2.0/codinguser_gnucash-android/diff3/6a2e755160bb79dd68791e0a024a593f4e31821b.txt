From 6a2e755160bb79dd68791e0a024a593f4e31821b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 18 Jul 2012 19:14:56 +0200
Subject: [PATCH] Enabled selection of currency per account Added default
 currencies to the database. Updated display of amounts to show the
 corresponding currencies

---
 GnucashMobile/res/layout/dialog_new_account.xml    |  8 ++-
 .../res/layout/fragment_new_transaction.xml        | 47 ++++++--------
 GnucashMobile/res/layout/list_item_transaction.xml |  5 +-
 GnucashMobile/res/values/styles.xml                |  6 ++
 .../src/org/gnucash/android/data/Money.java        | 75 ++++++++++++++--------
 .../src/org/gnucash/android/data/Transaction.java  | 14 ++--
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  2 +-
 .../org/gnucash/android/db/CurrencyDbAdapter.java  | 62 ++++++++++++++++++
 .../org/gnucash/android/db/DatabaseAdapter.java    |  4 +-
 .../src/org/gnucash/android/db/DatabaseHelper.java | 74 ++++++++++++++++++++-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 16 +++--
 .../android/ui/accounts/AccountsListFragment.java  | 10 +--
 .../ui/accounts/NewAccountDialogFragment.java      | 52 +++++++++++++--
 .../ui/transactions/NewTransactionFragment.java    | 26 ++++++--
 .../ui/transactions/TransactionsListFragment.java  | 17 +++--
 .../gnucash/android/test/AccountsActivityTest.java | 12 +++-
 .../android/test/TransactionsFragmentTest.java     |  8 +--
 17 files changed, 338 insertions(+), 100 deletions(-)
 create mode 100644 GnucashMobile/src/org/gnucash/android/db/CurrencyDbAdapter.java

diff --git a/GnucashMobile/res/layout/dialog_new_account.xml b/GnucashMobile/res/layout/dialog_new_account.xml
index 2bea5f72..8734e21f 100644
--- a/GnucashMobile/res/layout/dialog_new_account.xml
+++ b/GnucashMobile/res/layout/dialog_new_account.xml
@@ -27,7 +27,7 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical" >
-
+    
     <EditText
         android:id="@+id/edit_text_account_name"
         android:layout_width="match_parent"
@@ -41,6 +41,12 @@
         <requestFocus />
     </EditText>
     
+    <Spinner android:id="@+id/input_currency_spinner"
+        android:layout_width="match_parent"
+		android:layout_height="wrap_content"
+		android:layout_margin="10dp"		
+        />
+    
     <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
diff --git a/GnucashMobile/res/layout/fragment_new_transaction.xml b/GnucashMobile/res/layout/fragment_new_transaction.xml
index 2a8b8516..49fb4c90 100644
--- a/GnucashMobile/res/layout/fragment_new_transaction.xml
+++ b/GnucashMobile/res/layout/fragment_new_transaction.xml
@@ -25,26 +25,20 @@
 	    <LinearLayout 
 	        android:layout_width="match_parent"
 	        android:layout_height="wrap_content" >
-<!-- 	        
-	        <TextView android:id="@+id/sign" 
+			
+			<TextView
+	            android:id="@+id/currency_symbol"	            
 	            android:layout_width="wrap_content"
-	            android:layout_height="wrap_content"
-	            android:minHeight="?android:attr/listPreferredItemHeight"		       
-		        android:layout_marginBottom="10dp" 
-		        android:textColor="@color/debit_red"
-		        style="@style/ListItemText"
-	            android:text="-" />
--->	        
-	        <TextView android:id="@+id/currency_symbol" 
-	            android:layout_width="wrap_content"	            
-	            android:layout_height="wrap_content"
-	            android:minHeight="?android:attr/listPreferredItemHeight"		       		        	        
-		        android:textColor="@color/debit_red"
-		        android:gravity="right"
-		        style="@style/ListItemText"
+	            android:layout_height="match_parent"
+	            android:layout_marginBottom="10dp"
+	            android:paddingRight="5dp"
+	            android:gravity="center|right"
+	            android:textColor="@color/debit_red"
+	            android:minHeight="?android:attr/listPreferredItemHeight"
+	            android:textSize="22dp"           
 	            android:text="$" />
-	        
-		    <EditText
+	       		 
+	       	<EditText
 		        android:id="@+id/input_transaction_amount"
 		        android:layout_width="0dp"
 		        android:layout_weight="3"
@@ -57,12 +51,12 @@
 		        android:textColor="@color/debit_red"
 		        style="@style/ListItemText" />
 		    
+	       	       
 		    <ToggleButton android:id="@+id/input_transaction_type"
 		        android:layout_width="0dp"
 		        android:layout_weight="2"
 		        android:layout_height="wrap_content"
-		        android:minHeight="?android:attr/listPreferredItemHeight"
-		        android:minWidth="100dp"
+		        android:minHeight="?android:attr/listPreferredItemHeight"		        
 		        android:textOn="@string/debit"
 		        android:textOff="@string/credit"
 		        android:textAppearance="?android:attr/textAppearanceMedium"
@@ -81,6 +75,7 @@
 	            android:layout_width="wrap_content"
 	            android:layout_marginBottom="-8dip"
 	            style="@style/TextAppearance.EditTransaction_LabelSmall" />
+	        
 		    <LinearLayout
 		        android:layout_height="wrap_content"
 		        android:layout_width="fill_parent"
@@ -91,19 +86,15 @@
 			        android:layout_width="0dp"
 			        android:layout_weight="1" 
 			        android:layout_height="wrap_content"
-			        android:gravity="center"
-			        android:minHeight="?android:attr/listPreferredItemHeight"        
-			        style="@android:style/Widget.DeviceDefault.Spinner"
-			        android:textSize="22dp" />
+			        android:gravity="center"       
+			        style="@style/Dropdown.TextView" />
 		        
 		        <TextView android:id="@+id/input_time"
 		            android:layout_width="wrap_content"
 		            android:layout_height="wrap_content"
-		            android:minHeight="?android:attr/listPreferredItemHeight"        
-			        style="@android:style/Widget.DeviceDefault.Spinner"
 			        android:gravity="center"
-			        android:textSize="22dp"
-			        android:minWidth="120dp" />    
+			        android:minWidth="120dp"       
+			        style="@style/Dropdown.TextView" />    
 			</LinearLayout>
 	    </LinearLayout>
 	   <LinearLayout
diff --git a/GnucashMobile/res/layout/list_item_transaction.xml b/GnucashMobile/res/layout/list_item_transaction.xml
index 6941dacd..d500173d 100644
--- a/GnucashMobile/res/layout/list_item_transaction.xml
+++ b/GnucashMobile/res/layout/list_item_transaction.xml
@@ -38,9 +38,10 @@
             android:layout_width="0dp"
             android:layout_height="match_parent"
             android:layout_weight="1"
-            android:text="@string/label_transaction_name"                     
+			android:paddingLeft="5dp"                                 
 	        android:singleLine="true"
-	        android:ellipsize="end"                
+	        android:ellipsize="end"
+	        android:text="@string/label_transaction_name"                
             style="@style/ListItemText" /> 
      
 	<TextView android:id="@+id/transaction_amount" 
diff --git a/GnucashMobile/res/values/styles.xml b/GnucashMobile/res/values/styles.xml
index 57ca60a4..fda863fa 100644
--- a/GnucashMobile/res/values/styles.xml
+++ b/GnucashMobile/res/values/styles.xml
@@ -45,6 +45,12 @@
         <item name="android:textSize">@dimen/text_size_small</item>
     </style>
     
+    <style name="Dropdown.TextView" parent="@style/Widget.Sherlock.Spinner.DropDown.ActionBar">
+        <item name="android:textSize">22dp</item>
+        <item name="android:minHeight">?android:attr/listPreferredItemHeight</item>
+        <item name="android:textAppearance">?android:attr/textAppearanceLarge</item>
+    </style>
+    
     <style name="ButtonStyle">
         <item name="android:layout_width">wrap_content</item>
         <item name="android:layout_height">wrap_content</item>
diff --git a/GnucashMobile/src/org/gnucash/android/data/Money.java b/GnucashMobile/src/org/gnucash/android/data/Money.java
index 1146a768..783c9725 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Money.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Money.java
@@ -29,9 +29,12 @@
 import java.math.RoundingMode;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
+import java.text.ParseException;
 import java.util.Currency;
 import java.util.Locale;
 
+import android.util.Log;
+
 /**
  * Money represents a money amount and a corresponding currency.
  * Money internally uses {@link BigDecimal} to represent the amounts, which enables it 
@@ -61,6 +64,11 @@ public Money(BigDecimal amount, Currency currency){
 		this.mCurrency = currency;
 	}
 	
+	public Money(String amount, String currencyCode){
+		setAmount(amount);
+		setCurrency(Currency.getInstance(currencyCode));
+	}
+	
 	public Money(BigDecimal amount, Currency currency, MathContext context){
 		setAmount(amount);
 		setCurrency(currency);
@@ -70,7 +78,7 @@ public Money(BigDecimal amount, Currency currency, MathContext context){
 	
 	public Money(String amount){
 		init();
-		setAmount(amount);
+		setAmount(parse(amount));
 	}
 	
 	public Money(double amount){
@@ -90,12 +98,15 @@ public Currency getCurrency() {
 		return mCurrency;
 	}
 
+	public Money withCurrency(Currency currency){
+		return new Money(mAmount, currency);
+	}
 	/**
 	 * @param mCurrency the mCurrency to set
 	 */
-	public Money setCurrency(Currency currency) {
+	private void setCurrency(Currency currency) {
 		//TODO: Do a conversion of the value as well in the future
-		return new Money(mAmount, currency);
+		mCurrency = currency;
 	}
 
 	/**
@@ -114,8 +125,11 @@ public String asString(){
 	}
 	
 	public String formattedString(Locale locale){
-		DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(locale);			
-		return formatter.format(asDouble());
+		DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(locale);	
+		formatter.setMinimumFractionDigits(DECIMAL_PLACES);
+		formatter.setMaximumFractionDigits(DECIMAL_PLACES);
+		
+		return formatter.format(asDouble()) + " " + mCurrency.getSymbol();
 	}
 	
 	public Money negate(){
@@ -125,44 +139,40 @@ public Money negate(){
 	/**
 	 * @param amount the mAmount to set
 	 */
-	public Money setAmount(BigDecimal amount) {		
-		return new Money(amount.setScale(DECIMAL_PLACES, ROUNDING_MODE), mCurrency);
+	private void setAmount(BigDecimal amount) {	
+		mAmount = amount.setScale(DECIMAL_PLACES, ROUNDING_MODE);
 	}
 	
-	public Money setAmount(String amount){
-		return setAmount(new BigDecimal(amount));
+	private void setAmount(String amount){
+		setAmount(new BigDecimal(amount));
 	}
 	
-	public Money setAmount(double amount){
-		return setAmount(new BigDecimal(amount));
+	private void setAmount(double amount){
+		setAmount(new BigDecimal(amount));
 	}
 	
 	public Money add(Money money){
 		if (!mCurrency.equals(money.mCurrency))
 			throw new IllegalArgumentException("Only Money with same currency can be added");
 		
-		Money result = new Money();
 		BigDecimal bigD = mAmount.add(money.mAmount);
-		result.setAmount(bigD);
-		return result;
+		return new Money(bigD, mCurrency);
 	}
 
 	public Money subtract(Money money){
 		if (!mCurrency.equals(money.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
-		Money result = new Money();
-		BigDecimal bigD = mAmount.subtract(money.mAmount);
-		result.setAmount(bigD);
-		return result;
+		
+		BigDecimal bigD = mAmount.subtract(money.mAmount);		
+		return new Money(bigD, mCurrency);
 	}
 	
 	public Money divide(Money divisor){
 		if (!mCurrency.equals(divisor.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
-		Money result = new Money();
-		BigDecimal bigD = mAmount.divide(divisor.mAmount);
-		result.setAmount(bigD);
-		return result;
+		
+		BigDecimal bigD = mAmount.divide(divisor.mAmount);		
+		return new Money(bigD, mCurrency);
 	}
 	
 	public Money divide(int divisor){
@@ -173,10 +183,9 @@ public Money divide(int divisor){
 	public Money multiply(Money money){
 		if (!mCurrency.equals(money.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
-		Money result = new Money();
-		BigDecimal bigD = mAmount.multiply(money.mAmount);
-		result.setAmount(bigD);
-		return result;
+		
+		BigDecimal bigD = mAmount.multiply(money.mAmount);		
+		return new Money(bigD, mCurrency);
 	}
 	
 	public Money multiply(int factor){
@@ -194,7 +203,7 @@ public String toPlainString(){
 	
 	@Override
 	public String toString() {
-		return mAmount.setScale(DECIMAL_PLACES, ROUNDING_MODE).toPlainString() + " " + mCurrency.getCurrencyCode();
+		return mAmount.setScale(DECIMAL_PLACES, ROUNDING_MODE).toPlainString() + " " + mCurrency.getSymbol();
 	}
 		
 	@Override
@@ -235,4 +244,16 @@ public int compareTo(Money another) {
 			throw new IllegalArgumentException("Cannot compare different currencies yet");
 		return mAmount.compareTo(another.mAmount);
 	}
+
+	public static String parse(String formattedAmount){
+		DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance();
+		String result = formattedAmount;
+		try {
+			result = formatter.parse(formattedAmount).toString();
+			
+		} catch (ParseException e) {
+			Log.e("Money", "Could not parse the amount");			
+		}
+		return result;
+	}
 }
diff --git a/GnucashMobile/src/org/gnucash/android/data/Transaction.java b/GnucashMobile/src/org/gnucash/android/data/Transaction.java
index 4bc01db4..bb45b955 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Transaction.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Transaction.java
@@ -25,10 +25,9 @@
 package org.gnucash.android.data;
 
 import java.math.BigDecimal;
-import java.text.DecimalFormat;
-import java.text.NumberFormat;
 import java.util.Currency;
 import java.util.Date;
+import java.util.Locale;
 import java.util.UUID;
 
 import org.w3c.dom.Document;
@@ -137,7 +136,7 @@ public void setAmount(double amount){
 	}
 	
 	public void setCurrency(Currency currency){		
-		mAmount.setCurrency(currency);
+		mAmount = mAmount.withCurrency(currency);
 	}
 	
 	public void setAmount(double amount, Currency currency){
@@ -156,13 +155,8 @@ public Money getAmount() {
 	 * Returns the transaction properly formatted for display
 	 * @return Properly formatted string amount
 	 */
-	public static String getFormattedAmount(double amount){
-		DecimalFormat formatter = (DecimalFormat)NumberFormat.getCurrencyInstance();
-		String symbol = formatter.getCurrency().getSymbol();
-		// TODO: Allow the user to set locale, or get it from current location
-		formatter.setNegativePrefix("-" + symbol); 
-		formatter.setNegativeSuffix("");
-		return formatter.format(amount);
+	public String getFormattedAmount(){		
+		return mAmount.formattedString(Locale.getDefault());		
 	}
 	
 	/**
diff --git a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
index f2042347..b2ba0fad 100644
--- a/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -159,7 +159,7 @@ public Account buildAccountInstance(Cursor c){
 		account.setUID(uid);
 		account.setAccountType(AccountType.valueOf(c.getString(DatabaseAdapter.COLUMN_TYPE)));
 		account.setTransactions(mTransactionsAdapter.getAllTransactionsForAccount(uid));
-		account.setCurrency(Currency.getInstance(c.getString(DatabaseAdapter.COLUMN_CURRENCY_CODE)));
+		account.setCurrency(Currency.getInstance(c.getString(DatabaseAdapter.COLUMN_ACCOUNT_CURRENCY_CODE)));
 		return account;
 	}
 		
diff --git a/GnucashMobile/src/org/gnucash/android/db/CurrencyDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/CurrencyDbAdapter.java
new file mode 100644
index 00000000..b98ee524
--- /dev/null
+++ b/GnucashMobile/src/org/gnucash/android/db/CurrencyDbAdapter.java
@@ -0,0 +1,62 @@
+/*
+ * Written By: Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 Ngewi Fet
+ *
+ * This file is part of Gnucash for Android
+ * 
+ * Gnucash for Android is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, contact:
+ *
+ * Free Software Foundation           Voice:  +1-617-542-5942
+ * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
+ * Boston, MA  02110-1301,  USA       gnu@gnu.org
+ */
+
+package org.gnucash.android.db;
+
+import java.util.Currency;
+import java.util.Locale;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.util.Log;
+
+public class CurrencyDbAdapter extends DatabaseAdapter {
+
+	public CurrencyDbAdapter(Context context) {
+		super(context);
+	}
+
+	public Currency getCurrency(long id){
+		Log.v(TAG, "Fetching currency with id " + id);
+		Currency cur = Currency.getInstance(Locale.getDefault()); 
+		Cursor c =	fetchRecord(DatabaseHelper.CURRENCIES_TABLE_NAME, id);
+		if (c != null && c.moveToFirst()){
+			cur = Currency.getInstance(c.getString(DatabaseAdapter.COLUMN_CURRENCY_CODE));	
+			c.close();
+		}
+		return cur;
+	}
+		
+	public long getCurrencyId(String currencyCode){
+		Cursor c =	mDb.query(DatabaseHelper.CURRENCIES_TABLE_NAME, null, 
+				DatabaseHelper.KEY_CURRENCY_CODE + "='" + currencyCode + "'", 
+				null, null, null, null);
+		long id = -1;
+		if (c != null && c.moveToFirst()){
+			id = c.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+			c.close();
+		}
+		return id;
+	}
+}
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
index 44cf7327..e65c7dfe 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -49,7 +49,6 @@
 	public static final int COLUMN_UID 	= 1;
 	public static final int COLUMN_NAME = 2;
 	public static final int COLUMN_TYPE = 3;
-	public static final int COLUMN_CURRENCY_CODE = 4;
 	
 	public static final int COLUMN_AMOUNT 		= 4;
 	public static final int COLUMN_DESCRIPTION 	= 5;
@@ -57,6 +56,9 @@
 	public static final int COLUMN_ACCOUNT_UID 	= 7;
 	public static final int COLUMN_EXPORTED 	= 8;
 	
+	public static final int COLUMN_CURRENCY_CODE = 1;
+	public static final int COLUMN_ACCOUNT_CURRENCY_CODE = 4;
+	
 	/**
 	 * {@link DatabaseHelper} for creating and opening the database
 	 */
diff --git a/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java b/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
index a52f071c..d52c169f 100644
--- a/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/GnucashMobile/src/org/gnucash/android/db/DatabaseHelper.java
@@ -24,6 +24,10 @@
 
 package org.gnucash.android.db;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import android.content.ContentValues;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
@@ -38,6 +42,7 @@
 	
 	public static final String ACCOUNTS_TABLE_NAME 		= "accounts";
 	public static final String TRANSACTIONS_TABLE_NAME 	= "transactions";
+	public static final String CURRENCIES_TABLE_NAME 	= "currencies";
 	
 	public static final String KEY_ROW_ID 	= "_id";
 	public static final String KEY_NAME 	= "name";
@@ -54,6 +59,57 @@
 	//if you modify the order of the columns, 
 	//make sure to modify the indices in DatabaseAdapter
 	
+	public static final LinkedHashMap<String, String> TOP_CURRENCIES_MAP = new LinkedHashMap<String, String>() {
+
+		/**
+		 * 
+		 */
+		private static final long serialVersionUID = -80009596835057456L;
+
+		{
+			//the big guys
+			put("USD", "US Dollar");
+			put("EUR", "Euro");
+			put("GBP", "British Pound");
+			put("CHF", "Swiss Franc");
+			
+			//the rest alphabetically
+			put("AUD", "Australian Dollar");
+			put("BRL", "Brazilian Real");
+			put("XAF", "Central African CFA franc");
+			put("CAD", "Canadian Dollar");
+			put("CLP", "Chilean Peso");
+			put("CNY", "Chinese Yuan");
+			put("CZK", "Czech Koruna");
+			put("DKK", "Danish Krone");
+			put("FJD", "Fijian Dollar");
+			put("HNL", "Honduran Lempira");
+			put("HKD", "Hong Kong Dollar");
+			put("HUF", "Hungarian Forint");
+			put("ISK", "Iceland Krona");
+			put("INR", "Indian rupee");
+			put("IDR", "Indonesian Rupiah");
+			put("ILS", "Israeli New Shekel");
+			put("JPY", "Japanese Yen");
+			put("KRW", "Korean Won");
+			put("LVL", "Latvian Lats");
+			put("MYR", "Malaysian Ringgit");
+			put("MXN", "Mexican Peso");
+			put("NZD", "New Zealand Dollar");
+			put("NOK", "Norwegian Krone");
+			put("PKR", "Pakistan Rupee");
+			put("PHP", "Philippine Peso");
+			put("PLN", "Polish Zloty");
+			put("RUB", "Russion Ruble");
+			put("SGD", "Singapore Dollar");
+			put("ZAR", "South African Rand");
+			put("SEK", "Swedish Krona");
+			put("TWD", "New Taiwan Dollar");
+			put("THB", "Thai Baht");
+			put("TRY", "Turkish Lira");
+		}
+	};
+	
 	private static final String ACCOUNTS_TABLE_CREATE = "create table " + ACCOUNTS_TABLE_NAME + " ("
 			+ KEY_ROW_ID + " integer primary key autoincrement, "
 			+ KEY_UID 	+ " varchar(255) not null, "
@@ -74,8 +130,13 @@
 			+ "FOREIGN KEY (" + KEY_ACCOUNT_UID + ") REFERENCES " + ACCOUNTS_TABLE_NAME + " (" + KEY_UID + ")"
 			+ ");";
 	
+	private static final String CURRENCIES_TABLE_CREATE = "create table " + CURRENCIES_TABLE_NAME + "("
+			+ KEY_ROW_ID + " integer primary key autoincrement, " 			
+			+ KEY_CURRENCY_CODE 	+ " varchar(255) not null, "
+			+ KEY_NAME 	+ " varchar(255) not null);";
+	
 	public DatabaseHelper(Context context){
-		super(context, DATABASE_NAME, null, DATABASE_VERSION);
+		super(context, DATABASE_NAME, null, DATABASE_VERSION);		
 	}
 	
 	@Override
@@ -83,6 +144,8 @@ public void onCreate(SQLiteDatabase db) {
 		Log.i(TAG, "Creating gnucash database tables");
 		db.execSQL(ACCOUNTS_TABLE_CREATE);
 		db.execSQL(TRANSACTIONS_TABLE_CREATE);
+		db.execSQL(CURRENCIES_TABLE_CREATE);
+		populateCurrencies(db);
 	}
 
 	@Override
@@ -110,4 +173,13 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		}
 	}
 
+	private void populateCurrencies(SQLiteDatabase db){
+		for (Map.Entry<String, String> entry : TOP_CURRENCIES_MAP.entrySet()) {
+			ContentValues cv = new ContentValues();
+			cv.put(KEY_CURRENCY_CODE, entry.getKey());
+			cv.put(KEY_NAME, entry.getValue());
+			
+			db.insert(CURRENCIES_TABLE_NAME, null, cv);
+		}
+	}
 }
diff --git a/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java b/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 7cdfd0ee..e74cfdc6 100644
--- a/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/GnucashMobile/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -204,6 +204,11 @@ protected String getCurrencyCode(String accountUID) {
 		return currencyCode;
 	}
 	
+	public String getCurrencyCode(long accountId){
+		String accountUID = getAccountUID(accountId);
+		return getCurrencyCode(accountUID);
+	}
+	
 	/**
 	 * Deletes transaction record with id <code>rowId</code>
 	 * @param rowId Long database record id
@@ -272,19 +277,22 @@ public int getTransactionsCount(long accountId){
 	 * @param accountId Record ID of the account
 	 * @return Sum of transactions belonging to the account
 	 */
-	public double getTransactionsSum(long accountId){
+	public Money getTransactionsSum(long accountId){
 		Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
 				new String[]{DatabaseHelper.KEY_AMOUNT}, 
 				DatabaseHelper.KEY_ACCOUNT_UID + "= '" + getAccountUID(accountId) + "'", 
 				null, null, null, null);
 		
+		String currencyCode = getCurrencyCode(accountId);
+		
 		if (c == null)
-			return 0;
+			return new Money("0", currencyCode);
+		
 		
-		double amountSum = 0;
+		Money amountSum = new Money("0", currencyCode);
 		
 		while(c.moveToNext()){
-			amountSum += c.getDouble(0);
+			amountSum = amountSum.add(new Money(c.getString(0), currencyCode));
 		}
 		c.close();
 		
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index 87dae61d..bb2e3d58 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -24,9 +24,11 @@
 
 package org.gnucash.android.ui.accounts;
 
+import java.util.Locale;
+
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Transaction;
+import org.gnucash.android.data.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
 import org.gnucash.android.db.DatabaseCursorLoader;
@@ -393,9 +395,9 @@ public void bindView(View v, Context context, Cursor cursor) {
 					.findViewById(R.id.transactions_summary);
 			final long accountId = cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
 			
-			double balance = transactionsDBAdapter.getTransactionsSum(accountId);
-			summary.setText(Transaction.getFormattedAmount(balance));
-			int fontColor = balance < 0 ? getResources().getColor(R.color.debit_red) : 
+			Money balance = transactionsDBAdapter.getTransactionsSum(accountId);
+			summary.setText(balance.formattedString(Locale.getDefault()));
+			int fontColor = balance.isNegative() ? getResources().getColor(R.color.debit_red) : 
 				getResources().getColor(R.color.credit_green);
 			summary.setTextColor(fontColor);
 			
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
index 83629326..338f3003 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
@@ -24,12 +24,19 @@
 
 package org.gnucash.android.ui.accounts;
 
+import java.util.Currency;
+import java.util.Locale;
+
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.CurrencyDbAdapter;
+import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
 
+import android.database.Cursor;
 import android.os.Bundle;
+import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.view.LayoutInflater;
@@ -38,6 +45,7 @@
 import android.view.WindowManager.LayoutParams;
 import android.widget.Button;
 import android.widget.EditText;
+import android.widget.Spinner;
 
 import com.actionbarsherlock.app.SherlockDialogFragment;
 
@@ -45,17 +53,21 @@
 	private Button mSaveButton;
 	private Button mCancelButton;
 	private EditText mNameEditText;
+	private Spinner mCurrencySpinner;
+	
 	private AccountsDbAdapter mDbAdapter;
+	private SimpleCursorAdapter mCursorAdapter;
+	
 	private long mSelectedId = 0;
 	private Account mAccount = null;
 	
-	public NewAccountDialogFragment(AccountsDbAdapter dbAdapter) {		
-		mDbAdapter = dbAdapter;
+	public NewAccountDialogFragment() {
+		
 	}
 	
 	static public NewAccountDialogFragment newInstance(AccountsDbAdapter dbAdapter){
-		NewAccountDialogFragment f = new NewAccountDialogFragment(dbAdapter);
-		
+		NewAccountDialogFragment f = new NewAccountDialogFragment();
+		f.mDbAdapter = dbAdapter;
 		return f;
 	}
 	
@@ -74,6 +86,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		setStyle(STYLE_NORMAL, R.style.Sherlock___Theme_Dialog);
 		mSaveButton = (Button) v.findViewById(R.id.btn_save);
 		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
+		mCurrencySpinner = (Spinner) v.findViewById(R.id.input_currency_spinner);
 		mNameEditText = (EditText) v.findViewById(R.id.edit_text_account_name);
 		mNameEditText.requestFocus();
         getDialog().getWindow().setSoftInputMode(
@@ -94,7 +107,13 @@ public void onClick(View v) {
 					mAccount = new Account(getEnteredName());
 				else
 					mAccount.setName(getEnteredName());
+				
+				//set the currency
+				CurrencyDbAdapter currencyAdapter = new CurrencyDbAdapter(getActivity());
+				Currency currency = currencyAdapter.getCurrency(mCurrencySpinner.getSelectedItemId());
+				mAccount.setCurrency(currency);
 				mDbAdapter.addAccount(mAccount);
+				currencyAdapter.close();
 				((AccountsListFragment)getTargetFragment()).refreshList();				
 				dismiss();				
 			}
@@ -110,6 +129,31 @@ public void onClick(View v) {
 		return v;
 	}
 	
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {
+		super.onActivityCreated(savedInstanceState);
+		Cursor c = mDbAdapter.fetchAllRecords(DatabaseHelper.CURRENCIES_TABLE_NAME);
+		String[] from = new String[] {DatabaseHelper.KEY_NAME};
+		int[] to = new int[] {android.R.id.text1};
+		mCursorAdapter = new SimpleCursorAdapter(
+				getActivity(), 
+				android.R.layout.simple_spinner_item, 
+				c, from, to, 0);
+		
+		mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+		mCurrencySpinner.setAdapter(mCursorAdapter);
+		
+		String currencyCode = Currency.getInstance(Locale.getDefault()).getCurrencyCode();
+		if (mSelectedId != 0){
+			currencyCode = mAccount.getCurrency().getCurrencyCode();
+		}
+		CurrencyDbAdapter currencyDbAdapter = new CurrencyDbAdapter(getActivity());
+		long id = currencyDbAdapter.getCurrencyId(currencyCode);
+		//db IDs are 1-based but list positions are 0-based
+		mCurrencySpinner.setSelection((int)id - 1);	
+		currencyDbAdapter.close();
+	}
+	
 	public String getEnteredName(){
 		return mNameEditText.getText().toString();
 	}
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index b05529e7..beed632c 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -31,8 +31,10 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
+import java.util.Currency;
 import java.util.Date;
 import java.util.GregorianCalendar;
+import java.util.Locale;
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
@@ -157,7 +159,8 @@ private void initializeViewsWithTransaction(){
 				
 		mNameEditText.setText(mTransaction.getName());
 		mTransactionTypeButton.setChecked(mTransaction.getTransactionType() == TransactionType.DEBIT);
-		mAmountEditText.setText(mTransaction.getAmount().toPlainString()); 
+		mAmountEditText.setText(mTransaction.getAmount().toPlainString());
+		mCurrencyTextView.setText(mTransaction.getAmount().getCurrency().getSymbol());
 		mDescriptionEditText.setText(mTransaction.getDescription());
 		mDateTextView.setText(DATE_FORMATTER.format(mTransaction.getTimeMillis()));
 		mTimeTextView.setText(TIME_FORMATTER.format(mTransaction.getTimeMillis()));
@@ -170,6 +173,10 @@ private void initializeViewsWithTransaction(){
 				mAccountsSpinner.setSelection(pos);
 		}
 		
+		String code = mTransactionsDbAdapter.getCurrencyCode(accountId);
+		Currency accountCurrency = Currency.getInstance(code);
+		mCurrencyTextView.setText(accountCurrency.getSymbol());
+		
 		ActionBar actionBar = getSherlockActivity().getSupportActionBar();
 		actionBar.setHomeButtonEnabled(true);
 		actionBar.setDisplayHomeAsUpEnabled(true);
@@ -180,18 +187,28 @@ private void initializeViewsWithTransaction(){
 	 * Binds the various views to the appropriate text
 	 */
 	private void initalizeViews() {
-//		mAmountEditText.setText("0");
 		Date time = new Date(System.currentTimeMillis()); 
 		mDateTextView.setText(DATE_FORMATTER.format(time));
 		mTimeTextView.setText(TIME_FORMATTER.format(time));
 		mTime = mDate = Calendar.getInstance();
 				
+		//TODO select the right account even from button
 		final long accountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
 		final int count = mCursorAdapter.getCount();
 		for (int pos = 0; pos < count; pos++) {
 			if (mCursorAdapter.getItemId(pos) == accountId)
 				mAccountsSpinner.setSelection(pos);
 		}
+		
+		String code;
+		if (accountId == 0)
+			code = Currency.getInstance(Locale.getDefault()).getCurrencyCode();
+		else
+			code = mTransactionsDbAdapter.getCurrencyCode(accountId);
+		
+			
+		Currency accountCurrency = Currency.getInstance(code);
+		mCurrencyTextView.setText(accountCurrency.getSymbol());
 	}
 	
 	/**
@@ -222,8 +239,8 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
 				}
 				String amountText = mAmountEditText.getText().toString();
 				if (amountText.length() > 0){
-					BigDecimal decimal = new BigDecimal(amountText);
-					mAmountEditText.setText(decimal.negate().toPlainString()); //trigger an edit to update the number sign
+					Money money = new Money(amountText).negate();
+					mAmountEditText.setText(money.toPlainString()); //trigger an edit to update the number sign
 				} 
 			}
 		});
@@ -397,6 +414,7 @@ public void afterTextChanged(Editable s) {
 			formatter.setMinimumFractionDigits(2);
 			formatter.setMaximumFractionDigits(2);
 			current = formatter.format(amount.doubleValue());
+			
 			mAmountEditText.removeTextChangedListener(this);
 			mAmountEditText.setText(current);
 			mAmountEditText.setSelection(current.length());
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index e79a5a63..10e6af8c 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -25,9 +25,10 @@
 package org.gnucash.android.ui.transactions;
 
 import java.util.HashMap;
+import java.util.Locale;
 
 import org.gnucash.android.R;
-import org.gnucash.android.data.Transaction;
+import org.gnucash.android.data.Money;
 import org.gnucash.android.db.DatabaseAdapter;
 import org.gnucash.android.db.DatabaseCursorLoader;
 import org.gnucash.android.db.DatabaseHelper;
@@ -179,10 +180,10 @@ public void onActivityCreated(Bundle savedInstanceState) {
 	public void refreshList(){
 		getLoaderManager().restartLoader(0, null, this);
 		
-		double sum = mTransactionsDbAdapter.getTransactionsSum(mAccountID);		
+		Money sum = mTransactionsDbAdapter.getTransactionsSum(mAccountID);		
 		mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
-		mSumTextView.setText(Transaction.getFormattedAmount(sum));
-		if (sum < 0)
+		mSumTextView.setText(sum.formattedString(Locale.getDefault()));
+		if (sum.isNegative())
 			mSumTextView.setTextColor(getResources().getColor(R.color.debit_red));
 		else
 			mSumTextView.setTextColor(getResources().getColor(R.color.credit_green));
@@ -374,12 +375,14 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
 		public void bindView(View view, Context context, Cursor cursor) {
 			super.bindView(view, context, cursor);			
 			
-			double amount = cursor.getDouble(DatabaseAdapter.COLUMN_AMOUNT);
+			Money amount = new Money(
+					cursor.getString(DatabaseAdapter.COLUMN_AMOUNT), 
+					mTransactionsDbAdapter.getCurrencyCode(mAccountID));
 			
 			TextView tramount = (TextView) view.findViewById(R.id.transaction_amount);
-			tramount.setText(Transaction.getFormattedAmount(amount));
+			tramount.setText(amount.formattedString(Locale.getDefault()));
 			
-			if (amount < 0)
+			if (amount.isNegative())
 				tramount.setTextColor(getResources().getColor(R.color.debit_red));
 			else
 				tramount.setTextColor(getResources().getColor(R.color.credit_green));
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java
index 02743cb2..4e2877e0 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java
@@ -34,6 +34,7 @@
 import org.gnucash.android.ui.MainActivity;
 import org.gnucash.android.ui.accounts.AccountsListFragment;
 
+import android.os.Build;
 import android.support.v4.app.Fragment;
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.ListView;
@@ -68,8 +69,11 @@ public void testDisplayAccountsList(){
 	}
 	
 	public void testCreateAccount(){
-//		mSolo.clickOnActionBarItem(R.id.menu_add_account);
-		mSolo.clickOnImage(1);
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+			mSolo.clickOnActionBarItem(R.id.menu_add_account);
+		else
+			mSolo.clickOnImage(1);
+		
 		mSolo.waitForText("Create");
 		mSolo.enterText(0, "New Account");
 		
@@ -102,6 +106,7 @@ public void testEditAccount(){
 		mSolo.enterText(0, editedAccountName);
 		
 		mSolo.clickOnButton(1);
+		
 		mSolo.waitForDialogToClose(1000);
 		
 		ListView lv = mSolo.getCurrentListViews().get(0);
@@ -149,7 +154,10 @@ public void testDeleteAccount(){
 		
 		mSolo.clickLongOnText("TO BE DELETED");
 		
+		mSolo.waitForText(getActivity().getString(R.string.edit_accounts));
+		
 		mSolo.clickOnImage(2);
+		
 		mSolo.clickOnText("Delete");
 		
 		mSolo.waitForDialogToClose(1000);
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java b/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java
index b404d4d1..c30d94dc 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java
@@ -28,6 +28,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Money;
 import org.gnucash.android.data.Transaction;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
@@ -140,19 +141,18 @@ private void validateEditTransactionFields(Transaction transaction){
 		assertEquals(transaction.getName(), name);
 		
 		String amountString = mSolo.getEditText(1).getText().toString();
-		double amount = Double.parseDouble(NewTransactionFragment.stripCurrencyFormatting(amountString))/100;
-		amount *= mSolo.getCurrentToggleButtons().get(0).isChecked() ? -1 : 1; //set negative for debit
+		Money amount = new Money(amountString);
 		assertEquals(transaction.getAmount(), amount);
 		
 		String description = mSolo.getEditText(2).getText().toString();
 		assertEquals(transaction.getDescription(), description);
 		
 		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
-		String actualValue = mSolo.getText(5).getText().toString();
+		String actualValue = mSolo.getText(6).getText().toString();
 		assertEquals(expectedValue, actualValue);
 		
 		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
-		actualValue = mSolo.getText(6).getText().toString();
+		actualValue = mSolo.getText(7).getText().toString();
 		assertEquals(expectedValue, actualValue);
 		Spinner spinner = mSolo.getCurrentSpinners().get(0);
 		
