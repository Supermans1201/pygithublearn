From 89c0fcd439ed086274b4e88bf4b344e5aca2e499 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 21 Sep 2014 18:05:27 +0800
Subject: [PATCH 1/3] add TEMP VIEW trans_split_acct

---
 .../org/gnucash/android/db/DatabaseAdapter.java    | 65 ++++++++++++++++++++--
 .../gnucash/android/db/TransactionsDbAdapter.java  | 55 ++++++++----------
 .../gnucash/android/export/qif/QifExporter.java    | 22 ++++----
 3 files changed, 94 insertions(+), 48 deletions(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 39726893..a6f379c0 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -23,6 +23,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.DatabaseSchema.*;
 import org.gnucash.android.model.AccountType;
 
 /**
@@ -58,20 +59,74 @@
 	 * @param context Application context to be used for opening database
 	 */
 	public DatabaseAdapter(Context context) {
-		mDbHelper = new DatabaseHelper(context);
-		mContext = context.getApplicationContext();
-		open();
-	}
+        mDbHelper = new DatabaseHelper(context);
+        mContext = context.getApplicationContext();
+        open();
+        createTempView();
+    }
 
     /**
      * Opens the database adapter with an existing database
      * @param db SQLiteDatabase object
      */
-    public DatabaseAdapter(SQLiteDatabase db){
+    public DatabaseAdapter(SQLiteDatabase db) {
         this.mDb = db;
         this.mContext = GnuCashApplication.getAppContext();
         if (!db.isOpen() || db.isReadOnly())
             throw new IllegalArgumentException("Database not open or is read-only. Require writeable database");
+        createTempView();
+    }
+
+    private void createTempView() {
+        // create a temporary view, combining accounts, transactions and splits
+        mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_split_acct AS SELECT "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_NOTES + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_NOTES + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_CURRENCY + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_UID + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_UID + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_AMOUNT + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_NAME + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_NAME + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_CURRENCY + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_PLACEHOLDER + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_PLACEHOLDER + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_COLOR_CODE + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_COLOR_CODE + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_FAVORITE + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FAVORITE + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_FULL_NAME + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_TYPE + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
+                        + " FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + "=" + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+                        + " , " + AccountEntry.TABLE_NAME + " ON "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
+        );
     }
 
 	/**
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 9f6d861b..1d97e7c8 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -303,23 +303,23 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
 
     }
 
-    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
+    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
-        // transactions, splits ON transactions.uid = splits.transaction_uid ,
-        // ( SELECT transactions.uid AS trans_acct_t_uid ,
+        // trans_split_acct ,
+        // ( SELECT transactions_uid AS trans_acct_t_uid ,
         //      SUBSTR (
         //          MIN (
-        //              ( CASE WHEN IFNULL ( splits.memo , '' ) == '' THEN 'a' ELSE 'b' END ) || splits.account_uid
+        //              ( CASE WHEN IFNULL ( splits_memo , '' ) == '' THEN 'a' ELSE 'b' END ) || accounts_uid
         //          ) ,
         //          2
         //      ) as trans_acct_a_uid ,
-        //   TOTAL ( CASE WHEN splits.type = 'DEBIT' THEN splits.amount ELSE - splits.amount END ) AS trans_acct_balance
-        //   FROM transactions, splits ON transactions.uid = splits.transaction_uid GROUP BY transactions.uid ) AS trans_acct ON
-        // trans_acct.trans_acct_t_uid = transactions.uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid ,
-        // accounts AS account2 ON account2.uid = splits.split_account_uid
+        //   TOTAL ( CASE WHEN splits_type = 'DEBIT' THEN splits_amount ELSE - splits_amount END ) AS trans_acct_balance
+        //   FROM trans_split_acct GROUP BY transactions_uid ) AS trans_acct ON
+        // trans_acct.trans_acct_t_uid = transactions_uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid
         //
-        // This is multi table/sub-query join. The third select would pick one Account_UID for each
-        // Transaction, which can be used to order all transactions.
+        // This is multi table/sub-query join. The second select would pick one Account_UID for each
+        // Transaction, which can be used to order all transactions. If possible, account_uid of a split whose
+        // memo is null is select. Transaction balance is also picked out
         // This is used in QIF export, when all transactions are grouped by accounts.
         //
         // As the split memo for the account used for grouping is lost, a split without a split memo
@@ -331,35 +331,24 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
         //
         // account1 provides information for the grouped account. Splits from the grouped account
         // can be eliminated with a WHERE clause. Transactions in QIF can be auto balanced.
-        // account2 provides information for the account associated with the split.
         //
         // Account, transaction and split Information can be retrieve in a single query.
-        //
-        // Another approach is not to group transactions by account, be prefix each transaction with an account.
-        // It is easier and should also work, never tried though.
         // By Yongxin Wang
         return mDb.query(
-                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
-                " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
-                " , ( SELECT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "." +
+                "trans_split_acct , ( SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
+                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
                 SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
-                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID +
-                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." +
-                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "." +
-                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." +
-                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM " +
-                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
-                " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
-                " GROUP BY " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = " +
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " , " +
+                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
+                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
+                " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
+                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = trans_split_acct." +
+                TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , " +
                 AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
-                " = trans_acct.trans_acct_a_uid , " + AccountEntry.TABLE_NAME + " AS account2 ON account2." +
-                AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID,
-                columns, condition, null, null, null , orderBy);
+                " = trans_acct.trans_acct_a_uid",
+                columns, where, whereArgs, null, null , orderBy);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 2634fae1..fe77a9a7 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -27,6 +27,7 @@
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.Account;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -55,27 +56,28 @@ public void generateExport(Writer writer) throws ExporterException {
         try {
             Cursor cursor = transactionsDbAdapter.fetchTransactionsWithSplitsWithTransactionAccount(
                     new String[]{
-                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
-                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
-                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS split_type",
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS split_memo",
+                            TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " AS trans_uid",
+                            TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
+                            TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
+                            SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
+                            SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " AS split_type",
+                            SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " AS split_memo",
                             "trans_acct.trans_acct_balance AS trans_acct_balance",
                             "account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
                             "account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
                             "account1." + AccountEntry.COLUMN_CURRENCY + " AS acct1_currency",
                             "account1." + AccountEntry.COLUMN_TYPE + " AS acct1_type",
-                            "account2." + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
+                            AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
                     },
                     // no recurrence transactions
-                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                    TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
                             // in qif, split from the one account entry is not recorded (will be auto balanced)
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " != account1." + AccountEntry.COLUMN_UID +
+                            AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " != account1." + AccountEntry.COLUMN_UID +
                             (
                             mParameters.shouldExportAllTransactions() ?
-                                    "" : " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + "== 0"
+                                    "" : " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + "== 0"
                             ),
+                    null,
                     // trans_time ASC : put transactions in time order
                     // trans_uid ASC  : put splits from the same transaction together
                    "trans_time ASC, trans_uid ASC"

From e26bc916c719fa35762548fd016c50a3b3ccdf89 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 21 Sep 2014 18:23:23 +0800
Subject: [PATCH 2/3] add temp view trans_extra_info

---
 .../org/gnucash/android/db/DatabaseAdapter.java    | 40 +++++++++++++++++++++-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 39 +++------------------
 .../gnucash/android/export/qif/QifExporter.java    |  2 +-
 3 files changed, 45 insertions(+), 36 deletions(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index a6f379c0..45d79b21 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -78,7 +78,13 @@ public DatabaseAdapter(SQLiteDatabase db) {
     }
 
     private void createTempView() {
-        // create a temporary view, combining accounts, transactions and splits
+        // Create some temporary views. Temporary views only exists in one DB session, and will not
+        // be saved in the DB
+        //
+        // TODO: Useful views should be add to the DB
+        //
+        // create a temporary view, combining accounts, transactions and splits, as this is often used
+        // in the queries
         mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_split_acct AS SELECT "
                         + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS "
                         + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , "
@@ -127,6 +133,38 @@ private void createTempView() {
                         + " , " + AccountEntry.TABLE_NAME + " ON "
                         + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
         );
+
+        // SELECT transactions_uid AS trans_acct_t_uid ,
+        //      SUBSTR (
+        //          MIN (
+        //              ( CASE WHEN IFNULL ( splits_memo , '' ) == '' THEN 'a' ELSE 'b' END ) || accounts_uid
+        //          ) ,
+        //          2
+        //      ) as trans_acct_a_uid ,
+        //   TOTAL ( CASE WHEN splits_type = 'DEBIT' THEN splits_amount ELSE - splits_amount END ) AS trans_acct_balance
+        //   FROM trans_split_acct GROUP BY transactions_uid
+        //
+        // This temporary view would pick one Account_UID for each
+        // Transaction, which can be used to order all transactions. If possible, account_uid of a split whose
+        // memo is null is select.
+        //
+        // Transaction balance is also picked out by this view
+        //
+        // a split without split memo is chosen if possible, in the following manner:
+        //   if the splits memo is null or empty string, attach an 'a' in front of the split account uid,
+        //   if not, attach a 'b' to the split account uid
+        //   pick the minimal value of the modified account uid (one of the ones begins with 'a', if exists)
+        //   use substr to get account uid
+        mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_extra_info AS SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
+                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
+                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
+                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
+                " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
+        );
     }
 
 	/**
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 1d97e7c8..e27d7269 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -305,49 +305,20 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
 
     public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
-        // trans_split_acct ,
-        // ( SELECT transactions_uid AS trans_acct_t_uid ,
-        //      SUBSTR (
-        //          MIN (
-        //              ( CASE WHEN IFNULL ( splits_memo , '' ) == '' THEN 'a' ELSE 'b' END ) || accounts_uid
-        //          ) ,
-        //          2
-        //      ) as trans_acct_a_uid ,
-        //   TOTAL ( CASE WHEN splits_type = 'DEBIT' THEN splits_amount ELSE - splits_amount END ) AS trans_acct_balance
-        //   FROM trans_split_acct GROUP BY transactions_uid ) AS trans_acct ON
-        // trans_acct.trans_acct_t_uid = transactions_uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid
+        // trans_split_acct , trans_extra_info ON trans_extra_info.trans_acct_t_uid = transactions_uid ,
+        // accounts AS account1 ON account1.uid = trans_extra_info.trans_acct_a_uid
         //
-        // This is multi table/sub-query join. The second select would pick one Account_UID for each
-        // Transaction, which can be used to order all transactions. If possible, account_uid of a split whose
-        // memo is null is select. Transaction balance is also picked out
-        // This is used in QIF export, when all transactions are grouped by accounts.
-        //
-        // As the split memo for the account used for grouping is lost, a split without a split memo
-        // is chosen if possible, in the following manner:
-        //   if the splits memo is null or empty string, attach an 'a' in front of the split account uid,
-        //   if not, attach a 'b' to the split account uid
-        //   pick the minimal value of the modified account uid (one of the ones begins with 'a', if exists)
-        //   use substr to get account uid
+        // views effectively simplified this query
         //
         // account1 provides information for the grouped account. Splits from the grouped account
         // can be eliminated with a WHERE clause. Transactions in QIF can be auto balanced.
         //
         // Account, transaction and split Information can be retrieve in a single query.
-        // By Yongxin Wang
         return mDb.query(
-                "trans_split_acct , ( SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
-                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
-                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
-                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
-                " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
-                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = trans_split_acct." +
+                "trans_split_acct , trans_extra_info ON trans_extra_info.trans_acct_t_uid = trans_split_acct." +
                 TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , " +
                 AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
-                " = trans_acct.trans_acct_a_uid",
+                " = trans_extra_info.trans_acct_a_uid",
                 columns, where, whereArgs, null, null , orderBy);
     }
 
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index fe77a9a7..e6bae5ee 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -62,7 +62,7 @@ public void generateExport(Writer writer) throws ExporterException {
                             SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
                             SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " AS split_type",
                             SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " AS split_memo",
-                            "trans_acct.trans_acct_balance AS trans_acct_balance",
+                            "trans_extra_info.trans_acct_balance AS trans_acct_balance",
                             "account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
                             "account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
                             "account1." + AccountEntry.COLUMN_CURRENCY + " AS acct1_currency",

From 3368d5abd64532b227e667add57145d896303633 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 21 Sep 2014 20:39:32 +0800
Subject: [PATCH 3/3] Export only single currency transacions to QIF

---
 app/src/org/gnucash/android/db/DatabaseAdapter.java     | 4 +++-
 app/src/org/gnucash/android/export/qif/QifExporter.java | 2 ++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 45d79b21..24bf926d 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -162,7 +162,9 @@ private void createTempView() {
                 " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
                 SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
                 SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance , COUNT ( DISTINCT " +
+                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_CURRENCY +
+                " ) AS trans_currency_count FROM trans_split_acct " +
                 " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
         );
     }
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index e6bae5ee..78863dd8 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -71,6 +71,8 @@ public void generateExport(Writer writer) throws ExporterException {
                     },
                     // no recurrence transactions
                     TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                            // exclude transactions involving multiple currencies
+                            "trans_extra_info.trans_currency_count = 1 AND " +
                             // in qif, split from the one account entry is not recorded (will be auto balanced)
                             AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " != account1." + AccountEntry.COLUMN_UID +
                             (
