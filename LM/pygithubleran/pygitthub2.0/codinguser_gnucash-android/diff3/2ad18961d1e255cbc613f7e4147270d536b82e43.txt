From 2ad18961d1e255cbc613f7e4147270d536b82e43 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 1 Dec 2015 10:32:00 +0100
Subject: [PATCH] Finish refactoring reports

Fix crash when switching report fragments
Fix double report fragments loaded into view

Temporarily disable test coverage (jacoco)

TODO: Fix toolbar progressbar visibility
---
 app/build.gradle                                   |   2 +-
 .../gnucash/android/app/GnuCashApplication.java    |   4 +-
 .../android/ui/report/BaseReportFragment.java      |  96 ++---
 .../org/gnucash/android/ui/report/ReportType.java  |  33 +-
 .../gnucash/android/ui/report/ReportsActivity.java |  93 +++--
 ...yFragment.java => ReportsOverviewFragment.java} |  23 +-
 .../ui/report/barchart/BarChartFragment.java       | 398 ---------------------
 .../report/barchart/CashFlowBarChartFragment.java  | 348 +++++++++++++++++-
 .../linechart/CashFlowLineChartFragment.java       |  32 +-
 .../ui/report/piechart/PieChartFragment.java       |   8 +-
 .../ui/report/sheet/BalanceSheetFragment.java      |   8 +-
 .../OnTransferFundsListener.java                   |   2 +-
 .../ui/transaction/SplitEditorFragment.java        |   3 -
 .../ui/transaction/TransactionFormFragment.java    |   2 -
 .../dialog/TransferFundsDialogFragment.java        |   2 +-
 app/src/main/res/layout/reports_toolbar.xml        |   1 +
 16 files changed, 519 insertions(+), 536 deletions(-)
 rename app/src/main/java/org/gnucash/android/ui/report/{ReportSummaryFragment.java => ReportsOverviewFragment.java} (94%)
 delete mode 100644 app/src/main/java/org/gnucash/android/ui/report/barchart/BarChartFragment.java
 rename app/src/main/java/org/gnucash/android/ui/{util => transaction}/OnTransferFundsListener.java (95%)

diff --git a/app/build.gradle b/app/build.gradle
index ccbe04b4..ddb9e6e5 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -90,7 +90,7 @@ android {
         }
         debug {
             debuggable true
-            testCoverageEnabled true
+//            testCoverageEnabled true
             signingConfig signingConfigs.debug
         }
     }
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 9495842c..de297b71 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -112,8 +112,8 @@ public void onCreate(){
         super.onCreate();
         GnuCashApplication.context = getApplicationContext();
 
-        Fabric.with(this, new Crashlytics.Builder().core(
-                new CrashlyticsCore.Builder().disabled(!isCrashlyticsEnabled()).build()).build());
+        if (isCrashlyticsEnabled())
+            Fabric.with(this, new Crashlytics());
 
         // Set this up once when your application launches
         Config config = new Config("gnucash.uservoice.com");
diff --git a/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java b/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java
index 5e42e6d4..9399e325 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java
@@ -15,12 +15,10 @@
  */
 package org.gnucash.android.ui.report;
 
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.Color;
 import android.os.AsyncTask;
 import android.os.Bundle;
-import android.support.annotation.ColorRes;
 import android.support.annotation.LayoutRes;
 import android.support.annotation.Nullable;
 import android.support.annotation.StringRes;
@@ -54,7 +52,15 @@
 
 /**
  * Base class for report fragments.
- * <p>All report fragments should extend this class</p>
+ * <p>All report fragments should extend this class. At the minimum, reports must implement
+ * {@link #getLayoutResource()}, {@link #getReportType()}, {@link #generateReport()}, {@link #displayReport()} and {@link #getTitle()}</p>
+ * <p>Implementing classes should create their own XML layouts and provide it in {@link #getLayoutResource()}.
+ * Then annotate any views in the resource using {@code @Bind} annotation from ButterKnife library.
+ * This base activity will automatically call {@link ButterKnife#bind(View)} for the layout.
+ * </p>
+ * <p>Any custom information to be initialized for the report should be done in {@link #onActivityCreated(Bundle)} in implementing classes.
+ * The report is then generated in {@link #onStart()}
+ * </p>
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public abstract class BaseReportFragment extends Fragment implements
@@ -70,11 +76,11 @@
     /**
      * Reporting period start time
      */
-    protected long mReportStartTime = -1;
+    protected long mReportPeriodStart = -1;
     /**
      * Reporting period end time
      */
-    protected long mReportEndTime = -1;
+    protected long mReportPeriodEnd = -1;
 
     /**
      * Account type for which to display reports
@@ -96,15 +102,11 @@
      */
     public static final String SELECTED_VALUE_PATTERN = "%s - %.2f (%.2f %%)";
 
+    protected ReportsActivity mReportsActivity;
+
     @Nullable @Bind(R.id.selected_chart_slice) protected TextView mSelectedValueTextView;
 
-    /**
-     * Get the color which should use for decorating the app bar for this report
-     * @return Color resource
-     */
-    public @ColorRes int getTitleColor(){
-        return R.color.theme_primary;
-    }
+    private AsyncTask<Void, Void, Void> mReportGenerator;
 
     /**
      * Return the title of this report
@@ -170,7 +172,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         return view;
     }
 
-
     @Override
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
@@ -183,17 +184,23 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         mCurrency = Currency.getInstance(GnuCashApplication.getDefaultCurrencyCode());
 
         ReportsActivity reportsActivity = (ReportsActivity) getActivity();
-        mReportStartTime = reportsActivity.getReportStartTime();
-        mReportEndTime = reportsActivity.getReportEndTime();
+        mReportPeriodStart = reportsActivity.getReportPeriodStart();
+        mReportPeriodEnd = reportsActivity.getReportPeriodEnd();
         mAccountType = reportsActivity.getAccountType();
     }
 
     @Override
+    public void onStart() {
+        super.onStart();
+        refresh();
+    }
+
+    @Override
     public void onResume() {
         super.onResume();
-        ((ReportsActivity)getActivity()).setAppBarColor(getTitleColor());
-        ((ReportsActivity) getActivity()).updateReportTypeSpinner(getReportType());
-        toggleBaseReportingOptions();
+        mReportsActivity.setAppBarColor(getReportType().getTitleColor());
+        mReportsActivity.toggleToolbarTitleVisibility();
+        toggleBaseReportingOptionsVisibility();
     }
 
     @Override
@@ -201,28 +208,29 @@ public void onAttach(Context context) {
         super.onAttach(context);
         if (!(getActivity() instanceof ReportsActivity))
             throw new RuntimeException("Report fragments can only be used with the ReportsActivity");
+        else
+            mReportsActivity = (ReportsActivity) getActivity();
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+        if (mReportGenerator != null)
+            mReportGenerator.cancel(true);
     }
 
-    private void toggleBaseReportingOptions() {
-        final Activity activity = getActivity();
-        View timeRangeLayout = activity.findViewById(R.id.time_range_layout);
-        View dateRangeDivider = activity.findViewById(R.id.date_range_divider);
+    private void toggleBaseReportingOptionsVisibility() {
+        View timeRangeLayout = mReportsActivity.findViewById(R.id.time_range_layout);
+        View dateRangeDivider = mReportsActivity.findViewById(R.id.date_range_divider);
         if (timeRangeLayout != null && dateRangeDivider != null) {
-            if (requiresTimeRangeOptions()) {
-                timeRangeLayout.setVisibility(View.VISIBLE);
-                dateRangeDivider.setVisibility(View.VISIBLE);
-            } else {
-                timeRangeLayout.setVisibility(View.GONE);
-                dateRangeDivider.setVisibility(View.GONE);
-            }
+            int visibility = requiresTimeRangeOptions() ? View.VISIBLE : View.GONE;
+            timeRangeLayout.setVisibility(visibility);
+            dateRangeDivider.setVisibility(visibility);
         }
 
-        View accountTypeSpinner = activity.findViewById(R.id.report_account_type_spinner);
-        if (requiresAccountTypeOptions()) {
-            accountTypeSpinner.setVisibility(View.VISIBLE);
-        } else {
-            accountTypeSpinner.setVisibility(View.GONE);
-        }
+        View accountTypeSpinner = mReportsActivity.findViewById(R.id.report_account_type_spinner);
+        int visibility = requiresAccountTypeOptions() ? View.VISIBLE : View.GONE;
+        accountTypeSpinner.setVisibility(visibility);
     }
 
 
@@ -264,10 +272,15 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 
     @Override
     public void refresh() {
-        new AsyncTask<Void, Void, Void>() {
-            ProgressBar progressBar = (ProgressBar) getActivity().findViewById(R.id.progress_indicator);
+        if (mReportGenerator != null)
+            mReportGenerator.cancel(true);
+
+        mReportGenerator = new AsyncTask<Void, Void, Void>() {
+            ProgressBar progressBar;
+
             @Override
             protected void onPreExecute() {
+                progressBar = (ProgressBar) getActivity().findViewById(R.id.progress_indicator);
                 progressBar.setVisibility(View.VISIBLE);
             }
 
@@ -282,7 +295,8 @@ protected void onPostExecute(Void aVoid) {
                 displayReport();
                 progressBar.setVisibility(View.GONE);
             }
-        }.execute();
+        };
+        mReportGenerator.execute();
     }
 
     /**
@@ -306,9 +320,9 @@ public void onGroupingUpdated(ReportsActivity.GroupInterval groupInterval) {
 
     @Override
     public void onTimeRangeUpdated(long start, long end) {
-        if (mReportStartTime != start || mReportEndTime != end) {
-            mReportStartTime = start;
-            mReportEndTime = end;
+        if (mReportPeriodStart != start || mReportPeriodEnd != end) {
+            mReportPeriodStart = start;
+            mReportPeriodEnd = end;
             refresh();
         }
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportType.java b/app/src/main/java/org/gnucash/android/ui/report/ReportType.java
index 99294809..a5f9f64d 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportType.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportType.java
@@ -17,10 +17,10 @@
 package org.gnucash.android.ui.report;
 
 import android.content.Context;
+import android.support.annotation.ColorRes;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.ui.report.barchart.BarChartFragment;
 import org.gnucash.android.ui.report.barchart.CashFlowBarChartFragment;
 import org.gnucash.android.ui.report.linechart.CashFlowLineChartFragment;
 import org.gnucash.android.ui.report.piechart.PieChartFragment;
@@ -33,33 +33,56 @@
 
 /**
  * Different types of reports
+ * <p>This class also contains mappings for the reports of the different types which are available
+ * in the system. When adding a new report, make sure to add a mapping in the constructor</p>
  */
 public enum ReportType {
     PIE_CHART(0), BAR_CHART(1), LINE_CHART(2), TEXT(3), NONE(4);
 
     Map<String, Class> mReportTypeMap = new HashMap<>();
+    int mValue = 4;
 
     ReportType(int index){
+        mValue = index;
         Context context = GnuCashApplication.getAppContext();
         switch (index){
             case 0:
-                mReportTypeMap.put("Pie Chart", PieChartFragment.class);
+                mReportTypeMap.put(context.getString(R.string.title_pie_chart), PieChartFragment.class);
                 break;
             case 1:
                 mReportTypeMap.put(context.getString(R.string.title_cash_flow_report), CashFlowBarChartFragment.class);
-                mReportTypeMap.put("Bar Chart", BarChartFragment.class);
                 break;
             case 2:
-                mReportTypeMap.put("Income/Expense Statement", CashFlowLineChartFragment.class);
+                mReportTypeMap.put(context.getString(R.string.title_cash_flow_report), CashFlowLineChartFragment.class);
                 break;
             case 3:
-                mReportTypeMap.put("Balance Sheet", BalanceSheetFragment.class);
+                mReportTypeMap.put(context.getString(R.string.title_balance_sheet_report), BalanceSheetFragment.class);
                 break;
             case 4:
                 break;
         }
     }
 
+    /**
+     * Returns the toolbar color to be used for this report type
+     * @return Color resource
+     */
+    public @ColorRes int getTitleColor(){
+        switch (mValue){
+            case 0:
+                return R.color.account_green;
+            case 1:
+                return R.color.account_red;
+            case 2:
+                return R.color.account_blue;
+            case 3:
+                return R.color.account_purple;
+            case 4:
+            default:
+                return R.color.theme_primary;
+        }
+    }
+
     public List<String> getReportNames(){
         return new ArrayList<>(mReportTypeMap.keySet());
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java b/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
index 81486f0b..61ce3228 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
@@ -28,6 +28,7 @@
 import android.support.v4.app.FragmentTransaction;
 import android.support.v7.app.ActionBar;
 import android.support.v7.widget.Toolbar;
+import android.view.KeyEvent;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -53,7 +54,10 @@
 import butterknife.ButterKnife;
 
 /**
- * base activity for reporting
+ * Activity for displaying report fragments (which must implement {@link BaseReportFragment})
+ * <p>In order to add new reports, extend the {@link BaseReportFragment} class to provide the view
+ * for the report. Then add the report mapping in {@link ReportType} constructor depending on what
+ * kind of report it is. The report will be dynamically included at runtime.</p>
  *
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -78,12 +82,13 @@
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private AccountType mAccountType = AccountType.EXPENSE;
     private ReportType mReportType = ReportType.NONE;
+    private ReportsOverviewFragment mReportsOverviewFragment;
 
     public enum GroupInterval {WEEK, MONTH, QUARTER, YEAR, ALL}
 
     // default time range is the last 3 months
-    private long mReportStartTime = new LocalDate().minusMonths(2).dayOfMonth().withMinimumValue().toDate().getTime();
-    private long mReportEndTime = new LocalDate().plusDays(1).toDate().getTime();
+    private long mReportPeriodStart = new LocalDate().minusMonths(2).dayOfMonth().withMinimumValue().toDate().getTime();
+    private long mReportPeriodEnd = new LocalDate().plusDays(1).toDate().getTime();
 
     private GroupInterval mReportGroupInterval = GroupInterval.MONTH;
     private boolean mSkipNextReportTypeSelectedRun = false;
@@ -149,13 +154,20 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             }
         });
 
-        mReportTypeSpinner.setOnItemSelectedListener(mReportTypeSelectedListener);
+        mReportsOverviewFragment = new ReportsOverviewFragment();
 
         if (savedInstanceState == null) {
-            loadFragment(new ReportSummaryFragment());
+            loadFragment(mReportsOverviewFragment);
         }
     }
 
+    @Override
+    public void onAttachFragment(Fragment fragment) {
+        super.onAttachFragment(fragment);
+        BaseReportFragment reportFragment = (BaseReportFragment)fragment;
+        updateReportTypeSpinner(reportFragment.getReportType(), getString(reportFragment.getTitle()));
+    }
+
     /**
      * Load the provided fragment into the view replacing the previous one
      * @param fragment BaseReportFragment instance
@@ -164,9 +176,6 @@ private void loadFragment(BaseReportFragment fragment) {
         FragmentManager fragmentManager = getSupportFragmentManager();
         FragmentTransaction fragmentTransaction = fragmentManager
                 .beginTransaction();
-        
-        if (fragment.getReportType() != ReportType.NONE)
-            fragmentTransaction.addToBackStack(null);
 
         fragmentTransaction.replace(R.id.fragment_container, fragment);
         fragmentTransaction.commit();
@@ -175,19 +184,31 @@ private void loadFragment(BaseReportFragment fragment) {
     /**
      * Update the report type spinner
      */
-    public void updateReportTypeSpinner(ReportType reportType) {
+    public void updateReportTypeSpinner(ReportType reportType, String reportName) {
+        if (reportType == mReportType)//if it is the same report type, don't change anything
+            return;
+
         mReportType = reportType;
         ActionBar actionBar = getSupportActionBar();
         assert actionBar != null;
         ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(actionBar.getThemedContext(),
                 android.R.layout.simple_list_item_1,
                 mReportType.getReportNames());
-        mSkipNextReportTypeSelectedRun = true;
-        mReportTypeSpinner.setOnItemSelectedListener(mReportTypeSelectedListener);
+
+        mSkipNextReportTypeSelectedRun = true; //selection event will be fired again
         mReportTypeSpinner.setAdapter(arrayAdapter);
+        mReportTypeSpinner.setSelection(arrayAdapter.getPosition(reportName));
+        mReportTypeSpinner.setOnItemSelectedListener(mReportTypeSelectedListener);
+
+
+        toggleToolbarTitleVisibility();
+    }
 
+    public void toggleToolbarTitleVisibility() {
+        ActionBar actionBar = getSupportActionBar();
+        assert actionBar != null;
 
-        if (arrayAdapter.isEmpty() || mReportType == ReportType.NONE){
+        if (mReportType == ReportType.NONE){
             mReportTypeSpinner.setVisibility(View.GONE);
         } else {
             mReportTypeSpinner.setVisibility(View.VISIBLE);
@@ -214,7 +235,7 @@ private void updateDateRangeOnFragment(){
         List<Fragment> fragments = getSupportFragmentManager().getFragments();
         for (Fragment fragment : fragments) {
             if (fragment instanceof ReportOptionsListener){
-                ((ReportOptionsListener) fragment).onTimeRangeUpdated(mReportStartTime, mReportEndTime);
+                ((ReportOptionsListener) fragment).onTimeRangeUpdated(mReportPeriodStart, mReportPeriodEnd);
             }
         }
     }
@@ -284,23 +305,23 @@ public boolean onOptionsItemSelected(MenuItem item) {
 
     @Override
     public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-        mReportEndTime = new LocalDate().plusDays(1).toDate().getTime();
+        mReportPeriodEnd = new LocalDate().plusDays(1).toDate().getTime();
         switch (position){
             case 0: //current month
-                mReportStartTime = new LocalDate().dayOfMonth().withMinimumValue().toDate().getTime();
+                mReportPeriodStart = new LocalDate().dayOfMonth().withMinimumValue().toDate().getTime();
                 break;
             case 1: // last 3 months. x-2, x-1, x
-                mReportStartTime = new LocalDate().minusMonths(2).dayOfMonth().withMinimumValue().toDate().getTime();
+                mReportPeriodStart = new LocalDate().minusMonths(2).dayOfMonth().withMinimumValue().toDate().getTime();
                 break;
             case 2:
-                mReportStartTime = new LocalDate().minusMonths(5).dayOfMonth().withMinimumValue().toDate().getTime();
+                mReportPeriodStart = new LocalDate().minusMonths(5).dayOfMonth().withMinimumValue().toDate().getTime();
                 break;
             case 3:
-                mReportStartTime = new LocalDate().minusMonths(11).dayOfMonth().withMinimumValue().toDate().getTime();
+                mReportPeriodStart = new LocalDate().minusMonths(11).dayOfMonth().withMinimumValue().toDate().getTime();
                 break;
             case 4: //ALL TIME
-                mReportStartTime = -1;
-                mReportEndTime = -1;
+                mReportPeriodStart = -1;
+                mReportPeriodEnd = -1;
                 break;
             case 5:
                 String mCurrencyCode = GnuCashApplication.getDefaultCurrencyCode();
@@ -326,14 +347,14 @@ public void onNothingSelected(AdapterView<?> parent) {
     public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
         Calendar calendar = Calendar.getInstance();
         calendar.set(year, monthOfYear, dayOfMonth);
-        mReportStartTime = calendar.getTimeInMillis();
+        mReportPeriodStart = calendar.getTimeInMillis();
         updateDateRangeOnFragment();
     }
 
     @Override
     public void onDateRangeSet(Date startDate, Date endDate) {
-        mReportStartTime = startDate.getTime();
-        mReportEndTime = endDate.getTime();
+        mReportPeriodStart = startDate.getTime();
+        mReportPeriodEnd = endDate.getTime();
         updateDateRangeOnFragment();
 
     }
@@ -342,12 +363,30 @@ public AccountType getAccountType(){
         return mAccountType;
     }
 
-    public long getReportEndTime() {
-        return mReportEndTime;
+    /**
+     * Return the end time of the reporting period
+     * @return Time in millis
+     */
+    public long getReportPeriodEnd() {
+        return mReportPeriodEnd;
     }
 
-    public long getReportStartTime() {
-        return mReportStartTime;
+    /**
+     * Return the start time of the reporting period
+     * @return Time in millis
+     */
+    public long getReportPeriodStart() {
+        return mReportPeriodStart;
     }
 
+    @Override
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
+        if (keyCode == KeyEvent.KEYCODE_BACK){
+            if (mReportType != ReportType.NONE){
+                loadFragment(mReportsOverviewFragment);
+                return true;
+            }
+        }
+        return super.onKeyUp(keyCode, event);
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java b/app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java
similarity index 94%
rename from app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java
rename to app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java
index 18a2b582..ce9beb51 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportSummaryFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java
@@ -20,9 +20,7 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
 import android.support.v4.view.ViewCompat;
 import android.support.v7.widget.AppCompatButton;
 import android.view.Menu;
@@ -43,7 +41,7 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.ui.report.barchart.BarChartFragment;
+import org.gnucash.android.ui.report.barchart.CashFlowBarChartFragment;
 import org.gnucash.android.ui.report.linechart.CashFlowLineChartFragment;
 import org.gnucash.android.ui.report.piechart.PieChartFragment;
 import org.gnucash.android.ui.report.sheet.BalanceSheetFragment;
@@ -65,7 +63,7 @@
  * Shows a summary of reports
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class ReportSummaryFragment extends BaseReportFragment {
+public class ReportsOverviewFragment extends BaseReportFragment {
 
     public static final int LEGEND_TEXT_SIZE = 14;
 
@@ -140,8 +138,6 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         setButtonTint(mLineChartButton, csl);
         csl = new ColorStateList(new int[][]{new int[0]}, new int[]{getResources().getColor(R.color.account_purple)});
         setButtonTint(mBalanceSheetButton, csl);
-
-        refresh();
     }
 
     @Override
@@ -246,7 +242,7 @@ public void onClickChartTypeButton(View view){
                 fragment = new PieChartFragment();
                 break;
             case R.id.btn_bar_chart:
-                fragment = new BarChartFragment();
+                fragment = new CashFlowBarChartFragment();
                 break;
             case R.id.btn_line_chart:
                 fragment = new CashFlowLineChartFragment();
@@ -258,7 +254,10 @@ public void onClickChartTypeButton(View view){
                 fragment = this;
                 break;
         }
-        loadFragment(fragment);
+        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
+        fragmentManager.beginTransaction()
+                .replace(R.id.fragment_container, fragment)
+                .commit();
     }
 
     public void setButtonTint(Button button, ColorStateList tint) {
@@ -270,12 +269,4 @@ public void setButtonTint(Button button, ColorStateList tint) {
         button.setTextColor(getResources().getColor(android.R.color.white));
     }
 
-    private void loadFragment(Fragment fragment){
-        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-
-        fragmentTransaction.replace(R.id.fragment_container, fragment);
-        fragmentTransaction.addToBackStack(null);
-        fragmentTransaction.commit();
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/barchart/BarChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/barchart/BarChartFragment.java
deleted file mode 100644
index 25d974ed..00000000
--- a/app/src/main/java/org/gnucash/android/ui/report/barchart/BarChartFragment.java
+++ /dev/null
@@ -1,398 +0,0 @@
-/*
- * Copyright (c) 2015 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
- * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.ui.report.barchart;
-
-import android.graphics.Color;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
-import android.support.annotation.Nullable;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.widget.Toast;
-
-import com.github.mikephil.charting.charts.BarChart;
-import com.github.mikephil.charting.components.Legend;
-import com.github.mikephil.charting.data.BarData;
-import com.github.mikephil.charting.data.BarDataSet;
-import com.github.mikephil.charting.data.BarEntry;
-import com.github.mikephil.charting.data.Entry;
-import com.github.mikephil.charting.highlight.Highlight;
-import com.github.mikephil.charting.utils.LargeValueFormatter;
-
-import org.gnucash.android.R;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
-import org.gnucash.android.db.adapter.TransactionsDbAdapter;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.AccountType;
-import org.gnucash.android.ui.report.BaseReportFragment;
-import org.gnucash.android.ui.report.ReportType;
-import org.joda.time.LocalDate;
-import org.joda.time.LocalDateTime;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
-import butterknife.Bind;
-
-import static org.gnucash.android.ui.report.ReportsActivity.COLORS;
-
-/**
- * Activity used for drawing a bar chart
- *
- * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
- * @author Ngewi Fet <ngewif@gmail.com>
- */
-public class BarChartFragment extends BaseReportFragment {
-
-    private static final String X_AXIS_MONTH_PATTERN = "MMM YY";
-    private static final String X_AXIS_QUARTER_PATTERN = "Q%d %s";
-    private static final String X_AXIS_YEAR_PATTERN = "YYYY";
-
-    private static final int ANIMATION_DURATION = 2000;
-    private static final int NO_DATA_BAR_COUNTS = 3;
-
-    private AccountsDbAdapter mAccountsDbAdapter = AccountsDbAdapter.getInstance();
-
-    @Bind(R.id.bar_chart) BarChart mChart;
-
-    private boolean mUseAccountColor = true;
-    private boolean mTotalPercentageMode = true;
-    private boolean mChartDataPresent = true;
-
-    @Override
-    public int getTitleColor() {
-        return R.color.account_red;
-    }
-
-    @Override
-    public int getTitle() {
-        return R.string.title_bar_chart;
-    }
-
-    @Override
-    public int getLayoutResource() {
-        return R.layout.fragment_bar_chart;
-    }
-
-    @Override
-    public ReportType getReportType() {
-        return ReportType.BAR_CHART;
-    }
-
-    @Override
-    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-
-        mUseAccountColor = PreferenceManager.getDefaultSharedPreferences(getActivity())
-                .getBoolean(getString(R.string.key_use_account_color), false);
-
-        mChart.setOnChartValueSelectedListener(this);
-        mChart.setDescription("");
-//        mChart.setDrawValuesForWholeStack(false);
-        mChart.getXAxis().setDrawGridLines(false);
-        mChart.getAxisRight().setEnabled(false);
-        mChart.getAxisLeft().setStartAtZero(false);
-        mChart.getAxisLeft().enableGridDashedLine(4.0f, 4.0f, 0);
-        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
-        Legend chartLegend = mChart.getLegend();
-        chartLegend.setForm(Legend.LegendForm.CIRCLE);
-        chartLegend.setPosition(Legend.LegendPosition.BELOW_CHART_CENTER);
-        chartLegend.setWordWrapEnabled(true);
-
-        refresh();
-    }
-
-
-    /**
-     * Returns a data object that represents a user data of the specified account types
-     * @return a {@code BarData} instance that represents a user data
-     */
-    protected BarData getData() {
-        List<BarEntry> values = new ArrayList<>();
-        List<String> labels = new ArrayList<>();
-        List<Integer> colors = new ArrayList<>();
-        Map<String, Integer> accountToColorMap = new LinkedHashMap<>();
-        List<String> xValues = new ArrayList<>();
-        LocalDateTime tmpDate = new LocalDateTime(getStartDate(mAccountType).toDate().getTime());
-        int count = getDateDiff(new LocalDateTime(getStartDate(mAccountType).toDate().getTime()),
-                new LocalDateTime(getEndDate(mAccountType).toDate().getTime()));
-        for (int i = 0; i <= count; i++) {
-            long start = 0;
-            long end = 0;
-            switch (mGroupInterval) {
-                case MONTH:
-                    start = tmpDate.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-                    end = tmpDate.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
-
-                    xValues.add(tmpDate.toString(X_AXIS_MONTH_PATTERN));
-                    tmpDate = tmpDate.plusMonths(1);
-                    break;
-                case QUARTER:
-                    int quarter = getQuarter(tmpDate);
-                    start = tmpDate.withMonthOfYear(quarter * 3 - 2).dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-                    end = tmpDate.withMonthOfYear(quarter * 3).dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
-
-                    xValues.add(String.format(X_AXIS_QUARTER_PATTERN, quarter, tmpDate.toString(" YY")));
-                    tmpDate = tmpDate.plusMonths(3);
-                    break;
-                case YEAR:
-                    start = tmpDate.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-                    end = tmpDate.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
-
-                    xValues.add(tmpDate.toString(X_AXIS_YEAR_PATTERN));
-                    tmpDate = tmpDate.plusYears(1);
-                    break;
-            }
-            List<Float> stack = new ArrayList<>();
-            for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
-                if (account.getAccountType() == mAccountType
-                        && !account.isPlaceholderAccount()
-                        && account.getCurrency() == mCurrency) {
-
-                    double balance = mAccountsDbAdapter.getAccountsBalance(
-                            Collections.singletonList(account.getUID()), start, end).asDouble();
-                    if (balance != 0) {
-                        stack.add((float) balance);
-
-                        String accountName = account.getName();
-                        while (labels.contains(accountName)) {
-                            if (!accountToColorMap.containsKey(account.getUID())) {
-                                for (String label : labels) {
-                                    if (label.equals(accountName)) {
-                                        accountName += " ";
-                                    }
-                                }
-                            } else {
-                                break;
-                            }
-                        }
-                        labels.add(accountName);
-
-                        if (!accountToColorMap.containsKey(account.getUID())) {
-                            Integer color;
-                            if (mUseAccountColor) {
-                                color = (account.getColorHexCode() != null)
-                                        ? Color.parseColor(account.getColorHexCode())
-                                        : COLORS[accountToColorMap.size() % COLORS.length];
-                            } else {
-                                color = COLORS[accountToColorMap.size() % COLORS.length];
-                            }
-                            accountToColorMap.put(account.getUID(), color);
-                        }
-                        colors.add(accountToColorMap.get(account.getUID()));
-
-                        Log.d(TAG, mAccountType + tmpDate.toString(" MMMM yyyy ") + account.getName() + " = " + stack.get(stack.size() - 1));
-                    }
-                }
-            }
-
-            String stackLabels = labels.subList(labels.size() - stack.size(), labels.size()).toString();
-            values.add(new BarEntry(floatListToArray(stack), i, stackLabels));
-        }
-
-        BarDataSet set = new BarDataSet(values, "");
-        set.setDrawValues(false);
-        set.setStackLabels(labels.toArray(new String[labels.size()]));
-        set.setColors(colors);
-
-        if (set.getYValueSum() == 0) {
-            mChartDataPresent = false;
-            return getEmptyData();
-        }
-        mChartDataPresent = true;
-        return new BarData(xValues, set);
-    }
-
-    /**
-     * Returns a data object that represents situation when no user data available
-     * @return a {@code BarData} instance for situation when no user data available
-     */
-    private BarData getEmptyData() {
-        List<String> xValues = new ArrayList<>();
-        List<BarEntry> yValues = new ArrayList<>();
-        for (int i = 0; i < NO_DATA_BAR_COUNTS; i++) {
-            xValues.add("");
-            yValues.add(new BarEntry(i + 1, i));
-        }
-        BarDataSet set = new BarDataSet(yValues, getResources().getString(R.string.label_chart_no_data));
-        set.setDrawValues(false);
-        set.setColor(NO_DATA_COLOR);
-
-        return new BarData(xValues, set);
-    }
-
-    /**
-     * Returns the start data of x-axis for the specified account type
-     * @param accountType account type
-     * @return the start data
-     */
-    private LocalDate getStartDate(AccountType accountType) {
-        TransactionsDbAdapter adapter = TransactionsDbAdapter.getInstance();
-        String code = mCurrency.getCurrencyCode();
-        LocalDate startDate;
-        if (mReportStartTime == -1) {
-            startDate = new LocalDate(adapter.getTimestampOfEarliestTransaction(accountType, code));
-        } else {
-            startDate = new LocalDate(mReportStartTime);
-        }
-        startDate = startDate.withDayOfMonth(1);
-        Log.d(TAG, accountType + " X-axis star date: " + startDate.toString("dd MM yyyy"));
-        return startDate;
-    }
-
-    /**
-     * Returns the end data of x-axis for the specified account type
-     * @param accountType account type
-     * @return the end data
-     */
-    private LocalDate getEndDate(AccountType accountType) {
-        TransactionsDbAdapter adapter = TransactionsDbAdapter.getInstance();
-        String code = mCurrency.getCurrencyCode();
-        LocalDate endDate;
-        if (mReportEndTime == -1) {
-            endDate = new LocalDate(adapter.getTimestampOfLatestTransaction(accountType, code));
-        } else {
-            endDate = new LocalDate(mReportEndTime);
-        }
-        endDate = endDate.withDayOfMonth(1);
-        Log.d(TAG, accountType + " X-axis end date: " + endDate.toString("dd MM yyyy"));
-        return endDate;
-    }
-
-    /**
-     * Converts the specified list of floats to an array
-     * @param list a list of floats
-     * @return a float array
-     */
-    private float[] floatListToArray(List<Float> list) {
-        float array[] = new float[list.size()];
-        for (int i = 0;  i < list.size(); i++) {
-            array[i] = list.get(i);
-        }
-        return array;
-    }
-
-
-    @Override
-    public void generateReport() {
-        mChart.setData(getData());
-        setCustomLegend();
-
-        mChart.getAxisLeft().setDrawLabels(mChartDataPresent);
-        mChart.getXAxis().setDrawLabels(mChartDataPresent);
-        mChart.setTouchEnabled(mChartDataPresent);
-    }
-
-    @Override
-    protected void displayReport() {
-        mChart.notifyDataSetChanged();
-        mChart.highlightValues(null);
-        if (mChartDataPresent) {
-            mChart.animateY(ANIMATION_DURATION);
-        } else {
-            mChart.clearAnimation();
-            mSelectedValueTextView.setText(R.string.label_chart_no_data);
-        }
-
-        mChart.invalidate();
-    }
-
-    /**
-     * Sets custom legend. Disable legend if its items count greater than {@code COLORS} array size.
-     */
-    private void setCustomLegend() {
-        Legend legend = mChart.getLegend();
-        BarDataSet dataSet = mChart.getData().getDataSetByIndex(0);
-
-        LinkedHashSet<String> labels = new LinkedHashSet<>(Arrays.asList(dataSet.getStackLabels()));
-        LinkedHashSet<Integer> colors = new LinkedHashSet<>(dataSet.getColors());
-
-        if (COLORS.length >= labels.size()) {
-            legend.setCustom(new ArrayList<>(colors), new ArrayList<>(labels));
-            return;
-        }
-        legend.setEnabled(false);
-    }
-
-    @Override
-    public void onPrepareOptionsMenu(Menu menu) {
-        menu.findItem(R.id.menu_percentage_mode).setVisible(mChartDataPresent);
-        // hide pie/line chart specific menu items
-        menu.findItem(R.id.menu_order_by_size).setVisible(false);
-        menu.findItem(R.id.menu_toggle_labels).setVisible(false);
-        menu.findItem(R.id.menu_toggle_average_lines).setVisible(false);
-        menu.findItem(R.id.menu_group_other_slice).setVisible(false);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.isCheckable())
-            item.setChecked(!item.isChecked());
-        switch (item.getItemId()) {
-            case R.id.menu_toggle_legend:
-                Legend legend = mChart.getLegend();
-                if (!legend.isLegendCustom()) {
-                    Toast.makeText(getActivity(), R.string.toast_legend_too_long, Toast.LENGTH_LONG).show();
-                    item.setChecked(false);
-                } else {
-                    item.setChecked(!mChart.getLegend().isEnabled());
-                    legend.setEnabled(!mChart.getLegend().isEnabled());
-                    mChart.invalidate();
-                }
-                return true;
-
-            case R.id.menu_percentage_mode:
-                mTotalPercentageMode = !mTotalPercentageMode;
-                int msgId = mTotalPercentageMode ? R.string.toast_chart_percentage_mode_total
-                        : R.string.toast_chart_percentage_mode_current_bar;
-                Toast.makeText(getActivity(), msgId, Toast.LENGTH_LONG).show();
-                return true;
-
-            default:
-                return super.onOptionsItemSelected(item);
-        }
-    }
-
-    @Override
-    public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {
-        if (e == null || ((BarEntry) e).getVals().length == 0) return;
-        BarEntry entry = (BarEntry) e;
-        int index = h.getStackIndex() == -1 ? 0 : h.getStackIndex();
-        String stackLabels = entry.getData().toString();
-        String label = mChart.getData().getXVals().get(entry.getXIndex()) + ", "
-                + stackLabels.substring(1, stackLabels.length() - 1).split(",")[index];
-        double value = Math.abs(entry.getVals()[index]);
-        double sum = 0;
-        if (mTotalPercentageMode) {
-            for (BarEntry barEntry : mChart.getData().getDataSetByIndex(dataSetIndex).getYVals()) {
-                sum += barEntry.getNegativeSum() + barEntry.getPositiveSum();
-            }
-        } else {
-            sum = entry.getNegativeSum() + entry.getPositiveSum();
-        }
-        mSelectedValueTextView.setText(String.format(SELECTED_VALUE_PATTERN, label.trim(), value, value / sum * 100));
-    }
-
-}
diff --git a/app/src/main/java/org/gnucash/android/ui/report/barchart/CashFlowBarChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/barchart/CashFlowBarChartFragment.java
index c37d99e9..7e3620fa 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/barchart/CashFlowBarChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/barchart/CashFlowBarChartFragment.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (c) 2015 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -13,17 +14,73 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.gnucash.android.ui.report.barchart;
 
+import android.graphics.Color;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.Toast;
+
+import com.github.mikephil.charting.charts.BarChart;
+import com.github.mikephil.charting.components.Legend;
+import com.github.mikephil.charting.data.BarData;
+import com.github.mikephil.charting.data.BarDataSet;
+import com.github.mikephil.charting.data.BarEntry;
+import com.github.mikephil.charting.data.Entry;
+import com.github.mikephil.charting.highlight.Highlight;
+import com.github.mikephil.charting.utils.LargeValueFormatter;
+
 import org.gnucash.android.R;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.TransactionsDbAdapter;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.AccountType;
 import org.gnucash.android.ui.report.BaseReportFragment;
 import org.gnucash.android.ui.report.ReportType;
+import org.joda.time.LocalDate;
+import org.joda.time.LocalDateTime;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import butterknife.Bind;
+
+import static org.gnucash.android.ui.report.ReportsActivity.COLORS;
 
 /**
- * Cash flow report fragment
+ * Activity used for drawing a bar chart
+ *
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class CashFlowBarChartFragment extends BaseReportFragment {
 
+    private static final String X_AXIS_MONTH_PATTERN = "MMM YY";
+    private static final String X_AXIS_QUARTER_PATTERN = "Q%d %s";
+    private static final String X_AXIS_YEAR_PATTERN = "YYYY";
+
+    private static final int ANIMATION_DURATION = 2000;
+    private static final int NO_DATA_BAR_COUNTS = 3;
+
+    private AccountsDbAdapter mAccountsDbAdapter = AccountsDbAdapter.getInstance();
+
+    @Bind(R.id.bar_chart) BarChart mChart;
+
+    private boolean mUseAccountColor = true;
+    private boolean mTotalPercentageMode = true;
+    private boolean mChartDataPresent = true;
+
     @Override
     public int getTitle() {
         return R.string.title_cash_flow_report;
@@ -40,17 +97,296 @@ public ReportType getReportType() {
     }
 
     @Override
-    public boolean requiresAccountTypeOptions() {
-        return false;
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        mUseAccountColor = PreferenceManager.getDefaultSharedPreferences(getActivity())
+                .getBoolean(getString(R.string.key_use_account_color), false);
+
+        mChart.setOnChartValueSelectedListener(this);
+        mChart.setDescription("");
+//        mChart.setDrawValuesForWholeStack(false);
+        mChart.getXAxis().setDrawGridLines(false);
+        mChart.getAxisRight().setEnabled(false);
+        mChart.getAxisLeft().setStartAtZero(false);
+        mChart.getAxisLeft().enableGridDashedLine(4.0f, 4.0f, 0);
+        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
+        Legend chartLegend = mChart.getLegend();
+        chartLegend.setForm(Legend.LegendForm.CIRCLE);
+        chartLegend.setPosition(Legend.LegendPosition.BELOW_CHART_CENTER);
+        chartLegend.setWordWrapEnabled(true);
+
+    }
+
+
+    /**
+     * Returns a data object that represents a user data of the specified account types
+     * @return a {@code BarData} instance that represents a user data
+     */
+    protected BarData getData() {
+        List<BarEntry> values = new ArrayList<>();
+        List<String> labels = new ArrayList<>();
+        List<Integer> colors = new ArrayList<>();
+        Map<String, Integer> accountToColorMap = new LinkedHashMap<>();
+        List<String> xValues = new ArrayList<>();
+        LocalDateTime tmpDate = new LocalDateTime(getStartDate(mAccountType).toDate().getTime());
+        int count = getDateDiff(new LocalDateTime(getStartDate(mAccountType).toDate().getTime()),
+                new LocalDateTime(getEndDate(mAccountType).toDate().getTime()));
+        for (int i = 0; i <= count; i++) {
+            long start = 0;
+            long end = 0;
+            switch (mGroupInterval) {
+                case MONTH:
+                    start = tmpDate.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = tmpDate.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    xValues.add(tmpDate.toString(X_AXIS_MONTH_PATTERN));
+                    tmpDate = tmpDate.plusMonths(1);
+                    break;
+                case QUARTER:
+                    int quarter = getQuarter(tmpDate);
+                    start = tmpDate.withMonthOfYear(quarter * 3 - 2).dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = tmpDate.withMonthOfYear(quarter * 3).dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    xValues.add(String.format(X_AXIS_QUARTER_PATTERN, quarter, tmpDate.toString(" YY")));
+                    tmpDate = tmpDate.plusMonths(3);
+                    break;
+                case YEAR:
+                    start = tmpDate.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = tmpDate.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    xValues.add(tmpDate.toString(X_AXIS_YEAR_PATTERN));
+                    tmpDate = tmpDate.plusYears(1);
+                    break;
+            }
+            List<Float> stack = new ArrayList<>();
+            for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
+                if (account.getAccountType() == mAccountType
+                        && !account.isPlaceholderAccount()
+                        && account.getCurrency() == mCurrency) {
+
+                    double balance = mAccountsDbAdapter.getAccountsBalance(
+                            Collections.singletonList(account.getUID()), start, end).asDouble();
+                    if (balance != 0) {
+                        stack.add((float) balance);
+
+                        String accountName = account.getName();
+                        while (labels.contains(accountName)) {
+                            if (!accountToColorMap.containsKey(account.getUID())) {
+                                for (String label : labels) {
+                                    if (label.equals(accountName)) {
+                                        accountName += " ";
+                                    }
+                                }
+                            } else {
+                                break;
+                            }
+                        }
+                        labels.add(accountName);
+
+                        if (!accountToColorMap.containsKey(account.getUID())) {
+                            Integer color;
+                            if (mUseAccountColor) {
+                                color = (account.getColorHexCode() != null)
+                                        ? Color.parseColor(account.getColorHexCode())
+                                        : COLORS[accountToColorMap.size() % COLORS.length];
+                            } else {
+                                color = COLORS[accountToColorMap.size() % COLORS.length];
+                            }
+                            accountToColorMap.put(account.getUID(), color);
+                        }
+                        colors.add(accountToColorMap.get(account.getUID()));
+
+                        Log.d(TAG, mAccountType + tmpDate.toString(" MMMM yyyy ") + account.getName() + " = " + stack.get(stack.size() - 1));
+                    }
+                }
+            }
+
+            String stackLabels = labels.subList(labels.size() - stack.size(), labels.size()).toString();
+            values.add(new BarEntry(floatListToArray(stack), i, stackLabels));
+        }
+
+        BarDataSet set = new BarDataSet(values, "");
+        set.setDrawValues(false);
+        set.setStackLabels(labels.toArray(new String[labels.size()]));
+        set.setColors(colors);
+
+        if (set.getYValueSum() == 0) {
+            mChartDataPresent = false;
+            return getEmptyData();
+        }
+        mChartDataPresent = true;
+        return new BarData(xValues, set);
     }
 
+    /**
+     * Returns a data object that represents situation when no user data available
+     * @return a {@code BarData} instance for situation when no user data available
+     */
+    private BarData getEmptyData() {
+        List<String> xValues = new ArrayList<>();
+        List<BarEntry> yValues = new ArrayList<>();
+        for (int i = 0; i < NO_DATA_BAR_COUNTS; i++) {
+            xValues.add("");
+            yValues.add(new BarEntry(i + 1, i));
+        }
+        BarDataSet set = new BarDataSet(yValues, getResources().getString(R.string.label_chart_no_data));
+        set.setDrawValues(false);
+        set.setColor(NO_DATA_COLOR);
+
+        return new BarData(xValues, set);
+    }
+
+    /**
+     * Returns the start data of x-axis for the specified account type
+     * @param accountType account type
+     * @return the start data
+     */
+    private LocalDate getStartDate(AccountType accountType) {
+        TransactionsDbAdapter adapter = TransactionsDbAdapter.getInstance();
+        String code = mCurrency.getCurrencyCode();
+        LocalDate startDate;
+        if (mReportPeriodStart == -1) {
+            startDate = new LocalDate(adapter.getTimestampOfEarliestTransaction(accountType, code));
+        } else {
+            startDate = new LocalDate(mReportPeriodStart);
+        }
+        startDate = startDate.withDayOfMonth(1);
+        Log.d(TAG, accountType + " X-axis star date: " + startDate.toString("dd MM yyyy"));
+        return startDate;
+    }
+
+    /**
+     * Returns the end data of x-axis for the specified account type
+     * @param accountType account type
+     * @return the end data
+     */
+    private LocalDate getEndDate(AccountType accountType) {
+        TransactionsDbAdapter adapter = TransactionsDbAdapter.getInstance();
+        String code = mCurrency.getCurrencyCode();
+        LocalDate endDate;
+        if (mReportPeriodEnd == -1) {
+            endDate = new LocalDate(adapter.getTimestampOfLatestTransaction(accountType, code));
+        } else {
+            endDate = new LocalDate(mReportPeriodEnd);
+        }
+        endDate = endDate.withDayOfMonth(1);
+        Log.d(TAG, accountType + " X-axis end date: " + endDate.toString("dd MM yyyy"));
+        return endDate;
+    }
+
+    /**
+     * Converts the specified list of floats to an array
+     * @param list a list of floats
+     * @return a float array
+     */
+    private float[] floatListToArray(List<Float> list) {
+        float array[] = new float[list.size()];
+        for (int i = 0;  i < list.size(); i++) {
+            array[i] = list.get(i);
+        }
+        return array;
+    }
+
+
     @Override
-    protected void generateReport() {
-        //// TODO: 29.11.2015 Generate cash flow report
+    public void generateReport() {
+        mChart.setData(getData());
+        setCustomLegend();
+
+        mChart.getAxisLeft().setDrawLabels(mChartDataPresent);
+        mChart.getXAxis().setDrawLabels(mChartDataPresent);
+        mChart.setTouchEnabled(mChartDataPresent);
     }
 
     @Override
     protected void displayReport() {
-        // TODO: 29.11.2015 Display cash flow report
+        mChart.notifyDataSetChanged();
+        mChart.highlightValues(null);
+        if (mChartDataPresent) {
+            mChart.animateY(ANIMATION_DURATION);
+        } else {
+            mChart.clearAnimation();
+            mSelectedValueTextView.setText(R.string.label_chart_no_data);
+        }
+
+        mChart.invalidate();
+    }
+
+    /**
+     * Sets custom legend. Disable legend if its items count greater than {@code COLORS} array size.
+     */
+    private void setCustomLegend() {
+        Legend legend = mChart.getLegend();
+        BarDataSet dataSet = mChart.getData().getDataSetByIndex(0);
+
+        LinkedHashSet<String> labels = new LinkedHashSet<>(Arrays.asList(dataSet.getStackLabels()));
+        LinkedHashSet<Integer> colors = new LinkedHashSet<>(dataSet.getColors());
+
+        if (COLORS.length >= labels.size()) {
+            legend.setCustom(new ArrayList<>(colors), new ArrayList<>(labels));
+            return;
+        }
+        legend.setEnabled(false);
+    }
+
+    @Override
+    public void onPrepareOptionsMenu(Menu menu) {
+        menu.findItem(R.id.menu_percentage_mode).setVisible(mChartDataPresent);
+        // hide pie/line chart specific menu items
+        menu.findItem(R.id.menu_order_by_size).setVisible(false);
+        menu.findItem(R.id.menu_toggle_labels).setVisible(false);
+        menu.findItem(R.id.menu_toggle_average_lines).setVisible(false);
+        menu.findItem(R.id.menu_group_other_slice).setVisible(false);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.isCheckable())
+            item.setChecked(!item.isChecked());
+        switch (item.getItemId()) {
+            case R.id.menu_toggle_legend:
+                Legend legend = mChart.getLegend();
+                if (!legend.isLegendCustom()) {
+                    Toast.makeText(getActivity(), R.string.toast_legend_too_long, Toast.LENGTH_LONG).show();
+                    item.setChecked(false);
+                } else {
+                    item.setChecked(!mChart.getLegend().isEnabled());
+                    legend.setEnabled(!mChart.getLegend().isEnabled());
+                    mChart.invalidate();
+                }
+                return true;
+
+            case R.id.menu_percentage_mode:
+                mTotalPercentageMode = !mTotalPercentageMode;
+                int msgId = mTotalPercentageMode ? R.string.toast_chart_percentage_mode_total
+                        : R.string.toast_chart_percentage_mode_current_bar;
+                Toast.makeText(getActivity(), msgId, Toast.LENGTH_LONG).show();
+                return true;
+
+            default:
+                return super.onOptionsItemSelected(item);
+        }
     }
+
+    @Override
+    public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {
+        if (e == null || ((BarEntry) e).getVals().length == 0) return;
+        BarEntry entry = (BarEntry) e;
+        int index = h.getStackIndex() == -1 ? 0 : h.getStackIndex();
+        String stackLabels = entry.getData().toString();
+        String label = mChart.getData().getXVals().get(entry.getXIndex()) + ", "
+                + stackLabels.substring(1, stackLabels.length() - 1).split(",")[index];
+        double value = Math.abs(entry.getVals()[index]);
+        double sum = 0;
+        if (mTotalPercentageMode) {
+            for (BarEntry barEntry : mChart.getData().getDataSetByIndex(dataSetIndex).getYVals()) {
+                sum += barEntry.getNegativeSum() + barEntry.getPositiveSum();
+            }
+        } else {
+            sum = entry.getNegativeSum() + entry.getPositiveSum();
+        }
+        mSelectedValueTextView.setText(String.format(SELECTED_VALUE_PATTERN, label.trim(), value, value / sum * 100));
+    }
+
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java
index ceef1cc7..7f72d7cd 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java
@@ -90,7 +90,7 @@ public int getLayoutResource() {
 
     @Override
     public int getTitle() {
-        return R.string.title_line_chart;
+        return R.string.title_cash_flow_report;
     }
 
     @Override
@@ -109,12 +109,6 @@ public void onActivityCreated(Bundle savedInstanceState) {
         legend.setTextSize(16);
         legend.setForm(Legend.LegendForm.CIRCLE);
 
-        refresh();
-    }
-
-    @Override
-    public int getTitleColor() {
-        return R.color.account_blue;
     }
 
     @Override
@@ -133,12 +127,12 @@ private LineData getData(List<AccountType> accountTypeList) {
         // LocalDateTime?
         LocalDate startDate;
         LocalDate endDate;
-        if (mReportStartTime == -1 && mReportEndTime == -1) {
+        if (mReportPeriodStart == -1 && mReportPeriodEnd == -1) {
             startDate = new LocalDate(mEarliestTransactionTimestamp).withDayOfMonth(1);
             endDate = new LocalDate(mLatestTransactionTimestamp).withDayOfMonth(1);
         } else {
-            startDate = new LocalDate(mReportStartTime).withDayOfMonth(1);
-            endDate = new LocalDate(mReportEndTime).withDayOfMonth(1);
+            startDate = new LocalDate(mReportPeriodStart).withDayOfMonth(1);
+            endDate = new LocalDate(mReportPeriodEnd).withDayOfMonth(1);
         }
 
         int count = getDateDiff(new LocalDateTime(startDate.toDate().getTime()), new LocalDateTime(endDate.toDate().getTime()));
@@ -222,12 +216,12 @@ private LineData getEmptyData() {
 
         LocalDateTime earliest;
         LocalDateTime latest;
-        if (mReportStartTime == -1 && mReportEndTime == -1) {
+        if (mReportPeriodStart == -1 && mReportPeriodEnd == -1) {
             earliest = new LocalDateTime(mEarliestTimestampsMap.get(accountType));
             latest = new LocalDateTime(mLatestTimestampsMap.get(accountType));
         } else {
-            earliest = new LocalDateTime(mReportStartTime);
-            latest = new LocalDateTime(mReportEndTime);
+            earliest = new LocalDateTime(mReportPeriodStart);
+            latest = new LocalDateTime(mReportPeriodEnd);
         }
         Log.d(TAG, "Earliest " + accountType + " date " + earliest.toString("dd MM yyyy"));
         Log.d(TAG, "Latest " + accountType + " date " + latest.toString("dd MM yyyy"));
@@ -273,9 +267,9 @@ private LineData getEmptyData() {
      * @param accountTypeList account's types which will be processed
      */
     private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeList) {
-        if (mReportStartTime != -1 && mReportEndTime != -1) {
-            mEarliestTransactionTimestamp = mReportStartTime;
-            mLatestTransactionTimestamp = mReportEndTime;
+        if (mReportPeriodStart != -1 && mReportPeriodEnd != -1) {
+            mEarliestTransactionTimestamp = mReportPeriodStart;
+            mLatestTransactionTimestamp = mReportPeriodEnd;
             return;
         }
 
@@ -335,9 +329,9 @@ protected void displayReport() {
 
     @Override
     public void onTimeRangeUpdated(long start, long end) {
-        if (mReportStartTime != start || mReportEndTime != end) {
-            mReportStartTime = start;
-            mReportEndTime = end;
+        if (mReportPeriodStart != start || mReportPeriodEnd != end) {
+            mReportPeriodStart = start;
+            mReportPeriodEnd = end;
             mChart.setData(getData(new ArrayList<>(Arrays.asList(AccountType.INCOME, AccountType.EXPENSE))));
             mChart.invalidate();
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java
index 3c0d86bd..bbe321ce 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java
@@ -95,12 +95,6 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         mChart.getLegend().setWordWrapEnabled(true);
         mChart.getLegend().setPosition(LegendPosition.BELOW_CHART_CENTER);
 
-        refresh();
-    }
-
-    @Override
-    public int getTitleColor() {
-        return R.color.account_green;
     }
 
     @Override
@@ -161,7 +155,7 @@ private PieData getData() {
                     && account.getCurrency() == mCurrency) {
 
                 double balance = mAccountsDbAdapter.getAccountsBalance(Collections.singletonList(account.getUID()),
-                        mReportStartTime, mReportEndTime).asDouble();
+                        mReportPeriodStart, mReportPeriodEnd).asDouble();
                 if (balance > 0) {
                     dataSet.addEntry(new Entry((float) balance, dataSet.getEntryCount()));
                     colors.add(mUseAccountColor && account.getColorHexCode() != null
diff --git a/app/src/main/java/org/gnucash/android/ui/report/sheet/BalanceSheetFragment.java b/app/src/main/java/org/gnucash/android/ui/report/sheet/BalanceSheetFragment.java
index 33cb5037..7a9ff83c 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/sheet/BalanceSheetFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/sheet/BalanceSheetFragment.java
@@ -45,7 +45,7 @@
 import butterknife.ButterKnife;
 
 /**
- * Fragment report as text
+ * Balance sheet report fragment
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class BalanceSheetFragment extends BaseReportFragment {
@@ -70,11 +70,6 @@ public int getLayoutResource() {
     }
 
     @Override
-    public int getTitleColor() {
-        return R.color.account_purple;
-    }
-
-    @Override
     public int getTitle() {
         return R.string.title_balance_sheet_report;
     }
@@ -98,7 +93,6 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
 
         mEquityAccountTypes = new ArrayList<>();
         mEquityAccountTypes.add(AccountType.EQUITY);
-        refresh();
     }
 
     @Override
diff --git a/app/src/main/java/org/gnucash/android/ui/util/OnTransferFundsListener.java b/app/src/main/java/org/gnucash/android/ui/transaction/OnTransferFundsListener.java
similarity index 95%
rename from app/src/main/java/org/gnucash/android/ui/util/OnTransferFundsListener.java
rename to app/src/main/java/org/gnucash/android/ui/transaction/OnTransferFundsListener.java
index fb1c93d8..069b7943 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/OnTransferFundsListener.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/OnTransferFundsListener.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.gnucash.android.ui.util;
+package org.gnucash.android.ui.transaction;
 
 import org.gnucash.android.model.Money;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
index fba6886d..5a35d02f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
@@ -43,8 +43,6 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.crashlytics.android.Crashlytics;
-
 import net.objecthunter.exp4j.Expression;
 import net.objecthunter.exp4j.ExpressionBuilder;
 
@@ -62,7 +60,6 @@
 import org.gnucash.android.ui.common.FormActivity;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.transaction.dialog.TransferFundsDialogFragment;
-import org.gnucash.android.ui.util.OnTransferFundsListener;
 import org.gnucash.android.ui.util.widget.CalculatorEditText;
 import org.gnucash.android.ui.util.widget.CalculatorKeyboard;
 import org.gnucash.android.ui.util.widget.TransactionTypeSwitch;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 624f4820..1f4fd62f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -74,7 +74,6 @@
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.homescreen.WidgetConfigurationActivity;
 import org.gnucash.android.ui.transaction.dialog.TransferFundsDialogFragment;
-import org.gnucash.android.ui.util.OnTransferFundsListener;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.RecurrenceViewClickListener;
 import org.gnucash.android.ui.util.widget.CalculatorEditText;
@@ -91,7 +90,6 @@
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.List;
-import java.util.Locale;
 
 import butterknife.Bind;
 import butterknife.ButterKnife;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index 4cf1f4a8..13bb7077 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -43,7 +43,7 @@
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.util.AmountInputFormatter;
-import org.gnucash.android.ui.util.OnTransferFundsListener;
+import org.gnucash.android.ui.transaction.OnTransferFundsListener;
 
 import java.math.BigDecimal;
 import java.math.MathContext;
diff --git a/app/src/main/res/layout/reports_toolbar.xml b/app/src/main/res/layout/reports_toolbar.xml
index 14feb0bc..594e0007 100644
--- a/app/src/main/res/layout/reports_toolbar.xml
+++ b/app/src/main/res/layout/reports_toolbar.xml
@@ -40,6 +40,7 @@
         <Spinner android:id="@+id/report_type_spinner"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:visibility="gone"
             app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>
     </android.support.v7.widget.Toolbar>
 </FrameLayout>
\ No newline at end of file
