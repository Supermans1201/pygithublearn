From 2f54bc3ec6f29ba4f33c3adc9d880773b3fd224e Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 29 Aug 2013 17:07:29 +0200
Subject: [PATCH] Fixed: selection of transactions or accounts not working
 properly - wrong items selected. Maintain list selection state on orientation
 changes

---
 app/res/layout/list_item_account.xml               |   4 +-
 app/res/layout/list_item_transaction.xml           |   4 +-
 .../android/ui/accounts/AccountsListFragment.java  |  65 ++++-----
 .../ui/transactions/TransactionsListFragment.java  | 146 ++++++++-------------
 .../android/util/CheckableLinearLayout.java        | 116 ++++++++++++++++
 5 files changed, 198 insertions(+), 137 deletions(-)
 create mode 100644 app/src/org/gnucash/android/util/CheckableLinearLayout.java

diff --git a/app/res/layout/list_item_account.xml b/app/res/layout/list_item_account.xml
index 4541f24b..3d5e8772 100644
--- a/app/res/layout/list_item_account.xml
+++ b/app/res/layout/list_item_account.xml
@@ -15,7 +15,7 @@
  limitations under the License.
 -->
 
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<org.gnucash.android.util.CheckableLinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
               android:layout_width="match_parent"
               android:layout_height="?android:attr/listPreferredItemHeight"
               android:gravity="center_vertical"
@@ -58,4 +58,4 @@
             android:focusable="false"
             android:contentDescription="@string/description_add_transaction_icon"/>
 
-</LinearLayout>
\ No newline at end of file
+</org.gnucash.android.util.CheckableLinearLayout>
\ No newline at end of file
diff --git a/app/res/layout/list_item_transaction.xml b/app/res/layout/list_item_transaction.xml
index 65e6e36d..20bad890 100644
--- a/app/res/layout/list_item_transaction.xml
+++ b/app/res/layout/list_item_transaction.xml
@@ -15,7 +15,7 @@
  limitations under the License.
 -->
 
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<org.gnucash.android.util.CheckableLinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
               android:layout_width="match_parent"
               android:layout_height="match_parent"
               android:orientation="vertical">
@@ -63,4 +63,4 @@
                 android:layout_marginRight="12dp"
                 style="@style/ListItemText"/>
     </LinearLayout>
-</LinearLayout>
\ No newline at end of file
+</org.gnucash.android.util.CheckableLinearLayout>
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index d81bd220..071272c5 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -191,6 +191,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 
         ListView lv = getListView();
         lv.setOnItemLongClickListener(this);
+        lv.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
         getLoaderManager().initLoader(0, null, this);
     }
 
@@ -211,11 +212,11 @@ public void onAttach(Activity activity) {
     }
 
     @Override
-    public void onListItemClick(ListView l, View v, int position, long id) {
-        super.onListItemClick(l, v, position, id);
+    public void onListItemClick(ListView listView, View view, int position, long id) {
+        super.onListItemClick(listView, view, position, id);
         if (mInEditMode) {
             mSelectedItemId = id;
-            selectItem(position);
+            listView.setItemChecked(position, true);
             return;
         }
         mAccountSelectedListener.accountSelected(id);
@@ -233,7 +234,7 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position,
         mActionMode = getSherlockActivity().startActionMode(
                 mActionModeCallbacks);
 
-        selectItem(position);
+        getListView().setItemChecked(position, true);
         return true;
     }
 
@@ -303,47 +304,12 @@ public void showConfirmationDialog(long id) {
      */
     public void finishEditMode() {
         mInEditMode = false;
-        deselectPreviousSelectedItem();
+        getListView().setItemChecked(getListView().getCheckedItemPosition(), false);
+//        deselectPreviousSelectedItem();
         mActionMode = null;
         mSelectedItemId = -1;
     }
 
-    /**
-     * Highlights the item at <code>position</code> in the ListView.
-     * Android has facilities for managing list selection but the highlighting
-     * is not reliable when using the ActionBar on pre-Honeycomb devices-
-     *
-     * @param position Position of item to be highlighted
-     */
-    private void selectItem(int position) {
-        deselectPreviousSelectedItem();
-        ListView lv = getListView();
-        lv.setItemChecked(position, true);
-        View v = lv.getChildAt(position - lv.getFirstVisiblePosition());
-        v.setSelected(true);
-        v.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
-        mSelectedViewPosition = position;
-    }
-
-    /**
-     * De-selects the previously selected item in a ListView.
-     * Only one account entry can be highlighted at a time, so the previously selected
-     * one is deselected.
-     */
-    private void deselectPreviousSelectedItem() {
-        if (mSelectedViewPosition >= 0) {
-            ListView lv = getListView();
-            lv.setItemChecked(mSelectedViewPosition, false);
-            View v = getListView().getChildAt(mSelectedViewPosition - lv.getFirstVisiblePosition());
-            if (v == null) {
-                //if we just deleted a row, then the previous position is invalid
-                return;
-            }
-            v.setBackgroundColor(getResources().getColor(android.R.color.transparent));
-            v.setSelected(false);
-        }
-    }
-
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         inflater.inflate(R.menu.account_actions, menu);
@@ -627,6 +593,23 @@ public void onClick(View v) {
             }
             newTransactionButton.setFocusable(false);
         }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            convertView = super.getView(position, convertView, parent);
+            TextView secondaryText = (TextView) convertView.findViewById(R.id.secondary_text);
+
+            ListView listView = (ListView) parent;
+            if (mInEditMode && listView.isItemChecked(position)){
+                convertView.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
+                secondaryText.setTextColor(getResources().getColor(android.R.color.white));
+            } else {
+                convertView.setBackgroundColor(getResources().getColor(android.R.color.transparent));
+                secondaryText.setTextColor(getResources().getColor(android.R.color.secondary_text_light_nodisable));
+            }
+
+            return convertView;
+        }
     }
 
     /**
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index 592331f8..cefafff3 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -29,6 +29,7 @@
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.format.DateFormat;
 import android.util.Log;
+import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -55,7 +56,6 @@
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.Locale;
 
 /**
@@ -97,11 +97,6 @@
 	private ActionMode mActionMode = null;
 	private boolean mInEditMode = false;
 	private long mAccountID;
-	
-	/**
-	 * Selected (checked) transactions in the list when entering ActionMode
-	 */
-	private HashMap<Integer, Long> mSelectedIds = new HashMap<Integer, Long>();
 
 	/**
 	 * Callback listener for editing transactions
@@ -141,7 +136,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
 				return true;
 
 			case R.id.context_menu_delete:
-				for (long id : mSelectedIds.values()) {
+				for (long id : getListView().getCheckedItemIds()) {
 					mTransactionsDbAdapter.deleteRecord(id);
 				}				
 				refreshList();
@@ -181,21 +176,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		return inflater.inflate(R.layout.fragment_transactions_list, container, false);		
 	}
-		
-	@Override
-	public void onSaveInstanceState(Bundle outState) {
-		super.onSaveInstanceState(outState);
-		
-		int[] selectedPositions = new int[mSelectedIds.size()];
-		int i = 0;
-		for (Integer id : mSelectedIds.keySet()) {
-			if (id == null)
-				continue;
-			selectedPositions[i++] = id;			
-		}
-		outState.putIntArray(SAVED_SELECTED_ITEMS, selectedPositions);
-	}
-	
+
 	@Override
 	public void onActivityCreated(Bundle savedInstanceState) {		
 		super.onActivityCreated(savedInstanceState);
@@ -204,14 +185,22 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		aBar.setDisplayShowTitleEnabled(false);
 		aBar.setDisplayHomeAsUpEnabled(true);
 
+        getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
 		setHasOptionsMenu(true);		
 	}
-	
+
+    /**
+     * Refresh the list with transactions from account with ID <code>accountId</code>
+     * @param accountId Database ID of account to load transactions from
+     */
 	public void refreshList(long accountId){
 		mAccountID = accountId;
 		refreshList();
 	}
-	
+
+    /**
+     * Reload the list of transactions and recompute account balances
+     */
 	public void refreshList(){
 		getLoaderManager().restartLoader(0, null, this);
 
@@ -296,9 +285,8 @@ public void onLoaderReset(Loader<Cursor> loader) {
 	 */
 	public void finishEditMode(){
 		mInEditMode = false;
-		deselectAllItems();
+		uncheckAllItems();
 		mActionMode = null;
-		mSelectedIds.clear();
 	}
 	
 	/**
@@ -306,57 +294,24 @@ public void finishEditMode(){
 	 * It sets the number highlighted items
 	 */
 	public void setActionModeTitle(){
-		int count = mSelectedIds.size();
+		int count = getListView().getCheckedItemIds().length; //mSelectedIds.size();
 		if (count > 0){			
 			mActionMode.setTitle(getResources().getString(R.string.title_selected, count));
 		}
 	}
 	
 	/**
-	 * Selects a transaction in the list of transaction
-	 * @param position Position of the item which was selected
-	 */
-	private void selectItem(int position){		
-		ListView lv = getListView();	
-		lv.setItemChecked(position, true);		
-		View v = lv.getChildAt(position -  lv.getFirstVisiblePosition());
-
-		v.setSelected(true);
-        v.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
-        long id = lv.getItemIdAtPosition(position);
-        mSelectedIds.put(position, id);
-	}
-	
-	/**
-	 * Deselects all selected items
-	 */
-	private void deselectAllItems() {
-		Integer[] selectedItemPositions = new Integer[mSelectedIds.size()];
-		mSelectedIds.keySet().toArray(selectedItemPositions);
-		for (int position : selectedItemPositions) {
-			deselectItem(position);
-		}
-	}
-	
-	/**
-	 * Deselects an item at <code>position</code>
-	 * @param position
+	 * Unchecks all the checked items in the list
 	 */
-	private void deselectItem(int position){
-		if (position >= 0){
-			ListView listView = getListView();
-			listView.setItemChecked(position, false);
-			View v = getListView().getChildAt(position - listView.getFirstVisiblePosition());
-			if (v == null){
-				//if we just deleted a row, then the previous position is invalid
-				return;
-			}
-			v.setBackgroundColor(getResources().getColor(android.R.color.transparent));
-			((CheckBox) v.findViewById(R.id.checkbox)).setChecked(false);
-			v.setSelected(false);
-			mSelectedIds.remove(position);
-		}
+	private void uncheckAllItems() {
+        SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();
+        ListView listView = getListView();
+        for (int i = 0; i < checkedPositions.size(); i++) {
+            int position = checkedPositions.keyAt(i);
+            listView.setItemChecked(position, false);
+        }
 	}
+
 	
 	/**
 	 * Starts action mode and activates the Context ActionBar (CAB)
@@ -372,10 +327,12 @@ private void startActionMode(){
 	}
 	
 	/**
-	 * Stops action mode and deselects all selected transactions
+	 * Stops action mode and deselects all selected transactions.
+     * This method only has effect if the number of checked items is greater than 0 and {@link #mActionMode} is not null
 	 */
 	private void stopActionMode(){
-		if (mSelectedIds.size() > 0)
+        int checkedCount = getListView().getCheckedItemIds().length;
+		if (checkedCount > 0 || mActionMode == null)
 			return;
 		else
 			mActionMode.finish();
@@ -397,12 +354,7 @@ protected void showBulkMoveDialog(){
 	    DialogFragment bulkMoveFragment = new BulkMoveDialogFragment();
 	    Bundle args = new Bundle();
 	    args.putLong(ORIGIN_ACCOUNT_ID, mAccountID);
-	    long[] selectedIds = new long[mSelectedIds.size()]; 
-	    int i = 0;
-	    for (long l : mSelectedIds.values()) {
-			selectedIds[i++] = l;			
-		}
-	    args.putLongArray(SELECTED_TRANSACTION_IDS, selectedIds);
+	    args.putLongArray(SELECTED_TRANSACTION_IDS, getListView().getCheckedItemIds());
 	    bulkMoveFragment.setArguments(args);
 	    bulkMoveFragment.show(ft, "bulk_move_dialog");
 	}	
@@ -420,26 +372,37 @@ public TransactionsCursorAdapter(Context context, int layout, Cursor c,
 		
 		@Override
 		public View getView(int position, View convertView, ViewGroup parent) {
-			View view = super.getView(position, convertView, parent);
+			final View view = super.getView(position, convertView, parent);
 			final int itemPosition = position;
-			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox);			
-			checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
+			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox);
+            final TextView secondaryText = (TextView) view.findViewById(R.id.secondary_text);
+
+            checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 				
 				@Override
 				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-					startActionMode();
-					getListView().setItemChecked(itemPosition, isChecked);
-					if (isChecked){
-						selectItem(itemPosition);						
-					} else {
-						deselectItem(itemPosition);
-						stopActionMode();
-					}
-					setActionModeTitle();
+                    getListView().setItemChecked(itemPosition, isChecked);
+                    if (isChecked) {
+                        startActionMode();
+                    } else {
+                        stopActionMode();
+                    }
+                    setActionModeTitle();
 				}
 			});
-			
-			return view;
+
+
+            ListView listView = (ListView) parent;
+            if (mInEditMode && listView.isItemChecked(position)){
+                view.setBackgroundColor(getResources().getColor(R.color.abs__holo_blue_light));
+                secondaryText.setTextColor(getResources().getColor(android.R.color.white));
+            } else {
+                view.setBackgroundColor(getResources().getColor(android.R.color.transparent));
+                secondaryText.setTextColor(getResources().getColor(android.R.color.secondary_text_light_nodisable));
+                checkbox.setChecked(false);
+            }
+
+            return view;
 		}
 		
 		@Override
@@ -531,5 +494,4 @@ public Cursor loadInBackground() {
 		}		
 	}
 
-
 }
diff --git a/app/src/org/gnucash/android/util/CheckableLinearLayout.java b/app/src/org/gnucash/android/util/CheckableLinearLayout.java
new file mode 100644
index 00000000..7035250c
--- /dev/null
+++ b/app/src/org/gnucash/android/util/CheckableLinearLayout.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.util;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Checkable;
+import android.widget.LinearLayout;
+
+/**
+ * An implementation of {@link android.widget.LinearLayout} which implements the {@link android.widget.Checkable} interface.
+ * This layout keeps track of its checked state or alternatively queries its child views for any {@link View} which is Checkable.
+ * If there is a Checkable child view, then that child view determines the check state of the whole layout.
+ *
+ * <p>This layout is designed for use with ListViews with a choice mode other than {@link android.widget.ListView#CHOICE_MODE_NONE}.
+ * Android requires the parent view of the row items in the list to be checkable in order to take advantage of the APIs</p>
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class CheckableLinearLayout extends LinearLayout implements Checkable {
+    /**
+     * Checkable view which holds the checked state of the linear layout
+     */
+    private Checkable mCheckable = null;
+
+    /**
+     * Fallback check state of the linear layout if there is no {@link Checkable} amongst its child views.
+     */
+    private boolean mIsChecked = false;
+
+    public CheckableLinearLayout(Context context) {
+        super(context);
+    }
+
+    public CheckableLinearLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public CheckableLinearLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    /**
+     * Find any instance of a {@link Checkable} amongst the children of the linear layout and store a reference to it
+     */
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+
+        //this prevents us from opening transactions since simply clicking on the item checks the checkable and
+        //activates action mode.
+//        mCheckable = findCheckableView(this);
+    }
+
+    /**
+     * Iterates through the child views of <code>parent</code> to an arbitrary depth and returns the first
+     * {@link Checkable} view found
+     * @param parent ViewGroup in which to search for Checkable children
+     * @return First {@link Checkable} child view of parent found
+     */
+    private Checkable findCheckableView(ViewGroup parent){
+        for (int i = 0; i < parent.getChildCount(); i++) {
+            View childView = parent.getChildAt(i);
+
+            if (childView instanceof Checkable)
+                return (Checkable)childView;
+
+            if (childView instanceof ViewGroup){
+                Checkable checkable = findCheckableView((ViewGroup)childView);
+                if (checkable != null){
+                    return checkable;
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void setChecked(boolean b) {
+        if (mCheckable != null){
+            mCheckable.setChecked(b);
+        } else {
+            mIsChecked = b;
+        }
+        refreshDrawableState();
+    }
+
+    @Override
+    public boolean isChecked() {
+        return (mCheckable != null) ? mCheckable.isChecked() : mIsChecked;
+    }
+
+    @Override
+    public void toggle() {
+        if (mCheckable != null){
+            mCheckable.toggle();
+        } else {
+            mIsChecked = !mIsChecked;
+        }
+        refreshDrawableState();
+    }
+}
