From 588c77806945076678d246b4c2938618f61f936f Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 21 Dec 2015 15:54:41 +0100
Subject: [PATCH] Overhaul settings activity

- use preference compat library to ensure uniform look down for all supported API levels
- use separate preferences per book
---
 .../android/test/ui/ExportTransactionsTest.java    |  22 +-
 .../android/test/ui/PieChartReportTest.java        |   3 +-
 .../android/test/ui/TransactionsActivityTest.java  |   5 +-
 app/src/main/AndroidManifest.xml                   |   4 +-
 .../gnucash/android/app/GnuCashApplication.java    |  12 +-
 .../gnucash/android/export/ExportAsyncTask.java    |  12 +-
 .../android/ui/account/AccountFormFragment.java    |   3 +-
 .../android/ui/common/BaseDrawerActivity.java      |   4 +-
 .../android/ui/export/ExportFormFragment.java      |  16 +-
 .../ui/settings/AboutPreferenceFragment.java       |  20 +-
 .../ui/settings/AccountPreferencesFragment.java    |  79 ++-
 .../ui/settings/AppCompatPreferenceActivity.java   | 128 ----
 .../ui/settings/BackupPreferenceFragment.java      | 339 +++++++++-
 .../ui/settings/GeneralPreferenceFragment.java     |  61 +-
 .../android/ui/settings/PreferenceActivity.java    | 160 +++++
 .../ui/settings/PreferenceHeadersFragment.java     |  35 ++
 .../android/ui/settings/SettingsActivity.java      | 680 ---------------------
 .../settings/TransactionsPreferenceFragment.java   |  66 +-
 .../DeleteAllAccountsConfirmationDialog.java       |   4 +-
 .../DeleteAllTransactionsConfirmationDialog.java   |   9 +-
 .../{ => dialog}/OwnCloudDialogFragment.java       |   6 +-
 .../ui/transaction/TransactionFormFragment.java    |   5 +-
 .../ui/transaction/TransactionsListFragment.java   |   3 +-
 .../main/res/layout-sw600dp/activity_settings.xml  |  37 ++
 app/src/main/res/layout/activity_settings.xml      |  33 +
 app/src/main/res/values-sw600dp/flags.xml          |  20 +
 app/src/main/res/values/dimens.xml                 |   1 -
 app/src/main/res/values/donottranslate.xml         |   2 +-
 app/src/main/res/values/flags.xml                  |  20 +
 app/src/main/res/values/strings.xml                |   2 +
 app/src/main/res/values/themes.xml                 |   2 +
 .../res/xml-v11/fragment_about_preferences.xml     |  40 --
 .../res/xml-v11/fragment_account_preferences.xml   |  19 -
 .../xml-v11/fragment_transaction_preferences.xml   |  34 --
 .../main/res/xml/fragment_about_preferences.xml    |   5 +-
 .../main/res/xml/fragment_account_preferences.xml  |  38 +-
 .../main/res/xml/fragment_backup_preferences.xml   |   6 +-
 .../res/xml/fragment_transaction_preferences.xml   |  34 +-
 .../main/res/xml/preference_fragment_headers.xml   |  35 ++
 39 files changed, 931 insertions(+), 1073 deletions(-)
 delete mode 100644 app/src/main/java/org/gnucash/android/ui/settings/AppCompatPreferenceActivity.java
 create mode 100644 app/src/main/java/org/gnucash/android/ui/settings/PreferenceActivity.java
 create mode 100644 app/src/main/java/org/gnucash/android/ui/settings/PreferenceHeadersFragment.java
 delete mode 100644 app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
 rename app/src/main/java/org/gnucash/android/ui/settings/{ => dialog}/DeleteAllAccountsConfirmationDialog.java (96%)
 rename app/src/main/java/org/gnucash/android/ui/settings/{ => dialog}/DeleteAllTransactionsConfirmationDialog.java (95%)
 rename app/src/main/java/org/gnucash/android/ui/settings/{ => dialog}/OwnCloudDialogFragment.java (98%)
 create mode 100644 app/src/main/res/layout-sw600dp/activity_settings.xml
 create mode 100644 app/src/main/res/layout/activity_settings.xml
 create mode 100644 app/src/main/res/values-sw600dp/flags.xml
 create mode 100644 app/src/main/res/values/flags.xml
 delete mode 100644 app/src/main/res/xml-v11/fragment_about_preferences.xml
 delete mode 100644 app/src/main/res/xml-v11/fragment_account_preferences.xml
 delete mode 100644 app/src/main/res/xml-v11/fragment_transaction_preferences.xml
 create mode 100644 app/src/main/res/xml/preference_fragment_headers.xml

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index d5fbe27c..4f2741c6 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -18,6 +18,7 @@
 
 import android.Manifest;
 import android.app.AlertDialog;
+import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
@@ -52,6 +53,7 @@
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.FixMethodOrder;
@@ -142,27 +144,27 @@ public void setUp() throws Exception {
 	 */
 	@Test
 	public void testOfxExport(){
-		PreferenceManager.getDefaultSharedPreferences(mAcccountsActivity)
-				.edit().putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), false)
+		SharedPreferences.Editor prefsEditor = PreferenceActivity.getBookSharedPreferences(mAcccountsActivity)
+				.edit();
+		prefsEditor.putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), false)
 				.commit();
         testExport(ExportFormat.OFX);
-		PreferenceManager.getDefaultSharedPreferences(mAcccountsActivity)
-				.edit().putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), true)
+		prefsEditor.putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), true)
 				.commit();
 	}
 
 	@Test
 	public void whenInSingleEntry_shouldHideXmlExportOption(){
-		PreferenceManager.getDefaultSharedPreferences(mAcccountsActivity)
-				.edit().putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), false)
+		SharedPreferences.Editor prefsEditor = PreferenceActivity.getBookSharedPreferences(mAcccountsActivity)
+				.edit();
+		prefsEditor.putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), false)
 				.commit();
 
 		DrawerActions.openDrawer(R.id.drawer_layout);
 		onView(withText(R.string.nav_menu_export)).perform(click());
 		onView(withId(R.id.radio_xml_format)).check(matches(withEffectiveVisibility(ViewMatchers.Visibility.GONE)));
 
-		PreferenceManager.getDefaultSharedPreferences(mAcccountsActivity)
-				.edit().putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), true)
+		prefsEditor.putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), true)
 				.commit();
 	}
 
@@ -222,13 +224,13 @@ public void testExport(ExportFormat format){
 	public void testDeleteTransactionsAfterExport(){
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isGreaterThan(0);
 
-		PreferenceManager.getDefaultSharedPreferences(getActivity()).edit()
+		PreferenceActivity.getBookSharedPreferences(getActivity()).edit()
 				.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), true).commit();
 
 		testExport(ExportFormat.XML);
 
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(0);
-		PreferenceManager.getDefaultSharedPreferences(getActivity()).edit()
+		PreferenceActivity.getBookSharedPreferences(getActivity()).edit()
 				.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), false).commit();
 	}
 
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index 00ef29f6..0fc59cee 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -51,6 +51,7 @@
 import org.gnucash.android.ui.report.BaseReportFragment;
 import org.gnucash.android.ui.report.piechart.PieChartFragment;
 import org.gnucash.android.ui.report.ReportsActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.joda.time.LocalDateTime;
 import org.junit.After;
 import org.junit.Before;
@@ -128,7 +129,7 @@ public void setUp() throws Exception {
 
         CURRENCY = new CommoditiesDbAdapter(db).getCommodity("USD");
 
-        PreferenceManager.getDefaultSharedPreferences(mReportsActivity).edit()
+        PreferenceActivity.getBookSharedPreferences(mReportsActivity).edit()
                 .putString(mReportsActivity.getString(R.string.key_default_currency), CURRENCY.getCurrencyCode())
                 .commit();
 
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index ce7afd3d..18a076df 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -46,6 +46,7 @@
 import org.gnucash.android.model.TransactionType;
 import org.gnucash.android.receivers.TransactionRecorder;
 import org.gnucash.android.ui.common.UxArgument;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.junit.After;
@@ -372,7 +373,7 @@ public void testSplitEditor(){
 
 
     private void setDoubleEntryEnabled(boolean enabled){
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+        SharedPreferences prefs = PreferenceActivity.getBookSharedPreferences(getActivity());
         Editor editor = prefs.edit();
         editor.putBoolean(getActivity().getString(R.string.key_use_double_entry), enabled);
         editor.commit();
@@ -387,7 +388,7 @@ public void testDefaultTransactionType(){
 	}
 
 	private void setDefaultTransactionType(TransactionType type) {
-		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		SharedPreferences prefs = PreferenceActivity.getBookSharedPreferences(getActivity());
 		Editor editor = prefs.edit();
 		editor.putString(getActivity().getString(R.string.key_default_transaction_type), type.name());
 		editor.commit();
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 320bf654..18d3dead 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -83,8 +83,6 @@
             android:noHistory="true"
             android:windowSoftInputMode="stateAlwaysHidden">
         </activity>
-        <activity android:name=".ui.settings.SettingsActivity"
-            android:theme="@style/Theme.GnucashTheme" />
         <activity android:name=".ui.transaction.ScheduledActionsActivity" />
         <activity android:name=".ui.passcode.PasscodePreferenceActivity"
             android:theme="@style/Theme.GnucashTheme" />
@@ -107,6 +105,8 @@
             android:launchMode="singleTop"/>
         <activity android:name=".ui.wizard.FirstRunWizardActivity"
             android:theme="@style/Theme.GnucashTheme" />
+        <activity android:name=".ui.settings.PreferenceActivity"
+            android:theme="@style/Theme.GnucashTheme" />
         <activity android:name="com.dropbox.sync.android.DbxAuthActivity" />
         <activity
             android:name="com.dropbox.client2.android.AuthActivity"
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 2f0c9bc9..b125ec6c 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -52,6 +52,7 @@
 import org.gnucash.android.model.Money;
 import org.gnucash.android.service.SchedulerService;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 
 import java.util.Currency;
 import java.util.Locale;
@@ -134,6 +135,8 @@ public void onCreate(){
 
         initDatabaseAdapters();
 
+        //TODO: migrate preferences from defaultShared to book
+
         setDefaultCurrencyCode(getDefaultCurrencyCode());
     }
 
@@ -231,7 +234,6 @@ public static Context getAppContext() {
      * @return {@code true} if crashlytics is enabled, {@code false} otherwise
      */
     public static boolean isCrashlyticsEnabled(){
-        final Context context = getAppContext();
         return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(context.getString(R.string.key_enable_crashlytics), false);
     }
 
@@ -241,7 +243,7 @@ public static boolean isCrashlyticsEnabled(){
      * @return <code>true</code> if double entry is enabled, <code>false</code> otherwise
      */
     public static boolean isDoubleEntryEnabled(){
-        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
+        SharedPreferences sharedPrefs = PreferenceActivity.getBookSharedPreferences(context);
         return sharedPrefs.getBoolean(context.getString(R.string.key_use_double_entry), false);
     }
 
@@ -252,7 +254,7 @@ public static boolean isDoubleEntryEnabled(){
      * @return <code>true</code> if opening balances should be saved, <code>false</code> otherwise
      */
     public static boolean shouldSaveOpeningBalances(boolean defaultValue){
-        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
+        SharedPreferences sharedPrefs = PreferenceActivity.getBookSharedPreferences(context);
         return sharedPrefs.getBoolean(context.getString(R.string.key_save_opening_balances), defaultValue);
     }
 
@@ -270,7 +272,7 @@ public static String getDefaultCurrencyCode(){
         Locale locale = getDefaultLocale();
 
         String currencyCode = "USD"; //start with USD as the default
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        SharedPreferences prefs = PreferenceActivity.getBookSharedPreferences(context);
         try { //there are some strange locales out there
             currencyCode = Currency.getInstance(locale).getCurrencyCode();
         } catch (Throwable e) {
@@ -293,7 +295,7 @@ public static String getDefaultCurrencyCode(){
      * @see #getDefaultCurrencyCode()
      */
     public static void setDefaultCurrencyCode(@NonNull String currencyCode){
-        PreferenceManager.getDefaultSharedPreferences(getAppContext()).edit()
+        PreferenceActivity.getBookSharedPreferences(context).edit()
                 .putString(getAppContext().getString(R.string.key_default_currency), currencyCode)
                 .apply();
         Money.DEFAULT_CURRENCY_CODE = currencyCode;
diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 14497586..b6322d4e 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -46,13 +46,13 @@
 import com.google.android.gms.drive.DriveFolder;
 import com.google.android.gms.drive.DriveId;
 import com.google.android.gms.drive.MetadataChangeSet;
-import com.owncloud.android.lib.common.OwnCloudClientFactory;
 import com.owncloud.android.lib.common.OwnCloudClient;
+import com.owncloud.android.lib.common.OwnCloudClientFactory;
 import com.owncloud.android.lib.common.OwnCloudCredentialsFactory;
 import com.owncloud.android.lib.common.operations.RemoteOperationResult;
-import com.owncloud.android.lib.resources.files.UploadRemoteFileOperation;
 import com.owncloud.android.lib.resources.files.CreateRemoteFolderOperation;
 import com.owncloud.android.lib.resources.files.FileUtils;
+import com.owncloud.android.lib.resources.files.UploadRemoteFileOperation;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
@@ -64,7 +64,7 @@
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.account.AccountsListFragment;
-import org.gnucash.android.ui.settings.SettingsActivity;
+import org.gnucash.android.ui.settings.BackupPreferenceFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 
 import java.io.File;
@@ -270,7 +270,7 @@ protected void onPostExecute(Boolean exportResult) {
 
     private void moveExportToGoogleDrive(){
         Log.i(TAG, "Moving exported file to Google Drive");
-        final GoogleApiClient googleApiClient = SettingsActivity.getGoogleApiClient(GnuCashApplication.getAppContext());
+        final GoogleApiClient googleApiClient = BackupPreferenceFragment.getGoogleApiClient(GnuCashApplication.getAppContext());
         googleApiClient.blockingConnect();
         final ResultCallback<DriveFolder.DriveFileResult> fileCallback = new
                 ResultCallback<DriveFolder.DriveFileResult>() {
@@ -330,8 +330,8 @@ public void onResult(DriveApi.DriveContentsResult result) {
 
     private void moveExportToDropbox() {
         Log.i(TAG, "Copying exported file to DropBox");
-        String dropboxAppKey = mContext.getString(R.string.dropbox_app_key, SettingsActivity.DROPBOX_APP_KEY);
-        String dropboxAppSecret = mContext.getString(R.string.dropbox_app_secret, SettingsActivity.DROPBOX_APP_SECRET);
+        String dropboxAppKey = mContext.getString(R.string.dropbox_app_key, BackupPreferenceFragment.DROPBOX_APP_KEY);
+        String dropboxAppSecret = mContext.getString(R.string.dropbox_app_secret, BackupPreferenceFragment.DROPBOX_APP_SECRET);
         DbxAccountManager mDbxAcctMgr = DbxAccountManager.getInstance(mContext.getApplicationContext(),
                 dropboxAppKey, dropboxAppSecret);
         DbxFile dbExportFile = null;
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index b1a48f45..75be0e4d 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -65,6 +65,7 @@
 import org.gnucash.android.ui.colorpicker.ColorPickerSwatch;
 import org.gnucash.android.ui.colorpicker.ColorSquare;
 import org.gnucash.android.ui.common.UxArgument;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.util.CommoditiesCursorAdapter;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
@@ -246,7 +247,7 @@ public void onCreate(Bundle savedInstanceState) {
 		setHasOptionsMenu(true);
         mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 
-        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+        SharedPreferences sharedPrefs = PreferenceActivity.getBookSharedPreferences(getActivity());
         mUseDoubleEntry = sharedPrefs.getBoolean(getString(R.string.key_use_double_entry), true);
 	}
 	
diff --git a/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java b/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java
index 9c79a913..77f3af42 100644
--- a/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java
@@ -46,7 +46,7 @@
 import org.gnucash.android.ui.budget.BudgetsActivity;
 import org.gnucash.android.ui.passcode.PasscodeLockActivity;
 import org.gnucash.android.ui.report.ReportsActivity;
-import org.gnucash.android.ui.settings.SettingsActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.ui.transaction.ScheduledActionsActivity;
 
 import butterknife.Bind;
@@ -259,7 +259,7 @@ protected void onDrawerMenuItemClicked(int itemId) {
                 break;
 
             case R.id.nav_item_settings: //Settings activity
-                startActivity(new Intent(this, SettingsActivity.class));
+                startActivity(new Intent(this, PreferenceActivity.class));
                 break;
 
             case R.id.nav_item_help:
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 2414bd1e..5ef90f04 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -62,8 +62,8 @@
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.common.UxArgument;
-import org.gnucash.android.ui.settings.OwnCloudDialogFragment;
-import org.gnucash.android.ui.settings.SettingsActivity;
+import org.gnucash.android.ui.settings.BackupPreferenceFragment;
+import org.gnucash.android.ui.settings.dialog.OwnCloudDialogFragment;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.RecurrenceViewClickListener;
@@ -308,8 +308,8 @@ public void onItemSelected(AdapterView<?> parent, View view, int position, long
 					case 1:
 						recurrenceOptionsView.setVisibility(View.VISIBLE);
 						mExportTarget = ExportParams.ExportTarget.DROPBOX;
-						String dropboxAppKey = getString(R.string.dropbox_app_key, SettingsActivity.DROPBOX_APP_KEY);
-						String dropboxAppSecret = getString(R.string.dropbox_app_secret, SettingsActivity.DROPBOX_APP_SECRET);
+						String dropboxAppKey = getString(R.string.dropbox_app_key, BackupPreferenceFragment.DROPBOX_APP_KEY);
+						String dropboxAppSecret = getString(R.string.dropbox_app_secret, BackupPreferenceFragment.DROPBOX_APP_SECRET);
 						DbxAccountManager mDbxAccountManager = DbxAccountManager.getInstance(getActivity().getApplicationContext(),
 								dropboxAppKey, dropboxAppSecret);
 						if (!mDbxAccountManager.hasLinkedAccount()) {
@@ -319,8 +319,8 @@ public void onItemSelected(AdapterView<?> parent, View view, int position, long
 					case 2:
 						recurrenceOptionsView.setVisibility(View.VISIBLE);
 						mExportTarget = ExportParams.ExportTarget.GOOGLE_DRIVE;
-						SettingsActivity.mGoogleApiClient = SettingsActivity.getGoogleApiClient(getActivity());
-						SettingsActivity.mGoogleApiClient.connect();
+						BackupPreferenceFragment.mGoogleApiClient = BackupPreferenceFragment.getGoogleApiClient(getActivity());
+						BackupPreferenceFragment.mGoogleApiClient.connect();
 						break;
 					case 3:
 						recurrenceOptionsView.setVisibility(View.VISIBLE);
@@ -476,8 +476,8 @@ public void onRecurrenceSet(String rrule) {
 	 */
 	@Override
 	public void onActivityResult(int requestCode, int resultCode, Intent data) {
-		if (requestCode == SettingsActivity.REQUEST_RESOLVE_CONNECTION && resultCode == Activity.RESULT_OK) {
-			SettingsActivity.mGoogleApiClient.connect();
+		if (requestCode == BackupPreferenceFragment.REQUEST_RESOLVE_CONNECTION && resultCode == Activity.RESULT_OK) {
+			BackupPreferenceFragment.mGoogleApiClient.connect();
 		}
 	}
 
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java
index 6194f0c3..805a44cb 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/AboutPreferenceFragment.java
@@ -18,12 +18,14 @@
 
 import android.annotation.TargetApi;
 import android.os.Bundle;
-import android.preference.Preference;
-import android.preference.PreferenceFragment;
 import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceFragmentCompat;
 
 import org.gnucash.android.BuildConfig;
 import org.gnucash.android.R;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.ui.account.AccountsActivity;
 
 
@@ -32,14 +34,18 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  *
  */
-@TargetApi(11)
-public class AboutPreferenceFragment extends PreferenceFragment{
-	
+public class AboutPreferenceFragment extends PreferenceFragmentCompat{
+
+	@Override
+	public void onCreatePreferences(Bundle bundle, String s) {
+		addPreferencesFromResource(R.xml.fragment_about_preferences);
+	}
+
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		addPreferencesFromResource(R.xml.fragment_about_preferences);
-		ActionBar actionBar = ((AppCompatPreferenceActivity) getActivity()).getSupportActionBar();
+
+		ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
 		actionBar.setHomeButtonEnabled(true);
 		actionBar.setDisplayHomeAsUpEnabled(true);
 		actionBar.setTitle(R.string.title_about_gnucash);
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/AccountPreferencesFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
index b1215f19..3ce550bc 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
@@ -16,23 +16,26 @@
 
 package org.gnucash.android.ui.settings;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
+import android.content.Intent;
 import android.database.Cursor;
 import android.os.Bundle;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceFragment;
 import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.preference.ListPreference;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceFragmentCompat;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.settings.dialog.DeleteAllAccountsConfirmationDialog;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -43,25 +46,25 @@
  * @author Ngewi Fet <ngewi.fet@gmail.com>
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
-@TargetApi(11)
-public class AccountPreferencesFragment extends PreferenceFragment {
-
-    private Activity mActivity;
+public class AccountPreferencesFragment extends PreferenceFragmentCompat implements
+        Preference.OnPreferenceChangeListener, Preference.OnPreferenceClickListener{
 
     List<CharSequence> mCurrencyEntries = new ArrayList<>();
     List<CharSequence> mCurrencyEntryValues = new ArrayList<>();
 
     @Override
+    public void onCreatePreferences(Bundle bundle, String s) {
+        addPreferencesFromResource(R.xml.fragment_account_preferences);
+    }
+
+    @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        addPreferencesFromResource(R.xml.fragment_account_preferences);
-        ActionBar actionBar = ((AppCompatPreferenceActivity) getActivity()).getSupportActionBar();
-        actionBar.setHomeButtonEnabled(true);
-        actionBar.setDisplayHomeAsUpEnabled(true);
-        actionBar.setTitle(R.string.title_account_preferences);
+        getPreferenceManager().setSharedPreferencesName(BooksDbAdapter.getInstance().getActiveBookUID());
 
-        mActivity = getActivity();
+        ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
+        actionBar.setTitle(R.string.title_account_preferences);
 
         Cursor cursor = CommoditiesDbAdapter.getInstance().fetchAllRecords(DatabaseSchema.CommodityEntry.COLUMN_MNEMONIC + " ASC");
         while(cursor.moveToNext()){
@@ -81,7 +84,7 @@ public void onResume() {
         Preference pref = findPreference(getString(R.string.key_default_currency));
         String currencyName = CommoditiesDbAdapter.getInstance().getCommodity(defaultCurrency).getFullname();
         pref.setSummary(currencyName);
-        pref.setOnPreferenceChangeListener((SettingsActivity) getActivity());
+        pref.setOnPreferenceChangeListener(this);
 
         CharSequence[] entries = new CharSequence[mCurrencyEntries.size()];
         CharSequence[] entryValues = new CharSequence[mCurrencyEntryValues.size()];
@@ -89,13 +92,13 @@ public void onResume() {
         ((ListPreference) pref).setEntryValues(mCurrencyEntryValues.toArray(entryValues));
 
         Preference preference = findPreference(getString(R.string.key_import_accounts));
-        preference.setOnPreferenceClickListener((SettingsActivity)getActivity());
+        preference.setOnPreferenceClickListener(this);
 
         preference = findPreference(getString(R.string.key_delete_all_accounts));
         preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
             @Override
             public boolean onPreferenceClick(Preference preference) {
-                deleteAllAccounts();
+                showDeleteAccountsDialog();
                 return true;
             }
         });
@@ -111,7 +114,7 @@ public boolean onPreferenceClick(Preference preference) {
                         .setPositiveButton(R.string.btn_create_accounts, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
-                                AccountsActivity.createDefaultAccounts(Money.DEFAULT_CURRENCY_CODE, mActivity);
+                                AccountsActivity.createDefaultAccounts(Money.DEFAULT_CURRENCY_CODE, getActivity());
                             }
                         })
                         .setNegativeButton(R.string.btn_cancel, new DialogInterface.OnClickListener() {
@@ -128,9 +131,45 @@ public void onClick(DialogInterface dialogInterface, int i) {
         });
     }
 
-    public void deleteAllAccounts(){
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        String key = preference.getKey();
+
+        if (key.equals(getString(R.string.key_import_accounts))){
+            AccountsActivity.startXmlFileChooser(getActivity());
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (preference.getKey().equals(getString(R.string.key_default_currency))){
+            GnuCashApplication.setDefaultCurrencyCode(newValue.toString());
+            String fullname = CommoditiesDbAdapter.getInstance().getCommodity(newValue.toString()).getFullname();
+            preference.setSummary(fullname);
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Show the dialog for deleting accounts
+     */
+    public void showDeleteAccountsDialog(){
         DeleteAllAccountsConfirmationDialog deleteConfirmationDialog = DeleteAllAccountsConfirmationDialog.newInstance();
-        deleteConfirmationDialog.show(getFragmentManager(), "account_settings");
+        deleteConfirmationDialog.show(getActivity().getSupportFragmentManager(), "account_settings");
+    }
 
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch (requestCode){
+            case AccountsActivity.REQUEST_PICK_ACCOUNTS_FILE:
+                if (resultCode == Activity.RESULT_OK && data != null) {
+                    AccountsActivity.importXmlFileFromIntent(getActivity(), data, null);
+                }
+                break;
+        }
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/AppCompatPreferenceActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/AppCompatPreferenceActivity.java
deleted file mode 100644
index c0cea92c..00000000
--- a/app/src/main/java/org/gnucash/android/ui/settings/AppCompatPreferenceActivity.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright (C) 2014 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.ui.settings;
-
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.preference.PreferenceActivity;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
-import android.support.v7.app.ActionBar;
-import android.support.v7.app.AppCompatDelegate;
-import android.support.v7.widget.Toolbar;
-import android.view.MenuInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-/**
- * A {@link android.preference.PreferenceActivity} which implements and proxies the necessary calls
- * to be used with AppCompat.
- *
- * This technique can be used with an {@link android.app.Activity} class, not just
- * {@link android.preference.PreferenceActivity}.
- */
-public abstract class AppCompatPreferenceActivity extends PreferenceActivity {
-
-    private AppCompatDelegate mDelegate;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        getDelegate().installViewFactory();
-        getDelegate().onCreate(savedInstanceState);
-        super.onCreate(savedInstanceState);
-    }
-
-    @Override
-    protected void onPostCreate(Bundle savedInstanceState) {
-        super.onPostCreate(savedInstanceState);
-        getDelegate().onPostCreate(savedInstanceState);
-    }
-
-    public ActionBar getSupportActionBar() {
-        return getDelegate().getSupportActionBar();
-    }
-
-    public void setSupportActionBar(@Nullable Toolbar toolbar) {
-        getDelegate().setSupportActionBar(toolbar);
-    }
-
-    @Override
-    public MenuInflater getMenuInflater() {
-        return getDelegate().getMenuInflater();
-    }
-
-    @Override
-    public void setContentView(@LayoutRes int layoutResID) {
-        getDelegate().setContentView(layoutResID);
-    }
-
-    @Override
-    public void setContentView(View view) {
-        getDelegate().setContentView(view);
-    }
-
-    @Override
-    public void setContentView(View view, ViewGroup.LayoutParams params) {
-        getDelegate().setContentView(view, params);
-    }
-
-    @Override
-    public void addContentView(View view, ViewGroup.LayoutParams params) {
-        getDelegate().addContentView(view, params);
-    }
-
-    @Override
-    protected void onPostResume() {
-        super.onPostResume();
-        getDelegate().onPostResume();
-    }
-
-    @Override
-    protected void onTitleChanged(CharSequence title, int color) {
-        super.onTitleChanged(title, color);
-        getDelegate().setTitle(title);
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        super.onConfigurationChanged(newConfig);
-        getDelegate().onConfigurationChanged(newConfig);
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        getDelegate().onStop();
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        getDelegate().onDestroy();
-    }
-
-    public void invalidateOptionsMenu() {
-        getDelegate().invalidateOptionsMenu();
-    }
-
-    private AppCompatDelegate getDelegate() {
-        if (mDelegate == null) {
-            mDelegate = AppCompatDelegate.create(this, null);
-        }
-        return mDelegate;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/BackupPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/BackupPreferenceFragment.java
index 3470ca91..2c2e1649 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/BackupPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/BackupPreferenceFragment.java
@@ -16,17 +16,49 @@
 
 package org.gnucash.android.ui.settings;
 
-import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentSender;
 import android.content.SharedPreferences;
+import android.net.Uri;
 import android.os.Bundle;
-import android.preference.Preference;
-import android.preference.Preference.OnPreferenceChangeListener;
-import android.preference.PreferenceFragment;
-import android.preference.PreferenceManager;
 import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.preference.CheckBoxPreference;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceFragmentCompat;
+import android.support.v7.preference.PreferenceManager;
+import android.util.Log;
+import android.widget.ArrayAdapter;
+import android.widget.Toast;
+
+import com.dropbox.sync.android.DbxAccountManager;
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.GooglePlayServicesUtil;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.api.ResultCallback;
+import com.google.android.gms.drive.Drive;
+import com.google.android.gms.drive.DriveFolder;
+import com.google.android.gms.drive.MetadataChangeSet;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.export.Exporter;
+import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.importer.ImportAsyncTask;
+import org.gnucash.android.ui.settings.dialog.OwnCloudDialogFragment;
+
+import java.io.File;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
 
 
 /**
@@ -34,18 +66,53 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  *
  */
-@TargetApi(11)
-public class BackupPreferenceFragment extends PreferenceFragment implements OnPreferenceChangeListener{
-	
+public class BackupPreferenceFragment extends PreferenceFragmentCompat implements
+		Preference.OnPreferenceClickListener, Preference.OnPreferenceChangeListener {
+
+	/**
+	 * Collects references to the UI elements and binds click listeners
+	 */
+	private static final int REQUEST_LINK_TO_DBX = 0x11;
+	public static final int REQUEST_RESOLVE_CONNECTION = 0x12;
+
+	/**
+	 * Testing app key for DropBox API
+	 */
+	final static public String DROPBOX_APP_KEY      = "dhjh8ke9wf05948";
+
+	/**
+	 * Testing app secret for DropBox API
+	 */
+	final static public String DROPBOX_APP_SECRET   = "h2t9fphj3nr4wkw";
+	public static final String LOG_TAG = "BackupPrefFragment";
+
+	private DbxAccountManager mDbxAccountManager;
+	/**
+	 * Client for Google Drive Sync
+	 */
+	public static GoogleApiClient mGoogleApiClient;
+
+
+	@Override
+	public void onCreatePreferences(Bundle bundle, String s) {
+		addPreferencesFromResource(R.xml.fragment_backup_preferences);
+	}
+
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		
-		addPreferencesFromResource(R.xml.fragment_backup_preferences);
-		ActionBar actionBar = ((AppCompatPreferenceActivity) getActivity()).getSupportActionBar();
+
+		ActionBar actionBar = ((AppCompatActivity)getActivity()).getSupportActionBar();
 		actionBar.setHomeButtonEnabled(true);
 		actionBar.setDisplayHomeAsUpEnabled(true);
 		actionBar.setTitle(R.string.title_backup_prefs);
+
+		String dropboxAppKey = getString(R.string.dropbox_app_key, DROPBOX_APP_KEY);
+		String dropboxAppSecret = getString(R.string.dropbox_app_secret, DROPBOX_APP_SECRET);
+		mDbxAccountManager = DbxAccountManager.getInstance(getActivity().getApplicationContext(),
+				dropboxAppKey, dropboxAppSecret);
+
+		mGoogleApiClient = getGoogleApiClient(getActivity());
 		
 	}	
 	
@@ -71,25 +138,58 @@ public void onResume() {
         pref.setOnPreferenceChangeListener(this);
 
 		pref = findPreference(getString(R.string.key_restore_backup));
-		pref.setOnPreferenceClickListener((SettingsActivity)getActivity());
+		pref.setOnPreferenceClickListener(this);
 
 		pref = findPreference(getString(R.string.key_create_backup));
-		pref.setOnPreferenceClickListener((SettingsActivity)getActivity());
+		pref.setOnPreferenceClickListener(this);
 
 		pref = findPreference(getString(R.string.key_dropbox_sync));
-		pref.setOnPreferenceClickListener((SettingsActivity)getActivity());
-		((SettingsActivity)getActivity()).toggleDropboxPreference(pref);
+		pref.setOnPreferenceClickListener(this);
+		toggleDropboxPreference(pref);
 
 		pref = findPreference(getString(R.string.key_google_drive_sync));
-		pref.setOnPreferenceClickListener((SettingsActivity) getActivity());
-		((SettingsActivity)getActivity()).toggleGoogleDrivePreference(pref);
+		pref.setOnPreferenceClickListener(this);
+		toggleGoogleDrivePreference(pref);
 
 		pref = findPreference(getString(R.string.key_owncloud_sync));
-		pref.setOnPreferenceClickListener((SettingsActivity)getActivity());
-		((SettingsActivity)getActivity()).toggleOwnCloudPreference(pref);
+		pref.setOnPreferenceClickListener(this);
+		toggleOwnCloudPreference(pref);
 	}
 
-    /**
+	@Override
+	public boolean onPreferenceClick(Preference preference) {
+		String key = preference.getKey();
+
+		if (key.equals(getString(R.string.key_restore_backup))){
+			restoreBackup();
+		}
+
+
+		if (key.equals(getString(R.string.key_dropbox_sync))){
+			toggleDropboxSync();
+			toggleDropboxPreference(preference);
+		}
+
+		if (key.equals(getString(R.string.key_google_drive_sync))){
+			toggleGoogleDriveSync();
+			toggleGoogleDrivePreference(preference);
+		}
+
+		if (key.equals(getString(R.string.key_owncloud_sync))){
+			toggleOwnCloudSync(preference);
+			toggleOwnCloudPreference(preference);
+		}
+
+		if (key.equals(getString(R.string.key_create_backup))){
+			boolean result = GncXmlExporter.createBackup();
+			int msg = result ? R.string.toast_backup_successful : R.string.toast_backup_failed;
+			Toast.makeText(getActivity(), msg, Toast.LENGTH_SHORT).show();
+		}
+
+		return false;
+	}
+
+	/**
      * Listens for changes to the preference and sets the preference summary to the new value
      * @param preference Preference which has been changed
      * @param newValue New value for the changed preference
@@ -118,4 +218,203 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
 		return true;
 	}
 
+
+
+	/**
+	 * Toggles the checkbox of the DropBox Sync preference if a DropBox account is linked
+	 * @param pref DropBox Sync preference
+	 */
+	public void toggleDropboxPreference(Preference pref) {
+		((CheckBoxPreference)pref).setChecked(mDbxAccountManager.hasLinkedAccount());
+	}
+
+	/**
+	 * Toggles the checkbox of the ownCloud Sync preference if an ownCloud account is linked
+	 * @param pref ownCloud Sync preference
+	 */
+	public void toggleOwnCloudPreference(Preference pref) {
+		SharedPreferences mPrefs = getActivity().getSharedPreferences(getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
+		((CheckBoxPreference)pref).setChecked(mPrefs.getBoolean(getString(R.string.owncloud_sync), false));
+	}
+
+	/**
+	 * Toggles the checkbox of the GoogleDrive Sync preference if a Google Drive account is linked
+	 * @param pref Google Drive Sync preference
+	 */
+	public void toggleGoogleDrivePreference(Preference pref){
+		SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		String appFolderId = sharedPreferences.getString(getString(R.string.key_google_drive_app_folder_id),null);
+		((CheckBoxPreference)pref).setChecked(appFolderId != null);
+	}
+
+
+	/**
+	 * Toggles the authorization state of a DropBox account.
+	 * If a link exists, it is removed else DropBox authorization is started
+	 */
+	private void toggleDropboxSync() {
+		if (mDbxAccountManager.hasLinkedAccount()){
+			mDbxAccountManager.unlink();
+		} else {
+			mDbxAccountManager.startLink(getActivity(), REQUEST_LINK_TO_DBX);
+		}
+	}
+
+	/**
+	 * Toggles synchronization with Google Drive on or off
+	 */
+	private void toggleGoogleDriveSync(){
+		SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		final String appFolderId = sharedPreferences.getString(getString(R.string.key_google_drive_app_folder_id), null);
+		if (appFolderId != null){
+			sharedPreferences.edit().remove(getString(R.string.key_google_drive_app_folder_id)).commit(); //commit (not apply) because we need it to be saved *now*
+			mGoogleApiClient.disconnect();
+		} else {
+			mGoogleApiClient.connect();
+		}
+	}
+
+	/**
+	 * Toggles synchronization with ownCloud on or off
+	 */
+	private void toggleOwnCloudSync(Preference pref){
+		SharedPreferences mPrefs = getActivity().getSharedPreferences(getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
+
+		if (mPrefs.getBoolean(getString(R.string.owncloud_sync), false))
+			mPrefs.edit().putBoolean(getString(R.string.owncloud_sync), false).apply();
+		else {
+			OwnCloudDialogFragment ocDialog = OwnCloudDialogFragment.newInstance(pref);
+            ocDialog.show(getActivity().getSupportFragmentManager(), "owncloud_dialog");
+		}
+	}
+
+
+	public static GoogleApiClient getGoogleApiClient(final Context context) {
+		return new GoogleApiClient.Builder(context)
+				.addApi(Drive.API)
+				.addScope(Drive.SCOPE_APPFOLDER)
+				.addScope(Drive.SCOPE_FILE)
+				.addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {
+					@Override
+					public void onConnected(Bundle bundle) {
+						SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
+						String appFolderId = sharedPreferences.getString(context.getString(R.string.key_google_drive_app_folder_id), null);
+						if (appFolderId == null) {
+							MetadataChangeSet changeSet = new MetadataChangeSet.Builder()
+									.setTitle(context.getString(R.string.app_name)).build();
+							Drive.DriveApi.getRootFolder(mGoogleApiClient).createFolder(
+									mGoogleApiClient, changeSet).setResultCallback(new ResultCallback<DriveFolder.DriveFolderResult>() {
+								@Override
+								public void onResult(DriveFolder.DriveFolderResult result) {
+									if (!result.getStatus().isSuccess()) {
+										Log.e(LOG_TAG, "Error creating the application folder");
+										return;
+									}
+
+									String folderId = result.getDriveFolder().getDriveId().toString();
+									PreferenceManager.getDefaultSharedPreferences(context)
+											.edit().putString(context.getString(R.string.key_google_drive_app_folder_id),
+											folderId).commit(); //commit because we need it to be saved *now*
+								}
+							});
+
+						}
+						Toast.makeText(context, "Connected to Google Drive", Toast.LENGTH_SHORT).show();
+					}
+
+					@Override
+					public void onConnectionSuspended(int i) {
+						Toast.makeText(context, "Connection to Google Drive suspended!", Toast.LENGTH_LONG).show();
+					}
+				})
+				.addOnConnectionFailedListener(new GoogleApiClient.OnConnectionFailedListener() {
+					@Override
+					public void onConnectionFailed(ConnectionResult connectionResult) {
+						Log.e(PreferenceActivity.class.getName(), "Connection to Google Drive failed");
+						if (connectionResult.hasResolution() && context instanceof Activity) {
+							try {
+								Log.e(BackupPreferenceFragment.class.getName(), "Trying resolution of Google API connection failure");
+								connectionResult.startResolutionForResult((Activity) context, REQUEST_RESOLVE_CONNECTION);
+							} catch (IntentSender.SendIntentException e) {
+								Log.e(BackupPreferenceFragment.class.getName(), e.getMessage());
+								Toast.makeText(context, "Unable to link to Google Drive", Toast.LENGTH_LONG).show();
+							}
+						} else {
+							if (context instanceof Activity)
+								GooglePlayServicesUtil.getErrorDialog(connectionResult.getErrorCode(), (Activity) context, 0).show();
+						}
+					}
+				})
+				.build();
+	}
+
+	/**
+	 * Opens a dialog for a user to select a backup to restore and then restores the backup
+	 */
+	private void restoreBackup() {
+		Log.i("Settings", "Opening GnuCash XML backups for restore");
+		File[] backupFiles = new File(Exporter.BACKUP_FOLDER_PATH).listFiles();
+		if (backupFiles == null){
+			Toast.makeText(getActivity(), R.string.toast_backup_folder_not_found, Toast.LENGTH_LONG).show();
+			new File(Exporter.BACKUP_FOLDER_PATH).mkdirs();
+			return;
+		}
+
+		Arrays.sort(backupFiles);
+		List<File> backupFilesList = Arrays.asList(backupFiles);
+		Collections.reverse(backupFilesList);
+		final File[] sortedBackupFiles = (File[]) backupFilesList.toArray();
+
+		final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(getActivity(), android.R.layout.select_dialog_singlechoice);
+		final DateFormat dateFormatter = SimpleDateFormat.getDateTimeInstance();
+		for (File backupFile : sortedBackupFiles) {
+			long time = Exporter.getExportTime(backupFile.getName());
+			if (time > 0)
+				arrayAdapter.add(dateFormatter.format(new Date(time)));
+			else //if no timestamp was found in the filename, just use the name
+				arrayAdapter.add(backupFile.getName());
+		}
+
+		AlertDialog.Builder restoreDialogBuilder =  new AlertDialog.Builder(getActivity());
+		restoreDialogBuilder.setTitle(R.string.title_select_backup_to_restore);
+		restoreDialogBuilder.setNegativeButton(R.string.alert_dialog_cancel,
+				new DialogInterface.OnClickListener() {
+					@Override
+					public void onClick(DialogInterface dialog, int which) {
+						dialog.dismiss();
+					}
+				});
+		restoreDialogBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
+			@Override
+			public void onClick(DialogInterface dialog, int which) {
+				File backupFile = sortedBackupFiles[which];
+				new ImportAsyncTask(getActivity()).execute(Uri.fromFile(backupFile));
+			}
+		});
+
+		restoreDialogBuilder.create().show();
+	}
+
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		switch (requestCode){
+
+			case REQUEST_LINK_TO_DBX:
+				Preference preference = findPreference(getString(R.string.key_dropbox_sync));
+				if (preference == null) //if we are in a preference header fragment, this may return null
+					break;
+				toggleDropboxPreference(preference);
+				break;
+
+			case REQUEST_RESOLVE_CONNECTION:
+				if (resultCode == Activity.RESULT_OK) {
+					mGoogleApiClient.connect();
+					Preference pref = findPreference(getString(R.string.key_dropbox_sync));
+					if (pref == null) //if we are in a preference header fragment, this may return null
+						break;
+					toggleDropboxPreference(pref);
+				}
+				break;
+		}
+	}
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
index 18f8a901..effd9aba 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
@@ -21,16 +21,17 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.preference.CheckBoxPreference;
-import android.preference.Preference;
-import android.preference.Preference.OnPreferenceChangeListener;
-import android.preference.PreferenceFragment;
 import android.preference.PreferenceManager;
 import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.preference.CheckBoxPreference;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceFragmentCompat;
 import android.widget.Toast;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.passcode.PasscodeLockScreenActivity;
 import org.gnucash.android.ui.passcode.PasscodePreferenceActivity;
@@ -39,8 +40,8 @@
  * Fragment for general preferences. Currently caters to the passcode and reporting preferences
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
-@TargetApi(11)
-public class GeneralPreferenceFragment extends PreferenceFragment implements OnPreferenceChangeListener{
+public class GeneralPreferenceFragment extends PreferenceFragmentCompat implements
+        android.support.v7.preference.Preference.OnPreferenceChangeListener, Preference.OnPreferenceClickListener {
 
     /**
      * Request code for retrieving passcode to store
@@ -59,11 +60,15 @@
     private CheckBoxPreference mCheckBoxPreference;
 
     @Override
+    public void onCreatePreferences(Bundle bundle, String s) {
+        addPreferencesFromResource(R.xml.fragment_general_preferences);
+    }
+
+    @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        addPreferencesFromResource(R.xml.fragment_general_preferences);
 
-        ActionBar actionBar = ((AppCompatPreferenceActivity) getActivity()).getSupportActionBar();
+        ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
         actionBar.setHomeButtonEnabled(true);
         actionBar.setDisplayHomeAsUpEnabled(true);
         actionBar.setTitle(R.string.title_general_prefs);
@@ -73,14 +78,13 @@ public void onCreate(Bundle savedInstanceState) {
     public void onResume() {
         super.onResume();
 
-        mEditor = PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()).edit();
         final Intent intent = new Intent(getActivity(), PasscodePreferenceActivity.class);
 
         mCheckBoxPreference = (CheckBoxPreference) findPreference(getString(R.string.key_enable_passcode));
         mCheckBoxPreference.setTitle(mCheckBoxPreference.isChecked()
                 ? getString(R.string.title_passcode_enabled)
                 : getString(R.string.title_passcode_disabled));
-        mCheckBoxPreference.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+        mCheckBoxPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
             @Override
             public boolean onPreferenceChange(Preference preference, Object newValue) {
                 if ((Boolean) newValue) {
@@ -93,20 +97,37 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 return true;
             }
         });
-        findPreference(getString(R.string.key_change_passcode))
-                .setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
-                    @Override
-                    public boolean onPreferenceClick(Preference preference) {
-                        startActivityForResult(intent, REQUEST_CHANGE_PASSCODE);
-                        return true;
-                    }
-                });
+        findPreference(getString(R.string.key_change_passcode)).setOnPreferenceClickListener(this);
+    }
+
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        String key = preference.getKey();
+        if (key.equals(getString(R.string.key_change_passcode))) {
+            startActivityForResult(
+                    new Intent(getActivity(), PasscodePreferenceActivity.class),
+                    REQUEST_CHANGE_PASSCODE
+            );
+            return true;
+        }
+        return false;
     }
 
     @Override
     public boolean onPreferenceChange(Preference preference, Object newValue) {
+        if (preference.getKey().equals(getString(R.string.key_enable_passcode))) {
+            if ((Boolean) newValue) {
+                startActivityForResult(new Intent(getActivity(), PasscodePreferenceActivity.class),
+                        GeneralPreferenceFragment.PASSCODE_REQUEST_CODE);
+            } else {
+                Intent passIntent = new Intent(getActivity(), PasscodeLockScreenActivity.class);
+                passIntent.putExtra(UxArgument.DISABLE_PASSCODE, UxArgument.DISABLE_PASSCODE);
+                startActivityForResult(passIntent, GeneralPreferenceFragment.REQUEST_DISABLE_PASSCODE);
+            }
+        }
+
         if (preference.getKey().equals(getString(R.string.key_use_account_color))) {
-            PreferenceManager.getDefaultSharedPreferences(getActivity())
+            getPreferenceManager().getSharedPreferences()
                     .edit()
                     .putBoolean(getString(R.string.key_use_account_color), Boolean.valueOf(newValue.toString()))
                     .commit();
@@ -119,7 +140,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
 
         if (mEditor == null){
-            mEditor = PreferenceManager.getDefaultSharedPreferences(GnuCashApplication.getAppContext()).edit();
+            mEditor = getPreferenceManager().getSharedPreferences().edit();
         }
 
         switch (requestCode) {
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/PreferenceActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/PreferenceActivity.java
new file mode 100644
index 00000000..0379bfc0
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/settings/PreferenceActivity.java
@@ -0,0 +1,160 @@
+/*
+ * Copyright (c) 2015 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.settings;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.widget.SlidingPaneLayout;
+import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceFragmentCompat;
+import android.support.v7.preference.PreferenceManager;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.Toast;
+
+import org.gnucash.android.R;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.ui.passcode.PasscodeLockActivity;
+
+import butterknife.Bind;
+import butterknife.ButterKnife;
+
+/**
+ * Activity for unified preferences
+ */
+public class PreferenceActivity extends PasscodeLockActivity implements
+        PreferenceFragmentCompat.OnPreferenceStartFragmentCallback{
+
+    @Bind(R.id.slidingpane_layout) SlidingPaneLayout mSlidingPaneLayout;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_settings);
+
+        ButterKnife.bind(this);
+
+        mSlidingPaneLayout.setPanelSlideListener(new SlidingPaneLayout.PanelSlideListener() {
+            @Override
+            public void onPanelSlide(View panel, float slideOffset) {
+                //nothing to see here, move along
+            }
+
+            @Override
+            public void onPanelOpened(View panel) {
+                ActionBar actionBar = getSupportActionBar();
+                assert actionBar != null;
+                actionBar.setTitle(R.string.title_settings);
+            }
+
+            @Override
+            public void onPanelClosed(View panel) {
+                //nothing to see here, move along
+            }
+        });
+
+        mSlidingPaneLayout.openPane();
+        loadFragment(new GeneralPreferenceFragment());
+
+        ActionBar actionBar = getSupportActionBar();
+        assert actionBar != null;
+        actionBar.setTitle(R.string.title_settings);
+        actionBar.setHomeButtonEnabled(true);
+        actionBar.setDisplayHomeAsUpEnabled(true);
+    }
+
+    @TargetApi(Build.VERSION_CODES.KITKAT) //for one of the exceptions caught
+    @Override
+    public boolean onPreferenceStartFragment(PreferenceFragmentCompat caller, Preference pref) {
+        String key = pref.getKey();
+        Fragment fragment = null;
+        try {
+            Class<?> clazz = Class.forName(pref.getFragment());
+            fragment = (Fragment) clazz.newInstance();
+        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
+            e.printStackTrace();
+            //if we do not have a matching class, do nothing
+            return false;
+        }
+        loadFragment(fragment);
+        mSlidingPaneLayout.closePane();
+        return false;
+    }
+
+    /**
+     * Load the provided fragment into the right pane, replacing the previous one
+     * @param fragment BaseReportFragment instance
+     */
+    private void loadFragment(Fragment fragment) {
+        FragmentManager fragmentManager = getSupportFragmentManager();
+        FragmentTransaction fragmentTransaction = fragmentManager
+                .beginTransaction();
+
+        fragmentTransaction.replace(R.id.fragment_container, fragment);
+        fragmentTransaction.commit();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+                    android.app.FragmentManager fm = getFragmentManager();
+                    if (fm.getBackStackEntryCount() > 0) {
+                        fm.popBackStack();
+                    } else {
+                        finish();
+                    }
+                } else {
+                    finish();
+                }
+                return true;
+
+            default:
+                return false;
+        }
+    }
+
+    /**
+     * Returns the shared preferences file for the currently active book.
+     * Should be used instead of {@link PreferenceManager#getDefaultSharedPreferences(Context)}
+     * @param context Application context
+     * @return Shared preferences file
+     */
+    public static SharedPreferences getBookSharedPreferences(Context context){
+        //// TODO: 21.12.2015 optimize the getActiveBookUID retrieval by caching it somewhere
+        return context.getSharedPreferences(BooksDbAdapter.getInstance().getActiveBookUID(), Context.MODE_PRIVATE);
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (mSlidingPaneLayout.isOpen())
+            super.onBackPressed();
+        else
+            mSlidingPaneLayout.openPane();
+    }
+}
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/PreferenceHeadersFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/PreferenceHeadersFragment.java
new file mode 100644
index 00000000..c55ef98f
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/settings/PreferenceHeadersFragment.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.settings;
+
+import android.os.Bundle;
+import android.support.v7.preference.PreferenceFragmentCompat;
+
+import org.gnucash.android.R;
+
+/**
+ * Fragment for displaying preference headers
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class PreferenceHeadersFragment extends PreferenceFragmentCompat {
+
+    @Override
+    public void onCreatePreferences(Bundle bundle, String s) {
+        addPreferencesFromResource(R.xml.preference_fragment_headers);
+    }
+
+}
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
deleted file mode 100644
index 8ed922bd..00000000
--- a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
+++ /dev/null
@@ -1,680 +0,0 @@
-/*
- * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
- * Copyright (c) 2014 - 2015 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
- * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.ui.settings;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentSender;
-import android.content.SharedPreferences;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.preference.CheckBoxPreference;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.Preference.OnPreferenceChangeListener;
-import android.preference.PreferenceManager;
-import android.support.v7.app.ActionBar;
-import android.util.Log;
-import android.view.MenuItem;
-import android.widget.ArrayAdapter;
-import android.widget.Toast;
-
-import com.dropbox.sync.android.DbxAccountManager;
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GooglePlayServicesUtil;
-import com.google.android.gms.common.api.GoogleApiClient;
-import com.google.android.gms.common.api.ResultCallback;
-import com.google.android.gms.drive.Drive;
-import com.google.android.gms.drive.DriveFolder;
-import com.google.android.gms.drive.MetadataChangeSet;
-
-import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
-import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
-import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.adapter.TransactionsDbAdapter;
-import org.gnucash.android.export.Exporter;
-import org.gnucash.android.export.xml.GncXmlExporter;
-import org.gnucash.android.importer.ImportAsyncTask;
-import org.gnucash.android.model.Transaction;
-import org.gnucash.android.ui.account.AccountsActivity;
-import org.gnucash.android.ui.common.UxArgument;
-import org.gnucash.android.ui.passcode.PasscodeLockScreenActivity;
-import org.gnucash.android.ui.passcode.PasscodePreferenceActivity;
-
-import java.io.File;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Currency;
-import java.util.Date;
-import java.util.List;
-import java.util.Timer;
-import java.util.TimerTask;
-
-/**
- * Activity for displaying settings and information about the application
- * @author Ngewi Fet <ngewif@gmail.com>
- * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
- * @author Yongxin Wang <fefe.wyx@gmail.com>
- */
-public class SettingsActivity extends AppCompatPreferenceActivity
-        implements OnPreferenceChangeListener, Preference.OnPreferenceClickListener{
-
-    private static final String LOG_TAG = "SettingsActivity";
-
-    /**
-     * Allowed delay between two consecutive taps of a setting for it to be considered a double tap
-     * Used on Android v2.3.3 or lower devices where dialogs cannot be instantiated easily in settings
-     */
-    private static final int DOUBLE_TAP_DELAY = 2000;
-
-    /**
-     * Testing app key for DropBox API
-     */
-    final static public String DROPBOX_APP_KEY      = "dhjh8ke9wf05948";
-
-    /**
-     * Testing app secret for DropBox API
-     */
-    final static public String DROPBOX_APP_SECRET   = "h2t9fphj3nr4wkw";
-
-    /**
-     * Collects references to the UI elements and binds click listeners
-     */
-    private static final int REQUEST_LINK_TO_DBX = 0x11;
-    public static final int REQUEST_RESOLVE_CONNECTION = 0x12;
-
-    /**
-     * Counts the number of times the preference for deleting all accounts has been clicked.
-     * It is reset every time the SettingsActivity is resumed.
-     * Only useful on devices with API level < 11
-     */
-    private int mDeleteAccountsClickCount;
-
-    /**
-     * Counts the number of times the preference for deleting all transactions has been clicked.
-     * It is reset every time the SettingsActivity is resumed.
-     * Only useful on devices with API level < 11
-     */
-    private int mDeleteTransactionsClickCount;
-    private DbxAccountManager mDbxAccountManager;
-    /**
-     * Client for Google Drive Sync
-     */
-    public static GoogleApiClient mGoogleApiClient;
-
-
-    /**
-	 * Constructs the headers to display in the header list when the Settings activity is first opened
-	 * Only available on Honeycomb and above
-	 */
-    @TargetApi(11)
-	@Override
-	public void onBuildHeaders(List<Header> target) {
-		loadHeadersFromResource(R.xml.preference_headers, target);
-	}
-
-	@SuppressWarnings("deprecation")
-	@Override
-	protected void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-
-        String dropboxAppKey = getString(R.string.dropbox_app_key, DROPBOX_APP_KEY);
-        String dropboxAppSecret = getString(R.string.dropbox_app_secret, DROPBOX_APP_SECRET);
-        mDbxAccountManager = DbxAccountManager.getInstance(getApplicationContext(),
-                dropboxAppKey, dropboxAppSecret);
-
-        mGoogleApiClient = getGoogleApiClient(this);
-
-		//retrieve version from Manifest and set it
-		ActionBar actionBar = getSupportActionBar();
-		actionBar.setTitle(R.string.title_settings);
-		actionBar.setHomeButtonEnabled(true);
-		actionBar.setDisplayHomeAsUpEnabled(true);
-		
-		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB){
-            addPreferencesFromResource(R.xml.fragment_general_preferences);
-            addPreferencesFromResource(R.xml.fragment_account_preferences);
-			addPreferencesFromResource(R.xml.fragment_transaction_preferences);
-            addPreferencesFromResource(R.xml.fragment_backup_preferences);
-			addPreferencesFromResource(R.xml.fragment_about_preferences);
-			setDefaultCurrencyListener();
-
-            Preference pref = findPreference(getString(R.string.key_import_accounts));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_restore_backup));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_use_double_entry));
-            pref.setOnPreferenceChangeListener(this);
-
-            pref = findPreference(getString(R.string.key_delete_all_transactions));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_delete_all_accounts));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_about_gnucash));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_change_passcode));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_dropbox_sync));
-            toggleDropboxPreference(pref);
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_google_drive_sync));
-            pref.setOnPreferenceClickListener(this);
-            toggleGoogleDrivePreference(pref);
-
-            pref = findPreference(getString(R.string.key_owncloud_sync));
-            pref.setOnPreferenceClickListener(this);
-            toggleOwnCloudPreference(pref);
-
-            pref = findPreference(getString(R.string.key_create_backup));
-            pref.setOnPreferenceClickListener(this);
-
-            pref = findPreference(getString(R.string.key_enable_passcode));
-            pref.setOnPreferenceChangeListener(this);
-            pref.setTitle(((CheckBoxPreference) pref).isChecked()
-                    ? getString(R.string.title_passcode_enabled)
-                    : getString(R.string.title_passcode_disabled)
-            );
-
-            pref = findPreference(getString(R.string.key_change_passcode));
-            pref.setOnPreferenceClickListener(this);
-        }
-	}
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        mDeleteAccountsClickCount = 0;
-        mDeleteTransactionsClickCount = 0;
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        GnuCashApplication.PASSCODE_SESSION_INIT_TIME = System.currentTimeMillis();
-    }
-
-    @TargetApi(11)
-    @Override
-	public boolean onOptionsItemSelected(MenuItem item) {
-		switch (item.getItemId()) {
-		case android.R.id.home:		
-			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-				android.app.FragmentManager fm = getFragmentManager();
-				if (fm.getBackStackEntryCount() > 0) {
-					fm.popBackStack();
-				} else {
-					finish();
-				}
-			} else {
-				finish();
-			}
-	        return true;
-
-		default:
-			return false;
-		}
-	}
-	
-	@Override
- 	public boolean onPreferenceChange(Preference preference, Object newValue) {
-		if (preference.getKey().equals(getString(R.string.key_default_currency))){
-			GnuCashApplication.setDefaultCurrencyCode(newValue.toString());
-            String fullname = CommoditiesDbAdapter.getInstance().getCommodity(newValue.toString()).getFullname();
-            preference.setSummary(fullname);
-		} else if (preference.getKey().equals(getString(R.string.key_enable_passcode))) {
-            if ((Boolean) newValue) {
-                startActivityForResult(new Intent(this, PasscodePreferenceActivity.class),
-                        GeneralPreferenceFragment.PASSCODE_REQUEST_CODE);
-            } else {
-                Intent passIntent = new Intent(this, PasscodeLockScreenActivity.class);
-                passIntent.putExtra(UxArgument.DISABLE_PASSCODE, UxArgument.DISABLE_PASSCODE);
-                startActivityForResult(passIntent, GeneralPreferenceFragment.REQUEST_DISABLE_PASSCODE);
-            }
-        } else if (preference.getKey().equals(getString(R.string.key_use_double_entry))){
-            setImbalanceAccountsHidden((Boolean) newValue);
-        }
-
-		return true;
-	}
-
-    @Override
-    protected boolean isValidFragment(String fragmentName) {
-        return BackupPreferenceFragment.class.getName().equals(fragmentName)
-                || AccountPreferencesFragment.class.getName().equals(fragmentName)
-                || GeneralPreferenceFragment.class.getName().equals(fragmentName)
-                || TransactionsPreferenceFragment.class.getName().equals(fragmentName)
-                || AboutPreferenceFragment.class.getName().equals(fragmentName);
-    }
-
-    /**
-     * Hide all imbalance accounts when double-entry mode is disabled
-     * @param useDoubleEntry flag if double entry is enabled or not
-     */
-    public void setImbalanceAccountsHidden(boolean useDoubleEntry) {
-        String isHidden = useDoubleEntry ? "0" : "1";
-        AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
-        List<Currency> currencies = accountsDbAdapter.getCurrenciesInUse();
-        for (Currency currency : currencies) {
-            String uid = accountsDbAdapter.getImbalanceAccountUID(currency);
-            if (uid != null){
-                accountsDbAdapter.updateRecord(uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
-            }
-        }
-    }
-
-    /**
-     * Load the commodities from the database and set the options on the list preference
-     * Also sets this activity as a listener for preference changes
-     */
-    private void setDefaultCurrencyListener() {
-        CommoditiesDbAdapter commoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
-        List<CharSequence> currencyEntries = new ArrayList<>((int)commoditiesDbAdapter.getRecordsCount());
-        List<CharSequence> currencyEntryValues = new ArrayList<>((int)commoditiesDbAdapter.getRecordsCount());
-        Cursor cursor = commoditiesDbAdapter.fetchAllRecords(DatabaseSchema.CommodityEntry.COLUMN_MNEMONIC + " ASC");
-        while(cursor.moveToNext()){
-            String code = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.CommodityEntry.COLUMN_MNEMONIC));
-            String name = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.CommodityEntry.COLUMN_FULLNAME));
-
-            currencyEntries.add(code + " - " + name);
-            currencyEntryValues.add(code);
-        }
-        cursor.close();
-
-        CharSequence[] entries = new CharSequence[currencyEntries.size()];
-        CharSequence[] entryValues = new CharSequence[currencyEntryValues.size()];
-
-		@SuppressWarnings("deprecation")
-		Preference pref = findPreference(getString(R.string.key_default_currency));
-		pref.setSummary(GnuCashApplication.getDefaultCurrencyCode());
-		pref.setOnPreferenceChangeListener(this);
-
-        ((ListPreference) pref).setEntries(currencyEntries.toArray(entries));
-        ((ListPreference) pref).setEntryValues(currencyEntryValues.toArray(entryValues));
-	}
-
-    @Override
-    public boolean onPreferenceClick(Preference preference) {
-        String key = preference.getKey();
-
-        if (key.equals(getString(R.string.key_import_accounts))){
-            AccountsActivity.startXmlFileChooser(this);
-            return true;
-        }
-
-        if (key.equals(getString(R.string.key_restore_backup))){
-            restoreBackup();
-        }
-
-        if (key.equals(getString(R.string.key_about_gnucash))){
-            AccountsActivity.showWhatsNewDialog(this);
-            return true;
-        }
-
-        if (key.equals(getString(R.string.key_dropbox_sync))){
-            toggleDropboxSync();
-            toggleDropboxPreference(preference);
-        }
-
-        if (key.equals(getString(R.string.key_google_drive_sync))){
-            toggleGoogleDriveSync();
-            toggleGoogleDrivePreference(preference);
-        }
-
-        if (key.equals(getString(R.string.key_owncloud_sync))){
-            toggleOwnCloudSync(preference);
-            toggleOwnCloudPreference(preference);
-        }
-
-        if (key.equals(getString(R.string.key_create_backup))){
-            boolean result = GncXmlExporter.createBackup();
-            int msg = result ? R.string.toast_backup_successful : R.string.toast_backup_failed;
-            Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
-        }
-
-        //since we cannot get a support FragmentManager in the SettingsActivity pre H0NEYCOMB,
-        //we will just use 2 taps within 2 seconds as confirmation
-        if (key.equals(getString(R.string.key_delete_all_accounts))){
-            mDeleteAccountsClickCount++;
-            if (mDeleteAccountsClickCount < 2){
-                Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
-            } else {
-                GncXmlExporter.createBackup(); //create backup before deleting everything
-                AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
-                accountsDbAdapter.deleteAllRecords();
-                Toast.makeText(this, R.string.toast_all_accounts_deleted, Toast.LENGTH_LONG).show();
-            }
-            Timer timer = new Timer();
-            timer.schedule(new ResetCounter(), DOUBLE_TAP_DELAY);
-            return true;
-        }
-
-        if (key.equals(getString(R.string.key_delete_all_transactions))){
-            mDeleteTransactionsClickCount++;
-            if (mDeleteTransactionsClickCount < 2){
-                Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
-            } else {
-                GncXmlExporter.createBackup(); //create backup before deleting everything
-                List<Transaction> openingBalances = new ArrayList<>();
-                boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
-                if (preserveOpeningBalances) {
-                    AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
-                    openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
-                }
-                TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
-                transactionsDbAdapter.deleteAllRecords();
-
-                if (preserveOpeningBalances) {
-                    transactionsDbAdapter.bulkAddRecords(openingBalances);
-                }
-                Toast.makeText(this, R.string.toast_all_transactions_deleted, Toast.LENGTH_LONG).show();
-            }
-            Timer timer = new Timer();
-            timer.schedule(new ResetCounter(), DOUBLE_TAP_DELAY);
-            return true;
-        }
-
-        if (key.equals(getString(R.string.key_change_passcode))){
-            startActivityForResult(new Intent(this, PasscodePreferenceActivity.class),
-                    GeneralPreferenceFragment.REQUEST_CHANGE_PASSCODE);
-            return true;
-        }
-
-        return false;
-    }
-
-    /**
-     * Toggles the authorization state of a DropBox account.
-     * If a link exists, it is removed else DropBox authorization is started
-     */
-    private void toggleDropboxSync() {
-        if (mDbxAccountManager.hasLinkedAccount()){
-            mDbxAccountManager.unlink();
-        } else {
-            mDbxAccountManager.startLink(this, REQUEST_LINK_TO_DBX);
-        }
-    }
-
-    /**
-     * Toggles synchronization with Google Drive on or off
-     */
-    private void toggleGoogleDriveSync(){
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
-        final String appFolderId = sharedPreferences.getString(getString(R.string.key_google_drive_app_folder_id), null);
-        if (appFolderId != null){
-            sharedPreferences.edit().remove(getString(R.string.key_google_drive_app_folder_id)).commit(); //commit (not apply) because we need it to be saved *now*
-            mGoogleApiClient.disconnect();
-        } else {
-            mGoogleApiClient.connect();
-        }
-    }
-
-    /**
-     * Toggles synchronization with ownCloud on or off
-     */
-    @TargetApi(11)
-    private void toggleOwnCloudSync(Preference pref){
-        SharedPreferences mPrefs = getSharedPreferences(getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
-
-        if (mPrefs.getBoolean(getString(R.string.owncloud_sync), false))
-            mPrefs.edit().putBoolean(getString(R.string.owncloud_sync), false).apply();
-        else {
-            OwnCloudDialogFragment ocDialog = OwnCloudDialogFragment.newInstance(pref);
-            //// TODO: 08.12.2015 show dialog
-//            ocDialog.show(getFragmentManager(), "owncloud_dialog");
-        }
-    }
-
-    /**
-     * Toggles the checkbox of the DropBox Sync preference if a DropBox account is linked
-     * @param pref DropBox Sync preference
-     */
-    public void toggleDropboxPreference(Preference pref) {
-        ((CheckBoxPreference)pref).setChecked(mDbxAccountManager.hasLinkedAccount());
-    }
-
-    /**
-     * Toggles the checkbox of the ownCloud Sync preference if an ownCloud account is linked
-     * @param pref ownCloud Sync preference
-     */
-    public void toggleOwnCloudPreference(Preference pref) {
-        SharedPreferences mPrefs = getSharedPreferences(getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
-        ((CheckBoxPreference)pref).setChecked(mPrefs.getBoolean(getString(R.string.owncloud_sync), false));
-    }
-
-    /**
-     * Toggles the checkbox of the GoogleDrive Sync preference if a Google Drive account is linked
-     * @param pref Google Drive Sync preference
-     */
-    public void toggleGoogleDrivePreference(Preference pref){
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
-        String appFolderId = sharedPreferences.getString(getString(R.string.key_google_drive_app_folder_id),null);
-        ((CheckBoxPreference)pref).setChecked(appFolderId != null);
-    }
-
-
-    public static GoogleApiClient getGoogleApiClient(final Context context) {
-        return new GoogleApiClient.Builder(context)
-                .addApi(Drive.API)
-                .addScope(Drive.SCOPE_APPFOLDER)
-                .addScope(Drive.SCOPE_FILE)
-                .addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {
-                    @Override
-                    public void onConnected(Bundle bundle) {
-                        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
-                        String appFolderId = sharedPreferences.getString(context.getString(R.string.key_google_drive_app_folder_id), null);
-                        if (appFolderId == null) {
-                            MetadataChangeSet changeSet = new MetadataChangeSet.Builder()
-                                    .setTitle(context.getString(R.string.app_name)).build();
-                            Drive.DriveApi.getRootFolder(mGoogleApiClient).createFolder(
-                                    mGoogleApiClient, changeSet).setResultCallback(new ResultCallback<DriveFolder.DriveFolderResult>() {
-                                @Override
-                                public void onResult(DriveFolder.DriveFolderResult result) {
-                                    if (!result.getStatus().isSuccess()) {
-                                        Log.e(LOG_TAG, "Error creating the application folder");
-                                        return;
-                                    }
-
-                                    String folderId = result.getDriveFolder().getDriveId().toString();
-                                    PreferenceManager.getDefaultSharedPreferences(context)
-                                            .edit().putString(context.getString(R.string.key_google_drive_app_folder_id),
-                                            folderId).commit(); //commit because we need it to be saved *now*
-                                }
-                            });
-
-                        }
-                        Toast.makeText(context, "Connected to Google Drive", Toast.LENGTH_SHORT).show();
-                    }
-
-                    @Override
-                    public void onConnectionSuspended(int i) {
-                        Toast.makeText(context, "Connection to Google Drive suspended!", Toast.LENGTH_LONG).show();
-                    }
-                })
-                .addOnConnectionFailedListener(new GoogleApiClient.OnConnectionFailedListener() {
-                    @Override
-                    public void onConnectionFailed(ConnectionResult connectionResult) {
-                        Log.e(SettingsActivity.class.getName(), "Connection to Google Drive failed");
-                        if (connectionResult.hasResolution() && context instanceof Activity) {
-                            try {
-                                Log.e(SettingsActivity.class.getName(), "Trying resolution of Google API connection failure");
-                                connectionResult.startResolutionForResult((Activity) context, REQUEST_RESOLVE_CONNECTION);
-                            } catch (IntentSender.SendIntentException e) {
-                                Log.e(SettingsActivity.class.getName(), e.getMessage());
-                                Toast.makeText(context, "Unable to link to Google Drive", Toast.LENGTH_LONG).show();
-                            }
-                        } else {
-                            if (context instanceof Activity)
-                                GooglePlayServicesUtil.getErrorDialog(connectionResult.getErrorCode(), (Activity) context, 0).show();
-                        }
-                    }
-                })
-                .build();
-    }
-
-    /**
-     * Resets the tap counter for preferences which need to be double-tapped
-     */
-    private class ResetCounter extends TimerTask {
-
-        @Override
-        public void run() {
-            mDeleteAccountsClickCount = 0;
-            mDeleteTransactionsClickCount = 0;
-        }
-    }
-
-    /**
-     * Opens a dialog for a user to select a backup to restore and then restores the backup
-     */
-    private void restoreBackup() {
-        Log.i("Settings", "Opening GnuCash XML backups for restore");
-        File[] backupFiles = new File(Exporter.BACKUP_FOLDER_PATH).listFiles();
-        if (backupFiles == null){
-            Toast.makeText(this, R.string.toast_backup_folder_not_found, Toast.LENGTH_LONG).show();
-            new File(Exporter.BACKUP_FOLDER_PATH).mkdirs();
-            return;
-        }
-
-        Arrays.sort(backupFiles);
-        List<File> backupFilesList = Arrays.asList(backupFiles);
-        Collections.reverse(backupFilesList);
-        final File[] sortedBackupFiles = (File[]) backupFilesList.toArray();
-
-        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(this, android.R.layout.select_dialog_singlechoice);
-        final DateFormat dateFormatter = SimpleDateFormat.getDateTimeInstance();
-        for (File backupFile : sortedBackupFiles) {
-            long time = Exporter.getExportTime(backupFile.getName());
-            if (time > 0)
-                arrayAdapter.add(dateFormatter.format(new Date(time)));
-            else //if no timestamp was found in the filename, just use the name
-                arrayAdapter.add(backupFile.getName());
-        }
-
-        AlertDialog.Builder restoreDialogBuilder =  new AlertDialog.Builder(this);
-        restoreDialogBuilder.setTitle(R.string.title_select_backup_to_restore);
-        restoreDialogBuilder.setNegativeButton(R.string.alert_dialog_cancel,
-                new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.dismiss();
-                    }
-                });
-        restoreDialogBuilder.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                File backupFile = sortedBackupFiles[which];
-                new ImportAsyncTask(SettingsActivity.this).execute(Uri.fromFile(backupFile));
-            }
-        });
-
-        restoreDialogBuilder.create().show();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch (requestCode) {
-            case AccountsActivity.REQUEST_PICK_ACCOUNTS_FILE:
-                if (resultCode == Activity.RESULT_OK && data != null) {
-                    AccountsActivity.importXmlFileFromIntent(this, data, null);
-                }
-                break;
-            case GeneralPreferenceFragment.PASSCODE_REQUEST_CODE:
-                if (resultCode == Activity.RESULT_OK && data != null) {
-                    PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
-                            .edit()
-                            .putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE))
-                            .commit();
-                    PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
-                            .edit()
-                            .putBoolean(UxArgument.ENABLED_PASSCODE, true)
-                            .commit();
-                    Toast.makeText(this, R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
-                    findPreference(getString(R.string.key_enable_passcode)).setTitle(getString(R.string.title_passcode_enabled));
-                }
-                if (resultCode == Activity.RESULT_CANCELED) {
-                    PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
-                            .edit()
-                            .putBoolean(UxArgument.ENABLED_PASSCODE, false)
-                            .commit();
-                    ((CheckBoxPreference) findPreference(getString(R.string.key_enable_passcode))).setChecked(false);
-                    findPreference(getString(R.string.key_enable_passcode)).setTitle(getString(R.string.title_passcode_disabled));
-                }
-                break;
-
-            case GeneralPreferenceFragment.REQUEST_DISABLE_PASSCODE:
-                boolean flag = resultCode != Activity.RESULT_OK;
-                PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
-                        .edit()
-                        .putBoolean(UxArgument.ENABLED_PASSCODE, flag)
-                        .commit();
-                ((CheckBoxPreference) findPreference(getString(R.string.key_enable_passcode))).setChecked(flag);
-                break;
-
-            case GeneralPreferenceFragment.REQUEST_CHANGE_PASSCODE:
-                if (resultCode == Activity.RESULT_OK && data != null) {
-                    PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
-                            .edit()
-                            .putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE))
-                            .commit();
-                    PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
-                            .edit()
-                            .putBoolean(UxArgument.ENABLED_PASSCODE, true)
-                            .commit();
-                    Toast.makeText(this, R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
-                    findPreference(getString(R.string.key_enable_passcode)).setTitle(getString(R.string.title_passcode_enabled));
-                }
-                break;
-
-            case REQUEST_LINK_TO_DBX:
-                Preference preference = findPreference(getString(R.string.key_dropbox_sync));
-                if (preference == null) //if we are in a preference header fragment, this may return null
-                    break;
-                toggleDropboxPreference(preference);
-                break;
-
-            case REQUEST_RESOLVE_CONNECTION:
-                if (resultCode == RESULT_OK) {
-                    mGoogleApiClient.connect();
-                    Preference pref = findPreference(getString(R.string.key_dropbox_sync));
-                    if (pref == null) //if we are in a preference header fragment, this may return null
-                        break;
-                    toggleDropboxPreference(pref);
-                }
-                break;
-        }
-    }
-}
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
index b379eeac..20bc6817 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
@@ -16,44 +16,54 @@
 
 package org.gnucash.android.ui.settings;
 
-import android.annotation.TargetApi;
 import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.preference.Preference;
-import android.preference.Preference.OnPreferenceChangeListener;
-import android.preference.PreferenceFragment;
-import android.preference.PreferenceManager;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
+import android.support.v7.preference.Preference;
+import android.support.v7.preference.PreferenceFragmentCompat;
 
 import org.gnucash.android.R;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.ui.settings.dialog.DeleteAllTransactionsConfirmationDialog;
+
+import java.util.Currency;
+import java.util.List;
 
 /**
  * Fragment for displaying transaction preferences
  * @author Ngewi Fet <ngewif@gmail.com>
  *
  */
-@TargetApi(11)
-public class TransactionsPreferenceFragment extends PreferenceFragment implements OnPreferenceChangeListener{
+public class TransactionsPreferenceFragment extends PreferenceFragmentCompat implements Preference.OnPreferenceChangeListener {
 
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
-		
-		addPreferencesFromResource(R.xml.fragment_transaction_preferences);
-		ActionBar actionBar = ((AppCompatPreferenceActivity) getActivity()).getSupportActionBar();
+
+		getPreferenceManager().setSharedPreferencesName(BooksDbAdapter.getInstance().getActiveBookUID());
+
+		ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
 		actionBar.setHomeButtonEnabled(true);
 		actionBar.setDisplayHomeAsUpEnabled(true);
 		actionBar.setTitle(R.string.title_transaction_preferences);		
 	}
-	
-	
+
+	@Override
+	public void onCreatePreferences(Bundle bundle, String s) {
+		addPreferencesFromResource(R.xml.fragment_transaction_preferences);
+	}
+
 	@Override
 	public void onResume() {
 		super.onResume();
 		
-		SharedPreferences manager = PreferenceManager.getDefaultSharedPreferences(getActivity());
-		String defaultTransactionType = manager.getString(getString(R.string.key_default_transaction_type), "DEBIT");
+		SharedPreferences sharedPreferences = getPreferenceManager().getSharedPreferences();
+		String defaultTransactionType = sharedPreferences.getString(
+				getString(R.string.key_default_transaction_type),
+				getString(R.string.label_debit));
 		Preference pref = findPreference(getString(R.string.key_default_transaction_type));		
 		setLocalizedSummary(pref, defaultTransactionType);
 		pref.setOnPreferenceChangeListener(this);
@@ -65,17 +75,16 @@ public void onResume() {
         preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
             @Override
             public boolean onPreferenceClick(Preference preference) {
-                deleteAllTransactions();
+                showDeleteTransactionsDialog();
                 return true;
             }
         });
 	}
 
-
 	@Override
 	public boolean onPreferenceChange(Preference preference, Object newValue) {
 		if (preference.getKey().equals(getString(R.string.key_use_double_entry))){
-            ((SettingsActivity)getActivity()).setImbalanceAccountsHidden((Boolean)newValue);
+            setImbalanceAccountsHidden((Boolean)newValue);
         } else {
             setLocalizedSummary(preference, newValue.toString());
         }
@@ -85,12 +94,28 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
     /**
      * Deletes all transactions in the system
      */
-    public void deleteAllTransactions(){
+    public void showDeleteTransactionsDialog(){
         DeleteAllTransactionsConfirmationDialog deleteTransactionsConfirmationDialog =
                 DeleteAllTransactionsConfirmationDialog.newInstance();
-        deleteTransactionsConfirmationDialog.show(getFragmentManager(), "transaction_settings");
+        deleteTransactionsConfirmationDialog.show(getActivity().getSupportFragmentManager(), "transaction_settings");
     }
 
+
+	/**
+	 * Hide all imbalance accounts when double-entry mode is disabled
+	 * @param useDoubleEntry flag if double entry is enabled or not
+	 */
+	private void setImbalanceAccountsHidden(boolean useDoubleEntry) {
+		String isHidden = useDoubleEntry ? "0" : "1";
+		AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
+		List<Currency> currencies = accountsDbAdapter.getCurrenciesInUse();
+		for (Currency currency : currencies) {
+			String uid = accountsDbAdapter.getImbalanceAccountUID(currency);
+			if (uid != null){
+				accountsDbAdapter.updateRecord(uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
+			}
+		}
+	}
     /**
      * Localizes the label for DEBIT/CREDIT in the settings summary
      * @param preference Preference whose summary is to be localized
@@ -98,8 +123,7 @@ public void deleteAllTransactions(){
      */
 	private void setLocalizedSummary(Preference preference, String value){
 		String localizedLabel = value.equals("DEBIT") ? getString(R.string.label_debit) : getActivity().getString(R.string.label_credit);
-		Preference pref = findPreference(getString(R.string.key_default_transaction_type));
-		pref.setSummary(localizedLabel);
+		preference.setSummary(localizedLabel);
 	}
 	
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/dialog/DeleteAllAccountsConfirmationDialog.java
similarity index 96%
rename from app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
rename to app/src/main/java/org/gnucash/android/ui/settings/dialog/DeleteAllAccountsConfirmationDialog.java
index fb928ee8..198b5b81 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/dialog/DeleteAllAccountsConfirmationDialog.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package org.gnucash.android.ui.settings;
+package org.gnucash.android.ui.settings.dialog;
 
 import android.annotation.TargetApi;
 import android.app.AlertDialog;
 import android.app.Dialog;
-import android.app.DialogFragment;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
 import android.widget.Toast;
 
 import org.gnucash.android.R;
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/dialog/DeleteAllTransactionsConfirmationDialog.java
similarity index 95%
rename from app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java
rename to app/src/main/java/org/gnucash/android/ui/settings/dialog/DeleteAllTransactionsConfirmationDialog.java
index 6bb41943..6a938270 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/dialog/DeleteAllTransactionsConfirmationDialog.java
@@ -14,15 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.gnucash.android.ui.settings;
+package org.gnucash.android.ui.settings.dialog;
 
-import android.annotation.TargetApi;
 import android.app.AlertDialog;
 import android.app.Dialog;
-import android.app.DialogFragment;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.DialogFragment;
 import android.util.Log;
 import android.widget.Toast;
 
@@ -43,7 +43,6 @@
  * @author ngewif <ngewif@gmail.com>
  * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
-@TargetApi(11)
 public class DeleteAllTransactionsConfirmationDialog extends DialogFragment {
 
     public static DeleteAllTransactionsConfirmationDialog newInstance() {
@@ -52,7 +51,7 @@ public static DeleteAllTransactionsConfirmationDialog newInstance() {
     }
 
     @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
+    @NonNull public Dialog onCreateDialog(Bundle savedInstanceState) {
         return new AlertDialog.Builder(getActivity())
                 .setIcon(android.R.drawable.ic_delete)
                 .setTitle(R.string.title_confirm_delete).setMessage(R.string.msg_delete_all_transactions_confirmation)
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/OwnCloudDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/dialog/OwnCloudDialogFragment.java
similarity index 98%
rename from app/src/main/java/org/gnucash/android/ui/settings/OwnCloudDialogFragment.java
rename to app/src/main/java/org/gnucash/android/ui/settings/dialog/OwnCloudDialogFragment.java
index 29478f5e..26cc24b4 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/OwnCloudDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/dialog/OwnCloudDialogFragment.java
@@ -1,13 +1,13 @@
-package org.gnucash.android.ui.settings;
+package org.gnucash.android.ui.settings.dialog;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Handler;
-import android.preference.CheckBoxPreference;
-import android.preference.Preference;
 import android.support.v4.app.DialogFragment;
+import android.support.v7.preference.CheckBoxPreference;
+import android.support.v7.preference.Preference;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 5893e282..9723e02d 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -73,6 +73,7 @@
 import org.gnucash.android.ui.common.FormActivity;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.homescreen.WidgetConfigurationActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.ui.transaction.dialog.TransferFundsDialogFragment;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.RecurrenceViewClickListener;
@@ -290,7 +291,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		super.onActivityCreated(savedInstanceState);
 		setHasOptionsMenu(true);
 
-		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		SharedPreferences sharedPrefs = PreferenceActivity.getBookSharedPreferences(getActivity());
 		mUseDoubleEntry = sharedPrefs.getBoolean(getString(R.string.key_use_double_entry), false);
 		if (!mUseDoubleEntry){
 			mDoubleEntryLayout.setVisibility(View.GONE);
@@ -534,7 +535,7 @@ private void initalizeViews() {
 		mTime = mDate = Calendar.getInstance();
 
         mTransactionTypeSwitch.setAccountType(mAccountType);
-		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
+		String typePref = PreferenceActivity.getBookSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
         mTransactionTypeSwitch.setChecked(TransactionType.valueOf(typePref));
 
 		String code = GnuCashApplication.getDefaultCurrencyCode();
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index fe3b1882..09ac23b8 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -55,6 +55,7 @@
 import org.gnucash.android.ui.common.FormActivity;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.homescreen.WidgetConfigurationActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.ui.transaction.dialog.BulkMoveDialogFragment;
 import org.gnucash.android.ui.util.CursorRecyclerAdapter;
 import org.gnucash.android.ui.common.Refreshable;
@@ -94,7 +95,7 @@ public void onCreate(Bundle savedInstanceState) {
 		Bundle args = getArguments();
 		mAccountUID = args.getString(UxArgument.SELECTED_ACCOUNT_UID);
 
-		mUseCompactView = PreferenceManager.getDefaultSharedPreferences(getActivity())
+		mUseCompactView = PreferenceActivity.getBookSharedPreferences(getActivity())
 				.getBoolean(getActivity().getString(R.string.key_use_compact_list), !GnuCashApplication.isDoubleEntryEnabled());
 		//if there was a local override of the global setting, respect it
 		if (savedInstanceState != null)
diff --git a/app/src/main/res/layout-sw600dp/activity_settings.xml b/app/src/main/res/layout-sw600dp/activity_settings.xml
new file mode 100644
index 00000000..cb7e5e70
--- /dev/null
+++ b/app/src/main/res/layout-sw600dp/activity_settings.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<!--
+Layout for displaying settings in tablet mode (or devices with wide screens)
+-->
+<android.support.v4.widget.SlidingPaneLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/slidingpane_layout">
+
+    <fragment android:name="org.gnucash.android.ui.settings.PreferenceHeadersFragment"
+        android:tag="PreferenceHeadersFragment"
+        android:layout_width="0dp"
+        android:layout_weight="1"
+        android:layout_height="match_parent"
+        android:layout_gravity="left|start"/>
+
+    <FrameLayout android:id="@+id/fragment_container"
+        android:layout_width="0dp"
+        android:layout_weight="3"
+        android:layout_height="match_parent" />
+</android.support.v4.widget.SlidingPaneLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/activity_settings.xml b/app/src/main/res/layout/activity_settings.xml
new file mode 100644
index 00000000..c79624af
--- /dev/null
+++ b/app/src/main/res/layout/activity_settings.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<android.support.v4.widget.SlidingPaneLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/slidingpane_layout">
+
+    <fragment android:name="org.gnucash.android.ui.settings.PreferenceHeadersFragment"
+        android:tag="PreferenceHeadersFragment"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginRight="0dp"
+        android:layout_gravity="left|start"/>
+
+    <FrameLayout android:id="@+id/fragment_container"
+        android:layout_width="match_parent"
+        android:layout_weight="1"
+        android:layout_height="match_parent" />
+</android.support.v4.widget.SlidingPaneLayout>
\ No newline at end of file
diff --git a/app/src/main/res/values-sw600dp/flags.xml b/app/src/main/res/values-sw600dp/flags.xml
new file mode 100644
index 00000000..b379cdfa
--- /dev/null
+++ b/app/src/main/res/values-sw600dp/flags.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<resources>
+    <bool name="isTablet">true</bool>
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/dimens.xml b/app/src/main/res/values/dimens.xml
index 64afba57..128ab1c0 100644
--- a/app/src/main/res/values/dimens.xml
+++ b/app/src/main/res/values/dimens.xml
@@ -34,7 +34,6 @@
     <dimen name="card_min_height">80dp</dimen>
     <dimen name="toolbar_progress_height">2dp</dimen>
 
-
     <dimen name="passcode_btn">70dp</dimen>
     <dimen name="passcode_btn_margin">10dp</dimen>
 
diff --git a/app/src/main/res/values/donottranslate.xml b/app/src/main/res/values/donottranslate.xml
index f4625f82..5c88771b 100644
--- a/app/src/main/res/values/donottranslate.xml
+++ b/app/src/main/res/values/donottranslate.xml
@@ -38,7 +38,7 @@
     <string name="key_last_export_destination">last_export_destination</string>
     <string name="key_use_compact_list">use_compact_list</string>
     <string name="empty"></string>
-
+    <string name="key_prefs_header_general">prefs_header_general</string>
     <string-array name="key_transaction_type_values" translatable="false">
         <item>CREDIT</item>
         <item>DEBIT</item>
diff --git a/app/src/main/res/values/flags.xml b/app/src/main/res/values/flags.xml
new file mode 100644
index 00000000..c5248155
--- /dev/null
+++ b/app/src/main/res/values/flags.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<resources>
+    <bool name="isTablet">false</bool>
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index e82dfc2a..2876d3ae 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -408,6 +408,8 @@
     <string name="nav_menu_budgets">Budgets</string>
     <string name="title_cash_flow_report">Cash Flow</string>
     <string name="title_budgets">Budgets</string>
+    <string name="title_use_compact_list">Enable compact view</string>
+    <string name="summary_use_compact_list">Enable to always use compact view for transactions list</string>
     <string-array name="report_time_range">
         <item>Current month</item>
         <item>Last 3 months</item>
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
index 74b2dfd9..81e3aecf 100644
--- a/app/src/main/res/values/themes.xml
+++ b/app/src/main/res/values/themes.xml
@@ -32,6 +32,7 @@
         <item name="windowActionModeOverlay">true</item>
         <item name="colorButtonNormal">#FFAB00</item>
         <item name="actionMenuTextAppearance">@style/ActionMenuText</item>
+        <item name="preferenceTheme">@style/PreferenceThemeOverlay</item>
     </style>
 
     <style name="Theme.GnucashTheme.NoActionBar" parent="Theme.AppCompat.Light.NoActionBar">
@@ -47,6 +48,7 @@
         <item name="actionMenuTextAppearance">@style/ActionMenuText</item>
 
         <item name="drawerArrowStyle">@style/DrawerArrowStyle</item>
+        <item name="preferenceTheme">@style/PreferenceThemeOverlay</item>
         <!-- <item name="colorControlNormal">@android:color/white</item> -->
     </style>
 
diff --git a/app/src/main/res/xml-v11/fragment_about_preferences.xml b/app/src/main/res/xml-v11/fragment_about_preferences.xml
deleted file mode 100644
index fbe45e28..00000000
--- a/app/src/main/res/xml-v11/fragment_about_preferences.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
- Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- 
- Licensed under the Apache License, Version 2.0 (the "License");
- you may not use this file except in compliance with the License.
- You may obtain a copy of the License at
- 
-    http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android" >
-    <Preference android:key="@string/key_about_gnucash" android:summary="@string/app_version_name"
-                android:title="@string/title_about_gnucash"/>
-    <Preference android:title="@string/title_google_plus_community"
-        android:summary="@string/summary_google_plus" >
-        <intent android:action="android.intent.action.VIEW"
-            android:data="https://plus.google.com/communities/104728406764752407046"/>
-    </Preference>
-    <Preference android:title="@string/title_translate_gnucash"
-        android:summary="@string/summary_translate_gnucash">
-        <intent android:action="android.intent.action.VIEW"
-            android:data="https://crowdin.com/project/gnucash-android" />
-    </Preference>
-    <Preference android:summary="@string/summary_licence_details" 
-        android:title="@string/title_license" 
-        android:key="@string/key_license">
-        <intent android:action="android.intent.action.VIEW"
-        	android:data="http://www.apache.org/licenses/LICENSE-2.0.html" />
-	</Preference>
-    <CheckBoxPreference android:title="@string/title_enable_crashlytics"
-        android:summary="@string/msg_enable_crashlytics"
-        android:key="@string/key_enable_crashlytics" />
-</PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/main/res/xml-v11/fragment_account_preferences.xml b/app/src/main/res/xml-v11/fragment_account_preferences.xml
deleted file mode 100644
index 8c3179e4..00000000
--- a/app/src/main/res/xml-v11/fragment_account_preferences.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <ListPreference android:summary="@string/summary_default_currency"
-                    android:key="@string/key_default_currency"
-                    android:dialogTitle="@string/title_choose_currency"
-                    android:title="@string/title_default_currency"
-                    android:entries="@array/key_currency_codes"
-                    android:entryValues="@array/key_currency_codes"/>
-    <Preference android:key="@string/key_create_default_accounts"
-                android:title="@string/title_create_default_accounts"
-                android:summary="@string/summary_create_default_accounts" />
-    <Preference android:key="@string/key_import_accounts"
-                android:summary="@string/summary_import_accounts"
-                android:title="@string/title_import_accounts" />
-    <Preference android:key="@string/key_delete_all_accounts"
-                android:summary="@string/summary_delete_all_accounts"
-                android:title="@string/title_delete_all_accounts" />
-</PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/main/res/xml-v11/fragment_transaction_preferences.xml b/app/src/main/res/xml-v11/fragment_transaction_preferences.xml
deleted file mode 100644
index 084e26c8..00000000
--- a/app/src/main/res/xml-v11/fragment_transaction_preferences.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
- Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- 
- Licensed under the Apache License, Version 2.0 (the "License");
- you may not use this file except in compliance with the License.
- You may obtain a copy of the License at
- 
-    http://www.apache.org/licenses/LICENSE-2.0
- 
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
--->
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <ListPreference android:title="@string/title_default_transaction_type"
-                    android:entryValues="@array/key_transaction_type_values"
-                    android:entries="@array/transaction_types"
-                    android:key="@string/key_default_transaction_type"
-                    android:summary="@string/summary_default_transaction_type"/>
-
-    <CheckBoxPreference android:summary="@string/summary_use_double_entry"
-                        android:key="@string/key_use_double_entry"
-                        android:title="@string/title_use_double_entry"/>
-    <CheckBoxPreference android:summary="@string/summary_save_opening_balances"
-                        android:key="@string/key_save_opening_balances"
-                        android:defaultValue="false"
-                        android:title="@string/title_save_opening_balances" />
-    <Preference android:key="@string/key_delete_all_transactions"
-                android:summary="@string/summary_delete_all_transactions"
-                android:title="@string/title_delete_all_transactions" />
-</PreferenceScreen>
diff --git a/app/src/main/res/xml/fragment_about_preferences.xml b/app/src/main/res/xml/fragment_about_preferences.xml
index 02b879f1..47e375b2 100644
--- a/app/src/main/res/xml/fragment_about_preferences.xml
+++ b/app/src/main/res/xml/fragment_about_preferences.xml
@@ -16,7 +16,6 @@
 -->
 
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android" >
-    <PreferenceCategory android:title="@string/title_about_gnucash"/>
     <Preference android:key="@string/key_about_gnucash" android:summary="@string/app_version_name"
         android:title="@string/title_about_gnucash"/>
     <Preference android:title="@string/title_google_plus_community"
@@ -35,8 +34,8 @@
         <intent android:action="android.intent.action.VIEW"
             android:data="http://www.apache.org/licenses/LICENSE-2.0.html" />
     </Preference>
-    <CheckBoxPreference android:title="@string/title_enable_crashlytics"
+    <android.support.v7.preference.SwitchPreferenceCompat
+        android:title="@string/title_enable_crashlytics"
         android:summary="@string/msg_enable_crashlytics"
         android:key="@string/key_enable_crashlytics" />
-
 </PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/main/res/xml/fragment_account_preferences.xml b/app/src/main/res/xml/fragment_account_preferences.xml
index aba9bff1..ace62559 100644
--- a/app/src/main/res/xml/fragment_account_preferences.xml
+++ b/app/src/main/res/xml/fragment_account_preferences.xml
@@ -1,18 +1,34 @@
 <?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory android:title="@string/title_account_preferences"/>
     <ListPreference android:summary="@string/summary_default_currency"
-                    android:key="@string/key_default_currency"
-                    android:dialogTitle="@string/title_choose_currency"
-                    android:title="@string/title_default_currency"
-                    android:entries="@array/key_currency_codes"
-                    android:entryValues="@array/key_currency_codes"
-                    android:defaultValue="USD"/>
+        android:key="@string/key_default_currency"
+        android:dialogTitle="@string/title_choose_currency"
+        android:title="@string/title_default_currency"
+        android:entries="@array/key_currency_codes"
+        android:entryValues="@array/key_currency_codes"/>
+    <Preference android:key="@string/key_create_default_accounts"
+        android:title="@string/title_create_default_accounts"
+        android:summary="@string/summary_create_default_accounts" />
     <Preference android:key="@string/key_import_accounts"
-                android:summary="@string/summary_import_accounts"
-                android:title="@string/title_import_accounts" />
+        android:summary="@string/summary_import_accounts"
+        android:title="@string/title_import_accounts" />
     <Preference android:key="@string/key_delete_all_accounts"
-                android:summary="@string/summary_delete_all_accounts"
-                android:title="@string/title_delete_all_accounts" />
+        android:summary="@string/summary_delete_all_accounts"
+        android:title="@string/title_delete_all_accounts" />
 </PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/main/res/xml/fragment_backup_preferences.xml b/app/src/main/res/xml/fragment_backup_preferences.xml
index 463f89e0..be2fb59f 100644
--- a/app/src/main/res/xml/fragment_backup_preferences.xml
+++ b/app/src/main/res/xml/fragment_backup_preferences.xml
@@ -52,9 +52,9 @@
             android:key="@string/key_default_export_email" 
             android:summary="@string/summary_default_export_email"
             android:inputType="textEmailAddress"/>
-        <CheckBoxPreference android:summary="@string/hint_export_choice" android:key="@string/key_export_all_transactions" android:title="@string/title_export_all_transactions"/>
-        <CheckBoxPreference android:summary="@string/hint_delete_after_export" android:key="@string/key_delete_transactions_after_export" android:title="@string/title_always_delete_exported_transactions"/>
-        <CheckBoxPreference android:key="@string/key_xml_ofx_header" android:summary="@string/summary_xml_ofx_header" android:title="@string/title_xml_ofx_header"/>
+        <android.support.v7.preference.SwitchPreferenceCompat android:summary="@string/hint_export_choice" android:key="@string/key_export_all_transactions" android:title="@string/title_export_all_transactions"/>
+        <android.support.v7.preference.SwitchPreferenceCompat android:summary="@string/hint_delete_after_export" android:key="@string/key_delete_transactions_after_export" android:title="@string/title_always_delete_exported_transactions"/>
+        <android.support.v7.preference.SwitchPreferenceCompat android:key="@string/key_xml_ofx_header" android:summary="@string/summary_xml_ofx_header" android:title="@string/title_xml_ofx_header"/>
     </PreferenceCategory>
 
 </PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/main/res/xml/fragment_transaction_preferences.xml b/app/src/main/res/xml/fragment_transaction_preferences.xml
index 36aefe5f..d92db4dc 100644
--- a/app/src/main/res/xml/fragment_transaction_preferences.xml
+++ b/app/src/main/res/xml/fragment_transaction_preferences.xml
@@ -15,21 +15,25 @@
  limitations under the License.
 -->
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory android:title="@string/title_transaction_preferences"/> <!-- needed for pre-Honeycomb devices -->
     <ListPreference android:title="@string/title_default_transaction_type"
-                    android:entryValues="@array/key_transaction_type_values"
-                    android:entries="@array/transaction_types"
-                    android:key="@string/key_default_transaction_type"
-                    android:summary="@string/summary_default_transaction_type"/>
-    <CheckBoxPreference android:summary="@string/summary_use_double_entry"
-                        android:key="@string/key_use_double_entry"
-                        android:defaultValue="true"
-                        android:title="@string/title_use_double_entry"/>
-    <CheckBoxPreference android:summary="@string/summary_save_opening_balances"
-                        android:key="@string/key_save_opening_balances"
-                        android:defaultValue="false"
-                        android:title="@string/title_save_opening_balances" />
+        android:entryValues="@array/key_transaction_type_values"
+        android:entries="@array/transaction_types"
+        android:key="@string/key_default_transaction_type"
+        android:summary="@string/summary_default_transaction_type"/>
+
+    <android.support.v7.preference.SwitchPreferenceCompat
+        android:summary="@string/summary_use_compact_list"
+        android:key="@string/key_use_compact_list"
+        android:title="@string/title_use_compact_list"/>
+
+    <android.support.v7.preference.SwitchPreferenceCompat android:summary="@string/summary_use_double_entry"
+        android:key="@string/key_use_double_entry"
+        android:title="@string/title_use_double_entry"/>
+    <android.support.v7.preference.SwitchPreferenceCompat android:summary="@string/summary_save_opening_balances"
+        android:key="@string/key_save_opening_balances"
+        android:defaultValue="false"
+        android:title="@string/title_save_opening_balances" />
     <Preference android:key="@string/key_delete_all_transactions"
-                android:summary="@string/summary_delete_all_transactions"
-                android:title="@string/title_delete_all_transactions" />
+        android:summary="@string/summary_delete_all_transactions"
+        android:title="@string/title_delete_all_transactions" />
 </PreferenceScreen>
diff --git a/app/src/main/res/xml/preference_fragment_headers.xml b/app/src/main/res/xml/preference_fragment_headers.xml
new file mode 100644
index 00000000..3acbd0dd
--- /dev/null
+++ b/app/src/main/res/xml/preference_fragment_headers.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:title="GnuCash Settings">
+    <Preference android:key="@string/key_prefs_header_general"
+        android:title="@string/header_general_settings"
+        app:fragment="org.gnucash.android.ui.settings.GeneralPreferenceFragment"/>
+    <Preference app:fragment="org.gnucash.android.ui.settings.AccountPreferencesFragment"
+        android:title="@string/header_account_settings" />
+    <Preference app:fragment="org.gnucash.android.ui.settings.TransactionsPreferenceFragment"
+        android:title="@string/header_transaction_settings" />
+    <Preference app:fragment="org.gnucash.android.ui.settings.BackupPreferenceFragment"
+        android:title="@string/header_backup_and_export_settings" />
+    <Preference app:fragment="org.gnucash.android.ui.settings.AboutPreferenceFragment"
+        android:title="@string/header_about_gnucash" />
+    <Preference android:title="Rate in Play Store">
+        <intent android:action="android.intent.action.VIEW"
+            android:data="market://details?id=org.gnucash.android" />
+    </Preference>
+</PreferenceScreen>
\ No newline at end of file
