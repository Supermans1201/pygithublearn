From c52ccded7799666524850c0835d911245e84c77f Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 6 Apr 2013 12:30:42 +0200
Subject: [PATCH] Implemented displaying nested accounts in a hierarchy (closes
 #66) Fixed: Consider sub-accounts when displaying account balance in
 transactions view

---
 app/AndroidManifest.xml                            |   4 +-
 app/res/layout/activity_transactions.xml           |  46 ++++-
 app/res/values/dimens.xml                          |   3 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  49 ++++++
 .../android/ui/accounts/AccountsActivity.java      |  88 ++++++++--
 .../android/ui/accounts/AccountsListFragment.java  |  90 +++++++---
 .../android/ui/accounts/AddAccountFragment.java    | 111 +++++++-----
 .../ui/transactions/NewTransactionFragment.java    |   6 +-
 .../ui/transactions/TransactionsActivity.java      | 187 +++++++++++++--------
 .../ui/transactions/TransactionsListFragment.java  |  11 +-
 10 files changed, 429 insertions(+), 166 deletions(-)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 45f1473e..026aa8e0 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -58,8 +58,8 @@
         </activity>
         <activity android:name=".ui.settings.SettingsActivity"></activity>
         <activity android:name=".ui.transactions.TransactionsActivity" 
-            android:configChanges="orientation|screenSize"
-            android:launchMode="singleTop"></activity>
+            android:configChanges="orientation|screenSize">
+        </activity>
         <activity android:name=".ui.widget.WidgetConfigurationActivity"
             android:label="@string/label_widget_configuration"
             android:theme="@style/Theme.Sherlock.Light.Dialog"
diff --git a/app/res/layout/activity_transactions.xml b/app/res/layout/activity_transactions.xml
index b45ed25b..2056b145 100644
--- a/app/res/layout/activity_transactions.xml
+++ b/app/res/layout/activity_transactions.xml
@@ -15,9 +15,43 @@
  limitations under the License.
 -->
 
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/fragment_container"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent" >
-    
-</FrameLayout>
\ No newline at end of file
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:id="@+id/fragment_container"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <TextView
+            android:id="@+id/section_header_sub_accounts"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/section_header_height"
+            android:paddingLeft="10dp"
+            android:background="@android:color/darker_gray"
+            android:textColor="@android:color/white"
+            android:visibility="gone"
+            android:text="Sub-Accounts"
+            />
+
+    <FrameLayout android:id="@+id/sub_accounts_container"
+                 android:layout_width="match_parent"
+                 android:layout_height="0dp"
+                 android:layout_weight="1"
+                 android:visibility="gone"/>
+
+    <TextView
+            android:id="@+id/section_header_transactions"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/section_header_height"
+            android:paddingLeft="10dp"
+            android:background="@android:color/darker_gray"
+            android:textColor="@android:color/white"
+            android:text="Transactions"
+            />
+
+    <FrameLayout android:id="@+id/transactions_container"
+                 android:layout_width="match_parent"
+                 android:layout_height="0dp"
+                 android:layout_weight="3"
+                 />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/res/values/dimens.xml b/app/res/values/dimens.xml
index 0274ada5..d54c0e94 100644
--- a/app/res/values/dimens.xml
+++ b/app/res/values/dimens.xml
@@ -23,5 +23,6 @@
     <dimen name="text_size_medium">18sp</dimen>
     <dimen name="text_size_large">18sp</dimen>
     <dimen name="edge_padding">12dp</dimen>
-    <dimen name="widget_margin">8dp</dimen>    
+    <dimen name="widget_margin">8dp</dimen>
+    <dimen name="section_header_height">20dp</dimen>
 </resources>
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index d9128fe9..5e77bfcc 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -399,6 +399,55 @@ public Money getAccountBalance(long accountId){
     }
 
     /**
+     * Returns a cursor to the dataset containing sub-accounts of the account with record ID <code>accoundId</code>
+     * @param accountId Record ID of the parent account
+     * @return {@link Cursor} to the sub accounts data set
+     */
+    public Cursor fetchSubAccounts(long accountId){
+        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+                null,
+                DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ?",
+                new String[]{getAccountUID(accountId)},
+                null, null, null);
+    }
+
+    /**
+     * Returns the top level accounts i.e. accounts with no parent or with the GnuCash ROOT account as parent
+     * @return Cursor to the top level accounts
+     */
+    public Cursor fetchTopLevelAccounts(){
+        StringBuilder condition = new StringBuilder("(");
+        condition.append(DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " IS NULL");
+        condition.append(" OR ");
+        condition.append(DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ");
+        condition.append("'" + getGnuCashRootAccountUID() + "'");
+        condition.append(")");
+        condition.append(" AND ");
+        condition.append(DatabaseHelper.KEY_TYPE + " != " + "'" + AccountType.ROOT.name() + "'");
+        return fetchAccounts(condition.toString());
+    }
+
+    /**
+     * Returns the GnuCash ROOT account UID.
+     * <p>In GnuCash desktop account structure, there is a root account (which is not visible in the UI) from which
+     * other top level accounts derive. GnuCash Android does not have this ROOT account by default unless the account
+     * structure was imported from GnuCash for desktop. Hence this method also returns <code>null</code> as an
+     * acceptable result.</p>
+     * <p><b>Note:</b> NULL is an acceptable response, be sure to check for it</p>
+     * @return Unique ID of the GnuCash root account.
+     */
+    public String getGnuCashRootAccountUID(){
+        String condition = DatabaseHelper.KEY_TYPE + "= '" + AccountType.ROOT.name() + "'";
+        Cursor cursor =  fetchAccounts(condition);
+        String rootUID = null;
+        if (cursor != null && cursor.moveToFirst()){
+            rootUID = cursor.getString(DatabaseAdapter.COLUMN_UID);
+            cursor.close();
+        }
+        return rootUID;
+    }
+
+    /**
      * Returns the number of accounts for which the account with ID <code>accoundId</code> is a first level parent
      * @param accountId Database ID of parent account
      * @return Number of sub accounts
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index b52f363d..ab178a4e 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -116,23 +116,37 @@ public void onCreate(Bundle savedInstanceState) {
 		if (firstRun){
 			createDefaultAccounts();
 		}
-		
-		FragmentManager fragmentManager = getSupportFragmentManager();
 
-		AccountsListFragment accountsListFragment = (AccountsListFragment) fragmentManager
-				.findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
+        final Intent intent = getIntent();
+        String action = intent.getAction();
+        if (action != null && action.equals(Intent.ACTION_INSERT_OR_EDIT)) {
+            //enter account creation/edit mode if that was specified
+            long accountId = intent.getLongExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, 0L);
+            if (accountId > 0)
+                showEditAccountFragment(accountId);
+            else {
+                long parentAccountId = intent.getLongExtra(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, 0L);
+                showAddAccountFragment(parentAccountId);
+            }
+        } else {
+            //show the simple accounts list
 
-		if (accountsListFragment == null) {
-			FragmentTransaction fragmentTransaction = fragmentManager
-					.beginTransaction();
-			fragmentTransaction.add(R.id.fragment_container,
-					new AccountsListFragment(), FRAGMENT_ACCOUNTS_LIST);
+            FragmentManager fragmentManager = getSupportFragmentManager();
+            AccountsListFragment accountsListFragment = (AccountsListFragment) fragmentManager
+                    .findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
 
-			fragmentTransaction.commit();
-		}
-		
-		
-		if (hasNewFeatures()){
+            if (accountsListFragment == null) {
+                FragmentTransaction fragmentTransaction = fragmentManager
+                        .beginTransaction();
+                fragmentTransaction.add(R.id.fragment_container,
+                        new AccountsListFragment(), FRAGMENT_ACCOUNTS_LIST);
+
+                fragmentTransaction.commit();
+            } else
+                accountsListFragment.refreshList();
+        }
+
+        if (hasNewFeatures()){
 			showWhatsNewDialog();
 		}
 	}
@@ -202,6 +216,46 @@ public boolean onOptionsItemSelected(MenuItem item) {
 		}
 	}
 
+    /**
+     * Shows form fragment for creating a new account
+     * @param parentAccountId Record ID of the parent account present. Can be 0 for top-level account
+     */
+    private void showAddAccountFragment(long parentAccountId){
+        Bundle args = new Bundle();
+        args.putLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, parentAccountId);
+        showAccountFormFragment(args);
+    }
+
+    /**
+     * Shows the form fragment for editing the account with record ID <code>accountId</code>
+     * @param accountId Record ID of the account to be edited
+     */
+    private void showEditAccountFragment(long accountId) {
+        Bundle args = new Bundle();
+        args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
+        showAccountFormFragment(args);
+    }
+
+    /**
+     * Shows the form for creating/editing accounts
+     * @param args Arguments to use for initializing the form.
+     *             This could be an account to edit or a preset for the parent account
+     */
+    private void showAccountFormFragment(Bundle args){
+        FragmentManager fragmentManager = getSupportFragmentManager();
+        FragmentTransaction fragmentTransaction = fragmentManager
+                .beginTransaction();
+
+        AddAccountFragment newAccountFragment = AddAccountFragment.newInstance(null);
+        newAccountFragment.setArguments(args);
+
+        fragmentTransaction.replace(R.id.fragment_container,
+                newAccountFragment, AccountsActivity.FRAGMENT_NEW_ACCOUNT);
+
+        fragmentTransaction.addToBackStack(null);
+        fragmentTransaction.commit();
+    }
+
 	/**
 	 * Opens a dialog fragment to create a new account
 	 * @param v View which triggered this callback
@@ -211,6 +265,8 @@ public void onNewAccountClick(View v) {
 				.findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
 		if (accountFragment != null)
 			accountFragment.showAddAccountFragment(0);
+        else
+            showAddAccountFragment(0);
 	}
 
 	/**
@@ -306,6 +362,10 @@ public void onClick(DialogInterface dialogInterface, int i) {
 		mDefaultAccountsDialog.show();		
 	}
 
+    /**
+     * Starts Intent chooser for selecting a GnuCash accounts file to import.
+     * The accounts are actually imported in onActivityResult
+     */
     public void importAccounts() {
         Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
         pickIntent.setType("application/octet-stream");
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index b4bc1d38..f275a4f6 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -19,7 +19,6 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
-import android.content.ContentResolver;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -55,11 +54,8 @@
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-import org.gnucash.android.util.GnucashAccountXmlHandler;
 import org.gnucash.android.util.OnAccountClickedListener;
 
-import java.io.File;
-import java.io.FileNotFoundException;
 import java.util.Locale;
 
 /**
@@ -70,17 +66,20 @@
 public class AccountsListFragment extends SherlockListFragment implements
         LoaderCallbacks<Cursor>, OnItemLongClickListener {
 
-    /**
-     * Logging tag
-     */
-    protected static final String TAG = "AccountsListFragment";
     public static final int REQUEST_PICK_ACCOUNTS_FILE = 0x1;
-
-
     /**
      * Menu item ID for import accounts action
      */
     public static final int MENU_IMPORT_ACCOUNTS = 0x11;
+    /**
+     * Key for passing argument for the parent account ID.
+     * When this argument is set, only sub-accounts of the account will be loaded.
+     */
+    public static final String ARG_PARENT_ACCOUNT_ID = "parent_account_id";
+    /**
+     * Logging tag
+     */
+    protected static final String TAG = "AccountsListFragment";
 
     /**
      * {@link ListAdapter} for the accounts which will be bound to the list
@@ -189,7 +188,8 @@ public void onActivityCreated(Bundle savedInstanceState) {
         actionbar.setTitle(R.string.title_accounts);
         actionbar.setDisplayHomeAsUpEnabled(false);
 
-        setHasOptionsMenu(true);
+        if (!inSubAcccount())
+            setHasOptionsMenu(true);
 
         ListView lv = getListView();
         lv.setOnItemLongClickListener(this);
@@ -240,6 +240,15 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position,
     }
 
     /**
+     * Returns true if this fragment is currently rendering sub-accounts. false otherwise
+     * @return true if this fragment is currently rendering sub-accounts. false otherwise
+     */
+    public boolean inSubAcccount(){
+        Bundle args = getArguments();
+        return (args != null) && (args.getLong(ARG_PARENT_ACCOUNT_ID) > 0);
+    }
+
+    /**
      * Delete the account with record ID <code>rowId</code>
      * It shows the delete confirmation dialog if the account has transactions,
      * else deletes the account immediately
@@ -330,7 +339,7 @@ private void deselectPreviousSelectedItem() {
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         inflater.inflate(R.menu.account_actions, menu);
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB){
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
             MenuItem item = menu.add(0, MENU_IMPORT_ACCOUNTS, 0, R.string.menu_import_accounts);
             item.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_NEVER);
         }
@@ -345,7 +354,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return true;
 
             case MENU_IMPORT_ACCOUNTS:
-                ((AccountsActivity)getActivity()).importAccounts();
+                ((AccountsActivity) getActivity()).importAccounts();
                 return true;
 
             case R.id.menu_export:
@@ -361,6 +370,11 @@ public boolean onOptionsItemSelected(MenuItem item) {
         }
     }
 
+    public void refreshList(long parentAccountId) {
+        getArguments().putLong(ARG_PARENT_ACCOUNT_ID, parentAccountId);
+        refreshList();
+    }
+
     /**
      * Refreshes the list by restarting the {@link DatabaseCursorLoader} associated
      * with the ListView
@@ -368,6 +382,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
     public void refreshList() {
         getLoaderManager().restartLoader(0, null, this);
 
+        if (getActivity() instanceof TransactionsActivity){
+            ((TransactionsActivity)getActivity()).updateSubAccountsView();
+        }
 /*
         //TODO: Figure out a way to display account balances per currency
 		boolean doubleEntryActive = PreferenceManager.getDefaultSharedPreferences(getActivity())
@@ -435,7 +452,12 @@ public void showExportDialog() {
     @Override
     public Loader<Cursor> onCreateLoader(int id, Bundle args) {
         Log.d(TAG, "Creating the accounts loader");
-        return new AccountsCursorLoader(this.getActivity().getApplicationContext());
+        Bundle fragmentArguments = getArguments();
+        long accountId = fragmentArguments == null ? -1 : fragmentArguments.getLong(ARG_PARENT_ACCOUNT_ID);
+
+        return id < 0 ?
+                new AccountsCursorLoader(this.getActivity().getApplicationContext()) :
+                new AccountsCursorLoader(this.getActivity(), accountId);
     }
 
     @Override
@@ -509,15 +531,26 @@ public void onClick(DialogInterface dialog, int whichButton) {
      * @author Ngewi Fet <ngewif@gmail.com>
      */
     private static final class AccountsCursorLoader extends DatabaseCursorLoader {
+        private long mParentAccountId = -1;
 
         public AccountsCursorLoader(Context context) {
             super(context);
         }
 
+        public AccountsCursorLoader(Context context, long parentAccountId) {
+            super(context);
+            mParentAccountId = parentAccountId;
+        }
+
         @Override
         public Cursor loadInBackground() {
             mDatabaseAdapter = new AccountsDbAdapter(getContext());
-            Cursor cursor = mDatabaseAdapter.fetchAllRecords();
+            Cursor cursor;
+            if (mParentAccountId > 0)
+                cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchSubAccounts(mParentAccountId);
+            else
+                cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchTopLevelAccounts();
+
             if (cursor != null)
                 registerContentObserver(cursor);
             return cursor;
@@ -568,17 +601,22 @@ public void bindView(View v, Context context, Cursor cursor) {
                     getResources().getColor(R.color.credit_green);
             summary.setTextColor(fontColor);
 
-            ImageView newTrans = (ImageView) v.findViewById(R.id.btn_new_transaction);
-            newTrans.setOnClickListener(new View.OnClickListener() {
-
-                @Override
-                public void onClick(View v) {
-                    Intent intent = new Intent(getActivity(), TransactionsActivity.class);
-                    intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-                    intent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
-                    getActivity().startActivity(intent);
-                }
-            });
+            ImageView newTransactionButton = (ImageView) v.findViewById(R.id.btn_new_transaction);
+            if (inSubAcccount()){
+                newTransactionButton.setVisibility(View.GONE);
+                v.findViewById(R.id.vertical_line).setVisibility(View.GONE);
+            } else {
+                newTransactionButton.setOnClickListener(new View.OnClickListener() {
+
+                    @Override
+                    public void onClick(View v) {
+                        Intent intent = new Intent(getActivity(), TransactionsActivity.class);
+                        intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+                        intent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountId);
+                        getActivity().startActivity(intent);
+                    }
+                });
+            }
         }
     }
 
diff --git a/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java b/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
index 5687a09c..4f10b964 100644
--- a/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
@@ -146,24 +146,10 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
 			}
 		});
 
-		mSelectedAccountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
-		if (mSelectedAccountId > 0) {
-        	mAccount = mAccountsDbAdapter.getAccount(mSelectedAccountId);
-        	getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
-		}
 		return view;
 	}
 	
-	private void setParentAccountSelection(String parentUID){
-		long parentId = mAccountsDbAdapter.getAccountID(parentUID);
-		for (int pos = 0; pos < mCursorAdapter.getCount(); pos++) {
-			if (mCursorAdapter.getItemId(pos) == parentId){
-				mParentAccountSpinner.setSelection(pos);				
-				break;
-			}
-		}
-	}
-	
+
 	/**
 	 * Initializes the values of the views in the dialog
 	 */
@@ -177,33 +163,80 @@ public void onActivityCreated(Bundle savedInstanceState) {
 				getResources().getStringArray(R.array.currency_names));		
 		arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		mCurrencySpinner.setAdapter(arrayAdapter);
-		
-		String currencyCode = Money.DEFAULT_CURRENCY_CODE;
-		
-		if (mSelectedAccountId != 0){
-			//if we are editing an account instead of creating one
-			currencyCode = mAccount.getCurrency().getCurrencyCode();
-		}
-		mCurrencyCodes = Arrays.asList(getResources().getStringArray(R.array.currency_codes));
-		
-		if (mCurrencyCodes.contains(currencyCode)){
-			mCurrencySpinner.setSelection(mCurrencyCodes.indexOf(currencyCode));
-		}	
-		
-		loadParentAccountList();		
 
-		if (mSelectedAccountId > 0) {
-        	mNameEditText.setText(mAccount.getName());
-        	String parentUID = mAccount.getParentUID();
-        	if (parentUID != null){
-        		mParentCheckBox.setChecked(true);
-        		mParentAccountSpinner.setEnabled(true);
-        		setParentAccountSelection(parentUID);
-        	}        	
+        loadParentAccountList();
+
+        mSelectedAccountId = getArguments().getLong(TransactionsListFragment.SELECTED_ACCOUNT_ID);
+        if (mSelectedAccountId > 0) {
+            mAccount = mAccountsDbAdapter.getAccount(mSelectedAccountId);
+            getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
+        }
+
+        if (mAccount != null){
+            initializeViewsWithAccount(mAccount);
+        } else {
+            initializeViews();
         }
-		
 	}
-	
+
+    /**
+     * Initialize view with the properties of <code>account</code>.
+     * This is applicable when editing an account
+     * @param account Account whose fields are used to populate the form
+     */
+    private void initializeViewsWithAccount(Account account){
+        if (account == null)
+            throw new IllegalArgumentException("Account cannot be null");
+
+        String currencyCode = account.getCurrency().getCurrencyCode();
+        setSelectedCurrency(currencyCode);
+
+        mNameEditText.setText(account.getName());
+        long parentAccountId = mAccountsDbAdapter.getAccountID(account.getParentUID());
+        setParentAccountSelection(parentAccountId);
+    }
+
+    /**
+     * Initialize views with defaults for new account
+     */
+    private void initializeViews(){
+        setSelectedCurrency(Money.DEFAULT_CURRENCY_CODE);
+
+        long parentAccountId = getArguments().getLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID);
+        setParentAccountSelection(parentAccountId);
+
+    }
+
+    /**
+     * Selects the currency with code <code>currencyCode</code> in the spinner
+     * @param currencyCode ISO 4217 currency code to be selected
+     */
+    private void setSelectedCurrency(String currencyCode){
+        mCurrencyCodes = Arrays.asList(getResources().getStringArray(R.array.currency_codes));
+        if (mCurrencyCodes.contains(currencyCode)){
+            mCurrencySpinner.setSelection(mCurrencyCodes.indexOf(currencyCode));
+        }
+    }
+
+    /**
+     * Selects the account with ID <code>parentAccountId</code> in the parent accounts spinner
+     * @param parentAccountId Record ID of parent account to be selected
+     */
+    private void setParentAccountSelection(long parentAccountId){
+        if (parentAccountId > 0){
+            mParentCheckBox.setChecked(true);
+            mParentAccountSpinner.setEnabled(true);
+        } else
+            return;
+
+        for (int pos = 0; pos < mCursorAdapter.getCount(); pos++) {
+            if (mCursorAdapter.getItemId(pos) == parentAccountId){
+                mParentAccountSpinner.setSelection(pos);
+                break;
+            }
+        }
+    }
+
 	@Override
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {		
 		super.onCreateOptionsMenu(menu, inflater);
diff --git a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index c0c57456..5809294c 100644
--- a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -290,12 +290,10 @@ private void initalizeViews() {
      */
 	private void updateTransferAccountsList(){
 		long accountId = ((TransactionsActivity)getActivity()).getCurrentAccountID();
-		
-		//TODO: we'll leave out the currency condition for now, maybe look at this in the future
+
 		String conditions = "(" + DatabaseHelper.KEY_ROW_ID + " != " + accountId + ") AND " + "(" +
 							DatabaseHelper.KEY_CURRENCY_CODE + " = '" + mAccountsDbAdapter.getCurrencyCode(accountId) + "')";
-		
-//		String conditions = "(" + DatabaseHelper.KEY_ROW_ID + " != " + accountId + ")";
+
 		mCursor = mAccountsDbAdapter.fetchAccounts(conditions);
 		
 		String[] from = new String[] {DatabaseHelper.KEY_NAME};
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index 6a66a359..2aeac829 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -16,12 +16,15 @@
 
 package org.gnucash.android.ui.transactions;
 
+import android.widget.TextView;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
 import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.ui.accounts.AccountsListFragment;
+import org.gnucash.android.util.OnAccountClickedListener;
 import org.gnucash.android.util.OnTransactionClickedListener;
 
 import android.content.Context;
@@ -46,8 +49,8 @@
  * Activity for displaying, creating and editing transactions
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class TransactionsActivity extends SherlockFragmentActivity implements 
-	OnTransactionClickedListener{
+public class TransactionsActivity extends SherlockFragmentActivity implements
+        OnAccountClickedListener, OnTransactionClickedListener{
 
 	/**
 	 * Logging tag
@@ -75,33 +78,53 @@
 	 * Basically if onCreate has already been called or not. It is used
 	 * to determine if to call addToBackStack() for fragments. When adding 
 	 * the very first fragment, it should not be added to the backstack.
-	 * @see #showTransactionEditFragment(Bundle)
+	 * @see #showTransactionFormFragment(Bundle)
 	 */
 	private boolean mActivityRunning = false;
-	
+
+    TextView mSectionHeaderSubAccounts;
+    TextView mSectionHeaderTransactions;
+    View mSubAccountsContainer;
+
 	private OnNavigationListener mTransactionListNavigationListener = new OnNavigationListener() {
 
 		  @Override
-		  public boolean onNavigationItemSelected(int position, long itemId) {		    
+		  public boolean onNavigationItemSelected(int position, long itemId) {
 			mAccountId = itemId;
-		    FragmentManager fragmentManager = getSupportFragmentManager();
-		    
+            updateSubAccountsView();
+
+            FragmentManager fragmentManager = getSupportFragmentManager();
+
 		    //inform new accounts fragment that account was changed
 		    NewTransactionFragment newTransactionsFragment = (NewTransactionFragment) fragmentManager
-					.findFragmentByTag(FRAGMENT_NEW_TRANSACTION);	
+					.findFragmentByTag(FRAGMENT_NEW_TRANSACTION);
 		    if (newTransactionsFragment != null){
 		    	newTransactionsFragment.onAccountChanged(itemId);
 		    	//if we do not return, the transactions list fragment could also be found (although it's not visible)
-		    	return true; 
+		    	return true;
 		    }
-		    
+
 			TransactionsListFragment transactionsListFragment = (TransactionsListFragment) fragmentManager
-					.findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);						
+					.findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);
 			if (transactionsListFragment != null) {
 				transactionsListFragment.refreshList(itemId);
-			}
-				
-		    return true;
+            }
+
+              AccountsListFragment subAccountsListFragment = (AccountsListFragment) fragmentManager
+                      .findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+              if (subAccountsListFragment != null) {
+                  subAccountsListFragment.refreshList(itemId);
+              } else {
+                  subAccountsListFragment = new AccountsListFragment();
+                  Bundle args = new Bundle();
+                  args.putLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mAccountId);
+                  subAccountsListFragment.setArguments(args);
+                  FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
+                  fragmentTransaction.replace(R.id.sub_accounts_container, subAccountsListFragment, AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+                  fragmentTransaction.commit();
+              }
+
+              return true;
 		  }
 	};
 
@@ -114,6 +137,10 @@ protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_transactions);
 
+        mSectionHeaderSubAccounts = (TextView) findViewById(R.id.section_header_sub_accounts);
+        mSectionHeaderTransactions = (TextView) findViewById(R.id.section_header_transactions);
+        mSubAccountsContainer = findViewById(R.id.sub_accounts_container);
+
 		final Intent intent = getIntent();
 		mAccountId = intent.getLongExtra(
 				TransactionsListFragment.SELECTED_ACCOUNT_ID, -1);
@@ -123,36 +150,24 @@ protected void onCreate(Bundle savedInstanceState) {
 		if (intent.getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {
 			long transactionId = intent.getLongExtra(
 					NewTransactionFragment.SELECTED_TRANSACTION_ID, -1);
-			if (transactionId <= 0) {
-				createNewTransaction(mAccountId);
-			} else {
-				editTransaction(transactionId);
-			}
-		} else {	//load the transactions list					
-			FragmentManager fragmentManager = getSupportFragmentManager();
-			TransactionsListFragment transactionsListFragment = (TransactionsListFragment) fragmentManager
-					.findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);
-			
-			FragmentTransaction fragmentTransaction = fragmentManager
-					.beginTransaction();
-			transactionsListFragment = new TransactionsListFragment();
-			Bundle args = new Bundle();
-			args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID,
-					mAccountId);
-			transactionsListFragment.setArguments(args);
-			Log.i(TAG, "Opening transactions for account id " +  mAccountId);
-
-			fragmentTransaction.replace(R.id.fragment_container,
-					transactionsListFragment, FRAGMENT_TRANSACTIONS_LIST);
-						
-			fragmentTransaction.commit();
+            Bundle args = new Bundle();
+            if (transactionId > 0) {
+                mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
+                args.putLong(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
+            } else {
+                mSectionHeaderTransactions.setText(R.string.title_add_transaction);
+                args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
+            }
+            showTransactionFormFragment(args);
+        } else {	//load the transactions list
+            showTransactionsList();
 		}
 
 		// done creating, activity now running
 		mActivityRunning = true;
 	}
 
-	/**
+    /**
 	 * Set up action bar navigation list and listener callbacks
 	 */
 	private void setupActionBarNavigation() {
@@ -193,8 +208,27 @@ public void updateNavigationSelection() {
 		} while (accountsCursor.moveToNext());
 
 	}
-	
-	@Override
+
+    /**
+     * Toggles visibility of the sub-accounts fragment depending on if there are sub-accounts to display or not.
+     */
+    public void updateSubAccountsView() {
+        final String action = getIntent().getAction();
+        if (action != null && action.equals(Intent.ACTION_INSERT_OR_EDIT))
+            return;
+
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(TransactionsActivity.this);
+        if (accountsDbAdapter.getSubAccountCount(mAccountId) > 0) {
+            mSectionHeaderSubAccounts.setVisibility(View.VISIBLE);
+            mSubAccountsContainer.setVisibility(View.VISIBLE);
+        } else {
+            mSectionHeaderSubAccounts.setVisibility(View.GONE);
+            mSubAccountsContainer.setVisibility(View.GONE);
+        }
+        accountsDbAdapter.close();
+    }
+
+    @Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
 		case android.R.id.home:
@@ -244,41 +278,47 @@ public void onNewTransactionClick(View v){
 	 * Show list of transactions. Loads {@link TransactionsListFragment} 
 	 */
 	protected void showTransactionsList(){
-		FragmentManager fragmentManager = getSupportFragmentManager();
+        FragmentManager fragmentManager = getSupportFragmentManager();
 
-		TransactionsListFragment transactionsListFragment = (TransactionsListFragment) fragmentManager
-				.findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);
-
-		if (transactionsListFragment == null) {
-			FragmentTransaction fragmentTransaction = fragmentManager
-					.beginTransaction();
-			transactionsListFragment = new TransactionsListFragment();
-			Bundle args = new Bundle();
-			args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID,
-					mAccountId);
-			transactionsListFragment.setArguments(args);
-			Log.i(TAG, "Opening transactions for account id " +  mAccountId);
-
-			fragmentTransaction.add(R.id.fragment_container,
-					transactionsListFragment, FRAGMENT_TRANSACTIONS_LIST);
-						
-			fragmentTransaction.commit();
-		}
+        FragmentTransaction fragmentTransaction = fragmentManager
+                .beginTransaction();
+
+        if (mAccountsDbAdapter.getSubAccountCount(mAccountId) > 0){
+            mSubAccountsContainer.setVisibility(View.VISIBLE);
+            mSectionHeaderSubAccounts.setVisibility(View.VISIBLE);
+            AccountsListFragment subAccountsListFragment = new AccountsListFragment();
+            Bundle args = new Bundle();
+            args.putLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mAccountId);
+            subAccountsListFragment.setArguments(args);
+            fragmentTransaction.replace(R.id.sub_accounts_container, subAccountsListFragment, AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+        }
+
+        TransactionsListFragment transactionsListFragment = new TransactionsListFragment();
+        Bundle args = new Bundle();
+        args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID,
+                mAccountId);
+        transactionsListFragment.setArguments(args);
+        Log.i(TAG, "Opening transactions for account id " +  mAccountId);
+
+        fragmentTransaction.replace(R.id.transactions_container,
+                transactionsListFragment, FRAGMENT_TRANSACTIONS_LIST);
+
+        fragmentTransaction.commit();
 	}
 	
 	/**
 	 * Loads the transaction insert/edit fragment and passes the arguments
 	 * @param args Bundle arguments to be passed to the fragment
 	 */
-	private void showTransactionEditFragment(Bundle args){
+	private void showTransactionFormFragment(Bundle args){
 		FragmentManager fragmentManager = getSupportFragmentManager();
 		FragmentTransaction fragmentTransaction = fragmentManager
 				.beginTransaction();
 				
 		NewTransactionFragment newTransactionFragment = new NewTransactionFragment();	
 		newTransactionFragment.setArguments(args);
-		
-		fragmentTransaction.replace(R.id.fragment_container,
+
+		fragmentTransaction.add(R.id.fragment_container,
 				newTransactionFragment, TransactionsActivity.FRAGMENT_NEW_TRANSACTION);
 		
 		if (mActivityRunning)
@@ -288,15 +328,26 @@ private void showTransactionEditFragment(Bundle args){
 	
 	@Override
 	public void createNewTransaction(long accountRowId) {
-		Bundle args = new Bundle();
-		args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountRowId);		
-		showTransactionEditFragment(args);
+        Intent createTransactionIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
+        createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+        createTransactionIntent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountRowId);
+        startActivity(createTransactionIntent);
 	}
 
 	@Override
 	public void editTransaction(long transactionId){
-		Bundle args = new Bundle();
-		args.putLong(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
-		showTransactionEditFragment(args);
+        Intent createTransactionIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
+        createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+        createTransactionIntent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
+        createTransactionIntent.putExtra(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
+        startActivity(createTransactionIntent);
 	}
+
+    @Override
+    public void accountSelected(long accountRowId) {
+        Intent restartIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
+        restartIntent.setAction(Intent.ACTION_VIEW);
+        restartIntent.putExtra(TransactionsListFragment.SELECTED_ACCOUNT_ID, accountRowId);
+        startActivity(restartIntent);
+    }
 }
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index 13e78d60..70ddbe95 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -23,10 +23,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Money;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseCursorLoader;
-import org.gnucash.android.db.DatabaseHelper;
-import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.db.*;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.OnTransactionClickedListener;
 
@@ -215,8 +212,10 @@ public void refreshList(long accountId){
 	
 	public void refreshList(){
 		getLoaderManager().restartLoader(0, null, this);
-		
-		Money sum = mTransactionsDbAdapter.getTransactionsSum(mAccountID);		
+
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
+		Money sum = accountsDbAdapter.getAccountBalance(mAccountID);// mTransactionsDbAdapter.getTransactionsSum(mAccountID);
+        accountsDbAdapter.close();
 		mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
 		mSumTextView.setText(sum.formattedString(Locale.getDefault()));
 		if (sum.isNegative())
