From bb18b367b9c8d789ae6f9bcda74874537d328de2 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 7 Sep 2014 12:23:38 +0800
Subject: [PATCH] Export to GncXml clean up

Move all export code from db adapter to exporter.
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 108 ---------
 .../gnucash/android/db/TransactionsDbAdapter.java  | 175 +-------------
 .../gnucash/android/export/xml/GncXmlExporter.java | 260 ++++++++++++++++++++-
 3 files changed, 264 insertions(+), 279 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 52015246..4aa6385a 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1060,112 +1060,4 @@ public int deleteAllRecords(){
         mDb.delete(SplitEntry.TABLE_NAME, null, null);
         return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
-
-    /**
-     * Export set of accounts in GncXML format
-     * @param condition condition to select accounts
-     * @param orderBy       how accounts are ordered
-     * @param xmlSerializer XmlSerializer object to write the XML output
-     * @return export successful
-     */
-    public void exportAccountsToGncXML(XmlSerializer xmlSerializer, String condition, String orderBy) throws IOException{
-        Cursor cursor = fetchAccounts(null, null);
-        while(cursor.moveToNext())
-        {
-            // write account
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-            // account name
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_NAME);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME)));
-            xmlSerializer.endTag(null,GncXmlHelper.TAG_NAME);
-            // account guid
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCT_ID);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID)));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCT_ID);
-            // account type
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_TYPE);
-            String acct_type = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE));
-            xmlSerializer.text(acct_type);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TYPE);
-            // commodity
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-            xmlSerializer.text("ISO4217");
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-            String acctCurrencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
-            xmlSerializer.text(acctCurrencyCode);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
-            // commodity scu
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
-            xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
-            // account description
-            // this is optional in Gnc XML, and currently not in the db, so description node
-            // is omitted
-            //
-            // account slots, color, placeholder, default transfer account, favorite
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.text(GncXmlHelper.KEY_PLACEHOLDER);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-            xmlSerializer.text(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) != 0));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-
-            String color = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
-            if (color != null && color.length() > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.text(GncXmlHelper.KEY_COLOR);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                xmlSerializer.text(color);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            }
-
-            String defaultTransferAcctUUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
-            if (defaultTransferAcctUUID != null && defaultTransferAcctUUID.length() > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.text(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                xmlSerializer.text(defaultTransferAcctUUID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            }
-
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.text(GncXmlHelper.KEY_FAVORITE);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-            xmlSerializer.text(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) != 0));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
-
-            // parent uid
-            String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
-            if (acct_type != "ROOT" && parentUID != null && parentUID.length() > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_PARENT_UID);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                xmlSerializer.text(parentUID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_PARENT_UID);
-            }
-            else
-            {
-                Log.d("export", "root account : " + cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID)));
-            }
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT);
-        }
-        cursor.close();
-    }
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 7dd76f10..61d7e544 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -26,16 +26,11 @@
 import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.*;
-import org.xmlpull.v1.XmlSerializer;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
 
-import java.io.IOException;
-import java.math.BigDecimal;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.List;
 
 /**
@@ -246,171 +241,13 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
-    public void exportTransactionsWithSplitsToGncXML(
-            XmlSerializer xmlSerializer,
-            String condition) throws IOException{
-        Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
-                        " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID,
-                new String[]{
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_UID + " AS trans_uid",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_NOTES + " AS trans_notes",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS trans_recur",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_UID + " AS split_uid",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_MEMO + " AS split_memo",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_TYPE + " AS split_type",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_AMOUNT + " AS split_amount",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"
-                }, condition, null, null, null,
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC , " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
-
-        String lastTrxUID = "";
-        Currency trxCurrency = null;
-        int fractionDigits = 2;
-        BigDecimal denom = new BigDecimal(100);
-        String denomString = "100";
-        int recur = 0;
-        while (cursor.moveToNext()){
-            String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
-            if (!lastTrxUID.equals(curTrxUID)){ // new transaction starts
-                if (!lastTrxUID.equals("")){ // there's an old transaction, close it
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
-                    if (recur > 0) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                        xmlSerializer.text(Integer.toString(recur));
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                    }
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
-                }
-                // new transaction
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRANSACTION);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-                // transaction id
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_ID);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-                xmlSerializer.text(curTrxUID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_ID);
-                // currency
-                String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
-                trxCurrency = Currency.getInstance(currency);
-                fractionDigits = trxCurrency.getDefaultFractionDigits();
-                int denomInt = (int)Math.pow(10, fractionDigits);
-                denom = new BigDecimal(denomInt);
-                denomString = Integer.toString(denomInt);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-                xmlSerializer.text("ISO4217");
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.text(currency);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
-                // date posted
-                String strDate = GncXmlHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time")));
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_POSTED);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.text(strDate);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
-                // date entered
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.text(strDate);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_ENTERED);
-                // description
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
-                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
-                lastTrxUID = curTrxUID;
-                // slots
-                String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
-                boolean exported = cursor.getInt(cursor.getColumnIndexOrThrow("trans_exported")) == 1;
-                if ((notes != null && notes.length() > 0) || !exported) {
-                    xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SLOTS);
-                    if (notes != null && notes.length() > 0) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.text(GncXmlHelper.KEY_NOTES);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                        xmlSerializer.text(notes);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
-                    }
-                    if (!exported) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.text(GncXmlHelper.KEY_EXPORTED);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                        xmlSerializer.text("false");
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
-                    }
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SLOTS);
-                }
-                // recurrence period
-                recur = cursor.getInt(cursor.getColumnIndexOrThrow("trans_recur"));
-                // splits start
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
-            }
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLIT);
-            // split id
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ID);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_uid")));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ID);
-            // memo
-            String memo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
-            if (memo != null && memo.length() > 0){
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
-                xmlSerializer.text(memo);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
-            }
-            // reconciled
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
-            xmlSerializer.text("n");
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
-            // value, in the transaction's currency
-            String trxType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
-            BigDecimal value = new BigDecimal(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")));
-            value = value.multiply(denom);
-            String strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
-            xmlSerializer.text(strValue);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
-            // quantity, in the split account's currency
-            // TODO: multi currency support.
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
-            xmlSerializer.text(strValue);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
-            // account guid
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid")));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLIT);
-        }
-        if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
-            xmlSerializer.endTag(null,GncXmlHelper.TAG_TRN_SPLITS);
-            if (recur > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                xmlSerializer.text(Integer.toString(recur));
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-            }
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
-        }
+    public Cursor fetchTransactionsWithSplits(String [] columns, String condition, String orderBy) {
+        return mDb.query(DatabaseSchema.TransactionEntry.TABLE_NAME + " , " + DatabaseSchema.SplitEntry.TABLE_NAME +
+                        " ON " + DatabaseSchema.TransactionEntry.TABLE_NAME + "." + DatabaseSchema.TransactionEntry.COLUMN_UID +
+                        " = " + DatabaseSchema.SplitEntry.TABLE_NAME + "." + DatabaseSchema.SplitEntry.COLUMN_TRANSACTION_UID,
+                columns, condition, null, null, null,
+                orderBy);
 
-        cursor.close();
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 53a380f0..6bb14329 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -22,6 +22,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
+import static org.gnucash.android.db.DatabaseSchema.*;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
@@ -50,6 +51,8 @@
 import java.io.OutputStreamWriter;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.math.BigDecimal;
+import java.util.ArrayList;
 import java.util.Currency;
 import java.util.List;
 import java.util.UUID;
@@ -192,6 +195,259 @@ public String generateExport() throws ExporterException{
         return stringWriter.toString();
     }
 
+    private void exportSlots(XmlSerializer xmlSerializer,
+                             List<String> slotKey,
+                             List<String> slotType,
+                             List<String> slotValue) throws IOException {
+        if (slotKey == null || slotType == null || slotValue == null ||
+                slotKey.size() == 0 || slotType.size() != slotKey.size() || slotValue.size() != slotKey.size()) {
+            return;
+        }
+        xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+        for (int i = 0; i < slotKey.size(); i++) {
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.text(slotKey.get(i));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, slotType.get(i));
+            xmlSerializer.text(slotValue.get(i));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+        }
+        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+        xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+    }
+
+    private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
+        Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null);
+        while (cursor.moveToNext()) {
+            // write account
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+            // account name
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_NAME);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_NAME)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_NAME);
+            // account guid
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCT_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCT_ID);
+            // account type
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TYPE);
+            String acct_type = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_TYPE));
+            xmlSerializer.text(acct_type);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TYPE);
+            // commodity
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.text("ISO4217");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            String acctCurrencyCode = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_CURRENCY));
+            xmlSerializer.text(acctCurrencyCode);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
+            // commodity scu
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
+            xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
+            // account description
+            // this is optional in Gnc XML, and currently not in the db, so description node
+            // is omitted
+            //
+            // account slots, color, placeholder, default transfer account, favorite
+            ArrayList<String> slotKey = new ArrayList<String>();
+            ArrayList<String> slotType = new ArrayList<String>();
+            ArrayList<String> slotValue = new ArrayList<String>();
+            slotKey.add(GncXmlHelper.KEY_PLACEHOLDER);
+            slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+            slotValue.add(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER)) != 0));
+
+            String color = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_COLOR_CODE));
+            if (color != null && color.length() > 0) {
+                slotKey.add(GncXmlHelper.KEY_COLOR);
+                slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                slotValue.add(color);
+            }
+
+            String defaultTransferAcctUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
+            if (defaultTransferAcctUID != null && defaultTransferAcctUID.length() > 0) {
+                slotKey.add(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT);
+                slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                slotValue.add(defaultTransferAcctUID);
+            }
+
+            slotKey.add(GncXmlHelper.KEY_FAVORITE);
+            slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+            slotValue.add(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_FAVORITE)) != 0));
+            exportSlots(xmlSerializer, slotKey, slotType, slotValue);
+
+            // parent uid
+            String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
+            if (!acct_type.equals("ROOT") && parentUID != null && parentUID.length() > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PARENT_UID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                xmlSerializer.text(parentUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PARENT_UID);
+            } else {
+                Log.d("export", "root account : " + cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID)));
+            }
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT);
+        }
+        cursor.close();
+    }
+
+    public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
+        Cursor cursor = mTransactionsDbAdapter.fetchTransactionsWithSplits(
+                new String[]{
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_UID + " AS trans_uid",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_NOTES + " AS trans_notes",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS trans_recur",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_UID + " AS split_uid",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_MEMO + " AS split_memo",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_TYPE + " AS split_type",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_AMOUNT + " AS split_amount",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"
+                }, null,
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC , " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
+
+        String lastTrxUID = "";
+        Currency trxCurrency = null;
+        int fractionDigits = 2;
+        BigDecimal denom = new BigDecimal(100);
+        String denomString = "100";
+        int recur = 0;
+        while (cursor.moveToNext()){
+            String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+            if (!lastTrxUID.equals(curTrxUID)) { // new transaction starts
+                if (!lastTrxUID.equals("")) { // there's an old transaction, close it
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
+                    if (recur > 0) {
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                        xmlSerializer.text(Integer.toString(recur));
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                    }
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
+                }
+                // new transaction
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRANSACTION);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+                // transaction id
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_ID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+                xmlSerializer.text(curTrxUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_ID);
+                // currency
+                String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                trxCurrency = Currency.getInstance(currency);
+                fractionDigits = trxCurrency.getDefaultFractionDigits();
+                int denomInt = (int) Math.pow(10, fractionDigits);
+                denom = new BigDecimal(denomInt);
+                denomString = Integer.toString(denomInt);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.text("ISO4217");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.text(currency);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
+                // date posted
+                String strDate = GncXmlHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time")));
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_POSTED);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
+                // date entered
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+                // description
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                lastTrxUID = curTrxUID;
+                // slots
+                ArrayList<String> slotKey = new ArrayList<String>();
+                ArrayList<String> slotType = new ArrayList<String>();
+                ArrayList<String> slotValue = new ArrayList<String>();
+
+                String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
+                boolean exported = cursor.getInt(cursor.getColumnIndexOrThrow("trans_exported")) == 1;
+                if (notes != null && notes.length() > 0) {
+                    slotKey.add(GncXmlHelper.KEY_NOTES);
+                    slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                    slotValue.add(notes);
+                }
+                if (!exported) {
+                    slotKey.add(GncXmlHelper.KEY_EXPORTED);
+                    slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                    slotValue.add("false");
+                }
+                exportSlots(xmlSerializer, slotKey, slotType, slotValue);
+                // recurrence period, will be write out when all splits are generated.
+                recur = cursor.getInt(cursor.getColumnIndexOrThrow("trans_recur"));
+                // splits start
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
+            }
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLIT);
+            // split id
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_uid")));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ID);
+            // memo
+            String memo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
+            if (memo != null && memo.length() > 0){
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
+                xmlSerializer.text(memo);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
+            }
+            // reconciled
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
+            xmlSerializer.text("n");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
+            // value, in the transaction's currency
+            String trxType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
+            BigDecimal value = new BigDecimal(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")));
+            value = value.multiply(denom);
+            String strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
+            xmlSerializer.text(strValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
+            // quantity, in the split account's currency
+            // TODO: multi currency support.
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
+            xmlSerializer.text(strValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
+            // account guid
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid")));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLIT);
+        }
+        if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
+            xmlSerializer.endTag(null,GncXmlHelper.TAG_TRN_SPLITS);
+            if (recur > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                xmlSerializer.text(Integer.toString(recur));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+            }
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
+        }
+        cursor.close();
+    }
 
     public void generateExport(Writer writer) throws ExporterException{
         try {
@@ -234,10 +490,10 @@ public void generateExport(Writer writer) throws ExporterException{
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             // accounts. bulk import does not rely on account order
             // the cursor gather account in arbitrary order
-            mAccountsDbAdapter.exportAccountsToGncXML(xmlSerializer, null, null);
+            exportAccounts(xmlSerializer);
 
             // transactions.
-            mTransactionsDbAdapter.exportTransactionsWithSplitsToGncXML(xmlSerializer, null);
+            exportTransactions(xmlSerializer);
 
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_ROOT);
