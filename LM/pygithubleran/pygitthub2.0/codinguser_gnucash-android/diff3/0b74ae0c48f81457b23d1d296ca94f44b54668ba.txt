From 0b74ae0c48f81457b23d1d296ca94f44b54668ba Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 May 2016 17:12:37 +0200
Subject: [PATCH] Fix instrumentation tests to work with multi-book support

Made ReportActivity implement Refreshable
Fix Prices test to account for reducing of the fraction which now occurs
Add basic GitHub issue template
Add instructions for contributing
Upgrade betterpickers library to v2.5.4

FIXME: PieChartReportTest seems to be not detected
---
 .github/CONTRIBUTING.md                            |  31 ++++
 .github/ISSUE_TEMPLATE.md                          |  13 ++
 app/build.gradle                                   |   4 +-
 .../android/test/ui/AccountsActivityTest.java      | 105 +++++--------
 .../android/test/ui/CalculatorEditTextTest.java    |  91 +++++++----
 .../android/test/ui/ExportTransactionsTest.java    |  39 +++--
 .../test/ui/FirstRunWizardActivityTest.java        |   2 +-
 .../android/test/ui/OwnCloudExportTest.java        |  30 +++-
 .../android/test/ui/PieChartReportTest.java        | 113 +++++++++-----
 .../android/test/ui/TransactionsActivityTest.java  | 173 ++++++++++++---------
 .../android/ui/account/AccountsActivity.java       |   1 -
 .../android/ui/export/ExportFormFragment.java      |   1 +
 .../gnucash/android/ui/report/ReportsActivity.java |  22 ++-
 app/src/main/res/layout/cardview_transaction.xml   |   2 +-
 .../android/test/unit/db/PriceDbAdapterTest.java   |   2 +-
 build.gradle                                       |   2 +-
 16 files changed, 387 insertions(+), 244 deletions(-)
 create mode 100644 .github/CONTRIBUTING.md
 create mode 100644 .github/ISSUE_TEMPLATE.md

diff --git a/.github/CONTRIBUTING.md b/.github/CONTRIBUTING.md
new file mode 100644
index 00000000..fbb47355
--- /dev/null
+++ b/.github/CONTRIBUTING.md
@@ -0,0 +1,31 @@
+GnuCash Android is built by people like you! Please [join us](https://github.com/codinguser/gnucash-android).
+
+## Git and Pull requests
+* Contributions are submitted, reviewed, and accepted using Github pull requests. [Read this article](https://help.github.com/articles/using-pull-requests) for some details. We use the _Fork and Pull_ model, as described there.
+* You can maintain your stable installation of GnuCash and test with another installation.
+The two instances of GnuCash Android will live side-by-side on your device and not affect each other. You can install the development version by executing `gradle installDD` inside the root project directory
+* The latest changes are in the `develop` branch.
+* The master branch contains only stable releases.
+  * Pull requests to the `master` branch will be rejected.
+* Make a new branch for every feature you're working on.
+* Try to make clean commits that are easily readable (including descriptive commit messages!)
+* Test before you push make sure all test pass on your machine.
+  * Unit tests can be run with `gradle test`
+  * UI tests can be run with `gradle cDDAT`
+* Make small pull requests that are easy to review but make sure they do add value by themselves.
+
+## Coding style
+* Do write comments. You don't have to comment every line, but if you come up with something thats a bit complex/weird, just leave a comment. Bear in mind that you will probably leave the project at some point and that other people will read your code. Undocumented huge amounts of code are nearly worthless!
+* Please make sure to document every method you write using Javadoc, even if the method seems trivial to you
+  * See [this guide](http://www.oracle.com/technetwork/articles/java/index-137868.html) on how to write good Javadoc comments
+* Don't overengineer. Don't try to solve any possible problem in one step, but try to solve problems as easy as possible and improve the solution over time!
+* Do generalize sooner or later! (if an old solution, quickly hacked together, poses more problems than it solves today, refactor it!)
+* Keep it compatible. Do not introduce changes to the public API, or configurations too lightly. Don't make incompatible changes without good reasons!
+
+## Translation
+* Tranlations for GnuCash Android are managed using [CrowdIn](crowdin.com/project/gnucash-android)
+* You can sign up for an account and create/vote for translations.
+* Translations will not be accepted via pull requests
+
+## Documentation
+* Documentation should be kept up-to-date. This means, whenever you add a new API method, add a new hook or change the database model, pack the relevant changes to the docs in the same pull request.
diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
new file mode 100644
index 00000000..a1624715
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE.md
@@ -0,0 +1,13 @@
+#### Expected behaviour
+
+
+#### Actual behaviour
+
+
+#### Steps to reproduce the behaviour
+1. <!-- List the detail steps to reproduce the problem here -->
+
+#### Software specifications
+* GnuCash Android version:
+* System Android version:
+* Device type:
diff --git a/app/build.gradle b/app/build.gradle
index af65fc6a..9e0ae25c 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -7,7 +7,7 @@ apply plugin: 'io.fabric'
 def versionMajor = 2
 def versionMinor = 1
 def versionPatch = 0
-def versionBuild = 2
+def versionBuild = 0
 
 def buildTime() {
     def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
@@ -205,7 +205,7 @@ dependencies {
             'com.android.support:preference-v7:'    + androidSupportVersion,
             'com.android.support:recyclerview-v7:'  + androidSupportVersion,
             'com.viewpagerindicator:library:2.4.1@aar',
-            'com.code-troopers.betterpickers:library:2.5.3',
+            'com.code-troopers.betterpickers:library:2.5.4',
             'org.jraf:android-switch-backport:2.0.1@aar',
             'com.github.PhilJay:MPAndroidChart:v2.1.3',
             'joda-time:joda-time:2.7',
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 2f84027a..73eecf12 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -24,13 +24,11 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Build;
 import android.preference.PreferenceManager;
-import android.support.test.InstrumentationRegistry;
 import android.support.test.espresso.Espresso;
 import android.support.test.espresso.matcher.ViewMatchers;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 import android.support.v4.app.Fragment;
-import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
 
 import com.kobakei.ratethisapp.RateThisApp;
@@ -77,7 +75,6 @@
 import static android.support.test.espresso.assertion.ViewAssertions.doesNotExist;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.ViewMatchers.hasDescendant;
-import static android.support.test.espresso.matcher.ViewMatchers.hasSibling;
 import static android.support.test.espresso.matcher.ViewMatchers.isChecked;
 import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
 import static android.support.test.espresso.matcher.ViewMatchers.isEnabled;
@@ -88,8 +85,6 @@
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
@@ -138,9 +133,9 @@ public static void prepTest(){
             Log.e("AccountsActivityTest", "Error getting database: " + e.getMessage());
             mDb = mDbHelper.getReadableDatabase();
         }
-        mSplitsDbAdapter        = new SplitsDbAdapter(mDb);
-        mTransactionsDbAdapter  = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        mAccountsDbAdapter      = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+        mSplitsDbAdapter        = SplitsDbAdapter.getInstance();
+        mTransactionsDbAdapter  = TransactionsDbAdapter.getInstance();
+        mAccountsDbAdapter      = AccountsDbAdapter.getInstance();
         CommoditiesDbAdapter commoditiesDbAdapter = new CommoditiesDbAdapter(mDb); //initialize commodity constants
     }
 
@@ -156,31 +151,7 @@ public void setUp() throws Exception {
         simpleAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
         mAccountsDbAdapter.addRecord(simpleAccount, DatabaseAdapter.UpdateMethod.insert);
 
-//        Account rootAccount = new Account(ROOT_ACCOUNT_NAME);
-//        rootAccount.setUID(ROOT_ACCOUNT_UID);
-//        rootAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
-//        rootAccount.setPlaceHolderFlag(true);
-//        rootAccount.setAccountType(AccountType.ROOT);
-//        rootAccount.setHidden(true);
-//        mAccountsDbAdapter.addRecord(rootAccount);
-//
-//        Account parentAccount = new Account(PARENT_ACCOUNT_NAME);
-//        parentAccount.setUID(PARENT_ACCOUNT_UID);
-//        parentAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
-//        parentAccount.setAccountType(AccountType.LIABILITY);
-//        parentAccount.setParentUID(ROOT_ACCOUNT_UID);
-//        mAccountsDbAdapter.addRecord(parentAccount);
-//
-//        Account childAccount = new Account(CHILD_ACCOUNT_NAME);
-//        childAccount.setUID(CHILD_ACCOUNT_UID);
-//        childAccount.setCommodity(Commodity.getInstance(ACCOUNTS_CURRENCY_CODE));
-//        childAccount.setAccountType(AccountType.LIABILITY);
-//        childAccount.setParentUID(PARENT_ACCOUNT_UID);
-//        mAccountsDbAdapter.addRecord(childAccount);
-//
-//        refreshAccountsList();
-//        List<Account> accounts = mAccountsDbAdapter.getAllRecords();
-//        assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(5L);
+        refreshAccountsList();
     }
 
 
@@ -249,10 +220,6 @@ public void testCreateAccount(){
                 .check(matches(isNotChecked()))
                 .perform(click());
 
-//        onView(withId(R.id.checkbox_parent_account)).perform(scrollTo())
-//                .check(matches(allOf(isDisplayed(), isNotChecked())))
-//                .perform(click());
-
         onView(withId(R.id.menu_save)).perform(click());
 
         List<Account> accounts = mAccountsDbAdapter.getAllRecords();
@@ -330,14 +297,17 @@ public void shouldHideParentAccountViewWhenNoParentsExist(){
 
     @Test
     public void testEditAccount(){
-        String editedAccountName = "An Edited Account";
-        sleep(2000);
+        refreshAccountsList();
+
         onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
                      withId(R.id.options_menu))).perform(click());
-        onView(withText(R.string.title_edit_account)).perform(click());
-
+//        onView(withId(R.id.options_menu)).perform(click()); //there should only be one account visible
+        sleep(1000);
+        onView(withText(R.string.title_edit_account)).check(matches(isDisplayed())).perform(click());
+//        onView(withId(R.id.context_menu_edit_accounts)).check(matches(isDisplayed())).perform(click());
         onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
 
+        String editedAccountName = "An Edited Account";
         onView(withId(R.id.input_account_name)).perform(clearText()).perform(typeText(editedAccountName));
 
         onView(withId(R.id.menu_save)).perform(click());
@@ -389,31 +359,30 @@ private void sleep(long millis) {
         }
     }
 
-    //TODO: Add test for moving content of accounts before deleting it
-    @Test(expected = IllegalArgumentException.class)
     public void testDeleteSimpleAccount() {
-        //sleep(2000);
+        refreshAccountsList();
+        assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(2);
         onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
                 withId(R.id.options_menu))).perform(click());
-//        onView(allOf(hasSibling(withText(SIMPLE_ACCOUNT_NAME)), withId(R.id.options_menu))).perform(click());
 
         onView(withText(R.string.menu_delete)).perform(click());
-        sleep(2000);
-        //the account has no sub-accounts
-//        onView(withId(R.id.accounts_options)).check(matches(not(isDisplayed())));
-//        onView(withId(R.id.transactions_options)).check(matches(isDisplayed()));
 
-//        onView(withText(R.string.label_delete_transactions)).perform(click());
-//        onView(withId(R.id.btn_save)).perform(click());
+        assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(1);
 
-        //should throw expected exception
-        mAccountsDbAdapter.getID(SIMPLE_ACCOUNT_UID);
+        List<Account> accounts = mAccountsDbAdapter.getAllRecords();
+        assertThat(accounts).hasSize(0); //root account is never returned
     }
 
     @Test
     public void testDeleteAccountWithSubaccounts() {
-        sleep(2000);
-        onView(withText(SIMPLE_ACCOUNT_NAME)).perform(click());
+        refreshAccountsList();
+        Account account = new Account("Sub-account");
+        account.setParentUID(SIMPLE_ACCOUNT_UID);
+        account.setUID(CHILD_ACCOUNT_UID);
+        mAccountsDbAdapter.addRecord(account);
+
+        refreshAccountsList();
+
         onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
                      withId(R.id.options_menu))).perform(click());
         onView(withText(R.string.menu_delete)).perform(click());
@@ -422,23 +391,25 @@ public void testDeleteAccountWithSubaccounts() {
                      withId(R.id.radio_delete))).perform(click());
         onView(withText(R.string.alert_dialog_ok_delete)).perform(click());
 
-        assertThat(!accountExists(PARENT_ACCOUNT_UID)).isTrue();
-        assertThat(!accountExists(CHILD_ACCOUNT_UID)).isTrue();
+        assertThat(accountExists(SIMPLE_ACCOUNT_UID)).isFalse();
+        assertThat(accountExists(CHILD_ACCOUNT_UID)).isFalse();
     }
 
     @Test
     public void testDeleteAccountMovingSubaccounts() {
-        sleep(2000);
+        long accountCount = mAccountsDbAdapter.getRecordsCount();
         Account subAccount = new Account("Child account");
         subAccount.setParentUID(SIMPLE_ACCOUNT_UID);
 
         Account tranferAcct = new Account("Other account");
+        tranferAcct.setCurrencyCode(ACCOUNTS_CURRENCY_CODE);
         mAccountsDbAdapter.addRecord(subAccount, DatabaseAdapter.UpdateMethod.insert);
         mAccountsDbAdapter.addRecord(tranferAcct, DatabaseAdapter.UpdateMethod.insert);
 
+        assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(accountCount+2);
+
         refreshAccountsList();
 
-//        onView(withText(SIMPLE_ACCOUNT_NAME)).perform(click());
         onView(allOf(withParent(hasDescendant(withText(SIMPLE_ACCOUNT_NAME))),
                 withId(R.id.options_menu))).perform(click());
         onView(withText(R.string.menu_delete)).perform(click());
@@ -448,15 +419,21 @@ public void testDeleteAccountMovingSubaccounts() {
 
         onView(withText(R.string.alert_dialog_ok_delete)).perform(click());
 
-        assertThat(!accountExists(SIMPLE_ACCOUNT_UID)).isTrue();
-//        assertTrue("Parent account has not been deleted.", );
+        assertThat(accountExists(SIMPLE_ACCOUNT_UID)).isFalse();
         assertThat(accountExists(subAccount.getUID())).isTrue();
-//        assertTrue("Child account should not have been deleted.", );
+
+        String newParentUID = mAccountsDbAdapter.getParentAccountUID(subAccount.getUID());
+        assertThat(newParentUID).isEqualTo(tranferAcct.getUID());
     }
 
-    private boolean accountExists(String accountId) {
+    /**
+     * Checks if an account exists in the database
+     * @param accountUID GUID of the account
+     * @return {@code true} if the account exists, {@code false} otherwise
+     */
+    private boolean accountExists(String accountUID) {
         try {
-            mAccountsDbAdapter.getID(accountId);
+            mAccountsDbAdapter.getID(accountUID);
             return true;
         } catch (IllegalArgumentException e) {
             return false;
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/CalculatorEditTextTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/CalculatorEditTextTest.java
index 89c88dd4..08c68731 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/CalculatorEditTextTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/CalculatorEditTextTest.java
@@ -19,23 +19,29 @@
 import android.content.Intent;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.test.InstrumentationRegistry;
+import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
 
 import org.gnucash.android.R;
-import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Commodity;
+import org.gnucash.android.test.ui.util.DisableAnimationsRule;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.junit.After;
+import org.junit.AfterClass;
 import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.ClassRule;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -49,8 +55,7 @@
 
 // TODO: Find out how to press the keys in the KeyboardView.
 @RunWith(AndroidJUnit4.class)
-public class CalculatorEditTextTest extends
-		ActivityInstrumentationTestCase2<TransactionsActivity> {
+public class CalculatorEditTextTest {
 	private static final String DUMMY_ACCOUNT_UID = "transactions-account";
 	private static final String DUMMY_ACCOUNT_NAME = "Transactions Account";
 
@@ -58,52 +63,68 @@
     private static final String TRANSFER_ACCOUNT_UID    = "transfer_account";
     public static final String CURRENCY_CODE = "USD";
 
-    private SQLiteDatabase mDb;
-    private DatabaseHelper mDbHelper;
-    private AccountsDbAdapter mAccountsDbAdapter;
-    private TransactionsDbAdapter mTransactionsDbAdapter;
-    private SplitsDbAdapter mSplitsDbAdapter;
+    private static DatabaseHelper mDbHelper;
+    private static AccountsDbAdapter mAccountsDbAdapter;
+    private static TransactionsDbAdapter mTransactionsDbAdapter;
+    private static SplitsDbAdapter mSplitsDbAdapter;
 	private TransactionsActivity mTransactionsActivity;
 
 	public CalculatorEditTextTest() {
-		super(TransactionsActivity.class);
 	}
-	
-	@Override
-	@Before
-	public void setUp() throws Exception {
-		super.setUp();
-		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
-		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
 
+    @ClassRule
+    public static DisableAnimationsRule disableAnimationsRule = new DisableAnimationsRule();
+
+    @Rule
+    public ActivityTestRule<TransactionsActivity> mActivityRule =
+            new ActivityTestRule<>(TransactionsActivity.class, true, false);
 
-        mDbHelper = new DatabaseHelper(getInstrumentation().getTargetContext(), DatabaseSchema.LEGACY_DATABASE_NAME);
+
+    @BeforeClass
+    public static void prepTestCase(){
+        String activeBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
+        mDbHelper = new DatabaseHelper(GnuCashApplication.getAppContext(), activeBookUID);
+
+        SQLiteDatabase mDb;
         try {
             mDb = mDbHelper.getWritableDatabase();
         } catch (SQLException e) {
-            Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
+            Log.e("CalculatorEditTextTest", "Error getting database: " + e.getMessage());
             mDb = mDbHelper.getReadableDatabase();
         }
-        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
-        mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-		mAccountsDbAdapter.deleteAllRecords();
+//        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
+//        mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
+//        mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+
+        mSplitsDbAdapter        = SplitsDbAdapter.getInstance();
+        mTransactionsDbAdapter  = TransactionsDbAdapter.getInstance();
+        mAccountsDbAdapter      = AccountsDbAdapter.getInstance();
+
+        AccountsActivityTest.preventFirstRunDialogs(GnuCashApplication.getAppContext());
+    }
+
+    @Before
+	public void setUp() throws Exception {
+
+        mAccountsDbAdapter.deleteAllRecords();
 
-        Account account = new Account(DUMMY_ACCOUNT_NAME);
+        CommoditiesDbAdapter commoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
+        Commodity commodity = commoditiesDbAdapter.getCommodity(CURRENCY_CODE);
+
+        Account account = new Account(DUMMY_ACCOUNT_NAME, commodity);
         account.setUID(DUMMY_ACCOUNT_UID);
-        account.setCommodity(Commodity.getInstance(CURRENCY_CODE));
 
-        Account account2 = new Account(TRANSFER_ACCOUNT_NAME);
+        Account account2 = new Account(TRANSFER_ACCOUNT_NAME, commodity);
         account2.setUID(TRANSFER_ACCOUNT_UID);
-        account2.setCommodity(Commodity.getInstance(CURRENCY_CODE));
 
         mAccountsDbAdapter.addRecord(account);
         mAccountsDbAdapter.addRecord(account2);
 
         Intent intent = new Intent(Intent.ACTION_VIEW);
         intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
-        setActivityIntent(intent);
-		mTransactionsActivity = getActivity();
+        mActivityRule.launchActivity(intent);
+        mTransactionsActivity = mActivityRule.getActivity();
+
 	}
 
     /**
@@ -138,11 +159,15 @@ private void clickOnView(int viewId){
 		onView(withId(viewId)).perform(click());
 	}
 
-	@Override
 	@After
 	public void tearDown() throws Exception {
 		if (mTransactionsActivity != null)
             mTransactionsActivity.finish();
-		super.tearDown();
 	}
+
+    @AfterClass
+    public static void cleanup(){
+        if (mDbHelper != null)
+            mDbHelper.close();
+    }
 }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 05e7c17b..f14b93fd 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -27,6 +27,7 @@
 import android.support.test.espresso.contrib.DrawerActions;
 import android.support.test.espresso.matcher.ViewMatchers;
 import android.support.test.runner.AndroidJUnit4;
+import android.support.v7.preference.PreferenceManager;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
 import android.widget.CompoundButton;
@@ -38,13 +39,13 @@
 import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.adapter.DatabaseAdapter;
-import org.gnucash.android.db.adapter.RecurrenceDbAdapter;
 import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.ScheduledAction;
@@ -95,7 +96,7 @@
     public ExportTransactionsTest() {
 		super(AccountsActivity.class);
 	}
-	
+
 	@Override
 	@Before
 	public void setUp() throws Exception {
@@ -112,13 +113,20 @@ public void setUp() throws Exception {
             Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
             mDb = mDbHelper.getReadableDatabase();
         }
-        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
-        mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-		mAccountsDbAdapter.deleteAllRecords();
 
+		mSplitsDbAdapter        = SplitsDbAdapter.getInstance();
+		mTransactionsDbAdapter  = TransactionsDbAdapter.getInstance();
+		mAccountsDbAdapter      = AccountsDbAdapter.getInstance();
+
+		//this call initializes the static variables like DEFAULT_COMMODITY which are used implicitly by accounts/transactions
+		@SuppressWarnings("unused")
+		CommoditiesDbAdapter commoditiesDbAdapter = new CommoditiesDbAdapter(mDb);
 		String currencyCode = GnuCashApplication.getDefaultCurrencyCode();
-		Account account = new Account("Exportable", new CommoditiesDbAdapter(mDb).getCommodity(currencyCode));
+		Commodity.DEFAULT_COMMODITY = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
+
+		mAccountsDbAdapter.deleteAllRecords();
+
+		Account account = new Account("Exportable");
 		Transaction transaction = new Transaction("Pizza");
 		transaction.setNote("What up?");
 		transaction.setTime(System.currentTimeMillis());
@@ -220,14 +228,21 @@ public void testExport(ExportFormat format){
 	public void testDeleteTransactionsAfterExport(){
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isGreaterThan(0);
 
-		PreferenceActivity.getActiveBookSharedPreferences(getActivity()).edit()
-				.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), true).commit();
+		SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(getActivity()).edit(); //PreferenceActivity.getActiveBookSharedPreferences(getActivity()).edit();
+		editor.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), true);
+		editor.commit();
+
+		PreferenceActivity.getActiveBookSharedPreferences(getActivity())
+				.edit()
+				.putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), true)
+				.apply();
 
 		testExport(ExportFormat.XML);
 
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(0);
-		PreferenceActivity.getActiveBookSharedPreferences(getActivity()).edit()
-				.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), false).commit();
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactions();
+
+		editor.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), false).commit();
 	}
 
 	/**
@@ -247,7 +262,7 @@ public void testShouldCreateExportSchedule(){
 		onView(withText("OK")).perform(click());
 
 		onView(withId(R.id.menu_save)).perform(click());
-		ScheduledActionDbAdapter scheduledactionDbAdapter = new ScheduledActionDbAdapter(mDb, new RecurrenceDbAdapter(mDb));
+		ScheduledActionDbAdapter scheduledactionDbAdapter = ScheduledActionDbAdapter.getInstance(); //new ScheduledActionDbAdapter(mDb, new RecurrenceDbAdapter(mDb));
 		List<ScheduledAction> scheduledActions = scheduledactionDbAdapter.getAllEnabledScheduledActions();
 		assertThat(scheduledActions)
 				.hasSize(1)
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/FirstRunWizardActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/FirstRunWizardActivityTest.java
index 4d25d3f1..2e033485 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/FirstRunWizardActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/FirstRunWizardActivityTest.java
@@ -24,8 +24,8 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.BaseModel;
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
index 4bff7ede..6bfffe51 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
@@ -25,11 +25,16 @@
 import android.support.test.runner.AndroidJUnit4;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseHelper;
-import org.gnucash.android.db.adapter.*;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -45,10 +50,16 @@
 
 import static android.support.test.InstrumentationRegistry.getInstrumentation;
 import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.action.ViewActions.*;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.closeSoftKeyboard;
+import static android.support.test.espresso.action.ViewActions.swipeUp;
+import static android.support.test.espresso.action.ViewActions.typeText;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
-import static android.support.test.espresso.matcher.ViewMatchers.*;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertTrue;
 import static org.gnucash.android.test.ui.AccountsActivityTest.preventFirstRunDialogs;
@@ -83,6 +94,7 @@
     public ActivityTestRule<AccountsActivity> mActivityRule = new ActivityTestRule<>(
             AccountsActivity.class);
 
+
     @Before
     public void setUp() throws Exception {
 
@@ -102,14 +114,16 @@ public void setUp() throws Exception {
             Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
             mDb = mDbHelper.getReadableDatabase();
         }
-        SplitsDbAdapter mSplitsDbAdapter;
-        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
-        TransactionsDbAdapter mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        AccountsDbAdapter mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+
+        @SuppressWarnings("unused") //this call initializes constants in Commodity
+        CommoditiesDbAdapter commoditiesDbAdapter = new CommoditiesDbAdapter(mDb);
+        AccountsDbAdapter mAccountsDbAdapter = AccountsDbAdapter.getInstance();
         mAccountsDbAdapter.deleteAllRecords();
 
         String currencyCode = GnuCashApplication.getDefaultCurrencyCode();
-        Account account = new Account("ownCloud", new CommoditiesDbAdapter(mDb).getCommodity(currencyCode));
+        Commodity.DEFAULT_COMMODITY = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
+
+        Account account = new Account("ownCloud");
         Transaction transaction = new Transaction("birds");
         transaction.setTime(System.currentTimeMillis());
         Split split = new Split(new Money("11.11", currencyCode), account.getUID());
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index cb6970f8..a3490a54 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -16,24 +16,24 @@
 
 package org.gnucash.android.test.ui;
 
+import android.content.Context;
 import android.content.Intent;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.test.InstrumentationRegistry;
 import android.support.test.espresso.ViewAction;
 import android.support.test.espresso.action.CoordinatesProvider;
 import android.support.test.espresso.action.GeneralClickAction;
 import android.support.test.espresso.action.Press;
 import android.support.test.espresso.action.Tap;
+import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
 import android.view.View;
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.adapter.DatabaseAdapter;
@@ -46,26 +46,33 @@
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
+import org.gnucash.android.test.ui.util.DisableAnimationsRule;
 import org.gnucash.android.ui.report.BaseReportFragment;
-import org.gnucash.android.ui.report.piechart.PieChartFragment;
 import org.gnucash.android.ui.report.ReportsActivity;
+import org.gnucash.android.ui.report.piechart.PieChartFragment;
 import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.joda.time.LocalDateTime;
 import org.junit.After;
+import org.junit.AfterClass;
 import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.ClassRule;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
+import java.util.Locale;
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.action.ViewActions.click;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.ViewMatchers.withId;
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(AndroidJUnit4.class)
-public class PieChartReportTest extends ActivityInstrumentationTestCase2<ReportsActivity> {
+public class PieChartReportTest {
 
     public static final String TAG = PieChartReportTest.class.getName();
 
@@ -91,55 +98,59 @@
 
     public static Commodity CURRENCY;
 
-    private AccountsDbAdapter mAccountsDbAdapter;
-    private TransactionsDbAdapter mTransactionsDbAdapter;
+    private static AccountsDbAdapter mAccountsDbAdapter;
+    private static TransactionsDbAdapter mTransactionsDbAdapter;
 
     private ReportsActivity mReportsActivity;
 
-	public PieChartReportTest() {
-		super(ReportsActivity.class);
-        CURRENCY = new Commodity("US Dollars", "USD", 100);
-	}
-	
-	@Override
-	@Before
-	public void setUp() throws Exception {
-		super.setUp();
-		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+    @Rule
+    public ActivityTestRule<ReportsActivity> mActivityRule =
+            new ActivityTestRule<>(ReportsActivity.class, true, false);
 
-        // creates default accounts
-        String bookUID = GncXmlImporter.parse(GnuCashApplication.getAppContext().getResources().openRawResource(R.raw.default_accounts));
-        BooksDbAdapter.getInstance().setActive(bookUID);
+    @ClassRule
+    public static DisableAnimationsRule disableAnimationsRule = new DisableAnimationsRule();
 
-        mReportsActivity = getActivity();
+    private static String testBookUID;
+    private static String oldActiveBookUID;
 
-        SQLiteDatabase db;
-        DatabaseHelper dbHelper = new DatabaseHelper(mReportsActivity, bookUID);
-        try {
-            db = dbHelper.getWritableDatabase();
-        } catch (SQLException e) {
-            Log.e(TAG, "Error getting database: " + e.getMessage());
-            db = dbHelper.getReadableDatabase();
-        }
-        mTransactionsDbAdapter = new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
-        mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
+
+    public PieChartReportTest() {
+        //nothing to se here, move along
+        CURRENCY = new Commodity("US Dollars", "USD", 100);
+	}
+
+    @BeforeClass
+    public static void prepareTestCase() throws Exception {
         mAccountsDbAdapter.deleteAllRecords();
+        Context context = GnuCashApplication.getAppContext();
+        oldActiveBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
+        testBookUID = GncXmlImporter.parse(context.getResources().openRawResource(R.raw.default_accounts));
+        BooksDbAdapter.getInstance().setActive(testBookUID);
+
+        mTransactionsDbAdapter = TransactionsDbAdapter.getInstance(); //new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance(); //new AccountsDbAdapter(db, mTransactionsDbAdapter);
 
-        CURRENCY = new CommoditiesDbAdapter(db).getCommodity("USD");
+        CURRENCY = CommoditiesDbAdapter.getInstance().getCommodity("USD");
 
-        PreferenceActivity.getActiveBookSharedPreferences(mReportsActivity).edit()
-                .putString(mReportsActivity.getString(R.string.key_default_currency), CURRENCY.getCurrencyCode())
+        PreferenceActivity.getActiveBookSharedPreferences(context).edit()
+                .putString(context.getString(R.string.key_default_currency), CURRENCY.getCurrencyCode())
                 .commit();
+    }
+	
 
+	@Before
+	public void setUp() throws Exception {
+        // creates default accounts
+        mReportsActivity = mActivityRule.launchActivity(new Intent());
+        assertThat(mAccountsDbAdapter.getRecordsCount()).isGreaterThan(20); //lots of accounts in the default
 	}
 
     /**
      * Call this method in every tests after adding data
      */
     private void getTestActivity() {
-        setActivityIntent(new Intent(Intent.ACTION_VIEW));
-        mReportsActivity = getActivity();
         onView(withId(R.id.btn_pie_chart)).perform(click());
+        refreshReport();
     }
 
     private void addTransactionForCurrentMonth() throws Exception {
@@ -184,7 +195,7 @@ public void testSelectingValue() throws Exception {
 
         onView(withId(R.id.pie_chart)).perform(clickXY(Position.BEGIN, Position.MIDDLE));
         float percent = (float) (TRANSACTION_AMOUNT / (TRANSACTION_AMOUNT + TRANSACTION2_AMOUNT) * 100);
-        String selectedText = String.format(BaseReportFragment.SELECTED_VALUE_PATTERN, DINING_EXPENSE_ACCOUNT_NAME, TRANSACTION_AMOUNT, percent);
+        String selectedText = String.format(Locale.US, BaseReportFragment.SELECTED_VALUE_PATTERN, DINING_EXPENSE_ACCOUNT_NAME, TRANSACTION_AMOUNT, percent);
         onView(withId(R.id.selected_chart_slice)).check(matches(withText(selectedText)));
     }
 
@@ -204,10 +215,6 @@ public void testSpinner() throws Exception {
         onView(withId(R.id.report_account_type_spinner)).perform(click());
         onView(withText(AccountType.INCOME.name())).perform(click());
 
-        Thread.sleep(1000);
-
-        onView(withId(R.id.pie_chart)).perform(click());
-
         String selectedText = String.format(PieChartFragment.SELECTED_VALUE_PATTERN, GIFTS_RECEIVED_INCOME_ACCOUNT_NAME, TRANSACTION3_AMOUNT, 100f);
         onView(withId(R.id.selected_chart_slice)).check(matches(withText(selectedText)));
 
@@ -258,11 +265,31 @@ public float getPosition(int viewPos, int viewLength) {
         abstract float getPosition(int widgetPos, int widgetLength);
     }
 
-    @Override
+    /**
+     * Refresh reports
+     */
+    private void refreshReport(){
+        try {
+            mActivityRule.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    mReportsActivity.refresh();
+                }
+            });
+        } catch (Throwable t){
+            System.err.println("Faile to refresh reports");
+        }
+    }
+
 	@After
 	public void tearDown() throws Exception {
 		mReportsActivity.finish();
-		super.tearDown();
 	}
 
+    @AfterClass
+    public static void cleanup(){
+        BooksDbAdapter booksDbAdapter = BooksDbAdapter.getInstance();
+        booksDbAdapter.setActive(oldActiveBookUID);
+        booksDbAdapter.deleteRecord(testBookUID);
+    }
 }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index c762c6af..ba56da37 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -17,21 +17,17 @@
 package org.gnucash.android.test.ui;
 
 import android.content.ContentValues;
+import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
-import android.support.test.InstrumentationRegistry;
+import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.ActivityInstrumentationTestCase2;
-import android.util.Log;
 
 import org.gnucash.android.R;
-import org.gnucash.android.db.adapter.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
-import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
@@ -43,12 +39,16 @@
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
 import org.gnucash.android.receivers.TransactionRecorder;
+import org.gnucash.android.test.ui.util.DisableAnimationsRule;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.ClassRule;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -78,8 +78,7 @@
 import static org.hamcrest.Matchers.not;
 
 @RunWith(AndroidJUnit4.class)
-public class TransactionsActivityTest extends
-		ActivityInstrumentationTestCase2<TransactionsActivity> {
+public class TransactionsActivityTest {
     private static final String TRANSACTION_AMOUNT = "9.99";
 	private static final String TRANSACTION_NAME = "Pizza";
 	private static final String DUMMY_ACCOUNT_UID = "transactions-account";
@@ -93,66 +92,73 @@
 	private Transaction mTransaction;
 	private long mTransactionTimeMillis;
 
-    private SQLiteDatabase mDb;
-    private DatabaseHelper mDbHelper;
-    private AccountsDbAdapter mAccountsDbAdapter;
-    private TransactionsDbAdapter mTransactionsDbAdapter;
-    private SplitsDbAdapter mSplitsDbAdapter;
+    private static AccountsDbAdapter mAccountsDbAdapter;
+    private static TransactionsDbAdapter mTransactionsDbAdapter;
+    private static SplitsDbAdapter mSplitsDbAdapter;
 	private TransactionsActivity mTransactionsActivity;
 
+	@ClassRule
+	public static DisableAnimationsRule disableAnimationsRule = new DisableAnimationsRule();
+
+	@Rule
+	public ActivityTestRule<TransactionsActivity> mActivityRule =
+			new ActivityTestRule<>(TransactionsActivity.class, true, false);
+
+	private Account mBaseAccount;
+	private Account mTransferAccount;
+
 	public TransactionsActivityTest() {
-		super(TransactionsActivity.class);
-	}
-	
-	@Override
-	@Before
-	public void setUp() throws Exception {
-		super.setUp();
-		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
-		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
-
-		String activeBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
-        mDbHelper = new DatabaseHelper(getInstrumentation().getTargetContext(), activeBookUID);
-        try {
-            mDb = mDbHelper.getWritableDatabase();
-        } catch (SQLException e) {
-            Log.e(getClass().getName(), "Error getting database: " + e.getMessage());
-            mDb = mDbHelper.getReadableDatabase();
-        }
-        mSplitsDbAdapter = new SplitsDbAdapter(mDb);
-        mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
-        mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-		mAccountsDbAdapter.deleteAllRecords();
+		mBaseAccount = new Account(DUMMY_ACCOUNT_NAME, COMMODITY);
+		mBaseAccount.setUID(DUMMY_ACCOUNT_UID);
 
-		COMMODITY = new CommoditiesDbAdapter(mDb).getCommodity(CURRENCY_CODE);
+		mTransferAccount = new Account(TRANSFER_ACCOUNT_NAME, COMMODITY);
+		mTransferAccount.setUID(TRANSFER_ACCOUNT_UID);
 
 		mTransactionTimeMillis = System.currentTimeMillis();
-        Account account = new Account(DUMMY_ACCOUNT_NAME, COMMODITY);
-        account.setUID(DUMMY_ACCOUNT_UID);
+		mTransaction = new Transaction(TRANSACTION_NAME);
+		mTransaction.setCommodity(COMMODITY);
+		mTransaction.setNote("What up?");
+		mTransaction.setTime(mTransactionTimeMillis);
+		Split split = new Split(new Money(TRANSACTION_AMOUNT, CURRENCY_CODE), DUMMY_ACCOUNT_UID);
+		split.setType(TransactionType.DEBIT);
 
-        Account account2 = new Account(TRANSFER_ACCOUNT_NAME, COMMODITY);
-        account2.setUID(TRANSFER_ACCOUNT_UID);
+		mTransaction.addSplit(split);
+		mTransaction.addSplit(split.createPair(TRANSFER_ACCOUNT_UID));
 
-        mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
-        mAccountsDbAdapter.addRecord(account2, DatabaseAdapter.UpdateMethod.insert);
+		mBaseAccount.addTransaction(mTransaction);
+	}
 
-        mTransaction = new Transaction(TRANSACTION_NAME);
-		mTransaction.setCommodity(COMMODITY);
-        mTransaction.setNote("What up?");
-        mTransaction.setTime(mTransactionTimeMillis);
-        Split split = new Split(new Money(TRANSACTION_AMOUNT, CURRENCY_CODE), DUMMY_ACCOUNT_UID);
-        split.setType(TransactionType.DEBIT);
+	@BeforeClass
+	public static void prepareTestCase(){
+		Context context = GnuCashApplication.getAppContext();
+		AccountsActivityTest.preventFirstRunDialogs(context);
+
+		mSplitsDbAdapter = SplitsDbAdapter.getInstance();
+		mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
+		mAccountsDbAdapter = AccountsDbAdapter.getInstance();
+		COMMODITY = CommoditiesDbAdapter.getInstance().getCommodity(CURRENCY_CODE);
 
-        mTransaction.addSplit(split);
-        mTransaction.addSplit(split.createPair(TRANSFER_ACCOUNT_UID));
-        account.addTransaction(mTransaction);
+		PreferenceActivity.getActiveBookSharedPreferences(context)
+				.edit().putBoolean(context.getString(R.string.key_use_compact_list), false)
+				.apply();
+	}
+
+	@Before
+	public void setUp() throws Exception {
+		mAccountsDbAdapter.deleteAllRecords();
+        mAccountsDbAdapter.addRecord(mBaseAccount, DatabaseAdapter.UpdateMethod.insert);
+        mAccountsDbAdapter.addRecord(mTransferAccount, DatabaseAdapter.UpdateMethod.insert);
 
         mTransactionsDbAdapter.addRecord(mTransaction, DatabaseAdapter.UpdateMethod.insert);
 
-        Intent intent = new Intent(Intent.ACTION_VIEW);
-        intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
-        setActivityIntent(intent);
-		mTransactionsActivity = getActivity();
+		assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(3); //including ROOT account
+		assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(1);
+
+		Intent intent = new Intent(Intent.ACTION_VIEW);
+		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
+		mTransactionsActivity = mActivityRule.launchActivity(intent);
+
+		refreshTransactionsList();
 	}
 
 
@@ -211,7 +217,7 @@ private void sleep(long millis) {
 	 */
 	private void assertToastDisplayed(int toastString) {
 		onView(withText(toastString))
-				.inRoot(withDecorView(not(is(getActivity().getWindow().getDecorView()))))
+				.inRoot(withDecorView(not(mTransactionsActivity.getWindow().getDecorView())))
 				.check(matches(isDisplayed()));
 	}
 
@@ -306,7 +312,7 @@ public void testAutoBalanceTransactions(){
 		imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNotNull();
 		assertThat(imbalanceAcctUID).isNotEmpty();
-		assertTrue(mAccountsDbAdapter.isHiddenAccount(imbalanceAcctUID)); //imbalance account should be hidden in single entry mode
+		assertThat(mAccountsDbAdapter.isHiddenAccount(imbalanceAcctUID)).isTrue(); //imbalance account should be hidden in single entry mode
 
 		assertThat(transaction.getSplits()).extracting("mAccountUID").contains(imbalanceAcctUID);
 
@@ -356,7 +362,7 @@ public void testSplitEditor(){
 		imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNotNull();
 		assertThat(imbalanceAcctUID).isNotEmpty();
-		assertFalse(mAccountsDbAdapter.isHiddenAccount(imbalanceAcctUID));
+		assertThat(mAccountsDbAdapter.isHiddenAccount(imbalanceAcctUID)).isFalse();
 
 		//at least one split will belong to the imbalance account
 		assertThat(transaction.getSplits()).extracting("mAccountUID").contains(imbalanceAcctUID);
@@ -371,10 +377,10 @@ public void testSplitEditor(){
 
 
     private void setDoubleEntryEnabled(boolean enabled){
-        SharedPreferences prefs = PreferenceActivity.getActiveBookSharedPreferences(getActivity());
+        SharedPreferences prefs = PreferenceActivity.getActiveBookSharedPreferences(mTransactionsActivity);
         Editor editor = prefs.edit();
-        editor.putBoolean(getActivity().getString(R.string.key_use_double_entry), enabled);
-        editor.commit();
+        editor.putBoolean(mTransactionsActivity.getString(R.string.key_use_double_entry), enabled);
+        editor.apply();
     }
 
 	@Test
@@ -386,9 +392,9 @@ public void testDefaultTransactionType(){
 	}
 
 	private void setDefaultTransactionType(TransactionType type) {
-		SharedPreferences prefs = PreferenceActivity.getActiveBookSharedPreferences(getActivity());
+		SharedPreferences prefs = PreferenceActivity.getActiveBookSharedPreferences(mTransactionsActivity);
 		Editor editor = prefs.edit();
-		editor.putString(getActivity().getString(R.string.key_default_transaction_type), type.name());
+		editor.putString(mTransactionsActivity.getString(R.string.key_default_transaction_type), type.name());
 		editor.commit();
 	}
 
@@ -439,7 +445,7 @@ public void testToggleTransactionType(){
 		assertThat(transactions).hasSize(1);
 		Transaction trx = transactions.get(0);
 		assertThat(trx.getSplits()).hasSize(2); //auto-balancing of splits
-		assertTrue(trx.getBalance(DUMMY_ACCOUNT_UID).isNegative());
+		assertThat(trx.getBalance(DUMMY_ACCOUNT_UID).isNegative()).isTrue();
 	}
 
 	@Test
@@ -455,13 +461,13 @@ public void testOpenTransactionEditShouldNotModifyTransaction(){
 
 		assertThat(transactions).hasSize(1);
 		Transaction trx = transactions.get(0);
-		assertEquals(TRANSACTION_NAME, trx.getDescription());
+		assertThat(TRANSACTION_NAME).isEqualTo(trx.getDescription());
 		Date expectedDate = new Date(mTransactionTimeMillis);
 		Date trxDate = new Date(trx.getTimeMillis());
-		assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
-				TransactionFormFragment.DATE_FORMATTER.format(trxDate));
-		assertEquals(TransactionFormFragment.TIME_FORMATTER.format(expectedDate),
-				TransactionFormFragment.TIME_FORMATTER.format(trxDate));
+		assertThat(TransactionFormFragment.DATE_FORMATTER.format(expectedDate))
+				.isEqualTo(TransactionFormFragment.DATE_FORMATTER.format(trxDate));
+		assertThat(TransactionFormFragment.TIME_FORMATTER.format(expectedDate))
+				.isEqualTo(TransactionFormFragment.TIME_FORMATTER.format(trxDate));
 	}
 
 	@Test
@@ -470,7 +476,7 @@ public void testDeleteTransaction(){
 		onView(withText(R.string.menu_delete)).perform(click());
 
 		long id = mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
-		assertEquals(0, mTransactionsDbAdapter.getTransactionsCount(id));
+		assertThat(0).isEqualTo(mTransactionsDbAdapter.getTransactionsCount(id));
 	}
 
 	@Test
@@ -569,8 +575,8 @@ public void testLegacyIntentTransactionRecording(){
 		
 		for (Transaction transaction : transactions) {
 			if (transaction.getDescription().equals("Power intents")){
-				assertEquals("Intents for sale", transaction.getNote());
-				assertEquals(4.99, transaction.getBalance(DUMMY_ACCOUNT_UID).asDouble());
+				assertThat("Intents for sale").isEqualTo(transaction.getNote());
+				assertThat(4.99).isEqualTo(transaction.getBalance(DUMMY_ACCOUNT_UID).asDouble());
 			}
 		}
 	}
@@ -583,11 +589,26 @@ private void clickOnView(int viewId){
 		onView(withId(viewId)).perform(click());
 	}
 
-	@Override
+	/**
+	 * Refresh the account list fragment
+	 */
+	private void refreshTransactionsList(){
+		try {
+			mActivityRule.runOnUiThread(new Runnable() {
+				@Override
+				public void run() {
+					mTransactionsActivity.refresh();
+				}
+			});
+		} catch (Throwable throwable) {
+			System.err.println("Failed to refresh fragment");
+		}
+	}
+
 	@After
 	public void tearDown() throws Exception {
 		if (mTransactionsActivity != null)
 			mTransactionsActivity.finish();
-		super.tearDown();
 	}
+
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 48a1b871..3f08587a 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -41,7 +41,6 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentPagerAdapter;
-import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.preference.PreferenceManager;
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index ea09b0e8..b6ef4603 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -63,6 +63,7 @@
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.settings.BackupPreferenceFragment;
+import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.ui.settings.dialog.OwnCloudDialogFragment;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.util.RecurrenceParser;
diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java b/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
index 90212622..0be7918c 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportsActivity.java
@@ -42,6 +42,7 @@
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.ui.common.BaseDrawerActivity;
+import org.gnucash.android.ui.common.Refreshable;
 import org.gnucash.android.ui.util.dialog.DateRangePickerDialogFragment;
 import org.joda.time.LocalDate;
 
@@ -63,7 +64,8 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class ReportsActivity extends BaseDrawerActivity implements AdapterView.OnItemSelectedListener,
-        DatePickerDialog.OnDateSetListener, DateRangePickerDialogFragment.OnDateRangeSetListener{
+        DatePickerDialog.OnDateSetListener, DateRangePickerDialogFragment.OnDateRangeSetListener,
+        Refreshable{
 
     public static final int[] COLORS = {
             Color.parseColor("#17ee4e"), Color.parseColor("#cc1f09"), Color.parseColor("#3940f7"),
@@ -387,4 +389,22 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {
         }
         return super.onKeyUp(keyCode, event);
     }
+
+    @Override
+    public void refresh() {
+        List<Fragment> fragments = getSupportFragmentManager().getFragments();
+        for (Fragment fragment : fragments) {
+            if (fragment instanceof Refreshable){
+                ((Refreshable) fragment).refresh();
+            }
+        }
+    }
+
+    @Override
+    /**
+     * Just another call to refresh
+     */
+    public void refresh(String uid) {
+        refresh();
+    }
 }
diff --git a/app/src/main/res/layout/cardview_transaction.xml b/app/src/main/res/layout/cardview_transaction.xml
index c2bfabd4..f5e31101 100644
--- a/app/src/main/res/layout/cardview_transaction.xml
+++ b/app/src/main/res/layout/cardview_transaction.xml
@@ -26,7 +26,7 @@
     android:layout_marginLeft="5dp"
     android:layout_marginRight="5dp"
     android:layout_width="match_parent"
-    android:layout_height="match_parent">
+    android:layout_height="wrap_content">
     <RelativeLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/PriceDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/PriceDbAdapterTest.java
index daf0ba07..e53ecc5b 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/PriceDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/PriceDbAdapterTest.java
@@ -37,7 +37,7 @@ public void shouldOnlySaveOnePricePerCommodityPair(){
 
         price = pricesDbAdapter.getRecord(price.getUID());
         assertThat(pricesDbAdapter.getRecordsCount()).isEqualTo(1);
-        assertThat(price.getValueNum()).isEqualTo(134);
+        assertThat(price.getValueNum()).isEqualTo(67); //the price is reduced to 57/100 before saving
 
         Price price1 = new Price(commodityUID, currencyUID);
         price1.setValueNum(187);
diff --git a/build.gradle b/build.gradle
index 0049c0f5..8992686e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
 		jcenter()
 	}
 	dependencies {
-		classpath 'com.android.tools.build:gradle:2.0.0'
+		classpath 'com.android.tools.build:gradle:2.1.0'
 		classpath 'io.fabric.tools:gradle:1.21.2'
 	}
 }
