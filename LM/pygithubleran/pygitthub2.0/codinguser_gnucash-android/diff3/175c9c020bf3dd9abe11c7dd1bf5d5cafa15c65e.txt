From 684b0fd36e9d30d6f081497bc461b173ad529793 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Thu, 13 Apr 2017 00:47:54 +0200
Subject: [PATCH 1/4] Remove Currency usage from buildSimpleAccountInstance

---
 .../main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 273dd908..ad41f097 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -440,8 +440,8 @@ private Account buildSimpleAccountInstance(Cursor c) {
         account.setDescription(description == null ? "" : description);
         account.setParentUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID)));
         account.setAccountType(AccountType.valueOf(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE))));
-        Currency currency = Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY)));
-        account.setCommodity(mCommoditiesDbAdapter.getCommodity(currency.getCurrencyCode()));
+        String currencyCode = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+        account.setCommodity(mCommoditiesDbAdapter.getCommodity(currencyCode));
         account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
         account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
         String color = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));

From 1d63b6ba9c82051af802fa2e2e91d049f89373a2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Thu, 13 Apr 2017 01:12:35 +0200
Subject: [PATCH 2/4] Convert getCurrenciesInUse into getCommoditiesInUse

---
 .../android/db/adapter/AccountsDbAdapter.java        | 20 +++++++++++---------
 .../gnucash/android/export/xml/GncXmlExporter.java   | 18 +++++++++---------
 .../ui/settings/TransactionsPreferenceFragment.java  |  8 +++++---
 3 files changed, 25 insertions(+), 21 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index ad41f097..2ffacd07 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -1263,25 +1263,27 @@ public static int getActiveAccountColorResource(@NonNull String accountUID) {
     }
 
     /**
-     * Returns the list of currencies in use in the database.
-     * <p>This is not the same as the list of all available commodities</p>
-     * @return List of currencies in use
+     * Returns the list of commodities in use in the database.
+     *
+     * <p>This is not the same as the list of all available commodities.</p>
+     *
+     * @return List of commodities in use
      */
-    public List<Currency> getCurrenciesInUse(){
+    public List<Commodity> getCommoditiesInUse() {
         Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
                 null, null, null, null, null, null);
-        List<Currency> currencyList = new ArrayList<>();
+        List<Commodity> commodityList = new ArrayList<>();
         try {
             while (cursor.moveToNext()) {
-                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
-                currencyList.add(Currency.getInstance(currencyCode));
+                String currencyCode =
+                    cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+                commodityList.add(mCommoditiesDbAdapter.getCommodity(currencyCode));
             }
         } finally {
             cursor.close();
         }
-        return currencyList;
+        return commodityList;
     }
-
     /**
 	 * Deletes all accounts, transactions (and their splits) from the database.
      * Basically empties all 3 tables, so use with care ;)
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index c9642027..49d37d85 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -617,15 +617,15 @@ private void serializeDate(XmlSerializer xmlSerializer, String tag, long timeMil
         xmlSerializer.endTag(null, tag);
     }
 
-    private void exportCommodities(XmlSerializer xmlSerializer, List<Currency> currencies) throws IOException {
-        for (Currency currency : currencies) {
+    private void exportCommodities(XmlSerializer xmlSerializer, List<Commodity> commodities) throws IOException {
+        for (Commodity commodity : commodities) {
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
             xmlSerializer.text("ISO4217");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-            xmlSerializer.text(currency.getCurrencyCode());
+            xmlSerializer.text(commodity.getCurrencyCode());
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
         }
@@ -836,15 +836,15 @@ public void generateExport(Writer writer) throws ExporterException {
             xmlSerializer.text(BaseModel.generateUID());
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK_ID);
             //commodity count
-            List<Currency> currencies = mAccountsDbAdapter.getCurrenciesInUse();
-            for (int i = 0; i < currencies.size(); i++) {
-                if (currencies.get(i).getCurrencyCode().equals("XXX")) {
-                    currencies.remove(i);
+            List<Commodity> commodities = mAccountsDbAdapter.getCommoditiesInUse();
+            for (int i = 0; i < commodities.size(); i++) {
+                if (commodities.get(i).getCurrencyCode().equals("XXX")) {
+                    commodities.remove(i);
                 }
             }
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
-            xmlSerializer.text(currencies.size() + "");
+            xmlSerializer.text(commodities.size() + "");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             //account count
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
@@ -865,7 +865,7 @@ public void generateExport(Writer writer) throws ExporterException {
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             }
             // export the commodities used in the DB
-            exportCommodities(xmlSerializer, currencies);
+            exportCommodities(xmlSerializer, commodities);
             // prices
             if (priceCount > 0) {
                 exportPrices(xmlSerializer);
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java b/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
index b047430c..a388e263 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/TransactionsPreferenceFragment.java
@@ -28,6 +28,8 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.ui.settings.dialog.DeleteAllTransactionsConfirmationDialog;
 
 import java.util.Currency;
@@ -122,9 +124,9 @@ public void showDeleteTransactionsDialog(){
 	private void setImbalanceAccountsHidden(boolean useDoubleEntry) {
 		String isHidden = useDoubleEntry ? "0" : "1";
 		AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
-		List<Currency> currencies = accountsDbAdapter.getCurrenciesInUse();
-		for (Currency currency : currencies) {
-			String uid = accountsDbAdapter.getImbalanceAccountUID(currency);
+        List<Commodity> commodities = accountsDbAdapter.getCommoditiesInUse();
+		for (Commodity commodity : commodities) {
+			String uid = accountsDbAdapter.getImbalanceAccountUID(commodity);
 			if (uid != null){
 				accountsDbAdapter.updateRecord(uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
 			}

From 041ede235d404c8b27ab2e752c06890eb3923edb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Thu, 13 Apr 2017 01:20:11 +0200
Subject: [PATCH 3/4] Remove the Currency version of getImbalanceAccountUID

---
 .../gnucash/android/test/ui/TransactionsActivityTest.java    |  8 ++++----
 .../org/gnucash/android/db/adapter/AccountsDbAdapter.java    | 12 ------------
 .../android/test/unit/db/TransactionsDbAdapterTest.java      |  2 +-
 3 files changed, 5 insertions(+), 17 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index aa30d51a..085ea5c9 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -365,7 +365,7 @@ public void testAutoBalanceTransactions(){
 		mTransactionsDbAdapter.deleteAllRecords();
 
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(0);
-		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
+		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Commodity.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNull();
 
 		validateTransactionListDisplayed();
@@ -382,7 +382,7 @@ public void testAutoBalanceTransactions(){
 		assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(1);
 		Transaction transaction = mTransactionsDbAdapter.getAllTransactions().get(0);
 		assertThat(transaction.getSplits()).hasSize(2);
-		imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
+		imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Commodity.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNotNull();
 		assertThat(imbalanceAcctUID).isNotEmpty();
 		assertThat(mAccountsDbAdapter.isHiddenAccount(imbalanceAcctUID)).isTrue(); //imbalance account should be hidden in single entry mode
@@ -403,7 +403,7 @@ public void testSplitEditor(){
 		mTransactionsDbAdapter.deleteAllRecords();
 
 		//when we start there should be no imbalance account in the system
-		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
+		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Commodity.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNull();
 
 		validateTransactionListDisplayed();
@@ -431,7 +431,7 @@ public void testSplitEditor(){
 		Transaction transaction = transactions.get(0);
 
 		assertThat(transaction.getSplits()).hasSize(3); //auto-balanced
-		imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
+		imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Commodity.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNotNull();
 		assertThat(imbalanceAcctUID).isNotEmpty();
 		assertThat(mAccountsDbAdapter.isHiddenAccount(imbalanceAcctUID)).isFalse();
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 2ffacd07..4e604b3e 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -600,18 +600,6 @@ public String getOrCreateImbalanceAccountUID(Commodity commodity){
     }
 
     /**
-     * Returns the GUID of the imbalance account for the currency
-     * <p>This method will not create the imbalance account if it doesn't exist</p>
-     * @param currency Currency for the imbalance account
-     * @return GUID of the account or null if the account doesn't exist yet
-     * @see #getOrCreateImbalanceAccountUID(Commodity)
-     */
-    public String getImbalanceAccountUID(Currency currency){
-        String imbalanceAccountName = getImbalanceAccountName(currency);
-        return findAccountUidByFullName(imbalanceAccountName);
-    }
-
-    /**
      * Returns the GUID of the imbalance account for the commodity
      *
      * <p>This method will not create the imbalance account if it doesn't exist</p>
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index 881fc594..fd98a226 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -119,7 +119,7 @@ public void shouldBalanceTransactionsOnSave(){
 		Transaction trn = mTransactionsDbAdapter.getRecord(transaction.getUID());
 		assertThat(trn.getSplits()).hasSize(2);
 
-		String imbalanceAccountUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(Money.DEFAULT_CURRENCY_CODE));
+		String imbalanceAccountUID = mAccountsDbAdapter.getImbalanceAccountUID(Commodity.getInstance(Money.DEFAULT_CURRENCY_CODE));
 		assertThat(trn.getSplits()).extracting("mAccountUID").contains(imbalanceAccountUID);
 	}
 

From 59c94fc18f7d519a59881dbf44fbab467c1c7188 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Thu, 13 Apr 2017 01:24:12 +0200
Subject: [PATCH 4/4] Remove the Currency version of getImbalanceAccountName

---
 .../java/org/gnucash/android/db/adapter/AccountsDbAdapter.java | 10 ----------
 .../main/java/org/gnucash/android/export/qif/QifExporter.java  |  3 ++-
 2 files changed, 2 insertions(+), 11 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 4e604b3e..f6b85bd8 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -43,7 +43,6 @@
 import java.math.BigDecimal;
 import java.sql.Timestamp;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -1185,15 +1184,6 @@ public static String getImbalanceAccountPrefix() {
     }
 
     /**
-     * Returns the imbalance account where to store transactions which are not double entry
-     * @param currency Currency of the transaction
-     * @return Imbalance account name
-     */
-    public static String getImbalanceAccountName(Currency currency){
-        return getImbalanceAccountPrefix() + currency.getCurrencyCode();
-    }
-
-    /**
      * Returns the imbalance account where to store transactions which are not double entry.
      *
      * @param commodity Commodity of the transaction
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index 0e64df8d..f18445d4 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -24,6 +24,7 @@
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.util.PreferencesHelper;
 import org.gnucash.android.util.TimestampHelper;
 
@@ -159,7 +160,7 @@ public QifExporter(ExportParams params, SQLiteDatabase db){
                         if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
                             writer.append(QifHelper.SPLIT_CATEGORY_PREFIX)
                                     .append(AccountsDbAdapter.getImbalanceAccountName(
-                                            Currency.getInstance(cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency")))
+                                            Commodity.getInstance(cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency")))
                                     ))
                                     .append(newLine);
                             writer.append(QifHelper.SPLIT_AMOUNT_PREFIX)
