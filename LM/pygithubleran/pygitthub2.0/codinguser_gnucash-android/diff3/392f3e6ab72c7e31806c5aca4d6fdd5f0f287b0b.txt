From 179165ae0c5824517ffdd977053e7020de80642d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 6 Oct 2015 00:51:48 +0200
Subject: [PATCH] Update version number for v2.0.0-beta2 release

Add Play Store text description for easier localization
Refactored generation of UUIDs to re-use a single method
---
 app/build.gradle                                   |  2 +-
 .../org/gnucash/android/db/MigrationHelper.java    | 14 +++------
 .../gnucash/android/export/xml/GncXmlExporter.java |  5 +--
 .../gnucash/android/importer/GncXmlHandler.java    |  3 +-
 .../java/org/gnucash/android/model/BaseModel.java  |  7 ++---
 .../android/ui/export/ExportFormFragment.java      |  3 +-
 .../ui/transaction/SplitEditorFragment.java        |  3 +-
 play_store_description.txt                         | 36 ++++++++++++++++++++++
 8 files changed, 54 insertions(+), 19 deletions(-)
 create mode 100644 play_store_description.txt

diff --git a/app/build.gradle b/app/build.gradle
index 6f6be5fd..fb538e88 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -6,7 +6,7 @@ apply plugin: 'io.fabric'
 def versionMajor = 2
 def versionMinor = 0
 def versionPatch = 0
-def versionBuild = 1
+def versionBuild = 2
 
 def buildTime() {
     def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 4adf6250..943087c0 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -34,6 +34,7 @@
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.importer.CommoditiesXmlHandler;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Transaction;
@@ -209,11 +210,6 @@ public void run() {
         }
     };
 
-    public static String generateUUID()
-    {
-        return UUID.randomUUID().toString().replaceAll("-", "");
-    }
-
 
     /**
      * Imports commodities into the database from XML resource file
@@ -665,7 +661,7 @@ static int upgradeDbToVersion8(SQLiteDatabase db) {
                 }
                 else
                 {
-                    rootAccountUID = generateUUID();
+                    rootAccountUID = BaseModel.generateUID();
                     contentValues.clear();
                     contentValues.put(CommonColumns.COLUMN_UID, rootAccountUID);
                     contentValues.put(CommonColumns.COLUMN_CREATED_AT, timestamp);
@@ -707,7 +703,7 @@ static int upgradeDbToVersion8(SQLiteDatabase db) {
                 //scheduledAction.setLastRun(System.currentTimeMillis()); //prevent this from being executed at the end of migration
 
                 contentValues.clear();
-                contentValues.put(CommonColumns.COLUMN_UID, generateUUID());
+                contentValues.put(CommonColumns.COLUMN_UID, BaseModel.generateUID());
                 contentValues.put(CommonColumns.COLUMN_CREATED_AT, timestamp);
                 contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
                 contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period")));
@@ -774,7 +770,7 @@ static int upgradeDbToVersion8(SQLiteDatabase db) {
                                 imbalanceAccountUID = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
                             }
                             else {
-                                imbalanceAccountUID = generateUUID();
+                                imbalanceAccountUID = BaseModel.generateUID();
                                 contentValues.clear();
                                 contentValues.put(CommonColumns.COLUMN_UID, imbalanceAccountUID);
                                 contentValues.put(CommonColumns.COLUMN_CREATED_AT, timestamp);
@@ -795,7 +791,7 @@ static int upgradeDbToVersion8(SQLiteDatabase db) {
                         }
                         String TransactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
                         contentValues.clear();
-                        contentValues.put(CommonColumns.COLUMN_UID, generateUUID());
+                        contentValues.put(CommonColumns.COLUMN_UID, BaseModel.generateUID());
                         contentValues.put(CommonColumns.COLUMN_CREATED_AT, timestamp);
                         contentValues.put("amount",     decimalImbalance.abs().toPlainString());
                         contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) < 0 ? "DEBIT" : "CREDIT");
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 671bef6b..8577781f 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -30,6 +30,7 @@
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.ScheduledAction;
@@ -290,7 +291,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
             mRootTemplateAccount.setAccountType(AccountType.ROOT);
             mTransactionToTemplateAccountMap.put(" ", mRootTemplateAccount);
             while (cursor.moveToNext()) {
-                Account account = new Account(UUID.randomUUID().toString().replaceAll("-", ""));
+                Account account = new Account(BaseModel.generateUID());
                 account.setAccountType(AccountType.BANK);
                 String trnUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
                 mTransactionToTemplateAccountMap.put(trnUID, account);
@@ -714,7 +715,7 @@ public void generateExport(Writer writer) throws ExporterException{
             // book_id
             xmlSerializer.startTag(null, GncXmlHelper.TAG_BOOK_ID);
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(UUID.randomUUID().toString().replaceAll("-", ""));
+            xmlSerializer.text(BaseModel.generateUID());
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK_ID);
             //commodity count
             List<Currency> currencies = mAccountsDbAdapter.getCurrenciesInUse();
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 23100285..fec03cfa 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -32,6 +32,7 @@
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.Price;
@@ -671,7 +672,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 if (mScheduledAction.getActionType() == ScheduledAction.ActionType.TRANSACTION) {
                     mScheduledAction.setActionUID(mTemplateAccountToTransactionMap.get(characterString));
                 } else {
-                    mScheduledAction.setActionUID(UUID.randomUUID().toString().replaceAll("-",""));
+                    mScheduledAction.setActionUID(BaseModel.generateUID());
                 }
                 break;
             case GncXmlHelper.TAG_SCHEDULED_ACTION:
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index 224f1d54..eefde82a 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -45,12 +45,11 @@ public BaseModel(){
     }
 
     /**
-     * Method for generating the Global Unique ID for the object and sets the internal variable which can be retrieved with {@link #getUID()}.
-     * Subclasses can override this method to provide a different implementation
+     * Method for generating the Global Unique ID for the model object
      * @return Random GUID for the model object
      */
-    protected String generateUID(){
-        return mUID = UUID.randomUUID().toString().replaceAll("-", "");
+    public static String generateUID(){
+        return UUID.randomUUID().toString().replaceAll("-", "");
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 55cca85a..eafca8b7 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -54,6 +54,7 @@
 import org.gnucash.android.export.ExportAsyncTask;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
+import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.common.UxArgument;
@@ -239,7 +240,7 @@ private void startExport(){
 				ScheduledAction.ActionType.BACKUP);
 		for (ScheduledAction scheduledAction : scheduledActions) {
 			scheduledAction.setTag(exportParameters.toCsv());
-			scheduledAction.setActionUID(UUID.randomUUID().toString().replaceAll("-", ""));
+			scheduledAction.setActionUID(BaseModel.generateUID());
 			ScheduledActionDbAdapter.getInstance().addRecord(scheduledAction);
 		}
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
index 0282d92e..7888d917 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
@@ -43,6 +43,7 @@
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.BaseModel;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -261,7 +262,7 @@ public void onClick(View view) {
             splitCurrencyTextView.setText(accountCurrency.getSymbol());
             splitTypeButton.setAmountFormattingListener(splitAmountEditText, splitCurrencyTextView);
             splitTypeButton.setChecked(mBaseAmount.signum() > 0);
-            splitUidTextView.setText(UUID.randomUUID().toString().replaceAll("-", ""));
+            splitUidTextView.setText(BaseModel.generateUID());
 
             if (split != null) {
                 splitAmountEditText.setCurrency(split.getValue().getCurrency());
diff --git a/play_store_description.txt b/play_store_description.txt
new file mode 100644
index 00000000..c9499294
--- /dev/null
+++ b/play_store_description.txt
@@ -0,0 +1,36 @@
+GnuCash is a mobile finance expense tracker application for Android.
+
+It is a companion application for GnuCash for the desktop and enables flexible tracking of expenses on-the-go which can be exported to QIF or OFX formats.
+
+Some of feature highligts  include:
+
+<b>&bull; An easy-to-use interface.</b>
+
+<b>&bull; Chart of Accounts</b>: A master account can have a hierarchy of detail accounts underneath it.
+This allows similar account types (e.g. Cash, Bank, Stock) to be grouped into one master account (e.g. Assets).
+You can also import an existing account hierarchy from GnuCash desktop.
+
+<b>&bull; Split Transactions</b>: A single transaction can be split into several pieces to record taxes, fees, and other compound entries.
+
+<b>&bull; Double Entry</b>: Every transaction must debit one account and credit another by an equal amount. This ensures that the "books balance": that the difference between income and outflow exactly equals the sum of all assets, be they bank, cash, stock or other.
+
+<b>&bull; Income/Expense Account Types (Categories)</b>: These serve not only to categorize your cash flow, but when used properly with the double-entry feature, these can provide an accurate Profit&Loss statement.
+
+<b>&bull; Scheduled Transactions</b>: GnuCash has the ability to automatically create and enter transactions.
+
+<b>&bull; Export to GnuCash XML, QIF or OFX</b>: GnuCash can export your accounts/transactions in different formats for use in other programs. Also, scheduled exports to 3rd-party sync services like DropBox and Google Drive can be enabled.
+
+<b>&bull; Reports</b>: View summary of transactions (income and expenses) as pie/bar/line charts
+
+<b>&bull; Homescreen widget</b> for quick access to your accounts and recording of transactions
+
+<br/><b><u>NOTE</u></b>: that the app does not offer full compatibility with GnuCash for the desktop. You cannot synchronize between the desktop app and this one. But you can import your accounts and transactions from GnuCash XML files.
+
+<br/><small>
+<i><u>What does the app use the requested permissions for? </u></i>
+&bull; READ_EXTERNAL_STORAGE: Used to export transactions/accounts to the SD card
+&bull; RECEIVE_BOOT_COMPLETED: Used to restart service for scheduled transactions or exports after device is rebooted
+&bull; VIBRATE: Used to provide haptic feedback when entering some inputs
+&bull; WAKE_LOCK: Used for keeping device active when exporting scheduled transactions in the background service
+&bull; INTERNET/ACCESS_NETWORK_STATE: Used when exporting accounts/transactions to 3rd-party service like Google Drive or DropBox
+</small>
