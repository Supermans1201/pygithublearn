From 2c6af58ed274b237026dc16200be56d6bc75c580 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 18 May 2016 23:25:27 +0200
Subject: [PATCH] Add unit and UX tests for multiple book support

Fix bug when retrieving books from database with no URI
Fix: book name is auto-generated prior to saving at database level
Extract some strings for i18n
---
 app/build.gradle                                   |   1 +
 .../org/gnucash/android/test/ui/MultiBookTest.java | 104 +++++++++++++++++++
 .../android/test/ui/PieChartReportTest.java        |  23 ++---
 .../android/test/ui/TransactionsActivityTest.java  |   4 +
 .../gnucash/android/db/adapter/BooksDbAdapter.java |   5 +-
 .../android/ui/common/BaseDrawerActivity.java      |   2 +-
 app/src/main/res/values/strings.xml                |   1 +
 .../test/unit/db/AccountsDbAdapterTest.java        |  17 +++-
 .../android/test/unit/db/BooksDbAdapterTest.java   | 112 +++++++++++++++++++++
 .../test/unit/db/TransactionsDbAdapterTest.java    |  15 +++
 10 files changed, 267 insertions(+), 17 deletions(-)
 create mode 100644 app/src/androidTest/java/org/gnucash/android/test/ui/MultiBookTest.java
 create mode 100644 app/src/test/java/org/gnucash/android/test/unit/db/BooksDbAdapterTest.java

diff --git a/app/build.gradle b/app/build.gradle
index 9e0ae25c..856fcebf 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -237,6 +237,7 @@ dependencies {
                         'com.android.support.test:runner:'          + androidSupportTestVersion,
                         'com.android.support.test:rules:'           + androidSupportTestVersion,
                         'com.android.support.test.espresso:espresso-core:'      + androidEspressoVersion,
+                        'com.android.support.test.espresso:espresso-intents:'   + androidEspressoVersion,
             //the following are only added so that the app and test version both us the same versions
                         'com.android.support:appcompat-v7:'     + androidSupportVersion,
                         'com.android.support:design:'           + androidSupportVersion)
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/MultiBookTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/MultiBookTest.java
new file mode 100644
index 00000000..241223b8
--- /dev/null
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/MultiBookTest.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (c) 2016 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.test.ui;
+
+import android.support.test.espresso.contrib.DrawerActions;
+import android.support.test.espresso.intent.Intents;
+import android.support.test.espresso.intent.rule.IntentsTestRule;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.gnucash.android.R;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.model.Book;
+import org.gnucash.android.test.ui.util.DisableAnimationsRule;
+import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.settings.PreferenceActivity;
+import org.junit.BeforeClass;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.swipeUp;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.intent.matcher.IntentMatchers.hasComponent;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Test support for multiple books in the application
+ */
+@RunWith(AndroidJUnit4.class)
+public class MultiBookTest {
+
+    private static BooksDbAdapter mBooksDbAdapter;
+
+    @ClassRule
+    public static DisableAnimationsRule disableAnimationsRule = new DisableAnimationsRule();
+
+    @Rule
+    public IntentsTestRule<AccountsActivity> mActivityRule = new IntentsTestRule<>(AccountsActivity.class);
+
+    @BeforeClass
+    public static void prepTestCase(){
+        mBooksDbAdapter = BooksDbAdapter.getInstance();
+    }
+
+    @Test
+    public void shouldOpenBookManager(){
+        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());
+        onView(withId(R.id.book_name)).check(matches(isDisplayed())).perform(click());
+
+        onView(withText(R.string.menu_manage_books)).perform(click());
+
+        Intents.intended(hasComponent(PreferenceActivity.class.getName()));
+    }
+
+    @Test
+    public void creatingNewAccounts_shouldCreatedNewBook(){
+        long booksCount = mBooksDbAdapter.getRecordsCount();
+
+        onView(withId(R.id.drawer_layout)).perform(DrawerActions.open());
+        onView(withId(R.id.drawer_layout)).perform(swipeUp());
+        onView(withText(R.string.title_settings)).perform(click());
+
+        Intents.intended(hasComponent(PreferenceActivity.class.getName()));
+
+        onView(withText(R.string.header_account_settings)).perform(click());
+        onView(withText(R.string.title_create_default_accounts)).perform(click());
+        onView(withId(android.R.id.button1)).perform(click());
+
+        //// TODO: 18.05.2016 wait for import to finish instead
+        sleep(2000); //give import time to finish
+
+        assertThat(mBooksDbAdapter.getRecordsCount()).isEqualTo(booksCount+1);
+
+        Book activeBook = mBooksDbAdapter.getRecord(mBooksDbAdapter.getActiveBookUID());
+        assertThat(activeBook.getDisplayName()).isEqualTo("Book " + (booksCount+1));
+    }
+
+    private static void sleep(long millis){
+        try {
+            Thread.sleep(millis);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index a3490a54..662a4cc2 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -104,8 +104,7 @@
     private ReportsActivity mReportsActivity;
 
     @Rule
-    public ActivityTestRule<ReportsActivity> mActivityRule =
-            new ActivityTestRule<>(ReportsActivity.class, true, false);
+    public ActivityTestRule<ReportsActivity> mActivityRule = new ActivityTestRule<>(ReportsActivity.class);
 
     @ClassRule
     public static DisableAnimationsRule disableAnimationsRule = new DisableAnimationsRule();
@@ -141,18 +140,15 @@ public static void prepareTestCase() throws Exception {
 	@Before
 	public void setUp() throws Exception {
         // creates default accounts
-        mReportsActivity = mActivityRule.launchActivity(new Intent());
+        mReportsActivity = mActivityRule.getActivity();
         assertThat(mAccountsDbAdapter.getRecordsCount()).isGreaterThan(20); //lots of accounts in the default
+        onView(withId(R.id.btn_pie_chart)).perform(click());
 	}
 
     /**
-     * Call this method in every tests after adding data
+     * Add a transaction for the current month in order to test the report view
+     * @throws Exception
      */
-    private void getTestActivity() {
-        onView(withId(R.id.btn_pie_chart)).perform(click());
-        refreshReport();
-    }
-
     private void addTransactionForCurrentMonth() throws Exception {
         Transaction transaction = new Transaction(TRANSACTION_NAME);
         transaction.setTime(System.currentTimeMillis());
@@ -166,6 +162,10 @@ private void addTransactionForCurrentMonth() throws Exception {
         mTransactionsDbAdapter.addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
     }
 
+    /**
+     * Add a transactions for the previous month for testing pie chart
+     * @param minusMonths Number of months prior
+     */
     private void addTransactionForPreviousMonth(int minusMonths) {
         Transaction transaction = new Transaction(TRANSACTION2_NAME);
         transaction.setTime(new LocalDateTime().minusMonths(minusMonths).toDate().getTime());
@@ -182,7 +182,6 @@ private void addTransactionForPreviousMonth(int minusMonths) {
 
     @Test
     public void testNoData() {
-        getTestActivity();
         onView(withId(R.id.pie_chart)).perform(click());
         onView(withId(R.id.selected_chart_slice)).check(matches(withText(R.string.label_select_pie_slice_to_see_details)));
     }
@@ -191,7 +190,7 @@ public void testNoData() {
     public void testSelectingValue() throws Exception {
         addTransactionForCurrentMonth();
         addTransactionForPreviousMonth(1);
-        getTestActivity();
+        refreshReport();
 
         onView(withId(R.id.pie_chart)).perform(clickXY(Position.BEGIN, Position.MIDDLE));
         float percent = (float) (TRANSACTION_AMOUNT / (TRANSACTION_AMOUNT + TRANSACTION2_AMOUNT) * 100);
@@ -208,7 +207,7 @@ public void testSpinner() throws Exception {
 
         mTransactionsDbAdapter.addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
 
-        getTestActivity();
+        refreshReport();
 
         Thread.sleep(1000);
 
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index ba56da37..2eb6b2af 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -21,6 +21,7 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
+import android.support.test.espresso.Espresso;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -192,6 +193,9 @@ public void testAddTransactionShouldRequireAmount(){
 		onView(withId(R.id.menu_save)).perform(click());
 		onView(withText(R.string.title_add_transaction)).check(matches(isDisplayed()));
 
+		Espresso.closeSoftKeyboard();
+		sleep(1000);
+
 		assertToastDisplayed(R.string.toast_transanction_amount_required);
 
 		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java
index f1e28a0e..7993a919 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java
@@ -69,7 +69,7 @@ public Book buildModelInstance(@NonNull Cursor cursor) {
         Book book = new Book(rootAccountGUID);
         book.setDisplayName(displayName);
         book.setRootTemplateUID(rootTemplateGUID);
-        book.setSourceUri(Uri.parse(uriString));
+        book.setSourceUri(uriString == null ? null : Uri.parse(uriString));
         book.setActive(active > 0);
         book.setLastSync(TimestampHelper.getTimestampFromUtcString(lastSync));
 
@@ -80,7 +80,8 @@ public Book buildModelInstance(@NonNull Cursor cursor) {
     @Override
     protected @NonNull SQLiteStatement setBindings(@NonNull SQLiteStatement stmt, @NonNull final Book book) {
         stmt.clearBindings();
-        stmt.bindString(1, book.getDisplayName());
+        String displayName = book.getDisplayName() == null ? generateDefaultBookName() : book.getDisplayName();
+        stmt.bindString(1, displayName);
         stmt.bindString(2, book.getRootAccountUID());
         stmt.bindString(3, book.getRootTemplateUID());
         if (book.getSourceUri() != null)
diff --git a/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java b/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java
index e484ef24..e03726e0 100644
--- a/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/common/BaseDrawerActivity.java
@@ -329,7 +329,7 @@ public void onClickBook(View view){
             String name = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.BookEntry.COLUMN_DISPLAY_NAME));
             menu.add(0, (int)id, maxRecent, name);
         }
-        menu.add(0, ID_MANAGE_BOOKS, maxRecent, "Manage Books...");
+        menu.add(0, ID_MANAGE_BOOKS, maxRecent, R.string.menu_manage_books);
 
         popup.show();
     }
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 5df6c498..d438ec1f 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -446,4 +446,5 @@
 
     <string name="header_manage_books">Manage Books</string>
     <string name="title_manage_books">Manage Books</string>
+    <string name="menu_manage_books">Manage Books...</string>
 </resources>
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index b918cdc0..1b9f6384 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.gnucash.android.test.unit.db;
 
 import android.database.sqlite.SQLiteDatabase;
@@ -25,7 +40,6 @@
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
-import org.gnucash.android.model.Price;
 import org.gnucash.android.model.Recurrence;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
@@ -35,7 +49,6 @@
 import org.gnucash.android.test.unit.testutil.ShadowCrashlytics;
 import org.gnucash.android.test.unit.testutil.ShadowUserVoice;
 import org.junit.After;
-import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/BooksDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/BooksDbAdapterTest.java
new file mode 100644
index 00000000..30214faf
--- /dev/null
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/BooksDbAdapterTest.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright (c) 2016 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.test.unit.db;
+
+import org.gnucash.android.BuildConfig;
+import org.gnucash.android.db.adapter.BooksDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
+import org.gnucash.android.model.BaseModel;
+import org.gnucash.android.model.Book;
+import org.gnucash.android.test.unit.testutil.GnucashTestRunner;
+import org.gnucash.android.test.unit.testutil.ShadowCrashlytics;
+import org.gnucash.android.test.unit.testutil.ShadowUserVoice;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Test the book database adapter
+ */
+@RunWith(GnucashTestRunner.class) //package is required so that resources can be found in dev mode
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class, ShadowUserVoice.class})
+public class BooksDbAdapterTest {
+
+    private BooksDbAdapter mBooksDbAdapter;
+
+    @Before
+    public void setUp() {
+        mBooksDbAdapter = BooksDbAdapter.getInstance();
+        assertThat(mBooksDbAdapter.getRecordsCount()).isEqualTo(1); //there is always a default book after app start
+        assertThat(mBooksDbAdapter.getActiveBookUID()).isNotNull();
+
+        mBooksDbAdapter.deleteAllRecords();
+        assertThat(mBooksDbAdapter.getRecordsCount()).isZero();
+    }
+
+    @Test
+    public void addBook(){
+        Book book = new Book(BaseModel.generateUID());
+        mBooksDbAdapter.addRecord(book, DatabaseAdapter.UpdateMethod.insert);
+
+        assertThat(mBooksDbAdapter.getRecordsCount()).isEqualTo(1);
+        assertThat(mBooksDbAdapter.getRecord(book.getUID()).getDisplayName()).isEqualTo("Book 1");
+        assertThat(mBooksDbAdapter.getActiveBookUID()).isNotEqualTo(book.getUID());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void savingBook_requiresRootAccountGUID(){
+        Book book = new Book();
+        mBooksDbAdapter.addRecord(book);
+    }
+
+    @Test
+    public void deleteBook(){
+        Book book = new Book();
+        book.setRootAccountUID(BaseModel.generateUID());
+        mBooksDbAdapter.addRecord(book);
+
+        mBooksDbAdapter.deleteRecord(book.getUID());
+
+        assertThat(mBooksDbAdapter.getRecordsCount()).isZero();
+    }
+
+    @Test
+    public void setBookActive(){
+        Book book1 = new Book(BaseModel.generateUID());
+        Book book2 = new Book(BaseModel.generateUID());
+
+        mBooksDbAdapter.addRecord(book1);
+        mBooksDbAdapter.addRecord(book2);
+
+        mBooksDbAdapter.setActive(book1.getUID());
+
+        assertThat(mBooksDbAdapter.getActiveBookUID()).isEqualTo(book1.getUID());
+
+        mBooksDbAdapter.setActive(book2.getUID());
+        assertThat(mBooksDbAdapter.isActive(book2.getUID())).isTrue();
+        //setting book2 as active should disable book1 as active
+        Book book = mBooksDbAdapter.getRecord(book1.getUID());
+        assertThat(book.isActive()).isFalse();
+    }
+
+    /**
+     * Test that the generated display name has an ordinal greater than the number of
+     * book records in the database
+     */
+    @Test
+    public void testGeneratedDisplayName(){
+        Book book1 = new Book(BaseModel.generateUID());
+        Book book2 = new Book(BaseModel.generateUID());
+
+        mBooksDbAdapter.addRecord(book1);
+        mBooksDbAdapter.addRecord(book2);
+
+        assertThat(mBooksDbAdapter.generateDefaultBookName()).isEqualTo("Book 3");
+    }
+}
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index 2477fa09..245aa92b 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.gnucash.android.test.unit.db;
 
 import org.assertj.core.data.Index;
