From b049c77cdf341a437d3746c8aa1d554661857741 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 31 Aug 2016 09:45:53 +0200
Subject: [PATCH] Fix bug in computation of number of recurrence events within
 a time period

Fix breaking test
Refactoring: move XML importer test into unit tests package
---
 .../java/org/gnucash/android/model/Recurrence.java | 54 +++++++++++++++++-----
 .../unit}/importer/GncXmlHandlerTest.java          |  3 +-
 .../android/test/unit/model/RecurrenceTest.java    | 12 +++++
 .../unit/service/ScheduledActionServiceTest.java   | 11 +++--
 4 files changed, 62 insertions(+), 18 deletions(-)
 rename app/src/test/java/org/gnucash/android/{ => test/unit}/importer/GncXmlHandlerTest.java (99%)

diff --git a/app/src/main/java/org/gnucash/android/model/Recurrence.java b/app/src/main/java/org/gnucash/android/model/Recurrence.java
index 2b1c4169..d4b92f97 100644
--- a/app/src/main/java/org/gnucash/android/model/Recurrence.java
+++ b/app/src/main/java/org/gnucash/android/model/Recurrence.java
@@ -25,7 +25,11 @@
 import org.joda.time.DateTime;
 import org.joda.time.Days;
 import org.joda.time.LocalDate;
+import org.joda.time.LocalDateTime;
 import org.joda.time.Months;
+import org.joda.time.Period;
+import org.joda.time.ReadableDuration;
+import org.joda.time.ReadablePeriod;
 import org.joda.time.Weeks;
 import org.joda.time.Years;
 
@@ -266,32 +270,58 @@ public String getByDay(){
 
     /**
      * Computes the number of occurrences of this recurrences between start and end date
-     * <p>If there is no end date, it returns -1</p>
+     * <p>If there is no end date or the PeriodType is unknown, it returns -1</p>
      * @return Number of occurrences, or -1 if there is no end date
      */
     public int getCount(){
         if (mPeriodEnd == null)
             return -1;
 
-        int count = 0;
-        DateTime startDate = new DateTime(mPeriodStart.getTime());
-        DateTime endDate = new DateTime(mPeriodEnd.getTime());
+        int multiple = mPeriodType.getMultiplier();
+        ReadablePeriod jodaPeriod;
         switch (mPeriodType){
             case DAY:
-                count = Days.daysBetween(startDate, endDate).getDays();
+                jodaPeriod = Days.days(multiple);
                 break;
             case WEEK:
-                count = Weeks.weeksBetween(startDate, endDate).getWeeks();
+                jodaPeriod = Weeks.weeks(multiple);
                 break;
             case MONTH:
-                count = Months.monthsBetween(startDate, endDate).getMonths();
+                jodaPeriod = Months.months(multiple);
                 break;
             case YEAR:
-                count = Years.yearsBetween(startDate, endDate).getYears();
+                jodaPeriod = Years.years(multiple);
                 break;
+            default:
+                jodaPeriod = Months.months(multiple);
+        }
+        int count = 0;
+        LocalDateTime startTime = new LocalDateTime(mPeriodStart.getTime());
+        while (startTime.toDateTime().getMillis() < mPeriodEnd.getTime()){
+            ++count;
+            startTime = startTime.plus(jodaPeriod);
         }
+        return count;
 
-        return count/mPeriodType.getMultiplier();
+/*
+        //this solution does not use looping, but is not very accurate
+
+        int multiplier = mPeriodType.getMultiplier();
+        LocalDateTime startDate = new LocalDateTime(mPeriodStart.getTime());
+        LocalDateTime endDate = new LocalDateTime(mPeriodEnd.getTime());
+        switch (mPeriodType){
+            case DAY:
+                return Days.daysBetween(startDate, endDate).dividedBy(multiplier).getDays();
+            case WEEK:
+                return Weeks.weeksBetween(startDate, endDate).dividedBy(multiplier).getWeeks();
+            case MONTH:
+                return Months.monthsBetween(startDate, endDate).dividedBy(multiplier).getMonths();
+            case YEAR:
+                return Years.yearsBetween(startDate, endDate).dividedBy(multiplier).getYears();
+            default:
+                return -1;
+        }
+*/
     }
 
     /**
@@ -299,8 +329,8 @@ public int getCount(){
      * @param numberOfOccurences Number of occurences from the start time
      */
     public void setPeriodEnd(int numberOfOccurences){
-        DateTime localDate = new DateTime(mPeriodStart.getTime());
-        DateTime endDate;
+        LocalDateTime localDate = new LocalDateTime(mPeriodStart.getTime());
+        LocalDateTime endDate;
         int occurrenceDuration = numberOfOccurences * mPeriodType.getMultiplier();
         switch (mPeriodType){
             case DAY:
@@ -317,7 +347,7 @@ public void setPeriodEnd(int numberOfOccurences){
                 endDate = localDate.plusYears(occurrenceDuration);
                 break;
         }
-        mPeriodEnd = new Timestamp(endDate.getMillis());
+        mPeriodEnd = new Timestamp(endDate.toDateTime().getMillis());
     }
 
     /**
diff --git a/app/src/test/java/org/gnucash/android/importer/GncXmlHandlerTest.java b/app/src/test/java/org/gnucash/android/test/unit/importer/GncXmlHandlerTest.java
similarity index 99%
rename from app/src/test/java/org/gnucash/android/importer/GncXmlHandlerTest.java
rename to app/src/test/java/org/gnucash/android/test/unit/importer/GncXmlHandlerTest.java
index 9b24ca94..c213761e 100644
--- a/app/src/test/java/org/gnucash/android/importer/GncXmlHandlerTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/importer/GncXmlHandlerTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.gnucash.android.importer;
+package org.gnucash.android.test.unit.importer;
 
 import android.database.sqlite.SQLiteDatabase;
 
@@ -25,6 +25,7 @@
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlHelper;
+import org.gnucash.android.importer.GncXmlHandler;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/RecurrenceTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/RecurrenceTest.java
index d5cd10af..567137f6 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/RecurrenceTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/RecurrenceTest.java
@@ -56,6 +56,18 @@ public void testRecurrenceCountComputation(){
         recurrence.setPeriodEnd(new Timestamp(end.getMillis()));
 
         assertThat(recurrence.getCount()).isEqualTo(10);
+
+        //test case where last appointment is just a little before end time, but not a complete period since last
+        DateTime startTime = new DateTime(2016, 6, 6, 9, 0);
+        DateTime endTime = new DateTime(2016, 8, 29, 10, 0);
+        PeriodType biWeekly = PeriodType.WEEK;
+        biWeekly.setMultiplier(2);
+        recurrence = new Recurrence(biWeekly);
+        recurrence.setPeriodStart(new Timestamp(startTime.getMillis()));
+        recurrence.setPeriodEnd(new Timestamp(endTime.getMillis()));
+
+        assertThat(recurrence.getCount()).isEqualTo(7);
+
     }
 
     /**
diff --git a/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java b/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java
index 0e6adb24..f0190f5a 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java
@@ -187,9 +187,12 @@ public void missedScheduledTransactions_shouldBeGenerated(){
         ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
         DateTime startTime = new DateTime(2016, 6, 6, 9, 0);
         scheduledAction.setStartTime(startTime.getMillis());
+        DateTime endTime = new DateTime(2016, 8, 29, 10, 0);
+        scheduledAction.setEndTime(endTime.getMillis());
         scheduledAction.setActionUID(mActionUID);
 
-        scheduledAction.setRecurrence(PeriodType.WEEK, 2);
+        int multiplier = 2;
+        scheduledAction.setRecurrence(PeriodType.WEEK, multiplier);
         ScheduledActionDbAdapter.getInstance().addRecord(scheduledAction, DatabaseAdapter.UpdateMethod.insert);
 
         TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
@@ -199,10 +202,8 @@ public void missedScheduledTransactions_shouldBeGenerated(){
         actions.add(scheduledAction);
         ScheduledActionService.processScheduledActions(actions, mDb);
 
-        int weeks = Weeks.weeksBetween(startTime, new DateTime(2016, 8, 29, 10, 0)).getWeeks();
-        int expectedTransactionCount = weeks/2;
-
-        assertThat(transactionsDbAdapter.getRecordsCount()).isEqualTo(expectedTransactionCount);
+        //int expectedCount = Weeks.weeksBetween(startTime, endTime).dividedBy(multiplier).getWeeks();
+        assertThat(transactionsDbAdapter.getRecordsCount()).isEqualTo(7);
     }
 
     public void endTimeInTheFuture_shouldExecuteOnlyUntilPresent(){
