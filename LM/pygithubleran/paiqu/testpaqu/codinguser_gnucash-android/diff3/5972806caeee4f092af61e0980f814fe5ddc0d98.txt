From 5972806caeee4f092af61e0980f814fe5ddc0d98 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 8 Apr 2015 16:50:57 +0200
Subject: [PATCH] Fixed: bug causing transaction amounts not to be saved

Fixed wrong type of  imbalance split added to transactions by undoing changes from 7a62d35ea33a160bf312771c876d5cd0f62fb83d
---
 .../main/java/org/gnucash/android/model/Money.java | 25 +++++++++++-----------
 .../ui/transaction/TransactionFormFragment.java    |  6 +-----
 2 files changed, 13 insertions(+), 18 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 4d2f2d29..7c9a3a02 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -149,16 +149,6 @@ public Money(String amount){
 		setAmount(parseToDecimal(amount));
 	}
 
-	/**
-	 * Overloaded constructor. 
-	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
-	 * @param amount Value associated with this Money object
-	 */
-	public Money(BigDecimal amount){
-		init();
-		setAmount(amount);
-	}
-
     /**
      * Copy constructor.
      * Creates a new Money object which is a clone of <code>money</code>
@@ -175,7 +165,7 @@ public Money(Money money){
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
     public static Money createZeroInstance(String currencyCode){
-        return new Money("0", currencyCode);
+        return new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
     }
 
 	/**
@@ -467,7 +457,16 @@ public Money absolute() {
         return new Money(mAmount.abs(), mCurrency);
     }
 
+	/**
+	 * Checks if the value of this amount is exactly equal to zero.
+	 * @return {@code true} if this money amount is zero, {@code false} otherwise
+	 */
     public boolean isAmountZero() {
-        return mAmount.equals(BigDecimal.ZERO);
-    }
+		try {
+			return mAmount.intValueExact() == 0;
+		} catch (ArithmeticException e){
+			e.printStackTrace();
+			return false;
+		}
+	}
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 86df926b..b089c24e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -670,11 +670,7 @@ private void saveNewTransaction() {
         mAccountsDbAdapter.beginTransaction();
         try {
             if (!splitSum.isAmountZero()) {
-                String imbalanceAccountUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
-                //imbalance accounts always have the account type BANK
-                TransactionType splitType = Transaction.getTypeForBalance(AccountType.BANK, splitSum.negate().isNegative());
-                Split imbSplit = new Split(splitSum.absolute(), imbalanceAccountUID);
-                imbSplit.setType(splitType);
+                Split imbSplit = new Split(splitSum.negate(), mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency));
                 mSplitsList.add(imbSplit);
             }
             if (mTransaction != null) { //if editing an existing transaction
