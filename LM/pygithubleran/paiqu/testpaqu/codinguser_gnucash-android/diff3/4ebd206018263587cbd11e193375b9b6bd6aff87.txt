From 4ebd206018263587cbd11e193375b9b6bd6aff87 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Sep 2013 14:27:32 +0200
Subject: [PATCH] Started test cases for QIF export and fixing broken tests for
 OFX export Code refactoring

---
 app/res/menu/account_actions.xml                   |   2 +-
 app/res/values-de/strings.xml                      |   1 +
 app/res/values-el/strings.xml                      |   1 +
 app/res/values-es-rMX/strings.xml                  |   1 +
 app/res/values-es/strings.xml                      |   1 +
 app/res/values-fr/strings.xml                      |   1 +
 app/res/values-hu/strings.xml                      |   1 +
 app/res/values-it/strings.xml                      |   1 +
 app/res/values-nb/strings.xml                      |   1 +
 app/res/values-nl/strings.xml                      |   1 +
 app/res/values-pt-rBR/strings.xml                  |   1 +
 app/res/values-ru/strings.xml                      |   1 +
 app/res/values-zh/strings.xml                      |   1 +
 app/res/values/strings.xml                         |   1 +
 app/src/org/gnucash/android/data/Account.java      |   6 +-
 app/src/org/gnucash/android/data/Transaction.java  |   8 +-
 .../accounts => export}/ExportDialogFragment.java  | 880 +++++++++++----------
 .../org/gnucash/android/export/ExportFormat.java   |  39 +
 .../ofx/OfxExporter.java}                          |   6 +-
 .../android/ui/accounts/AccountsListFragment.java  |   4 +-
 ...ExportTest.java => ExportTransactionsTest.java} | 441 ++++++-----
 21 files changed, 742 insertions(+), 657 deletions(-)
 rename app/src/org/gnucash/android/{ui/accounts => export}/ExportDialogFragment.java (94%)
 create mode 100644 app/src/org/gnucash/android/export/ExportFormat.java
 rename app/src/org/gnucash/android/{util/OfxFormatter.java => export/ofx/OfxExporter.java} (97%)
 rename integration-tests/src/org/gnucash/android/test/ui/{OfxExportTest.java => ExportTransactionsTest.java} (71%)

diff --git a/app/res/menu/account_actions.xml b/app/res/menu/account_actions.xml
index 6b594b21..61101df1 100644
--- a/app/res/menu/account_actions.xml
+++ b/app/res/menu/account_actions.xml
@@ -23,7 +23,7 @@
     
         <item android:id="@+id/menu_export"
           android:icon="@drawable/content_import_export_holo_light"
-          android:title="@string/menu_export_ofx"
+          android:title="@string/menu_export_transactions"
           android:showAsAction="never"
           android:orderInCategory="3"/>
 </menu>
\ No newline at end of file
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 8365f48d..c8e3562a 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -342,6 +342,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 5ee70dd5..ac793865 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -356,6 +356,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 30e80be4..23d41528 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -340,6 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index c2133653..4215a056 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -340,6 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index d368f03a..bb7b5c3e 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -338,6 +338,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 9ff8a842..19c3a432 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -341,6 +341,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 09fe8c2a..5e3f6625 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -341,6 +341,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index f3adc989..91c8de10 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -343,6 +343,7 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 446907a1..330cbeec 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -342,6 +342,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index f0d50e82..7e6569ab 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -340,6 +340,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 295d4f1e..da53c039 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -338,6 +338,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index c35bac8e..7ea5255a 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -515,6 +515,7 @@
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 4fd8ee3e..bf609112 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -539,6 +539,7 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="key_default_export_format">default_export_format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+    <string name="menu_export_transactions">Export transactions...</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index e36bc9e2..d6304d81 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -25,8 +25,8 @@
 
 import android.content.Context;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifHelper;
-import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -389,7 +389,7 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 		//================= BEGIN BANK ACCOUNT INFO (BANKACCTFROM) =================================
 		
 		Element bankId = doc.createElement("BANKID");
-		bankId.appendChild(doc.createTextNode(OfxFormatter.APP_ID));
+		bankId.appendChild(doc.createTextNode(OfxExporter.APP_ID));
 		
 		Element acctId = doc.createElement("ACCTID");
 		acctId.appendChild(doc.createTextNode(mUID));
@@ -408,7 +408,7 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 		
 		//================= BEGIN ACCOUNT BALANCE INFO =================================
 		String balance = getBalance().toPlainString();
-		String formattedCurrentTimeString = OfxFormatter.getFormattedCurrentTime();
+		String formattedCurrentTimeString = OfxExporter.getFormattedCurrentTime();
 		
 		Element balanceAmount = doc.createElement("BALAMT");
 		balanceAmount.appendChild(doc.createTextNode(balance));			
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index 6860f232..03217d53 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -26,8 +26,8 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.data.Account.OfxAccountType;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifHelper;
-import org.gnucash.android.util.OfxFormatter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -379,12 +379,12 @@ public Element toOfx(Document doc, String accountUID){
 		transactionNode.appendChild(type);
 
 		Element datePosted = doc.createElement("DTPOSTED");
-		datePosted.appendChild(doc.createTextNode(OfxFormatter.getOfxFormattedTime(mTimestamp)));
+		datePosted.appendChild(doc.createTextNode(OfxExporter.getOfxFormattedTime(mTimestamp)));
 		transactionNode.appendChild(datePosted);
 		
 		Element dateUser = doc.createElement("DTUSER");
 		dateUser.appendChild(doc.createTextNode(
-				OfxFormatter.getOfxFormattedTime(mTimestamp)));
+				OfxExporter.getOfxFormattedTime(mTimestamp)));
 		transactionNode.appendChild(dateUser);
 		
 		Element amount = doc.createElement("TRNAMT");
@@ -407,7 +407,7 @@ public Element toOfx(Document doc, String accountUID){
 		
 		if (mDoubleEntryAccountUID != null && mDoubleEntryAccountUID.length() > 0){
 			Element bankId = doc.createElement("BANKID");
-			bankId.appendChild(doc.createTextNode(OfxFormatter.APP_ID));
+			bankId.appendChild(doc.createTextNode(OfxExporter.APP_ID));
 			
 			//select the proper account as the double account
 			String doubleAccountUID = mDoubleEntryAccountUID.equals(accountUID) ? mAccountUID : mDoubleEntryAccountUID;
diff --git a/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
similarity index 94%
rename from app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
rename to app/src/org/gnucash/android/export/ExportDialogFragment.java
index ae20d279..b1d0add8 100644
--- a/app/src/org/gnucash/android/ui/accounts/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -1,439 +1,441 @@
-/*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.ui.accounts;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.nio.channels.FileChannel;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
-import android.widget.*;
-import org.gnucash.android.R;
-import org.gnucash.android.export.qif.QifExporter;
-import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
-import org.gnucash.android.util.OfxFormatter;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.ProcessingInstruction;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Environment;
-import android.preference.PreferenceManager;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-/**
- * Dialog fragment for exporting account information as OFX files.
- * @author Ngewi Fet <ngewif@gmail.com>
- */
-public class ExportDialogFragment extends DialogFragment {
-		
-	/**
-	 * Spinner for selecting destination for the exported file.
-	 * The destination could either be SD card, or another application which
-	 * accepts files, like Google Drive.
-	 */
-	Spinner mDestinationSpinner;
-	
-	/**
-	 * Checkbox indicating that all transactions should be exported,
-	 * regardless of whether they have been exported previously or not
-	 */
-	CheckBox mExportAllCheckBox;
-	
-	/**
-	 * Checkbox for deleting all transactions after exporting them
-	 */
-	CheckBox mDeleteAllCheckBox;
-	
-	/**
-	 * Save button for saving the exported files
-	 */
-	Button mSaveButton;
-	
-	/**
-	 * Cancels the export dialog
-	 */
-	Button mCancelButton;
-	
-	/**
-	 * File path for saving the OFX files
-	 */
-	String mFilePath;
-	
-	/**
-	 * Tag for logging
-	 */
-	private static final String TAG = "ExportDialogFragment";
-
-    public enum ExportFormat { QIF, OFX};
-
-    private ExportFormat mExportFormat = ExportFormat.QIF;
-
-	/**
-	 * Click listener for positive button in the dialog.
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 */
-	protected class ExportClickListener implements View.OnClickListener {
-
-		@Override
-		public void onClick(View v) {
-            boolean exportAll = mExportAllCheckBox.isChecked();
-            try {
-                switch (mExportFormat) {
-                    case QIF: {
-                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
-                        String qif = qifExporter.generateQIF();
-
-                        writeQifExternalStorage(qif);
-                    }
-                    break;
-
-                    case OFX: {
-                        Document document = exportOfx(exportAll);
-                        writeOfxToExternalStorage(document);
-                    }
-                    break;
-                }
-            } catch (Exception e) {
-                Log.e(TAG, e.getMessage());
-                Toast.makeText(getActivity(), R.string.error_exporting,
-                        Toast.LENGTH_LONG).show();
-                dismiss();
-                return;
-            }
-
-
-            int position = mDestinationSpinner.getSelectedItemPosition();
-			switch (position) {
-			case 0:					
-				shareFile(mFilePath);				
-				break;
-
-			case 1:				
-				File src = new File(mFilePath);
-				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
-				
-				try {
-					copyFile(src, dst);
-				} catch (IOException e) {
-					Toast.makeText(getActivity(), 
-							getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(), 
-							Toast.LENGTH_LONG).show();		
-					Log.e(TAG, e.getMessage());
-					break;
-				}
-				
-				//file already exists, just let the user know
-				Toast.makeText(getActivity(), 
-						getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(), 
-						Toast.LENGTH_LONG).show();					
-				break;
-				
-			default:
-				break;
-			}
-			
-			if (mDeleteAllCheckBox.isChecked()){
-				Fragment currentFragment = getActivity().getSupportFragmentManager()
-						.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-				TransactionsDeleteConfirmationDialog alertFragment = 
-						TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
-				alertFragment.setTargetFragment(currentFragment, 0);
-				alertFragment.show(getActivity().getSupportFragmentManager(), "transactions_delete_confirmation_dialog");
-			}
-			
-			dismiss();
-		}
-		
-	}
-
-    public void onRadioButtonClicked(View view){
-        switch (view.getId()){
-            case R.id.radio_ofx_format:
-                mExportFormat = ExportFormat.OFX;
-                break;
-            case R.id.radio_qif_format:
-                mExportFormat = ExportFormat.QIF;
-        }
-        mFilePath = buildExportFilename(mExportFormat);
-        return;
-    }
-
-	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
-			Bundle savedInstanceState) {
-		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
-	}
-	
-	@Override
-	public void onActivityCreated(Bundle savedInstanceState) {		
-		super.onActivityCreated(savedInstanceState);
-		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
-		getDialog().setTitle(R.string.menu_export_ofx);
-		bindViews();
-	}
-
-	/**
-	 * Collects references to the UI elements and binds click listeners
-	 */
-	private void bindViews(){		
-		View v = getView();
-		mDestinationSpinner = (Spinner) v.findViewById(R.id.spinner_export_destination);
-		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
-		        R.array.export_destinations, android.R.layout.simple_spinner_item);		
-		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
-		mDestinationSpinner.setAdapter(adapter);
-		
-		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
-		mExportAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_export_all);
-		mExportAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_export_all_transactions), false));
-		
-		mDeleteAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_post_export_delete);
-		mDeleteAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_delete_transactions_after_export), false));
-		
-		mSaveButton = (Button) v.findViewById(R.id.btn_save);
-		mSaveButton.setText(R.string.btn_export);
-		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
-		
-		mCancelButton.setOnClickListener(new View.OnClickListener() {
-			
-			@Override
-			public void onClick(View v) {				
-				dismiss();
-			}
-		});
-		
-		mSaveButton.setOnClickListener(new ExportClickListener());
-
-        String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
-        View.OnClickListener clickListener = new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                onRadioButtonClicked(view);
-            }
-        };
-
-        RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
-        ofxRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name()));
-        ofxRadioButton.setOnClickListener(clickListener);
-
-        RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
-        qifRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name()));
-        qifRadioButton.setOnClickListener(clickListener);
-	}
-
-    private void writeQifExternalStorage(String qif) throws IOException {
-        File file = new File(mFilePath);
-
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        writer.write(qif);
-
-        writer.flush();
-    }
-
-	/**
-	 * Writes the OFX document <code>doc</code> to external storage
-	 * @param doc Document containing OFX file data
-	 * @throws IOException if file could not be saved
-	 */
-	private void writeOfxToExternalStorage(Document doc) throws IOException{
-		File file = new File(mFilePath);
-		
-		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
-				.getBoolean(getString(R.string.key_xml_ofx_header), false);
-
-		//if we want SGML OFX headers, write first to string and then prepend header
-		if (useXmlHeader){
-			write(doc, writer, false);
-		} else {			
-			Node ofxNode = doc.getElementsByTagName("OFX").item(0);
-			StringWriter stringWriter = new StringWriter();
-			write(ofxNode, stringWriter, true);
-			
-			StringBuffer stringBuffer = new StringBuffer(OfxFormatter.OFX_SGML_HEADER);
-			stringBuffer.append('\n');
-			writer.write(stringBuffer.toString() + stringWriter.toString());
-		}
-		
-		writer.flush();
-		writer.close();
-	}
-	
-	/**
-	 * Callback for when the activity chooser dialog is completed
-	 */
-	@Override
-	public void onActivityResult(int requestCode, int resultCode, Intent data) {
-		//TODO: fix the exception which is thrown on return
-		if (resultCode == Activity.RESULT_OK){
-			//uploading or emailing has finished. clean up now.
-			File file = new File(mFilePath);
-			file.delete();
-		}
-	}
-	
-	/**
-	 * Starts an intent chooser to allow the user to select an activity to receive
-	 * the exported OFX file
-	 * @param path String path to the file on disk
-	 */
-	private void shareFile(String path){
-		String defaultEmail = PreferenceManager.getDefaultSharedPreferences(getActivity())
-												.getString(getString(R.string.key_default_export_email), null);
-		Intent shareIntent = new Intent(Intent.ACTION_SEND);
-		shareIntent.setType("application/xml");
-		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
-		shareIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.title_export_email));
-		if (defaultEmail != null && defaultEmail.trim().length() > 0){
-			shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
-		}			
-		SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
-		
-		shareIntent.putExtra(Intent.EXTRA_TEXT, getString(R.string.description_export_email) 
-							+ " " + formatter.format(new Date(System.currentTimeMillis())));
-		startActivity(Intent.createChooser(shareIntent, getString(R.string.title_share_ofx_with)));	
-	}
-	
-	/**
-	 * Copies a file from <code>src</code> to <code>dst</code>
-	 * @param src Absolute path to the source file
-	 * @param dst Absolute path to the destination file 
-	 * @throws IOException if the file could not be copied
-	 */
-	public static void copyFile(File src, File dst) throws IOException
-	{
-		//TODO: Make this asynchronous at some time, t in the future.
-	    FileChannel inChannel = new FileInputStream(src).getChannel();
-	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
-	    try
-	    {
-	        inChannel.transferTo(0, inChannel.size(), outChannel);
-	    }
-	    finally
-	    {
-	        if (inChannel != null)
-	            inChannel.close();
-	        if (outChannel != null)
-	            outChannel.close();
-	    }
-	}
-	
-	/**
-	 * Builds a file name based on the current time stamp for the exported file
-	 * @return String containing the file name
-	 */
-	public static String buildExportFilename(ExportFormat format){
-		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
-		String filename = formatter.format(
-				new Date(System.currentTimeMillis())) 
-				+ "_gnucash_all";
-        switch (format) {
-            case QIF:
-                filename += ".qif";
-                break;
-            case OFX:
-                filename += ".ofx";
-                break;
-        }
-		return filename;
-	}
-	
-	/**
-	 * Exports transactions in the database to the OFX format.
-	 * The accounts are written to a DOM document and returned
-	 * @param exportAll Flag to export all transactions or only the new ones since last export
-	 * @return DOM {@link Document} containing the OFX file information
-	 * @throws ParserConfigurationException
-	 */
-	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
-		DocumentBuilderFactory docFactory = DocumentBuilderFactory
-				.newInstance();
-		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
-
-		Document document = docBuilder.newDocument();
-		Element root = document.createElement("OFX");
-		
-		ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxFormatter.OFX_HEADER);
-		document.appendChild(pi);		
-		document.appendChild(root);
-		
-		OfxFormatter exporter = new OfxFormatter(getActivity(), exportAll);
-		exporter.toOfx(document, root);
-		
-		return document;
-	}
-	
-	/**
-	 * Writes out the document held in <code>node</code> to <code>outputWriter</code>
-	 * @param node {@link Node} containing the OFX document structure. Usually the parent node
-	 * @param outputWriter {@link Writer} to use in writing the file to stream
-     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
-	 */
-	public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
-		try {
-			TransformerFactory transformerFactory = TransformerFactory
-					.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			DOMSource source = new DOMSource(node);
-			StreamResult result = new StreamResult(outputWriter);
-			
-			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-			if (omitXmlDeclaration) {
-				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
-			}
-			
-			transformer.transform(source, result);
-		} catch (TransformerConfigurationException txconfigException) {
-			txconfigException.printStackTrace();
-		} catch (TransformerException tfException) {
-			tfException.printStackTrace();
-		}
-	}
-}
-
+/*
+ * Copyright (c) 2012-2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.nio.channels.FileChannel;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import android.widget.*;
+import org.gnucash.android.R;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.export.ofx.OfxExporter;
+import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Environment;
+import android.preference.PreferenceManager;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+/**
+ * Dialog fragment for exporting account information as OFX files.
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class ExportDialogFragment extends DialogFragment {
+		
+	/**
+	 * Spinner for selecting destination for the exported file.
+	 * The destination could either be SD card, or another application which
+	 * accepts files, like Google Drive.
+	 */
+	Spinner mDestinationSpinner;
+	
+	/**
+	 * Checkbox indicating that all transactions should be exported,
+	 * regardless of whether they have been exported previously or not
+	 */
+	CheckBox mExportAllCheckBox;
+	
+	/**
+	 * Checkbox for deleting all transactions after exporting them
+	 */
+	CheckBox mDeleteAllCheckBox;
+	
+	/**
+	 * Save button for saving the exported files
+	 */
+	Button mSaveButton;
+	
+	/**
+	 * Cancels the export dialog
+	 */
+	Button mCancelButton;
+	
+	/**
+	 * File path for saving the OFX files
+	 */
+	String mFilePath;
+	
+	/**
+	 * Tag for logging
+	 */
+	private static final String TAG = "ExportDialogFragment";
+
+    ;
+
+    private ExportFormat mExportFormat = ExportFormat.QIF;
+
+	/**
+	 * Click listener for positive button in the dialog.
+	 * @author Ngewi Fet <ngewif@gmail.com>
+	 */
+	protected class ExportClickListener implements View.OnClickListener {
+
+		@Override
+		public void onClick(View v) {
+            boolean exportAll = mExportAllCheckBox.isChecked();
+            try {
+                switch (mExportFormat) {
+                    case QIF: {
+                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
+                        String qif = qifExporter.generateQIF();
+
+                        writeQifExternalStorage(qif);
+                    }
+                    break;
+
+                    case OFX: {
+                        Document document = exportOfx(exportAll);
+                        writeOfxToExternalStorage(document);
+                    }
+                    break;
+                }
+            } catch (Exception e) {
+                Log.e(TAG, e.getMessage());
+                Toast.makeText(getActivity(), R.string.error_exporting,
+                        Toast.LENGTH_LONG).show();
+                dismiss();
+                return;
+            }
+
+
+            int position = mDestinationSpinner.getSelectedItemPosition();
+			switch (position) {
+			case 0:					
+				shareFile(mFilePath);				
+				break;
+
+			case 1:				
+				File src = new File(mFilePath);
+				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
+				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
+				
+				try {
+					copyFile(src, dst);
+				} catch (IOException e) {
+					Toast.makeText(getActivity(), 
+							getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(), 
+							Toast.LENGTH_LONG).show();		
+					Log.e(TAG, e.getMessage());
+					break;
+				}
+				
+				//file already exists, just let the user know
+				Toast.makeText(getActivity(), 
+						getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(), 
+						Toast.LENGTH_LONG).show();					
+				break;
+				
+			default:
+				break;
+			}
+			
+			if (mDeleteAllCheckBox.isChecked()){
+				Fragment currentFragment = getActivity().getSupportFragmentManager()
+						.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+				TransactionsDeleteConfirmationDialog alertFragment = 
+						TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
+				alertFragment.setTargetFragment(currentFragment, 0);
+				alertFragment.show(getActivity().getSupportFragmentManager(), "transactions_delete_confirmation_dialog");
+			}
+			
+			dismiss();
+		}
+		
+	}
+
+    public void onRadioButtonClicked(View view){
+        switch (view.getId()){
+            case R.id.radio_ofx_format:
+                mExportFormat = ExportFormat.OFX;
+                break;
+            case R.id.radio_qif_format:
+                mExportFormat = ExportFormat.QIF;
+        }
+        mFilePath = buildExportFilename(mExportFormat);
+        return;
+    }
+
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
+	}
+	
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {		
+		super.onActivityCreated(savedInstanceState);
+		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
+		getDialog().setTitle(R.string.menu_export_ofx);
+		bindViews();
+	}
+
+	/**
+	 * Collects references to the UI elements and binds click listeners
+	 */
+	private void bindViews(){		
+		View v = getView();
+		mDestinationSpinner = (Spinner) v.findViewById(R.id.spinner_export_destination);
+		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
+		        R.array.export_destinations, android.R.layout.simple_spinner_item);		
+		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
+		mDestinationSpinner.setAdapter(adapter);
+		
+		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		mExportAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_export_all);
+		mExportAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_export_all_transactions), false));
+		
+		mDeleteAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_post_export_delete);
+		mDeleteAllCheckBox.setChecked(sharedPrefs.getBoolean(getString(R.string.key_delete_transactions_after_export), false));
+		
+		mSaveButton = (Button) v.findViewById(R.id.btn_save);
+		mSaveButton.setText(R.string.btn_export);
+		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
+		
+		mCancelButton.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {				
+				dismiss();
+			}
+		});
+		
+		mSaveButton.setOnClickListener(new ExportClickListener());
+
+        String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
+        View.OnClickListener clickListener = new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                onRadioButtonClicked(view);
+            }
+        };
+
+        RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
+        ofxRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name()));
+        ofxRadioButton.setOnClickListener(clickListener);
+
+        RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
+        qifRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name()));
+        qifRadioButton.setOnClickListener(clickListener);
+	}
+
+    private void writeQifExternalStorage(String qif) throws IOException {
+        File file = new File(mFilePath);
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        writer.write(qif);
+
+        writer.flush();
+    }
+
+	/**
+	 * Writes the OFX document <code>doc</code> to external storage
+	 * @param doc Document containing OFX file data
+	 * @throws IOException if file could not be saved
+	 */
+	private void writeOfxToExternalStorage(Document doc) throws IOException{
+		File file = new File(mFilePath);
+		
+		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
+				.getBoolean(getString(R.string.key_xml_ofx_header), false);
+
+		//if we want SGML OFX headers, write first to string and then prepend header
+		if (useXmlHeader){
+			write(doc, writer, false);
+		} else {			
+			Node ofxNode = doc.getElementsByTagName("OFX").item(0);
+			StringWriter stringWriter = new StringWriter();
+			write(ofxNode, stringWriter, true);
+			
+			StringBuffer stringBuffer = new StringBuffer(OfxExporter.OFX_SGML_HEADER);
+			stringBuffer.append('\n');
+			writer.write(stringBuffer.toString() + stringWriter.toString());
+		}
+		
+		writer.flush();
+		writer.close();
+	}
+	
+	/**
+	 * Callback for when the activity chooser dialog is completed
+	 */
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		//TODO: fix the exception which is thrown on return
+		if (resultCode == Activity.RESULT_OK){
+			//uploading or emailing has finished. clean up now.
+			File file = new File(mFilePath);
+			file.delete();
+		}
+	}
+	
+	/**
+	 * Starts an intent chooser to allow the user to select an activity to receive
+	 * the exported OFX file
+	 * @param path String path to the file on disk
+	 */
+	private void shareFile(String path){
+		String defaultEmail = PreferenceManager.getDefaultSharedPreferences(getActivity())
+												.getString(getString(R.string.key_default_export_email), null);
+		Intent shareIntent = new Intent(Intent.ACTION_SEND);
+		shareIntent.setType("application/xml");
+		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
+		shareIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.title_export_email));
+		if (defaultEmail != null && defaultEmail.trim().length() > 0){
+			shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
+		}			
+		SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
+		
+		shareIntent.putExtra(Intent.EXTRA_TEXT, getString(R.string.description_export_email) 
+							+ " " + formatter.format(new Date(System.currentTimeMillis())));
+		startActivity(Intent.createChooser(shareIntent, getString(R.string.title_share_ofx_with)));	
+	}
+	
+	/**
+	 * Copies a file from <code>src</code> to <code>dst</code>
+	 * @param src Absolute path to the source file
+	 * @param dst Absolute path to the destination file 
+	 * @throws IOException if the file could not be copied
+	 */
+	public static void copyFile(File src, File dst) throws IOException
+	{
+		//TODO: Make this asynchronous at some time, t in the future.
+	    FileChannel inChannel = new FileInputStream(src).getChannel();
+	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
+	    try
+	    {
+	        inChannel.transferTo(0, inChannel.size(), outChannel);
+	    }
+	    finally
+	    {
+	        if (inChannel != null)
+	            inChannel.close();
+	        if (outChannel != null)
+	            outChannel.close();
+	    }
+	}
+	
+	/**
+	 * Builds a file name based on the current time stamp for the exported file
+	 * @return String containing the file name
+	 */
+	public static String buildExportFilename(ExportFormat format){
+		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
+		String filename = formatter.format(
+				new Date(System.currentTimeMillis())) 
+				+ "_gnucash_all";
+        switch (format) {
+            case QIF:
+                filename += ".qif";
+                break;
+            case OFX:
+                filename += ".ofx";
+                break;
+        }
+		return filename;
+	}
+	
+	/**
+	 * Exports transactions in the database to the OFX format.
+	 * The accounts are written to a DOM document and returned
+	 * @param exportAll Flag to export all transactions or only the new ones since last export
+	 * @return DOM {@link Document} containing the OFX file information
+	 * @throws ParserConfigurationException
+	 */
+	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
+		DocumentBuilderFactory docFactory = DocumentBuilderFactory
+				.newInstance();
+		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+
+		Document document = docBuilder.newDocument();
+		Element root = document.createElement("OFX");
+		
+		ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxExporter.OFX_HEADER);
+		document.appendChild(pi);		
+		document.appendChild(root);
+		
+		OfxExporter exporter = new OfxExporter(getActivity(), exportAll);
+		exporter.toOfx(document, root);
+		
+		return document;
+	}
+	
+	/**
+	 * Writes out the document held in <code>node</code> to <code>outputWriter</code>
+	 * @param node {@link Node} containing the OFX document structure. Usually the parent node
+	 * @param outputWriter {@link Writer} to use in writing the file to stream
+     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
+	 */
+	public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
+		try {
+			TransformerFactory transformerFactory = TransformerFactory
+					.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			DOMSource source = new DOMSource(node);
+			StreamResult result = new StreamResult(outputWriter);
+			
+			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+			if (omitXmlDeclaration) {
+				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+			}
+			
+			transformer.transform(source, result);
+		} catch (TransformerConfigurationException txconfigException) {
+			txconfigException.printStackTrace();
+		} catch (TransformerException tfException) {
+			tfException.printStackTrace();
+		}
+	}
+}
+
diff --git a/app/src/org/gnucash/android/export/ExportFormat.java b/app/src/org/gnucash/android/export/ExportFormat.java
new file mode 100644
index 00000000..6000ebd1
--- /dev/null
+++ b/app/src/org/gnucash/android/export/ExportFormat.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.export;
+
+/**
+ * Enumeration of the different export formats supported by the application
+* @author Ngewi Fet <ngewif@gmail.com>
+*/
+public enum ExportFormat {
+    QIF("Quicken Interchange Format"),
+    OFX("Open Financial eXchange");
+
+    /**
+     * Full name of the export format acronym
+     */
+    private String mDescription;
+
+    ExportFormat(String description) {
+        this.mDescription = description;
+    }
+
+    @Override
+    public String toString() {
+        return mDescription;
+    }
+}
diff --git a/app/src/org/gnucash/android/util/OfxFormatter.java b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
similarity index 97%
rename from app/src/org/gnucash/android/util/OfxFormatter.java
rename to app/src/org/gnucash/android/export/ofx/OfxExporter.java
index 21c609ec..5578670e 100644
--- a/app/src/org/gnucash/android/util/OfxFormatter.java
+++ b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.gnucash.android.util;
+package org.gnucash.android.export.ofx;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -36,7 +36,7 @@
  * Exports the data in the database in OFX format
  * @author Ngewi Fet <ngewi.fet@gmail.com>
  */
-public class OfxFormatter {
+public class OfxExporter {
 
 	/**
 	 * A date formatter used when creating file names for the exported data
@@ -85,7 +85,7 @@
 	 * @param context Application context
 	 * @param exportAll Whether all transactions should be exported or only new ones since last export
 	 */
-	public OfxFormatter(Context context, boolean exportAll) {
+	public OfxExporter(Context context, boolean exportAll) {
 		AccountsDbAdapter dbAdapter = new AccountsDbAdapter(context);
 		mAccountsList = exportAll ? dbAdapter.getAllAccounts() : dbAdapter.getExportableAccounts();
 		mExportAll = exportAll;
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index e174ee6b..3d9bea58 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -40,7 +40,6 @@
 import android.view.ViewGroup;
 import android.widget.*;
 import android.widget.AdapterView.OnItemLongClickListener;
-import android.widget.SearchView;
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import com.actionbarsherlock.app.SherlockListFragment;
@@ -49,11 +48,11 @@
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
-import com.actionbarsherlock.widget.*;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.db.*;
+import org.gnucash.android.export.ExportDialogFragment;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
@@ -61,7 +60,6 @@
 import org.gnucash.android.util.OnAccountClickedListener;
 
 import java.lang.ref.WeakReference;
-import java.util.Locale;
 
 /**
  * Fragment for displaying the list of accounts in the database
diff --git a/integration-tests/src/org/gnucash/android/test/ui/OfxExportTest.java b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
similarity index 71%
rename from integration-tests/src/org/gnucash/android/test/ui/OfxExportTest.java
rename to integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 5faa880a..552ac322 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/OfxExportTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -1,204 +1,237 @@
-/*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.test.ui;
-
-import java.io.File;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.test.util.ActionBarUtils;
-import org.gnucash.android.ui.accounts.AccountsActivity;
-import org.gnucash.android.ui.accounts.ExportDialogFragment;
-
-import android.os.Environment;
-import android.test.ActivityInstrumentationTestCase2;
-import android.widget.Button;
-import android.widget.Spinner;
-
-import com.jayway.android.robotium.solo.Solo;
-
-public class OfxExportTest extends
-		ActivityInstrumentationTestCase2<AccountsActivity> {
-
-	private Solo mSolo;
-	
-	public OfxExportTest() {
-		super(AccountsActivity.class);
-	}
-	
-	@Override
-	protected void setUp() throws Exception {
-		super.setUp();
-		mSolo = new Solo(getInstrumentation(), getActivity());	
-		
-		Account account = new Account("Exportable");		
-		Transaction transaction = new Transaction("9.99", "Pizza");		
-		transaction.setDescription("What up?");
-		transaction.setTime(System.currentTimeMillis());
-		
-		account.addTransaction(transaction);
-		
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.addAccount(account);
-		adapter.close();	
-	}
-	
-	/**
-	 * Tests the export of an OFX file with account information.
-	 * The exported file name contains a timestamp with minute precision.
-	 * If this test fails, it may be due to the file being created and tested in different minutes of the clock
-	 * Just try rerunning it again.
-	 */
-	public void testOfxExport(){
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		mSolo.clickOnButton(3);
-		
-		//the file name is time-based (down to the minute), so we cache it here, 
-		//as close as possible to the export itself to minimize difference
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		mSolo.waitForDialogToClose(10000);
-		
-		
-		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
-		assertNotNull(file);
-		assertTrue(file.exists());
-		
-		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
-		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);
-	}	
-	
-	public void testDeleteTransactionsAfterExport(){
-		TransactionsDbAdapter transAdapter = new TransactionsDbAdapter(getActivity());
-		assertTrue(transAdapter.getAllTransactionsCount() != 0);
-		
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		
-		//check to delete after export
-		mSolo.clickOnCheckBox(1);
-		
-		Button b = (Button) mSolo.getView(R.id.btn_save); //getActivity().findViewById(R.id.btn_save);
-		mSolo.clickOnView(b);
-		mSolo.waitForDialogToClose(2000);
-
-        String deleteConfirm = getActivity().getString(R.string.alert_dialog_ok_delete);
-        mSolo.clickOnText(deleteConfirm);
-		mSolo.waitForDialogToClose(1000);
-        mSolo.sleep(1000);
-
-		assertEquals(0, transAdapter.getAllTransactionsCount());
-		
-		transAdapter.close();
-        mSolo.goBack();
-	}
-	
-	public void testShouldIgnoreExportedTransactions(){
-		testOfxExport();
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		mSolo.clickOnCheckBox(0);
-		mSolo.clickOnButton(3);
-		
-		//the file name is time-based (down to the minute), so we cache it here, 
-		//as close as possible to the export itself to minimize chance of a different name 
-		//due to a different minute
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		mSolo.waitForDialogToClose(10000);
-				
-		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
-		assertNotNull(file);
-		assertTrue(file.exists());
-		//there should be something in the file (OFX headers, etc)
-		assertTrue(file.length() > 0);
-		
-		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
-		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);		
-	}
-	
-	public void testExportAlreadyExportedTransactions(){
-		testOfxExport();
-        mSolo.clickOnActionBarItem(R.id.menu_export);
-//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
-
-		mSolo.waitForText("Export OFX");
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
-		mSolo.clickOnText(options[1]);
-		mSolo.clickOnCheckBox(0);
-		mSolo.clickOnButton(3);
-		
-		//the file name is time-based (down to the minute), so we cache it here, 
-		//as close as possible to the export itself to minimize chance of a different name 
-		//due to a different minute
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		mSolo.waitForDialogToClose(10000);		
-		
-		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
-		assertNotNull(file);
-		//the file will exist but not contain any account information
-		assertTrue(file.exists());
-
-		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
-		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);		
-	}
-	
-	public void testValidityOfExport(){
-		//TODO: Validate exported file contents with an XML schema, if possible
-	}
-	
-	@Override
-	protected void tearDown() throws Exception {
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.deleteAllRecords();
-		adapter.close();
-		mSolo.finishOpenedActivities();
-		super.tearDown();
-	}
-}
+/*
+ * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.test.ui;
+
+import java.io.File;
+
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Transaction;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.export.ExportDialogFragment;
+
+import android.os.Environment;
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.Button;
+import android.widget.Spinner;
+
+import com.jayway.android.robotium.solo.Solo;
+
+public class ExportTransactionsTest extends
+		ActivityInstrumentationTestCase2<AccountsActivity> {
+
+	private Solo mSolo;
+	
+	public ExportTransactionsTest() {
+		super(AccountsActivity.class);
+	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp();
+		mSolo = new Solo(getInstrumentation(), getActivity());	
+		
+		Account account = new Account("Exportable");		
+		Transaction transaction = new Transaction("9.99", "Pizza");		
+		transaction.setDescription("What up?");
+		transaction.setTime(System.currentTimeMillis());
+		
+		account.addTransaction(transaction);
+		
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.addAccount(account);
+		adapter.close();	
+	}
+	
+	/**
+	 * Tests the export of an OFX file with the transactions from the application.
+	 * The exported file name contains a timestamp with minute precision.
+	 * If this test fails, it may be due to the file being created and tested in different minutes of the clock
+	 * Just try rerunning it again.
+	 */
+	public void testOfxExport(){
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+		
+		//the file name is time-based (down to the minute), so we cache it here, 
+		//as close as possible to the export itself to minimize difference
+		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		
+		mSolo.waitForDialogToClose(2000);
+        mSolo.sleep(2000);
+		
+		
+		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+		assertNotNull(file);
+		assertTrue(file.exists());
+		
+		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
+		boolean isDeleted = file.delete();
+		assertTrue(isDeleted);
+	}
+
+    /**
+     * Test the export of transactions in the QIF format
+     */
+    public void testQifExport(){
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+        mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+        Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+        mSolo.clickOnView(spinner);
+        String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);
+        mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(0);
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+
+        //the file name is time-based (down to the minute), so we cache it here,
+        //as close as possible to the export itself to minimize difference
+        String filename = ExportDialogFragment.buildExportFilename(ExportFormat.QIF);
+
+        mSolo.waitForDialogToClose(10000);
+
+        File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+        assertNotNull(file);
+        assertTrue(file.exists());
+
+        //if this is not deleted, we cannot be certain that the next test will pass on its own merits
+        boolean isDeleted = file.delete();
+        assertTrue(isDeleted);
+    }
+
+	public void testDeleteTransactionsAfterExport(){
+		TransactionsDbAdapter transAdapter = new TransactionsDbAdapter(getActivity());
+		assertTrue(transAdapter.getAllTransactionsCount() != 0);
+		
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+		//check to delete after export
+		mSolo.clickOnCheckBox(1);
+
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+		mSolo.waitForDialogToClose(2000);
+
+        String deleteConfirm = getActivity().getString(R.string.alert_dialog_ok_delete);
+        mSolo.clickOnText(deleteConfirm);
+		mSolo.waitForDialogToClose(1000);
+        mSolo.sleep(1000);
+
+		assertEquals(0, transAdapter.getAllTransactionsCount());
+		
+		transAdapter.close();
+        mSolo.goBack();
+	}
+	
+	public void testShouldIgnoreExportedTransactions(){
+		testOfxExport();
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+		mSolo.clickOnCheckBox(0);
+		mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+
+		//the file name is time-based (down to the minute), so we cache it here, 
+		//as close as possible to the export itself to minimize chance of a different name 
+		//due to a different minute
+		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		
+		mSolo.waitForDialogToClose(10000);
+				
+		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+		assertNotNull(file);
+		assertTrue(file.exists());
+		//there should be something in the file (OFX headers, etc)
+		assertTrue(file.length() > 0);
+		
+		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
+		boolean isDeleted = file.delete();
+		assertTrue(isDeleted);		
+	}
+	
+	public void testExportAlreadyExportedTransactions(){
+		testOfxExport();
+        mSolo.clickOnActionBarItem(R.id.menu_export);
+//		ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_export);
+
+		mSolo.waitForText(getActivity().getString(R.string.menu_export_transactions));
+		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
+		mSolo.clickOnView(spinner);
+		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
+		mSolo.clickOnText(options[1]);
+        mSolo.clickOnRadioButton(1);
+
+		mSolo.clickOnCheckBox(0);
+        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
+		
+		//the file name is time-based (down to the minute), so we cache it here, 
+		//as close as possible to the export itself to minimize chance of a different name 
+		//due to a different minute
+		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		
+		mSolo.waitForDialogToClose(10000);		
+		
+		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
+		assertNotNull(file);
+		//the file will exist but not contain any account information
+		assertTrue(file.exists());
+
+		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
+		boolean isDeleted = file.delete();
+		assertTrue(isDeleted);		
+	}
+	
+	public void testValidityOfExport(){
+		//TODO: Validate exported file contents with an XML schema, if possible
+	}
+	
+	@Override
+	protected void tearDown() throws Exception {
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.deleteAllRecords();
+		adapter.close();
+		mSolo.finishOpenedActivities();
+		super.tearDown();
+	}
+}
