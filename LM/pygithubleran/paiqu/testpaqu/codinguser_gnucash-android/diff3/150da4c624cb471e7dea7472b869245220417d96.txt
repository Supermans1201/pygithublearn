From 291d36a0cdc842f39a5d04adb769b4a9aac38cf6 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 13 Sep 2015 18:42:13 +0800
Subject: [PATCH 1/7] remove decimal (intermediate) representation of price
 rate

---
 .../main/java/org/gnucash/android/model/Money.java | 18 ++++++++++---
 .../main/java/org/gnucash/android/model/Price.java | 31 ++++++++++++++++++++++
 .../dialog/TransferFundsDialogFragment.java        |  8 +++---
 3 files changed, 49 insertions(+), 8 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 9b2587eb..a7664239 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -252,8 +252,8 @@ private void setCurrency(Currency currency) {
 	 * <p>Example: Given an amount 32.50$, the numerator will be 3250</p>
 	 * @return GnuCash numerator for this amount
 	 */
-	public int getNumerator(){
-		return mAmount.multiply(new BigDecimal(getDenominator())).intValue();
+	public int getNumerator() {
+		return mAmount.scaleByPowerOfTen(mCurrency.getDefaultFractionDigits()).intValueExact();
 	}
 
 	/**
@@ -261,8 +261,18 @@ public int getNumerator(){
 	 * <p>The denominator is 10 raised to the power of number of fractional digits in the currency</p>
 	 * @return GnuCash format denominator
 	 */
-	public int getDenominator(){
-		return (int) Math.pow(10, mCurrency.getDefaultFractionDigits());
+	public int getDenominator() {
+		switch (mCurrency.getDefaultFractionDigits()) {
+			case 0:
+				return 1;
+			case 1:
+				return 10;
+			case 2:
+				return 100;
+			case 3:
+				return 1000;
+		}
+		throw new RuntimeException("Unsupported number of fraction digits");
 	}
 
 	/**
diff --git a/app/src/main/java/org/gnucash/android/model/Price.java b/app/src/main/java/org/gnucash/android/model/Price.java
index 4d3f8f00..2fb9c910 100644
--- a/app/src/main/java/org/gnucash/android/model/Price.java
+++ b/app/src/main/java/org/gnucash/android/model/Price.java
@@ -90,4 +90,35 @@ public int getValueDenom() {
     public void setValueDenom(int valueDenom) {
         this.mValueDenom = valueDenom;
     }
+
+    public void reduce() {
+        if (mValueDenom < 0) {
+            mValueDenom = -mValueDenom;
+            mValueNum = -mValueNum;
+        }
+        if (mValueDenom != 0 && mValueNum != 0) {
+            int num1 = mValueNum;
+            if (num1 < 0) {
+                num1 = -num1;
+            }
+            int num2 = mValueDenom;
+            int commonDivisor = 1;
+            for(;;) {
+                int r = num1 % num2;
+                if (r == 0) {
+                    commonDivisor = num2;
+                    break;
+                }
+                num1 = r;
+                r = num2 % num1;
+                if (r == 0) {
+                    commonDivisor = num1;
+                    break;
+                }
+                num2 = r;
+            }
+            mValueNum /= commonDivisor;
+            mValueDenom /= commonDivisor;
+        }
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index b90ab5cd..74d1813c 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -197,10 +197,10 @@ private void transferFunds(){
             Price price = new Price(commoditiesDbAdapter.getCommodityUID(mOriginAmount.getCurrency().getCurrencyCode()),
                     commoditiesDbAdapter.getCommodityUID(mTargetCurrency.getCurrencyCode()));
             price.setSource(Price.SOURCE_USER);
-            BigDecimal rateDecimal = mConvertedAmount.asBigDecimal().divide(mOriginAmount.asBigDecimal(), RoundingMode.HALF_EVEN);
-            Money rate = new Money(rateDecimal, mTargetCurrency); //the currency is irrelevant
-            price.setValueNum(rate.getNumerator());
-            price.setValueDenom(rate.getDenominator());
+            // fractions cannot be exacted represented by BigDecimal.
+            price.setValueNum(mConvertedAmount.getNumerator() * mOriginAmount.getDenominator());
+            price.setValueDenom(mOriginAmount.getNumerator() * mConvertedAmount.getDenominator());
+            price.reduce();
             pricesDbAdapter.addRecord(price);
 
             mOnTransferFundsListener.transferComplete(mConvertedAmount);

From ed192dc011d09b5717a98f21a755b9343b27b419 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 13 Sep 2015 23:17:56 +0800
Subject: [PATCH 2/7] import price table

---
 .../gnucash/android/export/xml/GncXmlHelper.java   |  9 +++
 .../gnucash/android/importer/GncXmlHandler.java    | 89 +++++++++++++++++++++-
 .../gnucash/android/importer/ImportAsyncTask.java  |  1 +
 .../main/java/org/gnucash/android/model/Money.java | 27 ++++++-
 4 files changed, 122 insertions(+), 4 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 1060fa77..65a42795 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -94,6 +94,15 @@
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
     public static final String TAG_SPLIT_SLOTS      = "split:slots";
 
+    public static final String TAG_PRICE = "price";
+    public static final String TAG_PRICE_ID = "price:id";
+    public static final String TAG_PRICE_COMMODITY = "price:commodity";
+    public static final String TAG_PRICE_CURRENCY = "price:currency";
+    public static final String TAG_PRICE_TIME = "price:time";
+    public static final String TAG_PRICE_SOURCE = "price:source";
+    public static final String TAG_PRICE_TYPE = "price:type";
+    public static final String TAG_PRICE_VALUE = "price:value";
+
     @Deprecated
     public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
 
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 98bed369..9a4bffb6 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -24,6 +24,8 @@
 import com.crashlytics.android.Crashlytics;
 
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.CommoditiesDbAdapter;
+import org.gnucash.android.db.PricesDbAdapter;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
@@ -32,6 +34,7 @@
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
+import org.gnucash.android.model.Price;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -142,6 +145,16 @@
     BigDecimal mValue;
 
     /**
+     * price table entry
+     */
+    Price mPrice;
+
+    boolean mPriceCommodity;
+    boolean mPriceCurrency;
+
+    List<Price> mPriceList;
+
+    /**
      * Whether the quantity is negative
      */
     boolean mNegativeQuantity;
@@ -213,6 +226,10 @@
 
     private ScheduledActionDbAdapter mScheduledActionsDbAdapter;
 
+    private CommoditiesDbAdapter mCommoditiesDbAdapter;
+
+    private PricesDbAdapter mPricesDbAdapter;
+
     /**
      * Creates a handler for handling XML stream events when parsing the XML backup file
      */
@@ -234,10 +251,14 @@ private void init(@Nullable SQLiteDatabase db) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
             mScheduledActionsDbAdapter = ScheduledActionDbAdapter.getInstance();
+            mCommoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
+            mPricesDbAdapter = PricesDbAdapter.getInstance();
         } else {
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
             mScheduledActionsDbAdapter = new ScheduledActionDbAdapter(db);
+            mCommoditiesDbAdapter = new CommoditiesDbAdapter(db);
+            mPricesDbAdapter = new PricesDbAdapter(db);
         }
 
         mContent = new StringBuilder();
@@ -252,6 +273,8 @@ private void init(@Nullable SQLiteDatabase db) {
         mTemplateAccountToTransactionMap = new HashMap<>();
 
         mAutoBalanceSplits = new ArrayList<>();
+
+        mPriceList = new ArrayList<>();
     }
 
     @Override
@@ -295,6 +318,19 @@ public void startElement(String uri, String localName,
             case GncXmlHelper.TAG_RX_START:
                 mIsRecurrenceStart = true;
                 break;
+            case GncXmlHelper.TAG_PRICE:
+                mPrice = new Price();
+                break;
+            case GncXmlHelper.TAG_PRICE_CURRENCY:
+                mPriceCurrency = true;
+                mPriceCommodity = false;
+                mISO4217Currency = false;
+                break;
+            case GncXmlHelper.TAG_PRICE_COMMODITY:
+                mPriceCurrency = false;
+                mPriceCommodity = true;
+                mISO4217Currency = false;
+                break;
         }
     }
 
@@ -327,6 +363,9 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             case GncXmlHelper.TAG_COMMODITY_SPACE:
                 if (characterString.equals("ISO4217")) {
                     mISO4217Currency = true;
+                } else {
+                    // price of non-ISO4217 commodities cannot be handled
+                    mPrice = null;
                 }
                 break;
             case GncXmlHelper.TAG_COMMODITY_ID:
@@ -337,6 +376,16 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 if (mTransaction != null) {
                     mTransaction.setCurrencyCode(currencyCode);
                 }
+                if (mPrice != null) {
+                    if (mPriceCommodity) {
+                        mPrice.setCommodityUID(mCommoditiesDbAdapter.getCommodityUID(currencyCode));
+                        mPriceCommodity = false;
+                    }
+                    if (mPriceCurrency) {
+                        mPrice.setCurrencyUID(mCommoditiesDbAdapter.getCommodityUID(currencyCode));
+                        mPriceCurrency = false;
+                    }
+                }
                 break;
             case GncXmlHelper.TAG_PARENT_UID:
                 mAccount.setParentUID(characterString);
@@ -457,6 +506,9 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                         mTransaction.setCreatedTimestamp(timestamp);
                         mIsDateEntered = false;
                     }
+                    if (mPrice != null) {
+                        mPrice.setDate(new Timestamp(GncXmlHelper.parseDate(characterString)));
+                    }
                 } catch (ParseException e) {
                     Crashlytics.logException(e);
                     String message = "Unable to parse transaction time - " + characterString;
@@ -628,6 +680,38 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 mRecurrenceMultiplier = 1; //reset it, even though it will be parsed from XML each time
                 mIgnoreScheduledAction = false;
                 break;
+            // price table
+            case GncXmlHelper.TAG_PRICE_ID:
+                mPrice.setUID(characterString);
+                break;
+            case GncXmlHelper.TAG_PRICE_SOURCE:
+                if (mPrice != null) {
+                    mPrice.setSource(characterString);
+                }
+                break;
+            case GncXmlHelper.TAG_PRICE_VALUE:
+                if (mPrice != null) {
+                    String[] parts = characterString.split("/");
+                    if (parts.length != 2) {
+                        String message = "Illegal price - " + characterString;
+                        Log.e(LOG_TAG, message);
+                        Crashlytics.log(message);
+                        throw new SAXException(message);
+                    } else {
+                        mPrice.setValueNum(Integer.valueOf(parts[0]));
+                        mPrice.setValueDenom(Integer.valueOf(parts[1]));
+                    }
+                }
+                break;
+            case GncXmlHelper.TAG_PRICE_TYPE:
+                if (mPrice != null) {
+                    mPrice.setType(characterString);
+                }
+            case GncXmlHelper.TAG_PRICE:
+                if (mPrice != null) {
+                    mPriceList.add(mPrice);
+                    mPrice = null;
+                }
         }
 
         //reset the accumulated characters
@@ -743,8 +827,11 @@ public void endDocument() throws SAXException {
             long nTransactions = mTransactionsDbAdapter.bulkAddRecords(mTransactionList);
             Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
 
+            long nPrices = mPricesDbAdapter.bulkAddRecords(mPriceList);
+            Log.d(getClass().getSimpleName(), String.format("%d prices inserted", nPrices));
+
             long endTime = System.nanoTime();
-            Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
+            Log.d(getClass().getSimpleName(), String.format("bulk insert time: %d", endTime - startTime));
 
             mAccountsDbAdapter.setTransactionSuccessful();
         } finally {
diff --git a/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
index 55c6f138..a0232003 100644
--- a/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
@@ -73,6 +73,7 @@ protected Boolean doInBackground(InputStream... inputStreams) {
         } catch (Exception exception){
             Log.e(ImportAsyncTask.class.getName(), "" + exception.getMessage());
             Crashlytics.logException(exception);
+            exception.printStackTrace();
 
             final String err_msg = exception.getLocalizedMessage();
             context.runOnUiThread(new Runnable() {
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index a7664239..9a4f8946 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -18,6 +18,7 @@
 
 
 import android.support.annotation.NonNull;
+import android.util.Log;
 
 import com.crashlytics.android.Crashlytics;
 
@@ -253,7 +254,14 @@ private void setCurrency(Currency currency) {
 	 * @return GnuCash numerator for this amount
 	 */
 	public int getNumerator() {
-		return mAmount.scaleByPowerOfTen(mCurrency.getDefaultFractionDigits()).intValueExact();
+		try {
+			return mAmount.scaleByPowerOfTen(getScale()).intValueExact();
+		} catch (ArithmeticException e) {
+			Log.e(getClass().getName(), "Currency " + mCurrency.getCurrencyCode() +
+					" with scale " + getScale() +
+					" has amount " + mAmount.toString());
+			throw e;
+		}
 	}
 
 	/**
@@ -262,7 +270,7 @@ public int getNumerator() {
 	 * @return GnuCash format denominator
 	 */
 	public int getDenominator() {
-		switch (mCurrency.getDefaultFractionDigits()) {
+		switch (getScale()) {
 			case 0:
 				return 1;
 			case 1:
@@ -271,8 +279,21 @@ public int getDenominator() {
 				return 100;
 			case 3:
 				return 1000;
+			case 4:
+				return 10000;
+		}
+		throw new RuntimeException("Unsupported number of fraction digits " + getScale());
+	}
+
+	private int getScale() {
+		int scale = mCurrency.getDefaultFractionDigits();
+		if (scale < 0) {
+			scale = mAmount.scale();
+		}
+		if (scale < 0) {
+			scale = 0;
 		}
-		throw new RuntimeException("Unsupported number of fraction digits");
+		return scale;
 	}
 
 	/**

From d4e439608095f36756eec97fbd13353cb543ab6e Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Mon, 14 Sep 2015 22:42:26 +0800
Subject: [PATCH 3/7] export price table

---
 .../gnucash/android/db/CommoditiesDbAdapter.java   | 15 ++++
 .../java/org/gnucash/android/export/Exporter.java  |  8 +++
 .../gnucash/android/export/xml/GncXmlExporter.java | 79 +++++++++++++++++++++-
 .../gnucash/android/export/xml/GncXmlHelper.java   |  1 +
 4 files changed, 101 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
index c23ab334..b1b442e1 100644
--- a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
@@ -117,4 +117,19 @@ public String getCommodityUID(String currencyCode){
             cursor.close();
         }
     }
+
+    public String getCurrencyCode(@NonNull String guid) {
+        Cursor cursor = mDb.query(mTableName, new String[]{CommodityEntry.COLUMN_MNEMONIC},
+                DatabaseSchema.CommonColumns.COLUMN_UID + " = ?", new String[]{guid},
+                null, null, null);
+        try {
+            if (cursor.moveToNext()) {
+                return cursor.getString(cursor.getColumnIndexOrThrow(CommodityEntry.COLUMN_MNEMONIC));
+            } else {
+                throw new IllegalArgumentException("guid " + guid + " not exits in commodity db");
+            }
+        } finally {
+            cursor.close();
+        }
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/export/Exporter.java b/app/src/main/java/org/gnucash/android/export/Exporter.java
index 94703e7f..41f04166 100644
--- a/app/src/main/java/org/gnucash/android/export/Exporter.java
+++ b/app/src/main/java/org/gnucash/android/export/Exporter.java
@@ -28,6 +28,8 @@
 import org.gnucash.android.BuildConfig;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.CommoditiesDbAdapter;
+import org.gnucash.android.db.PricesDbAdapter;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
@@ -90,6 +92,8 @@
     protected TransactionsDbAdapter mTransactionsDbAdapter;
     protected SplitsDbAdapter mSplitsDbAdapter;
     protected ScheduledActionDbAdapter mScheduledActionDbAdapter;
+    protected PricesDbAdapter mPricesDbAdpater;
+    protected CommoditiesDbAdapter mCommoditiesDbAdapter;
     protected Context mContext;
 
     public Exporter(ExportParams params, SQLiteDatabase db) {
@@ -100,11 +104,15 @@ public Exporter(ExportParams params, SQLiteDatabase db) {
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
             mSplitsDbAdapter = SplitsDbAdapter.getInstance();
             mScheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
+            mPricesDbAdpater = PricesDbAdapter.getInstance();
+            mCommoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
         } else {
             mSplitsDbAdapter = new SplitsDbAdapter(db);
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, mSplitsDbAdapter);
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
             mScheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
+            mPricesDbAdpater = new PricesDbAdapter(db);
+            mCommoditiesDbAdapter = new CommoditiesDbAdapter(db);
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index f76288fc..0122b820 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -23,6 +23,7 @@
 
 import com.crashlytics.android.Crashlytics;
 
+import org.gnucash.android.db.CommoditiesDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
@@ -114,6 +115,8 @@ private void exportSlots(XmlSerializer xmlSerializer,
     }
 
     private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
+        // gnucash desktop requires that parent account appears before its descendants.
+        // sort by full-name to fulfill the request
         Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null, DatabaseSchema.AccountEntry.COLUMN_FULL_NAME + " ASC");
         while (cursor.moveToNext()) {
             // write account
@@ -624,6 +627,67 @@ private void exportCommodity(XmlSerializer xmlSerializer, List<Currency> currenc
         }
     }
 
+    private void exportPrices(XmlSerializer xmlSerializer) throws IOException {
+        xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICEDB);
+        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, "1");
+        Cursor cursor = mPricesDbAdpater.fetchAllRecords();
+        try {
+            while(cursor.moveToNext()) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE);
+                // GUID
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_ID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.CommonColumns.COLUMN_UID)));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_ID);
+                // commodity
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.text("ISO4217");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);;
+                xmlSerializer.text(mCommoditiesDbAdapter.getCurrencyCode(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_COMMODITY_UID))));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
+                // currency
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.text("ISO4217");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);;
+                xmlSerializer.text(mCommoditiesDbAdapter.getCurrencyCode(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_CURRENCY_UID))));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
+                // time
+                String strDate = GncXmlHelper.formatDate(Timestamp.valueOf(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_DATE))).getTime());
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_TIME);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TS_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TS_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_TIME);
+                // source
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_SOURCE);
+                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_SOURCE)));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_SOURCE);
+                // type, optional
+                String type = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_TYPE));
+                if (type != null && !type.equals("")) {
+                    xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_TYPE);
+                    xmlSerializer.text(type);
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_TYPE);
+                }
+                // value
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_VALUE);
+                xmlSerializer.text(cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_VALUE_NUM))
+                                + "/" + cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_VALUE_DENOM)));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_VALUE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE);
+            }
+        } finally {
+            cursor.close();
+        }
+        xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICEDB);
+    }
+
     @Override
     public void generateExport(Writer writer) throws ExporterException{
         try {
@@ -671,10 +735,21 @@ public void generateExport(Writer writer) throws ExporterException{
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
             xmlSerializer.text(mTransactionsDbAdapter.getRecordsCount() + "");
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            //price count
+            long priceCount = mPricesDbAdpater.getRecordsCount();
+            if (priceCount > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "price");
+                xmlSerializer.text(priceCount + "");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            }
             // export the commodities used in the DB
             exportCommodity(xmlSerializer, currencies);
-            // accounts. bulk import does not rely on account order
-            // the cursor gather account in arbitrary order
+            // prices
+            if (priceCount > 0) {
+                exportPrices(xmlSerializer);
+            }
+            // accounts.
             exportAccounts(xmlSerializer);
             // transactions.
             exportTransactions(xmlSerializer, false);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 65a42795..470e8819 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -94,6 +94,7 @@
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
     public static final String TAG_SPLIT_SLOTS      = "split:slots";
 
+    public static final String TAG_PRICEDB = "gnc:princedb";
     public static final String TAG_PRICE = "price";
     public static final String TAG_PRICE_ID = "price:id";
     public static final String TAG_PRICE_COMMODITY = "price:commodity";

From 10c07584cb210a51c9da02ecab2e279c9218a778 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 15 Sep 2015 22:41:47 +0800
Subject: [PATCH 4/7] fix window leak when exporting xml

---
 .../main/java/org/gnucash/android/ui/export/ExportFormFragment.java   | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index e6fdc52c..33efa382 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -214,7 +214,9 @@ private void startExport(){
 		Log.i(TAG, "Commencing async export of transactions");
 		new ExportAsyncTask(getActivity()).execute(exportParameters);
 
-		getActivity().finish();
+		// finish the activity will cause the progress dialog to be leaked
+		// which would throw an exception
+		//getActivity().finish();
 	}
 
 	private void bindViews(){

From f1706428115cc1ad3a7cb1352b03599a35940d35 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 15 Sep 2015 22:59:26 +0800
Subject: [PATCH 5/7] fix typo

---
 app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 470e8819..50ce6f18 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -94,7 +94,7 @@
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
     public static final String TAG_SPLIT_SLOTS      = "split:slots";
 
-    public static final String TAG_PRICEDB = "gnc:princedb";
+    public static final String TAG_PRICEDB = "gnc:pricedb";
     public static final String TAG_PRICE = "price";
     public static final String TAG_PRICE_ID = "price:id";
     public static final String TAG_PRICE_COMMODITY = "price:commodity";

From 6995e9ca0a3684254f7d072f96cb94a242f189f7 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Wed, 16 Sep 2015 22:33:17 +0800
Subject: [PATCH 6/7] fix price table export bugs

remove price table before import
use long instead int for price num/denom
---
 .../org/gnucash/android/db/AccountsDbAdapter.java    |  1 +
 .../java/org/gnucash/android/db/PricesDbAdapter.java |  9 +++++----
 .../gnucash/android/export/xml/GncXmlExporter.java   |  4 ++--
 .../org/gnucash/android/importer/GncXmlHandler.java  |  8 ++++++--
 .../main/java/org/gnucash/android/model/Money.java   |  6 +++---
 .../main/java/org/gnucash/android/model/Price.java   | 20 ++++++++++----------
 6 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 293a7b9e..ec77cdc2 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1185,6 +1185,7 @@ public static int getActiveAccountColorResource(@NonNull String accountUID) {
 	 */
     @Override
 	public int deleteAllRecords() {
+        mDb.delete(DatabaseSchema.PriceEntry.TABLE_NAME, null, null);
         // Relies "ON DELETE CASCADE" takes too much time
         // It take more than 300s to complete the deletion on my dataset without
         // clearing the split table first, but only needs a little more that 1s
diff --git a/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
index 57b0337d..b03f1a92 100644
--- a/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
@@ -5,6 +5,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import android.support.annotation.NonNull;
+import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.Price;
@@ -67,15 +68,15 @@ public Price buildModelInstance(@NonNull final Cursor cursor) {
         String dateString   = cursor.getString(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_DATE));
         String source       = cursor.getString(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_SOURCE));
         String type         = cursor.getString(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_TYPE));
-        String valueNum     = cursor.getString(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_VALUE_NUM));
-        String valueDenom   = cursor.getString(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_VALUE_DENOM));
+        long valueNum     = cursor.getLong(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_VALUE_NUM));
+        long valueDenom   = cursor.getLong(cursor.getColumnIndexOrThrow(PriceEntry.COLUMN_VALUE_DENOM));
 
         Price price = new Price(commodityUID, currencyUID);
         price.setDate(Timestamp.valueOf(dateString));
         price.setSource(source);
         price.setType(type);
-        price.setValueNum(Integer.parseInt(valueNum));
-        price.setValueDenom(Integer.parseInt(valueDenom));
+        price.setValueNum(valueNum);
+        price.setValueDenom(valueDenom);
 
         populateBaseModelAttributes(cursor, price);
         return price;
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 0122b820..b154960f 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -649,14 +649,14 @@ private void exportPrices(XmlSerializer xmlSerializer) throws IOException {
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
                 // currency
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_CURRENCY);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
                 xmlSerializer.text("ISO4217");
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);;
                 xmlSerializer.text(mCommoditiesDbAdapter.getCurrencyCode(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_CURRENCY_UID))));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_COMMODITY);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PRICE_CURRENCY);
                 // time
                 String strDate = GncXmlHelper.formatDate(Timestamp.valueOf(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.PriceEntry.COLUMN_DATE))).getTime());
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_PRICE_TIME);
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 9a4bffb6..74fc95c9 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -698,8 +698,10 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                         Crashlytics.log(message);
                         throw new SAXException(message);
                     } else {
-                        mPrice.setValueNum(Integer.valueOf(parts[0]));
-                        mPrice.setValueDenom(Integer.valueOf(parts[1]));
+                        mPrice.setValueNum(Long.valueOf(parts[0]));
+                        mPrice.setValueDenom(Long.valueOf(parts[1]));
+                        Log.d(getClass().getName(), "price " + characterString +
+                        " .. " + mPrice.getValueNum() + "/" + mPrice.getValueDenom());
                     }
                 }
                 break;
@@ -707,11 +709,13 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 if (mPrice != null) {
                     mPrice.setType(characterString);
                 }
+                break;
             case GncXmlHelper.TAG_PRICE:
                 if (mPrice != null) {
                     mPriceList.add(mPrice);
                     mPrice = null;
                 }
+                break;
         }
 
         //reset the accumulated characters
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 9a4f8946..81a06b7a 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -253,9 +253,9 @@ private void setCurrency(Currency currency) {
 	 * <p>Example: Given an amount 32.50$, the numerator will be 3250</p>
 	 * @return GnuCash numerator for this amount
 	 */
-	public int getNumerator() {
+	public long getNumerator() {
 		try {
-			return mAmount.scaleByPowerOfTen(getScale()).intValueExact();
+			return mAmount.scaleByPowerOfTen(getScale()).longValueExact();
 		} catch (ArithmeticException e) {
 			Log.e(getClass().getName(), "Currency " + mCurrency.getCurrencyCode() +
 					" with scale " + getScale() +
@@ -269,7 +269,7 @@ public int getNumerator() {
 	 * <p>The denominator is 10 raised to the power of number of fractional digits in the currency</p>
 	 * @return GnuCash format denominator
 	 */
-	public int getDenominator() {
+	public long getDenominator() {
 		switch (getScale()) {
 			case 0:
 				return 1;
diff --git a/app/src/main/java/org/gnucash/android/model/Price.java b/app/src/main/java/org/gnucash/android/model/Price.java
index 2fb9c910..084da550 100644
--- a/app/src/main/java/org/gnucash/android/model/Price.java
+++ b/app/src/main/java/org/gnucash/android/model/Price.java
@@ -12,8 +12,8 @@
     private Timestamp mDate;
     private String mSource;
     private String mType;
-    private int mValueNum;
-    private int mValueDenom;
+    private long mValueNum;
+    private long mValueDenom;
 
     /**
      * String indicating that the price was provided by the user
@@ -75,19 +75,19 @@ public void setType(String type) {
         this.mType = type;
     }
 
-    public int getValueNum() {
+    public long getValueNum() {
         return mValueNum;
     }
 
-    public void setValueNum(int valueNum) {
+    public void setValueNum(long valueNum) {
         this.mValueNum = valueNum;
     }
 
-    public int getValueDenom() {
+    public long getValueDenom() {
         return mValueDenom;
     }
 
-    public void setValueDenom(int valueDenom) {
+    public void setValueDenom(long valueDenom) {
         this.mValueDenom = valueDenom;
     }
 
@@ -97,14 +97,14 @@ public void reduce() {
             mValueNum = -mValueNum;
         }
         if (mValueDenom != 0 && mValueNum != 0) {
-            int num1 = mValueNum;
+            long num1 = mValueNum;
             if (num1 < 0) {
                 num1 = -num1;
             }
-            int num2 = mValueDenom;
-            int commonDivisor = 1;
+            long num2 = mValueDenom;
+            long commonDivisor = 1;
             for(;;) {
-                int r = num1 % num2;
+                long r = num1 % num2;
                 if (r == 0) {
                     commonDivisor = num2;
                     break;

From afa93ee240cdcc998f11602c355a75fd84bbe105 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Wed, 16 Sep 2015 23:08:04 +0800
Subject: [PATCH 7/7] fix export bug for multi-currency transactions

---
 app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index b154960f..93dfb3e7 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -412,7 +412,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
             String splitQuantityNum = cursor.getString(cursor.getColumnIndexOrThrow("split_quantity_num"));
             String splitQuantityDenom = cursor.getString(cursor.getColumnIndexOrThrow("split_quantity_denom"));
             if (!exportTemplates) {
-                strValue = (trxType.equals("CREDIT") ? "-" : "") + splitValueNum + "/" + splitQuantityDenom;
+                strValue = (trxType.equals("CREDIT") ? "-" : "") + splitQuantityNum + "/" + splitQuantityDenom;
             }
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
             xmlSerializer.text(strValue);
