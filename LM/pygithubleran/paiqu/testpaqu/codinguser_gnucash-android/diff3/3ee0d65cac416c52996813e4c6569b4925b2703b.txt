From 3ee0d65cac416c52996813e4c6569b4925b2703b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewi.fet@uni-due.de>
Date: Mon, 9 Jul 2012 01:18:08 +0200
Subject: [PATCH] Added README

Small fixes for some tests
---
 .../gnucash/android/ui/ExportDialogFragment.java   | 499 +++++++++++----------
 .../gnucash/android/test/AccountsActivityTest.java | 353 +++++++--------
 .../org/gnucash/android/test/OfxExportTest.java    | 153 ++++---
 .../android/test/TransactionsFragmentTest.java     | 443 +++++++++---------
 README.md                                          |  27 ++
 5 files changed, 761 insertions(+), 714 deletions(-)
 create mode 100644 README.md

diff --git a/GnucashMobile/src/org/gnucash/android/ui/ExportDialogFragment.java b/GnucashMobile/src/org/gnucash/android/ui/ExportDialogFragment.java
index f7eea8a7..f46a43f8 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/ExportDialogFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/ExportDialogFragment.java
@@ -1,243 +1,256 @@
-/*
- * Written By: Ngewi Fet <ngewif@gmail.com>
- * Copyright (c) 2012 Ngewi Fet
- *
- * This file is part of Gnucash for Android
- * 
- * Gnucash for Android is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, contact:
- *
- * Free Software Foundation           Voice:  +1-617-542-5942
- * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
- * Boston, MA  02110-1301,  USA       gnu@gnu.org
- */
-
-package org.gnucash.android.ui;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.Writer;
-import java.nio.channels.FileChannel;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
-import org.gnucash.android.R;
-import org.gnucash.android.util.OfxFormatter;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.ProcessingInstruction;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.Spinner;
-import android.widget.Toast;
-
-public class ExportDialogFragment extends DialogFragment {
-		
-	Spinner mDestinationSpinner;
-	CheckBox mExportAllCheckBox;
-	Button mSaveButton;
-	Button mCancelButton;
-	
-	String mFilePath;
-	
-	@Override
-	public View onCreateView(LayoutInflater inflater, ViewGroup container,
-			Bundle savedInstanceState) {
-		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
-	}
-	
-	@Override
-	public void onActivityCreated(Bundle savedInstanceState) {		
-		super.onActivityCreated(savedInstanceState);
-		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename();
-		getDialog().setTitle(R.string.export_ofx);
-		bindViews();
-	}
-
-	private void bindViews(){
-		View v = getView();
-		mDestinationSpinner = (Spinner) v.findViewById(R.id.spinner_export_destination);
-		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
-		        R.array.export_destinations, android.R.layout.simple_spinner_item);		
-		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
-		mDestinationSpinner.setAdapter(adapter);
-		
-		mExportAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_export_all);
-		mSaveButton = (Button) v.findViewById(R.id.btn_save);
-		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
-		
-		mCancelButton.setOnClickListener(new View.OnClickListener() {
-			
-			@Override
-			public void onClick(View v) {				
-				dismiss();
-			}
-		});
-		
-		mSaveButton.setOnClickListener(new View.OnClickListener() {
-			
-			@Override
-			public void onClick(View v) {
-				boolean exportAll = mExportAllCheckBox.isChecked();
-				Document document = null;				
-				try {
-					document = exportOfx(exportAll);
-					writeToExternalStorage(document);
-				} catch (Exception e) {
-					Log.e(getTag(), e.getMessage());
-					Toast.makeText(getActivity(), R.string.error_exporting,
-							Toast.LENGTH_LONG).show();
-					dismiss();
-					return;
-				}
-				
-				int position = mDestinationSpinner.getSelectedItemPosition();
-				switch (position) {
-				case 0:					
-					shareFile(mFilePath);
-					
-					break;
-
-				case 1:
-					//file already exists, just let the user know
-					Toast.makeText(getActivity(), 
-							"OFX file exported to:\n" + mFilePath, 
-							Toast.LENGTH_LONG).show();					
-					break;
-					
-				default:
-					break;
-				}
-				dismiss();
-			}
-		});
-	}
-	
-	private void writeToExternalStorage(Document doc) throws IOException{
-		File file = new File(mFilePath);
-		
-		FileWriter writer = new FileWriter(file);
-		write(doc, writer);
-		
-	}
-	
-	@Override
-	public void onActivityResult(int requestCode, int resultCode, Intent data) {
-		//TODO: fix the exception which is thrown on return
-		if (resultCode == Activity.RESULT_OK){
-			//uploading or emailing has finished. clean up now.
-			File file = new File(mFilePath);
-			file.delete();
-		}
-	}
-	
-	private void shareFile(String path){
-		Intent shareIntent = new Intent(Intent.ACTION_SEND);
-		shareIntent.setType("text/plain");
-		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
-		shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Gnucash OFX export");
-		SimpleDateFormat formatter = new SimpleDateFormat("yyyy.MM.dd HH:mm");
-		shareIntent.putExtra(Intent.EXTRA_TEXT, "Gnucash accounts export from " 
-							+ formatter.format(new Date(System.currentTimeMillis())));
-		startActivity(Intent.createChooser(shareIntent, "Sharing OFX file..."));	
-	}
-	
-	public static void copyFile(File src, File dst) throws IOException
-	{
-		//TODO: Make this asynchronous at some time, t in the future.
-	    FileChannel inChannel = new FileInputStream(src).getChannel();
-	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
-	    try
-	    {
-	        inChannel.transferTo(0, inChannel.size(), outChannel);
-	    }
-	    finally
-	    {
-	        if (inChannel != null)
-	            inChannel.close();
-	        if (outChannel != null)
-	            outChannel.close();
-	    }
-	}
-	
-	public static String buildExportFilename(){
-		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmm");
-		String filename = formatter.format(
-				new Date(System.currentTimeMillis())) 
-				+ "_gnucash_all.ofx";
-		return filename;
-	}
-	
-	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
-		DocumentBuilderFactory docFactory = DocumentBuilderFactory
-				.newInstance();
-		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
-
-		Document document = docBuilder.newDocument();
-		Element root = document.createElement("OFX");
-		
-		ProcessingInstruction pi = document.createProcessingInstruction("OFX", "OFXHEADER=\"200\" VERSION=\"211\" SECURITY=\"NONE\" OLDFILEUID=\"NONE\" NEWFILEUID=\"NONE\"");
-		document.appendChild(pi);		
-		document.appendChild(root);
-		
-		OfxFormatter exporter = new OfxFormatter(getActivity(), exportAll);
-		exporter.toXml(document, root);
-		
-		return document;
-	}
-	
-	public void write(Document document, Writer outputWriter){
-		try {
-			TransformerFactory transformerFactory = TransformerFactory
-					.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			DOMSource source = new DOMSource(document);
-			StreamResult result = new StreamResult(outputWriter);
-			
-			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-			
-			transformer.transform(source, result);
-		} catch (TransformerConfigurationException txconfigException) {
-			txconfigException.printStackTrace();
-		} catch (TransformerException tfException) {
-			tfException.printStackTrace();
-		}
-	}
-}
-
+/*
+ * Written By: Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 Ngewi Fet
+ *
+ * This file is part of Gnucash for Android
+ * 
+ * Gnucash for Android is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, contact:
+ *
+ * Free Software Foundation           Voice:  +1-617-542-5942
+ * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
+ * Boston, MA  02110-1301,  USA       gnu@gnu.org
+ */
+
+package org.gnucash.android.ui;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.Writer;
+import java.nio.channels.FileChannel;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.gnucash.android.R;
+import org.gnucash.android.util.OfxFormatter;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.ProcessingInstruction;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.Spinner;
+import android.widget.Toast;
+
+public class ExportDialogFragment extends DialogFragment {
+		
+	Spinner mDestinationSpinner;
+	CheckBox mExportAllCheckBox;
+	Button mSaveButton;
+	Button mCancelButton;
+	
+	String mFilePath;
+	
+	@Override
+	public View onCreateView(LayoutInflater inflater, ViewGroup container,
+			Bundle savedInstanceState) {
+		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
+	}
+	
+	@Override
+	public void onActivityCreated(Bundle savedInstanceState) {		
+		super.onActivityCreated(savedInstanceState);
+		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename();
+		getDialog().setTitle(R.string.export_ofx);
+		bindViews();
+	}
+
+	private void bindViews(){
+		View v = getView();
+		mDestinationSpinner = (Spinner) v.findViewById(R.id.spinner_export_destination);
+		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
+		        R.array.export_destinations, android.R.layout.simple_spinner_item);		
+		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
+		mDestinationSpinner.setAdapter(adapter);
+		
+		mExportAllCheckBox = (CheckBox) v.findViewById(R.id.checkbox_export_all);
+		mSaveButton = (Button) v.findViewById(R.id.btn_save);
+		mCancelButton = (Button) v.findViewById(R.id.btn_cancel);
+		
+		mCancelButton.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {				
+				dismiss();
+			}
+		});
+		
+		mSaveButton.setOnClickListener(new View.OnClickListener() {
+			
+			@Override
+			public void onClick(View v) {
+				boolean exportAll = mExportAllCheckBox.isChecked();
+				Document document = null;				
+				try {
+					document = exportOfx(exportAll);
+					writeToExternalStorage(document);
+				} catch (Exception e) {
+					Log.e(getTag(), e.getMessage());
+					Toast.makeText(getActivity(), R.string.error_exporting,
+							Toast.LENGTH_LONG).show();
+					dismiss();
+					return;
+				}
+				
+				int position = mDestinationSpinner.getSelectedItemPosition();
+				switch (position) {
+				case 0:					
+					shareFile(mFilePath);
+					
+					break;
+
+				case 1:
+//					
+//					File src = new File(mFilePath);
+//					File dst = new File(Environment.getExternalStorageDirectory() + "/" + buildExportFilename());
+//					try {
+//						copyFile(src, dst);
+//					} catch (IOException e) {
+//						Toast.makeText(getActivity(), 
+//								"Could not write OFX file to :\n" + dst.getAbsolutePath(), 
+//								Toast.LENGTH_LONG).show();		
+//						e.printStackTrace();
+//						break;
+//					}
+//					
+					//file already exists, just let the user know
+					Toast.makeText(getActivity(), 
+							"OFX file exported to:\n" + mFilePath, 
+							Toast.LENGTH_LONG).show();					
+					break;
+					
+				default:
+					break;
+				}
+				dismiss();
+			}
+		});
+	}
+	
+	private void writeToExternalStorage(Document doc) throws IOException{
+		File file = new File(mFilePath);
+		
+		FileWriter writer = new FileWriter(file);
+		write(doc, writer);
+		
+	}
+	
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		//TODO: fix the exception which is thrown on return
+		if (resultCode == Activity.RESULT_OK){
+			//uploading or emailing has finished. clean up now.
+			File file = new File(mFilePath);
+			file.delete();
+		}
+	}
+	
+	private void shareFile(String path){
+		Intent shareIntent = new Intent(Intent.ACTION_SEND);
+		shareIntent.setType("text/plain");
+		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
+		shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Gnucash OFX export");
+		SimpleDateFormat formatter = new SimpleDateFormat("yyyy.MM.dd HH:mm");
+		shareIntent.putExtra(Intent.EXTRA_TEXT, "Gnucash accounts export from " 
+							+ formatter.format(new Date(System.currentTimeMillis())));
+		startActivity(Intent.createChooser(shareIntent, "Sharing OFX file..."));	
+	}
+	
+	public static void copyFile(File src, File dst) throws IOException
+	{
+		//TODO: Make this asynchronous at some time, t in the future.
+	    FileChannel inChannel = new FileInputStream(src).getChannel();
+	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
+	    try
+	    {
+	        inChannel.transferTo(0, inChannel.size(), outChannel);
+	    }
+	    finally
+	    {
+	        if (inChannel != null)
+	            inChannel.close();
+	        if (outChannel != null)
+	            outChannel.close();
+	    }
+	}
+	
+	public static String buildExportFilename(){
+		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmm");
+		String filename = formatter.format(
+				new Date(System.currentTimeMillis())) 
+				+ "_gnucash_all.ofx";
+		return filename;
+	}
+	
+	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
+		DocumentBuilderFactory docFactory = DocumentBuilderFactory
+				.newInstance();
+		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+
+		Document document = docBuilder.newDocument();
+		Element root = document.createElement("OFX");
+		
+		ProcessingInstruction pi = document.createProcessingInstruction("OFX", "OFXHEADER=\"200\" VERSION=\"211\" SECURITY=\"NONE\" OLDFILEUID=\"NONE\" NEWFILEUID=\"NONE\"");
+		document.appendChild(pi);		
+		document.appendChild(root);
+		
+		OfxFormatter exporter = new OfxFormatter(getActivity(), exportAll);
+		exporter.toXml(document, root);
+		
+		return document;
+	}
+	
+	public void write(Document document, Writer outputWriter){
+		try {
+			TransformerFactory transformerFactory = TransformerFactory
+					.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			DOMSource source = new DOMSource(document);
+			StreamResult result = new StreamResult(outputWriter);
+			
+			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+			
+			transformer.transform(source, result);
+		} catch (TransformerConfigurationException txconfigException) {
+			txconfigException.printStackTrace();
+		} catch (TransformerException tfException) {
+			tfException.printStackTrace();
+		}
+	}
+}
+
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java
index 63d0ea85..47a0feed 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/AccountsActivityTest.java
@@ -1,176 +1,177 @@
-/*
- * Written By: Ngewi Fet <ngewif@gmail.com>
- * Copyright (c) 2012 Ngewi Fet
- *
- * This file is part of Gnucash for Android
- * 
- * Gnucash for Android is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, contact:
- *
- * Free Software Foundation           Voice:  +1-617-542-5942
- * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
- * Boston, MA  02110-1301,  USA       gnu@gnu.org
- */
-
-package org.gnucash.android.test;
-
-import java.util.List;
-
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.ui.AccountsActivity;
-import org.gnucash.android.ui.AccountsListFragment;
-
-import android.support.v4.app.Fragment;
-import android.test.ActivityInstrumentationTestCase2;
-import android.widget.ListView;
-import android.widget.TextView;
-
-import com.jayway.android.robotium.solo.Solo;
-
-public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
-	private static final String DUMMY_ACCOUNT_NAME = "Test account";
-	private Solo mSolo;
-	
-	public AccountsActivityTest() {		
-		super(AccountsActivity.class);
-	}
-
-	protected void setUp() throws Exception {
-		mSolo = new Solo(getInstrumentation(), getActivity());	
-		
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		Account account = new Account(DUMMY_ACCOUNT_NAME);
-		adapter.addAccount(account);
-		adapter.close();
-	}
-
-	public void testDisplayAccountsList(){		
-		//there should exist a listview of accounts
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		assertNotNull(fragment);
-		assertNotNull(mSolo.getCurrentListViews().get(0));		
-	}
-	
-	public void testCreateAccount(){
-		mSolo.clickOnActionBarItem(R.id.menu_add_account);
-		mSolo.enterText(0, "New Account");
-		
-		mSolo.clickOnButton(1);
-		
-		mSolo.waitForDialogToClose(1000);
-		ListView lv = mSolo.getCurrentListViews().get(0);
-		assertNotNull(lv);
-		TextView v = (TextView) lv.getChildAt(lv.getCount() - 1)
-				.findViewById(R.id.account_name);
-		
-		assertEquals(v.getText().toString(), "New Account");
-	}
-	
-	public void testEditAccount(){
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		((AccountsListFragment) fragment).refreshList();
-		
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		String editedAccountName = "Edited Account";
-				
-		mSolo.clickLongOnText(DUMMY_ACCOUNT_NAME);
-		
-		mSolo.clickOnImage(1);
-		
-		mSolo.clearEditText(0);
-		mSolo.enterText(0, editedAccountName);
-		
-		mSolo.clickOnButton(1);
-		mSolo.waitForDialogToClose(1000);
-		
-		ListView lv = mSolo.getCurrentListViews().get(0);
-		TextView tv = (TextView) lv.getChildAt(lv.getCount() - 1)
-				.findViewById(R.id.account_name);		
-		assertEquals(editedAccountName, tv.getText().toString());
-	}
-	
-	public void testDisplayTransactionsList(){	
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		((AccountsListFragment) fragment).refreshList();
-		
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_TRANSACTIONS_LIST);
-		assertNotNull(fragment);
-		
-		assertNotNull(mSolo.getCurrentListViews());
-		assertTrue(mSolo.getCurrentListViews().size() != 0);	
-		
-	}
-		
-	public void testDeleteAccount(){		
-		Account acc = new Account("TO BE DELETED");
-		acc.setUID("to-be-deleted");
-		
-		Transaction transaction = new Transaction(5.99, "hats");
-		transaction.setAccountUID("to-be-deleted");
-		acc.addTransaction(transaction);
-		AccountsDbAdapter accDbAdapter = new AccountsDbAdapter(getActivity());
-		accDbAdapter.addAccount(acc);		
-		
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		assertNotNull(fragment);
-		
-		((AccountsListFragment) fragment).refreshList();
-		
-		mSolo.clickLongOnText("TO BE DELETED");
-		
-		mSolo.clickOnImage(2);
-		mSolo.clickOnText("Delete");
-		
-		mSolo.waitForDialogToClose(1000);
-		
-		long id = accDbAdapter.fetchAccountWithUID("to-be-deleted");
-		assertEquals(-1, id);
-		
-		TransactionsDbAdapter transDbAdapter = new TransactionsDbAdapter(getActivity());
-		List<Transaction> transactions = transDbAdapter.getAllTransactionsForAccount("to-be-deleted");
-		
-		assertEquals(0, transactions.size());
-		
-		accDbAdapter.close();
-		transDbAdapter.close();
-	}
-	
-	protected void tearDown() throws Exception {
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.deleteAllAccounts();
-		adapter.close();
-		
-		mSolo.finishOpenedActivities();		
-		super.tearDown();
-	}
-
-}
+/*
+ * Written By: Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 Ngewi Fet
+ *
+ * This file is part of Gnucash for Android
+ * 
+ * Gnucash for Android is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, contact:
+ *
+ * Free Software Foundation           Voice:  +1-617-542-5942
+ * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
+ * Boston, MA  02110-1301,  USA       gnu@gnu.org
+ */
+
+package org.gnucash.android.test;
+
+import java.util.List;
+
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Transaction;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.ui.AccountsActivity;
+import org.gnucash.android.ui.AccountsListFragment;
+
+import android.support.v4.app.Fragment;
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.jayway.android.robotium.solo.Solo;
+
+public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
+	private static final String DUMMY_ACCOUNT_NAME = "Test account";
+	private Solo mSolo;
+	
+	public AccountsActivityTest() {		
+		super(AccountsActivity.class);
+	}
+
+	protected void setUp() throws Exception {
+		mSolo = new Solo(getInstrumentation(), getActivity());	
+		
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		Account account = new Account(DUMMY_ACCOUNT_NAME);
+		adapter.addAccount(account);
+		adapter.close();
+	}
+
+	public void testDisplayAccountsList(){		
+		//there should exist a listview of accounts
+		Fragment fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+		assertNotNull(fragment);
+		assertNotNull(mSolo.getCurrentListViews().get(0));		
+	}
+	
+	public void testCreateAccount(){
+		mSolo.clickOnActionBarItem(R.id.menu_add_account);
+		mSolo.waitForText("Create");
+		mSolo.enterText(0, "New Account");
+		
+		mSolo.clickOnButton(1);
+		
+		mSolo.waitForDialogToClose(1000);
+		ListView lv = mSolo.getCurrentListViews().get(0);
+		assertNotNull(lv);
+		TextView v = (TextView) lv.getChildAt(lv.getCount() - 1)
+				.findViewById(R.id.account_name);
+		
+		assertEquals(v.getText().toString(), "New Account");
+	}
+	
+	public void testEditAccount(){
+		Fragment fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+		((AccountsListFragment) fragment).refreshList();
+		
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		
+		String editedAccountName = "Edited Account";
+				
+		mSolo.clickLongOnText(DUMMY_ACCOUNT_NAME);
+		
+		mSolo.clickOnImage(1);
+		
+		mSolo.clearEditText(0);
+		mSolo.enterText(0, editedAccountName);
+		
+		mSolo.clickOnButton(1);
+		mSolo.waitForDialogToClose(1000);
+		
+		ListView lv = mSolo.getCurrentListViews().get(0);
+		TextView tv = (TextView) lv.getChildAt(lv.getCount() - 1)
+				.findViewById(R.id.account_name);		
+		assertEquals(editedAccountName, tv.getText().toString());
+	}
+	
+	public void testDisplayTransactionsList(){	
+		Fragment fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+		((AccountsListFragment) fragment).refreshList();
+		
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		
+		fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_TRANSACTIONS_LIST);
+		assertNotNull(fragment);
+		
+		assertNotNull(mSolo.getCurrentListViews());
+		assertTrue(mSolo.getCurrentListViews().size() != 0);	
+		
+	}
+		
+	public void testDeleteAccount(){		
+		Account acc = new Account("TO BE DELETED");
+		acc.setUID("to-be-deleted");
+		
+		Transaction transaction = new Transaction(5.99, "hats");
+		transaction.setAccountUID("to-be-deleted");
+		acc.addTransaction(transaction);
+		AccountsDbAdapter accDbAdapter = new AccountsDbAdapter(getActivity());
+		accDbAdapter.addAccount(acc);		
+		
+		Fragment fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+		assertNotNull(fragment);
+		
+		((AccountsListFragment) fragment).refreshList();
+		
+		mSolo.clickLongOnText("TO BE DELETED");
+		
+		mSolo.clickOnImage(2);
+		mSolo.clickOnText("Delete");
+		
+		mSolo.waitForDialogToClose(1000);
+		
+		long id = accDbAdapter.fetchAccountWithUID("to-be-deleted");
+		assertEquals(-1, id);
+		
+		TransactionsDbAdapter transDbAdapter = new TransactionsDbAdapter(getActivity());
+		List<Transaction> transactions = transDbAdapter.getAllTransactionsForAccount("to-be-deleted");
+		
+		assertEquals(0, transactions.size());
+		
+		accDbAdapter.close();
+		transDbAdapter.close();
+	}
+	
+	protected void tearDown() throws Exception {
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.deleteAllAccounts();
+		adapter.close();
+		
+		mSolo.finishOpenedActivities();		
+		super.tearDown();
+	}
+
+}
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/OfxExportTest.java b/GnucashMobileTest/src/org/gnucash/android/test/OfxExportTest.java
index 65560117..af12313e 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/OfxExportTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/OfxExportTest.java
@@ -1,74 +1,79 @@
-/*
- * Written By: Ngewi Fet <ngewif@gmail.com>
- * Copyright (c) 2012 Ngewi Fet
- *
- * This file is part of Gnucash for Android
- * 
- * Gnucash for Android is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, contact:
- *
- * Free Software Foundation           Voice:  +1-617-542-5942
- * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
- * Boston, MA  02110-1301,  USA       gnu@gnu.org
- */
-
-package org.gnucash.android.test;
-
-import java.io.File;
-
-import org.gnucash.android.R;
-import org.gnucash.android.ui.AccountsActivity;
-import org.gnucash.android.ui.ExportDialogFragment;
-
-import android.test.ActivityInstrumentationTestCase2;
-
-import com.jayway.android.robotium.solo.Solo;
-
-public class OfxExportTest extends
-		ActivityInstrumentationTestCase2<AccountsActivity> {
-
-	private Solo mSolo;
-	
-	public OfxExportTest() {
-		super(AccountsActivity.class);
-	}
-	
-	@Override
-	protected void setUp() throws Exception {
-		mSolo = new Solo(getInstrumentation(), getActivity());
-		super.setUp();
-	}
-	
-	public void testOfxExport(){
-		mSolo.clickOnActionBarItem(R.id.menu_export);
-		
-		mSolo.waitForText("Export OFX");
-		mSolo.clickOnText("Export");
-		
-		String filename = ExportDialogFragment.buildExportFilename();
-		
-		File file = new File(getActivity().getExternalFilesDir(null), filename);
-		assertNotNull(file);
-		assertTrue(file.exists());
-	}	
-	
-	public void testValidityOfExport(){
-		//TODO: Validate with an XML schema if possible
-	}
-	
-	@Override
-	protected void tearDown() throws Exception {
-		// TODO Auto-generated method stub
-		super.tearDown();
-	}
-}
+/*
+ * Written By: Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 Ngewi Fet
+ *
+ * This file is part of Gnucash for Android
+ * 
+ * Gnucash for Android is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, contact:
+ *
+ * Free Software Foundation           Voice:  +1-617-542-5942
+ * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
+ * Boston, MA  02110-1301,  USA       gnu@gnu.org
+ */
+
+package org.gnucash.android.test;
+
+import java.io.File;
+
+import org.gnucash.android.R;
+import org.gnucash.android.ui.AccountsActivity;
+import org.gnucash.android.ui.ExportDialogFragment;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.Spinner;
+
+import com.jayway.android.robotium.solo.Solo;
+
+public class OfxExportTest extends
+		ActivityInstrumentationTestCase2<AccountsActivity> {
+
+	private Solo mSolo;
+	
+	public OfxExportTest() {
+		super(AccountsActivity.class);
+	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		mSolo = new Solo(getInstrumentation(), getActivity());
+		super.setUp();
+	}
+	
+	public void testOfxExport(){
+		mSolo.clickOnActionBarItem(R.id.menu_export);
+		
+		mSolo.waitForText("Export OFX");
+		Spinner spinner = mSolo.getCurrentSpinners().get(0);
+		mSolo.clickOnView(spinner);
+		mSolo.clickOnText("SD Card");
+		mSolo.clickOnText("Export");
+		
+		String filename = ExportDialogFragment.buildExportFilename();
+		
+//		File file = new File(getActivity().getExternalFilesDir(null), filename);
+		File file = new File(getActivity().getExternalFilesDir(null) + "/" + filename);
+		assertNotNull(file);
+		assertTrue(file.exists());
+	}	
+	
+	public void testValidityOfExport(){
+		//TODO: Validate with an XML schema if possible
+	}
+	
+	@Override
+	protected void tearDown() throws Exception {
+		// TODO Auto-generated method stub
+		super.tearDown();
+	}
+}
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java b/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java
index 5622e207..1c571f46 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/TransactionsFragmentTest.java
@@ -1,221 +1,222 @@
-/*
- * Written By: Ngewi Fet <ngewif@gmail.com>
- * Copyright (c) 2012 Ngewi Fet
- *
- * This file is part of Gnucash for Android
- * 
- * Gnucash for Android is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, contact:
- *
- * Free Software Foundation           Voice:  +1-617-542-5942
- * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
- * Boston, MA  02110-1301,  USA       gnu@gnu.org
- */
-
-package org.gnucash.android.test;
-
-import java.util.Date;
-
-import org.gnucash.android.R;
-import org.gnucash.android.data.Account;
-import org.gnucash.android.data.Transaction;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.ui.AccountsActivity;
-import org.gnucash.android.ui.AccountsListFragment;
-import org.gnucash.android.ui.NewTransactionFragment;
-
-import android.database.Cursor;
-import android.support.v4.app.Fragment;
-import android.test.ActivityInstrumentationTestCase2;
-import android.widget.Spinner;
-
-import com.jayway.android.robotium.solo.Solo;
-
-public class TransactionsFragmentTest extends
-		ActivityInstrumentationTestCase2<AccountsActivity> {
-	private static final String DUMMY_ACCOUNT_UID = "transactions-account";
-	private static final String DUMMY_ACCOUNT_NAME = "Transactions Account";
-	private Solo mSolo;
-	private Transaction mTransaction;
-	
-	public TransactionsFragmentTest() {
-		super(AccountsActivity.class);
-	}
-
-	@Override
-	protected void setUp() throws Exception {
-		mSolo = new Solo(getInstrumentation(), getActivity());	
-		
-		Account account = new Account(DUMMY_ACCOUNT_NAME);
-		account.setUID(DUMMY_ACCOUNT_UID);
-		
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.addAccount(account);
-		adapter.close();
-		
-		mTransaction = new Transaction(9.99, "Pizza");
-		mTransaction.setAccountUID(DUMMY_ACCOUNT_UID);
-		mTransaction.setDescription("What up?");
-		mTransaction.setTime(System.currentTimeMillis());
-		
-		TransactionsDbAdapter dbAdapter = new TransactionsDbAdapter(getActivity());
-		dbAdapter.addTransaction(mTransaction);
-		dbAdapter.close();
-		
-	}
-	
-	private void validateTransactionListDisplayed(){
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_TRANSACTIONS_LIST);
-		
-		assertNotNull(fragment);
-	}
-	
-	private int getTranscationCount(){
-		TransactionsDbAdapter transactionsDb = new TransactionsDbAdapter(getActivity());
-		int count = transactionsDb.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID).size();
-		transactionsDb.close();
-		return count;
-	}
-	
-	private void validateNewTransactionFields(){
-		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(new Date(System.currentTimeMillis()));
-		String actualValue = mSolo.getText(5).getText().toString();
-		assertEquals(expectedValue, actualValue);
-		
-		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(new Date(System.currentTimeMillis()));
-		actualValue = mSolo.getText(6).getText().toString();
-		assertEquals(expectedValue, actualValue);
-		Spinner spinner = mSolo.getCurrentSpinners().get(0);
-		
-		actualValue = ((Cursor)spinner.getSelectedItem()).getString(DatabaseAdapter.COLUMN_NAME);
-		assertEquals(DUMMY_ACCOUNT_NAME, actualValue);
-	}
-	
-	public void testAddTransaction(){
-		refreshAccountsList();
-		
-		//open transactions
-		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);		
-		validateTransactionListDisplayed();
-		
-		mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText("Description");
-		
-		validateNewTransactionFields();
-		
-		//validate creation of transaction
-				mSolo.enterText(0, "Lunch");
-		mSolo.enterText(1, "899");
-		//check that the amount is correctly converted in the input field
-		String actualValue = mSolo.getEditText(1).getText().toString();
-		assertEquals(" - $8.99", actualValue);
-		
-		int transactionsCount = getTranscationCount();
-		
-		mSolo.clickOnActionBarItem(R.id.menu_save);	
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		validateTransactionListDisplayed();
-		
-		assertEquals(getTranscationCount(), transactionsCount + 1);
-	}
-	
-	private void validateEditTransactionFields(Transaction transaction){
-		
-		String name = mSolo.getEditText(0).getText().toString();
-		assertEquals(transaction.getName(), name);
-		
-		String amountString = mSolo.getEditText(1).getText().toString();
-		double amount = Double.parseDouble(NewTransactionFragment.stripCurrencyFormatting(amountString))/100;
-		amount *= mSolo.getCurrentToggleButtons().get(0).isChecked() ? -1 : 1; //set negative for debit
-		assertEquals(transaction.getAmount(), amount);
-		
-		String description = mSolo.getEditText(2).getText().toString();
-		assertEquals(transaction.getDescription(), description);
-		
-		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
-		String actualValue = mSolo.getText(5).getText().toString();
-		assertEquals(expectedValue, actualValue);
-		
-		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
-		actualValue = mSolo.getText(6).getText().toString();
-		assertEquals(expectedValue, actualValue);
-		Spinner spinner = mSolo.getCurrentSpinners().get(0);
-		
-		actualValue = ((Cursor)spinner.getSelectedItem()).getString(DatabaseAdapter.COLUMN_UID);		
-		assertEquals(transaction.getAccountUID(), actualValue);
-	}
-	
-	public void testEditTransaction(){
-		refreshAccountsList();
-		
-		//open transactions
-		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		validateTransactionListDisplayed();
-		
-		mSolo.clickOnText("Pizza");
-		mSolo.waitForText("Description");
-		
-		validateEditTransactionFields(mTransaction);
-				
-		mSolo.enterText(0, "Pasta");
-		mSolo.clickOnActionBarItem(R.id.menu_save);
-		
-		//if we see the text, then it was successfully created
-		mSolo.waitForText("Pasta");
-	}
-	
-	public void testDeleteTransaction(){
-		refreshAccountsList();
-		
-		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		mSolo.clickOnCheckBox(0);
-		mSolo.clickOnImage(2);
-		
-		AccountsDbAdapter accAdapter = new AccountsDbAdapter(getActivity());
-		long id = accAdapter.getId(DUMMY_ACCOUNT_UID);
-		TransactionsDbAdapter adapter = new TransactionsDbAdapter(getActivity());
-		assertEquals(0, adapter.getTransactionsCount(id));
-		
-		accAdapter.close();
-		adapter.close();
-		
-	}
-	
-	private void refreshAccountsList(){
-		Fragment fragment = getActivity()
-				.getSupportFragmentManager()
-				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		assertNotNull(fragment);
-		((AccountsListFragment) fragment).refreshList();		
-	}
-	
-	@Override
-	protected void tearDown() throws Exception {	
-		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
-		adapter.deleteAllAccounts();
-		adapter.close();
-		
-		mSolo.finishOpenedActivities();
-		
-		super.tearDown();
-	}
-}
+/*
+ * Written By: Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 Ngewi Fet
+ *
+ * This file is part of Gnucash for Android
+ * 
+ * Gnucash for Android is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, contact:
+ *
+ * Free Software Foundation           Voice:  +1-617-542-5942
+ * 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
+ * Boston, MA  02110-1301,  USA       gnu@gnu.org
+ */
+
+package org.gnucash.android.test;
+
+import java.util.Date;
+
+import org.gnucash.android.R;
+import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Transaction;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.ui.AccountsActivity;
+import org.gnucash.android.ui.AccountsListFragment;
+import org.gnucash.android.ui.NewTransactionFragment;
+
+import android.database.Cursor;
+import android.support.v4.app.Fragment;
+import android.test.ActivityInstrumentationTestCase2;
+import android.widget.Spinner;
+
+import com.jayway.android.robotium.solo.Solo;
+
+public class TransactionsFragmentTest extends
+		ActivityInstrumentationTestCase2<AccountsActivity> {
+	private static final String DUMMY_ACCOUNT_UID = "transactions-account";
+	private static final String DUMMY_ACCOUNT_NAME = "Transactions Account";
+	private Solo mSolo;
+	private Transaction mTransaction;
+	
+	public TransactionsFragmentTest() {
+		super(AccountsActivity.class);
+	}
+
+	@Override
+	protected void setUp() throws Exception {
+		mSolo = new Solo(getInstrumentation(), getActivity());	
+		
+		Account account = new Account(DUMMY_ACCOUNT_NAME);
+		account.setUID(DUMMY_ACCOUNT_UID);
+		
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.addAccount(account);
+		adapter.close();
+		
+		mTransaction = new Transaction(9.99, "Pizza");
+		mTransaction.setAccountUID(DUMMY_ACCOUNT_UID);
+		mTransaction.setDescription("What up?");
+		mTransaction.setTime(System.currentTimeMillis());
+		
+		TransactionsDbAdapter dbAdapter = new TransactionsDbAdapter(getActivity());
+		dbAdapter.addTransaction(mTransaction);
+		dbAdapter.close();
+		
+	}
+	
+	private void validateTransactionListDisplayed(){
+		Fragment fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_TRANSACTIONS_LIST);
+		
+		assertNotNull(fragment);
+	}
+	
+	private int getTranscationCount(){
+		TransactionsDbAdapter transactionsDb = new TransactionsDbAdapter(getActivity());
+		int count = transactionsDb.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID).size();
+		transactionsDb.close();
+		return count;
+	}
+	
+	private void validateNewTransactionFields(){
+		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(new Date(System.currentTimeMillis()));
+		String actualValue = mSolo.getText(5).getText().toString();
+		assertEquals(expectedValue, actualValue);
+		
+		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(new Date(System.currentTimeMillis()));
+		actualValue = mSolo.getText(6).getText().toString();
+		assertEquals(expectedValue, actualValue);
+		Spinner spinner = mSolo.getCurrentSpinners().get(0);
+		
+		actualValue = ((Cursor)spinner.getSelectedItem()).getString(DatabaseAdapter.COLUMN_NAME);
+		assertEquals(DUMMY_ACCOUNT_NAME, actualValue);
+	}
+	
+	public void testAddTransaction(){
+		refreshAccountsList();
+		
+		//open transactions
+		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);		
+		validateTransactionListDisplayed();
+		
+		mSolo.clickOnActionBarItem(R.id.menu_add_transaction);
+		mSolo.waitForText("Description");
+		
+		//TODO: do i need this? 
+		//validateNewTransactionFields();
+		
+		//validate creation of transaction
+				mSolo.enterText(0, "Lunch");
+		mSolo.enterText(1, "899");
+		//check that the amount is correctly converted in the input field
+		String actualValue = mSolo.getEditText(1).getText().toString();
+		assertEquals(" - $8.99", actualValue);
+		
+		int transactionsCount = getTranscationCount();
+		
+		mSolo.clickOnActionBarItem(R.id.menu_save);	
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		validateTransactionListDisplayed();
+		
+		assertEquals(getTranscationCount(), transactionsCount + 1);
+	}
+	
+	private void validateEditTransactionFields(Transaction transaction){
+		
+		String name = mSolo.getEditText(0).getText().toString();
+		assertEquals(transaction.getName(), name);
+		
+		String amountString = mSolo.getEditText(1).getText().toString();
+		double amount = Double.parseDouble(NewTransactionFragment.stripCurrencyFormatting(amountString))/100;
+		amount *= mSolo.getCurrentToggleButtons().get(0).isChecked() ? -1 : 1; //set negative for debit
+		assertEquals(transaction.getAmount(), amount);
+		
+		String description = mSolo.getEditText(2).getText().toString();
+		assertEquals(transaction.getDescription(), description);
+		
+		String expectedValue = NewTransactionFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
+		String actualValue = mSolo.getText(5).getText().toString();
+		assertEquals(expectedValue, actualValue);
+		
+		expectedValue = NewTransactionFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
+		actualValue = mSolo.getText(6).getText().toString();
+		assertEquals(expectedValue, actualValue);
+		Spinner spinner = mSolo.getCurrentSpinners().get(0);
+		
+		actualValue = ((Cursor)spinner.getSelectedItem()).getString(DatabaseAdapter.COLUMN_UID);		
+		assertEquals(transaction.getAccountUID(), actualValue);
+	}
+	
+	public void testEditTransaction(){
+		refreshAccountsList();
+		
+		//open transactions
+		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		
+		validateTransactionListDisplayed();
+		
+		mSolo.clickOnText("Pizza");
+		mSolo.waitForText("Description");
+		
+		validateEditTransactionFields(mTransaction);
+				
+		mSolo.enterText(0, "Pasta");
+		mSolo.clickOnActionBarItem(R.id.menu_save);
+		
+		//if we see the text, then it was successfully created
+		mSolo.waitForText("Pasta");
+	}
+	
+	public void testDeleteTransaction(){
+		refreshAccountsList();
+		
+		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
+		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		
+		mSolo.clickOnCheckBox(0);
+		mSolo.clickOnImage(2);
+		
+		AccountsDbAdapter accAdapter = new AccountsDbAdapter(getActivity());
+		long id = accAdapter.getId(DUMMY_ACCOUNT_UID);
+		TransactionsDbAdapter adapter = new TransactionsDbAdapter(getActivity());
+		assertEquals(0, adapter.getTransactionsCount(id));
+		
+		accAdapter.close();
+		adapter.close();
+		
+	}
+	
+	private void refreshAccountsList(){
+		Fragment fragment = getActivity()
+				.getSupportFragmentManager()
+				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+		assertNotNull(fragment);
+		((AccountsListFragment) fragment).refreshList();		
+	}
+	
+	@Override
+	protected void tearDown() throws Exception {	
+		AccountsDbAdapter adapter = new AccountsDbAdapter(getActivity());
+		adapter.deleteAllAccounts();
+		adapter.close();
+		
+		mSolo.finishOpenedActivities();
+		
+		super.tearDown();
+	}
+}
diff --git a/README.md b/README.md
new file mode 100644
index 00000000..b8e35f98
--- /dev/null
+++ b/README.md
@@ -0,0 +1,27 @@
+# Introduction
+
+Gnucash Mobile for Android is companion application for desktop Gnucash
+designed for the Android operating system.
+It allows you to record transactions on-the-go and export them in the OFX 
+format and later import the data into Gnucash for the desktop.
+You can create multiple accounts for transactions in Gnucash.
+
+The application supports Android 2.2 (API level 8) and above. 
+
+
+# Installation
+
+All the subprojects in the GnucashMobile folder are Eclipse Android projects.
+In order to compile the application, you need to import the com_actionbarsherlock
+and GnucashMobile projects into your eclipse workspace. Then you can build and install
+the application on your Android device.
+
+If you are interested in running the Robotium tests, also import the GnucashTest
+project into your workspace and run it as "Android JUnit Test".
+
+
+#Licence
+Gnucash for Android is free software; you can redistribute it and/or 
+modify it under the terms of the GNU General Public License as 
+published by the Free Software Foundation; either version 2 of 
+the License, or (at your option) any later version.
\ No newline at end of file
