From 0ff839d07e555b9aa5247a74f2c69d1d10a74261 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Dec 2013 18:33:55 +0100
Subject: [PATCH] Improvement: Use tab views for sub-accounts and transactions

---
 app/pom.xml                                        |   7 +
 app/res/layout/activity_transactions.xml           |  36 +--
 app/res/menu/sub_account_actions.xml               |  27 ++
 app/res/values/colors.xml                          |   1 +
 .../org/gnucash/android/db/AccountsDbAdapter.java  |   4 +-
 app/src/org/gnucash/android/ui/Refreshable.java    |  34 +++
 .../android/ui/accounts/AccountsActivity.java      |   4 +-
 .../android/ui/accounts/AccountsListFragment.java  |  73 ++---
 .../ui/transactions/BulkMoveDialogFragment.java    |   3 +-
 .../ui/transactions/TransactionsActivity.java      | 306 +++++++++++++--------
 .../TransactionsDeleteConfirmationDialog.java      |   2 +-
 .../ui/transactions/TransactionsListFragment.java  |  17 +-
 .../util/QualifiedAccountNameCursorAdapter.java    |   5 +-
 .../android/test/ui/AccountsActivityTest.java      |   9 +-
 14 files changed, 336 insertions(+), 192 deletions(-)
 create mode 100644 app/res/menu/sub_account_actions.xml
 create mode 100644 app/src/org/gnucash/android/ui/Refreshable.java

diff --git a/app/pom.xml b/app/pom.xml
index 9e342425..b6e8e43c 100644
--- a/app/pom.xml
+++ b/app/pom.xml
@@ -29,6 +29,7 @@
 
     <properties>
         <abs.version>4.4.0</abs.version>
+        <viewpagerindicator.version>2.4.1</viewpagerindicator.version>
     </properties>
 
     <dependencies>
@@ -44,6 +45,12 @@
             <version>${abs.version}</version>
             <type>apklib</type>
         </dependency>
+        <dependency>
+            <groupId>com.viewpagerindicator</groupId>
+            <artifactId>library</artifactId>
+            <version>${viewpagerindicator.version}</version>
+            <type>apklib</type>
+        </dependency>
     </dependencies>
     <build>
         <sourceDirectory>src</sourceDirectory>
diff --git a/app/res/layout/activity_transactions.xml b/app/res/layout/activity_transactions.xml
index dbd3bbe1..cf93c874 100644
--- a/app/res/layout/activity_transactions.xml
+++ b/app/res/layout/activity_transactions.xml
@@ -16,29 +16,13 @@
 -->
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
               android:id="@+id/fragment_container"
               android:orientation="vertical"
               android:layout_width="match_parent"
               android:layout_height="match_parent">
 
     <TextView
-            android:id="@+id/section_header_sub_accounts"
-            android:layout_width="match_parent"
-            android:layout_height="@dimen/section_header_height"
-            android:paddingLeft="10dp"
-            android:background="@android:color/darker_gray"
-            android:textColor="@android:color/white"
-            android:visibility="gone"
-            android:text="@string/section_header_subaccounts"
-            />
-
-    <FrameLayout android:id="@+id/sub_accounts_container"
-                 android:layout_width="match_parent"
-                 android:layout_height="0dp"
-                 android:layout_weight="1"
-                 android:visibility="gone"/>
-
-    <TextView
             android:id="@+id/section_header_transactions"
             android:layout_width="match_parent"
             android:layout_height="@dimen/section_header_height"
@@ -48,10 +32,18 @@
             android:text="@string/section_header_transactions"
             />
 
-    <FrameLayout android:id="@+id/transactions_container"
-                 android:layout_width="match_parent"
-                 android:layout_height="0dp"
-                 android:layout_weight="3"
-                 />
+    <com.viewpagerindicator.TitlePageIndicator
+            android:id="@+id/titles"
+            android:layout_height="wrap_content"
+            android:layout_width="fill_parent"
+            android:textColor="@color/title_green"
+            app:footerColor="@color/title_green"
+            app:selectedColor="@color/title_green"
+            app:selectedBold="true"/>
+
+    <android.support.v4.view.ViewPager
+            android:id="@+id/pager"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
 
 </LinearLayout>
\ No newline at end of file
diff --git a/app/res/menu/sub_account_actions.xml b/app/res/menu/sub_account_actions.xml
new file mode 100644
index 00000000..6da5086a
--- /dev/null
+++ b/app/res/menu/sub_account_actions.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<menu xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item android:id="@+id/menu_add_account"
+          android:icon="@drawable/content_new_holo_dark"
+          android:title="@string/title_add_account"
+          android:showAsAction="always"/>
+
+    <item android:id="@+id/menu_edit_account"
+          android:icon="@drawable/content_edit_holo_dark"
+          android:title="@string/title_edit_account"
+          android:showAsAction="never|withText" />
+</menu>
\ No newline at end of file
diff --git a/app/res/values/colors.xml b/app/res/values/colors.xml
index aada90ef..d849dc37 100644
--- a/app/res/values/colors.xml
+++ b/app/res/values/colors.xml
@@ -19,4 +19,5 @@
     <color name="credit_green">#4cc552</color>
     <color name="light_gray">#FFAAAAAA</color>
     <color name="abs__holo_blue_light">#ff33b5e5</color>
+    <color name="title_green">#319D67</color>
 </resources>
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 463956c7..4ad1e583 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -194,8 +194,8 @@ public long getAccountID(String uid){
 				DatabaseHelper.KEY_UID + " = '" + uid + "'", null, null, null, null);
 		long result = -1;
 		if (cursor != null && cursor.moveToFirst()){
-			Log.d(TAG, "Account already exists. Returning existing id");
-			result = cursor.getLong(0); //0 because only one row was requested
+			Log.v(TAG, "Returning account id");
+			result = cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
 
 			cursor.close();
 		}
diff --git a/app/src/org/gnucash/android/ui/Refreshable.java b/app/src/org/gnucash/android/ui/Refreshable.java
new file mode 100644
index 00000000..f34a0e1e
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/Refreshable.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.ui;
+
+/**
+ * Interface for fragments which are refreshable
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public interface Refreshable {
+
+    /**
+     * Refresh the list, typically be restarting the loader
+     */
+    public void refresh();
+
+    /**
+     * Refresh the list with modified parameters
+     * @param id Record ID of relevant item to be refreshed
+     */
+    public void refresh(long id);
+}
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index 78de6c48..80d0a5b5 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -147,7 +147,7 @@ public void onCreate(Bundle savedInstanceState) {
 
                 fragmentTransaction.commit();
             } else
-                accountsListFragment.refreshList();
+                accountsListFragment.refresh();
         }
 
         if (hasNewFeatures()){
@@ -365,7 +365,7 @@ public void onClick(DialogInterface dialog, int which) {
 				Fragment fragment = getSupportFragmentManager().findFragmentByTag(FRAGMENT_ACCOUNTS_LIST);
 				if (fragment != null){
 					try{
-						((AccountsListFragment) fragment).refreshList();
+						((AccountsListFragment) fragment).refresh();
 					} catch (ClassCastException e) {
 						Log.e(TAG, e.getMessage());
 					}
diff --git a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
index 2c409535..60360c36 100644
--- a/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AccountsListFragment.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,6 +55,7 @@
 import org.gnucash.android.data.Money;
 import org.gnucash.android.db.*;
 import org.gnucash.android.export.ExportDialogFragment;
+import org.gnucash.android.ui.Refreshable;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
@@ -69,6 +70,7 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class AccountsListFragment extends SherlockListFragment implements
+        Refreshable,
         LoaderCallbacks<Cursor>, OnItemLongClickListener,
         com.actionbarsherlock.widget.SearchView.OnQueryTextListener,
         com.actionbarsherlock.widget.SearchView.OnCloseListener {
@@ -119,7 +121,6 @@
     /**
      * Database record ID of the account whose children will be loaded by the list fragment.
      * If no parent account is specified, then all top-level accounts are loaded.
-     * <p>This value is set in {@link #inSubAcccount()}, so always call that method first before using this value</p>
      */
     private long mParentAccountId = -1;
 
@@ -216,8 +217,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
             actionbar.setDisplayHomeAsUpEnabled(false);
         }
 
-        if (!inSubAcccount())
-            setHasOptionsMenu(true);
+        setHasOptionsMenu(true);
 
         ListView lv = getListView();
         lv.setOnItemLongClickListener(this);
@@ -228,7 +228,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
     @Override
     public void onResume() {
         super.onResume();
-        refreshList();
+        refresh();
     }
 
     @Override
@@ -273,15 +273,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_CANCELED)
             return;
 
-        refreshList();
-    }
-
-    /**
-     * Returns true if this fragment is currently rendering sub-accounts. false otherwise.
-     * @return true if this fragment is currently rendering sub-accounts. false otherwise
-     */
-    public boolean inSubAcccount(){
-        return mParentAccountId > 0;
+        refresh();
     }
 
     /**
@@ -314,7 +306,7 @@ protected void deleteAccount(long rowId) {
             WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
             getLoaderManager().destroyLoader(0);
         }
-        refreshList();
+        refresh();
     }
 
     /**
@@ -341,20 +333,23 @@ public void finishEditMode() {
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.account_actions, menu);
-
-        // Associate searchable configuration with the SearchView
-        SearchManager searchManager =
-                (SearchManager) getActivity().getSystemService(Context.SEARCH_SERVICE);
-        mSearchView =
-                (com.actionbarsherlock.widget.SearchView) menu.findItem(R.id.menu_search).getActionView();
-        if (mSearchView == null)
-            return;
-
-        mSearchView.setSearchableInfo(
-                searchManager.getSearchableInfo(getActivity().getComponentName()));
-        mSearchView.setOnQueryTextListener(this);
-        mSearchView.setOnCloseListener(this);
+        if (mParentAccountId > 0)
+            inflater.inflate(R.menu.sub_account_actions, menu);
+        else {
+            inflater.inflate(R.menu.account_actions, menu);
+            // Associate searchable configuration with the SearchView
+            SearchManager searchManager =
+                    (SearchManager) getActivity().getSystemService(Context.SEARCH_SERVICE);
+            mSearchView =
+                    (com.actionbarsherlock.widget.SearchView) menu.findItem(R.id.menu_search).getActionView();
+            if (mSearchView == null)
+                return;
+
+            mSearchView.setSearchableInfo(
+                    searchManager.getSearchableInfo(getActivity().getComponentName()));
+            mSearchView.setOnQueryTextListener(this);
+            mSearchView.setOnCloseListener(this);
+        }
     }
 
     @Override
@@ -362,7 +357,14 @@ public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
 
             case R.id.menu_add_account:
-                showAddAccountFragment(0);
+                if (mParentAccountId > 0){
+                    Intent addAccountIntent = new Intent(getActivity(), AccountsActivity.class);
+                    addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+                    addAccountIntent.putExtra(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mParentAccountId);
+                    startActivityForResult(addAccountIntent, REQUEST_EDIT_ACCOUNT);
+                } else {
+                    showAddAccountFragment(mParentAccountId);
+                }
                 return true;
 
             case R.id.menu_export:
@@ -378,21 +380,20 @@ public boolean onOptionsItemSelected(MenuItem item) {
         }
     }
 
-    public void refreshList(long parentAccountId) {
+    @Override
+    public void refresh(long parentAccountId) {
         getArguments().putLong(ARG_PARENT_ACCOUNT_ID, parentAccountId);
-        refreshList();
+        refresh();
     }
 
     /**
      * Refreshes the list by restarting the {@link DatabaseCursorLoader} associated
      * with the ListView
      */
-    public void refreshList() {
+    @Override
+    public void refresh() {
         getLoaderManager().restartLoader(0, null, this);
 
-        if (getActivity() instanceof TransactionsActivity){
-            ((TransactionsActivity)getActivity()).updateSubAccountsView();
-        }
 /*
         //TODO: Figure out a way to display account balances per currency
 		boolean doubleEntryActive = PreferenceManager.getDefaultSharedPreferences(getActivity())
diff --git a/app/src/org/gnucash/android/ui/transactions/BulkMoveDialogFragment.java b/app/src/org/gnucash/android/ui/transactions/BulkMoveDialogFragment.java
index b9a14401..0dbcfd5e 100644
--- a/app/src/org/gnucash/android/ui/transactions/BulkMoveDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/BulkMoveDialogFragment.java
@@ -18,7 +18,6 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
@@ -148,7 +147,7 @@ public void onClick(View v) {
 						.findFragmentByTag(TransactionsActivity.FRAGMENT_TRANSACTIONS_LIST);
 					
 				WidgetConfigurationActivity.updateAllWidgets(getActivity());
-				((TransactionsListFragment)f).refreshList();
+				((TransactionsListFragment)f).refresh();
 				dismiss();
 			}			
 		});
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index b1da8522..9205a161 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,12 +20,13 @@
 import android.content.Intent;
 import android.database.Cursor;
 import android.os.Bundle;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
+import android.support.v4.app.*;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
 import android.support.v4.widget.ResourceCursorAdapter;
-import android.support.v4.widget.SimpleCursorAdapter;
 import android.util.Log;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
 import android.widget.SpinnerAdapter;
 import android.widget.TextView;
@@ -33,23 +34,27 @@
 import com.actionbarsherlock.app.ActionBar.OnNavigationListener;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.view.MenuItem;
+import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.ui.Refreshable;
 import org.gnucash.android.ui.accounts.AccountsActivity;
 import org.gnucash.android.ui.accounts.AccountsListFragment;
 import org.gnucash.android.util.OnAccountClickedListener;
 import org.gnucash.android.util.OnTransactionClickedListener;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Activity for displaying, creating and editing transactions
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class TransactionsActivity extends SherlockFragmentActivity implements
-        OnAccountClickedListener, OnTransactionClickedListener{
+        Refreshable, OnAccountClickedListener, OnTransactionClickedListener{
 
 	/**
 	 * Logging tag
@@ -69,6 +74,32 @@
     private static final int REQUEST_EDIT_ACCOUNT           = 0x21;
 
     /**
+     * ViewPager index for sub-accounts fragment
+     */
+    private static final int INDEX_SUB_ACCOUNTS_FRAGMENT     = 0;
+
+    /**
+     * ViewPager index for transactions fragment
+     */
+    private static final int INDEX_TRANSACTIONS_FRAGMENT     = 1;
+
+    /**
+     * Number of pages to show
+     */
+    private static final int DEFAULT_NUM_PAGES = 2;
+
+    /**
+     * Pager widget for swiping horizontally between views
+     */
+    private ViewPager mPager;
+
+    /**
+     * Provides the pages to the view pager widget
+     */
+    private PagerAdapter mPagerAdapter;
+
+
+    /**
 	 * Database ID of {@link Account} whose transactions are displayed 
 	 */
 	private long mAccountId 	= 0;
@@ -92,17 +123,16 @@
      */
     private SpinnerAdapter mSpinnerAdapter;
 
-    TextView mSectionHeaderSubAccounts;
-    TextView mSectionHeaderTransactions;
-    View mSubAccountsContainer;
-    View mTransactionsContainer;
+    private TextView mSectionHeaderTransactions;
+    private TitlePageIndicator mTitlePageIndicator;
+
+    private Map<Integer, Refreshable> mFragmentPageReferenceMap = new HashMap();
 
 	private OnNavigationListener mTransactionListNavigationListener = new OnNavigationListener() {
 
 		  @Override
 		  public boolean onNavigationItemSelected(int position, long itemId) {
 			mAccountId = itemId;
-            updateSubAccountsView();
 
             FragmentManager fragmentManager = getSupportFragmentManager();
 
@@ -116,68 +146,151 @@ public boolean onNavigationItemSelected(int position, long itemId) {
 		    }
 
             refresh();
-
             return true;
 		  }
 	};
 
-    /**
-     * Refreshes the fragments currently in the transactions activity
-     */
-    private void refresh() {
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        TransactionsListFragment transactionsListFragment = (TransactionsListFragment) fragmentManager
-                .findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);
-        if (transactionsListFragment != null) {
-            transactionsListFragment.refreshList(mAccountId);
+
+
+
+    private class AccountViewPagerAdapter extends FragmentStatePagerAdapter {
+
+        public AccountViewPagerAdapter(FragmentManager fm){
+            super(fm);
         }
 
-        AccountsListFragment subAccountsListFragment = (AccountsListFragment) fragmentManager
-                .findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-        if (subAccountsListFragment != null) {
-            subAccountsListFragment.refreshList(mAccountId);
-        } else {
-            subAccountsListFragment = new AccountsListFragment();
+        @Override
+        public Fragment getItem(int i) {
+            if (isPlaceHolderAccount()){
+                Fragment transactionsListFragment = prepareSubAccountsListFragment();
+                mFragmentPageReferenceMap.put(i, (Refreshable) transactionsListFragment);
+                return transactionsListFragment;
+            }
+
+            Fragment currentFragment;
+            switch (i){
+                case INDEX_SUB_ACCOUNTS_FRAGMENT:
+                    currentFragment = prepareSubAccountsListFragment();
+                    break;
+
+                case INDEX_TRANSACTIONS_FRAGMENT:
+                default:
+                    currentFragment = prepareTransactionsListFragment();
+                    break;
+            }
+
+            mFragmentPageReferenceMap.put(i, (Refreshable)currentFragment);
+            return currentFragment;
+        }
+
+        @Override
+        public void destroyItem(ViewGroup container, int position, Object object) {
+            super.destroyItem(container, position, object);
+            mFragmentPageReferenceMap.remove(position);
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            if (isPlaceHolderAccount())
+                return getString(R.string.section_header_subaccounts);
+
+            switch (position){
+                case INDEX_SUB_ACCOUNTS_FRAGMENT:
+                    return getString(R.string.section_header_subaccounts);
+
+                case INDEX_TRANSACTIONS_FRAGMENT:
+                default:
+                    return getString(R.string.section_header_transactions);
+            }
+        }
+
+        @Override
+        public int getCount() {
+            if (isPlaceHolderAccount())
+                return 1;
+            else
+                return DEFAULT_NUM_PAGES;
+        }
+
+        /**
+         * Creates and initializes the fragment for displaying sub-account list
+         * @return {@link AccountsListFragment} initialized with the sub-accounts
+         */
+        private AccountsListFragment prepareSubAccountsListFragment(){
+            AccountsListFragment subAccountsListFragment = new AccountsListFragment();
             Bundle args = new Bundle();
             args.putLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mAccountId);
             subAccountsListFragment.setArguments(args);
-            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-            fragmentTransaction.replace(R.id.sub_accounts_container, subAccountsListFragment, AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-            fragmentTransaction.commit();
+            return subAccountsListFragment;
+        }
+
+        /**
+         * Creates and initializes fragment for displaying transactions
+         * @return {@link TransactionsListFragment} initialized with the current account transactions
+         */
+        private TransactionsListFragment prepareTransactionsListFragment(){
+            TransactionsListFragment transactionsListFragment = new TransactionsListFragment();
+            Bundle args = new Bundle();
+            args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID,
+                    mAccountId);
+            transactionsListFragment.setArguments(args);
+            Log.i(TAG, "Opening transactions for account id " +  mAccountId);
+            return transactionsListFragment;
         }
     }
-				
+
+    /**
+     * Returns <code>true</code> is the current account is a placeholder account, <code>false</code> otherwise.
+     * @return <code>true</code> is the current account is a placeholder account, <code>false</code> otherwise.
+     */
+    private boolean isPlaceHolderAccount(){
+        return mAccountsDbAdapter.isPlaceholderAccount(mAccountId);
+    }
+
+    /**
+     * Refreshes the fragments currently in the transactions activity
+     */
+    @Override
+    public void refresh(long accountId) {
+        for (Refreshable refreshableFragment : mFragmentPageReferenceMap.values()) {
+            refreshableFragment.refresh(accountId);
+        }
+        mTitlePageIndicator.notifyDataSetChanged();
+    }
+
+    @Override
+    public void refresh(){
+        refresh(mAccountId);
+    }
+
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_transactions);
 
-        mSectionHeaderSubAccounts = (TextView) findViewById(R.id.section_header_sub_accounts);
+        mPager = (ViewPager) findViewById(R.id.pager);
+        mTitlePageIndicator = (TitlePageIndicator) findViewById(R.id.titles);
         mSectionHeaderTransactions = (TextView) findViewById(R.id.section_header_transactions);
-        mSubAccountsContainer = findViewById(R.id.sub_accounts_container);
-        mTransactionsContainer = findViewById(R.id.transactions_container);
 
-		final Intent intent = getIntent();
-		mAccountId = intent.getLongExtra(
-				TransactionsListFragment.SELECTED_ACCOUNT_ID, -1);
+
+		mAccountId = getIntent().getLongExtra(
+                TransactionsListFragment.SELECTED_ACCOUNT_ID, -1);
 
 		setupActionBarNavigation();
-		
-		if (intent.getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {
-			long transactionId = intent.getLongExtra(
-					NewTransactionFragment.SELECTED_TRANSACTION_ID, -1);
-            Bundle args = new Bundle();
-            if (transactionId > 0) {
-                mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
-                args.putLong(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
-                args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
-            } else {
-                mSectionHeaderTransactions.setText(R.string.title_add_transaction);
-                args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
-            }
-            showTransactionFormFragment(args);
+
+		if (getIntent().getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {
+            mPager.setVisibility(View.GONE);
+            mTitlePageIndicator.setVisibility(View.GONE);
+
+            initializeCreateOrEditTransaction();
         } else {	//load the transactions list
-            showTransactionsList();
+            mSectionHeaderTransactions.setVisibility(View.GONE);
+
+            mPagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
+            mPager.setAdapter(mPagerAdapter);
+            mTitlePageIndicator.setViewPager(mPager);
+
+            mPager.setCurrentItem(INDEX_TRANSACTIONS_FRAGMENT);
 		}
 
 		// done creating, activity now running
@@ -185,6 +298,23 @@ protected void onCreate(Bundle savedInstanceState) {
 	}
 
     /**
+     * Loads the fragment for creating/editing transactions and initializes it to be displayed
+     */
+    private void initializeCreateOrEditTransaction() {
+        long transactionId = getIntent().getLongExtra(NewTransactionFragment.SELECTED_TRANSACTION_ID, -1);
+        Bundle args = new Bundle();
+        if (transactionId > 0) {
+            mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
+            args.putLong(NewTransactionFragment.SELECTED_TRANSACTION_ID, transactionId);
+            args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
+        } else {
+            mSectionHeaderTransactions.setText(R.string.title_add_transaction);
+            args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
+        }
+        showTransactionFormFragment(args);
+    }
+
+    /**
 	 * Set up action bar navigation list and listener callbacks
 	 */
 	private void setupActionBarNavigation() {
@@ -212,7 +342,6 @@ public void updateNavigationSelection() {
 		// set the selected item in the spinner
 		int i = 0;
 		Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecords();
-//		boolean cursorMoved = accountsCursor.moveToFirst();
         while (accountsCursor.moveToNext()) {
             long id = accountsCursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
             if (mAccountId == id) {
@@ -224,27 +353,6 @@ public void updateNavigationSelection() {
         accountsCursor.close();
 	}
 
-    /**
-     * Toggles visibility of the sub-accounts fragment depending on if there are sub-accounts to display or not.
-     */
-    public void updateSubAccountsView() {
-        final String action = getIntent().getAction();
-        if (action != null && action.equals(Intent.ACTION_INSERT_OR_EDIT))
-            return;
-
-        int subAccountCount = mAccountsDbAdapter.getSubAccountCount(mAccountId);
-        if (subAccountCount > 0) {
-            mSubAccountsContainer.setVisibility(View.VISIBLE);
-            mSectionHeaderSubAccounts.setVisibility(View.VISIBLE);
-            String subAccountSectionText = getResources().getQuantityString(
-                    R.plurals.label_sub_accounts, subAccountCount, subAccountCount);
-            mSectionHeaderSubAccounts.setText(subAccountSectionText);
-        } else {
-            mSectionHeaderSubAccounts.setVisibility(View.GONE);
-            mSubAccountsContainer.setVisibility(View.GONE);
-        }
-    }
-
     @Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
@@ -303,49 +411,19 @@ public long getCurrentAccountID(){
 	public void onNewTransactionClick(View v){
 		createNewTransaction(mAccountId);
 	}
-	
-	/**
-	 * Show list of transactions. Loads {@link TransactionsListFragment} 
-	 */
-	protected void showTransactionsList(){
-        FragmentManager fragmentManager = getSupportFragmentManager();
 
-        FragmentTransaction fragmentTransaction = fragmentManager
-                .beginTransaction();
-
-        int subAccountCount = mAccountsDbAdapter.getSubAccountCount(mAccountId);
-        boolean isPlaceholderAccount = mAccountsDbAdapter.isPlaceholderAccount(mAccountId);
-
-        if (subAccountCount > 0 || isPlaceholderAccount){
-            mSubAccountsContainer.setVisibility(View.VISIBLE);
-            mSectionHeaderSubAccounts.setVisibility(View.VISIBLE);
-            String subAccountSectionText = getResources().getQuantityString(R.plurals.label_sub_accounts, subAccountCount, subAccountCount);
-            mSectionHeaderSubAccounts.setText(subAccountSectionText);
-            AccountsListFragment subAccountsListFragment = new AccountsListFragment();
-            Bundle args = new Bundle();
-            args.putLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mAccountId);
-            subAccountsListFragment.setArguments(args);
-            fragmentTransaction.replace(R.id.sub_accounts_container, subAccountsListFragment, AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-        }
 
-        //only load transactions if it is not a placeholder account
-        if (!isPlaceholderAccount){
-            TransactionsListFragment transactionsListFragment = new TransactionsListFragment();
-            Bundle args = new Bundle();
-            args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID,
-                    mAccountId);
-            transactionsListFragment.setArguments(args);
-            Log.i(TAG, "Opening transactions for account id " +  mAccountId);
+    /**
+     * Opens a dialog fragment to create a new account which is a sub account of the current account
+     * @param v View which triggered this callback
+     */
+    public void onNewAccountClick(View v) {
+        Intent addAccountIntent = new Intent(this, AccountsActivity.class);
+        addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
+        addAccountIntent.putExtra(AccountsListFragment.ARG_PARENT_ACCOUNT_ID, mAccountId);
+        startActivityForResult(addAccountIntent, REQUEST_EDIT_ACCOUNT);
+    }
 
-            fragmentTransaction.replace(R.id.transactions_container,
-                    transactionsListFragment, FRAGMENT_TRANSACTIONS_LIST);
-        } else {
-            mSectionHeaderTransactions.setVisibility(View.GONE);
-            mTransactionsContainer.setVisibility(View.GONE);
-        }
-        fragmentTransaction.commit();
-	}
-	
 	/**
 	 * Loads the transaction insert/edit fragment and passes the arguments
 	 * @param args Bundle arguments to be passed to the fragment
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsDeleteConfirmationDialog.java b/app/src/org/gnucash/android/ui/transactions/TransactionsDeleteConfirmationDialog.java
index 86f8b8fa..38f57029 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsDeleteConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsDeleteConfirmationDialog.java
@@ -47,7 +47,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
                             	adapter.deleteRecord(rowId);
                             }
                             if (getTargetFragment() instanceof AccountsListFragment){                            	
-                            	((AccountsListFragment)getTargetFragment()).refreshList();
+                            	((AccountsListFragment)getTargetFragment()).refresh();
                             }
                             WidgetConfigurationActivity.updateAllWidgets(getActivity());
                         }
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index 67d29871..b299e0a5 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -52,6 +52,7 @@
 import org.gnucash.android.db.DatabaseCursorLoader;
 import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.ui.Refreshable;
 import org.gnucash.android.ui.accounts.AccountsListFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.OnTransactionClickedListener;
@@ -65,8 +66,8 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  *
  */
-public class TransactionsListFragment extends SherlockListFragment implements 
-	LoaderCallbacks<Cursor> {
+public class TransactionsListFragment extends SherlockListFragment implements
+        Refreshable, LoaderCallbacks<Cursor> {
 
 	/**
 	 * Logging tag
@@ -141,7 +142,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
 				for (long id : getListView().getCheckedItemIds()) {
 					mTransactionsDbAdapter.deleteRecord(id);
 				}				
-				refreshList();
+				refresh();
 				mode.finish();
 				WidgetConfigurationActivity.updateAllWidgets(getActivity());
 				return true;
@@ -195,15 +196,17 @@ public void onActivityCreated(Bundle savedInstanceState) {
      * Refresh the list with transactions from account with ID <code>accountId</code>
      * @param accountId Database ID of account to load transactions from
      */
-	public void refreshList(long accountId){
+    @Override
+	public void refresh(long accountId){
 		mAccountID = accountId;
-		refreshList();
+		refresh();
 	}
 
     /**
      * Reload the list of transactions and recompute account balances
      */
-	public void refreshList(){
+    @Override
+	public void refresh(){
 		getLoaderManager().restartLoader(0, null, this);
 
         mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
@@ -225,7 +228,7 @@ public void onAttach(Activity activity) {
 	public void onResume() {
 		super.onResume();
 		((TransactionsActivity)getSherlockActivity()).updateNavigationSelection();		
-		refreshList(((TransactionsActivity)getActivity()).getCurrentAccountID());
+		refresh(((TransactionsActivity) getActivity()).getCurrentAccountID());
 	}
 	
 	@Override
diff --git a/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java b/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
index c32c56ff..2390f76d 100644
--- a/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
+++ b/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
@@ -27,7 +27,10 @@
 import org.gnucash.android.db.DatabaseHelper;
 
 /**
- * @author Ngewi
+ * Cursor adapter which looks up the fully qualified account name and returns that instead of just the simple name.
+ * <p>The fully qualified account name includes the parent hierarchy</p>
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class QualifiedAccountNameCursorAdapter extends SimpleCursorAdapter {
     private AccountsDbAdapter mAccountDbAdapter;
diff --git a/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java b/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java
index 4d910848..79838fbc 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -26,7 +26,6 @@
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TextView;
-import com.actionbarsherlock.widget.SearchView;
 import com.jayway.android.robotium.solo.Solo;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
@@ -162,7 +161,7 @@ public void testEditAccount(){
 		Fragment fragment = getActivity()
 				.getSupportFragmentManager()
 				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		((AccountsListFragment) fragment).refreshList();
+		((AccountsListFragment) fragment).refresh();
 		
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		
@@ -215,7 +214,7 @@ public void testDeleteAccount(){
                 .findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
         assertNotNull(fragment);
 
-        ((AccountsListFragment) fragment).refreshList();
+        ((AccountsListFragment) fragment).refresh();
 
         mSolo.clickLongOnText(accountNameToDelete);
 
@@ -253,7 +252,7 @@ public void testDisplayTransactionsList(){
 		Fragment fragment = getActivity()
 				.getSupportFragmentManager()
 				.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-		((AccountsListFragment) fragment).refreshList();
+		((AccountsListFragment) fragment).refresh();
 		
 		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
 		mSolo.clickOnText(DUMMY_ACCOUNT_NAME);
@@ -330,6 +329,6 @@ private void refreshAccountsList(){
         Fragment fragment = getActivity()
                 .getSupportFragmentManager()
                 .findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-        ((AccountsListFragment)fragment).refreshList();
+        ((AccountsListFragment)fragment).refresh();
     }
 }
