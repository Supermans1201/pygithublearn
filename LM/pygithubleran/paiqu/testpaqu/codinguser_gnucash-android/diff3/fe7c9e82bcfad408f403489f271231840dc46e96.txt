From fe7c9e82bcfad408f403489f271231840dc46e96 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 7 Aug 2012 15:22:17 +0200
Subject: [PATCH] Added documentation for Money.java Code refactoring

---
 .../src/org/gnucash/android/data/Account.java      |   8 +-
 .../src/org/gnucash/android/data/Money.java        | 210 +++++++++++++++++++--
 .../android/receivers/TransactionRecorder.java     |   2 +-
 .../android/ui/accounts/AccountsActivity.java      |   3 +-
 .../ui/accounts/NewAccountDialogFragment.java      |   3 +-
 .../ui/transactions/NewTransactionFragment.java    |   2 +-
 .../org/gnucash/android/test/ui/OfxExportTest.java |   5 +-
 .../android/test/ui/TransactionsActivityTest.java  |   2 +-
 .../org/gnucash/android/test/unit/AccountTest.java |  11 ++
 .../gnucash/android/test/unit/TransactionTest.java |  11 ++
 10 files changed, 225 insertions(+), 32 deletions(-)
 create mode 100644 GnucashMobileTest/src/org/gnucash/android/test/unit/AccountTest.java
 create mode 100644 GnucashMobileTest/src/org/gnucash/android/test/unit/TransactionTest.java

diff --git a/GnucashMobile/src/org/gnucash/android/data/Account.java b/GnucashMobile/src/org/gnucash/android/data/Account.java
index 96b44578..1685d0a2 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Account.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Account.java
@@ -79,12 +79,6 @@
 	private List<Transaction> mTransactionsList = new ArrayList<Transaction>();
 
 	/**
-	 * Default currency code (according ISO 4217) to use for creating accounts
-	 * This is typically initialized to the currency of the device default locale
-	 */
-	public static String DEFAULT_CURRENCY_CODE 	= "USD";
-
-	/**
 	 * An extra key for passing the currency code (according ISO 4217) in an intent
 	 */
 	public static final String EXTRA_CURRENCY_CODE 	= "org.gnucash.extra.currency_code";
@@ -97,7 +91,7 @@
 	public Account(String name) {
 		setName(name);
 		this.mUID = generateUID();
-		this.mCurrency = Currency.getInstance(Account.DEFAULT_CURRENCY_CODE);
+		this.mCurrency = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
 	}
 	
 	/**
diff --git a/GnucashMobile/src/org/gnucash/android/data/Money.java b/GnucashMobile/src/org/gnucash/android/data/Money.java
index f6b86eb5..75a3e07d 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Money.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Money.java
@@ -39,29 +39,83 @@
  */
 public class Money implements Comparable<Money>{
 
+	/**
+	 * Currency of the account
+	 */
 	private Currency mCurrency;
+	
+	/**
+	 * Amount value held by this object
+	 */
 	private BigDecimal mAmount;
 	
+	/**
+	 * Default rounding mode for Money objects
+	 * Defaults to {@link RoundingMode#HALF_EVEN}
+	 */
 	private static final RoundingMode DEFAULT_ROUNDING_MODE = RoundingMode.HALF_EVEN;
+	
+	/**
+	 * Number of decimal places to limit the fractions to when performing operations
+	 * Defaults to 2 decimal places
+	 */
 	private static final int DEFAULT_DECIMAL_PLACES = 2;
 	
+	/**
+	 * Rounding mode to be applied when performing operations
+	 * Defaults to {@link #DEFAULT_ROUNDING_MODE}
+	 */
 	protected RoundingMode ROUNDING_MODE = DEFAULT_ROUNDING_MODE;
+	
+	/**
+	 * Number of decimal places to limit fractions to in arithmetic operations
+	 * Defaults to {@link #DEFAULT_DECIMAL_PLACES}
+	 */
 	protected int DECIMAL_PLACES = DEFAULT_DECIMAL_PLACES;
+
+	/**
+	 * Default currency code (according ISO 4217) 
+	 * This is typically initialized to the currency of the device default locale,
+	 * otherwise US dollars are used
+	 */
+	public static String DEFAULT_CURRENCY_CODE 	= "USD";
 	
+	/**
+	 * Default constructor
+	 * Initializes the object with an amount of 0 and currency set to the device default locale
+	 */
 	public Money() {
 		init();
 	}
 	
+	/**
+	 * Overloaded constructor
+	 * @param amount {@link BigDecimal} value of the money instance
+	 * @param currency {@link Currency} associated with the <code>amount</code>
+	 */
 	public Money(BigDecimal amount, Currency currency){		
 		this.mAmount = amount;
 		this.mCurrency = currency;
 	}
 	
+	/**
+	 * Overloaded constructor.
+	 * Accepts strings as arguments and parses them to create the Money object
+	 * @param amount Numrical value of the Money
+	 * @param currencyCode Currency code as specified by ISO 4217
+	 */
 	public Money(String amount, String currencyCode){
 		setAmount(amount);
 		setCurrency(Currency.getInstance(currencyCode));
 	}
 	
+	/**
+	 * Overloaded constructor
+	 * Accepts <code>context</code> options for rounding mode during operations on this money object
+	 * @param amount {@link BigDecimal} value of the money instance
+	 * @param currency {@link Currency} associated with the <code>amount</code>
+	 * @param context {@link MathContext} specifying rounding mode during operations
+	 */
 	public Money(BigDecimal amount, Currency currency, MathContext context){
 		setAmount(amount);
 		setCurrency(currency);
@@ -69,46 +123,77 @@ public Money(BigDecimal amount, Currency currency, MathContext context){
 		DECIMAL_PLACES = context.getPrecision();
 	}
 	
+	/**
+	 * Overloaded constructor. 
+	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
+	 * @param amount Value associated with this Money object
+	 */
 	public Money(String amount){
 		init();
-		setAmount(parse(amount));
+		setAmount(parseToString(amount));
 	}
 	
+	/**
+	 * Overloaded constructor. 
+	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
+	 * @param amount Value associated with this Money object
+	 */
 	public Money(double amount){
 		init();
 		setAmount(amount);
 	}
 	
+	/**
+	 * Initializes the amount and currency to their default values
+	 * @see {@link Money#DEFAULT_CURRENCY_CODE}, {@link #DEFAULT_ROUNDING_MODE}, {@link #DEFAULT_DECIMAL_PLACES}
+	 */
 	private void init(){
-		mCurrency = Currency.getInstance(Account.DEFAULT_CURRENCY_CODE);
+		mCurrency = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
 		mAmount = new BigDecimal(0).setScale(DEFAULT_DECIMAL_PLACES, DEFAULT_ROUNDING_MODE);
 	}
 
 	/**
-	 * @return the mCurrency
+	 * Returns the currency of the money object
+	 * @return {@link Currency} of the money value
 	 */
 	public Currency getCurrency() {
 		return mCurrency;
 	}
 
+	/**
+	 * Returns a new <code>Money</code> object the currency specified by <code>currency</code> 
+	 * and the same value as this one. No value exchange between the currencies is performed.
+	 * @param currency {@link Currency} to assign to new <code>Money</code> object
+	 * @return {@link Money} object with same value as current object, but with new <code>currency</code>
+	 */
 	public Money withCurrency(Currency currency){
 		return new Money(mAmount, currency);
 	}
+	
 	/**
-	 * @param mCurrency the mCurrency to set
+	 * Sets the currency of the money object.
+	 * No currency value conversion is performed. The old value for the amount is not changed
+	 * This method is only used internally when creating the Money object. 
+	 * Money objects are immutable and hence this method should not be called out of a constructor
+	 * @param currency {@link Currency} to assign to the Money object  
 	 */
 	private void setCurrency(Currency currency) {
-		//TODO: Do a conversion of the value as well in the future
-		mCurrency = currency;
+		//TODO: Consider doing a conversion of the value as well in the future
+		this.mCurrency = currency;
 	}
 
 	/**
-	 * @return the mAmount
+	 * Returns the amount represented by this Money object
+	 * @return {@link BigDecimal} valure of amount in object
 	 */
 	public BigDecimal asBigDecimal() {
 		return mAmount;
 	}
 	
+	/**
+	 * Returns the amount this object
+	 * @return Double value of the amount in the object
+	 */
 	public double asDouble(){
 		return mAmount.doubleValue();
 	}
@@ -121,6 +206,13 @@ public String asString(){
 		return toPlainString();
 	}
 	
+	/**
+	 * Returns a string representation of the Money object formatted according to 
+	 * the <code>locale</code> and includes the currency symbol. 
+	 * The output precision is limited to {@link #DECIMAL_PLACES}
+	 * @param locale Locale to use when formatting the object
+	 * @return String containing formatted Money representation
+	 */
 	public String formattedString(Locale locale){
 		DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(locale);	
 		formatter.setMinimumFractionDigits(DECIMAL_PLACES);
@@ -129,41 +221,80 @@ public String formattedString(Locale locale){
 		return formatter.format(asDouble()) + " " + mCurrency.getSymbol();
 	}
 	
+	/**
+	 * Returns a new Money object whose amount is the negated value of this object amount.
+	 * The original <code>Money</code> object remains unchanged.
+	 * @return Negated <code>Money</code> object
+	 */
 	public Money negate(){
 		return new Money(mAmount.negate(), mCurrency);
 	}
 	
 	/**
-	 * @param amount the mAmount to set
+	 * Sets the amount value of this <code>Money</code> object
+	 * @param amount {@link BigDecimal} amount to be set
 	 */
 	private void setAmount(BigDecimal amount) {	
 		mAmount = amount.setScale(DECIMAL_PLACES, ROUNDING_MODE);
 	}
 	
+	/**
+	 * Sets the amount value of this <code>Money</code> object
+	 * The <code>amount</code> is parsed by the {@link BigDecimal} constructor
+	 * @param amount {@link String} amount to be set
+	 */
 	private void setAmount(String amount){
 		setAmount(new BigDecimal(amount));
 	}
 	
+	/**
+	 * Sets the amount value of this <code>Money</code> object
+	 * @param amount Double amount to be set
+	 */
 	private void setAmount(double amount){
 		setAmount(new BigDecimal(amount));
 	}
 	
-	public Money add(Money money){
-		if (!mCurrency.equals(money.mCurrency))
+	/**
+	 * Returns a new <code>Money</code> object whose value is the sum of the values of 
+	 * this object and <code>addend</code>.
+	 * 
+	 * @param addend Second operand in the addition.
+	 * @return Money object whose value is the sum of this object and <code>money</code>
+	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
+	 */
+	public Money add(Money addend){
+		if (!mCurrency.equals(addend.mCurrency))
 			throw new IllegalArgumentException("Only Money with same currency can be added");
 		
-		BigDecimal bigD = mAmount.add(money.mAmount);
+		BigDecimal bigD = mAmount.add(addend.mAmount);
 		return new Money(bigD, mCurrency);
 	}
 
-	public Money subtract(Money money){
-		if (!mCurrency.equals(money.mCurrency))
+	/**
+	 * Returns a new <code>Money</code> object whose value is the difference of the values of 
+	 * this object and <code>subtrahend</code>.
+	 * This object is the minuend and the parameter is the subtrahend
+	 * @param subtrahend Second operand in the subtraction.
+	 * @return Money object whose value is the difference of this object and <code>subtrahend</code>
+	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
+	 */
+	public Money subtract(Money subtrahend){
+		if (!mCurrency.equals(subtrahend.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
-		BigDecimal bigD = mAmount.subtract(money.mAmount);		
+		BigDecimal bigD = mAmount.subtract(subtrahend.mAmount);		
 		return new Money(bigD, mCurrency);
 	}
 	
+	/**
+	 * Returns a new <code>Money</code> object whose value is the quotient of the values of 
+	 * this object and <code>divisor</code>.
+	 * This object is the dividend and <code>divisor</code> is the divisor
+	 * @param divisor Second operand in the division.
+	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
+	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
+	 */
 	public Money divide(Money divisor){
 		if (!mCurrency.equals(divisor.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
@@ -172,11 +303,25 @@ public Money divide(Money divisor){
 		return new Money(bigD, mCurrency);
 	}
 	
+	/**
+	 * Returns a new <code>Money</code> object whose value is the quotient of the division of this objects 
+	 * value by the factor <code>divisor</code>
+	 * @param divisor Second operand in the addition.
+	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
+	 */
 	public Money divide(int divisor){
 		Money moneyDiv = new Money(new BigDecimal(divisor), mCurrency);
 		return divide(moneyDiv);
 	}
 	
+	/**
+	 * Returns a new <code>Money</code> object whose value is the product of the values of 
+	 * this object and <code>money</code>.
+	 * 
+	 * @param money Second operand in the multiplication.
+	 * @return Money object whose value is the product of this object and <code>money</code>
+	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
+	 */
 	public Money multiply(Money money){
 		if (!mCurrency.equals(money.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
@@ -185,22 +330,41 @@ public Money multiply(Money money){
 		return new Money(bigD, mCurrency);
 	}
 	
-	public Money multiply(int factor){
-		Money moneyFactor = new Money(new BigDecimal(factor), mCurrency);
+	/**
+	 * Returns a new <code>Money</code> object whose value is the product of the division of this objects 
+	 * value by the factor <code>multiplier</code>
+	 * @param multiplier Factor to multiply the amount by.
+	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
+	 */
+	public Money multiply(int multiplier){
+		Money moneyFactor = new Money(new BigDecimal(multiplier), mCurrency);
 		return multiply(moneyFactor);
 	}
 	
+	/**
+	 * Returns true if the amount held by this Money object is negative
+	 * @return <code>true</code> if the amount is negative, <code>false</code> otherwise.
+	 */
 	public boolean isNegative(){
 		return mAmount.compareTo(new BigDecimal(0)) == -1;
 	}
 	
+	/**
+	 * Returns the string representation of the amount (without currency) of the Money object
+	 * @return String representation of the amount (without currency) of the Money object
+	 */
 	public String toPlainString(){
 		return mAmount.setScale(DECIMAL_PLACES, ROUNDING_MODE).toPlainString();
 	}
 	
+	/**
+	 * Returns the string representation of the Money object (value + currency) formatted according
+	 * to the default locale
+	 * @return String representation of the amount formatted with default locale
+	 */
 	@Override
 	public String toString() {
-		return mAmount.setScale(DECIMAL_PLACES, ROUNDING_MODE).toPlainString() + " " + mCurrency.getSymbol();
+		return formattedString(Locale.getDefault());
 	}
 		
 	@Override
@@ -213,6 +377,11 @@ public int hashCode() {
 		return result;
 	}
 
+	/**
+	 * Two Money objects are only equal if their amount (value) and currencies are equal
+	 * @param obj Object to compare with
+	 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise
+	 */
 	@Override
 	public boolean equals(Object obj) {
 		if (this == obj)
@@ -242,7 +411,12 @@ public int compareTo(Money another) {
 		return mAmount.compareTo(another.mAmount);
 	}
 
-	public static String parse(String formattedAmount){
+	/**
+	 * Parses a Locale specific string into a number in the default Locale
+	 * @param formattedAmount Formatted String amount
+	 * @return String amount formatted in the default locale
+	 */
+	public static String parseToString(String formattedAmount){
 		DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
 		String result = formattedAmount;
 		try {
diff --git a/GnucashMobile/src/org/gnucash/android/receivers/TransactionRecorder.java b/GnucashMobile/src/org/gnucash/android/receivers/TransactionRecorder.java
index 51c32cb2..e0d51941 100644
--- a/GnucashMobile/src/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/GnucashMobile/src/org/gnucash/android/receivers/TransactionRecorder.java
@@ -42,7 +42,7 @@ public void onReceive(Context context, Intent intent) {
 		double amountDouble = args.getDouble(Transaction.EXTRA_AMOUNT, 0);
 		String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);
 		if (currencyCode == null)
-			currencyCode = Account.DEFAULT_CURRENCY_CODE;
+			currencyCode = Money.DEFAULT_CURRENCY_CODE;
 		
 		String accountUID = args.getString(Transaction.EXTRA_ACCOUNT_UID);
 		if (accountUID == null)
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
index b92a94a2..dae4f989 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/AccountsActivity.java
@@ -22,6 +22,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.ui.transactions.TransactionsActivity;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
@@ -69,7 +70,7 @@ public void onCreate(Bundle savedInstanceState) {
 
 		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
 		String currencyCode = prefs.getString(getString(R.string.pref_default_currency), Currency.getInstance(Locale.getDefault()).getCurrencyCode());
-		Account.DEFAULT_CURRENCY_CODE = currencyCode;		
+		Money.DEFAULT_CURRENCY_CODE = currencyCode;		
 		
 		boolean firstRun = prefs.getBoolean(getString(R.string.key_first_run), true);
 		if (firstRun){
diff --git a/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java b/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
index 1c5c31dd..e5310421 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/accounts/NewAccountDialogFragment.java
@@ -22,6 +22,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
+import org.gnucash.android.data.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
@@ -131,7 +132,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		mCurrencySpinner.setAdapter(arrayAdapter);
 		
-		String currencyCode = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.pref_default_currency), Account.DEFAULT_CURRENCY_CODE);
+		String currencyCode = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.pref_default_currency), Money.DEFAULT_CURRENCY_CODE);
 		if (mSelectedId != 0){
 			//if we are editing an account instead of creating one
 			currencyCode = mAccount.getCurrency().getCurrencyCode();
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index 99b20865..127879c0 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -193,7 +193,7 @@ private void initalizeViews() {
 				mAccountsSpinner.setSelection(pos);
 		}
 		
-		String code = Account.DEFAULT_CURRENCY_CODE;
+		String code = Money.DEFAULT_CURRENCY_CODE;
 		if (accountId != 0)
 			code = mTransactionsDbAdapter.getCurrencyCode(accountId);
 		
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java
index ace4380a..ca2f6669 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/OfxExportTest.java
@@ -120,6 +120,7 @@ public void testShouldIgnoreExportedTransactions(){
 		mSolo.clickOnView(spinner);
 		String[] options = getActivity().getResources().getStringArray(R.array.export_destinations);	
 		mSolo.clickOnText(options[1]);
+		mSolo.clickOnCheckBox(0);
 		mSolo.clickOnButton(3);
 		
 		//the file name is time-based (down to the minute), so we cache it here, 
@@ -132,12 +133,12 @@ public void testShouldIgnoreExportedTransactions(){
 		File file = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + filename);
 		assertNotNull(file);
 		assertTrue(file.exists());
-		//there should be something in the file (boilerplate xml)
+		//there should be something in the file (OFX headers, etc)
 		assertTrue(file.length() > 0);
 		
 		//if this is not deleted, we cannot be certain that the next test will pass on its own merits
 		boolean isDeleted = file.delete();
-		assertTrue(isDeleted);
+		assertTrue(isDeleted);		
 	}
 	
 	public void testExportAlreadyExportedTransactions(){
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index d0b1f95e..68b08b3b 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -121,7 +121,7 @@ public void testAddTransaction(){
 		mSolo.enterText(1, "899");
 		//check that the amount is correctly converted in the input field
 		String value = mSolo.getEditText(1).getText().toString();
-		double actualValue = Double.parseDouble(Money.parse(value));
+		double actualValue = Double.parseDouble(Money.parseToString(value));
 		assertEquals(-8.99, actualValue);
 		
 		int transactionsCount = getTranscationCount();
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/unit/AccountTest.java b/GnucashMobileTest/src/org/gnucash/android/test/unit/AccountTest.java
new file mode 100644
index 00000000..a1a2f565
--- /dev/null
+++ b/GnucashMobileTest/src/org/gnucash/android/test/unit/AccountTest.java
@@ -0,0 +1,11 @@
+package org.gnucash.android.test.unit;
+
+import junit.framework.TestCase;
+
+public class AccountTest extends TestCase {
+
+	public AccountTest(String name) {
+		super(name);
+	}
+
+}
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/unit/TransactionTest.java b/GnucashMobileTest/src/org/gnucash/android/test/unit/TransactionTest.java
new file mode 100644
index 00000000..62cec054
--- /dev/null
+++ b/GnucashMobileTest/src/org/gnucash/android/test/unit/TransactionTest.java
@@ -0,0 +1,11 @@
+package org.gnucash.android.test.unit;
+
+import junit.framework.TestCase;
+
+public class TransactionTest extends TestCase {
+
+	public TransactionTest(String name) {
+		super(name);
+	}
+
+}
