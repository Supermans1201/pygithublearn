From 198e6a91533f477578ae20085419c176fe510903 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 11 Apr 2015 14:30:27 +0200
Subject: [PATCH] Implemented editing of schedule of a scheduled transaction

Requires generating the recurrence rule for the RecurrencePickerDialog
Updated repeat string of recurrence events to be more descriptive
---
 .../android/db/ScheduledActionDbAdapter.java       |  2 +-
 .../gnucash/android/db/TransactionsDbAdapter.java  |  5 +-
 .../java/org/gnucash/android/model/PeriodType.java | 63 ++++++++++++----------
 .../org/gnucash/android/model/ScheduledAction.java | 53 +++++++++++++-----
 .../java/org/gnucash/android/ui/UxArgument.java    |  5 ++
 .../ScheduledTransactionsListFragment.java         | 36 +++----------
 .../ui/transaction/TransactionFormFragment.java    |  8 +--
 .../ui/transaction/TransactionsActivity.java       |  2 +
 8 files changed, 98 insertions(+), 76 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index 876b6033..d5c427cf 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -157,7 +157,7 @@ private ScheduledAction buildScheduledEventInstance(final Cursor cursor){
      * @param uid GUID of event
      * @return ScheduledEvent object instance
      */
-    public ScheduledAction getScheduledEvent(String uid){
+    public ScheduledAction getScheduledAction(String uid){
         Cursor cursor = fetchRecord(getID(uid));
 
         ScheduledAction scheduledAction = null;
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 66bf8aef..9981f591 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -271,9 +271,10 @@ public Cursor fetchAllScheduledTransactions(){
                 + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
                 + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_ACTION_UID);
 
-        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*",
+                ScheduledActionEntry.TABLE_NAME+"."+ScheduledActionEntry.COLUMN_UID};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
-        queryBuilder.setDistinct(true);
+//        queryBuilder.setDistinct(true);
 
         return queryBuilder.query(mDb, projectionIn, null, null, null, null, sortOrder);
     }
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
index 21435024..345de55d 100644
--- a/app/src/main/java/org/gnucash/android/model/PeriodType.java
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -21,6 +21,10 @@
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
 /**
 * Represents a type of period which can be associated with a recurring event
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -55,32 +59,17 @@ public int getMultiplier(){
      * @return Frequency description
      */
     public String getFrequencyDescription() {
-        if (mMultiplier > 1){
-            switch (this) {
-                case DAY:
-                    return "Every " + mMultiplier + " days";
-                case WEEK:
-                    return "Every " + mMultiplier + " weeks";
-                case MONTH:
-                    return "Every " + mMultiplier + " months";
-                case YEAR:
-                    return "Every " + mMultiplier + " years";
-                default:
-                    return "Every " + mMultiplier + " days";
-            }
-        } else {
-            switch (this) {
-                case DAY:
-                    return "Daily";
-                case WEEK:
-                    return "Weekly";
-                case MONTH:
-                    return "Monthly";
-                case YEAR:
-                    return "Yearly";
-                default:
-                    return "Daily";
-            }
+        switch (this) {
+            case DAY:
+                return "DAILY";
+            case WEEK:
+                return "WEEKLY";
+            case MONTH:
+                return "MONTHLY";
+            case YEAR:
+                return "YEARLY";
+            default:
+                return "";
         }
     }
 
@@ -88,7 +77,7 @@ public String getFrequencyDescription() {
      * Returns a localized string describing this period type's frequency.
      * @return String describing period type
      */
-    public String getLocalizedFrequencyDescription(){
+    public String getFrequencyRepeatString(){
         Resources res = GnuCashApplication.getAppContext().getResources();
 
         switch (this) {
@@ -101,8 +90,26 @@ public String getLocalizedFrequencyDescription(){
             case YEAR:
                 return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier);
             default:
-                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier);
+                return "";
         }
     }
 
+    public String getByParts(long startTime){
+        String partString = "";
+        switch (this){
+            case DAY:
+                break;
+            case WEEK:
+                String dayOfWeek = new SimpleDateFormat("E", Locale.US).format(new Date(startTime));
+                //our parser only supports two-letter day names
+                partString = "BYDAY=" + dayOfWeek.substring(0, dayOfWeek.length()-1).toUpperCase();
+            case MONTH:
+                break;
+            case YEAR:
+                break;
+        }
+        return partString;
+    }
+
+
 }
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index f76674d2..30c3fc19 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -16,10 +16,15 @@
 package org.gnucash.android.model;
 
 import org.gnucash.android.ui.util.RecurrenceParser;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
+import java.io.IOException;
+import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
+import java.util.TimeZone;
 
 /**
 * Represents a scheduled event which is stored in the database and run at regular mPeriod
@@ -257,42 +262,62 @@ public void setExecutionCount(int executionCount){
      * @return String description of repeat schedule
      */
     public String getRepeatString(){
-        String dayOfWeek = new SimpleDateFormat("E", Locale.US).format(new Date(mStartDate));
+        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
         PeriodType periodType = getPeriodType();
-        StringBuilder ruleBuilder = new StringBuilder(periodType.getLocalizedFrequencyDescription());
-        ruleBuilder.append(" on " + dayOfWeek);
+        StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyRepeatString());
+        ruleBuilder.append(" on ").append(dayOfWeek);
         ruleBuilder.append(";");
         if (mEndDate > 0){
-            ruleBuilder.append(" until " + new SimpleDateFormat("M/d", Locale.US).format(new Date(mEndDate)) + ";");
+            ruleBuilder.append(" until ")
+                    .append(SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(new Date(mEndDate)))
+                    .append(";");
         } else if (mTotalFrequency > 0){
-            ruleBuilder.append(" for " + mTotalFrequency + " times;");
+            ruleBuilder.append(" for ").append(mTotalFrequency).append(" times;");
         }
         return ruleBuilder.toString();
     }
 
     /**
      * Creates an RFC 2445 string which describes this recurring event
+     * <p>See http://recurrance.sourceforge.net/</p>
      * @return String describing event
      */
     public String getRuleString(){
-        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
+        String separator = ";";
         PeriodType periodType = getPeriodType();
-        StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyDescription());
-        ruleBuilder.append(" on " + dayOfWeek);
-        ruleBuilder.append(";");
+
+        StringBuilder ruleBuilder = new StringBuilder();
+
+//        =======================================================================
+        //This section complies with the formal rules, but the betterpickers library doesn't like/need it
+
+//        SimpleDateFormat startDateFormat = new SimpleDateFormat("'TZID'=zzzz':'yyyyMMdd'T'HHmmss", Locale.US);
+//        ruleBuilder.append("DTSTART;");
+//        ruleBuilder.append(startDateFormat.format(new Date(mStartDate)));
+//            ruleBuilder.append("\n");
+//        ruleBuilder.append("RRULE:");
+//        ========================================================================
+
+        ruleBuilder.append("FREQ=").append(periodType.getFrequencyDescription()).append(separator);
+        ruleBuilder.append("INTERVAL=").append(periodType.getMultiplier()).append(separator);
+        ruleBuilder.append(periodType.getByParts(mStartDate)).append(separator);
+
         if (mEndDate > 0){
-            ruleBuilder.append(" until " + new SimpleDateFormat("M/d/yyyy", Locale.US).format(new Date(mEndDate)) + ";");
+            SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd'T'HHmmss'Z'", Locale.US);
+            df.setTimeZone(TimeZone.getTimeZone("UTC"));
+            ruleBuilder.append("UNTIL=").append(df.format(new Date(mEndDate))).append(separator);
         } else if (mTotalFrequency > 0){
-            ruleBuilder.append(" for " + mTotalFrequency + " times;");
+            ruleBuilder.append("COUNT=").append(mTotalFrequency).append(separator);
         }
+
         return ruleBuilder.toString();
     }
 
     /**
      * Creates a ScheduledAction from a Transaction and a period
-     * @param transaction
-     * @param period
-     * @return
+     * @param transaction Transaction to be scheduled
+     * @param period Period in milliseconds since Epoch
+     * @return Scheduled Action
      */
     public static ScheduledAction parseScheduledAction(Transaction transaction, long period){
         ScheduledAction scheduledAction = new ScheduledAction(ActionType.TRANSACTION);
diff --git a/app/src/main/java/org/gnucash/android/ui/UxArgument.java b/app/src/main/java/org/gnucash/android/ui/UxArgument.java
index 9230bd2c..c2d4ab0f 100644
--- a/app/src/main/java/org/gnucash/android/ui/UxArgument.java
+++ b/app/src/main/java/org/gnucash/android/ui/UxArgument.java
@@ -67,6 +67,11 @@
      */
     public static final String PARENT_ACCOUNT_UID = "parent_account_uid";
 
+    /**
+     * Key for passing the scheduled action UID to the transactions editor
+     */
+    public static final String SCHEDULED_ACTION_UID = "scheduled_action_uid";
+
     //prevent initialization of instances of this class
     private UxArgument(){
         //prevent even the native class from calling the ctor
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index fb33929d..f9cbb3fe 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -193,7 +193,8 @@ public void onListItemClick(ListView l, View v, int position, long id) {
         }
 
         String accountUID = transaction.getSplits().get(0).getAccountUID();
-        openTransactionForEdit(accountUID, mTransactionsDbAdapter.getUID(id));
+        openTransactionForEdit(accountUID, mTransactionsDbAdapter.getUID(id),
+                v.getTag().toString());
     }
 
     /**
@@ -201,11 +202,12 @@ public void onListItemClick(ListView l, View v, int position, long id) {
      * @param accountUID GUID of account to which transaction belongs
      * @param transactionUID GUID of transaction to be edited
      */
-    public void openTransactionForEdit(String accountUID, String transactionUID){
+    public void openTransactionForEdit(String accountUID, String transactionUID, String scheduledActionUid){
         Intent createTransactionIntent = new Intent(getActivity(), TransactionsActivity.class);
         createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
         createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
         createTransactionIntent.putExtra(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
+        createTransactionIntent.putExtra(UxArgument.SCHEDULED_ACTION_UID, scheduledActionUid);
         startActivity(createTransactionIntent);
     }
 
@@ -363,26 +365,6 @@ public void run() {
             return view;
         }
 
-        /**
-         * Returns the string representation of the recurrence period of the transaction
-         * @param periodMillis Recurrence period in milliseconds
-         * @return String formatted representation of recurrence period
-         */
-        public String getRecurrenceAsString(long periodMillis){
-            String[] recurrencePeriods = getResources().getStringArray(R.array.key_recurrence_period_millis);
-            String[] recurrenceStrings = getResources().getStringArray(R.array.recurrence_period_strings);
-
-            int index = 0;
-            for (String recurrencePeriod : recurrencePeriods) {
-                long period = Long.parseLong(recurrencePeriod);
-                if (period == periodMillis){
-                    break;
-                }
-                index++;
-            }
-            return recurrenceStrings[index];
-        }
-
         @Override
         public void bindView(View view, Context context, Cursor cursor) {
             super.bindView(view, context, cursor);
@@ -400,12 +382,10 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
-            List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledActionsWithUID(transaction.getUID());
-            StringBuilder repeatStringBuilder = new StringBuilder();
-            for (ScheduledAction event : events) {
-                repeatStringBuilder.append(event.getRepeatString()).append("\n");
-            }
-            descriptionTextView.setText(repeatStringBuilder.toString());
+            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.ScheduledActionEntry.TABLE_NAME+"."+ DatabaseSchema.ScheduledActionEntry.COLUMN_UID));
+            view.setTag(scheduledActionUID);
+            ScheduledAction scheduledAction = scheduledActionDbAdapter.getScheduledAction(scheduledActionUID);
+            descriptionTextView.setText(scheduledAction.getRepeatString());
 
         }
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index f15c9cb2..288bcae7 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -435,9 +435,11 @@ private void initializeViewsWithTransaction(){
         }
 
         mSaveTemplate.setChecked(mTransaction.isTemplate());
-        List<ScheduledAction> scheduledActions = ScheduledActionDbAdapter.getInstance().getScheduledActionsWithUID(mTransaction.getUID());
-        if (!scheduledActions.isEmpty()){
-            mRecurrenceTextView.setText(scheduledActions.get(0).getRuleString());
+        String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
+        if (scheduledActionUID != null && !scheduledActionUID.isEmpty()) {
+            ScheduledAction scheduledAction = ScheduledActionDbAdapter.getInstance().getScheduledAction(scheduledActionUID);
+            mRecurrenceRule = scheduledAction.getRuleString();
+            mRecurrenceTextView.setText(scheduledAction.getRepeatString());
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 56b8e4eb..3d17af06 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -303,11 +303,13 @@ protected void onCreate(Bundle savedInstanceState) {
      */
     private void initializeCreateOrEditTransaction() {
         String transactionUID = getIntent().getStringExtra(UxArgument.SELECTED_TRANSACTION_UID);
+        String scheduledActionUID = getIntent().getStringExtra(UxArgument.SCHEDULED_ACTION_UID);
         Bundle args = new Bundle();
         if (transactionUID != null) {
             mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
             args.putString(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
             args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
+            args.putString(UxArgument.SCHEDULED_ACTION_UID, scheduledActionUID);
         } else {
             mSectionHeaderTransactions.setText(R.string.title_add_transaction);
             args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
