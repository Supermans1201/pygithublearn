From c183a9f1fa166d2715fbfa93380987f27c38d8f2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 24 Aug 2015 18:06:50 +0200
Subject: [PATCH] Compute mathematical expressions in the amount field.

If the field contains a mathematical expression, it is replaced with its
results when the focus changes to another field.
---
 app/build.gradle                                   |  3 +-
 .../ui/transaction/TransactionFormFragment.java    | 39 ++++++++++++++++++++++
 2 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/app/build.gradle b/app/build.gradle
index 82d9719a..1991f863 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -162,7 +162,8 @@ dependencies {
             'com.google.android.gms:play-services-drive:7.0.0',
             'com.crashlytics.android:crashlytics:1.+',
             'com.android.support:cardview-v7:22.2.0',
-            'com.android.support:recyclerview-v7:22.2.0'
+            'com.android.support:recyclerview-v7:22.2.0',
+            'net.objecthunter:exp4j:0.4.5'
     )
 
     testCompile('org.robolectric:robolectric:3.0',
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 62dd12df..8b414720 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -54,6 +54,9 @@
 import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrenceFormatter;
 import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
 
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
@@ -567,6 +570,42 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
+        mAmountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (!hasFocus) {
+                    String amountText = mAmountEditText.getText().toString();
+
+                    if (amountText.trim().isEmpty())
+                        return;
+
+                    // FIXME: replace the decimal separator of the current locale with '.'
+                    ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+                    Expression expression;
+
+                    try {
+                        expression = expressionBuilder.build();
+                    } catch (RuntimeException e) {
+                        setEditTextError();
+                        return;
+                    }
+
+                    if (expression != null && expression.validate().isValid())
+                        // FIXME: limit the decimal places
+                        // FIXME: use the locale decimal separator
+                        mAmountEditText.setText(Double.toString(expression.evaluate()));
+                    else
+                        setEditTextError();
+                }
+            }
+
+            private void setEditTextError() {
+                // FIXME: i18n
+                mAmountEditText.setError("Invalid expression.");
+                // TODO: log error
+            }
+        });
+
 		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
