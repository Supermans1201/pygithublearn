From 13bc5350d557ddbd690739cdbe32fbc4d267d378 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 29 Apr 2015 10:26:12 +0200
Subject: [PATCH] Improved logging of errors during XML import

Improved detection of new minor version
Open navigation drawer on first run after upgrade (not only for new users)
Updated README
---
 README.md                                          | 35 +++++++++++++++++-----
 app/build.gradle                                   |  1 +
 .../gnucash/android/export/xml/GncXmlHelper.java   |  4 ---
 .../gnucash/android/importer/GncXmlHandler.java    | 22 ++++++++++----
 .../android/ui/account/AccountsActivity.java       | 18 +++++++----
 5 files changed, 58 insertions(+), 22 deletions(-)

diff --git a/README.md b/README.md
index 9607ae57..a24c5e62 100644
--- a/README.md
+++ b/README.md
@@ -1,14 +1,35 @@
 # Introduction
 
-Gnucash Android is companion application for desktop Gnucash designed for Android.
-It allows you to record transactions on-the-go and export them in the QIF, OFX or (GnuCash)-XML format and later import the data into Gnucash for the desktop. The app supports multiple nested accounts, scheduled transactions and backup/export to 3rd-party services (like DropBox & Google Drive).
+GnuCash Android is a companion expense-tracker application for GnuCash (desktop) designed for Android.
+It allows you to record transactions on-the-go and later import the data into GnuCash for the desktop. 
 
-The application supports Android 2.3.4 Froyo (API level 10) and above. 
+The application supports Android 2.3.4 Gingerbread (API level 10) and above.
+
+Features include:
+
+  * An easy-to-use interface.
+
+  * Chart of Accounts: A master account can have a hierarchy of detail accounts underneath it.  
+    This allows similar account types (e.g. Cash, Bank, Stock) to be grouped into one master account (e.g. Assets).
+
+  * Split Transactions: A single transaction can be split into several pieces to record taxes, fees, and other compound entries.
+
+  * Double Entry: Every transaction must debit one account and credit another by an equal amount. 
+    This ensures that the "books balance": that the difference between income and outflow exactly
+    equals the sum of all assets, be they bank, cash, stock or other.
+
+  * Income/Expense Account Types (Categories): These serve not only to categorize your cash flow, but when used properly with the double-entry feature, these can provide an accurate Profit&Loss statement.
+
+  * Scheduled Transactions: GnuCash has the ability to automatically create and enter transactions.
+
+  * Export to GnuCash XML, QIF or OFX. Also, scheduled exports to 3rd-party sync services like DropBox and Google Drive
+
+  * Reports: View summary of transactions (income and expenses) as pie/bar/line charts
 
 
 # Installation
 
-There are different ways to get the Gnucash app for Android; through the app store, or building it yourself.
+There are different ways to get the GnuCash app for Android; through the app store, or building it yourself.
 
 
 ### App Store
@@ -51,10 +72,10 @@ Then, Gradle will do everything for you.
 
 There are several ways you could contribute to the development.
 
-One way is providing translations for locales which are not yet available, or improving translations.
+* One way is providing translations for locales which are not yet available, or improving translations.
 See this [blog post](http://www.codinguser.com/2012/09/gnucash-for-android-beta-2-lost-in-translation/) for some guidelines.
 
-You could as well contribute code, fixing bugs, new features or automated tests.
+* You could as well contribute code, fixing bugs, new features or automated tests. Pull requests are always welcome.
 Take a look at the [bug tracker](https://github.com/codinguser/gnucash-android/issues?state=open)
 for ideas where to start.
 
@@ -62,7 +83,7 @@ For development, it is recommended to use the Android Studio for development whi
 Import the project into the IDE using the build.gradle file. The IDE will resolve dependencies automatically.
 
 #Licence
-Gnucash for Android is free software; you can redistribute it and/or 
+GnuCash Android is free software; you can redistribute it and/or
 modify it under the terms of the Apache license, version 2.0.
 You may obtain a copy of the License at
 
diff --git a/app/build.gradle b/app/build.gradle
index 2d5cef93..33271f09 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -29,6 +29,7 @@ android {
         versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
         versionName "${versionMajor}.${versionMinor}.${versionPatch}"
         resValue "string", "app_version_name", "${versionName}"
+        resValue "string", "app_minor_version", "${versionMinor}"
         if (project.hasProperty("RELEASE_DROPBOX_APP_KEY")){
             resValue "string", "dropbox_app_key", RELEASE_DROPBOX_APP_KEY
             resValue "string", "dropbox_app_secret", RELEASE_DROPBOX_APP_SECRET
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 818e9923..8d0a5d2b 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -22,16 +22,12 @@
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.TransactionType;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
-import java.text.NumberFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import java.util.IllegalFormatException;
 import java.util.Locale;
 
 /**
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 4fbee7cf..040d2398 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -334,7 +334,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                         if (mRootAccount == null) {
                             mRootAccount = mAccount;
                         } else {
-                            throw new SAXException("multiple ROOT accounts exist in book");
+                            throw new SAXException("Multiple ROOT accounts exist in book");
                         }
                     }
                     // prepare for next input
@@ -380,6 +380,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                     mAccount.setPlaceHolderFlag(Boolean.parseBoolean(characterString));
                     mInPlaceHolderSlot = false;
                 } else if (mInColorSlot) {
+                    Log.d(LOG_TAG, "Parsing color code: " + characterString);
                     String color = characterString.trim();
                     //Gnucash exports the account color in format #rrrgggbbb, but we need only #rrggbb.
                     //so we trim the last digit in each block, doesn't affect the color much
@@ -394,7 +395,6 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                             //sometimes the color entry in the account file is "Not set" instead of just blank. So catch!
                             Log.e(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
                             Crashlytics.logException(ex);
-
                         }
                     }
                     mInColorSlot = false;
@@ -423,6 +423,12 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                                 mTransaction.getCurrency());
                         mSplit.setAmount(amount.absolute());
                         mSplit.setType(TransactionType.CREDIT);
+                    } catch (NumberFormatException e) {
+                        String msg = "Error parsing template credit split amount " + characterString;
+                        Log.e(LOG_TAG, msg + "\n" + e.getMessage());
+                        Crashlytics.log(msg);
+                        Crashlytics.logException(e);
+                        throw new SAXException(msg, e); //if we fail to parse the split amount, terminate import - data integrity compromised
                     } finally {
                         mInCreditFormulaSlot = false;
                     }
@@ -433,8 +439,11 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                         mSplit.setAmount(amount.absolute());
                         mSplit.setType(TransactionType.DEBIT);
                     } catch (NumberFormatException e) {
-                        Log.e(LOG_TAG, "Error parsing template split amount " + characterString + " - " + e.getMessage());
+                        String msg = "Error parsing template debit split amount " + characterString;
+                        Log.e(LOG_TAG, msg + "\n" + e.getMessage());
+                        Crashlytics.log(msg);
                         Crashlytics.logException(e);
+                        throw new SAXException(msg, e); //if we fail to parse the split amount, terminate import - data integrity compromised
                     } finally {
                         mInDebitFormulaSlot = false;
                     }
@@ -460,7 +469,10 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                     }
                 } catch (ParseException e) {
                     Crashlytics.logException(e);
-                    throw new SAXException("Unable to parse transaction time", e);
+                    String message = "Unable to parse transaction time - " + characterString;
+                    Log.e(LOG_TAG, message + "\n" + e.getMessage());
+                    Crashlytics.log(message);
+                    throw new SAXException(message, e);
                 }
                 break;
             case GncXmlHelper.TAG_RECURRENCE_PERIOD: //for parsing of old backup files
@@ -485,7 +497,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                     }
                     mQuantity = GncXmlHelper.parseSplitAmount(q);
                 } catch (ParseException e) {
-                    String msg = "Error to parsing split quantity";
+                    String msg = "Error to parsing split quantity - " + characterString;
                     Crashlytics.log(msg);
                     Crashlytics.logException(e);
                     throw new SAXException(msg, e);
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 59bbdc88..3991a1e8 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -322,7 +322,14 @@ private void init() {
         }
 
         if (hasNewFeatures()){
-            showWhatsNewDialog(this);
+            AlertDialog dialog = showWhatsNewDialog(this);
+            //TODO: remove this when we upgrade to 1.7.0. Users will already know the nav drawer then
+            dialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
+                @Override
+                public void onDismiss(DialogInterface dialog) {
+                    mDrawerLayout.openDrawer(mDrawerList);
+                }
+            });
         }
         GnuCashApplication.startScheduledActionExecutionService(this);
     }
@@ -340,9 +347,8 @@ protected void onDestroy() {
 	 * @return <code>true</code> if the minor version has been increased, <code>false</code> otherwise.
 	 */
 	private boolean hasNewFeatures(){
-        String versionName = getResources().getString(R.string.app_version_name);
-        int end = versionName.indexOf('.');
-        int currentMinor = Integer.parseInt(versionName.substring(0, end));
+        String minorVersion = getResources().getString(R.string.app_minor_version);
+        int currentMinor = Integer.parseInt(minorVersion);
 
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
         int previousMinor = prefs.getInt(getString(R.string.key_previous_minor_version), 0);
@@ -358,7 +364,7 @@ private boolean hasNewFeatures(){
 	/**
 	 * Show dialog with new features for this version
 	 */
-	public static void showWhatsNewDialog(Context context){
+	public static AlertDialog showWhatsNewDialog(Context context){
         Resources resources = context.getResources();
         StringBuilder releaseTitle = new StringBuilder(resources.getString(R.string.title_whats_new));
         PackageInfo packageInfo;
@@ -370,7 +376,7 @@ public static void showWhatsNewDialog(Context context){
             Log.e(LOG_TAG, "Error displaying 'Whats new' dialog");
         }
 
-        new AlertDialog.Builder(context)
+        return new AlertDialog.Builder(context)
 		.setTitle(releaseTitle.toString())
 		.setMessage(R.string.whats_new)
 		.setPositiveButton(R.string.label_dismiss, new DialogInterface.OnClickListener() {
