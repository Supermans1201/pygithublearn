From 2ba476a4370f1ec781bb14ee7822ee05a33e45b1 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 20 Aug 2012 01:14:39 +0200
Subject: [PATCH] Improved tests to be locale independent Code refactoring

---
 GnucashMobile/src/org/gnucash/android/data/Money.java  |  5 ++---
 .../ui/transactions/NewTransactionFragment.java        |  1 +
 .../gnucash/android/test/db/AccountsDbAdapterTest.java |  9 +++++++++
 .../android/test/ui/TransactionsActivityTest.java      | 18 ++++++++++++++----
 4 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/GnucashMobile/src/org/gnucash/android/data/Money.java b/GnucashMobile/src/org/gnucash/android/data/Money.java
index 24f8ed04..bd93fc33 100644
--- a/GnucashMobile/src/org/gnucash/android/data/Money.java
+++ b/GnucashMobile/src/org/gnucash/android/data/Money.java
@@ -200,15 +200,14 @@ public String asString(){
 	/**
 	 * Returns a string representation of the Money object formatted according to 
 	 * the <code>locale</code> and includes the currency symbol. 
-	 * The output precision is limited to {@link #DECIMAL_PLACES}
+	 * The output precision is limited to {@link #DECIMAL_PLACES}.
 	 * @param locale Locale to use when formatting the object
 	 * @return String containing formatted Money representation
 	 */
 	public String formattedString(Locale locale){
-		DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(locale);	
+		NumberFormat formatter = NumberFormat.getInstance(locale);
 		formatter.setMinimumFractionDigits(DECIMAL_PLACES);
 		formatter.setMaximumFractionDigits(DECIMAL_PLACES);
-		
 		return formatter.format(asDouble()) + " " + mCurrency.getSymbol(locale);
 	}
 	
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index 197ee1c4..4315981b 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -502,6 +502,7 @@ public static String stripCurrencyFormatting(String s){
 	 */
 	public BigDecimal parseInputToDecimal(String amountString){
 		String clean = stripCurrencyFormatting(amountString);
+		//all amounts are input to 2 decimal places, so after removing decimal separator, divide by 100
 		BigDecimal amount = new BigDecimal(clean).setScale(2,
 				RoundingMode.HALF_EVEN).divide(new BigDecimal(100), 2,
 				RoundingMode.HALF_EVEN);
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java b/GnucashMobileTest/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java
index 7f811a24..96063718 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java
@@ -19,6 +19,7 @@
 	protected void setUp() throws Exception {		
 		super.setUp();
 		mAdapter = new AccountsDbAdapter(getContext());
+		mAdapter.deleteAllAccounts();
 		Account first = new Account(ALPHA_ACCOUNT_NAME);
 		Transaction t1 = new Transaction("2.99", "T800");
 		t1.setAccountUID(first.getUID());
@@ -35,6 +36,7 @@ protected void setUp() throws Exception {
 	
 	public void testAlphabeticalSorting(){
 		List<Account> accountsList = mAdapter.getAllAccounts();
+		assertEquals(2, accountsList.size());
 		//bravo was saved first, but alpha should be first alphabetically
 		assertEquals(ALPHA_ACCOUNT_NAME, accountsList.get(0).getName());
 		assertEquals(BRAVO_ACCOUNT_NAME, accountsList.get(1).getName());
@@ -55,4 +57,11 @@ public void testTransactionsHaveSameCurrencyAsAccount(){
 			assertEquals("JPY", t.getAmount().getCurrency().getCurrencyCode());
 		}
 	}
+	
+	@Override
+	protected void tearDown() throws Exception {
+		super.tearDown();
+		mAdapter.deleteAllAccounts();
+		mAdapter.close();
+	}
 }
diff --git a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 649be9da..3bc71770 100644
--- a/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/GnucashMobileTest/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -16,6 +16,8 @@
 
 package org.gnucash.android.test.ui;
 
+import java.text.NumberFormat;
+import java.text.ParseException;
 import java.util.Currency;
 import java.util.Date;
 import java.util.List;
@@ -43,6 +45,7 @@
 
 public class TransactionsActivityTest extends
 		ActivityInstrumentationTestCase2<TransactionsActivity> {
+	private static final String TRANSACTION_AMOUNT = "9.99";
 	private static final String TRANSACTION_NAME = "Pizza";
 	private static final String DUMMY_ACCOUNT_UID = "transactions-account";
 	private static final String DUMMY_ACCOUNT_NAME = "Transactions Account";
@@ -60,7 +63,7 @@ protected void setUp() throws Exception {
 		Account account = new Account(DUMMY_ACCOUNT_NAME);
 		account.setUID(DUMMY_ACCOUNT_UID);
 		account.setCurrency(Currency.getInstance(Locale.getDefault()));
-		mTransaction = new Transaction("9.99", TRANSACTION_NAME);
+		mTransaction = new Transaction(TRANSACTION_AMOUNT, TRANSACTION_NAME);
 		mTransaction.setAccountUID(DUMMY_ACCOUNT_UID);
 		mTransaction.setDescription("What up?");
 		mTransaction.setTime(mTransactionTimeMillis);
@@ -125,8 +128,8 @@ public void testAddTransaction(){
 		mSolo.enterText(1, "899");
 		//check that the amount is correctly converted in the input field
 		String value = mSolo.getEditText(1).getText().toString();
-		double actualValue = Money.parseToDecimal(value).doubleValue();
-		assertEquals(-8.99, actualValue);
+		String expectedValue = NumberFormat.getInstance().format(-8.99); 
+		assertEquals(expectedValue, value);
 		
 		int transactionsCount = getTranscationCount();
 		
@@ -145,7 +148,13 @@ private void validateEditTransactionFields(Transaction transaction){
 		assertEquals(transaction.getName(), name);
 		
 		String amountString = mSolo.getEditText(1).getText().toString();
-		Money amount = new Money(amountString);
+		NumberFormat formatter = NumberFormat.getInstance();
+		try {
+			amountString = formatter.parse(amountString).toString();
+		} catch (ParseException e) {
+			e.printStackTrace();
+		}
+		Money amount = new Money(amountString, Currency.getInstance(Locale.getDefault()).getCurrencyCode());
 		assertEquals(transaction.getAmount(), amount);
 		
 		String description = mSolo.getEditText(2).getText().toString();
@@ -235,6 +244,7 @@ public void testDeleteTransaction(){
 	
 	public void testBulkMoveTransactions(){
 		Account account = new Account("Target");
+		account.setCurrency(Currency.getInstance(Locale.getDefault()));
 		AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
 		accountsDbAdapter.addAccount(account);
 		
