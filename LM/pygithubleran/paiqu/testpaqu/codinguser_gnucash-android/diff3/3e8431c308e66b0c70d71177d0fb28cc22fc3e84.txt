From a2a8d5015d890b4c14ca169a04ed1b3a338109d6 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 3 Nov 2015 13:53:13 +0100
Subject: [PATCH 01/13] Use commodity fraction digits instead of those from
 Currency

Currency fraction digits seem to vary with Android/Java version and device.
This leads to inconsistencies in the way balances are calculated. By using our Commodities, we are sure that we get consistent values across all devices since pre-load the database ourselves
---
 .../gnucash/android/db/CommoditiesDbAdapter.java   |  6 +--
 .../org/gnucash/android/db/DatabaseHelper.java     |  3 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |  2 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  7 ++-
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 17 +++---
 .../gnucash/android/export/xml/GncXmlExporter.java | 17 +++---
 .../gnucash/android/export/xml/GncXmlHelper.java   |  9 ++--
 .../android/importer/CommoditiesXmlHandler.java    | 15 ++++++
 .../java/org/gnucash/android/model/Commodity.java  | 61 +++++++++++++++++++---
 .../main/java/org/gnucash/android/model/Money.java | 43 ++++++++-------
 .../android/receivers/TransactionRecorder.java     |  5 +-
 .../android/ui/account/AccountsActivity.java       |  2 +-
 .../dialog/TransferFundsDialogFragment.java        |  6 ++-
 .../android/ui/util/widget/CalculatorEditText.java |  7 ++-
 .../android/test/unit/export/GncXmlHelperTest.java |  8 ++-
 .../android/test/unit/model/AccountTest.java       | 15 ++++++
 .../android/test/unit/model/CommodityTest.java     | 49 +++++++++++++++++
 .../gnucash/android/test/unit/model/MoneyTest.java |  9 ++++
 .../gnucash/android/test/unit/model/SplitTest.java |  8 +++
 19 files changed, 224 insertions(+), 65 deletions(-)
 create mode 100644 app/src/test/java/org/gnucash/android/test/unit/model/CommodityTest.java

diff --git a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
index 3a62142e..043a8291 100644
--- a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
@@ -37,7 +37,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Commodity commo
                     + CommodityEntry.COLUMN_MNEMONIC        + " , "
                     + CommodityEntry.COLUMN_LOCAL_SYMBOL    + " , "
                     + CommodityEntry.COLUMN_CUSIP           + " , "
-                    + CommodityEntry.COLUMN_FRACTION        + " , "
+                    + CommodityEntry.COLUMN_SMALLEST_FRACTION + " , "
                     + CommodityEntry.COLUMN_QUOTE_FLAG      + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? ) ");
         }
 
@@ -48,7 +48,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Commodity commo
         mReplaceStatement.bindString(4, commodity.getMnemonic());
         mReplaceStatement.bindString(5, commodity.getLocalSymbol());
         mReplaceStatement.bindString(6, commodity.getCusip());
-        mReplaceStatement.bindLong(7, commodity.getFraction());
+        mReplaceStatement.bindLong(7, commodity.getSmallestFraction());
         mReplaceStatement.bindLong(8,   commodity.getQuoteFlag());
 
         return mReplaceStatement;
@@ -62,7 +62,7 @@ public Commodity buildModelInstance(@NonNull final Cursor cursor) {
         String cusip = cursor.getString(cursor.getColumnIndexOrThrow(CommodityEntry.COLUMN_CUSIP));
         String localSymbol = cursor.getString(cursor.getColumnIndexOrThrow(CommodityEntry.COLUMN_LOCAL_SYMBOL));
 
-        int fraction = cursor.getInt(cursor.getColumnIndexOrThrow(CommodityEntry.COLUMN_FRACTION));
+        int fraction = cursor.getInt(cursor.getColumnIndexOrThrow(CommodityEntry.COLUMN_SMALLEST_FRACTION));
         int quoteFlag = cursor.getInt(cursor.getColumnIndexOrThrow(CommodityEntry.COLUMN_QUOTE_FLAG));
 
         Commodity commodity = new Commodity(fullname, mnemonic, fraction);
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 968b4c09..5af6e0e9 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -31,7 +31,6 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.util.Locale;
 
 import javax.xml.parsers.ParserConfigurationException;
 
@@ -143,7 +142,7 @@
             + CommodityEntry.COLUMN_MNEMONIC    + " varchar(255) not null, "
             + CommodityEntry.COLUMN_LOCAL_SYMBOL+ " varchar(255) not null default '', "
             + CommodityEntry.COLUMN_CUSIP       + " varchar(255), "
-            + CommodityEntry.COLUMN_FRACTION    + " integer not null, "
+            + CommodityEntry.COLUMN_SMALLEST_FRACTION + " integer not null, "
             + CommodityEntry.COLUMN_QUOTE_FLAG  + " integer not null, "
             + CommodityEntry.COLUMN_CREATED_AT  + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
             + CommodityEntry.COLUMN_MODIFIED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index de4b3e72..c39568a3 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -160,7 +160,7 @@ private DatabaseSchema(){}
         /**
          * The fraction is the number of sub-units that the basic commodity can be divided into
          */
-        public static final String COLUMN_FRACTION      = "fraction";
+        public static final String COLUMN_SMALLEST_FRACTION = "fraction";
 
         /**
          * A CUSIP is a nine-character alphanumeric code that identifies a North American financial security
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 943087c0..b8039c6b 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -53,7 +53,6 @@
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.UUID;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
@@ -853,7 +852,7 @@ static int upgradeDbToVersion9(SQLiteDatabase db){
                     + CommodityEntry.COLUMN_MNEMONIC    + " varchar(255) not null, "
                     + CommodityEntry.COLUMN_LOCAL_SYMBOL+ " varchar(255) not null default '', "
                     + CommodityEntry.COLUMN_CUSIP       + " varchar(255), "
-                    + CommodityEntry.COLUMN_FRACTION    + " integer not null, "
+                    + CommodityEntry.COLUMN_SMALLEST_FRACTION + " integer not null, "
                     + CommodityEntry.COLUMN_QUOTE_FLAG  + " integer not null, "
                     + CommodityEntry.COLUMN_CREATED_AT  + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
                     + CommodityEntry.COLUMN_MODIFIED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
@@ -958,7 +957,7 @@ static int upgradeDbToVersion9(SQLiteDatabase db){
             String query = "SELECT " + "A." + AccountEntry.COLUMN_UID + " AS account_uid "
                     + " FROM " + AccountEntry.TABLE_NAME + " AS A, " + CommodityEntry.TABLE_NAME + " AS C "
                     + " WHERE A." + AccountEntry.COLUMN_CURRENCY + " = C." + CommodityEntry.COLUMN_MNEMONIC
-                    + " AND C." + CommodityEntry.COLUMN_FRACTION + "= 1";
+                    + " AND C." + CommodityEntry.COLUMN_SMALLEST_FRACTION + "= 1";
 
             Cursor cursor = db.rawQuery(query, null);
 
@@ -1007,7 +1006,7 @@ static int upgradeDbToVersion9(SQLiteDatabase db){
             query = "SELECT " + "A." + AccountEntry.COLUMN_UID + " AS account_uid "
                     + " FROM " + AccountEntry.TABLE_NAME + " AS A, " + CommodityEntry.TABLE_NAME + " AS C "
                     + " WHERE A." + AccountEntry.COLUMN_CURRENCY + " = C." + CommodityEntry.COLUMN_MNEMONIC
-                    + " AND C." + CommodityEntry.COLUMN_FRACTION + "= 1000";
+                    + " AND C." + CommodityEntry.COLUMN_SMALLEST_FRACTION + "= 1000";
 
             cursor = db.rawQuery(query, null);
 
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index b96b85fa..84215fc8 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -28,6 +28,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.TransactionType;
@@ -210,21 +211,21 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
             Money total = Money.createZeroInstance(currencyCode);
             CommoditiesDbAdapter commoditiesDbAdapter = null;
             PricesDbAdapter pricesDbAdapter = null;
-            Currency currency = null;
+            Commodity commodity = null;
             String currencyUID = null;
             while (cursor.moveToNext()) {
                 long amount_num = cursor.getLong(0);
                 long amount_denom = cursor.getLong(1);
-                String commodity = cursor.getString(2);
+                String commodityCode = cursor.getString(2);
                 //Log.d(getClass().getName(), commodity + " " + amount_num + "/" + amount_denom);
-                if (commodity.equals("XXX") || amount_num == 0) {
+                if (commodityCode.equals("XXX") || amount_num == 0) {
                     // ignore custom currency
                     continue;
                 }
                 if (!hasDebitNormalBalance) {
                     amount_num = -amount_num;
                 }
-                if (commodity.equals(currencyCode)) {
+                if (commodityCode.equals(currencyCode)) {
                     // currency matches
                     total = total.add(new Money(amount_num, amount_denom, currencyCode));
                     //Log.d(getClass().getName(), "currency " + commodity + " sub - total " + total);
@@ -233,11 +234,11 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
                     if (commoditiesDbAdapter == null) {
                         commoditiesDbAdapter = new CommoditiesDbAdapter(mDb);
                         pricesDbAdapter = new PricesDbAdapter(mDb);
-                        currency = Currency.getInstance(currencyCode);
+                        commodity = commoditiesDbAdapter.getCommodity(currencyCode);
                         currencyUID = commoditiesDbAdapter.getCommodityUID(currencyCode);
                     }
                     // get price
-                    String commodityUID = commoditiesDbAdapter.getCommodityUID(commodity);
+                    String commodityUID = commoditiesDbAdapter.getCommodityUID(commodityCode);
                     Pair<Long, Long> price = pricesDbAdapter.getPrice(commodityUID, currencyUID);
                     if (price.first <= 0 || price.second <= 0) {
                         // no price exists, just ignore it
@@ -245,8 +246,8 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
                     }
                     BigDecimal amount = Money.getBigDecimal(amount_num, amount_denom);
                     BigDecimal amountConverted = amount.multiply(new BigDecimal(price.first))
-                            .divide(new BigDecimal(price.second), currency.getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
-                    total = total.add(new Money(amountConverted, currency));
+                            .divide(new BigDecimal(price.second), commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
+                    total = total.add(new Money(amountConverted, commodity));
                     //Log.d(getClass().getName(), "currency " + commodity + " sub - total " + total);
                 }
             }
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 8577781f..6d8179eb 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -23,6 +23,7 @@
 
 import com.crashlytics.android.Crashlytics;
 
+import org.gnucash.android.db.CommoditiesDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
@@ -31,6 +32,7 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.ScheduledAction;
@@ -147,8 +149,9 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT_COMMODITY);
             // commodity scu
+            Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(acctCurrencyCode);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
-            xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
+            xmlSerializer.text(Integer.toString(commodity.getSmallestFraction()));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
             // account description
             String description = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_DESCRIPTION));
@@ -283,7 +286,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
         String lastTrxUID = "";
-        Currency trxCurrency = null;
+        Commodity trnCommodity = null;
         String denomString = "100";
 
         if (exportTemplates) {
@@ -319,14 +322,14 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                 xmlSerializer.text(curTrxUID);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_ID);
                 // currency
-                String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
-                trxCurrency = Currency.getInstance(currency);
+                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                trnCommodity = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);//Currency.getInstance(currencyCode);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
                 xmlSerializer.text("ISO4217");
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.text(currency);
+                xmlSerializer.text(currencyCode);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
                 // date posted, time which user put on the transaction
@@ -456,14 +459,14 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
                     slotValues.add(GncXmlHelper.formatTemplateSplitAmount(splitAmount));
                     slotKeys.add(GncXmlHelper.KEY_CREDIT_NUMERIC);
                     slotTypes.add(GncXmlHelper.ATTR_VALUE_NUMERIC);
-                    slotValues.add(GncXmlHelper.formatSplitAmount(splitAmount, trxCurrency));
+                    slotValues.add(GncXmlHelper.formatSplitAmount(splitAmount, trnCommodity));
                 } else {
                     slotKeys.add(GncXmlHelper.KEY_DEBIT_FORMULA);
                     slotTypes.add(GncXmlHelper.ATTR_VALUE_STRING);
                     slotValues.add(GncXmlHelper.formatTemplateSplitAmount(splitAmount));
                     slotKeys.add(GncXmlHelper.KEY_DEBIT_NUMERIC);
                     slotTypes.add(GncXmlHelper.ATTR_VALUE_NUMERIC);
-                    slotValues.add(GncXmlHelper.formatSplitAmount(splitAmount, trxCurrency));
+                    slotValues.add(GncXmlHelper.formatSplitAmount(splitAmount, trnCommodity));
                 }
 
                 exportSlots(xmlSerializer, slotKeys, slotTypes, slotValues);
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 92de9512..6a13908c 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -19,6 +19,8 @@
 
 import android.support.annotation.NonNull;
 
+import org.gnucash.android.db.CommoditiesDbAdapter;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 
 import java.math.BigDecimal;
@@ -194,12 +196,11 @@ public static BigDecimal parseSplitAmount(String amountString) throws ParseExcep
     /**
      * Formats money amounts for splits in the format 2550/100
      * @param amount Split amount as BigDecimal
-     * @param trxCurrency Currency of the transaction
+     * @param commodity Commodity of the transaction
      * @return Formatted split amount
      */
-    public static String formatSplitAmount(BigDecimal amount, Currency trxCurrency){
-        int fractionDigits = trxCurrency.getDefaultFractionDigits();
-        int denomInt = (int) Math.pow(10, fractionDigits);
+    public static String formatSplitAmount(BigDecimal amount, Commodity commodity){
+        int denomInt = commodity.getSmallestFraction();
         BigDecimal denom = new BigDecimal(denomInt);
         String denomString = Integer.toString(denomInt);
 
diff --git a/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java
index 6b4ce3a1..34e75e03 100644
--- a/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.gnucash.android.importer;
 
 import android.database.sqlite.SQLiteDatabase;
diff --git a/app/src/main/java/org/gnucash/android/model/Commodity.java b/app/src/main/java/org/gnucash/android/model/Commodity.java
index 169e2d15..154c3169 100644
--- a/app/src/main/java/org/gnucash/android/model/Commodity.java
+++ b/app/src/main/java/org/gnucash/android/model/Commodity.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.gnucash.android.model;
 
 /**
@@ -16,19 +31,19 @@
     private String mFullname;
     private String mCusip;
     private String mLocalSymbol = "";
-    private int mFraction;
+    private int mSmallestFraction;
     private int mQuoteFlag;
 
     /**
      * Create a new commodity
      * @param fullname Official full name of the currency
      * @param mnemonic Official abbreviated designation for the currency
-     * @param fraction Number of sub-units that the basic commodity can be divided into
+     * @param smallestFraction Number of sub-units that the basic commodity can be divided into, as power of 10. e.g. 10^&lt;number_of_fraction_digits&gt;
      */
-    public Commodity(String fullname, String mnemonic, int fraction){
+    public Commodity(String fullname, String mnemonic, int smallestFraction){
         this.mFullname = fullname;
         this.mMnemonic = mnemonic;
-        this.mFraction = fraction;
+        setSmallestFraction(smallestFraction);
     }
 
     public Namespace getNamespace() {
@@ -88,12 +103,42 @@ public void setLocalSymbol(String localSymbol) {
         this.mLocalSymbol = localSymbol;
     }
 
-    public int getFraction() {
-        return mFraction;
+    /**
+     * Returns the smallest fraction supported by the commodity as a power of 10.
+     * <p>i.e. for commodities with no fractions, 1 is returned, for commodities with 2 fractions, 100 is returned</p>
+     * @return Smallest fraction as power of 10
+     */
+    public int getSmallestFraction() {
+        return mSmallestFraction;
+    }
+
+    /**
+     * Returns the (minimum) number of digits that this commodity supports in its fractional part
+     * @return Number of digits in fraction
+     */
+    public int getSmallestFractionDigits(){
+        switch (mSmallestFraction) {
+            case 1:     return 0;
+            case 10:    return 1;
+            case 100:   return 2;
+            case 1000:  return 3;
+            default:
+                throw new UnsupportedOperationException("Invalid fraction digits in commodity with fraction: " + mSmallestFraction);
+        }
     }
 
-    public void setFraction(int fraction) {
-        this.mFraction = fraction;
+    /**
+     * Sets the smallest fraction for the commodity.
+     * <p>The fraction is a power of 10. So commodities with 2 fraction digits, have fraction of 10^2 = 100.<br>
+     *     If the parameter is any other value, a default fraction of 100 will be set</p>
+     * @param smallestFraction Smallest fraction as power of ten
+     * @throws IllegalArgumentException if the smallest fraction is not a power of 10
+     */
+    public void setSmallestFraction(int smallestFraction) {
+        if (smallestFraction != 1 && smallestFraction != 10 && smallestFraction != 100 && smallestFraction != 1000 && smallestFraction != 10000) //make sure we are not getting digits
+            this.mSmallestFraction = 100;
+        else
+            this.mSmallestFraction = smallestFraction;
     }
 
     public int getQuoteFlag() {
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 20024b1c..686bc379 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -23,6 +23,7 @@
 import com.crashlytics.android.Crashlytics;
 
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.CommoditiesDbAdapter;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -49,11 +50,12 @@
  */
 public final class Money implements Comparable<Money>{
 
+	//// FIXME: 03.11.2015 Currency#getDefaultFractionDigits() is unreliable. Switch to Commodity
 	/**
 	 * Currency of the account
 	 */
 	private Currency mCurrency;
-	
+
 	/**
 	 * Amount value held by this object
 	 */
@@ -135,7 +137,17 @@ public Money(BigDecimal amount, Currency currency){
 		this.mAmount = amount;
 		setCurrency(currency);
 	}
-	
+
+	/**
+	 * Creates a new money amount
+	 * @param amount Value of the amount
+	 * @param commodity Commodity of the money
+	 */
+	public Money(BigDecimal amount, Commodity commodity){
+		this.mAmount = amount;
+		mCurrency = Currency.getInstance(commodity.getMnemonic());
+	}
+
 	/**
 	 * Overloaded constructor.
 	 * Accepts strings as arguments and parses them to create the Money object
@@ -269,7 +281,8 @@ public long getDenominator() {
 	 * @return Scale of amount as integer
 	 */
 	private int getScale() {
-		int scale = mCurrency.getDefaultFractionDigits();
+		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
+		int scale = commodity.getSmallestFractionDigits();
 		if (scale < 0) {
 			scale = mAmount.scale();
 		}
@@ -322,8 +335,9 @@ public String asString(){
 	 */
     public String formattedString(Locale locale){
 		NumberFormat formatter = NumberFormat.getInstance(locale);
-		formatter.setMinimumFractionDigits(mCurrency.getDefaultFractionDigits());
-		formatter.setMaximumFractionDigits(mCurrency.getDefaultFractionDigits());
+		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
+		formatter.setMinimumFractionDigits(commodity.getSmallestFractionDigits());
+		formatter.setMaximumFractionDigits(commodity.getSmallestFractionDigits());
 		return formatter.format(asDouble()) + " " + mCurrency.getSymbol(locale);
 	}
 
@@ -349,7 +363,8 @@ public Money negate(){
 	 * @param amount {@link BigDecimal} amount to be set
 	 */
 	private void setAmount(BigDecimal amount) {
-		mAmount = amount.setScale(mCurrency.getDefaultFractionDigits(), ROUNDING_MODE);
+		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
+		mAmount = amount.setScale(commodity.getSmallestFractionDigits(), ROUNDING_MODE);
 	}
 	
 	/**
@@ -472,20 +487,8 @@ public boolean isNegative(){
 	 * @return String representation of the amount (without currency) of the Money object
 	 */
 	public String toPlainString(){
-		return mAmount.setScale(mCurrency.getDefaultFractionDigits(), ROUNDING_MODE).toPlainString();
-	}
-
-	/**
-	 * Returns the formatted amount in the default locale
-	 * <p>This prints the money amount with locale formatting like the decimal separation character</p>
-	 * @return Locale-formatted amount
-	 */
-	public String formattedAmount(){
-		NumberFormat formatter = NumberFormat.getInstance();
-		formatter.setMinimumFractionDigits(mCurrency.getDefaultFractionDigits());
-		formatter.setMaximumFractionDigits(mCurrency.getDefaultFractionDigits());
-		formatter.setGroupingUsed(false);
-		return formatter.format(asDouble());
+		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(getCurrency().getCurrencyCode());
+		return mAmount.setScale(commodity.getSmallestFractionDigits(), ROUNDING_MODE).toPlainString();
 	}
 
 	/**
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
index 3e192af0..b3147599 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
@@ -24,8 +24,10 @@
 
 import com.crashlytics.android.Crashlytics;
 
+import org.gnucash.android.db.CommoditiesDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -73,7 +75,8 @@ public void onReceive(Context context, Intent intent) {
         if (accountUID != null) {
             TransactionType type = TransactionType.valueOf(args.getString(Transaction.EXTRA_TRANSACTION_TYPE));
             BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
-            amountBigDecimal = amountBigDecimal.setScale(Currency.getInstance(currencyCode).getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN).round(MathContext.DECIMAL128);
+            Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
+            amountBigDecimal = amountBigDecimal.setScale(commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN).round(MathContext.DECIMAL128);
             Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
             Split split = new Split(amount.absolute(), accountUID);
             split.setType(type);
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 878eae0a..6a1915a6 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -152,7 +152,7 @@
     /**
      * Configuration for rating the app
      */
-    public static RateThisApp.Config rateAppConfig = new RateThisApp.Config(14, 50);
+    public static RateThisApp.Config rateAppConfig = new RateThisApp.Config(14, 100);
 
     /**
      * Adapter for managing the sub-account and transaction fragment pages in the accounts view
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index 2a40a34f..9166d21e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -37,6 +37,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.db.CommoditiesDbAdapter;
 import org.gnucash.android.db.PricesDbAdapter;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Price;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
@@ -107,7 +108,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
         CommoditiesDbAdapter commoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
         String commodityUID = commoditiesDbAdapter.getCommodityUID(fromCurrency.getCurrencyCode());
-        String currencyUID = commoditiesDbAdapter.getCommodityUID(mTargetCurrency.getCurrencyCode());
+        Commodity currencyCommodity = commoditiesDbAdapter.getCommodity(mTargetCurrency.getCurrencyCode());
+        String currencyUID = currencyCommodity.getUID();
         PricesDbAdapter pricesDbAdapter = PricesDbAdapter.getInstance();
         Pair<Long, Long> price = pricesDbAdapter.getPrice(commodityUID, currencyUID);
 
@@ -116,7 +118,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             BigDecimal num = new BigDecimal(price.first);
             BigDecimal denom = new BigDecimal(price.second);
             mExchangeRateInput.setText(num.divide(denom, MathContext.DECIMAL32).toString());
-            mConvertedAmountInput.setText(mOriginAmount.asBigDecimal().multiply(num).divide(denom, mTargetCurrency.getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN).toString());
+            mConvertedAmountInput.setText(mOriginAmount.asBigDecimal().multiply(num).divide(denom, currencyCommodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN).toString());
         }
 
         mExchangeRateInput.addTextChangedListener(textChangeListener);
diff --git a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
index 9805df25..c0ebf47e 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
@@ -37,6 +37,8 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.CommoditiesDbAdapter;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.ui.common.FormActivity;
 
 import java.math.BigDecimal;
@@ -327,11 +329,12 @@ public BigDecimal getValue(){
      * @param amount BigDecimal amount
      */
     public void setValue(BigDecimal amount){
-        BigDecimal newAmount = amount.setScale(mCurrency.getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
+        Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
+        BigDecimal newAmount = amount.setScale(commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
 
         DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
         formatter.setMinimumFractionDigits(0);
-        formatter.setMaximumFractionDigits(mCurrency.getDefaultFractionDigits());
+        formatter.setMaximumFractionDigits(commodity.getSmallestFractionDigits());
         formatter.setGroupingUsed(false);
         String resultString = formatter.format(newAmount.doubleValue());
 
diff --git a/app/src/test/java/org/gnucash/android/test/unit/export/GncXmlHelperTest.java b/app/src/test/java/org/gnucash/android/test/unit/export/GncXmlHelperTest.java
index 20bc2e09..0e4c811f 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/export/GncXmlHelperTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/export/GncXmlHelperTest.java
@@ -1,6 +1,7 @@
 package org.gnucash.android.test.unit.export;
 
 import org.gnucash.android.export.xml.GncXmlHelper;
+import org.gnucash.android.model.Commodity;
 import org.junit.Test;
 
 import java.math.BigDecimal;
@@ -34,13 +35,16 @@ public void shouldFailToParseWronglyFormattedInput() throws ParseException {
 
     @Test
     public void testFormatSplitAmount(){
+        Commodity usdCommodity = new Commodity("US Dollars", "USD", 100);
+        Commodity euroCommodity = new Commodity("Euro", "EUR", 100);
+
         BigDecimal bigDecimal = new BigDecimal("45.90");
-        String amount = GncXmlHelper.formatSplitAmount(bigDecimal, Currency.getInstance("USD"));
+        String amount = GncXmlHelper.formatSplitAmount(bigDecimal, usdCommodity);
         assertThat(amount).isEqualTo("4590/100");
 
 
         bigDecimal = new BigDecimal("350");
-        amount = GncXmlHelper.formatSplitAmount(bigDecimal, Currency.getInstance("EUR"));
+        amount = GncXmlHelper.formatSplitAmount(bigDecimal, euroCommodity);
         assertThat(amount).isEqualTo("35000/100");
     }
 }
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
index e3b9193a..ff14d175 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.gnucash.android.test.unit.model;
 
 import org.gnucash.android.model.Account;
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/CommodityTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/CommodityTest.java
new file mode 100644
index 00000000..14d82b9b
--- /dev/null
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/CommodityTest.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.test.unit.model;
+
+import org.gnucash.android.model.Commodity;
+import org.junit.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+/**
+ * Test commodities
+ */
+public class CommodityTest {
+
+    @Test
+    public void setSmallestFraction_shouldNotUseDigits(){
+        Commodity commodity = new Commodity("Test", "USD", 4);
+        assertThat(commodity.getSmallestFraction()).isEqualTo(100);
+
+        commodity.setSmallestFraction(1000);
+        assertThat(commodity.getSmallestFraction()).isEqualTo(1000);
+    }
+
+    @Test
+    public void testSmallestFractionDigits(){
+        Commodity commodity = new Commodity("Test", "USD", 4);
+        assertThat(commodity.getSmallestFractionDigits()).isEqualTo(2);
+
+        commodity.setSmallestFraction(10);
+        assertThat(commodity.getSmallestFractionDigits()).isEqualTo(1);
+
+        commodity.setSmallestFraction(1);
+        assertThat(commodity.getSmallestFractionDigits()).isEqualTo(0);
+
+    }
+}
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
index 2e0fbaac..1cf406d8 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
@@ -21,12 +21,21 @@
 import java.util.Locale;
 
 import static org.assertj.core.api.Assertions.assertThat;
+
+import org.gnucash.android.BuildConfig;
 import org.gnucash.android.model.Money;
+import org.gnucash.android.test.unit.util.GnucashTestRunner;
+import org.gnucash.android.test.unit.util.ShadowCrashlytics;
+import org.gnucash.android.test.unit.util.ShadowUserVoice;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.*;
 
+@RunWith(GnucashTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class, ShadowUserVoice.class})
 public class MoneyTest{
 
 	private static final String CURRENCY_CODE = "EUR";
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
index 647cc15c..c6b88efa 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
@@ -1,10 +1,16 @@
 package org.gnucash.android.test.unit.model;
 
+import org.gnucash.android.BuildConfig;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
+import org.gnucash.android.test.unit.util.GnucashTestRunner;
+import org.gnucash.android.test.unit.util.ShadowCrashlytics;
+import org.gnucash.android.test.unit.util.ShadowUserVoice;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.math.BigDecimal;
 import java.util.Currency;
@@ -16,6 +22,8 @@
  *
  * @author Ngewi
  */
+@RunWith(GnucashTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class, ShadowUserVoice.class})
 public class SplitTest {
 
     @Test

From 6fb17c7423cf3ad83c77c66c75212e504dc9561e Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 3 Nov 2015 15:36:40 +0100
Subject: [PATCH 02/13] Change Money to use Commodity instead of Currency

---
 .../android/test/ui/AccountsActivityTest.java      |   5 +-
 .../android/test/ui/PieChartReportTest.java        |   3 +-
 .../gnucash/android/importer/GncXmlHandler.java    |  16 +-
 .../java/org/gnucash/android/model/Account.java    |   8 +
 .../java/org/gnucash/android/model/BaseModel.java  |   9 +-
 .../java/org/gnucash/android/model/Commodity.java  |  79 ++++++++-
 .../main/java/org/gnucash/android/model/Money.java | 194 +++++++++------------
 .../android/receivers/TransactionRecorder.java     |   2 +-
 .../ui/transaction/SplitEditorFragment.java        |   9 +-
 .../ui/transaction/TransactionFormFragment.java    |   7 +-
 .../dialog/TransferFundsDialogFragment.java        |   2 +-
 .../test/unit/db/AccountsDbAdapterTest.java        |   3 +-
 .../test/unit/db/TransactionsDbAdapterTest.java    |   7 +-
 .../gnucash/android/test/unit/model/MoneyTest.java |  18 +-
 .../gnucash/android/test/unit/model/SplitTest.java |   7 +-
 15 files changed, 216 insertions(+), 153 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index e5723586..ecae2fa0 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -40,6 +40,7 @@
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -80,7 +81,7 @@
 @RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
 	private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
-    private static final Currency DUMMY_ACCOUNT_CURRENCY = Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
+    private static final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
 	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
     public static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
     private DatabaseHelper mDbHelper;
@@ -282,7 +283,7 @@ public void editingAccountShouldNotDeleteTransactions(){
                 .perform(click());
 
         Account account = new Account("Transfer Account");
-        account.setCurrency(DUMMY_ACCOUNT_CURRENCY);
+        account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode()));
         Transaction transaction = new Transaction("Simple trxn");
         transaction.setCurrencyCode(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode());
         Split split = new Split(new Money(BigDecimal.TEN, DUMMY_ACCOUNT_CURRENCY), account.getUID());
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index 59ef63c4..72ce5e0f 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -42,6 +42,7 @@
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -94,7 +95,7 @@
     private static final String GIFTS_RECEIVED_INCOME_ACCOUNT_UID = "b01950c0df0890b6543209d51c8e0b0f";
     private static final String GIFTS_RECEIVED_INCOME_ACCOUNT_NAME = "Gifts Received";
 
-    public static final Currency CURRENCY = Currency.getInstance("USD");
+    public static final Commodity CURRENCY = Commodity.getInstance("USD");
 
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index fec03cfa..9e12030d 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -33,6 +33,7 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.Price;
@@ -53,7 +54,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Stack;
-import java.util.UUID;
 import java.util.regex.Pattern;
 
 /**
@@ -566,9 +566,9 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                     //this is intentional: GnuCash XML formats split amounts, credits are negative, debits are positive.
                     mSplit.setType(mNegativeQuantity ? TransactionType.CREDIT : TransactionType.DEBIT);
                     //the split amount uses the account currency
-                    mSplit.setQuantity(new Money(mQuantity, getCurrencyForAccount(characterString)));
+                    mSplit.setQuantity(new Money(mQuantity, getCommodityForAccount(characterString)));
                     //the split value uses the transaction currency
-                    mSplit.setValue(new Money(mValue, mTransaction.getCurrency()));
+                    mSplit.setValue(new Money(mValue, Commodity.getInstance(mTransaction.getCurrency().getCurrencyCode())));
                     mSplit.setAccountUID(characterString);
                 } else {
                     if (!mIgnoreTemplateTransaction)
@@ -851,14 +851,14 @@ public void endDocument() throws SAXException {
      * Returns the currency for an account which has been parsed (but not yet saved to the db)
      * <p>This is used when parsing splits to assign the right currencies to the splits</p>
      * @param accountUID GUID of the account
-     * @return Currency of the account
+     * @return Commodity of the account
      */
-    private Currency getCurrencyForAccount(String accountUID){
+    private Commodity getCommodityForAccount(String accountUID){
         try {
-            return mAccountMap.get(accountUID).getCurrency();
+            return mAccountMap.get(accountUID).getCommodity();
         } catch (Exception e) {
             Crashlytics.logException(e);
-            return Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
+            return Commodity.getInstance(Money.DEFAULT_CURRENCY_CODE);
         }
     }
 
@@ -870,7 +870,7 @@ private Currency getCurrencyForAccount(String accountUID){
     private void handleEndOfTemplateNumericSlot(String characterString, TransactionType splitType) {
         try {
             BigDecimal amountBigD = GncXmlHelper.parseSplitAmount(characterString);
-            Money amount = new Money(amountBigD, getCurrencyForAccount(mSplit.getAccountUID()));
+            Money amount = new Money(amountBigD, getCommodityForAccount(mSplit.getAccountUID()));
             mSplit.setValue(amount.absolute());
             mSplit.setType(splitType);
             mIgnoreTemplateTransaction = false; //we have successfully parsed an amount
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 42ca5279..2b1025b4 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -335,6 +335,14 @@ public Currency getCurrency() {
 	}
 
 	/**
+	 * Return the commodity for this account
+	 * @return
+	 */
+	public Commodity getCommodity(){
+		return Commodity.getInstance(mCurrency.getCurrencyCode());
+	}
+
+	/**
 	 * Sets the currency to be used by this account
 	 * @param currency the mCurrency to set
 	 */
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index eefde82a..cf741495 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -108,6 +108,11 @@ public void setModifiedTimestamp(Timestamp modifiedTimestamp) {
         this.mModifiedTimestamp = modifiedTimestamp;
     }
 
+    /**
+     * Two instances are considered equal if their GUID's are the same
+     * @param o BaseModel instance to compare
+     * @return {@code true} if both instances are equal, {@code false} otherwise
+     */
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
@@ -115,12 +120,12 @@ public boolean equals(Object o) {
 
         BaseModel baseModel = (BaseModel) o;
 
-        return mUID.equals(baseModel.mUID);
+        return getUID().equals(baseModel.getUID());
 
     }
 
     @Override
     public int hashCode() {
-        return mUID.hashCode();
+        return getUID().hashCode();
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Commodity.java b/app/src/main/java/org/gnucash/android/model/Commodity.java
index 154c3169..89232512 100644
--- a/app/src/main/java/org/gnucash/android/model/Commodity.java
+++ b/app/src/main/java/org/gnucash/android/model/Commodity.java
@@ -15,6 +15,8 @@
  */
 package org.gnucash.android.model;
 
+import org.gnucash.android.db.CommoditiesDbAdapter;
+
 /**
  * Commodities are the currencies used in the application.
  * At the moment only ISO4217 currencies are supported
@@ -23,6 +25,23 @@
     public enum Namespace { ISO4217 } //Namespace for commodities
 
     private Namespace mNamespace = Namespace.ISO4217;
+/*
+    public static final Commodity USD = CommoditiesDbAdapter.getInstance().getCommodity("USD");
+    public static final Commodity EUR = CommoditiesDbAdapter.getInstance().getCommodity("EUR");
+    public static final Commodity GBP = CommoditiesDbAdapter.getInstance().getCommodity("GBP");
+    public static final Commodity CHF = CommoditiesDbAdapter.getInstance().getCommodity("CHF");
+    public static final Commodity CAD = CommoditiesDbAdapter.getInstance().getCommodity("CAD");
+    public static final Commodity JPY = CommoditiesDbAdapter.getInstance().getCommodity("JPY");
+    public static final Commodity AUD = CommoditiesDbAdapter.getInstance().getCommodity("AUD");
+*/
+
+    public static final Commodity USD = new Commodity("", "USD", 100);
+    public static final Commodity EUR = new Commodity("", "EUR", 100);
+    public static final Commodity GBP = new Commodity("", "GBP", 100);
+    public static final Commodity CHF = new Commodity("", "CHF", 100);
+    public static final Commodity CAD = new Commodity("", "CAD", 100);
+    public static final Commodity JPY = new Commodity("", "JPY", 1);
+    public static final Commodity AUD = new Commodity("", "AUD", 100);
 
     /**
      * This is the currency code for ISO4217 currencies
@@ -46,6 +65,23 @@ public Commodity(String fullname, String mnemonic, int smallestFraction){
         setSmallestFraction(smallestFraction);
     }
 
+    /**
+     * Returns an instance of commodity for the specified currencyCode
+     * @param currencyCode ISO 4217 currency code (3-letter)
+     */
+    public static Commodity getInstance(String currencyCode){
+        switch (currencyCode){ //save time for database trip
+            case "USD": return USD;
+            case "EUR": return EUR;
+            case "GBP": return GBP;
+            case "CHF": return CHF;
+            case "JPY": return JPY;
+            case "AUD": return AUD;
+            case "CAD": return CAD;
+            default: return CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
+        }
+    }
+
     public Namespace getNamespace() {
         return mNamespace;
     }
@@ -62,6 +98,14 @@ public String getMnemonic() {
         return mMnemonic;
     }
 
+    /**
+     * Alias for {@link #getMnemonic()}
+     * @return ISO 4217 code for this commodity
+     */
+    public String getCurrencyCode(){
+        return getMnemonic();
+    }
+
     public void setMnemonic(String mMnemonic) {
         this.mMnemonic = mMnemonic;
     }
@@ -114,7 +158,10 @@ public int getSmallestFraction() {
 
     /**
      * Returns the (minimum) number of digits that this commodity supports in its fractional part
+     * <p>For any unsupported values for the smallest fraction, a default value of 2 is returned.
+     * Supported values for the smallest fraction are powers of 10 i.e. 1, 10, 100 etc</p>
      * @return Number of digits in fraction
+     * @see #getSmallestFraction()
      */
     public int getSmallestFractionDigits(){
         switch (mSmallestFraction) {
@@ -122,8 +169,12 @@ public int getSmallestFractionDigits(){
             case 10:    return 1;
             case 100:   return 2;
             case 1000:  return 3;
+            case 10000: return 4;
+            case 100000: return 5;
+            case 1000000: return 6;
             default:
-                throw new UnsupportedOperationException("Invalid fraction digits in commodity with fraction: " + mSmallestFraction);
+                return 2;
+                //throw new UnsupportedOperationException("Invalid fraction digits in commodity with fraction: " + mSmallestFraction);
         }
     }
 
@@ -135,7 +186,9 @@ public int getSmallestFractionDigits(){
      * @throws IllegalArgumentException if the smallest fraction is not a power of 10
      */
     public void setSmallestFraction(int smallestFraction) {
-        if (smallestFraction != 1 && smallestFraction != 10 && smallestFraction != 100 && smallestFraction != 1000 && smallestFraction != 10000) //make sure we are not getting digits
+        if (smallestFraction != 1 && smallestFraction != 10 && smallestFraction != 100
+                && smallestFraction != 1000 && smallestFraction != 10000
+                && smallestFraction != 1000000 ) //make sure we are not getting digits
             this.mSmallestFraction = 100;
         else
             this.mSmallestFraction = smallestFraction;
@@ -148,4 +201,26 @@ public int getQuoteFlag() {
     public void setQuoteFlag(int quoteFlag) {
         this.mQuoteFlag = quoteFlag;
     }
+
+    /**
+     * Overrides {@link BaseModel#equals(Object)} to compare only the currency codes of the commodity.
+     * <p>Two commodities are considered equal if they have the same currency code</p>
+     * @param o Commodity instance to compare
+     * @return {@code true} if both instances have same currency code, {@code false} otherwise
+     */
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Commodity commodity = (Commodity) o;
+
+        return mMnemonic.equals(commodity.mMnemonic);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return mMnemonic.hashCode();
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 686bc379..6e101b84 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -23,7 +23,6 @@
 import com.crashlytics.android.Crashlytics;
 
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.CommoditiesDbAdapter;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -50,34 +49,21 @@
  */
 public final class Money implements Comparable<Money>{
 
-	//// FIXME: 03.11.2015 Currency#getDefaultFractionDigits() is unreliable. Switch to Commodity
 	/**
 	 * Currency of the account
 	 */
-	private Currency mCurrency;
+	private Commodity mCommodity;
 
 	/**
 	 * Amount value held by this object
 	 */
 	private BigDecimal mAmount;
-	
-	/**
-	 * Default rounding mode for Money objects
-	 * Defaults to {@link RoundingMode#HALF_EVEN}
-	 */
-	private static final RoundingMode DEFAULT_ROUNDING_MODE = RoundingMode.HALF_EVEN;
-	
-	/**
-	 * Number of decimal places to limit the fractions to when performing operations
-	 * Defaults to 2 decimal places
-	 */
-	private static final int DEFAULT_DECIMAL_PLACES = 2;
-	
+
 	/**
 	 * Rounding mode to be applied when performing operations
-	 * Defaults to {@link #DEFAULT_ROUNDING_MODE}
+	 * Defaults to {@link RoundingMode#HALF_EVEN}
 	 */
-	protected RoundingMode ROUNDING_MODE = DEFAULT_ROUNDING_MODE;
+	protected RoundingMode ROUNDING_MODE = RoundingMode.HALF_EVEN;
 
 	/**
 	 * Default currency code (according ISO 4217) 
@@ -99,19 +85,11 @@
     public static Money getZeroInstance(){
 		if (sDefaultZero == null) {
 			String currencyCode = Currency.getInstance(GnuCashApplication.getDefaultLocale()).getCurrencyCode();
-			sDefaultZero = new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
+			sDefaultZero = new Money(BigDecimal.ZERO, Commodity.getInstance(currencyCode));
 		}
 		return sDefaultZero;
     }
 
-	/**
-	 * Default constructor
-	 * Initializes the object with an amount of 0 and currency set to the device default locale
-	 */
-	public Money() {
-		init();
-	}
-
 	public static BigDecimal getBigDecimal(long numerator, long denominator) {
 		int scale;
 		if (numerator == 0 && denominator == 0) {
@@ -129,23 +107,13 @@ public static BigDecimal getBigDecimal(long numerator, long denominator) {
 	}
 
 	/**
-	 * Overloaded constructor
-	 * @param amount {@link BigDecimal} value of the money instance
-	 * @param currency {@link Currency} associated with the <code>amount</code>
-	 */
-	public Money(BigDecimal amount, Currency currency){
-		this.mAmount = amount;
-		setCurrency(currency);
-	}
-
-	/**
 	 * Creates a new money amount
 	 * @param amount Value of the amount
 	 * @param commodity Commodity of the money
 	 */
 	public Money(BigDecimal amount, Commodity commodity){
 		this.mAmount = amount;
-		mCurrency = Currency.getInstance(commodity.getMnemonic());
+		this.mCommodity = commodity;
 	}
 
 	/**
@@ -155,7 +123,7 @@ public Money(BigDecimal amount, Commodity commodity){
 	 * @param currencyCode Currency code as specified by ISO 4217
 	 */
 	public Money(String amount, String currencyCode){
-		setCurrency(Currency.getInstance(currencyCode));
+		mCommodity = Commodity.getInstance(currencyCode);
 		setAmount(amount);
 	}
 
@@ -168,17 +136,7 @@ public Money(String amount, String currencyCode){
 	 */
 	public Money(long numerator, long denominator, String currencyCode){
 		mAmount = getBigDecimal(numerator, denominator);
-		setCurrency(Currency.getInstance(currencyCode));
-	}
-
-	/**
-	 * Overloaded constructor. 
-	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
-	 * @param amount Value associated with this Money object
-	 */
-	public Money(String amount){
-		init();
-		setAmount(parseToDecimal(amount));
+		setCommodity(currencyCode);
 	}
 
     /**
@@ -187,7 +145,7 @@ public Money(String amount){
      * @param money Money instance to be cloned
      */
     public Money(Money money){
-		setCurrency(money.getCurrency());
+		setCommodity(money.getCommodity());
 		setAmount(money.asBigDecimal());
     }
 
@@ -196,46 +154,52 @@ public Money(Money money){
      * @param currencyCode Currency to use for this money instance
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
-    public static Money createZeroInstance(String currencyCode){
-        return new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
+    public static Money createZeroInstance(@NonNull String currencyCode){
+		Commodity commodity = Commodity.getInstance(currencyCode);
+        return new Money(BigDecimal.ZERO, commodity);
     }
 
 	/**
-	 * Initializes the amount and currency to their default values
-	 * @see {@link Money#DEFAULT_CURRENCY_CODE}, {@link #DEFAULT_ROUNDING_MODE}, {@link #DEFAULT_DECIMAL_PLACES}
+	 * Returns the currency of the money object
+	 * @return {@link Currency} of the money value
 	 */
-	private void init() {
-		mCurrency = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
-		mAmount = BigDecimal.ZERO.setScale(DEFAULT_DECIMAL_PLACES, DEFAULT_ROUNDING_MODE);
+	public Currency getCurrency() {
+		return Currency.getInstance(mCommodity.getCurrencyCode());
 	}
 
 	/**
-	 * Returns the currency of the money object
-	 * @return {@link Currency} of the money value
+	 * Returns the commodity used by the Money
+	 * @return Instance of commodity
 	 */
-	public Currency getCurrency() {
-		return mCurrency;
+	public Commodity getCommodity(){
+		return mCommodity;
 	}
 
 	/**
 	 * Returns a new <code>Money</code> object the currency specified by <code>currency</code> 
 	 * and the same value as this one. No value exchange between the currencies is performed.
-	 * @param currency {@link Currency} to assign to new <code>Money</code> object
+	 * @param commodity {@link Commodity} to assign to new <code>Money</code> object
 	 * @return {@link Money} object with same value as current object, but with new <code>currency</code>
 	 */
-    public Money withCurrency(Currency currency){
-		return new Money(mAmount, currency);
+    public Money withCurrency(@NonNull Commodity commodity){
+		return new Money(mAmount, commodity);
 	}
-	
+
 	/**
-	 * Sets the currency of the money object.
-	 * No currency value conversion is performed. The old value for the amount is not changed
-	 * This method is only used internally when creating the Money object. 
-	 * Money objects are immutable and hence this method should not be called out of a constructor
-	 * @param currency {@link Currency} to assign to the Money object  
+	 * Sets the commodity for the Money
+	 * <p>No currency conversion is performed</p>
+	 * @param commodity Commodity instance
 	 */
-	private void setCurrency(Currency currency) {
-		this.mCurrency = currency;
+	private void setCommodity(@NonNull Commodity commodity){
+		this.mCommodity = commodity;
+	}
+
+	/**
+	 * Sets the commodity for the Money
+	 * @param currencyCode ISO 4217 currency code
+	 */
+	private void setCommodity(@NonNull String currencyCode){
+		mCommodity = Commodity.getInstance(currencyCode);
 	}
 
 	/**
@@ -247,7 +211,7 @@ public long getNumerator() {
 		try {
 			return mAmount.scaleByPowerOfTen(getScale()).longValueExact();
 		} catch (ArithmeticException e) {
-			Log.e(getClass().getName(), "Currency " + mCurrency.getCurrencyCode() +
+			Log.e(getClass().getName(), "Currency " + mCommodity.getCurrencyCode() +
 					" with scale " + getScale() +
 					" has amount " + mAmount.toString());
 			throw e;
@@ -281,8 +245,7 @@ public long getDenominator() {
 	 * @return Scale of amount as integer
 	 */
 	private int getScale() {
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-		int scale = commodity.getSmallestFractionDigits();
+		int scale = mCommodity.getSmallestFractionDigits();
 		if (scale < 0) {
 			scale = mAmount.scale();
 		}
@@ -309,16 +272,6 @@ public double asDouble(){
 	}
 
 	/**
-	 * Returns integer value of this Money amount.
-	 * The fractional part is discarded
-	 * @return Integer representation of this amount
-	 * @see BigDecimal#intValue()
-	 */
-	public int intValue(){
-		return mAmount.intValue();
-	}
-
-	/**
 	 * An alias for {@link #toPlainString()}
 	 * @return Money formatted as a string (excludes the currency)
 	 */
@@ -334,11 +287,28 @@ public String asString(){
 	 * @return String containing formatted Money representation
 	 */
     public String formattedString(Locale locale){
+		NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(locale);
+		Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
+		currencyFormat.setCurrency(currency);
+
+		String symbol;
+		if (mCommodity.getCurrencyCode().equalsIgnoreCase("USD") && !locale.equals(Locale.US)) {
+			symbol = "US$";
+		} else {
+			symbol = currency.getSymbol(Locale.US); // US locale has the best symbol formatting table.
+		}
+		DecimalFormatSymbols decimalFormatSymbols = ((DecimalFormat)currencyFormat).getDecimalFormatSymbols();
+		decimalFormatSymbols.setCurrencySymbol(symbol);
+		((DecimalFormat)currencyFormat).setDecimalFormatSymbols(decimalFormatSymbols);
+
+		return currencyFormat.format(asDouble());
+/*
 		NumberFormat formatter = NumberFormat.getInstance(locale);
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-		formatter.setMinimumFractionDigits(commodity.getSmallestFractionDigits());
-		formatter.setMaximumFractionDigits(commodity.getSmallestFractionDigits());
-		return formatter.format(asDouble()) + " " + mCurrency.getSymbol(locale);
+		formatter.setMinimumFractionDigits(mCommodity.getSmallestFractionDigits());
+		formatter.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
+		Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
+		return formatter.format(asDouble()) + " " + currency.getSymbol(locale);
+*/
 	}
 
     /**
@@ -355,16 +325,15 @@ public String formattedString(){
 	 * @return Negated <code>Money</code> object
 	 */
     public Money negate(){
-		return new Money(mAmount.negate(), mCurrency);
+		return new Money(mAmount.negate(), mCommodity);
 	}
 	
 	/**
 	 * Sets the amount value of this <code>Money</code> object
 	 * @param amount {@link BigDecimal} amount to be set
 	 */
-	private void setAmount(BigDecimal amount) {
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-		mAmount = amount.setScale(commodity.getSmallestFractionDigits(), ROUNDING_MODE);
+	private void setAmount(@NonNull BigDecimal amount) {
+		mAmount = amount.setScale(mCommodity.getSmallestFractionDigits(), ROUNDING_MODE);
 	}
 	
 	/**
@@ -385,11 +354,11 @@ private void setAmount(String amount){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money add(Money addend){
-		if (!mCurrency.equals(addend.mCurrency))
+		if (!mCommodity.equals(addend.mCommodity))
 			throw new IllegalArgumentException("Only Money with same currency can be added");
 		
 		BigDecimal bigD = mAmount.add(addend.mAmount);
-		return new Money(bigD, mCurrency);
+		return new Money(bigD, mCommodity);
 	}
 
 	/**
@@ -401,11 +370,11 @@ public Money add(Money addend){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money subtract(Money subtrahend){
-		if (!mCurrency.equals(subtrahend.mCurrency))
+		if (!mCommodity.equals(subtrahend.mCommodity))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
 		BigDecimal bigD = mAmount.subtract(subtrahend.mAmount);		
-		return new Money(bigD, mCurrency);
+		return new Money(bigD, mCommodity);
 	}
 	
 	/**
@@ -417,11 +386,11 @@ public Money subtract(Money subtrahend){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money divide(Money divisor){
-		if (!mCurrency.equals(divisor.mCurrency))
+		if (!mCommodity.equals(divisor.mCommodity))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
-		BigDecimal bigD = mAmount.divide(divisor.mAmount);		
-		return new Money(bigD, mCurrency);
+		BigDecimal bigD = mAmount.divide(divisor.mAmount, mCommodity.getSmallestFractionDigits(), ROUNDING_MODE);
+		return new Money(bigD, mCommodity);
 	}
 	
 	/**
@@ -431,7 +400,7 @@ public Money divide(Money divisor){
 	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
 	 */
     public Money divide(int divisor){
-		Money moneyDiv = new Money(new BigDecimal(divisor), mCurrency);
+		Money moneyDiv = new Money(new BigDecimal(divisor), mCommodity);
 		return divide(moneyDiv);
 	}
 	
@@ -444,11 +413,11 @@ public Money divide(int divisor){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money multiply(Money money){
-		if (!mCurrency.equals(money.mCurrency))
+		if (!mCommodity.equals(money.mCommodity))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
 		BigDecimal bigD = mAmount.multiply(money.mAmount);		
-		return new Money(bigD, mCurrency);
+		return new Money(bigD, mCommodity);
 	}
 	
 	/**
@@ -459,7 +428,7 @@ public Money multiply(Money money){
 	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
 	 */
     public Money multiply(int multiplier){
-		Money moneyFactor = new Money(new BigDecimal(multiplier), mCurrency);
+		Money moneyFactor = new Money(new BigDecimal(multiplier), mCommodity);
 		return multiply(moneyFactor);
 	}
 
@@ -469,8 +438,8 @@ public Money multiply(int multiplier){
 	 * @param multiplier Factor to multiply the amount by.
 	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
 	 */
-	public Money multiply(BigDecimal multiplier){
-		return new Money(mAmount.multiply(multiplier), mCurrency);
+	public Money multiply(@NonNull BigDecimal multiplier){
+		return new Money(mAmount.multiply(multiplier), mCommodity);
 	}
 
 	/**
@@ -487,8 +456,7 @@ public boolean isNegative(){
 	 * @return String representation of the amount (without currency) of the Money object
 	 */
 	public String toPlainString(){
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(getCurrency().getCurrencyCode());
-		return mAmount.setScale(commodity.getSmallestFractionDigits(), ROUNDING_MODE).toPlainString();
+		return mAmount.setScale(mCommodity.getSmallestFractionDigits(), ROUNDING_MODE).toPlainString();
 	}
 
 	/**
@@ -506,7 +474,7 @@ public int hashCode() {
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + (mAmount.hashCode());
-		result = prime * result + (mCurrency.hashCode());
+		result = prime * result + (mCommodity.hashCode());
 		return result;
 	}
 
@@ -526,14 +494,14 @@ public boolean equals(Object obj) {
 		Money other = (Money) obj;
 		if (!mAmount.equals(other.mAmount))
 			return false;
-		if (!mCurrency.equals(other.mCurrency))
+		if (!mCommodity.equals(other.mCommodity))
 			return false;
 		return true;
 	}
 
 	@Override
 	public int compareTo(@NonNull Money another) {
-		if (!mCurrency.equals(another.mCurrency))
+		if (!mCommodity.equals(another.mCommodity))
 			throw new IllegalArgumentException("Cannot compare different currencies yet");
 		return mAmount.compareTo(another.mAmount);
 	}
@@ -564,7 +532,7 @@ public static BigDecimal parseToDecimal(String amountString){
      * @return Money object with absolute value of this instance
      */
     public Money absolute() {
-        return new Money(mAmount.abs(), mCurrency);
+        return new Money(mAmount.abs(), mCommodity);
     }
 
 	/**
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
index b3147599..469b0a99 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
@@ -77,7 +77,7 @@ public void onReceive(Context context, Intent intent) {
             BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
             Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
             amountBigDecimal = amountBigDecimal.setScale(commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN).round(MathContext.DECIMAL128);
-            Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
+            Money amount = new Money(amountBigDecimal, Commodity.getInstance(currencyCode));
             Split split = new Split(amount.absolute(), accountUID);
             split.setType(type);
             transaction.addSplit(split);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
index 0d2afb91..f4500c7f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
@@ -44,6 +44,7 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -133,8 +134,8 @@ public void onActivityCreated(Bundle savedInstanceState) {
             //aha! there are some splits. Let's load those instead
             loadSplitViews(splitList);
         } else {
-            final Currency currency = Currency.getInstance(mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID));
-            Split split = new Split(new Money(mBaseAmount.abs(), currency), mAccountUID);
+            final String currencyCode = mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID);
+            Split split = new Split(new Money(mBaseAmount.abs(), Commodity.getInstance(currencyCode)), mAccountUID);
             AccountType accountType = mAccountsDbAdapter.getAccountType(mAccountUID);
             TransactionType transactionType = Transaction.getTypeForBalance(accountType, mBaseAmount.signum() < 0);
             split.setType(transactionType);
@@ -354,7 +355,7 @@ private void saveSplits() {
             BigDecimal amountBigDecimal = viewHolder.splitAmountEditText.getValue();
 
             String currencyCode = mAccountsDbAdapter.getCurrencyCode(mAccountUID);
-            Money valueAmount = new Money(amountBigDecimal.abs(), Currency.getInstance(currencyCode));
+            Money valueAmount = new Money(amountBigDecimal.abs(), Commodity.getInstance(currencyCode));
 
             String accountUID = mAccountsDbAdapter.getUID(viewHolder.accountsSpinner.getSelectedItemId());
             Split split = new Split(valueAmount, accountUID);
@@ -404,7 +405,7 @@ public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int
             if (amountBigD == null)
                 return;
 
-            Money amount = new Money(amountBigD, Currency.getInstance(fromCurrencyCode));
+            Money amount = new Money(amountBigD, Commodity.getInstance(fromCurrencyCode));
             TransferFundsDialogFragment fragment
                     = TransferFundsDialogFragment.getInstance(amount, targetCurrencyCode, mSplitViewHolder);
             fragment.show(getFragmentManager(), "tranfer_funds_editor");
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 025d305b..77d5222b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -62,6 +62,7 @@
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
@@ -269,9 +270,9 @@ private void startTransferFunds() {
             return;
 
         BigDecimal amountBigd = mAmountEditText.getValue();
-        if (mSplitQuantity != null || amountBigd.equals(BigDecimal.ZERO))
+        if (amountBigd.equals(BigDecimal.ZERO))
             return;
-        Money amount 	= new Money(amountBigd, fromCurrency).absolute();
+        Money amount 	= new Money(amountBigd, Commodity.getInstance(fromCurrency.getCurrencyCode())).absolute();
 
         TransferFundsDialogFragment fragment
                 = TransferFundsDialogFragment.getInstance(amount, targetCurrency, this);
@@ -724,7 +725,7 @@ private void saveNewTransaction() {
 		BigDecimal amountBigd = mAmountEditText.getValue();
 
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getAccountCurrencyCode(mAccountUID));
-		Money amount 	= new Money(amountBigd, currency).absolute();
+		Money amount 	= new Money(amountBigd, Commodity.getInstance(currency.getCurrencyCode())).absolute();
 
         if (mSplitsList.size() == 1){ //means split editor was opened but no split was added
             String transferAcctUID;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index 9166d21e..20b28c6f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -205,7 +205,7 @@ private void transferFunds(){
             }
 
             BigDecimal amount = TransactionFormFragment.parseInputToDecimal(convertedAmount);
-            mConvertedAmount = new Money(amount, mTargetCurrency);
+            mConvertedAmount = new Money(amount, Commodity.getInstance(mTargetCurrency.getCurrencyCode()));
         }
 
         if (mOnTransferFundsListener != null) {
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index 5baf5fb4..ba5bb710 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -11,6 +11,7 @@
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
@@ -261,7 +262,7 @@ public void shouldComputeAccountBalanceCorrectly(){
 
         Transaction transaction = new Transaction("Test description");
         mTransactionsDbAdapter.addRecord(transaction);
-        Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("USD")), account.getUID());
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("USD")), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.DEBIT);
         mSplitsDbAdapter.addRecord(split);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index de8fefc6..6b5432c7 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -6,6 +6,7 @@
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -30,7 +31,7 @@
 public class TransactionsDbAdapterTest {
 	private static final String ALPHA_ACCOUNT_NAME  = "Alpha";
 	private static final String BRAVO_ACCOUNT_NAME  = "Bravo";
-	private static final Currency DEFAULT_CURRENCY	= Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
+	private static final Commodity DEFAULT_CURRENCY	= Commodity.getInstance(Money.DEFAULT_CURRENCY_CODE);
 
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
@@ -65,7 +66,7 @@ public void testTransactionsAreTimeSorted(){
 
 		Transaction t2 = new Transaction( "T1000");
 		t2.setTime(System.currentTimeMillis());
-		Split split2 = new Split(new Money("23.50"), bravoAccount.getUID());
+		Split split2 = new Split(new Money("23.50", DEFAULT_CURRENCY.getCurrencyCode()), bravoAccount.getUID());
 		t2.addSplit(split2);
 		t2.addSplit(split2.createPair(alphaAccount.getUID()));
 
@@ -93,7 +94,7 @@ public void deletingTransactionsShouldDeleteSplits(){
 	@Test
 	public void shouldBalanceTransactionsOnSave(){
 		Transaction transaction = new Transaction("Auto balance");
-		Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance(Money.DEFAULT_CURRENCY_CODE)),
+		Split split = new Split(new Money(BigDecimal.TEN, DEFAULT_CURRENCY),
 				alphaAccount.getUID());
 
 		transaction.addSplit(split);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
index 1cf406d8..6fca5b03 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.gnucash.android.BuildConfig;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.test.unit.util.GnucashTestRunner;
 import org.gnucash.android.test.unit.util.ShadowCrashlytics;
@@ -45,7 +46,7 @@
 
 	@Before
 	public void setUp() throws Exception {
-		mMoneyInEur = new Money(new BigDecimal(amountString), Currency.getInstance(CURRENCY_CODE));
+		mMoneyInEur = new Money(new BigDecimal(amountString), Commodity.getInstance(CURRENCY_CODE));
 		mHashcode = mMoneyInEur.hashCode();
 	}
 
@@ -54,20 +55,19 @@ public void testCreation(){
 		Locale.setDefault(Locale.US);
 		String amount = "12.25";		
 		
-		Money temp = new Money(amount);
+		Money temp = new Money(amount, CURRENCY_CODE);
 		assertThat("12.25").isEqualTo(temp.toPlainString());
-		assertThat(Money.DEFAULT_CURRENCY_CODE).isEqualTo(temp.getCurrency().getCurrencyCode());
 
-		Currency currency = Currency.getInstance(CURRENCY_CODE);
-		temp = new Money(BigDecimal.TEN, currency);
+		Commodity commodity = Commodity.getInstance(CURRENCY_CODE);
+		temp = new Money(BigDecimal.TEN, commodity);
 		
 		assertEquals("10", temp.asBigDecimal().toPlainString());
-		assertEquals(currency, temp.getCurrency());
+		assertEquals(commodity, temp.getCommodity());
 
 		//test only Locale.US parsing even under different locale
 		Locale.setDefault(Locale.GERMANY);
 		amount = "12,25";
-		temp = new Money(amount);
+		temp = new Money(amount, CURRENCY_CODE);
 		assertEquals("1225.00", temp.toPlainString());
 	}
 
@@ -101,7 +101,7 @@ public void testSubtractionWithDifferentCurrency(){
 
 	@Test
 	public void testMultiplication(){
-		Money result = mMoneyInEur.multiply(new Money(BigDecimal.TEN, Currency.getInstance(CURRENCY_CODE)));
+		Money result = mMoneyInEur.multiply(new Money(BigDecimal.TEN, Commodity.getInstance(CURRENCY_CODE)));
 		assertThat("157.50").isEqualTo(result.toPlainString());
 		assertThat(result).isNotEqualTo(mMoneyInEur);
 		validateImmutability();
@@ -146,7 +146,7 @@ public void testPrinting(){
 		assertEquals("15.75 " + symbolUS, mMoneyInEur.formattedString(Locale.US));
 		
 		//always prints with 2 decimal places only
-		Money some = new Money("9.7469");
+		Money some = new Money("9.7469", CURRENCY_CODE);
 		assertEquals("9.75", some.asString());
 	}
 
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
index c6b88efa..35a0af48 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
@@ -1,6 +1,7 @@
 package org.gnucash.android.test.unit.model;
 
 import org.gnucash.android.BuildConfig;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -40,7 +41,7 @@ public void testAddingSplitToTransaction(){
 
     @Test
     public void testCloning(){
-        Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("EUR")), "random-account");
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("EUR")), "random-account");
         split.setTransactionUID("terminator-trx");
         split.setType(TransactionType.CREDIT);
 
@@ -57,7 +58,7 @@ public void testCloning(){
      */
     @Test
     public void shouldCreateInversePair(){
-        Split split = new Split(new Money("2"), "dummy");
+        Split split = new Split(new Money("2", "USD"), "dummy");
         split.setType(TransactionType.CREDIT);
         split.setTransactionUID("random-trx");
         Split pair = split.createPair("test");
@@ -70,7 +71,7 @@ public void shouldCreateInversePair(){
 
     @Test
     public void shouldGenerateValidCsv(){
-        Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("EUR")), "random-account");
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("EUR")), "random-account");
         split.setTransactionUID("terminator-trx");
         split.setType(TransactionType.CREDIT);
 

From e54c048ed64c7c6525401ad94a8892efc9d36be2 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 3 Nov 2015 17:33:21 +0100
Subject: [PATCH 03/13] Use Commodity instead of Currency in Accounts and
 Transactions

---
 .../android/test/ui/AccountsActivityTest.java      |  6 +--
 .../android/test/ui/TransactionsActivityTest.java  |  7 +--
 .../gnucash/android/app/GnuCashApplication.java    | 12 +++++
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 17 +++---
 .../gnucash/android/db/CommoditiesDbAdapter.java   | 12 ++++-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 13 +++--
 .../gnucash/android/importer/GncXmlHandler.java    |  5 +-
 .../java/org/gnucash/android/model/Account.java    | 60 ++++++++++------------
 .../java/org/gnucash/android/model/Commodity.java  | 31 +++++------
 .../main/java/org/gnucash/android/model/Money.java | 13 +++--
 .../org/gnucash/android/model/Transaction.java     | 21 ++++----
 .../gnucash/android/receivers/AccountCreator.java  |  6 +--
 .../android/ui/account/AccountFormFragment.java    |  6 +--
 .../ui/transaction/TransactionFormFragment.java    |  4 +-
 .../test/unit/db/AccountsDbAdapterTest.java        |  4 +-
 .../android/test/unit/model/AccountTest.java       | 28 +++++++++-
 .../gnucash/android/test/unit/model/MoneyTest.java | 28 +++++-----
 .../android/test/unit/model/TransactionTest.java   | 13 ++++-
 18 files changed, 173 insertions(+), 113 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index ecae2fa0..3d2d8f97 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -116,7 +116,7 @@ public void setUp() throws Exception {
 
 		Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
-		account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
+		account.setCommodity(Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
 		mAccountsDbAdapter.addRecord(account);
         refreshAccountsList();
 	}
@@ -202,7 +202,7 @@ public void testCreateAccount(){
     @Test
     public void testChangeParentAccount() {
         final String accountName = "Euro Account";
-        Account account = new Account(accountName, Currency.getInstance("EUR"));
+        Account account = new Account(accountName, Commodity.EUR);
         mAccountsDbAdapter.addRecord(account);
 
         refreshAccountsList();
@@ -283,7 +283,7 @@ public void editingAccountShouldNotDeleteTransactions(){
                 .perform(click());
 
         Account account = new Account("Transfer Account");
-        account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode()));
+        account.setCommodity(Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode()));
         Transaction transaction = new Transaction("Simple trxn");
         transaction.setCurrencyCode(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode());
         Split split = new Split(new Money(BigDecimal.TEN, DUMMY_ACCOUNT_CURRENCY), account.getUID());
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 669660cc..7b0ef4bf 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -36,6 +36,7 @@
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -121,11 +122,11 @@ public void setUp() throws Exception {
 		mTransactionTimeMillis = System.currentTimeMillis();
         Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
-        account.setCurrency(Currency.getInstance(CURRENCY_CODE));
+        account.setCommodity(Commodity.getInstance(CURRENCY_CODE));
 
         Account account2 = new Account(TRANSFER_ACCOUNT_NAME);
         account2.setUID(TRANSFER_ACCOUNT_UID);
-        account2.setCurrency(Currency.getInstance(CURRENCY_CODE));
+        account2.setCommodity(Commodity.getInstance(CURRENCY_CODE));
 
         mAccountsDbAdapter.addRecord(account);
         mAccountsDbAdapter.addRecord(account2);
@@ -478,7 +479,7 @@ public void testDeleteTransaction(){
 	@Test
 	public void testMoveTransaction(){
 		Account account = new Account("Move account");
-		account.setCurrency(Currency.getInstance(CURRENCY_CODE));
+		account.setCommodity(Commodity.getInstance(CURRENCY_CODE));
 		mAccountsDbAdapter.addRecord(account);
 
 		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(account.getUID())).hasSize(0);
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index cadc03f7..bc0ae201 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -40,6 +40,7 @@
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.service.SchedulerService;
 
 import java.util.Currency;
@@ -122,6 +123,8 @@ public void onCreate(){
         mScheduledActionDbAdapter   = new ScheduledActionDbAdapter(mDb);
         mCommoditiesDbAdapter       = new CommoditiesDbAdapter(mDb);
         mPricesDbAdapter            = new PricesDbAdapter(mDb);
+
+        Commodity.DEFAULT_COMMODITY = mCommoditiesDbAdapter.getCommodity(getDefaultCurrencyCode());
     }
 
     public static AccountsDbAdapter getAccountsDbAdapter() {
@@ -213,6 +216,15 @@ public static String getDefaultCurrencyCode(){
     }
 
     /**
+     * Returns the default commodity
+     * @return Default commodity of application
+     * @see #getDefaultCurrencyCode()
+     */
+    public static Commodity getDefaultCommodity(){
+        return Commodity.DEFAULT_COMMODITY;
+    }
+
+    /**
      * Returns the default locale which is used for currencies, while handling special cases for
      * locales which are not supported for currency such as en_GB
      * @return The default locale for this device
diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 30fc1093..7d1acfbb 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -32,6 +32,7 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -108,9 +109,8 @@ public void addRecord(@NonNull Account account){
 		if (account.getAccountType() != AccountType.ROOT){
             //update the fully qualified account name
             updateRecord(accountUID, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(accountUID));
-            String commodityUID = getCommodityUID(account.getCurrency().getCurrencyCode());
             for (Transaction t : account.getTransactions()) {
-                t.setCommodityUID(commodityUID);
+                t.setCommodity(account.getCommodity());
 		        mTransactionsAdapter.addRecord(t);
 			}
             for (Transaction transaction : templateTransactions) {
@@ -184,11 +184,11 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Account account
         mReplaceStatement.bindLong(9, account.isPlaceholderAccount() ? 1 : 0);
         mReplaceStatement.bindString(10, account.getCreatedTimestamp().toString());
         mReplaceStatement.bindLong(11, account.isHidden() ? 1 : 0);
-        String commodityUID = account.getCommodityUID();
-        if (commodityUID == null)
-            commodityUID = CommoditiesDbAdapter.getInstance().getCommodityUID(account.getCurrency().getCurrencyCode());
+        Commodity commodity = account.getCommodity();
+        if (commodity == null)
+            commodity = CommoditiesDbAdapter.getInstance().getCommodity(account.getCurrency().getCurrencyCode());
 
-        mReplaceStatement.bindString(12, commodityUID);
+        mReplaceStatement.bindString(12, commodity.getUID());
 
         String parentAccountUID = account.getParentUID();
         if (parentAccountUID == null && account.getAccountType() != AccountType.ROOT) {
@@ -398,7 +398,7 @@ private Account buildSimpleAccountInstance(Cursor c) {
         account.setParentUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID)));
         account.setAccountType(AccountType.valueOf(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE))));
         Currency currency = Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY)));
-        account.setCurrency(currency);
+        account.setCommodity(CommoditiesDbAdapter.getInstance().getCommodity(currency.getCurrencyCode()));
         account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
         account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
         account.setColorCode(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE)));
@@ -542,9 +542,10 @@ public AccountType getAccountType(long accountId){
      */
     public String getOrCreateImbalanceAccountUID(Currency currency){
         String imbalanceAccountName = getImbalanceAccountName(currency);
+        Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(currency.getCurrencyCode());
         String uid = findAccountUidByFullName(imbalanceAccountName);
         if (uid == null){
-            Account account = new Account(imbalanceAccountName, currency);
+            Account account = new Account(imbalanceAccountName, commodity);
             account.setAccountType(AccountType.BANK);
             account.setParentUID(getOrCreateGnuCashRootAccountUID());
             account.setHidden(!GnuCashApplication.isDoubleEntryEnabled());
diff --git a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
index 043a8291..b4e6d758 100644
--- a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
@@ -21,6 +21,16 @@
      */
     public CommoditiesDbAdapter(SQLiteDatabase db) {
         super(db, CommodityEntry.TABLE_NAME);
+        /**
+         * initialize commonly used commodities
+         */
+        Commodity.USD = getCommodity("USD");
+        Commodity.EUR = getCommodity("EUR");
+        Commodity.GBP = getCommodity("GBP");
+        Commodity.CHF = getCommodity("CHF");
+        Commodity.CAD = getCommodity("CAD");
+        Commodity.JPY = getCommodity("JPY");
+        Commodity.AUD = getCommodity("AUD");
     }
 
     public static CommoditiesDbAdapter getInstance(){
@@ -49,7 +59,7 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Commodity commo
         mReplaceStatement.bindString(5, commodity.getLocalSymbol());
         mReplaceStatement.bindString(6, commodity.getCusip());
         mReplaceStatement.bindLong(7, commodity.getSmallestFraction());
-        mReplaceStatement.bindLong(8,   commodity.getQuoteFlag());
+        mReplaceStatement.bindLong(8, commodity.getQuoteFlag());
 
         return mReplaceStatement;
     }
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index c235b75b..b522ea7f 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -32,6 +32,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -180,11 +181,11 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Transaction tra
         mReplaceStatement.bindLong(5, transaction.isExported() ? 1 : 0);
         mReplaceStatement.bindString(6, transaction.getCurrencyCode());
 
-        String commodityUID = transaction.getCommodityUID();
-        if (commodityUID == null)
-            commodityUID = getCommodityUID(transaction.getCurrency().getCurrencyCode());
+        Commodity commodity = transaction.getCommodity();
+        if (commodity == null)
+            commodity = CommoditiesDbAdapter.getInstance().getCommodity(transaction.getCurrencyCode());
 
-        mReplaceStatement.bindString(7, commodityUID);
+        mReplaceStatement.bindString(7, commodity.getUID());
         mReplaceStatement.bindString(8, transaction.getCreatedTimestamp().toString());
 
         if (transaction.getScheduledActionUID() == null)
@@ -412,7 +413,9 @@ public Transaction buildModelInstance(@NonNull final Cursor c){
 		transaction.setNote(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NOTES)));
 		transaction.setExported(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_EXPORTED)) == 1);
 		transaction.setTemplate(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TEMPLATE)) == 1);
-        transaction.setCurrencyCode(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_CURRENCY)));
+        String currencyCode = c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_CURRENCY));
+        transaction.setCurrencyCode(currencyCode);
+        transaction.setCommodity(CommoditiesDbAdapter.getInstance().getCommodity(currencyCode));
         transaction.setScheduledActionUID(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_SCHEDX_ACTION_UID)));
         long transactionID = c.getLong(c.getColumnIndexOrThrow(TransactionEntry._ID));
         transaction.setSplits(mSplitsDbAdapter.getSplitsForTransaction(transactionID));
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 9e12030d..40be52aa 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -49,7 +49,6 @@
 import java.sql.Timestamp;
 import java.text.ParseException;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -372,7 +371,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             case GncXmlHelper.TAG_COMMODITY_ID:
                 String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
                 if (mAccount != null) {
-                    mAccount.setCurrency(Currency.getInstance(currencyCode));
+                    mAccount.setCurrencyCode(currencyCode);
                 }
                 if (mTransaction != null) {
                     mTransaction.setCurrencyCode(currencyCode);
@@ -767,7 +766,7 @@ public void endDocument() throws SAXException {
             String currencyCode = split.getAccountUID();
             Account imbAccount = mapImbalanceAccount.get(currencyCode);
             if (imbAccount == null) {
-                imbAccount = new Account(imbalancePrefix + currencyCode, Currency.getInstance(currencyCode));
+                imbAccount = new Account(imbalancePrefix + currencyCode, Commodity.getInstance(currencyCode));
                 imbAccount.setParentUID(mRootAccount.getUID());
                 imbAccount.setAccountType(AccountType.BANK);
                 mapImbalanceAccount.put(currencyCode, imbAccount);
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 2b1025b4..84dc317e 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -93,9 +93,13 @@
 	/**
 	 * Currency used by transactions in this account
 	 */
-	private Currency mCurrency; 
+	private String mCurrencyCode;
+
+	/**
+	 * Commodity used by this account
+	 */
+	private Commodity mCommodity;
 
-	private String mCommodityUID;
 
 	/**
 	 * Type of account
@@ -159,18 +163,18 @@
 	public Account(String name) {
 		setName(name);
         this.mFullName  = mName;
-		this.mCurrency  = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
+		setCommodity(Commodity.DEFAULT_COMMODITY);
 	}
 	
 	/**
 	 * Overloaded constructor
 	 * @param name Name of the account
-	 * @param currency {@link Currency} to be used by transactions in this account
+	 * @param commodity {@link Commodity} to be used by transactions in this account
 	 */
-	public Account(String name, Currency currency){
+	public Account(String name, Commodity commodity){
 		setName(name);
         this.mFullName  = mName;
-		this.mCurrency  = currency;
+		setCommodity(commodity);
 	}
 
 	/**
@@ -244,7 +248,7 @@ public void setAccountType(AccountType mAccountType) {
 	 * @param transaction {@link Transaction} to be added to the account
 	 */
 	public void addTransaction(Transaction transaction){
-		transaction.setCurrencyCode(mCurrency.getCurrencyCode());
+		transaction.setCommodity(mCommodity);
 		mTransactionsList.add(transaction);
 	}
 	
@@ -281,7 +285,7 @@ public int getTransactionCount(){
 	 * @return {@link Money} aggregate amount of all transactions in account.
 	 */
 	public Money getBalance(){
-		Money balance = Money.createZeroInstance(mCurrency.getCurrencyCode());
+		Money balance = Money.createZeroInstance(mCurrencyCode);
         for (Transaction transaction : mTransactionsList) {
             balance.add(transaction.getBalance(getUID()));
 		}
@@ -331,41 +335,33 @@ public void setFavorite(boolean isFavorite) {
 	 * @return the mCurrency
 	 */
 	public Currency getCurrency() {
-		return mCurrency;
+		return Currency.getInstance(mCurrencyCode);
 	}
 
 	/**
-	 * Return the commodity for this account
-	 * @return
+	 * Sets the currency code of this account
+	 * @param currencyCode ISO 4217 3-letter currency code
 	 */
-	public Commodity getCommodity(){
-		return Commodity.getInstance(mCurrency.getCurrencyCode());
+	public void setCurrencyCode(String currencyCode){
+		this.mCurrencyCode = currencyCode;
 	}
 
 	/**
-	 * Sets the currency to be used by this account
-	 * @param currency the mCurrency to set
-	 */
-	public void setCurrency(Currency currency) {
-		this.mCurrency = currency;
-		//TODO: Maybe at some time t, this method should convert all 
-		//transaction values to the corresponding value in the new currency
-	}
-
-	/**
-	 * Returns the commodity GUID for this account
-	 * @return String GUID of commodity
+	 * Return the commodity for this account
+	 * @return
 	 */
-	public String getCommodityUID() {
-		return mCommodityUID;
+	public Commodity getCommodity(){
+		return mCommodity;
 	}
 
 	/**
-	 * Sets the commodity GUID for this account
-	 * @param commodityUID String commodity GUID
+	 * Sets the commodity of this account
+	 * @param commodity Commodity of the account
 	 */
-	public void setCommodityUID(String commodityUID) {
-		this.mCommodityUID = commodityUID;
+	public void setCommodity(Commodity commodity){
+		this.mCommodity = commodity;
+		this.mCurrencyCode = commodity.getCurrencyCode();
+		//todo: should we also change commodity of transactions? Transactions can have splits from different accounts
 	}
 
 	/**
@@ -479,7 +475,7 @@ public static OfxAccountType convertToOfxAccountType(AccountType accountType){
 	 */
 	public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		Element currency = doc.createElement(OfxHelper.TAG_CURRENCY_DEF);
-		currency.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));						
+		currency.appendChild(doc.createTextNode(mCommodity.getCurrencyCode()));
 		
 		//================= BEGIN BANK ACCOUNT INFO (BANKACCTFROM) =================================
 		
diff --git a/app/src/main/java/org/gnucash/android/model/Commodity.java b/app/src/main/java/org/gnucash/android/model/Commodity.java
index 89232512..8169f417 100644
--- a/app/src/main/java/org/gnucash/android/model/Commodity.java
+++ b/app/src/main/java/org/gnucash/android/model/Commodity.java
@@ -22,26 +22,23 @@
  * At the moment only ISO4217 currencies are supported
  */
 public class Commodity extends BaseModel {
+
     public enum Namespace { ISO4217 } //Namespace for commodities
 
     private Namespace mNamespace = Namespace.ISO4217;
-/*
-    public static final Commodity USD = CommoditiesDbAdapter.getInstance().getCommodity("USD");
-    public static final Commodity EUR = CommoditiesDbAdapter.getInstance().getCommodity("EUR");
-    public static final Commodity GBP = CommoditiesDbAdapter.getInstance().getCommodity("GBP");
-    public static final Commodity CHF = CommoditiesDbAdapter.getInstance().getCommodity("CHF");
-    public static final Commodity CAD = CommoditiesDbAdapter.getInstance().getCommodity("CAD");
-    public static final Commodity JPY = CommoditiesDbAdapter.getInstance().getCommodity("JPY");
-    public static final Commodity AUD = CommoditiesDbAdapter.getInstance().getCommodity("AUD");
-*/
-
-    public static final Commodity USD = new Commodity("", "USD", 100);
-    public static final Commodity EUR = new Commodity("", "EUR", 100);
-    public static final Commodity GBP = new Commodity("", "GBP", 100);
-    public static final Commodity CHF = new Commodity("", "CHF", 100);
-    public static final Commodity CAD = new Commodity("", "CAD", 100);
-    public static final Commodity JPY = new Commodity("", "JPY", 1);
-    public static final Commodity AUD = new Commodity("", "AUD", 100);
+
+    /**
+     * Default commodity for device locale
+     */
+    public static Commodity DEFAULT_COMMODITY = new Commodity("US Dollars", "USD", 100); //this value is a stub. Will be overwritten when the app is launched
+
+    public static Commodity USD = new Commodity("", "USD", 100);
+    public static Commodity EUR = new Commodity("", "EUR", 100);
+    public static Commodity GBP = new Commodity("", "GBP", 100);
+    public static Commodity CHF = new Commodity("", "CHF", 100);
+    public static Commodity CAD = new Commodity("", "CAD", 100);
+    public static Commodity JPY = new Commodity("", "JPY", 1);
+    public static Commodity AUD = new Commodity("", "AUD", 100);
 
     /**
      * This is the currency code for ISO4217 currencies
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 6e101b84..312a171b 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -287,28 +287,33 @@ public String asString(){
 	 * @return String containing formatted Money representation
 	 */
     public String formattedString(Locale locale){
+/*
+//todo: enable this code for 2.1 release. Test better too
 		NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(locale);
 		Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
-		currencyFormat.setCurrency(currency);
 
 		String symbol;
-		if (mCommodity.getCurrencyCode().equalsIgnoreCase("USD") && !locale.equals(Locale.US)) {
+		if (mCommodity.equals(Commodity.USD) && !locale.equals(Locale.US)) {
 			symbol = "US$";
+		} else if (mCommodity.equals(Commodity.EUR) {
+			symbol = currency.getSymbol(Locale.GERMANY); //euro currency is pretty unique around the world
 		} else {
 			symbol = currency.getSymbol(Locale.US); // US locale has the best symbol formatting table.
 		}
 		DecimalFormatSymbols decimalFormatSymbols = ((DecimalFormat)currencyFormat).getDecimalFormatSymbols();
 		decimalFormatSymbols.setCurrencySymbol(symbol);
 		((DecimalFormat)currencyFormat).setDecimalFormatSymbols(decimalFormatSymbols);
+		currencyFormat.setMinimumFractionDigits(mCommodity.getSmallestFractionDigits());
+		currencyFormat.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
 
 		return currencyFormat.format(asDouble());
-/*
+*/
+
 		NumberFormat formatter = NumberFormat.getInstance(locale);
 		formatter.setMinimumFractionDigits(mCommodity.getSmallestFractionDigits());
 		formatter.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
 		Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
 		return formatter.format(asDouble()) + " " + currency.getSymbol(locale);
-*/
 	}
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index f0e2586a..fd7528e4 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -19,9 +19,7 @@
 import android.content.Intent;
 
 import org.gnucash.android.BuildConfig;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.CommoditiesDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
 import org.gnucash.android.model.Account.OfxAccountType;
 import org.w3c.dom.Document;
@@ -90,7 +88,7 @@
     /**
      * GUID of commodity associated with this transaction
      */
-    private String mCommodityUID;
+    private Commodity mCommodity;
 
     /**
      * The splits making up this transaction
@@ -168,7 +166,7 @@ public Transaction(Transaction transaction, boolean generateNewUID){
 	 * Initializes the different fields to their default values.
 	 */
 	private void initDefaults(){
-        mCurrencyCode = Money.DEFAULT_CURRENCY_CODE;
+        setCommodity(Commodity.DEFAULT_COMMODITY);
 		this.mTimestamp = System.currentTimeMillis();
 	}
 
@@ -345,19 +343,20 @@ public Currency getCurrency(){
     }
 
     /**
-     * Returns the GUID of the commodity for this transaction
-     * @return GUID of commodity
+     * Returns the  commodity for this transaction
+     * @return Commodity of the transaction
      */
-    public String getCommodityUID() {
-        return mCommodityUID;
+    public Commodity getCommodity() {
+        return mCommodity;
     }
 
     /**
      * Sets the commodity for this transaction
-     * @param commodityUID GUID of commodity
+     * @param commodity Commodity instance
      */
-    public void setCommodityUID(String commodityUID) {
-        this.mCommodityUID = commodityUID;
+    public void setCommodity(Commodity commodity) {
+        this.mCommodity = commodity;
+        this.mCurrencyCode = commodity.getCurrencyCode();
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
index 3985e850..100ae589 100644
--- a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
+++ b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
@@ -24,8 +24,7 @@
 
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.model.Account;
-
-import java.util.Currency;
+import org.gnucash.android.model.Commodity;
 
 /**
  * Broadcast receiver responsible for creating {@link Account}s received through intents.
@@ -49,8 +48,7 @@ public void onReceive(Context context, Intent intent) {
 		
 		String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);				
 		if (currencyCode != null){
-			Currency currency = Currency.getInstance(currencyCode);
-			account.setCurrency(currency);
+			account.setCommodity(Commodity.getInstance(currencyCode));
 		}
 		
 		String uid = args.getString(Intent.EXTRA_UID);
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index c5cca688..0108312f 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -61,16 +61,15 @@
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.ui.colorpicker.ColorPickerDialog;
 import org.gnucash.android.ui.colorpicker.ColorPickerSwatch;
 import org.gnucash.android.ui.colorpicker.ColorSquare;
+import org.gnucash.android.ui.common.UxArgument;
 import org.gnucash.android.util.CommoditiesCursorAdapter;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Currency;
 import java.util.HashMap;
 import java.util.List;
 
@@ -771,8 +770,7 @@ private void saveAccount() {
 
         long commodityId = mCurrencySpinner.getSelectedItemId();
         Commodity commodity = CommoditiesDbAdapter.getInstance().getRecord(commodityId);
-        mAccount.setCommodityUID(commodity.getUID());
-        mAccount.setCurrency(Currency.getInstance(commodity.getMnemonic()));
+        mAccount.setCommodity(commodity);
 
         AccountType selectedAccountType = getSelectedAccountType();
         mAccount.setAccountType(selectedAccountType);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 77d5222b..500ed18e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -58,6 +58,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.CommoditiesDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
@@ -796,7 +797,8 @@ private void saveNewTransaction() {
 
             String currencyCode = mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID);
             mTransaction.setCurrencyCode(currencyCode);
-            mTransaction.setCommodityUID(mAccountsDbAdapter.getCommodityUID(currencyCode));
+            Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
+            mTransaction.setCommodity(commodity);
             mTransaction.setTime(cal.getTimeInMillis());
             mTransaction.setNote(notes);
 
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index ba5bb710..6ea614e3 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -253,7 +253,7 @@ public void simpleAccountListShouldNotContainTransactions(){
 
     @Test
     public void shouldComputeAccountBalanceCorrectly(){
-        Account account = new Account("Test", Currency.getInstance("USD"));
+        Account account = new Account("Test", Commodity.USD);
         account.setAccountType(AccountType.ASSET); //debit normal account balance
         Account transferAcct = new Account("Transfer");
 
@@ -262,7 +262,7 @@ public void shouldComputeAccountBalanceCorrectly(){
 
         Transaction transaction = new Transaction("Test description");
         mTransactionsDbAdapter.addRecord(transaction);
-        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("USD")), account.getUID());
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.USD), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.DEBIT);
         mSplitsDbAdapter.addRecord(split);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
index ff14d175..adbbbb11 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
@@ -15,15 +15,24 @@
  */
 package org.gnucash.android.test.unit.model;
 
+import org.gnucash.android.BuildConfig;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Transaction;
+import org.gnucash.android.test.unit.util.GnucashTestRunner;
+import org.gnucash.android.test.unit.util.ShadowCrashlytics;
+import org.gnucash.android.test.unit.util.ShadowUserVoice;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.Currency;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(GnucashTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class, ShadowUserVoice.class})
 public class AccountTest{
 
 	@Test
@@ -40,7 +49,7 @@ public void testAccountAlwaysHasUID(){
 
 	@Test
 	public void testTransactionsHaveSameCurrencyAsAccount(){
-		Account acc1 = new Account("Japanese", Currency.getInstance("JPY"));
+		Account acc1 = new Account("Japanese", Commodity.JPY);
 		acc1.setUID("simile");
 		Transaction trx = new Transaction("Underground");
 		Transaction term = new Transaction( "Tube");
@@ -77,4 +86,21 @@ public void settingNameShouldNotChangeFullName(){
 		assertThat(account.getName()).isEqualTo("Name");
 		assertThat(account.getFullName()).isEqualTo(fullName);
 	}
+
+	@Test
+	public void settingCommodity_shouldSetCurrencyCode(){
+		Account account = new Account("Test", Commodity.USD);
+		account.setCommodity(Commodity.JPY);
+
+		assertThat(account.getCurrency()).isEqualTo(Currency.getInstance("JPY"));
+	}
+
+	@Test
+	public void settingCurrencyCode_shouldNotSetCommodity(){
+		Account account = new Account("Test EUR account", Commodity.EUR);
+		account.setCurrencyCode("USD");
+
+		assertThat(account.getCommodity()).isEqualTo(Commodity.EUR);
+		assertThat(account.getCurrency()).isEqualTo(Currency.getInstance("USD"));
+	}
 }
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
index 6fca5b03..1340dc20 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
@@ -16,12 +16,6 @@
 
 package org.gnucash.android.test.unit.model;
 
-import java.math.BigDecimal;
-import java.util.Currency;
-import java.util.Locale;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
 import org.gnucash.android.BuildConfig;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
@@ -33,7 +27,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
-import static org.junit.Assert.*;
+import java.math.BigDecimal;
+import java.util.Currency;
+import java.util.Locale;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
 
 @RunWith(GnucashTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class, ShadowUserVoice.class})
@@ -138,12 +138,16 @@ public void testNegation(){
 	public void testPrinting(){
 		assertEquals(mMoneyInEur.asString(), mMoneyInEur.toPlainString());
 		assertEquals(amountString, mMoneyInEur.asString());
-		
+
 		// the unicode for Euro symbol is \u20AC
-		String symbol = Currency.getInstance("EUR").getSymbol(Locale.GERMAN);
-		String symbolUS = Currency.getInstance("EUR").getSymbol(Locale.US);
-		assertEquals("15,75 " + symbol, mMoneyInEur.formattedString(Locale.GERMAN));
-		assertEquals("15.75 " + symbolUS, mMoneyInEur.formattedString(Locale.US));
+
+		String symbol = Currency.getInstance("EUR").getSymbol(Locale.GERMANY);
+		String actualOuputDE = mMoneyInEur.formattedString(Locale.GERMANY);
+		assertThat(actualOuputDE).isEqualTo("15,75 " + symbol);
+
+		symbol = Currency.getInstance("EUR").getSymbol(Locale.US);
+		String actualOuputUS = mMoneyInEur.formattedString(Locale.US);
+		assertThat(actualOuputUS).isEqualTo("15.75 " + symbol);
 		
 		//always prints with 2 decimal places only
 		Money some = new Money("9.7469", CURRENCY_CODE);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java
index b781c7bd..486f1793 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/TransactionTest.java
@@ -1,19 +1,28 @@
 package org.gnucash.android.test.unit.model;
 
+import org.gnucash.android.BuildConfig;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
+import org.gnucash.android.test.unit.util.GnucashTestRunner;
+import org.gnucash.android.test.unit.util.ShadowCrashlytics;
+import org.gnucash.android.test.unit.util.ShadowUserVoice;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@RunWith(GnucashTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class, ShadowUserVoice.class})
 public class TransactionTest {
 
 	@Test
 	public void testCloningTransaction(){
 		Transaction transaction = new Transaction("Bobba Fett");
 		assertThat(transaction.getUID()).isNotNull();
-		assertThat(transaction.getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+		assertThat(transaction.getCurrencyCode()).isEqualTo(Commodity.DEFAULT_COMMODITY.getCurrencyCode());
 
 		Transaction clone1 = new Transaction(transaction, false);
 		assertThat(transaction.getUID()).isEqualTo(clone1.getUID());
@@ -34,7 +43,7 @@ public void testCloningTransaction(){
 	@Test
 	public void addingSplitsShouldSetTransactionUID(){
 		Transaction transaction = new Transaction("");
-		assertThat(transaction.getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+		assertThat(transaction.getCurrencyCode()).isEqualTo(Commodity.DEFAULT_COMMODITY.getCurrencyCode());
 
 		Split split = new Split(Money.getZeroInstance(), "test-account");
 		assertThat(split.getTransactionUID()).isEmpty();

From c7e7a80289064baa842d69ef188d54de95ca51c3 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 3 Nov 2015 18:48:56 +0100
Subject: [PATCH 04/13] Fix moving transaction to another account through split
 editor sets the value to zero

fixes #416
---
 .../android/test/ui/TransactionsActivityTest.java  | 42 ++++++++++++++++++++++
 .../ui/transaction/TransactionFormFragment.java    |  4 ++-
 2 files changed, 45 insertions(+), 1 deletion(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 7b0ef4bf..6ec47912 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -57,6 +57,7 @@
 import java.util.List;
 import java.util.Locale;
 
+import static android.support.test.espresso.Espresso.onData;
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.action.ViewActions.clearText;
 import static android.support.test.espresso.action.ViewActions.click;
@@ -70,6 +71,7 @@
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 
@@ -495,6 +497,46 @@ public void testMoveTransaction(){
 
 	}
 
+//	@Test //// FIXME: 03.11.2015 fix and re-enable this test
+	public void editingSplit_shouldNotSetAmountToZero(){
+		setDoubleEntryEnabled(true);
+		mTransactionsDbAdapter.deleteAllRecords();
+
+		Account account = new Account("Z Account", Commodity.getInstance(CURRENCY_CODE));
+		mAccountsDbAdapter.addRecord(account);
+
+		onView(withId(R.id.fab_create_transaction)).perform(click());
+
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Test Split"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("1024"));
+
+		onView(withId(R.id.menu_save)).perform(click());
+
+		onView(withText("Test Split")).perform(click());
+		onView(withId(R.id.fab_edit_transaction)).perform(click());
+
+		onView(withId(R.id.btn_split_editor)).perform(click());
+
+//		onView(withSpinnerText(DUMMY_ACCOUNT_NAME)).perform(click()); //// FIXME: 03.11.2015 properly select the spinner
+		onData(withId(R.id.input_accounts_spinner))
+				.inAdapterView(withId(R.id.split_list_layout))
+				.atPosition(1)
+				.perform(click());
+		onData(allOf(is(instanceOf(String.class)), is(account.getFullName()))).perform(click());
+//		onView(withText(account.getFullName())).perform(click());
+
+		onView(withId(R.id.menu_save)).perform(click());
+		onView(withId(R.id.menu_save)).perform(click());
+
+		//split should have moved from account, it should now be empty
+		onView(withId(R.id.empty_view)).check(matches(isDisplayed()));
+
+		assertThat(mAccountsDbAdapter.getAccountBalance(DUMMY_ACCOUNT_UID)).isEqualTo(Money.createZeroInstance(CURRENCY_CODE));
+
+		//split
+		assertThat(mAccountsDbAdapter.getAccountBalance(account.getUID())).isEqualTo(new Money("1024", CURRENCY_CODE));
+	}
+
 	@Test
 	public void testDuplicateTransaction(){
 		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID)).hasSize(1);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 500ed18e..dd252045 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -740,7 +740,9 @@ private void saveNewTransaction() {
         }
 
         //capture any edits which were done directly (not using split editor)
-        if (mSplitsList.size() == 2 && mSplitsList.get(0).isPairOf(mSplitsList.get(1))) {
+        if (mSplitsList.size() == 2 && mSplitsList.get(0).isPairOf(mSplitsList.get(1))
+                //we also check that at least one of the splits belongs to this account, otherwise the account was changed in the splits and the value would be zero
+                && (mSplitsList.get(0).getAccountUID().equals(mAccountUID) || mSplitsList.get(1).getAccountUID().equals(mAccountUID))) {
             //if it is a simple transfer where the editor was not used, then respect the button
             for (Split split : mSplitsList) {
                 if (split.getAccountUID().equals(mAccountUID)){

From 22b5327cdee19c3d3f71fd4e1cb2ac3f70328af0 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 4 Nov 2015 10:32:05 +0100
Subject: [PATCH 05/13] Fix delete account dialog only deletes splits and not
 whole transaction

Fix display of transaction time in list (show full dates for times greater or less than a few days)
Remove prettytime dependency
---
 app/build.gradle                                           |  1 -
 .../android/ui/account/DeleteAccountDialogFragment.java    |  8 +-------
 .../android/ui/transaction/TransactionsListFragment.java   | 14 +++++++++++---
 3 files changed, 12 insertions(+), 11 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 794cb406..689e7c52 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -173,7 +173,6 @@ dependencies {
             'org.jraf:android-switch-backport:2.0.1@aar',
             'com.github.PhilJay:MPAndroidChart:v2.1.3',
             'joda-time:joda-time:2.7',
-            'org.ocpsoft.prettytime:prettytime:3.2.7.Final',
             'com.google.android.gms:play-services-drive:7.0.0',
             'com.jakewharton:butterknife:7.0.1',
             'com.kobakei:ratethisapp:0.0.3',
diff --git a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
index 0fe8c70e..c06d0282 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/DeleteAccountDialogFragment.java
@@ -228,13 +228,7 @@ public void onClick(View v) {
                 }
 
                 if (GnuCashApplication.isDoubleEntryEnabled()){ //reassign splits to imbalance
-                    Currency accountCurrency = Currency.getInstance(accountsDbAdapter.getCurrencyCode(mOriginAccountUID));
-                    String imbalanceAccountUID = accountsDbAdapter.getOrCreateImbalanceAccountUID(accountCurrency);
-                    SplitsDbAdapter.getInstance().updateRecords(
-                            DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID + "=?",
-                            new String[]{mOriginAccountUID},
-                            DatabaseSchema.SplitEntry.COLUMN_ACCOUNT_UID,
-                            imbalanceAccountUID);
+                    TransactionsDbAdapter.getInstance().deleteTransactionsForAccount(mOriginAccountUID);
                 }
 
                 //now kill them all!!
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 8015d832..826adec6 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -30,6 +30,7 @@
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.PopupMenu;
 import android.support.v7.widget.RecyclerView;
+import android.text.format.DateUtils;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -56,8 +57,8 @@
 import org.gnucash.android.ui.util.CursorRecyclerAdapter;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.util.widget.EmptyRecyclerView;
-import org.ocpsoft.prettytime.PrettyTime;
 
+import java.text.DateFormat;
 import java.util.Date;
 import java.util.List;
 
@@ -220,7 +221,8 @@ public Cursor loadInBackground() {
 
 	public class TransactionRecyclerAdapter extends CursorRecyclerAdapter<TransactionRecyclerAdapter.ViewHolder>{
 
-		private final PrettyTime prettyTime = new PrettyTime();
+		DateFormat simpleDateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM);
+
 		public TransactionRecyclerAdapter(Cursor cursor) {
 			super(cursor);
 		}
@@ -262,7 +264,13 @@ public void onBindViewHolderCursor(ViewHolder holder, Cursor cursor) {
 			holder.transactionNote.setText(text);
 
 			long dateMillis = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_TIMESTAMP));
-			holder.transactionDate.setText(prettyTime.format(new Date(dateMillis)));
+			String dateText;
+			if (dateMillis > System.currentTimeMillis()){
+				dateText = simpleDateFormat.format(new Date(dateMillis));
+			} else {
+				dateText = DateUtils.getRelativeTimeSpanString(dateMillis).toString();
+			}
+			holder.transactionDate.setText(dateText);
 
 			final long id = holder.transactionId;
 			holder.itemView.setOnClickListener(new View.OnClickListener() {

From e6dcef81cf22e4725e7a3ffdc47f348565de65f3 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 4 Nov 2015 11:19:04 +0100
Subject: [PATCH 06/13] Update Crashlytics dependency

Fix crash when only negative sign is in calculatorEditText
Fix crash during import due to unsupported amount denominator (now support up to 6)
---
 app/build.gradle                                   |  2 +-
 .../main/java/org/gnucash/android/model/Money.java | 26 +++++++++++-----------
 .../android/ui/util/widget/CalculatorEditText.java |  2 +-
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 689e7c52..af8b2228 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -187,7 +187,7 @@ dependencies {
         exclude module: 'httpclient'
     }
 
-    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
+    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
         transitive = true;
     }
 
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 312a171b..a30b5675 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -84,7 +84,7 @@
      */
     public static Money getZeroInstance(){
 		if (sDefaultZero == null) {
-			String currencyCode = Currency.getInstance(GnuCashApplication.getDefaultLocale()).getCurrencyCode();
+			String currencyCode = GnuCashApplication.getDefaultCurrencyCode();
 			sDefaultZero = new Money(BigDecimal.ZERO, Commodity.getInstance(currencyCode));
 		}
 		return sDefaultZero;
@@ -211,9 +211,11 @@ public long getNumerator() {
 		try {
 			return mAmount.scaleByPowerOfTen(getScale()).longValueExact();
 		} catch (ArithmeticException e) {
-			Log.e(getClass().getName(), "Currency " + mCommodity.getCurrencyCode() +
+			String msg = "Currency " + mCommodity.getCurrencyCode() +
 					" with scale " + getScale() +
-					" has amount " + mAmount.toString());
+					" has amount " + mAmount.toString();
+			Crashlytics.log(msg);
+			Log.e(getClass().getName(), msg);
 			throw e;
 		}
 	}
@@ -225,16 +227,14 @@ public long getNumerator() {
 	 */
 	public long getDenominator() {
 		switch (getScale()) {
-			case 0:
-				return 1;
-			case 1:
-				return 10;
-			case 2:
-				return 100;
-			case 3:
-				return 1000;
-			case 4:
-				return 10000;
+			case 0: return 1;
+			case 1: return 10;
+			case 2: return 100;
+			case 3: return 1000;
+			case 4: return 10000;
+			case 5: return 100000;
+			case 6: return 1000000; //I think GnuCash XML can have gold and silver with this denom
+
 		}
 		throw new RuntimeException("Unsupported number of fraction digits " + getScale());
 	}
diff --git a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
index c0ebf47e..7d153a23 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
@@ -317,7 +317,7 @@ public boolean isInputModified(){
     public BigDecimal getValue(){
         evaluate();
         String amountString = getCleanString();
-        if (amountString.isEmpty())
+        if (amountString.isEmpty() || !amountString.matches("\\d+")) //value should contain atleast one digit
             return null;
         return new BigDecimal(amountString);
     }

From a304308869cc5945a0b925a065916b058ee97a49 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 4 Nov 2015 12:13:41 +0100
Subject: [PATCH 07/13] Update version for v2.0.1-beta1 release

Improve reliability of UI tests
---
 app/build.gradle                                             |  4 +++-
 .../org/gnucash/android/test/ui/ExportTransactionsTest.java  | 10 +++++++---
 .../gnucash/android/ui/util/widget/CalculatorEditText.java   | 12 ++++++++++--
 3 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index af8b2228..17ec24dc 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -6,7 +6,7 @@ apply plugin: 'io.fabric'
 def versionMajor = 2
 def versionMinor = 0
 def versionPatch = 1
-def versionBuild = 0
+def versionBuild = 1
 
 def buildTime() {
     def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
@@ -138,11 +138,13 @@ afterEvaluate {
         output.eachLine {
             def serial = it.split("\\s")[0]
             commandLine "$adb -s $serial shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+            commandLine "$adb -s $serial shell pm grant $android.productFlavors.development.applicationId android.permission.WRITE_EXTERNAL_STORAGE".split(' ')
         }
     }
 
     task grantAnimationPermissionProduction(type: Exec, dependsOn: 'installProductionDebug'){
         commandLine "$adb -e shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+        commandLine "$adb -e shell pm grant $android.defaultConfig.applicationId android.permission.WRITE_EXTERNAL_STORAGE".split(' ')
     }
     // When launching individual tests from Android Studio, it seems that only the assemble tasks
     // get called directly, not the install* versions
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 1e56a232..5b51bdce 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -17,6 +17,7 @@
 package org.gnucash.android.test.ui;
 
 import android.Manifest;
+import android.app.AlertDialog;
 import android.content.pm.PackageManager;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
@@ -48,8 +49,10 @@
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
 
 import java.io.File;
 import java.util.Currency;
@@ -68,6 +71,7 @@
 import static org.hamcrest.Matchers.allOf;
 
 @RunWith(AndroidJUnit4.class)
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public class ExportTransactionsTest extends
 		ActivityInstrumentationTestCase2<AccountsActivity> {
 
@@ -136,7 +140,7 @@ public void testOfxExport(){
 	}
 
 	@Test
-	public void shouldNotOfferXmlExportInSingleEntryMode(){
+	public void whenInSingleEntry_shouldHideXmlExportOption(){
 		PreferenceManager.getDefaultSharedPreferences(mAcccountsActivity)
 				.edit().putBoolean(mAcccountsActivity.getString(R.string.key_use_double_entry), false)
 				.commit();
@@ -174,7 +178,7 @@ public void testExport(ExportFormat format){
 				mAcccountsActivity.requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
 						Manifest.permission.READ_EXTERNAL_STORAGE}, 0x23);
 
-				onView(withId(android.R.id.button1)).perform(click());
+				onView(withId(AlertDialog.BUTTON_POSITIVE)).perform(click());
 			}
 		}
 
@@ -216,7 +220,7 @@ public void testDeleteTransactionsAfterExport(){
 	 * Does not work on Travis yet
 	 */
 	@Test
-	public void shouldCreateExportSchedule(){
+	public void testShouldCreateExportSchedule(){
 		DrawerActions.openDrawer(R.id.drawer_layout);
 		onView(withText(R.string.nav_menu_export)).perform(click());
 
diff --git a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
index 7d153a23..d58de4a4 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/widget/CalculatorEditText.java
@@ -317,9 +317,17 @@ public boolean isInputModified(){
     public BigDecimal getValue(){
         evaluate();
         String amountString = getCleanString();
-        if (amountString.isEmpty() || !amountString.matches("\\d+")) //value should contain atleast one digit
+        if (amountString.isEmpty())
+            return null;
+        try { //catch any exceptions in the conversion e.g. if a string with only "-" is entered
+            return new BigDecimal(amountString);
+        } catch (Exception e){
+            String msg = "Error parsing amount string " + amountString + " from CalculatorEditText";
+            Log.i(getClass().getSimpleName(), msg, e);
+            Crashlytics.log(msg);
+            Crashlytics.logException(e);
             return null;
-        return new BigDecimal(amountString);
+        }
     }
 
     /**

From 6d625ac6f6a6673485bf037d05de40b83292a890 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Wed, 4 Nov 2015 21:48:08 +0800
Subject: [PATCH 08/13] fix qif export to SDCard

---
 .../gnucash/android/export/ExportAsyncTask.java    | 22 +++++++++++++---------
 .../gnucash/android/export/qif/QifExporter.java    | 10 +++++++---
 2 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 94391f82..1f07600e 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -472,15 +472,19 @@ private void shareFile(String path) {
      * @throws IOException if the file could not be copied
      */
     public void copyFile(File src, File dst) throws IOException {
-        //TODO: Make this asynchronous at some time, t in the future.
-        FileChannel inChannel = new FileInputStream(src).getChannel();
-        FileChannel outChannel = new FileOutputStream(dst).getChannel();
-        try {
-            inChannel.transferTo(0, inChannel.size(), outChannel);
-        } finally {
-            if (inChannel != null)
-                inChannel.close();
-            outChannel.close();
+        //TODO: Make this asynchronous at some time, t in the future
+        if (mExportParams.getExportFormat() == ExportFormat.QIF) {
+            QifExporter.splitQIF(src, dst);
+        } else {
+            FileChannel inChannel = new FileInputStream(src).getChannel();
+            FileChannel outChannel = new FileOutputStream(dst).getChannel();
+            try {
+                inChannel.transferTo(0, inChannel.size(), outChannel);
+            } finally {
+                if (inChannel != null)
+                    inChannel.close();
+                outChannel.close();
+            }
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index 27f36271..ac5ca01c 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -230,11 +230,15 @@ public void generateExport(Writer writer) throws ExporterException {
      * @throws IOException if something went wrong while splitting the file.
      */
     public static List<String> splitQIF(File file) throws IOException {
+        return splitQIF(file, file);
+    }
+
+    public static List<String> splitQIF(File src, File dst) throws IOException {
         // split only at the last dot
-        String[] pathParts = file.getPath().split("(?=\\.[^\\.]+$)");
+        String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
         ArrayList<String> splitFiles = new ArrayList<>();
         String line;
-        BufferedReader in = new BufferedReader(new FileReader(file));
+        BufferedReader in = new BufferedReader(new FileReader(src));
         BufferedWriter out = null;
         try {
             while ((line = in.readLine()) != null) {
@@ -248,7 +252,7 @@ public void generateExport(Writer writer) throws ExporterException {
                     out = new BufferedWriter(new FileWriter(newFileName));
                 } else {
                     if (out == null) {
-                        throw new IllegalArgumentException(file.getPath() + " format is not correct");
+                        throw new IllegalArgumentException(src.getPath() + " format is not correct");
                     }
                     out.append(line).append('\n');
                 }

From 2246cf176b6a5efa7da8118ca10eecc1a6d452b6 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 4 Nov 2015 16:12:47 +0100
Subject: [PATCH 09/13] Update version for v2.0.1-beta2 release

---
 app/build.gradle | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/build.gradle b/app/build.gradle
index 17ec24dc..1cd91f87 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -6,7 +6,7 @@ apply plugin: 'io.fabric'
 def versionMajor = 2
 def versionMinor = 0
 def versionPatch = 1
-def versionBuild = 1
+def versionBuild = 2
 
 def buildTime() {
     def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")

From 7bced89ccebcf88af6db32e3598bd6d2755c8758 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 4 Nov 2015 17:08:32 +0100
Subject: [PATCH 10/13] Remove Fabric API key from manifest

---
 app/src/main/AndroidManifest.xml | 1 -
 1 file changed, 1 deletion(-)

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 692c236f..b35c4450 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -158,7 +158,6 @@
                 <action android:name="android.intent.action.BOOT_COMPLETED"/>
             </intent-filter>
         </receiver>
-        <meta-data android:name="io.fabric.ApiKey" android:value="46fe045d00d4ad8a71014c53567be3368e10bd64"/>
     </application>
 
 </manifest>
\ No newline at end of file

From ffdae9d9366951e6a1dd240e60b4650aefd9b78b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 5 Nov 2015 09:11:11 +0100
Subject: [PATCH 11/13] Update translations

fixes #418
---
 app/src/main/res/values-da-rDK/strings.xml | 539 +++++++++++++++--------------
 app/src/main/res/values-it-rIT/strings.xml |  14 +-
 app/src/main/res/values-ja-rJP/strings.xml |   8 +-
 app/src/main/res/values-pt-rBR/strings.xml |   6 +-
 app/src/main/res/values-pt-rPT/strings.xml |  14 +-
 app/src/main/res/values-zh-rCN/strings.xml |   2 +-
 6 files changed, 296 insertions(+), 287 deletions(-)

diff --git a/app/src/main/res/values-da-rDK/strings.xml b/app/src/main/res/values-da-rDK/strings.xml
index 4a8c1c1b..7cea4700 100644
--- a/app/src/main/res/values-da-rDK/strings.xml
+++ b/app/src/main/res/values-da-rDK/strings.xml
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--Generated by crowdin.com-->
 <!--
  Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  
@@ -15,76 +14,77 @@
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
+
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-  <string name="title_create_account">Opprett konto</string>
-  <string name="title_edit_account">Rediger konto</string>
-  <string name="info_details">Informasjon</string>
-  <string name="menu_export">Eksport OFX</string>
-  <string name="description_add_transaction_icon">Legg til ny kontotransaksjon</string>
-  <string name="label_no_accounts">Ingen kontoer  vise</string>
-  <string name="label_account_name">Kontonavn</string>
-  <string name="btn_cancel">Avbryt</string>
-  <string name="btn_save">Lagre</string>
-  <string name="label_passcode">Skriv passkode</string>
-  <string name="toast_wrong_passcode">Feil passkode, prv igjen</string>
-  <string name="toast_passcode_set">Passkode satt</string>
+  <string name="title_create_account">Create Account</string>
+  <string name="title_edit_account">Edit Account</string>
+  <string name="info_details">Info</string>
+  <string name="menu_export">Export</string>
+  <string name="description_add_transaction_icon">Add a new transaction to an account</string>
+  <string name="label_no_accounts">No accounts to display</string>
+  <string name="label_account_name">Account name</string>
+  <string name="btn_cancel">Cancel</string>
+  <string name="btn_save">Save</string>
+  <string name="label_passcode">Enter Passcode</string>
+  <string name="toast_wrong_passcode">Wrong passcode, please try again</string>
+  <string name="toast_passcode_set">Passcode set</string>
   <string name="label_confirm_passcode">Please confirm your passcode</string>
-  <string name="toast_invalid_passcode_confirmation">Ugyldig passkode ved verifisering. Prv igjen.</string>
-  <string name="label_transaction_name">Beskrivelse</string>
-  <string name="label_transaction_amount">Belp</string>
-  <string name="title_add_transaction">Ny transaksjon</string>
-  <string name="label_no_transactions">Ingen transaksjoner  vise</string>
-  <string name="label_timeanddate">DATO &amp; TID</string>
-  <string name="label_account">Konto</string>
-  <string name="label_debit">DEBET</string>
-  <string name="label_credit">KREDIT</string>
-  <string name="title_accounts">Kontoer</string>
-  <string name="title_transactions">Transaksjoner</string>
-  <string name="menu_delete">SLETT</string>
-  <string name="alert_dialog_ok_delete">Slett</string>
-  <string name="alert_dialog_cancel">Avbryt</string>
-  <string name="toast_account_deleted">Konto slettet</string>
-  <string name="title_confirm_delete">Bekreft sletting</string>
-  <string name="delete_account_confirmation_message">Alle transaksjoner tilhrende denne kontoen vil ogs bli slettet</string>
-  <string name="title_edit_transaction">Rediger transaksjon</string>
-  <string name="label_transaction_description">Notat</string>
-  <string name="menu_move">FLYTT</string>
-  <string name="title_selected">%1$d valgt</string>
-  <string name="label_account_balance">Saldo:</string>
+  <string name="toast_invalid_passcode_confirmation">Invalid passcode confirmation. Please try again</string>
+  <string name="label_transaction_name">Description</string>
+  <string name="label_transaction_amount">Amount</string>
+  <string name="title_add_transaction">New transaction</string>
+  <string name="label_no_transactions">No transactions to display</string>
+  <string name="label_timeanddate">DATE &amp; TIME</string>
+  <string name="label_account">Account</string>
+  <string name="label_debit">DEBIT</string>
+  <string name="label_credit">CREDIT</string>
+  <string name="title_accounts">Accounts</string>
+  <string name="title_transactions">Transactions</string>
+  <string name="menu_delete">Delete</string>
+  <string name="alert_dialog_ok_delete">Delete</string>
+  <string name="alert_dialog_cancel">Cancel</string>
+  <string name="toast_account_deleted">Account deleted</string>
+  <string name="title_confirm_delete">Confirm delete</string>
+  <string name="delete_account_confirmation_message">All transactions in this account will also be deleted</string>
+  <string name="title_edit_transaction">Edit Transaction</string>
+  <string name="label_transaction_description">Add note</string>
+  <string name="menu_move">MOVE</string>
+  <string name="title_selected">%1$d selected</string>
+  <string name="label_account_balance">Balance:</string>
   <string name="label_export_destination">Export To:</string>
-  <string name="title_export_dialog">Eksporter transaksjoner</string>
-  <string name="option_export_all_transactions">Eksporter alle transaksjoner</string>
-  <string name="hint_export_choice">Vanligvis vil kun nye transaksjoner bli eksportert.  Merk dette valget for  eksportere alle transaksjonene</string>
-  <string name="toast_export_error">Feil ved eksportering av %1$s-data</string>
-  <string name="btn_export">Eksporter</string>
-  <string name="option_delete_after_export">Slett etter eksportering</string>
-  <string name="hint_delete_after_export">Alle eksporterte transaksjoner vil bli slettet etter eksportering</string>
-  <string name="title_settings">Innstillinger</string>
+  <string name="title_export_dialog">Export Transactions</string>
+  <string name="option_export_all_transactions">Export all transactions</string>
+  <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
+  <string name="toast_export_error">Error exporting %1$s file</string>
+  <string name="btn_export">Export</string>
+  <string name="option_delete_after_export">Delete after export</string>
+  <string name="hint_delete_after_export">All exported transactions will be deleted when exporting is completed</string>
+  <string name="title_settings">Settings</string>
   <string-array name="export_destinations">
-    <item>SD-kort</item>
+    <item>SD Card</item>
     <item>DropBox</item>
     <item>Google Drive</item>
-    <item>Delt fil&#8230;</item>
+    <item>Send to&#8230;</item>
   </string-array>
-  <string name="btn_move">Flytt</string>
-  <string name="title_move_transactions">Flytt %1$d transaksjoner</string>
-  <string name="label_move_destination">Til konto</string>
-  <string name="permission_access_sdcard">Tilgang til minnekort</string>
-  <string name="toast_incompatible_currency">Kan ikke flytte transaksjonen(e).\nMottakerkonto har en annen valuta</string>
-  <string name="header_general_settings">Generelt</string>
-  <string name="header_about_gnucash">Om</string>
-  <string name="title_choose_currency">Velg standardvaluta</string>
-  <string name="title_default_currency">Standardvaluta</string>
-  <string name="summary_default_currency">Standardvaluta for nye kontoer</string>
-  <string name="label_permission_record_transactions">Aktiverer innspilling av transaksjoner i Gnucash for Android</string>
-  <string name="label_permission_create_accounts">Aktiverer oppretting av konti i Gnucash for Android</string>
-  <string name="label_permission_group">Dine GnuCash-data</string>
-  <string name="description_permission_group">Lese og endre Gnucash-data</string>
+  <string name="btn_move">Move</string>
+  <string name="title_move_transactions">Move %1$d transaction(s)</string>
+  <string name="label_move_destination">Destination Account</string>
+  <string name="permission_access_sdcard">Access SD Card</string>
+  <string name="toast_incompatible_currency">Cannot move transactions.\nThe destination account uses a different currency from origin account</string>
+  <string name="header_general_settings">General</string>
+  <string name="header_about_gnucash">About</string>
+  <string name="title_choose_currency">Choose default currency</string>
+  <string name="title_default_currency">Default currency</string>
+  <string name="summary_default_currency">Default currency to assign to new accounts</string>
+  <string name="label_permission_record_transactions">Enables recording transactions in GnuCash for Android</string>
+  <string name="label_permission_create_accounts">Enables creation of accounts in GnuCash for Android</string>
+  <string name="label_permission_group">Your GnuCash data</string>
+  <string name="description_permission_group">Read and modify GnuCash data</string>
   <string name="label_permission_record_transaction">Record transactions in GnuCash</string>
   <string name="label_permission_create_account">Create accounts in GnuCash</string>
-  <string name="label_display_account">Vis konto</string>
-  <string name="btn_create_accounts">Opprette kontoer</string>
-  <string name="title_default_accounts">Velg kontoer som skal opprettes</string>
+  <string name="label_display_account">Display account</string>
+  <string name="btn_create_accounts">Create Accounts</string>
+  <string name="title_default_accounts">Select accounts to create</string>
   <string-array name="currency_names">
     <item>Afghani</item>
     <item>Algerian Dinar</item>
@@ -126,7 +126,7 @@
     <item>Cuban Peso</item>
     <item>Czech Koruna</item>
     <item>Dalasi</item>
-    <item>Danske kroner</item>
+    <item>Danish Krone</item>
     <item>Denar</item>
     <item>Djibouti Franc</item>
     <item>Dobra</item>
@@ -193,7 +193,7 @@
     <item>New Zealand Dollar</item>
     <item>Ngultrum</item>
     <item>North Korean Won</item>
-    <item>Norske kroner</item>
+    <item>Norwegian Krone</item>
     <item>Nuevo Sol</item>
     <item>Ouguiya</item>
     <item>Paanga</item>
@@ -202,7 +202,7 @@
     <item>Pataca</item>
     <item>Philippine Peso</item>
     <item>Platinum</item>
-    <item>Engelske pund</item>
+    <item>Pound Sterling</item>
     <item>Pula</item>
     <item>Qatari Rial</item>
     <item>Quetzal</item>
@@ -229,14 +229,14 @@
     <item>Sucre</item>
     <item>Sudanese Pound</item>
     <item>Surinam Dollar</item>
-    <item>Svenske kroner</item>
+    <item>Swedish Krona</item>
     <item>Swiss Franc</item>
     <item>Syrian Pound</item>
     <item>Taka</item>
     <item>Tala</item>
     <item>Tanzanian Shilling</item>
     <item>Tenge</item>
-    <item>Uten valuta</item>
+    <item>No currency</item>
     <item>Trinidad and Tobago Dollar</item>
     <item>Tugrik</item>
     <item>Tunisian Dinar</item>
@@ -248,8 +248,8 @@
     <item>Unidad de Valor Real</item>
     <item>Unidades de fomento</item>
     <item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-    <item>Uruguayan Peso</item>
-    <item>Amerikanske dollar</item>
+    <item>Uruguayan peso</item>
+    <item>US Dollar</item>
     <item>Uzbekistan Sum</item>
     <item>Vatu</item>
     <item>WIR Euro</item>
@@ -262,51 +262,51 @@
     <item>Zimbabwe Dollar</item>
     <item>Zloty</item>
   </string-array>
-  <string name="error_no_accounts">Ingen kontoer funnet.\nOpprett en konto fr du legger til en modul</string>
-  <string name="title_build_version">Byggversion</string>
-  <string name="title_license">Lisens</string>
-  <string name="summary_licence_details">Apache Lisens v2.0. Klikk for detaljer.</string>
-  <string name="title_general_prefs">Generelt</string>
-  <string name="label_widget_configuration">Velg konto</string>
-  <string name="toast_no_transactions_to_export">Ingen transaksjoner  eksportere</string>
-  <string name="header_passcode_settings">Passkode</string>
-  <string name="title_passcode_preferences">Passkode preferanser</string>
-  <string name="title_passcode_enabled">Passkode p</string>
-  <string name="title_passcode_disabled">Passkode av</string>
-  <string name="title_change_passcode">Bytt Passkode</string>
-  <string name="title_about_gnucash">Om Gnucash</string>
+  <string name="error_no_accounts">No accounts exist in GnuCash.\nCreate an account before adding a widget</string>
+  <string name="title_build_version">Build version</string>
+  <string name="title_license">License</string>
+  <string name="summary_licence_details">Apache License v2.0. Click for details</string>
+  <string name="title_general_prefs">General Preferences</string>
+  <string name="label_widget_configuration">Select Account</string>
+  <string name="toast_no_transactions_to_export">There are no transactions available to export</string>
+  <string name="header_passcode_settings">Passcode</string>
+  <string name="title_passcode_preferences">Passcode Preferences</string>
+  <string name="title_passcode_enabled">Passcode Turned On</string>
+  <string name="title_passcode_disabled">Passcode Turned Off</string>
+  <string name="title_change_passcode">Change Passcode</string>
+  <string name="title_about_gnucash">About GnuCash</string>
   <string name="summary_about_gnucash">A mobile finance management and expense-tracker designed for Android</string>
-  <string name="title_about">Om</string>
-  <string name="toast_format_exported_to">%1$s-fil eksportert til:\n</string>
-  <string name="title_export_email">Gnucash Android %1$s-eksportering</string>
-  <string name="description_export_email">Gnucash Android-eksportering til </string>
-  <string name="header_transaction_settings">Transaksjoner</string>
-  <string name="title_transaction_preferences">Transaksjonsinnstillinger</string>
-  <string name="title_account_preferences">Kontoinnstillinger</string>
-  <string name="title_default_transaction_type">Standard transaksjonstype</string>
-  <string name="summary_default_transaction_type">Transaksjonstypen som skal brukes som standard, KREDIT eller DEBET</string>
+  <string name="title_about">About</string>
+  <string name="toast_format_exported_to">%1$s file exported to:\n</string>
+  <string name="title_export_email">GnuCash Android %1$s export</string>
+  <string name="description_export_email">GnuCash Android Export from </string>
+  <string name="header_transaction_settings">Transactions</string>
+  <string name="title_transaction_preferences">Transaction Preferences</string>
+  <string name="title_account_preferences">Account Preferences</string>
+  <string name="title_default_transaction_type">Default Transaction Type</string>
+  <string name="summary_default_transaction_type">The type of transaction to use by default, CREDIT or DEBIT</string>
   <string-array name="transaction_types">
-    <item>KREDIT</item>
-    <item>DEBET</item>
+    <item>CREDIT</item>
+    <item>DEBIT</item>
   </string-array>
-  <string name="msg_delete_all_transactions_confirmation">Er du sikker at du vil slette ALLE transaksjonene?</string>
-  <string name="msg_delete_transaction_confirmation">Er du sikker at du vil slette denne transaksjonen?</string>
-  <string name="title_export_preference_category">Eksport</string>
-  <string name="title_export_all_transactions">Eksportere alle transaksjoner</string>
-  <string name="title_always_delete_exported_transactions">Slette eksporterte transaksjoner</string>
-  <string name="title_default_export_email">E-post for eksportering</string>
-  <string name="summary_default_export_email">E-post for eksport. Du kan endre denne ved eksportering.</string>
-  <string name="label_double_entry_account">Overfringskonto</string>
-  <string name="summary_use_double_entry">Alle transaksjoner vil bli overfrt til en annen konto</string>
-  <string name="title_use_double_entry">Aktiver dobbel bokfring</string>
-  <string name="account_balance">Balanse</string>
-  <string name="toast_no_account_name_entered">Navngi kontoen for  opprette den</string>
-  <string name="label_account_currency">Valuta</string>
-  <string name="label_parent_account">Hovedkonto</string>
-  <string name="title_xml_ofx_header">Bruk XML OFX header</string>
-  <string name="summary_xml_ofx_header">Velg denne hvis du skal eksportere til annen programvare enn GnuCash for PC.</string>
-  <string name="title_whats_new">Hva er nytt</string>
-  <string name="whats_new">
+  <string name="msg_delete_all_transactions_confirmation">Are you sure you want to delete ALL transactions?</string>
+  <string name="msg_delete_transaction_confirmation">Are you sure you want to delete this transaction?</string>
+  <string name="title_export_preference_category">Export</string>
+  <string name="title_export_all_transactions">Export all transactions</string>
+  <string name="title_always_delete_exported_transactions">Delete exported transactions</string>
+  <string name="title_default_export_email">Default export email</string>
+  <string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>
+  <string name="label_double_entry_account">Transfer Account</string>
+  <string name="summary_use_double_entry">All transactions will be a transfer from one account to another</string>
+  <string name="title_use_double_entry">Activate Double Entry</string>
+  <string name="account_balance">Balance</string>
+  <string name="toast_no_account_name_entered">Enter an account name to create an account</string>
+  <string name="label_account_currency">Currency</string>
+  <string name="label_parent_account">Parent account</string>
+  <string name="title_xml_ofx_header">Use XML OFX header</string>
+  <string name="summary_xml_ofx_header">Enable this option when exporting to third-party application other than GnuCash for desktop</string>
+  <string name="title_whats_new">What\'s New</string>
+	<string name="whats_new">
         - New Material app design \n
         - Multi-currency transactions\n
         - Calculator to transaction amounts\n
@@ -314,59 +314,62 @@
         - New help &amp; feedback section\n
         - Multiple bug fixes and improvements\n
 	</string>
-  <string name="label_dismiss">Ferdig</string>
-  <string name="toast_transanction_amount_required">Oppgi et belp for  lagre transaksjonen</string>
-  <string name="toast_error_edit_multi_currency_transaction">Flervaluta transaksjoner kan ikke endres</string>
-  <string name="menu_import_accounts">Importere GnuCash Kontoer</string>
-  <string name="btn_import_accounts">Importere Kontoer</string>
-  <string name="toast_error_importing_accounts">En feil oppstod ved importering fra GnuCash</string>
-  <string name="toast_success_importing_accounts">GnuCash kontoer importert</string>
-  <string name="summary_import_accounts">Importere kontostruktur eksportert fra GnuCash (PC)</string>
-  <string name="title_import_accounts">Importere GnuCash kontoer</string>
-  <string name="summary_delete_all_accounts">Slette alle kontoer i databasen. Alle transaksjoner vil ogs bli slettet.
+  <string name="label_dismiss">Dismiss</string>
+  <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
+  <string name="toast_error_edit_multi_currency_transaction">Multi-currency transactions cannot be modified</string>
+  <string name="menu_import_accounts">Import GnuCash Accounts</string>
+  <string name="btn_import_accounts">Import Accounts</string>
+  <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
+  <string name="toast_success_importing_accounts">GnuCash Accounts successfully imported</string>
+  <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
+  <string name="title_import_accounts">Import GnuCash XML</string>
+    <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
+        well.
     </string>
-  <string name="title_delete_all_accounts">Slette alle kontoer</string>
-  <string name="header_account_settings">Kontoer</string>
-  <string name="toast_all_accounts_deleted">Alle kontoer ble slettet.</string>
-  <string name="confirm_delete_all_accounts">Er du sikkert at du vil slette alle transaksjoner og kontoer? \nDenne operasjonen kan ikke bli omgjort!
+  <string name="title_delete_all_accounts">Delete all accounts</string>
+  <string name="header_account_settings">Accounts</string>
+  <string name="toast_all_accounts_deleted">All accounts have been successfully deleted</string>
+    <string name="confirm_delete_all_accounts">Are you sure you want to delete all accounts and transactions?\n\nThis
+        operation cannot be undone!
     </string>
-  <string name="label_account_type">Konto Type</string>
-  <string name="summary_delete_all_transactions">Alle transaksjoner i alle kontoer vil bli slettet!</string>
-  <string name="title_delete_all_transactions">Slette alle transaksjoner</string>
-  <string name="toast_all_transactions_deleted">Alle transaksjoner slettet!</string>
-  <string name="title_progress_importing_accounts">Importerer kontoer</string>
-  <string name="toast_tap_again_to_confirm_delete">Trykk igjen for  bekrefte. ALLE oppfringer vil bli slettet!!</string>
-  <string name="section_header_transactions">Transaksjoner</string>
-  <string name="section_header_subaccounts">Underkontoer</string>
-  <string name="menu_search_accounts">Sk</string>
-  <string name="title_default_export_format">Standard eksportformat</string>
-  <string name="summary_default_export_format">Standard filformat ved eksport av transaksjoner</string>
-  <string name="menu_export_transactions">Eksportere transaksjoner&#8230;</string>
-  <string name="label_recurring_transaction">Planlagte</string>
-  <string name="imbalance_account_name">Ubalanse</string>
-  <string name="title_progress_exporting_transactions">Eksporter transaksjoner</string>
-  <string name="label_no_recurring_transactions">Ingen planlagte transaksjoner  vise.</string>
-  <string name="toast_recurring_transaction_deleted">Slettet alle planlagte transaksjoner</string>
-  <string name="label_placeholder_account">Plassholder konto</string>
-  <string name="label_default_transfer_account">Standard overfringskonto</string>
+  <string name="label_account_type">Account Type</string>
+  <string name="summary_delete_all_transactions">All transactions in all accounts will be deleted!</string>
+  <string name="title_delete_all_transactions">Delete all transactions</string>
+  <string name="toast_all_transactions_deleted">All transactions successfully deleted!</string>
+  <string name="title_progress_importing_accounts">Importing accounts</string>
+  <string name="toast_tap_again_to_confirm_delete">Tap again to confirm. ALL entries will be deleted!!</string>
+  <string name="section_header_transactions">Transactions</string>
+  <string name="section_header_subaccounts">Sub-Accounts</string>
+  <string name="menu_search_accounts">Search</string>
+  <string name="title_default_export_format">Default Export Format</string>
+  <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
+  <string name="menu_export_transactions">Export transactions</string>
+  <string name="label_recurring_transaction">Recurrence</string>
+  <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+  <string name="imbalance_account_name">Imbalance</string>
+  <string name="title_progress_exporting_transactions">Exporting transactions</string>
+  <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
+  <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
+  <string name="label_placeholder_account">Placeholder account</string>
+  <string name="label_default_transfer_account">Default Transfer Account</string>
   <plurals name="label_sub_accounts">
-    <item quantity="one">%d under-konto</item>
-    <item quantity="other">%d under-kontoer</item>
+    <item quantity="one">%d sub-account</item>
+    <item quantity="other">%d sub-accounts</item>
   </plurals>
   <string-array name="account_type_entry_values">
-    <item>KONTANTER</item>
+    <item>CASH</item>
     <item>BANK</item>
-    <item>KREDITTKORT</item>
-    <item>EIENDEL</item>
-    <item>GJELD</item>
-    <item>INNTEKT</item>
-    <item>UTGIFT</item>
-    <item>LEVERANDRGJELD</item>
-    <item>FORDRING</item>
-    <item>EGENKAPITAL</item>
-    <item>VALUTA</item>
-    <item>AKSJE</item>
-    <item>AKSJEFOND</item>
+    <item>CREDIT CARD</item>
+    <item>ASSET</item>
+    <item>LIABILITY</item>
+    <item>INCOME</item>
+    <item>EXPENSE</item>
+    <item>PAYABLE</item>
+    <item>RECEIVABLE</item>
+    <item>EQUITY</item>
+    <item>CURRENCY</item>
+    <item>STOCK</item>
+    <item>MUTUAL FUND</item>
     <item>TRADING</item>
   </string-array>
   <string-array name="export_formats">
@@ -374,135 +377,141 @@
     <item>OFX</item>
     <item>XML</item>
   </string-array>
-  <string name="color_picker_default_title">Velg en farge</string>
-  <string name="label_account_color_and_type">Konto Farge &amp; Type</string>
-  <string name="label_delete_sub_accounts">Slett underkontoer</string>
-  <string name="title_recent_accounts">Nylige</string>
-  <string name="title_favorite_accounts">Favoritter</string>
-  <string name="title_all_accounts">Alle</string>
-  <string name="summary_create_default_accounts">Oppretter standard GnuCash kontostruktur</string>
-  <string name="title_create_default_accounts">Opprette standard kontoer</string>
+  <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+  <string name="color_picker_default_title">Select a Color</string>
+  <!-- Content description for a color square. -->
+  <string name="color_swatch_description" translatable="false">Color <xliff:g id="color_index" example="14">%1$d</xliff:g></string>
+  <!-- Content description for a selected color square. -->
+  <string name="color_swatch_description_selected" translatable="false">Color <xliff:g id="color_index" example="14">%1$d</xliff:g> selected</string>
+  <string name="label_account_color_and_type">Account Color &amp; Type</string>
+  <string name="label_delete_sub_accounts">Delete sub-accounts</string>
+  <string name="title_recent_accounts">Recent</string>
+  <string name="title_favorite_accounts">Favorites</string>
+  <string name="title_all_accounts">All</string>
+  <string name="summary_create_default_accounts">Creates default GnuCash commonly-used account structure</string>
+  <string name="title_create_default_accounts">Create default accounts</string>
   <string name="msg_confirm_create_default_accounts_setting">All existing accounts and transactions on the device will be deleted.\n\nAre you sure you want to proceed?</string>
-  <string name="menu_scheduled_transactions">Planlagte Transaksjoner</string>
-  <string name="msg_confirm_create_default_accounts_first_run">Velkommen til GnuCash Android! \nDu kan enten opprette et hieraki av de mest brukte kontoene, eller importere din egen GnuCash kontostruktur. \n\nBegge valgene er ogs tilgjengelige under Instillinger, s du kan velge senere.
+  <string name="menu_scheduled_transactions">Scheduled Transactions</string>
+    <string name="msg_confirm_create_default_accounts_first_run">Welcome to GnuCash Android! \nYou can either create
+        a hierarchy of commonly-used accounts, or import your own GnuCash account structure. \n\nBoth options are also
+        available in app Settings so you can decide later.
     </string>
-  <string name="title_scheduled_transactions">Planlagte Transaksjoner</string>
+  <string name="title_scheduled_transactions">Transactions</string>
   <string name="title_select_export_destination">Select destination for export</string>
-  <string name="hint_split_memo">Notat</string>
-  <string name="label_spend">Forbruk</string>
-  <string name="label_receive">Motta</string>
-  <string name="label_withdrawal">Uttak</string>
-  <string name="label_deposit">Innskudd</string>
-  <string name="label_payment">Betaling</string>
-  <string name="label_charge">Belast</string>
-  <string name="label_decrease">Reduser</string>
-  <string name="label_increase">k</string>
-  <string name="label_income">Inntekt</string>
-  <string name="label_rebate">Rabatt</string>
-  <string name="label_expense">Utgift</string>
-  <string name="label_bill">Regning</string>
-  <string name="label_invoice">Faktura</string>
-  <string name="label_buy">Kjp</string>
-  <string name="label_sell">Salg</string>
-  <string name="label_repeats">Gjentas</string>
-  <string name="toast_no_recent_backup">Ingen nylig sikkerhetskopi funnet</string>
-  <string name="account_name_opening_balances">Inngende balanse</string>
-  <string name="account_name_equity">Egenkapital</string>
-  <string name="summary_save_opening_balances">Merk for  lagre gjeldende konto balanse (fr sletting) som ny inngende balanse (etter sletting av transaksjoner).</string>
-  <string name="title_save_opening_balances">Lagre inngende balanser</string>
-  <string name="export_warning_ofx">OFX sttter ikke dobbel bokfring</string>
-  <string name="export_warning_qif">Oppretter separate QIF filer for hver valuta</string>
-  <string name="title_transaction_splits">Transaksjonssplitt</string>
-  <string name="label_imbalance">Ubalance:</string>
-  <string name="btn_add_split">Legg til splitt</string>
-  <string name="menu_title_favorite">Favoritt</string>
-  <string name="drawer_open">Navigasjonsskuff pnet</string>
-  <string name="drawer_close">Navigasjonsskuff lukket</string>
-  <string name="title_reports">Rapporter</string>
-  <string name="title_pie_chart">Kakediagram</string>
-  <string name="title_line_chart">Linjediagram</string>
-  <string name="title_bar_chart">Sylediagram</string>
-  <string name="title_report_prefs">Innstillinger for rapporter</string>
-  <string name="label_report_currency">Velg valuta</string>
-  <string name="title_use_account_color">Kontofarge i rapportene</string>
-  <string name="summary_use_account_color">Bruk kontofarge i kakediagrammet</string>
-  <string name="header_report_settings">Rapporter</string>
-  <string name="menu_order_by_size">Sorter etter strrelse</string>
+  <string name="hint_split_memo">Memo</string>
+  <string name="label_spend">Spend</string>
+  <string name="label_receive">Receive</string>
+  <string name="label_withdrawal">Withdrawal</string>
+  <string name="label_deposit">Deposit</string>
+  <string name="label_payment">Payment</string>
+  <string name="label_charge">Charge</string>
+  <string name="label_decrease">Decrease</string>
+  <string name="label_increase">Increase</string>
+  <string name="label_income">Income</string>
+  <string name="label_rebate">Rebate</string>
+  <string name="label_expense">Expense</string>
+  <string name="label_bill">Bill</string>
+  <string name="label_invoice">Invoice</string>
+  <string name="label_buy">Buy</string>
+  <string name="label_sell">Sell</string>
+  <string name="label_repeats">Repeats</string>
+  <string name="toast_no_recent_backup">No recent backup found</string>
+  <string name="account_name_opening_balances">Opening Balances</string>
+  <string name="account_name_equity">Equity</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+  <string name="title_save_opening_balances">Save account opening balances</string>
+  <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+  <string name="export_warning_qif">Generates separate QIF files per currency</string>
+  <string name="title_transaction_splits">Transaction splits</string>
+  <string name="label_imbalance">Imbalance:</string>
+  <string name="btn_add_split">Add split</string>
+  <string name="menu_title_favorite">Favorite</string>
+  <string name="drawer_open">Navigation drawer opened</string>
+  <string name="drawer_close">Navigation drawer closed</string>
+  <string name="title_reports">Reports</string>
+  <string name="title_pie_chart">Pie Chart</string>
+  <string name="title_line_chart">Line Chart</string>
+  <string name="title_bar_chart">Bar Chart</string>
+  <string name="title_report_prefs">Report Preferences</string>
+  <string name="label_report_currency">Select currency</string>
+  <string name="title_use_account_color">Account color in reports</string>
+  <string name="summary_use_account_color">Use account color in the bar/pie chart</string>
+  <string name="header_report_settings">Reports</string>
+  <string name="menu_order_by_size">Order by size</string>
   <string name="menu_toggle_legend">Show legend</string>
   <string name="menu_toggle_labels">Show labels</string>
   <string name="menu_toggle_percentage_mode">Show percentage</string>
   <string name="menu_toggle_average_lines">Show average lines</string>
-  <string name="menu_group_smaller_slices">Grupper sm stykker</string>
-  <string name="label_chart_no_data">Ingen diagramdata er tilgjengelige</string>
-  <string name="label_chart_overall">Generell</string>
+  <string name="menu_group_smaller_slices">Group Smaller Slices</string>
+  <string name="label_chart_no_data">No chart data available</string>
+  <string name="label_chart_overall">Overall</string>
   <string name="label_chart_total">Total</string>
-  <string name="label_other_slice">Andre</string>
-  <string name="toast_chart_percentage_mode_total">Prosent av valgt verdi kalkulert ut ifra totalen</string>
-  <string name="toast_chart_percentage_mode_current_bar">Prosent av valgt verdi kalkulert ut ifra gjeldene syle</string>
-  <string name="label_save_template">Lagre som mal</string>
-  <string name="label_delete_account_transactions_description">Denne kontoen inneholder transaksjoner. \nHva vil du gjre med disse</string>
-  <string name="label_delete_account_subaccounts_description">Denne kontoen inneholder underkontoer. \nHva vil du gjre med disse</string>
-  <string name="label_delete_transactions">Slett tranaksjoner</string>
-  <string name="toast_disable_double_entry_to_save_transaction">Opprett og spesifiser en overfringskonto ELLER skru av dobbel bokfring under innstillinger for  lagre transaksjonene</string>
-  <string name="label_tap_to_create_schedule">Trykk for  opprette tidsplan</string>
-  <string name="title_restore_backup">Tilbakefr sikkerhetskopi</string>
-  <string name="header_backup_and_export_settings">Sikkerhetskopier &amp; eksport</string>
-  <string name="title_dropbox_sync_preference">DropBox Synk</string>
-  <string name="title_backup_preference_category">Sikkerhetskopi</string>
-  <string name="summary_dropbox_sync">Skru p synkronisering til DropBox</string>
-  <string name="title_select_gnucash_xml_file">Velg GnuCash XML fil</string>
-  <string name="title_backup_prefs">Innstillinger for sikkerhetskopi</string>
-  <string name="title_create_backup_pref">Lag sikkerhetskopi</string>
-  <string name="summary_create_backup_pref">Standard blir sikkerhetskopier lagret til SD minnekort</string>
-  <string name="summary_restore_backup_pref">Velg en sikkerhetskopi for tilbakefring</string>
-  <string name="toast_backup_successful">Sikkerhetskopiering ferdig</string>
-  <string name="toast_backup_failed">Feil ved sikkerhetskopiering</string>
-  <string name="export_warning_xml">Eksporteret alle kontoer og transaksjoner</string>
+  <string name="label_other_slice">Other</string>
+  <string name="toast_chart_percentage_mode_total">The percentage of selected value calculated from the total amount</string>
+  <string name="toast_chart_percentage_mode_current_bar">The percentage of selected value calculated from the current stacked bar amount</string>
+  <string name="label_save_template">Save as template</string>
+  <string name="label_delete_account_transactions_description">This account contains transactions. \nWhat would you like to do with these transactions</string>
+  <string name="label_delete_account_subaccounts_description">This account contains sub-accounts. \nWhat would you like to do with these sub-accounts</string>
+  <string name="label_delete_transactions">Delete transactions</string>
+  <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+  <string name="label_tap_to_create_schedule">Tap to create schedule</string>
+  <string name="title_restore_backup">Restore Backup</string>
+  <string name="header_backup_and_export_settings">Backup &amp; export</string>
+  <string name="title_dropbox_sync_preference">DropBox Sync</string>
+  <string name="title_backup_preference_category">Backup</string>
+  <string name="summary_dropbox_sync">Enable to sync to DropBox</string>
+  <string name="title_select_gnucash_xml_file">Select GnuCash XML file</string>
+  <string name="title_backup_prefs">Backup Preferences</string>
+  <string name="title_create_backup_pref">Create Backup</string>
+  <string name="summary_create_backup_pref">By default backups are saved to the SDCARD</string>
+  <string name="summary_restore_backup_pref">Select a specific backup to restore</string>
+  <string name="toast_backup_successful">Backup successful</string>
+  <string name="toast_backup_failed">Backup failed</string>
+  <string name="export_warning_xml">Exports all accounts and transactions</string>
   <string name="title_google_drive_sync_pref">Google Drive Sync</string>
-  <string name="summary_google_drive_sync">Skru p synk til Google Disk</string>
-  <string name="toast_install_file_manager">Installer en filbehandler for  velge filer</string>
-  <string name="title_select_backup_to_restore">Velg sikkerhetskopi som skal tilbakefres</string>
-  <string name="nav_menu_favorites">Favoritter</string>
-  <string name="nav_menu_open">pne...</string>
-  <string name="nav_menu_reports">Rapporter</string>
-  <string name="nav_menu_scheduled_transactions">Planlagte transaksjoner</string>
-  <string name="nav_menu_export">Eksporter...</string>
-  <string name="nav_menu_settings">Instillinger</string>
+  <string name="summary_google_drive_sync">Enable to sync to Google Drive</string>
+  <string name="toast_install_file_manager">Install a file manager to select files</string>
+  <string name="title_select_backup_to_restore">Select backup to restore</string>
+  <string name="nav_menu_favorites">Favorites</string>
+  <string name="nav_menu_open">Open</string>
+  <string name="nav_menu_reports">Reports</string>
+  <string name="nav_menu_scheduled_transactions">Scheduled Transactions</string>
+  <string name="nav_menu_export">Export</string>
+  <string name="nav_menu_settings">Settings</string>
   <plurals name="label_every_x_days">
-    <item quantity="one">Daglig</item>
-    <item quantity="other">Hver %d dag</item>
+    <item quantity="one">Daily</item>
+    <item quantity="other">Every %d days</item>
   </plurals>
   <plurals name="label_every_x_weeks">
-    <item quantity="one">Ukentlig</item>
-    <item quantity="other">Hver %d uke</item>
+    <item quantity="one">Weekly</item>
+    <item quantity="other">Every %d weeks</item>
   </plurals>
   <plurals name="label_every_x_months">
-    <item quantity="one">Mnedlig</item>
-    <item quantity="other">Hver %d mned</item>
+    <item quantity="one">Monthly</item>
+    <item quantity="other">Every %d months</item>
   </plurals>
   <plurals name="label_every_x_years">
-    <item quantity="one">rlig</item>
-    <item quantity="other">Hvert %d r</item>
+    <item quantity="one">Yearly</item>
+    <item quantity="other">Every %d years</item>
   </plurals>
-  <string name="title_enable_crashlytics">Skru p feillogging</string>
-  <string name="msg_enable_crashlytics">Skru p feilrapportering til utviklerene for utbedring (anbefalt).
-Ingen brukerinformasjon vil bli delt i denne prosessen!
-    </string>
-  <string name="label_export_format">Format</string>
-  <string name="toast_backup_folder_not_found">Mappe for sikkerhetskopier ikke funnet. Sjekk at SD kortet er montert!</string>
+  <string name="title_enable_crashlytics">Enable Crash Logging</string>
+  <string name="msg_enable_crashlytics">Automatically send information about app malfunction to the developers.</string>
+  <string name="label_export_format"> Format</string>
+  <string name="toast_backup_folder_not_found">Backup folder cannot be found. Make sure the SD Card is mounted!</string>
   <string name="label_old_passcode">Enter your old passcode</string>
   <string name="label_new_passcode">Enter your new passcode</string>
-  <string name="nav_menu_scheduled_backups">Planlagte sikkerhetskopier</string>
-  <string name="title_scheduled_exports">Planlagte eksporteringer</string>
-  <string name="label_no_scheduled_exports_to_display">Ingen  vise</string>
-  <string name="title_create_export_schedule">Opprett exporteringsplan</string>
-  <string name="toast_exported_to">Eksportert til: %1$s</string>
+  <string name="nav_menu_scheduled_backups">Scheduled Exports</string>
+  <string name="title_scheduled_exports">Exports</string>
+  <string name="label_no_scheduled_exports_to_display">No scheduled exports to display</string>
+  <string name="title_create_export_schedule">Create export schedule</string>
+  <string name="toast_exported_to">Exported to: %1$s</string>
   <string name="toast_legend_too_long">The legend is too long</string>
   <string name="hint_account_description">Account description</string>
   <string name="label_no_recent_accounts">No recent accounts</string>
   <string name="label_no_favorite_accounts">No favorite accounts</string>
   <string name="nav_menu_scheduled_actions">Scheduled Actions</string>
-  <string name="label_scheduled_action_ended">"Ended, last executed on "</string>
+  <string name="label_scheduled_action_ended">"Ended, last executed on %1$s"</string>
   <string name="label_select_bar_to_view_details">Select a bar to view details</string>
   <string name="btn_wizard_next">Next</string>
   <string name="btn_wizard_finish">Done</string>
@@ -513,7 +522,7 @@ Ingen brukerinformasjon vil bli delt i denne prosessen!
   <string name="wizard_option_create_default_accounts">Create default accounts</string>
   <string name="wizard_option_import_my_accounts">Import my accounts</string>
   <string name="wizard_option_let_me_handle_it">Let me handle it</string>
-  <string name="wizard_option_currency_other">Other...</string>
+  <string name="wizard_option_currency_other">Other</string>
   <string name="wizard_option_auto_send_crash_reports">Automatically send crash reports</string>
   <string name="wizard_option_disable_crash_reports">Disable crash reports</string>
   <string name="wizard_btn_back">Back</string>
@@ -565,6 +574,6 @@ Ingen brukerinformasjon vil bli delt i denne prosessen!
     <item>Last 6 months</item>
     <item>Last 12 months</item>
     <item>All time</item>
-    <item>Custom range&#8230;</item>
+    <item>Custom range</item>
   </string-array>
 </resources>
diff --git a/app/src/main/res/values-it-rIT/strings.xml b/app/src/main/res/values-it-rIT/strings.xml
index d6df017c..93f5e808 100644
--- a/app/src/main/res/values-it-rIT/strings.xml
+++ b/app/src/main/res/values-it-rIT/strings.xml
@@ -25,11 +25,11 @@
   <string name="label_account_name">Nome conto</string>
   <string name="btn_cancel">Annulla</string>
   <string name="btn_save">Salva</string>
-  <string name="label_passcode">Enter Passcode</string>
-  <string name="toast_wrong_passcode">Wrong passcode, please try again</string>
+  <string name="label_passcode">Inserire codice di accesso</string>
+  <string name="toast_wrong_passcode">Codice di accesso errato, ritentare</string>
   <string name="toast_passcode_set">Passcode set</string>
-  <string name="label_confirm_passcode">Please confirm your passcode</string>
-  <string name="toast_invalid_passcode_confirmation">Invalid passcode confirmation. Please try again</string>
+  <string name="label_confirm_passcode">Conferma del codice di accesso</string>
+  <string name="toast_invalid_passcode_confirmation">Conferma del codice di accesso errata. Ritentare</string>
   <string name="label_transaction_name">Descrizione</string>
   <string name="label_transaction_amount">Importo</string>
   <string name="title_add_transaction">Nuova transazione</string>
@@ -51,7 +51,7 @@
   <string name="menu_move">SPOSTA</string>
   <string name="title_selected">%1$d selezionate</string>
   <string name="label_account_balance">Somma totale:</string>
-  <string name="label_export_destination">Export To:</string>
+  <string name="label_export_destination">Esporta in:</string>
   <string name="title_export_dialog">Esporta transazioni</string>
   <string name="option_export_all_transactions">Esporta tutte le transazioni</string>
   <string name="hint_export_choice">Di default, verranno esportate solo le transazioni dall\'ultima esportazione. Selezionare questa opzione per esportare tutte le transazioni</string>
@@ -316,7 +316,7 @@
 	</string>
   <string name="label_dismiss">Chiudi</string>
   <string name="toast_transanction_amount_required">Inserire un importo per salvare la transazione</string>
-  <string name="toast_error_edit_multi_currency_transaction">Multi-currency transactions cannot be modified</string>
+  <string name="toast_error_edit_multi_currency_transaction">Non  possibile modificare le transazioni multi-valuta</string>
   <string name="menu_import_accounts">Importa conti di GnuCash</string>
   <string name="btn_import_accounts">Importa conti</string>
   <string name="toast_error_importing_accounts">Si  verificato un errore nell\'importare i conti di GnuCash</string>
@@ -383,7 +383,7 @@
   <string name="title_all_accounts">Tutti</string>
   <string name="summary_create_default_accounts">Crea la struttura predefinita dei conti comuni di GnuCash</string>
   <string name="title_create_default_accounts">Crea conti predefiniti</string>
-  <string name="msg_confirm_create_default_accounts_setting">All existing accounts and transactions on the device will be deleted.\n\nAre you sure you want to proceed?</string>
+  <string name="msg_confirm_create_default_accounts_setting">Tutti i conti e le transazioni nel dispositivo verranno cancellate.\n\nContinuare?</string>
   <string name="menu_scheduled_transactions">Transazioni pianificate</string>
   <string name="msg_confirm_create_default_accounts_first_run">Benvenuti in GnuCash per Android! \n possibile
         creare una struttura dei conti pi comunemente utilizzati o importare la propria struttura da GnuCash. \n\nEntrambe le
diff --git a/app/src/main/res/values-ja-rJP/strings.xml b/app/src/main/res/values-ja-rJP/strings.xml
index 46251403..f57b1dda 100644
--- a/app/src/main/res/values-ja-rJP/strings.xml
+++ b/app/src/main/res/values-ja-rJP/strings.xml
@@ -16,10 +16,10 @@
  limitations under the License.
 -->
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-  <string name="title_create_account">Create Account</string>
-  <string name="title_edit_account">Edit Account</string>
-  <string name="info_details">Info</string>
-  <string name="menu_export">Export&#8230;</string>
+  <string name="title_create_account"></string>
+  <string name="title_edit_account"></string>
+  <string name="info_details"></string>
+  <string name="menu_export">&#8230;</string>
   <string name="description_add_transaction_icon">Add a new transaction to an account</string>
   <string name="label_no_accounts">No accounts to display</string>
   <string name="label_account_name">Account name</string>
diff --git a/app/src/main/res/values-pt-rBR/strings.xml b/app/src/main/res/values-pt-rBR/strings.xml
index e4462c43..b65554ae 100644
--- a/app/src/main/res/values-pt-rBR/strings.xml
+++ b/app/src/main/res/values-pt-rBR/strings.xml
@@ -554,9 +554,9 @@ Neste processo no sero recolhidas informaes do utilizador!</string>
   <string name="title_translate_gnucash">Traduzir GnuCash</string>
   <string name="summary_google_plus">Compartilhe ideias, discuta alteraes ou reporte problemas</string>
   <string name="summary_translate_gnucash">Traduza ou corrija as tradues no Crowdln</string>
-  <string name="toast_no_compatible_apps_to_receive_export">No compatible apps to receive the exported transactions!</string>
-  <string name="menu_move_transaction">Move...</string>
-  <string name="menu_duplicate_transaction">Duplicate</string>
+  <string name="toast_no_compatible_apps_to_receive_export">No existem apps compatveis para receber as transaes exportadas!</string>
+  <string name="menu_move_transaction">Mover...</string>
+  <string name="menu_duplicate_transaction">Duplicar</string>
   <string-array name="report_time_range">
     <item>Ms atual</item>
     <item>Last 3 meses</item>
diff --git a/app/src/main/res/values-pt-rPT/strings.xml b/app/src/main/res/values-pt-rPT/strings.xml
index 41a4bd96..8a053eaf 100644
--- a/app/src/main/res/values-pt-rPT/strings.xml
+++ b/app/src/main/res/values-pt-rPT/strings.xml
@@ -303,7 +303,7 @@
   <string name="toast_no_account_name_entered">Introduza o nome da conta a criar</string>
   <string name="label_account_currency">Moeda</string>
   <string name="label_parent_account">Conta progenitora</string>
-  <string name="title_xml_ofx_header">-use um cabealho XML OFX</string>
+  <string name="title_xml_ofx_header">Use um cabealho XML OFX</string>
   <string name="summary_xml_ofx_header">Active esta opo quando fizer exportaes para outras aplicaes que no seja o GnuCash para Desktop</string>
   <string name="title_whats_new">O que h de novo</string>
   <string name="whats_new">
@@ -340,10 +340,10 @@
   <string name="title_default_export_format">Formato de Exportao padro</string>
   <string name="summary_default_export_format">Formato de ficheiro usado por defeito quando  feita uma exportao de transaes</string>
   <string name="menu_export_transactions">Exportar transaes</string>
-  <string name="label_recurring_transaction">Recorrente</string>
+  <string name="label_recurring_transaction">Agendadas</string>
   <string name="imbalance_account_name">Desequilbrio</string>
   <string name="title_progress_exporting_transactions">Exportando transaes</string>
-  <string name="label_no_recurring_transactions">No existem transaes recorrentes para mostrar</string>
+  <string name="label_no_recurring_transactions">No existem transaes agendadas para mostrar.</string>
   <string name="toast_recurring_transaction_deleted">Transaes recorrentes apagadas com sucesso</string>
   <string name="label_placeholder_account">Conta no editvel</string>
   <string name="label_default_transfer_account">Conta para transferncias padro</string>
@@ -527,7 +527,7 @@ Neste processo no sero recolhidas informaes do utilizador!</string>
   <string name="title_transfer_funds">Transferncias</string>
   <string name="nav_menu_help"><![CDATA[Ajuda & Feedback]]></string>
   <string name="label_select_pie_slice_to_see_details">Escolha uma seco para ver os detalhes</string>
-  <string name="label_report_period">Perodo:</string>
+  <string name="label_report_period">Perodo:</string>
   <string name="label_convert_from">De:</string>
   <string name="label_convert_to">Para:</string>
   <string name="msg_provide_exchange_rate">Fornea o montante convertido ou a taxa de cmbio para a transferncia</string>
@@ -554,9 +554,9 @@ Neste processo no sero recolhidas informaes do utilizador!</string>
   <string name="title_translate_gnucash">Traduza o GnuCash</string>
   <string name="summary_google_plus">Partilhe ideias, discuta alteraes ou reporte problemas</string>
   <string name="summary_translate_gnucash">Traduza ou reveja em Crowdin</string>
-  <string name="toast_no_compatible_apps_to_receive_export">No compatible apps to receive the exported transactions!</string>
-  <string name="menu_move_transaction">Move...</string>
-  <string name="menu_duplicate_transaction">Duplicate</string>
+  <string name="toast_no_compatible_apps_to_receive_export">No existem aplicaes compatveis para receber as transaes exportadas!</string>
+  <string name="menu_move_transaction">Mover...</string>
+  <string name="menu_duplicate_transaction">Duplicar</string>
   <string-array name="report_time_range">
     <item>Ms actual</item>
     <item>ltimos 3 meses</item>
diff --git a/app/src/main/res/values-zh-rCN/strings.xml b/app/src/main/res/values-zh-rCN/strings.xml
index 61b7b55e..f5010cc0 100644
--- a/app/src/main/res/values-zh-rCN/strings.xml
+++ b/app/src/main/res/values-zh-rCN/strings.xml
@@ -19,7 +19,7 @@
   <string name="title_create_account"></string>
   <string name="title_edit_account"></string>
   <string name="info_details"></string>
-  <string name="menu_export">OFX</string>
+  <string name="menu_export">...</string>
   <string name="description_add_transaction_icon"></string>
   <string name="label_no_accounts"></string>
   <string name="label_account_name"></string>

From 68ed2709e387c8e518cbd9160f3fa720cf409832 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 5 Nov 2015 09:52:02 +0100
Subject: [PATCH 12/13] Fix broken Travis CI build

Generate a fabric.properties for crashlytics if one doesn't exist
---
 app/build.gradle | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/app/build.gradle b/app/build.gradle
index 1cd91f87..11902153 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -127,9 +127,26 @@ android {
     }
 }
 
+/**
+ * Create the Crashlytics properties file when building on CI
+ * @return
+ */
+def initCrashlyticsPropertiesIfNeeded() {
+    def propertiesFile = file('fabric.properties')
+    if (!propertiesFile.exists()) {
+        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
+        ant.propertyfile(file: "fabric.properties", comment: commentMessage) { //the keys added here are invalid, just placeholders to make builds pass
+            entry(key: "apiSecret", value: "bd4e83a9a4c35fbf1fbe8d9ccce9443eebb9d5835605f9d06767850e0f1e5b22")
+            entry(key: "apiKey", value: "46fe045d00d4ad8a71014c53567be3368e10bd64")
+        }
+    }
+}
+
 def adb = android.getAdbExe().toString()
 
 afterEvaluate {
+    initCrashlyticsPropertiesIfNeeded()
+
     task grantAnimationPermissionDevel(type: Exec, dependsOn: 'installDevelopmentDebug') { // or install{productFlavour}{buildType}
         commandLine "$adb", 'devices'
         standardOutput = new ByteArrayOutputStream()

From c593851370e03e00b8a84667cec0ba69266a02b2 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 5 Nov 2015 10:11:11 +0100
Subject: [PATCH 13/13] Update version for v2.0.1 release

Improve time display in transaction list
Update CHANGELOG
---
 CHANGELOG.md                                                      | 8 ++++++++
 app/build.gradle                                                  | 2 +-
 .../gnucash/android/ui/transaction/TransactionsListFragment.java  | 7 +------
 3 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9874ab9f..a5ff4a67 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,13 @@
 Change Log
 ===============================================================================
+Version 2.0.1 *(2015-11-05)*
+----------------------------
+* Feature: Menu options for moving/duplicating transactions
+* Fixed: Invalid QIF exported, causing crashes when importing on desktop
+* Fixed: Account delete dialog not displaying properly / only partially deleting transactions
+* Fixed: Moving transaction to another account from within the split editor sets the amount to zero
+* Improved: Amounts now use standard commodities & fraction digit on all devices
+
 Version 2.0.0 *(2015-11-01)*
 ----------------------------
 * Feature: Updated app design to use Material Design guidelines
diff --git a/app/build.gradle b/app/build.gradle
index 11902153..402207ba 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -6,7 +6,7 @@ apply plugin: 'io.fabric'
 def versionMajor = 2
 def versionMinor = 0
 def versionPatch = 1
-def versionBuild = 2
+def versionBuild = 3
 
 def buildTime() {
     def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 826adec6..e59155ea 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -264,12 +264,7 @@ public void onBindViewHolderCursor(ViewHolder holder, Cursor cursor) {
 			holder.transactionNote.setText(text);
 
 			long dateMillis = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_TIMESTAMP));
-			String dateText;
-			if (dateMillis > System.currentTimeMillis()){
-				dateText = simpleDateFormat.format(new Date(dateMillis));
-			} else {
-				dateText = DateUtils.getRelativeTimeSpanString(dateMillis).toString();
-			}
+			String dateText = DateUtils.getRelativeTimeSpanString(dateMillis, System.currentTimeMillis(), DateUtils.DAY_IN_MILLIS).toString();
 			holder.transactionDate.setText(dateText);
 
 			final long id = holder.transactionId;
