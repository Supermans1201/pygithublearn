From 24b2a77996303e8ae062c7264c82f6a8b494277e Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 17 Feb 2015 14:57:33 +0100
Subject: [PATCH] Database refactoring and code restructuring

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  52 ++++-------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 102 ++++++++-------------
 .../org/gnucash/android/db/DatabaseSchema.java     |   2 +-
 .../android/db/ScheduledEventDbAdapter.java        |  46 +++-------
 .../org/gnucash/android/db/SplitsDbAdapter.java    |  75 ++++-----------
 .../gnucash/android/db/TransactionsDbAdapter.java  |  80 ++++------------
 .../java/org/gnucash/android/export/Exporter.java  |   6 +-
 .../gnucash/android/importer/GncXmlHandler.java    |   4 +-
 .../org/gnucash/android/model/Transaction.java     |   4 +-
 .../gnucash/android/receivers/AccountCreator.java  |   2 +-
 .../android/receivers/TransactionRecorder.java     |   2 +-
 .../gnucash/android/service/SchedulerService.java  |   2 +-
 .../android/ui/account/AccountFormFragment.java    |   6 +-
 .../android/ui/account/AccountsActivity.java       |   2 +-
 .../android/ui/account/AccountsListFragment.java   |   8 +-
 .../DeleteAllAccountsConfirmationDialog.java       |   2 +-
 .../DeleteAllTransacationsConfirmationDialog.java  |   4 +-
 .../android/ui/settings/SettingsActivity.java      |   6 +-
 .../ScheduledTransactionsListFragment.java         |   4 +-
 .../ui/transaction/TransactionFormFragment.java    |   8 +-
 .../ui/transaction/TransactionsActivity.java       |   6 +-
 .../ui/transaction/TransactionsListFragment.java   |   4 +-
 .../transaction/dialog/BulkMoveDialogFragment.java |   6 +-
 .../dialog/SplitEditorDialogFragment.java          |   4 +-
 ...ansactionsDeleteConfirmationDialogFragment.java |   4 +-
 .../android/ui/util/AccountBalanceTask.java        |   2 +-
 .../ui/widget/WidgetConfigurationActivity.java     |   4 +-
 27 files changed, 148 insertions(+), 299 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index fe908aa9..87d77d50 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -56,11 +56,19 @@
      * @param db SQliteDatabase instance
      */
     public AccountsDbAdapter(SQLiteDatabase db, TransactionsDbAdapter transactionsDbAdapter) {
-        super(db);
+        super(db, AccountEntry.TABLE_NAME);
         mTransactionsAdapter = transactionsDbAdapter;
     }
 
     /**
+     * Returns an application-wide instance of this database adapter
+     * @return Instance of Accounts db adapter
+     */
+    public static AccountsDbAdapter getInstance(){
+        return GnuCashApplication.getAccountsDbAdapter();
+    }
+
+    /**
 	 * Adds an account to the database. 
 	 * If an account already exists in the database with the same unique ID, 
 	 * then just update that account. 
@@ -303,7 +311,7 @@ public boolean destructiveDeleteAccount(long rowId){
                             + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
                             + " FROM trans_split_acct )",
                     null);
-            deleteRecord(AccountEntry.TABLE_NAME, rowId);
+            deleteRecord(rowId);
             mDb.setTransactionSuccessful();
             return true;
         }
@@ -472,7 +480,7 @@ public String getParentAccountUID(long id){
 	 */
     public Account getAccount(long rowId){
 		Log.v(TAG, "Fetching account with id " + rowId);
-		Cursor c =	fetchRecord(AccountEntry.TABLE_NAME, rowId);
+		Cursor c =	fetchRecord(rowId);
 		try {
             if (c.moveToFirst()) {
                 return buildAccountInstance(c);
@@ -531,7 +539,7 @@ public AccountType getAccountType(long accountId){
 	 * @return Name of the account 
 	 */
     public String getName(long accountID) {
-		Cursor c = fetchRecord(AccountEntry.TABLE_NAME, accountID);
+		Cursor c = fetchRecord(accountID);
         try {
             if (c.moveToFirst()) {
                 return c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME));
@@ -752,23 +760,6 @@ public Cursor fetchAllRecordsOrderedByFullName(){
                 AccountEntry.COLUMN_FULL_NAME + " ASC");
     }
 
-    @Override
-    public Cursor fetchRecord(long rowId) {
-        return fetchRecord(AccountEntry.TABLE_NAME, rowId);
-    }
-
-    /**
-     * Deletes an account and its transactions from the database.
-     * This is equivalent to calling {@link #destructiveDeleteAccount(long)}
-     * @param rowId ID of record to be deleted
-     * @return <code>true</code> if successful, <code>false</code> otherwise
-     */
-    @Override
-    public boolean deleteRecord(long rowId) {
-        return destructiveDeleteAccount(rowId);
-        //return deleteRecord(DatabaseHelper.TABLE_NAME, rowId);
-    }
-
     /**
 	 * Returns a Cursor set of accounts which fulfill <code>where</code>
 	 * @param where SQL WHERE statement without the 'WHERE' itself
@@ -791,7 +782,11 @@ public Cursor fetchAccounts(String where, String[] whereArgs) {
      * @return Cursor set of accounts which fulfill <code>where</code>
      */
     public Cursor fetchAccounts(String where, String[] whereArgs, String orderBy){
+        if (orderBy == null){
+            orderBy = AccountEntry.COLUMN_NAME + " ASC";
+        }
         Log.v(TAG, "Fetching all accounts from db where " + where + " order by " + orderBy);
+
         return mDb.query(AccountEntry.TABLE_NAME,
                 null, where, whereArgs, null, null,
                 orderBy);
@@ -1040,21 +1035,6 @@ public int getTotalAccountCount() {
         }
     }
 
-	/**
-	 * Return the record ID for the account with UID <code>accountUID</code>
-	 * @param accountUID String Unique ID of the account
-	 * @return Record ID belonging to account UID
-	 */
-    @Override
-	public long getID(String accountUID){
-		return getID(AccountEntry.TABLE_NAME, accountUID);
-	}
-
-    @Override
-    public String getUID(long id) {
-        return getUID(AccountEntry.TABLE_NAME, id);
-    }
-
     /**
 	 * Returns currency code of account with database ID <code>id</code>
 	 * @param uid GUID of the account
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 2310418c..89664bad 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -42,11 +42,14 @@
 	 */
     protected final SQLiteDatabase mDb;
 
+    protected final String mTableName;
+
     /**
      * Opens the database adapter with an existing database
      * @param db SQLiteDatabase object
      */
-    public DatabaseAdapter(SQLiteDatabase db) {
+    public DatabaseAdapter(SQLiteDatabase db, String tableName) {
+        this.mTableName = tableName;
         this.mDb = db;
         if (!db.isOpen() || db.isReadOnly())
             throw new IllegalArgumentException("Database not open or is read-only. Require writeable database");
@@ -158,66 +161,64 @@ public boolean isOpen(){
     }
 
 	/**
-	 * Retrieves record with id <code>rowId</code> from table <code>tableName</code>
-	 * @param tableName Name of table where record is found
+	 * Retrieves record with id <code>rowId</code> from database table
 	 * @param rowId ID of record to be retrieved
 	 * @return {@link Cursor} to record retrieved
 	 */
-	protected Cursor fetchRecord(String tableName, long rowId){
-		return mDb.query(tableName, null, DatabaseSchema.CommonColumns._ID + "=" + rowId,
+	public Cursor fetchRecord(long rowId){
+		return mDb.query(mTableName, null, DatabaseSchema.CommonColumns._ID + "=" + rowId,
 				null, null, null, null);
 	}
 	
 	/**
-	 * Retrieves all records from database table <code>tableName</code>
-	 * @param tableName Name of table in database
+	 * Retrieves all records from database table
 	 * @return {@link Cursor} to all records in table <code>tableName</code>
 	 */
-	protected Cursor fetchAllRecords(String tableName){
-		return mDb.query(tableName, 
+	public Cursor fetchAllRecords(){
+		return mDb.query(mTableName,
         		null, null, null, null, null, null);
 	}
 
 	/**
-	 * Deletes record with ID <code>rowID</code> from database table <code>tableName</code>
-     * This does not delete the transactions and splits associated with the account
-	 * @param tableName Name of table in database
+	 * Deletes record with ID <code>rowID</code> from database table.
 	 * @param rowId ID of record to be deleted
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
 	 */
-	protected boolean deleteRecord(String tableName, long rowId){
-		return mDb.delete(tableName, DatabaseSchema.CommonColumns._ID + "=" + rowId, null) > 0;
+	public boolean deleteRecord(long rowId){
+		return mDb.delete(mTableName, DatabaseSchema.CommonColumns._ID + "=" + rowId, null) > 0;
 	}
 
     /**
      * Deletes all records in the database
      * @return Number of deleted records
      */
-    protected int deleteAllRecords(String tableName){
-        return mDb.delete(tableName, null, null);
+    public int deleteAllRecords(){
+        return mDb.delete(mTableName, null, null);
     }
 
     /**
      * Returns the string unique ID (GUID) of a record in the database
-     * @param tableName Name of table where record is found
      * @param uid GUID of the record
      * @return Long record ID
      */
-    protected long getID(String tableName, String uid){
+    public long getID(String uid){
         if (uid == null)
             return 0;
 
-        Cursor cursor = mDb.query(tableName,
+        Cursor cursor = mDb.query(mTableName,
                 new String[] {DatabaseSchema.CommonColumns._ID},
                 DatabaseSchema.CommonColumns.COLUMN_UID + " = ?",
                 new String[]{uid},
                 null, null, null);
         long result = -1;
-        if (cursor != null){
+        try{
             if (cursor.moveToFirst()) {
                 Log.d(TAG, "Transaction already exists. Returning existing id");
                 result = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.CommonColumns._ID));
+            } else {
+                throw new IllegalArgumentException("Account UID " + uid + " does not exist in the db");
             }
+        } finally {
             cursor.close();
         }
         return result;
@@ -225,53 +226,29 @@ protected long getID(String tableName, String uid){
 
     /**
      * Returns the string unique ID (GUID) of a record in the database
-     * @param tableName Name of table where record is found
      * @param id long database record ID
      * @return GUID of the record
      */
-    protected String getUID(String tableName, long id){
-        Cursor cursor = mDb.query(tableName,
+    public String getUID(long id){
+        Cursor cursor = mDb.query(mTableName,
                 new String[]{DatabaseSchema.CommonColumns.COLUMN_UID},
                 DatabaseSchema.CommonColumns._ID + " = " + id,
                 null, null, null, null);
 
         String uid = null;
-        if (cursor != null){
+        try {
             if (cursor.moveToFirst()) {
                 uid = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.CommonColumns.COLUMN_UID));
+            } else {
+                throw new IllegalArgumentException("Account record ID " + id + " does not exist in the db");
             }
+        } finally {
             cursor.close();
         }
         return uid;
     }
 
     /**
-     * Retrieves record with id <code>rowId</code> from table
-     * @param rowId ID of record to be retrieved
-     * @return {@link Cursor} to record retrieved
-     */
-    public abstract Cursor fetchRecord(long rowId);
-
-    /**
-     * Retrieves all records from database table corresponding to this adapter
-     * @return {@link Cursor} to all records in table
-     */
-    public abstract Cursor fetchAllRecords();
-
-    /**
-     * Deletes record with ID <code>rowID</code> from database table
-     * @param rowId ID of record to be deleted
-     * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
-     */
-    public abstract boolean deleteRecord(long rowId);
-
-    /**
-     * Deletes all records in the database table
-     * @return Count of database records which have been deleted
-     */
-    public abstract int deleteAllRecords();
-
-    /**
      * Returns the currency code (according to the ISO 4217 standard) of the account
      * with unique Identifier <code>accountUID</code>
      * @param accountUID Unique Identifier of the account
@@ -319,20 +296,6 @@ public AccountType getAccountType(String accountUID){
     }
 
     /**
-     * Returns the database record ID of the entry
-     * @param uid GUID of the record
-     * @return Long database identifier of the record
-     */
-    public abstract long getID(String uid);
-
-    /**
-     * Returns the global unique identifier of the record
-     * @param id Database record ID of the entry
-     * @return String GUID of the record
-     */
-    public abstract String getUID(long id);
-
-    /**
      * Updates a record in the table
      * @param recordId Database ID of the record to be updated
      * @param columnKey Name of column to be updated
@@ -349,4 +312,15 @@ public int updateRecord(String tableName, long recordId, String columnKey, Strin
         return mDb.update(tableName, contentValues,
                 DatabaseSchema.CommonColumns._ID + "=" + recordId, null);
     }
+
+    /**
+     * Deletes a record from the database given its unique identifier.
+     * <p>Overload of the method {@link #deleteRecord(long)}</p>
+     * @param uid GUID of the record
+     * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
+     * @see #deleteRecord(long)
+     */
+    public boolean deleteRecord(String uid){
+        return deleteRecord(getID(uid));
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 572c535b..1cacf9ab 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -19,7 +19,7 @@
 import android.provider.BaseColumns;
 
 /**
- * Holds the
+ * Holds the database schema
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
index 605f6664..07702dc0 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
@@ -16,10 +16,11 @@
 package org.gnucash.android.db;
 
 import android.content.ContentValues;
-import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
+
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema.ScheduledEventEntry;
 import org.gnucash.android.model.ScheduledEvent;
 
@@ -34,7 +35,15 @@
 public class ScheduledEventDbAdapter extends DatabaseAdapter {
 
     public ScheduledEventDbAdapter(SQLiteDatabase db){
-        super(db);
+        super(db, ScheduledEventEntry.TABLE_NAME);
+    }
+
+    /**
+     * Returns application-wide instance of database adapter
+     * @return ScheduledEventDbAdapter instance
+     */
+    public static ScheduledEventDbAdapter getInstance(){
+        return GnuCashApplication.getScheduledEventDbAdapter();
     }
 
     /**
@@ -136,37 +145,4 @@ public ScheduledEvent getScheduledEventWithUID(String eventUID){
         return scheduledEvents;
     }
 
-    @Override
-    public Cursor fetchRecord(long rowId) {
-        return fetchRecord(ScheduledEventEntry.TABLE_NAME, rowId);
-    }
-
-    @Override
-    public Cursor fetchAllRecords() {
-        return fetchAllRecords(ScheduledEventEntry.TABLE_NAME);
-    }
-
-    @Override
-    public boolean deleteRecord(long rowId) {
-        return deleteRecord(ScheduledEventEntry.TABLE_NAME, rowId);
-    }
-
-    public boolean deleteRecord(String uid){
-        return deleteRecord(getID(uid));
-    }
-
-    @Override
-    public int deleteAllRecords() {
-        return deleteAllRecords(ScheduledEventEntry.TABLE_NAME);
-    }
-
-    @Override
-    public long getID(String uid) {
-        return getID(ScheduledEventEntry.TABLE_NAME, uid);
-    }
-
-    @Override
-    public String getUID(long id) {
-        return getUID(ScheduledEventEntry.TABLE_NAME, id);
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index cb2a8403..51998ef7 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -24,9 +24,12 @@
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
+
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
 
 import java.math.BigDecimal;
@@ -48,7 +51,15 @@
     protected static final String TAG = "SplitsDbAdapter";
 
     public SplitsDbAdapter(SQLiteDatabase db) {
-        super(db);
+        super(db, SplitEntry.TABLE_NAME);
+    }
+
+    /**
+     * Returns application-wide instance of the database adapter
+     * @return SplitsDbAdapter instance
+     */
+    public static SplitsDbAdapter getInstance(){
+        return GnuCashApplication.getSplitsDbAdapter();
     }
 
     /**
@@ -319,26 +330,6 @@ public Cursor fetchSplits(String where, String[] whereArgs, String sortOrder){
     }
 
     /**
-     * Returns the database record ID of the split with unique IDentifier <code>uid</code>
-     * @param uid Unique Identifier String of the split transaction
-     * @return Database record ID of split
-     */
-    @Override
-    public long getID(String uid){
-        return getID(SplitEntry.TABLE_NAME, uid);
-    }
-
-    /**
-     * Returns the unique identifier string of the split
-     * @param id Database record ID of the split
-     * @return String unique identifier of the split
-     */
-    @Override
-    public String getUID(long id){
-        return getUID(SplitEntry.TABLE_NAME, id);
-    }
-
-    /**
      * Returns a Cursor to a dataset of splits belonging to a specific transaction
      * @param transactionUID Unique idendtifier of the transaction
      * @return Cursor to splits
@@ -391,7 +382,7 @@ public Cursor fetchSplitsForTransactionAndAccount(String transactionUID, String
                 + "and account ID " + accountUID);
         return mDb.query(SplitEntry.TABLE_NAME,
                 null, SplitEntry.COLUMN_TRANSACTION_UID + " = ? AND "
-                + SplitEntry.COLUMN_ACCOUNT_UID + " = ?",
+                        + SplitEntry.COLUMN_ACCOUNT_UID + " = ?",
                 new String[]{transactionUID, accountUID},
                 null, null, SplitEntry.COLUMN_AMOUNT + " ASC");
     }
@@ -419,20 +410,10 @@ public String getTransactionUID(long transactionId){
     }
 
     @Override
-    public Cursor fetchRecord(long rowId) {
-        return fetchRecord(SplitEntry.TABLE_NAME, rowId);
-    }
-
-    @Override
-    public Cursor fetchAllRecords() {
-        return fetchAllRecords(SplitEntry.TABLE_NAME);
-    }
-
-    @Override
     public boolean deleteRecord(long rowId) {
         Split split = getSplit(rowId);
         String transactionUID = split.getTransactionUID();
-        boolean result = deleteRecord(SplitEntry.TABLE_NAME, rowId);
+        boolean result = mDb.delete(SplitEntry.TABLE_NAME, SplitEntry._ID + "=" + rowId, null) > 0;
 
         if (!result) //we didn't delete for whatever reason, invalid rowId etc
             return false;
@@ -481,6 +462,7 @@ public long getTransactionID(String transactionUID) {
         }
     }
 
+    //TODO: After adding ON DELETE CASCADE to db, remove this method
     /**
      * Deletes all splits for a particular transaction and the transaction itself
      * @param transactionId Database record ID of the transaction
@@ -490,10 +472,9 @@ public boolean deleteSplitsForTransaction(long transactionId) {
         String trxUID = getTransactionUID(transactionId);
         mDb.beginTransaction();
         try {
-            mDb.delete(SplitEntry.TABLE_NAME,
+            boolean result = mDb.delete(SplitEntry.TABLE_NAME,
                     SplitEntry.COLUMN_TRANSACTION_UID + "=?",
-                    new String[]{trxUID});
-            boolean result = deleteTransaction(transactionId);
+                    new String[]{trxUID}) > 0;
             mDb.setTransactionSuccessful();
             return result;
         } finally {
@@ -502,30 +483,10 @@ public boolean deleteSplitsForTransaction(long transactionId) {
     }
 
     /**
-     * Deletes splits for a specific transaction and account and the transaction itself
-     * @param transactionUID String unique ID of transaction
-     * @param accountUID String unique ID of account
-     * @return Number of records deleted
-     */
-    public int deleteSplitsForTransactionAndAccount(String transactionUID, String accountUID){
-        int deletedCount = mDb.delete(SplitEntry.TABLE_NAME,
-                SplitEntry.COLUMN_TRANSACTION_UID + "= ? AND " + SplitEntry.COLUMN_ACCOUNT_UID + "= ?",
-                new String[]{transactionUID, accountUID});
-        deleteTransaction(getID(transactionUID));
-        return deletedCount;
-    }
-
-    /**
      * Deletes the transaction from the the database
      * @param transactionId Database record ID of the transaction
      */
     private boolean deleteTransaction(long transactionId) {
-        return deleteRecord(TransactionEntry.TABLE_NAME, transactionId);
+        return TransactionsDbAdapter.getInstance().deleteRecord(transactionId);
     }
-
-    @Override
-    public int deleteAllRecords() {
-        return deleteAllRecords(SplitEntry.TABLE_NAME);
-    }
-
 }
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 10ac4c72..20c4cd03 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -52,10 +52,18 @@
      * @param db SQlite db instance
      */
     public TransactionsDbAdapter(SQLiteDatabase db, SplitsDbAdapter splitsDbAdapter) {
-        super(db);
+        super(db, TransactionEntry.TABLE_NAME);
         mSplitsDbAdapter = splitsDbAdapter;
     }
 
+    /**
+     * Returns an application-wide instance of the database adapter
+     * @return Transaction database adapter
+     */
+    public static TransactionsDbAdapter getInstance(){
+        return GnuCashApplication.getTransactionDbAdapter();
+    }
+
     public SplitsDbAdapter getSplitDbAdapter() {
         return mSplitsDbAdapter;
     }
@@ -204,7 +212,7 @@ public long fetchTransactionWithUID(String uid){
 	 */
     public Transaction getTransaction(long rowId) {
         Log.v(TAG, "Fetching transaction with id " + rowId);
-        Cursor c = fetchRecord(TransactionEntry.TABLE_NAME, rowId);
+        Cursor c = fetchRecord(rowId);
         try {
             if (c.moveToFirst()) {
                 return buildTransactionInstance(c);
@@ -268,7 +276,8 @@ public Cursor fetchAllRecurringTransactions(){
 	 * @return Cursor holding set of transactions for particular account
 	 */
 	public Cursor fetchAllTransactionsForAccount(long accountID){
-		return fetchAllTransactionsForAccount(getUID(AccountEntry.TABLE_NAME, accountID));
+        String accountUID = AccountsDbAdapter.getInstance().getUID(accountID);
+		return fetchAllTransactionsForAccount(accountUID);
 	}
 	
 	/**
@@ -396,13 +405,13 @@ public Transaction buildTransactionInstance(Cursor c){
 
 	/**
 	 * Returns the currency code (ISO 4217) used by the account with id <code>accountId</code>
-	 * If you do not have the database record Id, you can call {@link #getID(String, String)}  instead.
+	 * If you do not have the database record Id, you can call {@link #getID(String)}  instead.
 	 * @param accountId Database record id of the account 
 	 * @return Currency code of the account with Id <code>accountId</code>
 	 * @see #getAccountCurrencyCode(String)
 	 */
 	public String getAccountCurrencyCode(long accountId){
-		String accountUID = getUID(AccountEntry.TABLE_NAME, accountId);
+		String accountUID = AccountsDbAdapter.getInstance().getUID(accountId);
 		return getAccountCurrencyCode(accountUID);
 	}
 
@@ -420,16 +429,6 @@ public Money getBalance(String transactionUID, String accountUID){
         return Transaction.computeBalance(accountUID, splitList);
     }
 
-    /**
-     * Returns the string unique identifier of the transaction
-     * @param transactionId Database record ID of transaction
-     * @return String unique identifier of the transaction
-     */
-    @Override
-    public String getUID(long transactionId){
-        return getUID(TransactionEntry.TABLE_NAME, transactionId);
-    }
-
 	/**
 	 * Deletes transaction record with id <code>rowId</code> and all it's splits
 	 * @param rowId Long database record id
@@ -439,25 +438,8 @@ public String getUID(long transactionId){
 	public boolean deleteRecord(long rowId){
 		Log.d(TAG, "Delete transaction with record Id: " + rowId);
         //the splits db adapter handles deletion of the transaction
-		return mSplitsDbAdapter.deleteSplitsForTransaction(rowId);
-	}
-	
-	/**
-	 * Deletes transaction record with unique ID <code>uid</code> and all its splits
-	 * @param uid String unique ID of transaction
-	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
-	 */
-	public boolean deleteTransaction(String uid){
-        return deleteRecord(getID(uid));
-	}
-	
-	/**
-	 * Deletes all transactions in the database
-	 * @return Number of affected transaction records
-	 */
-    @Override
-	public int deleteAllRecords(){
-		return deleteAllRecords(TransactionEntry.TABLE_NAME);
+		mSplitsDbAdapter.deleteSplitsForTransaction(rowId);
+        return mDb.delete(TransactionEntry.TABLE_NAME, TransactionEntry._ID + "=" + rowId, null) > 0;
 	}
 
     /**
@@ -520,26 +502,6 @@ public long getAllTransactionsCount() {
         SQLiteStatement statement = mDb.compileStatement(sql);
         return statement.simpleQueryForLong();
     }
-	
-    /**
-     * Returns the database record ID for the specified transaction UID
-     * @param transactionUID Unique idendtifier of the transaction
-     * @return Database record ID for the transaction
-     */
-    @Override
-    public long getID(String transactionUID){
-        return getID(TransactionEntry.TABLE_NAME, transactionUID);
-    }
-
-    @Override
-    public Cursor fetchAllRecords() {
-        return fetchAllRecords(TransactionEntry.TABLE_NAME);
-    }
-
-    @Override
-    public Cursor fetchRecord(long rowId) {
-        return fetchRecord(TransactionEntry.TABLE_NAME, rowId);
-    }
 
     /**
      * Returns a cursor to transactions whose name (UI: description) start with the <code>prefix</code>
@@ -557,15 +519,11 @@ public Cursor fetchTransactionsStartingWith(String prefix){
 
     /**
      * Updates a specific entry of an transaction
-     * @param transactionUID Unique ID of the transaction
-     * @param columnKey Name of column to be updated
-     * @param newValue  New value to be assigned to the columnKey
+     * @param contentValues Values with which to update the record
+     * @param whereClause Conditions for updating formatted as SQL where statement
+     * @param whereArgs Arguments for the SQL wehere statement
      * @return Number of records affected
      */
-    public int updateTransaction(String transactionUID, String columnKey, String newValue){
-        return updateRecord(TransactionEntry.TABLE_NAME, getID(transactionUID), columnKey, newValue);
-    }
-
     public int updateTransaction(ContentValues contentValues, String whereClause, String[] whereArgs){
         return mDb.update(TransactionEntry.TABLE_NAME, contentValues, whereClause, whereArgs);
     }
diff --git a/app/src/main/java/org/gnucash/android/export/Exporter.java b/app/src/main/java/org/gnucash/android/export/Exporter.java
index befad4fb..f554b76a 100644
--- a/app/src/main/java/org/gnucash/android/export/Exporter.java
+++ b/app/src/main/java/org/gnucash/android/export/Exporter.java
@@ -68,9 +68,9 @@ public Exporter(ExportParams params, SQLiteDatabase db) {
         this.mParameters = params;
         mContext = GnuCashApplication.getAppContext();
         if (db == null) {
-            mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
-            mTransactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
-            mSplitsDbAdapter = GnuCashApplication.getSplitsDbAdapter();
+            mAccountsDbAdapter = AccountsDbAdapter.getInstance();
+            mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
+            mSplitsDbAdapter = SplitsDbAdapter.getInstance();
         } else {
             mSplitsDbAdapter = new SplitsDbAdapter(db);
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, mSplitsDbAdapter);
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index fa989c6d..3aeb5e49 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -127,8 +127,8 @@ public GncXmlHandler(boolean bulk, SQLiteDatabase db) {
 
     private void init(boolean bulk, SQLiteDatabase db) {
         if (db == null) {
-            mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
-            mTransactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+            mAccountsDbAdapter = AccountsDbAdapter.getInstance();
+            mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
         } else {
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index 5fdd30dc..5deb2fc6 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -246,7 +246,7 @@ public Money getImbalance(){
      * @return Money list of splits
      */
     public static Money computeBalance(String accountUID, List<Split> splitList) {
-        AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
         AccountType accountType = accountsDbAdapter.getAccountType(accountUID);
         String currencyCode = accountsDbAdapter.getAccountCurrencyCode(accountUID);
 
@@ -501,7 +501,7 @@ public Element toOFX(Document doc, String accountUID){
             acctId.appendChild(doc.createTextNode(transferAccountUID));
 
             Element accttype = doc.createElement(OfxHelper.TAG_ACCOUNT_TYPE);
-            AccountsDbAdapter acctDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+            AccountsDbAdapter acctDbAdapter = AccountsDbAdapter.getInstance();
             OfxAccountType ofxAccountType = Account.convertToOfxAccountType(acctDbAdapter.getAccountType(transferAccountUID));
             accttype.appendChild(doc.createTextNode(ofxAccountType.toString()));
 
diff --git a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
index 1d2171e1..ba4b3039 100644
--- a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
+++ b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
@@ -58,7 +58,7 @@ public void onReceive(Context context, Intent intent) {
 		if (uid != null)
 			account.setUID(uid);
 		
-		GnuCashApplication.getAccountsDbAdapter().addAccount(account);
+		AccountsDbAdapter.getInstance().addAccount(account);
 	}
 
 }
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
index 9bc90267..dd188b14 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
@@ -93,7 +93,7 @@ public void onReceive(Context context, Intent intent) {
             }
         }
 
-		GnuCashApplication.getTransactionDbAdapter().addTransaction(transaction);
+		TransactionsDbAdapter.getInstance().addTransaction(transaction);
 		
 		WidgetConfigurationActivity.updateAllWidgets(context);
 	}
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 0cd507a7..35edb233 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -78,7 +78,7 @@ private void executeScheduledEvent(ScheduledEvent scheduledEvent){
         switch (scheduledEvent.getEventType()){
             case TRANSACTION:
                 String eventUID = scheduledEvent.getEventUID();
-                TransactionsDbAdapter transactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+                TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
                 Transaction trxnTemplate = transactionsDbAdapter.getTransaction(eventUID);
                 Transaction recurringTrxn = new Transaction(trxnTemplate, true);
                 recurringTrxn.setTime(System.currentTimeMillis());
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index afd5d119..4746ebf7 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -209,7 +209,7 @@ public AccountFormFragment() {
 	 */
 	static public AccountFormFragment newInstance() {
         AccountFormFragment f = new AccountFormFragment();
-        f.mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        f.mAccountsDbAdapter = AccountsDbAdapter.getInstance();
         return f;
     }
 	
@@ -217,7 +217,7 @@ static public AccountFormFragment newInstance() {
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setHasOptionsMenu(true);
-        mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 
         SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
         mUseDoubleEntry = sharedPrefs.getBoolean(getString(R.string.key_use_double_entry), true);
@@ -774,7 +774,7 @@ private void saveAccount() {
         }
         accountsToUpdate.add(mAccount);
 		if (mAccountsDbAdapter == null)
-			mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+			mAccountsDbAdapter = AccountsDbAdapter.getInstance();
         // bulk update, will not update transactions
 		mAccountsDbAdapter.bulkAddAccounts(accountsToUpdate);
 
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 0ad52b3d..b76540d4 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -523,7 +523,7 @@ public static void createDefaultAccounts(final String currencyCode, final Activi
             delegate = new TaskDelegate() {
                 @Override
                 public void onTaskComplete() {
-                    GnuCashApplication.getAccountsDbAdapter().updateAllAccounts(DatabaseSchema.AccountEntry.COLUMN_CURRENCY, currencyCode);
+                    AccountsDbAdapter.getInstance().updateAllAccounts(DatabaseSchema.AccountEntry.COLUMN_CURRENCY, currencyCode);
                 }
             };
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
index a5df9e67..2f93a0cc 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -208,7 +208,7 @@ public void onCreate(Bundle savedInstanceState) {
         if (args != null)
             mParentAccountUID = args.getString(UxArgument.PARENT_ACCOUNT_UID);
 
-        mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();
         mAccountsCursorAdapter = new AccountsCursorAdapter(
                 getActivity().getApplicationContext(),
                 R.layout.list_item_account, null,
@@ -529,7 +529,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                             new DialogInterface.OnClickListener() {
                                 public void onClick(DialogInterface dialog, int whichButton) {
                                     Context context = getDialog().getContext();
-                                    AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+                                    AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
                                     if (uid == null) {
                                         accountsDbAdapter.deleteAllRecords();
                                         Toast.makeText(context, R.string.toast_all_accounts_deleted, Toast.LENGTH_SHORT).show();
@@ -593,7 +593,7 @@ public AccountsCursorLoader(Context context, String filter){
 
         @Override
         public Cursor loadInBackground() {
-            mDatabaseAdapter = GnuCashApplication.getAccountsDbAdapter();
+            mDatabaseAdapter = AccountsDbAdapter.getInstance();
             Cursor cursor;
 
             if (mFilter != null){
@@ -637,7 +637,7 @@ public Cursor loadInBackground() {
         public AccountsCursorAdapter(Context context, int layout, Cursor c,
                                      String[] from, int[] to) {
             super(context, layout, c, from, to, 0);
-            transactionsDBAdapter = GnuCashApplication.getTransactionDbAdapter();
+            transactionsDBAdapter = TransactionsDbAdapter.getInstance();
         }
 
         @Override
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
index 9784d46d..91e66491 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
@@ -54,7 +54,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                             public void onClick(DialogInterface dialog, int whichButton) {
                                 Context context = getDialog().getContext();
                                 GncXmlExporter.createBackup();
-                                GnuCashApplication.getAccountsDbAdapter().deleteAllRecords();
+                                AccountsDbAdapter.getInstance().deleteAllRecords();
                                 Toast.makeText(context, R.string.toast_all_accounts_deleted, Toast.LENGTH_SHORT).show();
                                 WidgetConfigurationActivity.updateAllWidgets(context);
                             }
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index 29987919..b99892e6 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -60,13 +60,13 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                 GncXmlExporter.createBackup();
 
                                 Context context = getActivity();
-                                AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+                                AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
                                 List<Transaction> openingBalances = new ArrayList<Transaction>();
                                 boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
                                 if (preserveOpeningBalances) {
                                     openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
                                 }
-                                TransactionsDbAdapter transactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+                                TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
                                 transactionsDbAdapter.deleteAllRecords();
 
                                 if (preserveOpeningBalances) {
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
index 0a01b031..05c77dab 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -246,7 +246,7 @@ public boolean onPreferenceClick(Preference preference) {
                 Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
             } else {
                 GncXmlExporter.createBackup(); //create backup before deleting everything
-                AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+                AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
                 accountsDbAdapter.deleteAllRecords();
                 Toast.makeText(this, R.string.toast_all_accounts_deleted, Toast.LENGTH_LONG).show();
             }
@@ -264,10 +264,10 @@ public boolean onPreferenceClick(Preference preference) {
                 List<Transaction> openingBalances = new ArrayList<Transaction>();
                 boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
                 if (preserveOpeningBalances) {
-                    AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+                    AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
                     openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
                 }
-                TransactionsDbAdapter transactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+                TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
                 transactionsDbAdapter.deleteAllRecords();
 
                 if (preserveOpeningBalances) {
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index 97db78be..655234b0 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -129,7 +129,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        mTransactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+        mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
         mCursorAdapter = new TransactionsCursorAdapter(
                 getActivity().getApplicationContext(),
                 R.layout.list_item_scheduled_trxn, null,
@@ -416,7 +416,7 @@ public ScheduledTransactionsCursorLoader(Context context) {
 
         @Override
         public Cursor loadInBackground() {
-            mDatabaseAdapter = GnuCashApplication.getTransactionDbAdapter();
+            mDatabaseAdapter = TransactionsDbAdapter.getInstance();
 
             Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllRecurringTransactions();
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index d198a96c..8323d423 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -229,11 +229,11 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		}
 
         mAccountUID = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
-		mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+		mAccountsDbAdapter = AccountsDbAdapter.getInstance();
         mAccountType = mAccountsDbAdapter.getAccountType(mAccountUID);
 
         String transactionUID = getArguments().getString(UxArgument.SELECTED_TRANSACTION_UID);
-		mTransactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+		mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
 		if (transactionUID != null)
             mTransaction = mTransactionsDbAdapter.getTransaction(transactionUID);
         if (mTransaction != null) {
@@ -584,7 +584,7 @@ public void onAccountChanged(String newAccountUID) {
             Toast.makeText(getActivity(), R.string.toast_error_edit_multi_currency_transaction, Toast.LENGTH_LONG).show();
             return;
         }
-        AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
         String currencyCode = accountsDbAdapter.getCurrencyCode(newAccountUID);
         Currency currency = Currency.getInstance(currencyCode);
         mCurrencyTextView.setText(currency.getSymbol(Locale.getDefault()));
@@ -632,7 +632,7 @@ private void saveNewTransaction() {
 		if (mTransaction != null){
             if (!mUseDoubleEntry){
                 //first remove old splits for this transaction, since there is only one split
-                SplitsDbAdapter splitsDbAdapter = GnuCashApplication.getSplitsDbAdapter();
+                SplitsDbAdapter splitsDbAdapter = SplitsDbAdapter.getInstance();
                 for (Split split : mTransaction.getSplits()) {
                     splitsDbAdapter.deleteSplit(split.getUID());
                 }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 6d34034d..4efc6be3 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -279,7 +279,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
 		mAccountUID = getIntent().getStringExtra(UxArgument.SELECTED_ACCOUNT_UID);
 
-        mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 
         setupActionBarNavigation();
 
@@ -407,7 +407,7 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         if (favoriteAccountMenuItem == null) //when the activity is used to edit a transaction
             return super.onPrepareOptionsMenu(menu);
 
-        boolean isFavoriteAccount = GnuCashApplication.getAccountsDbAdapter().isFavoriteAccount(mAccountUID);
+        boolean isFavoriteAccount = AccountsDbAdapter.getInstance().isFavoriteAccount(mAccountUID);
 
         int favoriteIcon = isFavoriteAccount ? android.R.drawable.btn_star_big_on : android.R.drawable.btn_star_big_off;
         favoriteAccountMenuItem.setIcon(favoriteIcon);
@@ -422,7 +422,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return super.onOptionsItemSelected(item);
 
             case R.id.menu_favorite_account:
-                AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+                AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
                 long accountId = accountsDbAdapter.getID(mAccountUID);
                 boolean isFavorite = accountsDbAdapter.isFavoriteAccount(mAccountUID);
                 //toggle favorite preference
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 06a9902c..c98029e3 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -135,7 +135,7 @@ public void onCreate(Bundle savedInstanceState) {
 		Bundle args = getArguments();
 		mAccountUID = args.getString(UxArgument.SELECTED_ACCOUNT_UID);
 
-		mTransactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+		mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
 		mCursorAdapter = new TransactionsCursorAdapter(
 				getActivity().getApplicationContext(), 
 				R.layout.list_item_transaction, null, 
@@ -496,7 +496,7 @@ public TransactionsCursorLoader(Context context, String accountUID) {
 		
 		@Override
 		public Cursor loadInBackground() {
-			mDatabaseAdapter = GnuCashApplication.getTransactionDbAdapter();
+			mDatabaseAdapter = TransactionsDbAdapter.getInstance();
 			Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllTransactionsForAccount(accountUID);
 			if (c != null)
 				registerContentObserver(c);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
index 8e5e7f8c..d9b09e5e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
@@ -102,7 +102,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		/*
 	  Accounts database adapter
 	 */
-        AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
         String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID    + " != ? AND "
                 + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = ? AND "
                 + DatabaseSchema.AccountEntry.COLUMN_UID         + " != ? AND "
@@ -142,13 +142,13 @@ public void onClick(View v) {
 				}
 				
 				long dstAccountId = mDestinationAccountSpinner.getSelectedItemId();
-				TransactionsDbAdapter trxnAdapter = GnuCashApplication.getTransactionDbAdapter();
+				TransactionsDbAdapter trxnAdapter = TransactionsDbAdapter.getInstance();
 				if (!trxnAdapter.getAccountCurrencyCode(dstAccountId).equals(trxnAdapter.getAccountCurrencyCode(mOriginAccountUID))){
 					Toast.makeText(getActivity(), R.string.toast_incompatible_currency, Toast.LENGTH_LONG).show();
 					return;
 				}
                 String srcAccountUID    = ((TransactionsActivity)getActivity()).getCurrentAccountUID();
-                String dstAccountUID    = GnuCashApplication.getAccountsDbAdapter().getUID(dstAccountId);
+                String dstAccountUID    = AccountsDbAdapter.getInstance().getUID(dstAccountId);
 				for (long trxnId : mTransactionIds) {
 					trxnAdapter.moveTransaction(trxnAdapter.getUID(trxnId), srcAccountUID, dstAccountUID);
 				}
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 4f1bee04..3dbaecbf 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -106,7 +106,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
         getDialog().setTitle(R.string.title_transaction_splits);
 
         mSplitItemViewList = new ArrayList<View>();
-        mSplitsDbAdapter = GnuCashApplication.getSplitsDbAdapter();
+        mSplitsDbAdapter = SplitsDbAdapter.getInstance();
 
         //we are editing splits for a new transaction.
         // But the user may have already created some splits before. Let's check
@@ -187,7 +187,7 @@ private View addSplitView(Split split){
      * Extracts arguments passed to the view and initializes necessary adapters and cursors
      */
     private void initArgs() {
-        mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 
         Bundle args = getArguments();
         mAccountUID = ((TransactionsActivity) getActivity()).getCurrentAccountUID();
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 38d101e5..c6816689 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -63,13 +63,13 @@ public static TransactionsDeleteConfirmationDialogFragment newInstance(int title
                 .setPositiveButton(R.string.alert_dialog_ok_delete,
                         new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int whichButton) {
-                                TransactionsDbAdapter transactionsDbAdapter = GnuCashApplication.getTransactionDbAdapter();
+                                TransactionsDbAdapter transactionsDbAdapter = TransactionsDbAdapter.getInstance();
                                 if (rowId == 0) {
                                     GncXmlExporter.createBackup(); //create backup before deleting everything
                                     List<Transaction> openingBalances = new ArrayList<Transaction>();
                                     boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
                                     if (preserveOpeningBalances) {
-                                        openingBalances = GnuCashApplication.getAccountsDbAdapter().getAllOpeningBalanceTransactions();
+                                        openingBalances = AccountsDbAdapter.getInstance().getAllOpeningBalanceTransactions();
                                     }
 
                                     transactionsDbAdapter.deleteAllRecords();
diff --git a/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
index 919f6d1b..32dd4240 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -41,7 +41,7 @@
 
     public AccountBalanceTask(TextView balanceTextView, Context context){
         accountBalanceTextViewReference = new WeakReference<TextView>(balanceTextView);
-        accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+        accountsDbAdapter = AccountsDbAdapter.getInstance();
     }
 
     @Override
diff --git a/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java b/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
index 568d627b..856295a2 100644
--- a/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
@@ -71,7 +71,7 @@ public void onCreate(Bundle savedInstanceState) {
 		mOkButton 		= (Button) findViewById(R.id.btn_save);
 		mCancelButton 	= (Button) findViewById(R.id.btn_cancel);
 
-		mAccountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+		mAccountsDbAdapter = AccountsDbAdapter.getInstance();
 		Cursor cursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
 		
 		if (cursor.getCount() <= 0){
@@ -145,7 +145,7 @@ public static void updateWidget(Context context, int appWidgetId, String account
 		Log.i("WidgetConfiguration", "Updating widget: " + appWidgetId);
 		AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
 
-		AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
+		AccountsDbAdapter accountsDbAdapter = AccountsDbAdapter.getInstance();
 		Account account;
         try {
             account = accountsDbAdapter.getAccount(accountUID);
