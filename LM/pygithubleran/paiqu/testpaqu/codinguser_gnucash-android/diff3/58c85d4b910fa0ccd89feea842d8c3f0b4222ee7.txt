From ff7f8c0ba9747a061738c278e3e02f7582075f93 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 19 Sep 2015 16:07:38 +0800
Subject: [PATCH 1/2] calculate multi-currency account balance

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  9 +--
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 73 ++++++++++++++++------
 2 files changed, 57 insertions(+), 25 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index dbb72c92..f59ee198 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -758,21 +758,18 @@ private Money computeBalance(String accountUID, long startTimestamp, long endTim
         Log.d(LOG_TAG, "Computing account balance for account ID " + accountUID);
         String currencyCode = mTransactionsAdapter.getAccountCurrencyCode(accountUID);
         boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
-        Money balance = Money.createZeroInstance(currencyCode);
 
         List<String> accountsList = getDescendantAccountUIDs(accountUID,
-                AccountEntry.COLUMN_CURRENCY + " = ? ",
-                new String[]{currencyCode});
+                null, null);
 
         accountsList.add(0, accountUID);
 
         Log.d(LOG_TAG, "all account list : " + accountsList.size());
-		SplitsDbAdapter splitsDbAdapter = SplitsDbAdapter.getInstance();
-        Money splitSum = (startTimestamp == -1 && endTimestamp == -1)
+        SplitsDbAdapter splitsDbAdapter = SplitsDbAdapter.getInstance();
+        return (startTimestamp == -1 && endTimestamp == -1)
                 ? splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance)
                 : splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
         
-        return balance.add(splitSum);
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index 4012a547..b96b85fa 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -24,6 +24,7 @@
 import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import android.util.Log;
+import android.util.Pair;
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.AccountType;
@@ -183,42 +184,76 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
 
         Cursor cursor;
         String[] selectionArgs = null;
-        String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
-                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
+        String selection = DatabaseSchema.AccountEntry.TABLE_NAME + "_" + DatabaseSchema.CommonColumns.COLUMN_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
+                TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " = 0";
 
         if (startTimestamp != -1 && endTimestamp != -1) {
-            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ? ";
+            selection += " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ? ";
             selectionArgs = new String[]{String.valueOf(startTimestamp), String.valueOf(endTimestamp)};
         } else if (startTimestamp == -1 && endTimestamp != -1) {
-            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " <= ?";
+            selection += " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " <= ?";
             selectionArgs = new String[]{String.valueOf(endTimestamp)};
-        } else if (startTimestamp != -1 && endTimestamp == -1) {
-            selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " >= ?";
+        } else if (startTimestamp != -1/* && endTimestamp == -1*/) {
+            selection += " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " >= ?";
             selectionArgs = new String[]{String.valueOf(startTimestamp)};
         }
 
-        cursor = mDb.query(SplitEntry.TABLE_NAME + " , " + TransactionEntry.TABLE_NAME,
-                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN " +
-                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_QUANTITY_NUM + " ELSE - " +
-                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_QUANTITY_NUM + " END )",
-                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_QUANTITY_DENOM},
-                selection, selectionArgs, null, null, null);
+        cursor = mDb.query("trans_split_acct",
+                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN " +
+                        SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_NUM + " ELSE - " +
+                        SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_NUM + " END )",
+                        SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_QUANTITY_DENOM,
+                        DatabaseSchema.AccountEntry.TABLE_NAME + "_" + DatabaseSchema.AccountEntry.COLUMN_CURRENCY},
+                selection, selectionArgs, DatabaseSchema.AccountEntry.TABLE_NAME + "_" + DatabaseSchema.AccountEntry.COLUMN_CURRENCY, null, null);
 
         try {
-            if (cursor.moveToFirst()) {
-                int amount_num = cursor.getInt(0);
-                int amount_denom = cursor.getInt(1);
-                Log.d(LOG_TAG, "amount return " + amount_num + "/" + amount_denom);
+            Money total = Money.createZeroInstance(currencyCode);
+            CommoditiesDbAdapter commoditiesDbAdapter = null;
+            PricesDbAdapter pricesDbAdapter = null;
+            Currency currency = null;
+            String currencyUID = null;
+            while (cursor.moveToNext()) {
+                long amount_num = cursor.getLong(0);
+                long amount_denom = cursor.getLong(1);
+                String commodity = cursor.getString(2);
+                //Log.d(getClass().getName(), commodity + " " + amount_num + "/" + amount_denom);
+                if (commodity.equals("XXX") || amount_num == 0) {
+                    // ignore custom currency
+                    continue;
+                }
                 if (!hasDebitNormalBalance) {
                     amount_num = -amount_num;
                 }
-                return new Money(amount_num, amount_denom, currencyCode);
+                if (commodity.equals(currencyCode)) {
+                    // currency matches
+                    total = total.add(new Money(amount_num, amount_denom, currencyCode));
+                    //Log.d(getClass().getName(), "currency " + commodity + " sub - total " + total);
+                } else {
+                    // there is a second currency involved
+                    if (commoditiesDbAdapter == null) {
+                        commoditiesDbAdapter = new CommoditiesDbAdapter(mDb);
+                        pricesDbAdapter = new PricesDbAdapter(mDb);
+                        currency = Currency.getInstance(currencyCode);
+                        currencyUID = commoditiesDbAdapter.getCommodityUID(currencyCode);
+                    }
+                    // get price
+                    String commodityUID = commoditiesDbAdapter.getCommodityUID(commodity);
+                    Pair<Long, Long> price = pricesDbAdapter.getPrice(commodityUID, currencyUID);
+                    if (price.first <= 0 || price.second <= 0) {
+                        // no price exists, just ignore it
+                        continue;
+                    }
+                    BigDecimal amount = Money.getBigDecimal(amount_num, amount_denom);
+                    BigDecimal amountConverted = amount.multiply(new BigDecimal(price.first))
+                            .divide(new BigDecimal(price.second), currency.getDefaultFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
+                    total = total.add(new Money(amountConverted, currency));
+                    //Log.d(getClass().getName(), "currency " + commodity + " sub - total " + total);
+                }
             }
+            return total;
         } finally {
             cursor.close();
         }
-        return new Money("0", currencyCode);
     }
 
     /**

From 36cbfa0202007ad4923206b5ababd56630f2e29b Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 20 Sep 2015 10:55:37 +0800
Subject: [PATCH 2/2] make account balance calculation multi-threaded

Connection to uservoice.com is also done in background and may take a lot of time under certain network condition. Account balance calculation would wait for it which makes no account balance to be shown a long time.
---
 .../org/gnucash/android/ui/account/AccountsListFragment.java   | 10 ++++++++--
 .../gnucash/android/ui/transaction/TransactionsActivity.java   |  8 +++++++-
 2 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
index 8bfea79d..74deec21 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -24,6 +24,8 @@
 import android.content.res.Configuration;
 import android.database.Cursor;
 import android.graphics.Color;
+import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
@@ -463,8 +465,12 @@ public void onBindViewHolderCursor(final AccountViewHolder holder, final Cursor
                 holder.description.setVisibility(View.GONE);
 
             // add a summary of transactions to the account view
-            new AccountBalanceTask(holder.accountBalance).execute(accountUID);
-
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+                // Make sure the balance task is truely multithread
+                new AccountBalanceTask(holder.accountBalance).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, accountUID);
+            } else {
+                new AccountBalanceTask(holder.accountBalance).execute(accountUID);
+            }
             String accountColor = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_COLOR_CODE));
             int colorCode = accountColor == null ? Color.TRANSPARENT : Color.parseColor(accountColor);
             holder.colorStripView.setBackgroundColor(colorCode);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index de0d1f0c..e312a10c 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -21,6 +21,7 @@
 import android.content.Intent;
 import android.database.Cursor;
 import android.graphics.drawable.ColorDrawable;
+import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
 import android.support.design.widget.FloatingActionButton;
@@ -251,7 +252,12 @@ public void refresh(String accountUID) {
         if (mPagerAdapter != null)
             mPagerAdapter.notifyDataSetChanged();
 
-        new AccountBalanceTask(mSumTextView).execute(mAccountUID);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            // make sure the account balance task is truely multi-thread
+            new AccountBalanceTask(mSumTextView).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, mAccountUID);
+        } else {
+            new AccountBalanceTask(mSumTextView).execute(mAccountUID);
+        }
     }
 
     @Override
