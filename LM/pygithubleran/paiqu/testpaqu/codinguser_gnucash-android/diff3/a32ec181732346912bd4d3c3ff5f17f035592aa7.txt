From a32ec181732346912bd4d3c3ff5f17f035592aa7 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Sat, 5 Sep 2015 21:28:44 +0300
Subject: [PATCH] Group bar chart by quarter/year

---
 .../android/ui/report/BarChartFragment.java        | 77 +++++++++++++++++++---
 1 file changed, 67 insertions(+), 10 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
index 75be5600..b035b521 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/BarChartFragment.java
@@ -52,6 +52,7 @@
 import org.joda.time.LocalDate;
 import org.joda.time.LocalDateTime;
 import org.joda.time.Months;
+import org.joda.time.Years;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -66,6 +67,9 @@
 import butterknife.Bind;
 import butterknife.ButterKnife;
 
+import static org.gnucash.android.ui.report.ReportsActivity.COLORS;
+import static org.gnucash.android.ui.report.ReportsActivity.GroupInterval;
+
 /**
  * Activity used for drawing a bar chart
  *
@@ -102,6 +106,8 @@
      */
     private long mReportEndTime = -1;
 
+    private GroupInterval mGroupInterval = GroupInterval.MONTH;
+
     @Nullable
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
@@ -159,9 +165,31 @@ private BarData getData(AccountType accountType) {
         Map<String, Integer> accountToColorMap = new LinkedHashMap<>();
         List<String> xValues = new ArrayList<>();
         LocalDateTime tmpDate = new LocalDateTime(getStartDate(accountType).toDate().getTime());
-        for (int i = 0; i <= Months.monthsBetween(getStartDate(accountType), getEndDate(accountType)).getMonths(); i++) {
-            long start = tmpDate.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
-            long end = tmpDate.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+        int count = getDateDiff(new LocalDateTime(getStartDate(accountType).toDate().getTime()), new LocalDateTime(getEndDate(accountType).toDate().getTime()));
+        for (int i = 0; i <= count; i++) {
+            long start = 0;
+            long end = 0;
+            switch (mGroupInterval) {
+                case MONTH:
+                    start = tmpDate.dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = tmpDate.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    tmpDate = tmpDate.plusMonths(1);
+                    break;
+                case QUARTER:
+                    int quarter = getQuarter(tmpDate);
+                    start = tmpDate.withMonthOfYear(quarter * 3 - 2).dayOfMonth().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = tmpDate.withMonthOfYear(quarter * 3).dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    tmpDate = tmpDate.plusMonths(3);
+                    break;
+                case YEAR:
+                    start = tmpDate.dayOfYear().withMinimumValue().millisOfDay().withMinimumValue().toDate().getTime();
+                    end = tmpDate.dayOfYear().withMaximumValue().millisOfDay().withMaximumValue().toDate().getTime();
+
+                    tmpDate = tmpDate.plusYears(1);
+                    break;
+            }
             List<Float> stack = new ArrayList<>();
             for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
                 if (account.getAccountType() == accountType
@@ -176,9 +204,9 @@ private BarData getData(AccountType accountType) {
                             if (mUseAccountColor) {
                                 color = (account.getColorHexCode() != null)
                                         ? Color.parseColor(account.getColorHexCode())
-                                        : ReportsActivity.COLORS[accountToColorMap.size() % ReportsActivity.COLORS.length];
+                                        : COLORS[accountToColorMap.size() % COLORS.length];
                             } else {
-                                color = ReportsActivity.COLORS[accountToColorMap.size() % ReportsActivity.COLORS.length];
+                                color = COLORS[accountToColorMap.size() % COLORS.length];
                             }
                             accountToColorMap.put(account.getUID(), color);
                         }
@@ -195,8 +223,6 @@ private BarData getData(AccountType accountType) {
             values.add(new BarEntry(floatListToArray(stack), i, stackLabels));
 
             xValues.add(tmpDate.toString(X_AXIS_PATTERN));
-
-            tmpDate = tmpDate.plusMonths(1);
         }
 
         BarDataSet set = new BarDataSet(values, "");
@@ -269,6 +295,35 @@ private LocalDate getEndDate(AccountType accountType) {
     }
 
     /**
+     * Calculates difference between two date values accordingly to {@code mGroupInterval}
+     * @param start start date
+     * @param end end date
+     * @return difference between two dates or {@code -1}
+     */
+    private int getDateDiff(LocalDateTime start, LocalDateTime end) {
+        switch (mGroupInterval) {
+            case QUARTER:
+                int y = Years.yearsBetween(start.withDayOfYear(1).withMillisOfDay(0), end.withDayOfYear(1).withMillisOfDay(0)).getYears();
+                return (getQuarter(end) - getQuarter(start) + y * 4);
+            case MONTH:
+                return Months.monthsBetween(start.withDayOfMonth(1).withMillisOfDay(0), end.withDayOfMonth(1).withMillisOfDay(0)).getMonths();
+            case YEAR:
+                return Years.yearsBetween(start.withDayOfYear(1).withMillisOfDay(0), end.withDayOfYear(1).withMillisOfDay(0)).getYears();
+            default:
+                return -1;
+        }
+    }
+
+    /**
+     * Returns a quarter of the specified date
+     * @param date date
+     * @return a quarter
+     */
+    private int getQuarter(LocalDateTime date) {
+        return ((date.getMonthOfYear() - 1) / 3 + 1);
+    }
+
+    /**
      * Converts the specified list of floats to an array
      * @param list a list of floats
      * @return a float array
@@ -314,7 +369,7 @@ private void setCustomLegend() {
         LinkedHashSet<String> labels = new LinkedHashSet<>(Arrays.asList(dataSet.getStackLabels()));
         LinkedHashSet<Integer> colors = new LinkedHashSet<>(dataSet.getColors());
 
-        if (ReportsActivity.COLORS.length >= labels.size()) {
+        if (COLORS.length >= labels.size()) {
             legend.setCustom(new ArrayList<>(colors), new ArrayList<>(labels));
             return;
         }
@@ -331,8 +386,10 @@ public void onTimeRangeUpdated(long start, long end) {
     }
 
     @Override
-    public void onGroupingUpdated(ReportsActivity.GroupInterval groupInterval) {
-        //TODO: update bar chart display with appropriate grouping
+    public void onGroupingUpdated(GroupInterval groupInterval) {
+        mGroupInterval = groupInterval;
+        mChart.setData(getData(((ReportsActivity) getActivity()).getAccountType()));
+        displayChart();
     }
 
     @Override
