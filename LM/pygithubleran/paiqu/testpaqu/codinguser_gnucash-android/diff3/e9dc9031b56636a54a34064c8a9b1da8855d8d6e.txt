From 351ebca81537174c5eca6df4bb8712167ab064c3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 15 Jun 2016 18:33:08 +0200
Subject: [PATCH 1/6] Annotate Account for its commodity to be always non-null.

---
 app/src/main/java/org/gnucash/android/model/Account.java | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 53fa57aa..b4569a49 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -157,7 +157,7 @@ public Account(String name) {
 	 * @param name Name of the account
 	 * @param commodity {@link Commodity} to be used by transactions in this account
 	 */
-	public Account(String name, Commodity commodity){
+	public Account(String name, @NonNull Commodity commodity){
 		setName(name);
         this.mFullName  = mName;
 		setCommodity(commodity);
@@ -343,6 +343,7 @@ public void setCurrencyCode(String currencyCode){
 	/**
 	 * Return the commodity for this account
 	 */
+	@NonNull
 	public Commodity getCommodity(){
 		return mCommodity;
 	}
@@ -351,7 +352,7 @@ public Commodity getCommodity(){
 	 * Sets the commodity of this account
 	 * @param commodity Commodity of the account
 	 */
-	public void setCommodity(Commodity commodity){
+	public void setCommodity(@NonNull Commodity commodity){
 		this.mCommodity = commodity;
 		this.mCurrencyCode = commodity.getCurrencyCode();
 		//todo: should we also change commodity of transactions? Transactions can have splits from different accounts

From 686fc9b68be9b9aabb7a039395598550ea66601c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 16 Jun 2016 18:24:19 +0200
Subject: [PATCH 2/6] Remove null check for Account.getCommodity().

We'll now ensure it's never null.
---
 .../main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 3c840614..5048eda0 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -180,11 +180,7 @@ public long bulkAddRecords(@NonNull List<Account> accountList, UpdateMethod upda
         stmt.bindLong(8, account.isPlaceholderAccount() ? 1 : 0);
         stmt.bindString(9, TimestampHelper.getUtcStringFromTimestamp(account.getCreatedTimestamp()));
         stmt.bindLong(10, account.isHidden() ? 1 : 0);
-        Commodity commodity = account.getCommodity();
-        if (commodity == null)
-            commodity = new CommoditiesDbAdapter(mDb).getCommodity(account.getCurrency().getCurrencyCode());
-
-        stmt.bindString(11, commodity.getUID());
+        stmt.bindString(11, account.getCommodity().getUID());
 
         String parentAccountUID = account.getParentUID();
         if (parentAccountUID == null && account.getAccountType() != AccountType.ROOT) {

From 07486c3d4319dbe4a0135682ec740f03d982c149 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 16 Jun 2016 18:10:30 +0200
Subject: [PATCH 3/6] Log a message if a commodity isn't found in the database.

We load an extensive list of currencies in the database, so it should be
unusual when don't find one.
---
 .../java/org/gnucash/android/db/adapter/CommoditiesDbAdapter.java  | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/app/src/main/java/org/gnucash/android/db/adapter/CommoditiesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/CommoditiesDbAdapter.java
index ccd58f45..84b5f56b 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/CommoditiesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/CommoditiesDbAdapter.java
@@ -4,6 +4,9 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.crashlytics.android.Crashlytics;
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
@@ -110,6 +113,10 @@ public Commodity getCommodity(String currencyCode){
         Commodity commodity = null;
         if (cursor.moveToNext()){
             commodity = buildModelInstance(cursor);
+        } else {
+            String msg = "Commodity not found in the database: " + currencyCode;
+            Log.e(LOG_TAG, msg);
+            Crashlytics.log(msg);
         }
         cursor.close();
         return commodity;

From 17a4e5be256dd77e8a83b0b7bcace1e5589d4b1b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sat, 18 Jun 2016 14:16:55 +0200
Subject: [PATCH 4/6] Remove Currency and currency code uses from Account.

Account already holds a reference to a Commodity which substitutes Currency.
---
 .../android/test/ui/AccountsActivityTest.java      |  7 +++----
 .../android/db/adapter/AccountsDbAdapter.java      |  2 +-
 .../gnucash/android/importer/GncXmlHandler.java    |  3 ++-
 .../java/org/gnucash/android/model/Account.java    | 24 +---------------------
 .../android/ui/account/AccountFormFragment.java    |  2 +-
 .../android/ui/report/BaseReportFragment.java      | 12 +++++------
 .../android/ui/report/ReportsOverviewFragment.java |  8 ++------
 .../report/barchart/StackedBarChartFragment.java   |  9 ++++----
 .../linechart/CashFlowLineChartFragment.java       |  8 ++++----
 .../ui/report/piechart/PieChartFragment.java       |  4 ++--
 .../android/test/unit/model/AccountTest.java       | 21 +------------------
 11 files changed, 27 insertions(+), 73 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 73eecf12..69f6e4a0 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -228,7 +228,7 @@ public void testCreateAccount(){
         Account newestAccount = accounts.get(0); //because of alphabetical sorting
 
         assertThat(newestAccount.getName()).isEqualTo(NEW_ACCOUNT_NAME);
-        assertThat(newestAccount.getCurrency().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+        assertThat(newestAccount.getCommodity().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
         assertThat(newestAccount.isPlaceholderAccount()).isTrue();
     }
 
@@ -316,7 +316,7 @@ public void testEditAccount(){
         Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
 
         assertThat(latest.getName()).isEqualTo(editedAccountName);
-        assertThat(latest.getCurrency().getCurrencyCode()).isEqualTo(ACCOUNTS_CURRENCY_CODE);
+        assertThat(latest.getCommodity().getCurrencyCode()).isEqualTo(ACCOUNTS_CURRENCY_CODE);
     }
 
     @Test
@@ -402,7 +402,6 @@ public void testDeleteAccountMovingSubaccounts() {
         subAccount.setParentUID(SIMPLE_ACCOUNT_UID);
 
         Account tranferAcct = new Account("Other account");
-        tranferAcct.setCurrencyCode(ACCOUNTS_CURRENCY_CODE);
         mAccountsDbAdapter.addRecord(subAccount, DatabaseAdapter.UpdateMethod.insert);
         mAccountsDbAdapter.addRecord(tranferAcct, DatabaseAdapter.UpdateMethod.insert);
 
@@ -456,7 +455,7 @@ public void testIntentAccountCreation(){
         assertThat(account).isNotNull();
         assertThat(account.getName()).isEqualTo("Intent Account");
         assertThat(account.getUID()).isEqualTo("intent-account");
-        assertThat(account.getCurrency().getCurrencyCode()).isEqualTo("EUR");
+        assertThat(account.getCommodity().getCurrencyCode()).isEqualTo("EUR");
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 5048eda0..dd8d26dc 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -171,7 +171,7 @@ public long bulkAddRecords(@NonNull List<Account> accountList, UpdateMethod upda
         if (account.getDescription() != null)
             stmt.bindString(2, account.getDescription());
         stmt.bindString(3, account.getAccountType().name());
-        stmt.bindString(4, account.getCurrency().getCurrencyCode());
+        stmt.bindString(4, account.getCommodity().getCurrencyCode());
         if (account.getColor() != Account.DEFAULT_COLOR) {
             stmt.bindString(5, convertToRGBHexString(account.getColor()));
         }
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 227adfa1..86dd7818 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -439,7 +439,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             case GncXmlHelper.TAG_COMMODITY_ID:
                 String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
                 if (mAccount != null) {
-                    mAccount.setCurrencyCode(currencyCode);
+                    mAccount.setCommodity(mCommoditiesDbAdapter.getCommodity(currencyCode));
                     if (mCurrencyCount.containsKey(currencyCode)) {
                         mCurrencyCount.put(currencyCode, mCurrencyCount.get(currencyCode) + 1);
                     } else {
@@ -893,6 +893,7 @@ public void endDocument() throws SAXException {
 
         // Set the account for created balancing splits to correct imbalance accounts
         for (Split split: mAutoBalanceSplits) {
+            // XXX: yes, getAccountUID() returns a currency code in this case (see Transaction.getAutoBalanceSplit())
             String currencyCode = split.getAccountUID();
             Account imbAccount = mapImbalanceAccount.get(currencyCode);
             if (imbAccount == null) {
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index b4569a49..71f30ff8 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -27,7 +27,6 @@
 
 import java.sql.Timestamp;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.List;
 
 /**
@@ -77,11 +76,6 @@
 	private String mDescription = "";
 
 	/**
-	 * Currency used by transactions in this account
-	 */
-	private String mCurrencyCode;
-
-	/**
 	 * Commodity used by this account
 	 */
 	private Commodity mCommodity;
@@ -271,7 +265,7 @@ public int getTransactionCount(){
 	 * @return {@link Money} aggregate amount of all transactions in account.
 	 */
 	public Money getBalance(){
-		Money balance = Money.createZeroInstance(mCurrencyCode);
+		Money balance = Money.createZeroInstance(mCommodity.getCurrencyCode());
         for (Transaction transaction : mTransactionsList) {
             balance.add(transaction.getBalance(getUID()));
 		}
@@ -325,21 +319,6 @@ public void setFavorite(boolean isFavorite) {
         this.mIsFavorite = isFavorite;
     }
 
-    /**
-	 * Returns the currency for this account.
-	 */
-	public Currency getCurrency() {
-		return Currency.getInstance(mCurrencyCode);
-	}
-
-	/**
-	 * Sets the currency code of this account
-	 * @param currencyCode ISO 4217 3-letter currency code
-	 */
-	public void setCurrencyCode(String currencyCode){
-		this.mCurrencyCode = currencyCode;
-	}
-
 	/**
 	 * Return the commodity for this account
 	 */
@@ -354,7 +333,6 @@ public Commodity getCommodity(){
 	 */
 	public void setCommodity(@NonNull Commodity commodity){
 		this.mCommodity = commodity;
-		this.mCurrencyCode = commodity.getCurrencyCode();
 		//todo: should we also change commodity of transactions? Transactions can have splits from different accounts
 	}
 
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 2a90bdcc..d714dd15 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -376,7 +376,7 @@ private void initializeViewsWithAccount(Account account){
             setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
         }
 
-        String currencyCode = account.getCurrency().getCurrencyCode();
+        String currencyCode = account.getCommodity().getCurrencyCode();
         setSelectedCurrency(currencyCode);
 
         if (mAccountsDbAdapter.getTransactionMaxSplitNum(mAccount.getUID()) > 1)
diff --git a/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java b/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java
index ee53923b..e6f849e4 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/BaseReportFragment.java
@@ -30,7 +30,6 @@
 import android.view.MenuInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import com.github.mikephil.charting.data.Entry;
@@ -39,14 +38,14 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.ui.common.Refreshable;
 import org.joda.time.LocalDateTime;
 import org.joda.time.Months;
 import org.joda.time.Years;
 
-import java.util.Currency;
-
 import butterknife.Bind;
 import butterknife.ButterKnife;
 
@@ -88,9 +87,9 @@
     protected AccountType mAccountType;
 
     /**
-     * Currency for which to display reports
+     * Commodity for which to display reports
      */
-    protected Currency mCurrency;
+    protected Commodity mCommodity;
 
     /**
      * Intervals in which to group reports
@@ -181,7 +180,8 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         actionBar.setTitle(getTitle());
 
         setHasOptionsMenu(true);
-        mCurrency = Currency.getInstance(GnuCashApplication.getDefaultCurrencyCode());
+        mCommodity = CommoditiesDbAdapter.getInstance()
+                    .getCommodity(GnuCashApplication.getDefaultCurrencyCode());
 
         ReportsActivity reportsActivity = (ReportsActivity) getActivity();
         mReportPeriodStart = reportsActivity.getReportPeriodStart();
diff --git a/app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java b/app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java
index bae16da2..f0139f67 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/ReportsOverviewFragment.java
@@ -35,7 +35,6 @@
 import com.github.mikephil.charting.data.PieDataSet;
 
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
@@ -49,9 +48,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Currency;
 import java.util.List;
-import java.util.Locale;
 
 import butterknife.Bind;
 import butterknife.OnClick;
@@ -151,7 +148,7 @@ protected void generateReport() {
             mChart.setData(pieData);
             float sum = mChart.getData().getYValueSum();
             String total = getResources().getString(R.string.label_chart_total);
-            String currencySymbol = Currency.getInstance(GnuCashApplication.getDefaultCurrencyCode()).getSymbol(Locale.getDefault());
+            String currencySymbol = mCommodity.getSymbol();
             mChart.setCenterText(String.format(PieChartFragment.TOTAL_VALUE_LABEL_PATTERN, total, sum, currencySymbol));
             mChartHasData = true;
         } else {
@@ -178,14 +175,13 @@ protected void generateReport() {
      * @return {@code PieData} instance
      */
     private PieData getData() {
-        String mCurrencyCode = GnuCashApplication.getDefaultCurrencyCode();
         PieDataSet dataSet = new PieDataSet(null, "");
         List<String> labels = new ArrayList<>();
         List<Integer> colors = new ArrayList<>();
         for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
             if (account.getAccountType() == AccountType.EXPENSE
                     && !account.isPlaceholderAccount()
-                    && account.getCurrency() == Currency.getInstance(mCurrencyCode)) {
+                    && account.getCommodity().equals(mCommodity)) {
 
                 long start = new LocalDate().minusMonths(2).dayOfMonth().withMinimumValue().toDate().getTime();
                 long end = new LocalDate().plusDays(1).toDate().getTime();
diff --git a/app/src/main/java/org/gnucash/android/ui/report/barchart/StackedBarChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/barchart/StackedBarChartFragment.java
index c834dd5f..3297b230 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/barchart/StackedBarChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/barchart/StackedBarChartFragment.java
@@ -17,7 +17,6 @@
 
 package org.gnucash.android.ui.report.barchart;
 
-import android.graphics.Color;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.annotation.Nullable;
@@ -110,7 +109,7 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         mChart.getAxisRight().setEnabled(false);
         mChart.getAxisLeft().setStartAtZero(false);
         mChart.getAxisLeft().enableGridDashedLine(4.0f, 4.0f, 0);
-        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
+        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCommodity.getSymbol()));
         Legend chartLegend = mChart.getLegend();
         chartLegend.setForm(Legend.LegendForm.CIRCLE);
         chartLegend.setPosition(Legend.LegendPosition.BELOW_CHART_CENTER);
@@ -163,7 +162,7 @@ protected BarData getData() {
             for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
                 if (account.getAccountType() == mAccountType
                         && !account.isPlaceholderAccount()
-                        && account.getCurrency() == mCurrency) {
+                        && account.getCommodity().equals(mCommodity)) {
 
                     double balance = mAccountsDbAdapter.getAccountsBalance(
                             Collections.singletonList(account.getUID()), start, end).asDouble();
@@ -244,7 +243,7 @@ private BarData getEmptyData() {
      */
     private LocalDate getStartDate(AccountType accountType) {
         TransactionsDbAdapter adapter = TransactionsDbAdapter.getInstance();
-        String code = mCurrency.getCurrencyCode();
+        String code = mCommodity.getCurrencyCode();
         LocalDate startDate;
         if (mReportPeriodStart == -1) {
             startDate = new LocalDate(adapter.getTimestampOfEarliestTransaction(accountType, code));
@@ -263,7 +262,7 @@ private LocalDate getStartDate(AccountType accountType) {
      */
     private LocalDate getEndDate(AccountType accountType) {
         TransactionsDbAdapter adapter = TransactionsDbAdapter.getInstance();
-        String code = mCurrency.getCurrencyCode();
+        String code = mCommodity.getCurrencyCode();
         LocalDate endDate;
         if (mReportPeriodEnd == -1) {
             endDate = new LocalDate(adapter.getTimestampOfLatestTransaction(accountType, code));
diff --git a/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java
index 7f72d7cd..69670658 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/linechart/CashFlowLineChartFragment.java
@@ -102,7 +102,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
         mChart.getXAxis().setDrawGridLines(false);
         mChart.getAxisRight().setEnabled(false);
         mChart.getAxisLeft().enableGridDashedLine(4.0f, 4.0f, 0);
-        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCurrency.getSymbol(Locale.getDefault())));
+        mChart.getAxisLeft().setValueFormatter(new LargeValueFormatter(mCommodity.getSymbol()));
 
         Legend legend = mChart.getLegend();
         legend.setPosition(Legend.LegendPosition.BELOW_CHART_CENTER);
@@ -209,7 +209,7 @@ private LineData getEmptyData() {
         for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
             if (account.getAccountType() == accountType
                     && !account.isPlaceholderAccount()
-                    && account.getCurrency().equals(mCurrency)) {
+                    && account.getCommodity().equals(mCommodity)) {
                 accountUIDList.add(account.getUID());
             }
         }
@@ -276,8 +276,8 @@ private void calculateEarliestAndLatestTimestamps(List<AccountType> accountTypeL
         TransactionsDbAdapter dbAdapter = TransactionsDbAdapter.getInstance();
         for (Iterator<AccountType> iter = accountTypeList.iterator(); iter.hasNext();) {
             AccountType type = iter.next();
-            long earliest = dbAdapter.getTimestampOfEarliestTransaction(type, mCurrency.getCurrencyCode());
-            long latest = dbAdapter.getTimestampOfLatestTransaction(type, mCurrency.getCurrencyCode());
+            long earliest = dbAdapter.getTimestampOfEarliestTransaction(type, mCommodity.getCurrencyCode());
+            long latest = dbAdapter.getTimestampOfLatestTransaction(type, mCommodity.getCurrencyCode());
             if (earliest > 0 && latest > 0) {
                 mEarliestTimestampsMap.put(type, earliest);
                 mLatestTimestampsMap.put(type, latest);
diff --git a/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java b/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java
index 6ff5bfa8..7f20203f 100644
--- a/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/report/piechart/PieChartFragment.java
@@ -120,7 +120,7 @@ protected void generateReport() {
             mChart.setData(mGroupSmallerSlices ? groupSmallerSlices(pieData, getActivity()) : pieData);
             float sum = mChart.getData().getYValueSum();
             String total = getResources().getString(R.string.label_chart_total);
-            String currencySymbol = mCurrency.getSymbol(Locale.getDefault());
+            String currencySymbol = mCommodity.getSymbol();
             mChart.setCenterText(String.format(TOTAL_VALUE_LABEL_PATTERN, total, sum, currencySymbol));
         } else {
             mChartDataPresent = false;
@@ -152,7 +152,7 @@ private PieData getData() {
         for (Account account : mAccountsDbAdapter.getSimpleAccountList()) {
             if (account.getAccountType() == mAccountType
                     && !account.isPlaceholderAccount()
-                    && account.getCurrency() == mCurrency) {
+                    && account.getCommodity().equals(mCommodity)) {
 
                 double balance = mAccountsDbAdapter.getAccountsBalance(Collections.singletonList(account.getUID()),
                         mReportPeriodStart, mReportPeriodEnd).asDouble();
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
index a172e361..106897bd 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/AccountTest.java
@@ -29,8 +29,6 @@
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
-import java.util.Currency;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(GnucashTestRunner.class)
@@ -40,7 +38,7 @@
 	@Test
 	public void testAccountUsesDefaultCurrency(){
 		Account account = new Account("Dummy account");
-		assertThat(account.getCurrency().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+		assertThat(account.getCommodity().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
 	}
 
 	@Test
@@ -96,23 +94,6 @@ public void settingNameShouldNotChangeFullName(){
 	}
 
 	@Test
-	public void settingCommodity_shouldSetCurrencyCode(){
-		Account account = new Account("Test", Commodity.USD);
-		account.setCommodity(Commodity.JPY);
-
-		assertThat(account.getCurrency()).isEqualTo(Currency.getInstance("JPY"));
-	}
-
-	@Test
-	public void settingCurrencyCode_shouldNotSetCommodity(){
-		Account account = new Account("Test EUR account", Commodity.EUR);
-		account.setCurrencyCode("USD");
-
-		assertThat(account.getCommodity()).isEqualTo(Commodity.EUR);
-		assertThat(account.getCurrency()).isEqualTo(Currency.getInstance("USD"));
-	}
-
-	@Test
 	public void newInstance_shouldReturnNonNullValues() {
 		Account account = new Account("Test account");
 		assertThat(account.getDescription()).isEqualTo("");

From c6016d70b8a95b554fcf9c974084f789e12e33e2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 19 Jun 2016 12:57:22 +0200
Subject: [PATCH 5/6] Ensure we don't create Account objects with a null
 Commodity.

---
 .../main/java/org/gnucash/android/importer/GncXmlHandler.java  |  8 +++++++-
 .../java/org/gnucash/android/receivers/AccountCreator.java     | 10 ++++++++--
 2 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 86dd7818..a358561f 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -439,7 +439,13 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             case GncXmlHelper.TAG_COMMODITY_ID:
                 String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
                 if (mAccount != null) {
-                    mAccount.setCommodity(mCommoditiesDbAdapter.getCommodity(currencyCode));
+                    Commodity commodity = mCommoditiesDbAdapter.getCommodity(currencyCode);
+                    if (commodity != null) {
+                        mAccount.setCommodity(commodity);
+                    } else {
+                        throw new SAXException("Commodity with '" + currencyCode
+                                + "' currency code not found in the database");
+                    }
                     if (mCurrencyCount.containsKey(currencyCode)) {
                         mCurrencyCount.put(currencyCode, mCurrencyCount.get(currencyCode) + 1);
                     } else {
diff --git a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
index 16eaad10..dd0e77ee 100644
--- a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
+++ b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
@@ -48,8 +48,14 @@ public void onReceive(Context context, Intent intent) {
 		account.setParentUID(args.getString(Account.EXTRA_PARENT_UID));
 		
 		String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);				
-		if (currencyCode != null){
-			account.setCommodity(Commodity.getInstance(currencyCode));
+        if (currencyCode != null) {
+            Commodity commodity = Commodity.getInstance(currencyCode);
+            if (commodity != null) {
+                account.setCommodity(commodity);
+            } else {
+                throw new IllegalArgumentException("Commodity with '" + currencyCode
+                                        + "' currency code not found in the database");
+            }
 		}
 		
 		String uid = args.getString(Intent.EXTRA_UID);

From bfe1c98200897d871a6e26c889cfb93984628b23 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 19 Jun 2016 20:59:10 +0200
Subject: [PATCH 6/6] Code inspector and formatting fixes.

---
 .../android/db/adapter/AccountsDbAdapter.java      |   7 +-
 .../java/org/gnucash/android/model/Account.java    | 654 +++++++++++----------
 .../gnucash/android/receivers/AccountCreator.java  |  41 +-
 3 files changed, 352 insertions(+), 350 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index dd8d26dc..cd942a92 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -273,7 +273,7 @@ public void reassignDescendantAccounts(@NonNull String accountUID, @NonNull Stri
             for (Account account : descendantAccounts)
                 mapAccounts.put(account.getUID(), account);
             String parentAccountFullName;
-            if (newParentAccountUID == null || getAccountType(newParentAccountUID) == AccountType.ROOT) {
+            if (getAccountType(newParentAccountUID) == AccountType.ROOT) {
                 parentAccountFullName = "";
             } else {
                 parentAccountFullName = getAccountFullName(newParentAccountUID);
@@ -756,11 +756,10 @@ public Money getAccountBalance(AccountType accountType, long startTimestamp, lon
 
         Log.d(LOG_TAG, "all account list : " + accountUidList.size());
         SplitsDbAdapter splitsDbAdapter = SplitsDbAdapter.getInstance();
-        Money splitSum = (startTimestamp == -1 && endTimestamp == -1)
+
+        return (startTimestamp == -1 && endTimestamp == -1)
                 ? splitsDbAdapter.computeSplitBalance(accountUidList, currencyCode, hasDebitNormalBalance)
                 : splitsDbAdapter.computeSplitBalance(accountUidList, currencyCode, hasDebitNormalBalance, startTimestamp, endTimestamp);
-
-        return splitSum;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 71f30ff8..57545686 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -36,33 +36,35 @@
  * By default, an account is made an {@link AccountType#CASH} and the default currency is
  * the currency of the Locale of the device on which the software is running. US Dollars is used
  * if the platform locale cannot be determined.
- * 
+ *
  * @author Ngewi Fet <ngewif@gmail.com>
  * @see AccountType
  */
-public class Account extends BaseModel{
+public class Account extends BaseModel {
 
-	/**
-	 * The MIME type for accounts in GnucashMobile
-	 * This is used when sending intents from third-party applications
-	 */
-	public static final String MIME_TYPE = "vnd.android.cursor.item/vnd." + BuildConfig.APPLICATION_ID + ".account";
+    /**
+     * The MIME type for accounts in GnucashMobile
+     * This is used when sending intents from third-party applications
+     */
+    public static final String MIME_TYPE = "vnd.android.cursor.item/vnd." + BuildConfig.APPLICATION_ID + ".account";
 
-	/**
-	 * Default color, if not set explicitly through {@link #setColor(String)}.
-	 */
-	// TODO: get it from a theme value?
-	public static final int DEFAULT_COLOR = Color.LTGRAY;
+    /**
+     * Default color, if not set explicitly through {@link #setColor(String)}.
+     */
+    // TODO: get it from a theme value?
+    public static final int DEFAULT_COLOR = Color.LTGRAY;
 
-	/**
+    /**
      * Accounts types which are used by the OFX standard
      */
-	public enum OfxAccountType {CHECKING, SAVINGS, MONEYMRKT, CREDITLINE }
+    public enum OfxAccountType {
+        CHECKING, SAVINGS, MONEYMRKT, CREDITLINE
+    }
 
-	/**
-	 * Name of this account
-	 */
-	private String mName;
+    /**
+     * Name of this account
+     */
+    private String mName;
 
     /**
      * Fully qualified name of this account including the parent hierarchy.
@@ -70,32 +72,32 @@
      */
     private String mFullName;
 
-	/**
-	 * Account description
-	 */
-	private String mDescription = "";
+    /**
+     * Account description
+     */
+    private String mDescription = "";
 
-	/**
-	 * Commodity used by this account
-	 */
-	private Commodity mCommodity;
+    /**
+     * Commodity used by this account
+     */
+    private Commodity mCommodity;
 
 
-	/**
-	 * Type of account
-	 * Defaults to {@link AccountType#CASH}
-	 */
-	private AccountType mAccountType = AccountType.CASH;
+    /**
+     * Type of account
+     * Defaults to {@link AccountType#CASH}
+     */
+    private AccountType mAccountType = AccountType.CASH;
 
-	/**
-	 * List of transactions in this account
-	 */
-	private List<Transaction> mTransactionsList = new ArrayList<>();
+    /**
+     * List of transactions in this account
+     */
+    private List<Transaction> mTransactionsList = new ArrayList<>();
 
-	/**
-	 * Account UID of the parent account. Can be null
-	 */
-	private String mParentAccountUID;
+    /**
+     * Account UID of the parent account. Can be null
+     */
+    private String mParentAccountUID;
 
     /**
      * Save UID of a default account for transfers.
@@ -124,54 +126,54 @@
      */
     private boolean mIsHidden;
 
-	/**
-	 * An extra key for passing the currency code (according ISO 4217) in an intent
-	 */
-	public static final String EXTRA_CURRENCY_CODE 	= "org.gnucash.android.extra.currency_code";
-
-	/**
-	 * Extra key for passing the unique ID of the parent account when creating a
-	 * new account using Intents
-	 */
-	public static final String EXTRA_PARENT_UID 	= "org.gnucash.android.extra.parent_uid";
-
-	/**
-	 * Constructor
-	 * Creates a new account with the default currency and a generated unique ID
-	 * @param name Name of the account
-	 */
-	public Account(String name) {
-		setName(name);
-        this.mFullName  = mName;
-		setCommodity(Commodity.DEFAULT_COMMODITY);
-	}
-
-	/**
-	 * Overloaded constructor
-	 * @param name Name of the account
-	 * @param commodity {@link Commodity} to be used by transactions in this account
-	 */
-	public Account(String name, @NonNull Commodity commodity){
-		setName(name);
-        this.mFullName  = mName;
-		setCommodity(commodity);
-	}
-
-	/**
-	 * Sets the name of the account
-	 * @param name String name of the account
-	 */
-	public void setName(String name) {
-		this.mName = name.trim();
-	}
-
-	/**
-	 * Returns the name of the account
-	 * @return String containing name of the account
-	 */
-	public String getName() {
-		return mName;
-	}
+    /**
+     * An extra key for passing the currency code (according ISO 4217) in an intent
+     */
+    public static final String EXTRA_CURRENCY_CODE = "org.gnucash.android.extra.currency_code";
+
+    /**
+     * Extra key for passing the unique ID of the parent account when creating a
+     * new account using Intents
+     */
+    public static final String EXTRA_PARENT_UID = "org.gnucash.android.extra.parent_uid";
+
+    /**
+     * Constructor
+     * Creates a new account with the default currency and a generated unique ID
+     * @param name Name of the account
+     */
+    public Account(String name) {
+        setName(name);
+        this.mFullName = mName;
+        setCommodity(Commodity.DEFAULT_COMMODITY);
+    }
+
+    /**
+     * Overloaded constructor
+     * @param name      Name of the account
+     * @param commodity {@link Commodity} to be used by transactions in this account
+     */
+    public Account(String name, @NonNull Commodity commodity) {
+        setName(name);
+        this.mFullName = mName;
+        setCommodity(commodity);
+    }
+
+    /**
+     * Sets the name of the account
+     * @param name String name of the account
+     */
+    public void setName(String name) {
+        this.mName = name.trim();
+    }
+
+    /**
+     * Returns the name of the account
+     * @return String containing name of the account
+     */
+    public String getName() {
+        return mName;
+    }
 
     /**
      * Returns the full name of this account.
@@ -190,87 +192,87 @@ public void setFullName(String fullName) {
         this.mFullName = fullName;
     }
 
-	/**
-	 * Returns the account description
-	 * @return String with description
-	 */
-	public String getDescription() {
-		return mDescription;
-	}
-
-	/**
-	 * Sets the account description
-	 * @param description Account description
-	 */
-	public void setDescription(@NonNull String description) {
-		this.mDescription = description;
-	}
-
-	/**
-	 * Get the type of account
-	 * @return {@link AccountType} type of account
-	 */
-	public AccountType getAccountType() {
-		return mAccountType;
-	}
-
-	/**
-	 * Sets the type of account
-	 * @param mAccountType Type of account
-	 * @see AccountType
-	 */
-	public void setAccountType(AccountType mAccountType) {
-		this.mAccountType = mAccountType;
-	}
-
-	/**
-	 * Adds a transaction to this account
-	 * @param transaction {@link Transaction} to be added to the account
-	 */
-	public void addTransaction(Transaction transaction){
-		transaction.setCommodity(mCommodity);
-		mTransactionsList.add(transaction);
-	}
-
-	/**
-	 * Sets a list of transactions for this account.
-	 * Overrides any previous transactions with those in the list.
-	 * The account UID and currency of the transactions will be set to the unique ID
-	 * and currency of the account respectively
-	 * @param transactionsList List of {@link Transaction}s to be set.
-	 */
-	public void setTransactions(List<Transaction> transactionsList){
-		this.mTransactionsList = transactionsList;
-	}
-
-	/**
-	 * Returns a list of transactions for this account
-	 * @return Array list of transactions for the account
-	 */
-	public List<Transaction> getTransactions(){
-		return mTransactionsList;
-	}
-
-	/**
-	 * Returns the number of transactions in this account
-	 * @return Number transactions in account
-	 */
-	public int getTransactionCount(){
-		return mTransactionsList.size();
-	}
-
-	/**
-	 * Returns the aggregate of all transactions in this account.
-	 * It takes into account debit and credit amounts, it does not however consider sub-accounts
-	 * @return {@link Money} aggregate amount of all transactions in account.
-	 */
-	public Money getBalance(){
-		Money balance = Money.createZeroInstance(mCommodity.getCurrencyCode());
+    /**
+     * Returns the account description
+     * @return String with description
+     */
+    public String getDescription() {
+        return mDescription;
+    }
+
+    /**
+     * Sets the account description
+     * @param description Account description
+     */
+    public void setDescription(@NonNull String description) {
+        this.mDescription = description;
+    }
+
+    /**
+     * Get the type of account
+     * @return {@link AccountType} type of account
+     */
+    public AccountType getAccountType() {
+        return mAccountType;
+    }
+
+    /**
+     * Sets the type of account
+     * @param mAccountType Type of account
+     * @see AccountType
+     */
+    public void setAccountType(AccountType mAccountType) {
+        this.mAccountType = mAccountType;
+    }
+
+    /**
+     * Adds a transaction to this account
+     * @param transaction {@link Transaction} to be added to the account
+     */
+    public void addTransaction(Transaction transaction) {
+        transaction.setCommodity(mCommodity);
+        mTransactionsList.add(transaction);
+    }
+
+    /**
+     * Sets a list of transactions for this account.
+     * Overrides any previous transactions with those in the list.
+     * The account UID and currency of the transactions will be set to the unique ID
+     * and currency of the account respectively
+     * @param transactionsList List of {@link Transaction}s to be set.
+     */
+    public void setTransactions(List<Transaction> transactionsList) {
+        this.mTransactionsList = transactionsList;
+    }
+
+    /**
+     * Returns a list of transactions for this account
+     * @return Array list of transactions for the account
+     */
+    public List<Transaction> getTransactions() {
+        return mTransactionsList;
+    }
+
+    /**
+     * Returns the number of transactions in this account
+     * @return Number transactions in account
+     */
+    public int getTransactionCount() {
+        return mTransactionsList.size();
+    }
+
+    /**
+     * Returns the aggregate of all transactions in this account.
+     * It takes into account debit and credit amounts, it does not however consider sub-accounts
+     * @return {@link Money} aggregate amount of all transactions in account.
+     */
+    public Money getBalance() {
+        Money balance = Money.createZeroInstance(mCommodity.getCurrencyCode());
         for (Transaction transaction : mTransactionsList) {
             balance.add(transaction.getBalance(getUID()));
-		}
-		return balance;
-	}
+        }
+        return balance;
+    }
 
     /**
      * Returns the color of the account.
@@ -280,17 +282,17 @@ public int getColor() {
         return mColor;
     }
 
-	/**
-	 * Sets the color of the account.
-	 * @param color Color as an int as returned by {@link Color}.
-	 * @throws java.lang.IllegalArgumentException if the color is transparent,
-	 *   which is not supported.
-	 */
-	public void setColor(int color) {
-		if (Color.alpha(color) < 255)
-			throw new IllegalArgumentException("Transparent colors are not supported: " + color);
-		mColor = color;
-	}
+    /**
+     * Sets the color of the account.
+     * @param color Color as an int as returned by {@link Color}.
+     * @throws java.lang.IllegalArgumentException if the color is transparent,
+     *   which is not supported.
+     */
+    public void setColor(int color) {
+        if (Color.alpha(color) < 255)
+            throw new IllegalArgumentException("Transparent colors are not supported: " + color);
+        mColor = color;
+    }
 
     /**
      * Sets the color of the account.
@@ -298,7 +300,7 @@ public void setColor(int color) {
      * @throws java.lang.IllegalArgumentException if the color code is not properly formatted or
 	 *   the color is transparent.
      */
-	//TODO: Allow use of #aarrggbb format as well
+    //TODO: Allow use of #aarrggbb format as well
     public void setColor(@NonNull String colorCode) {
         setColor(Color.parseColor(colorCode));
     }
@@ -319,44 +321,44 @@ public void setFavorite(boolean isFavorite) {
         this.mIsFavorite = isFavorite;
     }
 
-	/**
-	 * Return the commodity for this account
-	 */
-	@NonNull
-	public Commodity getCommodity(){
-		return mCommodity;
-	}
-
-	/**
-	 * Sets the commodity of this account
-	 * @param commodity Commodity of the account
-	 */
-	public void setCommodity(@NonNull Commodity commodity){
-		this.mCommodity = commodity;
-		//todo: should we also change commodity of transactions? Transactions can have splits from different accounts
-	}
-
-	/**
-	 * Sets the Unique Account Identifier of the parent account
-	 * @param parentUID String Unique ID of parent account
-	 */
-	public void setParentUID(String parentUID){
-		mParentAccountUID = parentUID;
-	}
-	
-	/**
-	 * Returns the Unique Account Identifier of the parent account
-	 * @return String Unique ID of parent account
-	 */
-	public String getParentUID() {
-		return mParentAccountUID;
-	}
+    /**
+     * Return the commodity for this account
+     */
+    @NonNull
+    public Commodity getCommodity() {
+        return mCommodity;
+    }
+
+    /**
+     * Sets the commodity of this account
+     * @param commodity Commodity of the account
+     */
+    public void setCommodity(@NonNull Commodity commodity) {
+        this.mCommodity = commodity;
+        //todo: should we also change commodity of transactions? Transactions can have splits from different accounts
+    }
+
+    /**
+     * Sets the Unique Account Identifier of the parent account
+     * @param parentUID String Unique ID of parent account
+     */
+    public void setParentUID(String parentUID) {
+        mParentAccountUID = parentUID;
+    }
+
+    /**
+     * Returns the Unique Account Identifier of the parent account
+     * @return String Unique ID of parent account
+     */
+    public String getParentUID() {
+        return mParentAccountUID;
+    }
 
     /**
      * Returns <code>true</code> if this account is a placeholder account, <code>false</code> otherwise.
      * @return <code>true</code> if this account is a placeholder account, <code>false</code> otherwise
      */
-    public boolean isPlaceholderAccount(){
+    public boolean isPlaceholderAccount() {
         return mIsPlaceholderAccount;
     }
 
@@ -365,7 +367,7 @@ public boolean isPlaceholderAccount(){
      * <p>Hidden accounts are not visible in the UI</p>
      * @return <code>true</code> if the account is hidden, <code>false</code> otherwise.
      */
-    public boolean isHidden(){
+    public boolean isHidden() {
         return mIsHidden;
     }
 
@@ -374,7 +376,7 @@ public boolean isHidden(){
      * <p>Hidden accounts are not visible in the UI</p>
      * @param hidden boolean specifying is hidden or not
      */
-    public void setHidden(boolean hidden){
+    public void setHidden(boolean hidden) {
         this.mIsHidden = hidden;
     }
 
@@ -383,7 +385,7 @@ public void setHidden(boolean hidden){
      * Placeholder accounts cannot have transactions
      * @param isPlaceholder Boolean flag indicating if the account is a placeholder account or not
      */
-    public void setPlaceHolderFlag(boolean isPlaceholder){
+    public void setPlaceHolderFlag(boolean isPlaceholder) {
         mIsPlaceholderAccount = isPlaceholder;
     }
 
@@ -405,117 +407,117 @@ public void setDefaultTransferAccountUID(String defaultTransferAccountUID) {
 
 
     /**
-	 * Maps the <code>accountType</code> to the corresponding account type.
-	 * <code>accountType</code> have corresponding values to GnuCash desktop
-	 * @param accountType {@link AccountType} of an account
-	 * @return Corresponding {@link OfxAccountType} for the <code>accountType</code>
-	 * @see AccountType
-	 * @see OfxAccountType
-	 */
-    public static OfxAccountType convertToOfxAccountType(AccountType accountType){
-		switch (accountType) {
-		case CREDIT:
-		case LIABILITY:
-			return OfxAccountType.CREDITLINE;
-			
-		case CASH:
-		case INCOME:
-		case EXPENSE:
-		case PAYABLE:
-		case RECEIVABLE:
-			return OfxAccountType.CHECKING;
-			
-		case BANK:
-		case ASSET:
-			return OfxAccountType.SAVINGS;
-			
-		case MUTUAL:
-		case STOCK:
-		case EQUITY:
-		case CURRENCY:
-			return OfxAccountType.MONEYMRKT;
-
-		default:
-			return OfxAccountType.CHECKING;
-		}
-	}
-	
-	/**
-	 * Converts this account's transactions into XML and adds them to the DOM document
-	 * @param doc XML DOM document for the OFX data
-	 * @param parent Parent node to which to add this account's transactions in XML
-	 * @param exportStartTime Time from which to export transactions which are created/modified after
-	 */
-	public void toOfx(Document doc, Element parent, Timestamp exportStartTime){
-		Element currency = doc.createElement(OfxHelper.TAG_CURRENCY_DEF);
-		currency.appendChild(doc.createTextNode(mCommodity.getCurrencyCode()));
-		
-		//================= BEGIN BANK ACCOUNT INFO (BANKACCTFROM) =================================
-		
-		Element bankId = doc.createElement(OfxHelper.TAG_BANK_ID);
-		bankId.appendChild(doc.createTextNode(OfxHelper.APP_ID));
-		
-		Element acctId = doc.createElement(OfxHelper.TAG_ACCOUNT_ID);
-		acctId.appendChild(doc.createTextNode(getUID()));
-		
-		Element accttype = doc.createElement(OfxHelper.TAG_ACCOUNT_TYPE);
-		String ofxAccountType = convertToOfxAccountType(mAccountType).toString();
-		accttype.appendChild(doc.createTextNode(ofxAccountType));
-		
-		Element bankFrom = doc.createElement(OfxHelper.TAG_BANK_ACCOUNT_FROM);
-		bankFrom.appendChild(bankId);
-		bankFrom.appendChild(acctId);
-		bankFrom.appendChild(accttype);
-		
-		//================= END BANK ACCOUNT INFO ============================================
-		
-		
-		//================= BEGIN ACCOUNT BALANCE INFO =================================
-		String balance = getBalance().toPlainString();
-		String formattedCurrentTimeString = OfxHelper.getFormattedCurrentTime();
-		
-		Element balanceAmount = doc.createElement(OfxHelper.TAG_BALANCE_AMOUNT);
-		balanceAmount.appendChild(doc.createTextNode(balance));			
-		Element dtasof = doc.createElement(OfxHelper.TAG_DATE_AS_OF);
-		dtasof.appendChild(doc.createTextNode(formattedCurrentTimeString));
-		
-		Element ledgerBalance = doc.createElement(OfxHelper.TAG_LEDGER_BALANCE);
-		ledgerBalance.appendChild(balanceAmount);
-		ledgerBalance.appendChild(dtasof);
-		
-		//================= END ACCOUNT BALANCE INFO =================================
-		
-		
-		//================= BEGIN TIME PERIOD INFO =================================
-		
-		Element dtstart = doc.createElement(OfxHelper.TAG_DATE_START);
-		dtstart.appendChild(doc.createTextNode(formattedCurrentTimeString));
-		
-		Element dtend = doc.createElement(OfxHelper.TAG_DATE_END);
-		dtend.appendChild(doc.createTextNode(formattedCurrentTimeString));
-		
-		//================= END TIME PERIOD INFO =================================
-		
-		
-		//================= BEGIN TRANSACTIONS LIST =================================
-		Element bankTransactionsList = doc.createElement(OfxHelper.TAG_BANK_TRANSACTION_LIST);
-		bankTransactionsList.appendChild(dtstart);
-		bankTransactionsList.appendChild(dtend);
-
-		for (Transaction transaction : mTransactionsList) {
-			if (transaction.getModifiedTimestamp().before(exportStartTime))
-				continue;
+     * Maps the <code>accountType</code> to the corresponding account type.
+     * <code>accountType</code> have corresponding values to GnuCash desktop
+     * @param accountType {@link AccountType} of an account
+     * @return Corresponding {@link OfxAccountType} for the <code>accountType</code>
+     * @see AccountType
+     * @see OfxAccountType
+     */
+    public static OfxAccountType convertToOfxAccountType(AccountType accountType) {
+        switch (accountType) {
+            case CREDIT:
+            case LIABILITY:
+                return OfxAccountType.CREDITLINE;
+
+            case CASH:
+            case INCOME:
+            case EXPENSE:
+            case PAYABLE:
+            case RECEIVABLE:
+                return OfxAccountType.CHECKING;
+
+            case BANK:
+            case ASSET:
+                return OfxAccountType.SAVINGS;
+
+            case MUTUAL:
+            case STOCK:
+            case EQUITY:
+            case CURRENCY:
+                return OfxAccountType.MONEYMRKT;
+
+            default:
+                return OfxAccountType.CHECKING;
+        }
+    }
+
+    /**
+     * Converts this account's transactions into XML and adds them to the DOM document
+     * @param doc             XML DOM document for the OFX data
+     * @param parent          Parent node to which to add this account's transactions in XML
+     * @param exportStartTime Time from which to export transactions which are created/modified after
+     */
+    public void toOfx(Document doc, Element parent, Timestamp exportStartTime) {
+        Element currency = doc.createElement(OfxHelper.TAG_CURRENCY_DEF);
+        currency.appendChild(doc.createTextNode(mCommodity.getCurrencyCode()));
+
+        //================= BEGIN BANK ACCOUNT INFO (BANKACCTFROM) =================================
+
+        Element bankId = doc.createElement(OfxHelper.TAG_BANK_ID);
+        bankId.appendChild(doc.createTextNode(OfxHelper.APP_ID));
+
+        Element acctId = doc.createElement(OfxHelper.TAG_ACCOUNT_ID);
+        acctId.appendChild(doc.createTextNode(getUID()));
+
+        Element accttype = doc.createElement(OfxHelper.TAG_ACCOUNT_TYPE);
+        String ofxAccountType = convertToOfxAccountType(mAccountType).toString();
+        accttype.appendChild(doc.createTextNode(ofxAccountType));
+
+        Element bankFrom = doc.createElement(OfxHelper.TAG_BANK_ACCOUNT_FROM);
+        bankFrom.appendChild(bankId);
+        bankFrom.appendChild(acctId);
+        bankFrom.appendChild(accttype);
+
+        //================= END BANK ACCOUNT INFO ============================================
+
+
+        //================= BEGIN ACCOUNT BALANCE INFO =================================
+        String balance = getBalance().toPlainString();
+        String formattedCurrentTimeString = OfxHelper.getFormattedCurrentTime();
+
+        Element balanceAmount = doc.createElement(OfxHelper.TAG_BALANCE_AMOUNT);
+        balanceAmount.appendChild(doc.createTextNode(balance));
+        Element dtasof = doc.createElement(OfxHelper.TAG_DATE_AS_OF);
+        dtasof.appendChild(doc.createTextNode(formattedCurrentTimeString));
+
+        Element ledgerBalance = doc.createElement(OfxHelper.TAG_LEDGER_BALANCE);
+        ledgerBalance.appendChild(balanceAmount);
+        ledgerBalance.appendChild(dtasof);
+
+        //================= END ACCOUNT BALANCE INFO =================================
+
+
+        //================= BEGIN TIME PERIOD INFO =================================
+
+        Element dtstart = doc.createElement(OfxHelper.TAG_DATE_START);
+        dtstart.appendChild(doc.createTextNode(formattedCurrentTimeString));
+
+        Element dtend = doc.createElement(OfxHelper.TAG_DATE_END);
+        dtend.appendChild(doc.createTextNode(formattedCurrentTimeString));
+
+        //================= END TIME PERIOD INFO =================================
+
+
+        //================= BEGIN TRANSACTIONS LIST =================================
+        Element bankTransactionsList = doc.createElement(OfxHelper.TAG_BANK_TRANSACTION_LIST);
+        bankTransactionsList.appendChild(dtstart);
+        bankTransactionsList.appendChild(dtend);
+
+        for (Transaction transaction : mTransactionsList) {
+            if (transaction.getModifiedTimestamp().before(exportStartTime))
+                continue;
             bankTransactionsList.appendChild(transaction.toOFX(doc, getUID()));
-		}		
-		//================= END TRANSACTIONS LIST =================================
-					
-		Element statementTransactions = doc.createElement(OfxHelper.TAG_STATEMENT_TRANSACTIONS);
-		statementTransactions.appendChild(currency);
-		statementTransactions.appendChild(bankFrom);
-		statementTransactions.appendChild(bankTransactionsList);
-		statementTransactions.appendChild(ledgerBalance);
-		
-		parent.appendChild(statementTransactions);
-				
-	}
+        }
+        //================= END TRANSACTIONS LIST =================================
+
+        Element statementTransactions = doc.createElement(OfxHelper.TAG_STATEMENT_TRANSACTIONS);
+        statementTransactions.appendChild(currency);
+        statementTransactions.appendChild(bankFrom);
+        statementTransactions.appendChild(bankTransactionsList);
+        statementTransactions.appendChild(ledgerBalance);
+
+        parent.appendChild(statementTransactions);
+
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
index dd0e77ee..2daf8244 100644
--- a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
+++ b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
@@ -29,25 +29,26 @@
 
 /**
  * Broadcast receiver responsible for creating {@link Account}s received through intents.
- * In order to create an <code>Account</code>, you need to broadcast an {@link Intent} with arguments 
- * for the name, currency and optionally, a unique identifier for the account (which should be unique to Gnucash) 
+ * In order to create an <code>Account</code>, you need to broadcast an {@link Intent} with arguments
+ * for the name, currency and optionally, a unique identifier for the account (which should be unique to Gnucash)
  * of the Account to be created. Also remember to set the right mime type so that Android can properly route the Intent
- * <b>Note</b> This Broadcast receiver requires the permission "org.gnucash.android.permission.CREATE_ACCOUNT" 
+ * <b>Note</b> This Broadcast receiver requires the permission "org.gnucash.android.permission.CREATE_ACCOUNT"
  * in order to be able to use Intents to create accounts. So remember to declare it in your manifest
+ *
  * @author Ngewi Fet <ngewif@gmail.com>
  * @see {@link Account#EXTRA_CURRENCY_CODE}, {@link Account#MIME_TYPE} {@link Intent#EXTRA_TITLE}, {@link Intent#EXTRA_UID}
  */
 public class AccountCreator extends BroadcastReceiver {
 
-	@Override
-	public void onReceive(Context context, Intent intent) {
-		Log.i("Gnucash", "Received account creation intent");
-		Bundle args = intent.getExtras();		
-		
-		Account account = new Account(args.getString(Intent.EXTRA_TITLE));
-		account.setParentUID(args.getString(Account.EXTRA_PARENT_UID));
-		
-		String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);				
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        Log.i("Gnucash", "Received account creation intent");
+        Bundle args = intent.getExtras();
+
+        Account account = new Account(args.getString(Intent.EXTRA_TITLE));
+        account.setParentUID(args.getString(Account.EXTRA_PARENT_UID));
+
+        String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);
         if (currencyCode != null) {
             Commodity commodity = Commodity.getInstance(currencyCode);
             if (commodity != null) {
@@ -56,13 +57,13 @@ public void onReceive(Context context, Intent intent) {
                 throw new IllegalArgumentException("Commodity with '" + currencyCode
                                         + "' currency code not found in the database");
             }
-		}
-		
-		String uid = args.getString(Intent.EXTRA_UID);
-		if (uid != null)
-			account.setUID(uid);
-		
-		AccountsDbAdapter.getInstance().addRecord(account, DatabaseAdapter.UpdateMethod.insert);
-	}
+        }
+
+        String uid = args.getString(Intent.EXTRA_UID);
+        if (uid != null)
+            account.setUID(uid);
+
+        AccountsDbAdapter.getInstance().addRecord(account, DatabaseAdapter.UpdateMethod.insert);
+    }
 
 }
