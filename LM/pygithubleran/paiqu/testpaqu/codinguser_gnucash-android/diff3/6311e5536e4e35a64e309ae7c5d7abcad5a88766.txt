From 3dde0ab4d1ac9a6b4bf23cf8f8454ea3e40db8d8 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 22 Jul 2014 18:58:51 +0200
Subject: [PATCH 01/18] Introduces multiple splits per transaction

Since transactions are at the core of this app, this commit touches almost all subsystems and is therefore huge.
Transactions are now composed of multiple splits, which belong to different accounts and are no longer bound to accounts,
nor is the money amount bound to the transaction itself.
Transaction serve just as aggregators for splits which contain the amount and the account to which it belongs.
Splits store the amounts as absolute values and then separately the kind - CREDIT/DEBIT - of the split.

* Introduced a new Split editor for the creation and editing of splits
* Migrate the old database format to the new format with a separate table for splits.
* Updated processes for moving, creating, exporting, deleting transactions to work with splits
* Updated computation of account and transaction balances to be in line with accounting principles (now for real, not the fiasco that was v1.3.2) ;)
* Use account specific labels for CREDIT/DEBIT instead of just generic "debit" and "credit"
* Updated color (red/green) display to match movement in the account, and not a representation of the side of the split
* Introduced new format for sending Transactions through Intents (while maintaining backwards compatibility)
* (Experimental): Import complete GnuCash XML files (accounts and transactions only)
* Back up transactions in an XML format (similar to GnuCash XML) called .gnca (Gnucash Android)
* Extensive code refactoring for
 - Better modularity of transaction exports (and ease introduction of new formats),
   - Cleaner database schema and reduction of overlap and redundancies
 - Easier database migrations during future update (with reduced risk of data loss)
* Bumped version numbers to version 1.4.0-SNAPSHOT

A few more commits need to go in before this baby is ready for beta.
TODO: This commit completely breaks transaction tests.
---
 app/AndroidManifest.xml                            |   4 +-
 app/pom.xml                                        |   2 +-
 app/res/drawable-hdpi/content_split_holo_light.png | Bin 0 -> 1697 bytes
 app/res/drawable-mdpi/content_split_holo_light.png | Bin 0 -> 1450 bytes
 .../drawable-xhdpi/content_split_holo_light.png    | Bin 0 -> 1954 bytes
 app/res/layout/dialog_split_editor.xml             |  75 +++
 app/res/layout/fragment_new_transaction.xml        |  26 +-
 app/res/layout/horizontal_line.xml                 |   8 +
 app/res/layout/item_split_entry.xml                |  90 +++
 app/res/layout/list_item_scheduled_trxn.xml        |  50 ++
 app/res/values-de/strings.xml                      |  21 +-
 app/res/values-el/strings.xml                      |  20 +-
 app/res/values-es-rMX/strings.xml                  |  20 +-
 app/res/values-es/strings.xml                      |  20 +-
 app/res/values-fr/strings.xml                      |  20 +-
 app/res/values-hu/strings.xml                      |  20 +-
 app/res/values-it/strings.xml                      |  20 +-
 app/res/values-nb/strings.xml                      |  20 +-
 app/res/values-nl/strings.xml                      |  20 +-
 app/res/values-pt-rBR/strings.xml                  |  20 +-
 app/res/values-ru/strings.xml                      |  20 +-
 app/res/values-zh/strings.xml                      |  20 +-
 app/res/values/strings.xml                         |  22 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 543 +++++++--------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 157 ++++-
 app/src/org/gnucash/android/db/DatabaseHelper.java | 364 ++++------
 app/src/org/gnucash/android/db/DatabaseSchema.java |  93 +++
 .../org/gnucash/android/db/MigrationHelper.java    | 178 +++++
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 431 ++++++++++++
 .../gnucash/android/db/TransactionsDbAdapter.java  | 518 ++++++---------
 .../android/export/ExportDialogFragment.java       |  30 +-
 .../org/gnucash/android/export/ExportFormat.java   |  20 +-
 app/src/org/gnucash/android/export/Exporter.java   |  89 +++
 .../org/gnucash/android/export/ExporterTask.java   | 146 +---
 .../gnucash/android/export/ofx/OfxExporter.java    | 133 +++-
 .../gnucash/android/export/qif/QifExporter.java    |  39 +-
 .../org/gnucash/android/export/qif/QifHelper.java  |  12 +-
 .../gnucash/android/export/xml/GncXmlExporter.java | 153 +++++
 .../gnucash/android/export/xml/GncXmlHelper.java   | 109 +++
 .../gnucash/android/importer/GncXmlHandler.java    | 344 ++++++++++
 .../gnucash/android/importer/GncXmlImportTask.java |  68 ++
 app/src/org/gnucash/android/model/Account.java     | 205 +++---
 app/src/org/gnucash/android/model/AccountType.java |  39 ++
 app/src/org/gnucash/android/model/Money.java       |  12 +-
 app/src/org/gnucash/android/model/Split.java       | 229 +++++++
 app/src/org/gnucash/android/model/Transaction.java | 739 ++++++++++++---------
 .../org/gnucash/android/model/TransactionType.java |  39 ++
 .../android/receivers/TransactionRecorder.java     |  84 ++-
 app/src/org/gnucash/android/ui/UxArgument.java     |   5 +
 .../android/ui/account/AccountFormFragment.java    |  56 +-
 .../android/ui/account/AccountsActivity.java       |  55 +-
 .../android/ui/account/AccountsListFragment.java   |  62 +-
 .../ui/settings/AccountPreferencesFragment.java    |   4 +-
 .../android/ui/settings/SettingsActivity.java      |   3 +-
 .../ScheduledTransactionsListFragment.java         |  54 +-
 .../ui/transaction/TransactionFormFragment.java    | 522 ++++++++-------
 .../ui/transaction/TransactionsActivity.java       |  23 +-
 .../ui/transaction/TransactionsListFragment.java   |  63 +-
 .../{ => dialog}/BulkMoveDialogFragment.java       |  16 +-
 .../dialog/SplitEditorDialogFragment.java          | 380 +++++++++++
 .../android/ui/util/AccountBalanceTask.java        |  78 +++
 .../android/ui/util/AmountInputFormatter.java      | 102 +++
 .../ui/util/TransactionTypeToggleButton.java       | 162 +++++
 .../android/util/GnucashAccountXmlHandler.java     | 211 ------
 .../util/QualifiedAccountNameCursorAdapter.java    |   3 +-
 integration-tests/AndroidManifest.xml              |   2 +-
 integration-tests/pom.xml                          |   2 +-
 .../android/test/db/AccountsDbAdapterTest.java     |  15 +-
 .../android/test/db/TransactionsDbAdapterTest.java |   6 +-
 .../android/test/ui/AccountsActivityTest.java      |   6 +-
 .../android/test/ui/ExportTransactionsTest.java    |  12 +-
 .../android/test/ui/TransactionsActivityTest.java  |  10 +-
 pom.xml                                            |   4 +-
 73 files changed, 4872 insertions(+), 2276 deletions(-)
 create mode 100644 app/res/drawable-hdpi/content_split_holo_light.png
 create mode 100644 app/res/drawable-mdpi/content_split_holo_light.png
 create mode 100644 app/res/drawable-xhdpi/content_split_holo_light.png
 create mode 100644 app/res/layout/dialog_split_editor.xml
 create mode 100644 app/res/layout/horizontal_line.xml
 create mode 100644 app/res/layout/item_split_entry.xml
 create mode 100644 app/res/layout/list_item_scheduled_trxn.xml
 create mode 100644 app/src/org/gnucash/android/db/DatabaseSchema.java
 create mode 100644 app/src/org/gnucash/android/db/MigrationHelper.java
 create mode 100644 app/src/org/gnucash/android/db/SplitsDbAdapter.java
 create mode 100644 app/src/org/gnucash/android/export/Exporter.java
 create mode 100644 app/src/org/gnucash/android/export/xml/GncXmlExporter.java
 create mode 100644 app/src/org/gnucash/android/export/xml/GncXmlHelper.java
 create mode 100644 app/src/org/gnucash/android/importer/GncXmlHandler.java
 create mode 100644 app/src/org/gnucash/android/importer/GncXmlImportTask.java
 create mode 100644 app/src/org/gnucash/android/model/AccountType.java
 create mode 100644 app/src/org/gnucash/android/model/Split.java
 create mode 100644 app/src/org/gnucash/android/model/TransactionType.java
 rename app/src/org/gnucash/android/ui/transaction/{ => dialog}/BulkMoveDialogFragment.java (85%)
 create mode 100644 app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
 create mode 100644 app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
 create mode 100644 app/src/org/gnucash/android/ui/util/AmountInputFormatter.java
 create mode 100644 app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
 delete mode 100644 app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 37fba268..238b4f54 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,10 +17,10 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="29"
+    android:versionCode="30"
     android:versionName="@string/app_version_name" >
 
-    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
+    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
     
     <permission-group 
         android:name="org.gnucash.android.permission.group.GNUCASH"
diff --git a/app/pom.xml b/app/pom.xml
index 18da0ae5..dc6bf27a 100644
--- a/app/pom.xml
+++ b/app/pom.xml
@@ -22,7 +22,7 @@
     <description>Gnucash Android companion application</description>
 
     <parent>
-        <version>1.3.2-SNAPSHOT</version>
+        <version>1.4.0-SNAPSHOT</version>
         <groupId>org.gnucash.android</groupId>
         <artifactId>gnucash-android-parent</artifactId>
     </parent>
diff --git a/app/res/drawable-hdpi/content_split_holo_light.png b/app/res/drawable-hdpi/content_split_holo_light.png
new file mode 100644
index 0000000000000000000000000000000000000000..6c6e551bab0b4848504ceb956562cc6cf0a211d4
GIT binary patch
literal 1697
zcmaJ?Yfuwc6kY_P2nY;V5CoRstCl3YApsMKn2-cw35E~_)KWsSc@&aOvWp}XtH4kc
zMC^|iref8mQY{u=MN|+F9}HD&DHI){JOq4<fK^MyYPA~#?2po&xqI$8bH499XYMXZ
zT(s+a-}wLlxQb%<QbIzuGmk|46X!fHB!nF%jphN>Hx@r26bCg|%msjxrOq$qj)d-H
zh)Ko(V8JEZv1>t(C<)^tT#$q(pej5|ZbAUA5=}!ukxs5gq=;N;F}5NR0ARmFD@($Y
z#IbAzs-wznK2)>LK%fC2BGPP-E7B1hOheRKJ%{|Lu8|CCl^k*+Qw)g>QHVwxlWjs0
zvg2fm>~sZ7Nse3tMwr<Ifeyjtpjnrp$Jk~Ld6Jh++-+tW8Ju*%(>dffNhOITU=(UX
zKqeKUD4;MH3}aAX2E<~pLO?nMLo}F9gTg5=#Ab%GAsC$c$V4=gQpJ|?g;TKzjYHPp
zxPeWhWo2bivqGt;Nlk-UEEWx-)97>x;X%PHdR%U%=&|5w20nr*Oj-l3MfISKQJ#io
z;v6!O>6;RCh8bEtHq|DgVKlScK!d4}t)yv3vH1U8b-EdE43{Er^Zid^OlC14G%13i
znI;7>I90GMlz|;(LgYAVlA&nEbQdKW6h|=)Y5=1Wm{b@P%N1I^%`%A)i`gPQhRgK|
zM8xNi2@a}Ot7J17^iUz67tZ8Cd>9tMEC$RHFnCd1ArlT~@Zf1IA5~=P5IsJPRldcp
zniXqX2AzS3%tuVxt%y=+LUrI|(QNJPxiDwto5Ct*&n0YDER9HpW*hClMm=pJ_Q!Ue
zSzJPyS$#xL?7N9r?33DwWdJZ|K*Z<DG*P2vtg23l&)Pn$kIVHEID0G<#4j=m4BTU0
zqYjRg5#6|(W|-!_`lhg5=tptzF6T)+E*>^=w_J35_P8RJEH57r(=pG$p{Ag7mQqne
z&!ZP(ZK>9FAD<h$ca~oIV&#rgN9U~AM~K!R7Ic18GcgjVcnt1oiA>pHH2b4M>*CIb
z;}aR0?ESf)opnjPQ*>*?Do^J_H-U<V;}c7V)h`PQ+`lG$axj!0<m<SM4@4RR#)^cw
zPQMm33~cQ2FS$MF(x(6F?s6H>^=ak_`)B<tG7#4>-J~ULb4|dR!Jvv<r!&8`o%Ja*
z2hoD;-PO(brlLZl^N*y8{QR@+&K4*CwRzmw=51z&+Cx`f`IimmTo)Vxu0QXpe_gWX
zgxhLnz&=%F!dUV=k0woh@lQX;b!5Bs)w>-?l~nsx%2YfDh;*PI#@7#VdO|aslgsnE
z1S;O)y&o^>zAuW{<JO*cM$;{?-Bi+HjVJLO_ujShy^Lkl2JC#7>3TET>f+_GBc$ov
zt@EvzFo&d$-QqX0?t=tA(5qN}TNh$z^bXONl2YUA^0yVe^GZ4LWlE$b=ZIBPx}JTF
zA5mCljSr>#IT)Q&{74bmU)R}QL;kBIB#<F+fSfPvavSZAYv^H1hrE-+>n|s28UvpU
zoR-Qw<_4z&#Rkvw_m5qw(aaUyJGB4mp26CaukVFj3<w-TkneK~7B4t>t)aMdNehE?
zc<Z9Xfv0A>I<nF=qS<r8sZCvc%D=Vm<=>mlPWgM)n*y!q>5lJK##L?KUZRFBSRTG-
zdHQ5!FW1|;b)t@BoZn{-^0L^w_l-E?nYt_Wjd}X2{9oP&st<k(w~jlghu5U+7Un)!
z3Y;r!c%W=Vd;Q9fb{uVbvF^CtPXDViW4@|8qPTKn&>z9T>fPi0s!>w!)#m%rz@3zq
zu560$!kEg>C$@j{VW`A+1ArtrO2Re(!*u9(@7Krnm$p>76x*Hvksyv=%}dSu2mZT$
APyhe`

literal 0
HcmV?d00001

diff --git a/app/res/drawable-mdpi/content_split_holo_light.png b/app/res/drawable-mdpi/content_split_holo_light.png
new file mode 100644
index 0000000000000000000000000000000000000000..7a3548ce2b9120ff816e7b48cbd0255b8a534076
GIT binary patch
literal 1450
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdz#^NA%Cx&(BWL^R}Ea{HEjtmSN
z`?>!lvI6;>1s;*b3=DjSL74G){)!Z!pk#?_L`iUdT1k0gQ7VIDN`6wRf@f}GdTLN=
zVoGJ<$y6H#24<Dakcg59UmvUF{9L_6kQ%*;+ybC(1_m4Zih{)C?9>v4q}24xJX@vr
zyZ0+8WTx0Eg`4^s_!c;)W@LI)6{QAO`Gq7`WhYyvDB0U7*i={n4aiL`NmQuF&B-ga
zs<2f8n`;GRgM{^!6u?SKvTc<hj*9RNP;kyKN>wn`Gtf;oFf&vzGto0NF|ahT)KM@p
zFf`CNG}1RP*EKY-GBvj{FjRm7C7^9ZDQQ+gE^bh}fIM5JjFOT9D}DX)@^Za$W4-*M
zbbUihOG|wNBYh(yU7!lx;>x^|#0uTKVr7^KE~&-IMVSR9nfZANAQKal@=Hr>m4GgV
zcp<j{ZfssLG?;(^reBd*pl_&W0P+${p|3A~rMbCq)x{-2sR;LCHMlsWvLIDID784h
zv?v)EacRmRs|u`~i&7Iy@{2<9^K)RK7?6=)l3$#WU!dR|Y^rCd;G3A7nFkU9>+top
z^2{qPNz6-5^>ndS0-B+hnVDi`YGP#U=HldJ>SW+zXy|HaX<}&UYU1SV=w@nYZsKGJ
z)9aF-T$-DjR|3<Ug3#-XQ!gkn<Q4#Jc1bPDEK5ysE6UGR0DIah6SrF|aheC!n}XXd
zjyUz|10ACeidv+oh6w@F4~Pj*xIhj(>8Iua(|ZvxVL#8wR08J0SDr48ArbCxr=Rr>
z36y9*e!|YB)kA<M>V;dAQzn!Bq237sERI`0`WIZ>RGW8u=k~cuTl0liELhOpS+*<i
zbgzP=tH{jw%b#Q3yJ#7wzuU{ac_zEuy<$D%;`)1^=M`^U8KLv+)ydW!*LvL=cCoLx
z(eks#PR_ODvGbkd-aq)Z8+a@X=x~4T`H97<fTjKMD;r}^CYgu%ce-Emp7FUQS0E|(
zU~NX3RQ=|cDH3YA4ar;h)jn(!|CcP1Kac0|5?+P&3eowGmGuvp)^vSe94VT@`JkLv
z@%#tYzQ>|_+OHdWOk=3OkXj&rd&=Gy`%2%OU0ubM$z1Vx`wuz&BxAV+XET|jcrSE`
zdP*O7|My5_P3!!N3aT-){A9Y)L{DsDQN8w2TI#_4&A(dKB;ROHUFq7uDC1In=<EHX
zrgM&`eyNI_w1@lMqUdvzFZj(r#DAlI`bFvADs>D0e&~<d%YEvjVE9Mjy5qs-{DNE;
zTIZG6zPS0GQzPto-2Ud=8C?MlVl_RJUt~W2CbatV^dBtV>_JIRjAjK=`ybsrZ}q=%
z{l#bAt{M$*7W}?@e%igFu<bXc?|gHLTE(fLy`y1Y%^kCAsxe1=LZlsRs$wUVeOW*6
z@EH}(2Uh1FOy5x@lCI{-@bOIfUGv3}ycvJ8uW<xCXV`fsp8a8x#d6I!aZp+4>FVdQ
I&MBb@0MX18H~;_u

literal 0
HcmV?d00001

diff --git a/app/res/drawable-xhdpi/content_split_holo_light.png b/app/res/drawable-xhdpi/content_split_holo_light.png
new file mode 100644
index 0000000000000000000000000000000000000000..dc7cf2b5b6127f6a680c696f8c05f802743ce67a
GIT binary patch
literal 1954
zcmaJ?Yfuwc6yER%wlpdN7Expkics^|O#+xmsv+SKCA`syh}mS95HZ=9ED*4rBFHO|
zTC@nZidIn2T9iQqTcx6+P$`TpVrw(#(7{4$i={FmDt4nn`=fMc?%sROobNl|x%b?;
zB{5Oqv^PE91OR|0jgZ8V^BUWjMJ4|yHQW2iiDHZk4*}}C7Y&n!gIXjL0YJkZ=Vyo`
zX}_V5*k}ZR*;j0XaviTjN#_D0R8GX>sYDiHzyJ}7D=|>2MbuavhM?KoJF#E@uwSZ4
zkP~uQq(FshS%@u$Wzy<NGynvzHt7*nI!1s>Os&xg=_6l#O$RlokiH>62FdhdEKL)U
zW5D8bq7qa&=_)=-U;Qo^Y!Z+JT8uzIlXjcVC@=}>FL?#z+U91{!IvRKx{&@#lw1}A
zig5!52CyKe3JQe5KpqR`L3|#c0dgQ1V#6FZ6vTufK|qiIg2C4xoy=xHQw4F7u-Car
zOGr;62)%&K&dSPSWpP=!LCuEwd_EiEusIwi8NoDW>j=ce)ERxI7$lfcWzgse4Xy)i
zjEEA?AcS;M>8ld7`e|C7@%1*58^$&vdN$00Y$Z(v%4Gi^s?|<M8;LmVAHDxcY)r`3
zW9&H0h-Vm7<iVx-*iz{QVgrT{xFG?@w@vM0Od3w$#xz_HisJ)VFepP*8lBDa5+Rcb
zq&g#k=v0_gBBYZXER6;g1n@ZAFi8kEAOw=Ya45{@!TeBOh*%UB00;3x;3=#GS7m51
z9WjMP|H1NR#M+uct0yx{FoPx&L&FTX7JON>K=WT(xFQk66?10fdyPeB)-p4eO^RXL
zj`m+iJ>??%$F`hqT+*0seN0F8yMb)%&QlGg<b4^CN<;~!l;1!7$s&tgbX{#7x!qy^
znN`}^;ud!~|H43du<1|V=t+vp<$a^{;1;)7Gri`cGN)#%d6%Jw`S|CjKQ?A&7QKJ}
zVB_un^jmlCPMqyYQm1yO+`ZU0@_18vYSN1Gwd*>5Ro1ti<XuY6Pt@d|r+)q&V5F@-
zM!D~KDlZ6(_qX=-rKUWuE>{+gdp1p;tY}#>JDj<0D~<=9_S}%dRqUz+uO*7SN3yFg
zyfyCIT61Yff8CJB!%dHdO~Xazz}(u^p*7S!M-$IdB-VOmfk#+Ty1N#bSW;+dQi5I?
ze$7t_1ejp?mW(O=yaIY<r{;-|?#Iq^0GBz}oFhG?;bv&-iAwh-#*Jf?S+3WLY09d)
z*2C)?A|K5)hJJt~*3;H7iYUrbIg?r<Z*=6|YxG#r0j?j+rwrACVustNSM6Xq!==lv
zzq(Mq^i+Q%n+j4p`giW+x(1qK^A_YmC5Ag&8F~bWKHK-pBqw2HL8T+Q>q+d5y`=gc
zm9TO75GlfgF&5HPNpo%Qt;0m23ojkPEnWi!iXC0M>ozc4IhO}sxfT8e-j**04h~<b
z%qdmOkDQMdbiH#Yx2E6xzOuH(M}BwAI_E}p^BInFvgh32_A8_h+z&f&Yq&1n$DPe}
zk)v(E)!Y<krCoFjw``eTRo(30U`ArA$EAraEGT!)?E~XEkw^5OgoQVbw&(Kmdgs@^
zOPyu)j&Au1oKVGVY1`p_bqAcpV|u@($iMRa$np-VgIF?nJ$1Oe#lPE9t!)0m_nd_}
zusba&+sks=HDQ}uuyp%klk`DJlGi8x(7i(@pJGR}xZ=1hyNigv80)>Kec?@E!^Q{m
zoZ2<pWx+0JfvNgq%X?6+NU-Xi$IE63;vZ5`TAmxdQ@Dy=Ue-5sy8mWbca{0``x%U*
zFYMb!Xbacx2P<y@fy*TCMP=^GU$(W@o!9jxIu>^4sb7S~p|x<3<7{<*>UhFTQQ7sL
zyuWu#QEXS0_~?l?b$O|We)GY3o&K9ok5@SlD0>ayCeg#1dq=AK{G*%vwEVYME^b=X
zxu4>;!pXrsS;*a)5k0AXa%S=n=^Hw)V7exzKTi(iIEYfe^${e0bDUEA=-TmPeGJ8c
zWS0Yh@HzA+fQYod{len(DAoyzzYw#Sdgj~{AHTj#&fUK@)~uuUboV$9B0!E`@gL8g
zjqCF<(U&MbQaZ{34!Ku2)~<|v-jecgZMJ9bhsEl=d|H$-q9Vl~w_n+~YKdv|nQzCc
k@)ta8hTCNqbmZ9JoXqCy?e_i-0^1uX4ULl2hbZ#?2B<OcuK)l5

literal 0
HcmV?d00001

diff --git a/app/res/layout/dialog_split_editor.xml b/app/res/layout/dialog_split_editor.xml
new file mode 100644
index 00000000..772b86e5
--- /dev/null
+++ b/app/res/layout/dialog_split_editor.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:orientation="vertical"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:paddingLeft="@dimen/dialog_padding"
+                android:paddingRight="@dimen/dialog_padding"
+                android:paddingTop="@dimen/dialog_padding">
+
+    <ScrollView android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_above="@+id/footer">
+        <LinearLayout android:id="@+id/split_list_layout"
+                      android:layout_width="match_parent"
+                      android:layout_height="wrap_content"
+                      android:orientation="vertical">
+            <!-- Split edit views will be added here at runtime-->
+        </LinearLayout>
+    </ScrollView>
+
+
+    <include layout="@layout/horizontal_line"
+             android:layout_width="match_parent"
+             android:layout_height="1dp"
+             android:layout_above="@id/footer"/>
+
+    <include layout="@layout/default_buttons"
+             android:id="@+id/default_buttons"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+             android:layout_alignParentBottom="true"/>
+
+    <TableLayout android:id="@+id/footer"
+                 android:layout_width="match_parent"
+                 android:layout_height="wrap_content"
+                 android:layout_above="@id/default_buttons">
+        <TableRow>
+            <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:textAppearance="?android:attr/textAppearanceSmall"
+                    android:gravity="center_vertical"
+                    android:text="Imbalance:"/>
+
+            <TextView android:id="@+id/imbalance_textview"
+                      android:layout_width="0dp"
+                      android:layout_height="match_parent"
+                      android:layout_weight="1"
+                      android:textAppearance="?android:attr/textAppearanceSmall"
+                      android:gravity="right|center_vertical"
+                      android:text="$200"/>
+        </TableRow>
+        <Button android:id="@+id/btn_add_split"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:drawableLeft="@drawable/content_new_holo_light"
+                android:text="Add split"/>
+
+    </TableLayout>
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/res/layout/fragment_new_transaction.xml b/app/res/layout/fragment_new_transaction.xml
index 674c549d..f5d84651 100644
--- a/app/res/layout/fragment_new_transaction.xml
+++ b/app/res/layout/fragment_new_transaction.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
- Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
@@ -65,15 +65,21 @@
 		        style="@style/ListItemText" />
 		    
 	       	       
-		    <ToggleButton android:id="@+id/input_transaction_type"
-		        android:layout_width="0dp"
-		        android:layout_weight="2"
-		        android:layout_height="wrap_content"
-		        android:textOn="@string/label_debit"
-		        android:textOff="@string/label_credit"
-		        android:textAppearance="?android:attr/textAppearanceMedium"
-		        android:textColor="@color/debit_red"
-		        android:checked="true" />
+		    <org.gnucash.android.ui.util.TransactionTypeToggleButton
+                    android:id="@+id/input_transaction_type"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:textOn="@string/label_debit"
+                    android:textOff="@string/label_credit"
+                    android:textAppearance="?android:attr/textAppearanceMedium"
+                    android:textColor="@color/debit_red"
+                    android:checked="true"/>
+
+            <Button android:id="@+id/btn_open_splits"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:drawableLeft="@drawable/content_split_holo_light" />
 		</LinearLayout>
         <LinearLayout
                 android:id="@+id/layout_double_entry"
diff --git a/app/res/layout/horizontal_line.xml b/app/res/layout/horizontal_line.xml
new file mode 100644
index 00000000..893ab4e1
--- /dev/null
+++ b/app/res/layout/horizontal_line.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<View xmlns:android="http://schemas.android.com/apk/res/android"
+      android:layout_width="match_parent"
+      android:layout_height="1dp"
+      android:layout_marginTop="@dimen/dialog_padding"
+      android:layout_marginBottom="@dimen/dialog_padding"
+      android:background="@color/light_gray"/>
\ No newline at end of file
diff --git a/app/res/layout/item_split_entry.xml b/app/res/layout/item_split_entry.xml
new file mode 100644
index 00000000..363563de
--- /dev/null
+++ b/app/res/layout/item_split_entry.xml
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:orientation="vertical">
+    <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+        <TextView
+                android:id="@+id/split_currency_symbol"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_marginBottom="@dimen/dialog_padding"
+                android:paddingRight="5dp"
+                android:gravity="center|right"
+                android:textColor="@color/debit_red"
+                android:textSize="22sp"
+                android:text="$"/>
+
+        <EditText
+                android:id="@+id/input_split_amount"
+                android:layout_width="0dp"
+                android:layout_weight="3"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="@dimen/dialog_padding"
+                android:hint="@string/label_transaction_amount"
+                android:inputType="number"
+                android:nextFocusDown="@+id/input_split_memo"
+                android:textColor="@color/debit_red"
+                style="@style/ListItemText"/>
+
+        <org.gnucash.android.ui.util.TransactionTypeToggleButton android:id="@+id/btn_split_type"
+                      android:layout_width="0dp"
+                      android:layout_weight="2"
+                      android:layout_height="wrap_content"
+                      android:textOn="@string/label_debit"
+                      android:textOff="@string/label_credit"
+                      android:textAppearance="?android:attr/textAppearanceMedium"
+                      android:textColor="@color/debit_red"
+                      android:checked="true"/>
+        <ImageButton android:id="@+id/btn_remove_split"
+                     android:layout_width="0dp"
+                     android:layout_height="wrap_content"
+                     android:layout_weight="1"
+                     android:src="@drawable/navigation_cancel_holo_light"/>
+    </LinearLayout>
+
+    <EditText android:id="@+id/input_split_memo"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:singleLine="false"
+              android:hint="@string/hint_split_memo"
+              android:inputType="textMultiLine|textCapSentences"
+              android:gravity="top" />
+
+    <Spinner
+            android:id="@+id/input_accounts_spinner"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+
+    <!-- Only serves to store the split UID for background processing. Not relevant to user-->
+    <TextView android:id="@+id/split_uid"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:visibility="gone"/>
+
+    <View
+          android:layout_width="match_parent"
+          android:layout_height="2dp"
+          android:layout_marginTop="@dimen/dialog_padding"
+          android:layout_marginBottom="@dimen/dialog_padding"
+          android:background="@color/abs__holo_blue_light"/>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/res/layout/list_item_scheduled_trxn.xml b/app/res/layout/list_item_scheduled_trxn.xml
new file mode 100644
index 00000000..94686947
--- /dev/null
+++ b/app/res/layout/list_item_scheduled_trxn.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<org.gnucash.android.ui.util.CheckableLinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                                                   android:layout_width="match_parent"
+                                                   android:layout_height="wrap_content"
+                                                   style="@style/ListItem"
+                                                   android:orientation="horizontal">
+
+        <CheckBox
+                android:id="@+id/checkbox_parent_account"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:focusable="false"
+                />
+
+        <include
+                layout="@layout/list_item_2_lines"
+                android:layout_height="wrap_content"
+                android:layout_width="0dp"
+                android:layout_weight="1"
+                android:layout_marginLeft="5dp"
+                />
+
+        <TextView
+                android:id="@+id/transaction_amount"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:singleLine="true"
+                android:ellipsize="end"
+                android:text="@string/label_transaction_amount"
+                android:minWidth="100dp"
+                android:gravity="right|center_vertical"
+                android:layout_marginRight="12dp"
+                style="@style/ListItemText"/>
+</org.gnucash.android.ui.util.CheckableLinearLayout>
\ No newline at end of file
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 920efe75..b29325bb 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -26,7 +26,6 @@
     <string name="label_account_name">Kontoname</string>
     <string name="btn_cancel">Abbrechen</string>
     <string name="btn_save">Speichern</string>
-    <string name="no_transactions_to_display">Keine Buchungen vorhanden</string>
     <string name="label_transaction_name">Beschreibung</string>
     <string name="label_transaction_amount">Betrag </string>
     <string name="title_add_transaction">Neue Buchung</string>
@@ -52,7 +51,7 @@
     <string name="title_export_dialog">Buchungen exportieren</string>
     <string name="option_export_all_transactions">Alle Buchungen exportieren</string>
     <string name="hint_export_choice">Auswhlen, um alle Buchungen zu exportieren. Andernfalls werden nur die neuen Buchungen seit letztem Export exportiert.</string>
-    <string name="error_exporting">Fehler beim Exportieren der OFX-Datei</string>    
+    <string name="toast_export_error">Fehler beim Exportieren der OFX-Datei</string>
     <string name="btn_export">Export</string>
     <string name="option_delete_after_export">L&#246;schen nach dem Exportieren</string>
     <string name="hint_delete_after_export">Alle exportierten Buchungen werden nach dem Export gelscht.</string>
@@ -395,4 +394,22 @@
     </string-array>
     <string name="title_scheduled_transactions">Eingeplante Buchungen</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="toast_error_exporting">Could not write OFX file to :\n</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 762d8e5a..b9662c1f 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name"> </string>
     <string name="btn_cancel"></string>
     <string name="btn_save"></string>
-    <string name="label_no_transactions_to_display">    </string>
     <string name="label_transaction_name"></string>
     <string name="label_transaction_amount"></string>
     <string name="title_add_transaction"> </string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">Export transactions</string>
     <string name="option_export_all_transactions">   </string>
     <string name="hint_export_choice">,          .          </string>
-    <string name="error_exporting">   OFX</string>    
+    <string name="toast_export_error">   OFX</string>
     <string name="btn_export"></string>
     <string name="option_delete_after_export">   </string>
     <string name="hint_delete_after_export">    ,       </string>
@@ -413,4 +412,21 @@
     </string-array>
     <string name="title_scheduled_transactions"> </string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 67f48e75..f0f543e3 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name">Nombre de la cuenta</string>
     <string name="btn_cancel">Cancelar</string>
     <string name="btn_save">Guardar</string>
-    <string name="label_no_transactions_to_display">No hay cuentas</string>
     <string name="label_transaction_name">Descripci&#243;n</string>
     <string name="label_transaction_amount">Monto</string>
     <string name="title_add_transaction">Nueva transacci&#243;n</string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
     <string name="hint_export_choice">Por omisi&#243;n, s&#243;lo las trasacciones nuevas ser&#225;n exportadas. Selecione esta opci&#243;n para exportar todas las transacciones</string>
-    <string name="error_exporting">Error al exportar los datos OFX</string>
+    <string name="toast_export_error">Error al exportar los datos OFX</string>
     <string name="btn_export">Exportar</string>
     <string name="option_delete_after_export">Borrar despu&#233;s de exportar</string>
     <string name="hint_delete_after_export">Todas las transacciones ser&#225;n borradas despu&#233;s de ser exportadas completamente</string>
@@ -398,4 +397,21 @@
     <string name="menu_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 45c2d80f..6650b4d7 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name">Nombre de la cuenta</string>
     <string name="btn_cancel">Cancelar</string>
     <string name="btn_save">Guardar</string>
-    <string name="label_no_transactions_to_display">No hay transacciones que mostrar</string>
     <string name="label_transaction_name">Descripci&#243;n</string>
     <string name="label_transaction_amount">Importe</string>
     <string name="title_add_transaction">Nueva transacci&#243;n</string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
     <string name="hint_export_choice">Por defecto solo las nuevas transacciones desde la &#250;ltima exportaci&#243;n ser&#225;n exportadas. Seleccione esta opci&#243;n para exportar todas las transacciones</string>
-    <string name="error_exporting">Error exportando datos OFX</string>    
+    <string name="toast_export_error">Error exportando datos OFX</string>
     <string name="btn_export">Exportar</string>
     <string name="option_delete_after_export">Borrar despu&#233;s de exportar</string>
     <string name="hint_delete_after_export">Todas las transacciones exportadas ser&#225;n borradas cuando la exportaci&#243;n haya terminado</string>
@@ -395,4 +394,21 @@
     <string name="menu_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 725607fd..2b9e8aa4 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name">Nom de compte</string>
     <string name="btn_cancel">Annuler</string>
     <string name="btn_save">Sauvegarder</string>
-    <string name="label_no_transactions_to_display">Aucune transaction &#224; afficher</string>
     <string name="label_transaction_name">Description</string>
     <string name="label_transaction_amount">Montant</string>
     <string name="title_add_transaction">Nouvelle transaction</string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">Exporter les transactions</string>
     <string name="option_export_all_transactions">Exporter toutes les transactions</string>
     <string name="hint_export_choice">Par d&#233;faut, seul les nouvelles transactions depuis le dernier export seront exportes. Cochez cette option pour exporter toutes les transactions</string>
-    <string name="error_exporting">Erreur lors de l\'export des donn&#233;es en OFX</string>
+    <string name="toast_export_error">Erreur lors de l\'export des donn&#233;es en OFX</string>
     <string name="btn_export">Exporter</string>
     <string name="option_delete_after_export">Supprimer apr&#232;s export</string>
     <string name="hint_delete_after_export">Toutes les transactions export&#233;es seront supprimes apr&#233;s l\'export</string>
@@ -395,4 +394,21 @@
     <string name="menu_scheduled_transactions">Transactions planifies</string>
     <string name="title_scheduled_transactions">Transactions planifies</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index ea1be410..64584f92 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -26,7 +26,6 @@
     <string name="label_account_name">Account name</string>
     <string name="btn_cancel">Cancel</string>
     <string name="btn_save">Save</string>
-    <string name="label_no_transactions_to_display">No transactions to display</string>
     <string name="label_transaction_name">Description</string>
     <string name="label_transaction_amount">Amount</string>
     <string name="title_add_transaction">New transaction</string>
@@ -52,7 +51,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
-    <string name="error_exporting">Error exporting OFX data</string>    
+    <string name="toast_export_error">Error exporting OFX data</string>
     <string name="btn_export">Export</string>
     <string name="option_delete_after_export">Delete after export</string>
     <string name="hint_delete_after_export">All exported transactions will be deleted when exporting is completed</string>
@@ -397,4 +396,21 @@
     </string-array>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 280cd67b..afd87127 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name">Nome conto</string>
     <string name="btn_cancel">Annulla</string>
     <string name="btn_save">Salva</string>
-    <string name="label_no_transactions_to_display">Nessuna transazione da visualizzare</string>
     <string name="label_transaction_name">Descrizione</string>
     <string name="label_transaction_amount">Importo</string>
     <string name="title_add_transaction">Nuova transazione</string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">Esporta transazioni</string>
     <string name="option_export_all_transactions">Esporta tutte le transazioni</string>
     <string name="hint_export_choice">Di default, verranno esportate solo le transazioni dall\'ultima esportazione. Selezionare questa opzione per esportare tutte le transazioni</string>
-    <string name="error_exporting">Errore nell\'esportazione dei dati OFX</string>    
+    <string name="toast_export_error">Errore nell\'esportazione dei dati OFX</string>
     <string name="btn_export">Esporta</string>
     <string name="option_delete_after_export">Elimina dopo l\'esportazione</string>
     <string name="hint_delete_after_export">Tutte le transazioni esportate verranno eliminate al termine dell\'esportazione</string>
@@ -399,4 +398,21 @@
     <string name="menu_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 98cffaff..e472e1f0 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -28,7 +28,6 @@
     <string name="label_account_name">Kontonavn</string>
     <string name="btn_cancel">Avbryt</string>
     <string name="btn_save">Lagre</string>
-    <string name="label_no_transactions_to_display">Ingen transaksjoner  vise</string>
     <string name="label_transaction_name">Beskrivelse</string>
     <string name="label_transaction_amount">Belp</string>
     <string name="title_add_transaction">Ny transaksjon</string>
@@ -54,7 +53,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Eksporter alle transaksjoner</string>
     <string name="hint_export_choice">Vanligvis vil kun nye transaksjoner bli eksportert.  Merk dette valget for  eksportere alle transaksjonene</string>
-    <string name="error_exporting">Feil ved eksportering av OFX-data</string>    
+    <string name="toast_export_error">Feil ved eksportering av OFX-data</string>
     <string name="btn_export">Eksporter</string>
     <string name="option_delete_after_export">Slett etter eksportering</string>
     <string name="hint_delete_after_export">Alle eksporterte transaksjoner vil bli slettet etter eksportering</string>
@@ -398,4 +397,21 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="menu_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index dc7711a5..c398bdd3 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name">Rekeningnaam</string>
     <string name="btn_cancel">Annuleren</string>
     <string name="btn_save">Bewaren</string>
-    <string name="label_no_transactions_to_display">Geen transacties beschikbaar</string>
     <string name="label_transaction_name">Beschrijving</string>
     <string name="label_transaction_amount">Bedrag</string>
     <string name="title_add_transaction">Nieuwe transactie</string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">OFX Exporteren</string>
     <string name="option_export_all_transactions">All transacties exporteren</string>
     <string name="hint_export_choice">Aanvinken om alle transacties te exporteren. Anders worden enkel de nieuwe transacties sinds de laatste export ge&#235;xporteerd.</string>
-    <string name="error_exporting">Fout tijdens het exporteren van de OFX data</string>    
+    <string name="toast_export_error">Fout tijdens het exporteren van de OFX data</string>
     <string name="btn_export">Exporteer</string>
     <string name="option_delete_after_export">Verwijderen na exporteren</string>
     <string name="hint_delete_after_export">Alle ge&#235;xporteerde transacties zullen verwijderd worden na de export</string>
@@ -400,4 +399,21 @@
     <string name="menu_scheduled_transactions">Vaste journaalposten</string>
     <string name="title_scheduled_transactions">Vaste journaalposten</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 54b9a1ef..38ed5310 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -26,7 +26,6 @@
 	  <string name="label_account_name">Nome da conta</string>
 	  <string name="btn_cancel">Cancelar</string>
 	  <string name="btn_save">Salvar</string>
-	  <string name="label_no_transactions_to_display">Sem transaes para apresentar</string>
 	  <string name="label_transaction_name">Descrio</string>
 	  <string name="label_transaction_amount">Valor</string>
 	  <string name="title_add_transaction">Nova transao</string>
@@ -52,7 +51,7 @@
 	  <string name="title_export_dialog">Export Transactions</string>
 	  <string name="option_export_all_transactions">Exportar todas as transaes</string>
 	  <string name="hint_export_choice">Por padro, s sero exportadas as transaes criadas aps o ltimo procedimento de exportar. Selecionar essa opo para exportar todas as transaes.</string>
-	  <string name="error_exporting">Erro ao exportar os dados OFX</string>
+	  <string name="toast_export_error">Erro ao exportar os dados OFX</string>
 	  <string name="btn_export">Exportar</string>
 	  <string name="option_delete_after_export">Deletar aps exportar</string>
 	  <string name="hint_delete_after_export">Todas as transao exportadas sero deletadas aps completar o procedimento de exportar.</string>
@@ -398,4 +397,21 @@
     <string name="menu_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 023d9fc6..94115e95 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -27,7 +27,6 @@
     <string name="label_account_name"> </string>
     <string name="btn_cancel"></string>
     <string name="btn_save"></string>
-    <string name="label_no_transactions_to_display"> </string>
     <string name="label_transaction_name"></string>
     <string name="label_transaction_amount"></string>
     <string name="title_add_transaction"> </string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog"> </string>
     <string name="option_export_all_transactions"> </string>
     <string name="hint_export_choice">  ,    .</string>
-    <string name="error_exporting">   OFX</string>    
+    <string name="toast_export_error">   OFX</string>
     <string name="btn_export"></string>
     <string name="option_delete_after_export">  </string>
     <string name="hint_delete_after_export">      .</string>
@@ -399,4 +398,21 @@
     <string name="menu_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 3e41ef0d..18711b55 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -26,7 +26,6 @@
     <string name="label_account_name"></string>
     <string name="btn_cancel"></string>
     <string name="btn_save"></string>
-    <string name="label_no_transactions_to_display"></string>
     <string name="label_transaction_name"></string>
     <string name="label_transaction_amount"></string>
     <string name="title_add_transaction"></string>
@@ -52,7 +51,7 @@
     <string name="title_export_dialog"></string>
     <string name="option_export_all_transactions"></string>
     <string name="hint_export_choice"></string>
-    <string name="error_exporting">OFX</string>
+    <string name="toast_export_error">OFX</string>
     <string name="btn_export"></string>
     <string name="option_delete_after_export"></string>
     <string name="hint_delete_after_export"></string>
@@ -393,4 +392,21 @@
     </string-array>
     <string name="title_scheduled_transactions"></string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 3d04f3c6..2d32c94a 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.3.3</string>
+    <string name="app_version_name">1.4.0-beta1</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
@@ -27,7 +27,6 @@
     <string name="label_account_name">Account name</string>
     <string name="btn_cancel">Cancel</string>
     <string name="btn_save">Save</string>
-    <string name="label_no_transactions_to_display">No transactions to display</string>
     <string name="label_transaction_name">Description</string>
     <string name="label_transaction_amount">Amount</string>
     <string name="title_add_transaction">New transaction</string>
@@ -53,7 +52,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
-    <string name="error_exporting">Error exporting OFX data</string>    
+    <string name="toast_export_error">Error exporting data</string>
     <string name="btn_export">Export</string>
     <string name="option_delete_after_export">Delete after export</string>
     <string name="hint_delete_after_export">All exported transactions will be deleted when exporting is completed</string>
@@ -629,4 +628,21 @@
     </string>
     <string name="title_scheduled_transactions">Scheduled Transactions</string>
     <string name="title_select_export_destination">Select destination for export</string>
+    <string name="hint_split_memo">Memo</string>
+    <string name="label_spend">Spend</string>
+    <string name="label_receive">Receive</string>
+    <string name="label_withdrawal">Withdrawal</string>
+    <string name="label_deposit">Deposit</string>
+    <string name="label_payment">Payment</string>
+    <string name="label_charge">Charge</string>
+    <string name="label_decrease">Decrease</string>
+    <string name="label_increase">Increase</string>
+    <string name="label_income">Income</string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill">Bill</string>
+    <string name="label_invoice">Invoice</string>
+    <string name="label_buy">Buy</string>
+    <string name="label_sell">Sell</string>
+    <string name="label_repeats">Repeats</string>
 </resources>
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 4206f671..50cfa6eb 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -16,18 +16,22 @@
 
 package org.gnucash.android.db;
 
-import java.util.*;
-
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.model.Account.AccountType;
-import org.gnucash.android.model.Transaction;
-import org.gnucash.android.model.Transaction.TransactionType;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteQueryBuilder;
 import android.util.Log;
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Transaction;
+
+import java.util.*;
+
+import static org.gnucash.android.db.DatabaseSchema.*;
 
 /**
  * Manages persistence of {@link Account}s in the database
@@ -55,7 +59,25 @@ public AccountsDbAdapter(Context context) {
 		mTransactionsAdapter = new TransactionsDbAdapter(context);
 	}
 
-	@Override
+    /**
+     * Overloaded constructor. Creates an adapter for an already open database
+     * @param db SQliteDatabase instance
+     */
+    public AccountsDbAdapter(SQLiteDatabase db) {
+        super(db);
+        mTransactionsAdapter = new TransactionsDbAdapter(db);
+    }
+
+    /**
+     * Returns the imbalance account where to store transactions which are not double entry
+     * @param currency Currency of the transaction
+     * @return Imbalance account name
+     */
+    public static String getImbalanceAccountName(Currency currency){
+        return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
+    }
+
+    @Override
 	public void close() {
 		super.close();
 		mTransactionsAdapter.close();
@@ -70,53 +92,66 @@ public void close() {
 	 */
 	public long addAccount(Account account){
 		ContentValues contentValues = new ContentValues();
-		contentValues.put(DatabaseHelper.KEY_NAME,          account.getName());
-		contentValues.put(DatabaseHelper.KEY_TYPE,          account.getAccountType().name());
-		contentValues.put(DatabaseHelper.KEY_UID,           account.getUID());
-		contentValues.put(DatabaseHelper.KEY_CURRENCY_CODE, account.getCurrency().getCurrencyCode());
-        contentValues.put(DatabaseHelper.KEY_PLACEHOLDER,   account.isPlaceholderAccount() ? 1 : 0);
-        contentValues.put(DatabaseHelper.KEY_COLOR_CODE,    account.getColorHexCode());
-        contentValues.put(DatabaseHelper.KEY_FAVORITE,      account.isFavorite() ? 1 : 0);
-        contentValues.put(DatabaseHelper.KEY_FULL_NAME,     account.getFullName());
-        contentValues.put(DatabaseHelper.KEY_PARENT_ACCOUNT_UID,            account.getParentUID());
-        contentValues.put(DatabaseHelper.KEY_DEFAULT_TRANSFER_ACCOUNT_UID,  account.getDefaultTransferAccountUID());
+		contentValues.put(AccountEntry.COLUMN_NAME,         account.getName());
+		contentValues.put(AccountEntry.COLUMN_TYPE,         account.getAccountType().name());
+		contentValues.put(AccountEntry.COLUMN_UID,          account.getUID());
+		contentValues.put(AccountEntry.COLUMN_CURRENCY,     account.getCurrency().getCurrencyCode());
+        contentValues.put(AccountEntry.COLUMN_PLACEHOLDER,  account.isPlaceholderAccount() ? 1 : 0);
+        contentValues.put(AccountEntry.COLUMN_COLOR_CODE,   account.getColorHexCode());
+        contentValues.put(AccountEntry.COLUMN_FAVORITE,     account.isFavorite() ? 1 : 0);
+        contentValues.put(AccountEntry.COLUMN_FULL_NAME,    account.getFullName());
+        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,            account.getParentUID());
+        contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID,  account.getDefaultTransferAccountUID());
 
 		long rowId = -1;
 		if ((rowId = getAccountID(account.getUID())) > 0){
 			//if account already exists, then just update
 			Log.d(TAG, "Updating existing account");
-			mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME, contentValues,
-                    DatabaseHelper.KEY_ROW_ID + " = " + rowId, null);
+			mDb.update(AccountEntry.TABLE_NAME, contentValues,
+                    AccountEntry._ID + " = " + rowId, null);
 		} else {
 			Log.d(TAG, "Adding new account to db");
-			rowId = mDb.insert(DatabaseHelper.ACCOUNTS_TABLE_NAME, null, contentValues);
+			rowId = mDb.insert(AccountEntry.TABLE_NAME, null, contentValues);
 		}
 		
 		//now add transactions if there are any
 		if (rowId > 0){
             //update the fully qualified account name
-            updateAccount(rowId, DatabaseHelper.KEY_FULL_NAME, getFullyQualifiedAccountName(rowId));
+            updateAccount(rowId, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(rowId));
 			for (Transaction t : account.getTransactions()) {
-                //FIXME: This is a hack until actual splits are implemented
-                if (t.getDoubleEntryAccountUID().equals(account.getUID())){
-                    Transaction trx = new Transaction(t,false);
-//                    trx.setAmount(trx.getAmount().negate());
-                    if (trx.getType() == TransactionType.DEBIT) {
-                        trx.setType(TransactionType.CREDIT);
-                    } else {
-                        trx.setType(TransactionType.DEBIT);
-                    }
-
-                    mTransactionsAdapter.addTransaction(trx);
-                }
-                else
-				    mTransactionsAdapter.addTransaction(t);
+		        mTransactionsAdapter.addTransaction(t);
 			}
 		}
 		return rowId;
 	}
 
     /**
+     * Marks all transactions for a given account as exported
+     * @param accountUID Unique ID of the record to be marked as exported
+     * @return Number of records marked as exported
+     */
+    public int markAsExported(String accountUID){
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
+        Cursor cursor = mTransactionsAdapter.fetchAllTransactionsForAccount(accountUID);
+        List<Long> transactionIdList = new ArrayList<Long>();
+        if (cursor != null){
+            while(cursor.moveToNext()){
+                long id = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID));
+                transactionIdList.add(id);
+            }
+            cursor.close();
+        }
+        int recordsTouched = 0;
+        for (long id : transactionIdList) {
+            recordsTouched += mDb.update(TransactionEntry.TABLE_NAME,
+                    contentValues,
+                    TransactionEntry._ID + "=" + id, null);
+        }
+        return recordsTouched;
+    }
+
+    /**
      * This feature goes through all the rows in the accounts and changes value for <code>columnKey</code> to <code>newValue</code><br/>
      * The <code>newValue</code> parameter is taken as string since SQLite typically stores everything as text.
      * <p><b>This method affects all rows, exercise caution when using it</b></p>
@@ -128,7 +163,7 @@ public int updateAllAccounts(String columnKey, String newValue){
         ContentValues contentValues = new ContentValues();
         contentValues.put(columnKey, newValue);
 
-        return mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME, contentValues, null, null);
+        return mDb.update(AccountEntry.TABLE_NAME, contentValues, null, null);
     }
 
     /**
@@ -139,11 +174,7 @@ public int updateAllAccounts(String columnKey, String newValue){
      * @return Number of records affected
      */
     public int updateAccount(long accountId, String columnKey, String newValue){
-        ContentValues contentValues = new ContentValues();
-        contentValues.put(columnKey, newValue);
-
-        return mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME, contentValues,
-                DatabaseHelper.KEY_ROW_ID + "=" + accountId, null);
+        return updateRecord(AccountEntry.TABLE_NAME, accountId, columnKey, newValue);
     }
 
 	/**
@@ -153,20 +184,14 @@ public int updateAccount(long accountId, String columnKey, String newValue){
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise.
 	 */
 	public boolean destructiveDeleteAccount(long rowId){
-		Log.d(TAG, "Delete account with rowId: " + rowId);
-		boolean result = true;
-		//first remove all transactions for the account
-		Cursor c = mTransactionsAdapter.fetchAllTransactionsForAccount(rowId);
-		if (c == null)
-			return false;
-		
-		while (c.moveToNext()){
-			long id = c.getLong(DatabaseAdapter.COLUMN_ROW_ID);
-			result &= mTransactionsAdapter.deleteRecord(id);
-		}
-		result &= deleteRecord(DatabaseHelper.ACCOUNTS_TABLE_NAME, rowId);
-        c.close();
-		return result;
+		Log.d(TAG, "Delete account with rowId and all its associated splits: " + rowId);
+
+        //delete splits in this account
+        mDb.delete(SplitEntry.TABLE_NAME,
+               SplitEntry.COLUMN_ACCOUNT_UID + "=?",
+                new String[]{getAccountUID(rowId)});
+
+		return deleteRecord(AccountEntry.TABLE_NAME, rowId);
 	}
 
     /**
@@ -178,13 +203,13 @@ public boolean destructiveDeleteAccount(long rowId){
     public int reassignParent(String oldParentUID, String newParentUID){
         ContentValues contentValues = new ContentValues();
         if (newParentUID == null)
-            contentValues.putNull(DatabaseHelper.KEY_PARENT_ACCOUNT_UID);
+            contentValues.putNull(AccountEntry.COLUMN_PARENT_ACCOUNT_UID);
         else
-            contentValues.put(DatabaseHelper.KEY_PARENT_ACCOUNT_UID, newParentUID);
+            contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, newParentUID);
 
-        return mDb.update(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        return mDb.update(AccountEntry.TABLE_NAME,
                 contentValues,
-                DatabaseHelper.KEY_PARENT_ACCOUNT_UID + "= '" + oldParentUID + "' ",
+                AccountEntry.COLUMN_PARENT_ACCOUNT_UID + "= '" + oldParentUID + "' ",
                 null);
     }
 
@@ -197,22 +222,15 @@ public int reassignParent(String oldParentUID, String newParentUID){
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise.
 	 */
 	public boolean transactionPreservingDelete(long accountId, long accountReassignId){
-		Cursor transactionsCursor = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				new String[]{DatabaseHelper.KEY_ACCOUNT_UID}, 
-				DatabaseHelper.KEY_ACCOUNT_UID + " = " + accountId,
-				null, null, null, null);
-		if (transactionsCursor != null && transactionsCursor.getCount() > 0){
-			Log.d(TAG, "Found transactions. Migrating to new account");
-			ContentValues contentValues = new ContentValues();
-			contentValues.put(DatabaseHelper.KEY_ACCOUNT_UID, accountReassignId);
-			mDb.update(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-					contentValues, 
-					DatabaseHelper.KEY_ACCOUNT_UID + "=" + accountId,
-					null);
-			transactionsCursor.close();
-		}
-		return destructiveDeleteAccount(accountId);
-	}
+        Log.d(TAG, "Migrating transaction splits to new account");
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, accountReassignId);
+        mDb.update(SplitEntry.TABLE_NAME,
+                contentValues,
+                SplitEntry.COLUMN_ACCOUNT_UID + "=?",
+                new String[]{getAccountUID(accountId)});
+        return destructiveDeleteAccount(accountId);
+    }
 
     /**
      * Deletes an account and all its sub-accounts and transactions with it
@@ -234,69 +252,59 @@ public boolean recursiveDestructiveDelete(long accountId){
     }
 
 	/**
-	 * Builds an account instance with the provided cursor.
-	 * <p>The method will not move the cursor position, so the cursor should already be pointing
-     * to the account record in the database<br/>
-     * <b>Note</b> that this method expects the cursor to contain all columns from the database table</p>
-     *
+	 * Builds an account instance with the provided cursor and loads its corresponding transactions.
+	 *
 	 * @param c Cursor pointing to account record in database
 	 * @return {@link Account} object constructed from database record
 	 */
 	public Account buildAccountInstance(Cursor c){
-		Account account = new Account(c.getString(DatabaseAdapter.COLUMN_NAME));
-		String uid = c.getString(DatabaseAdapter.COLUMN_UID);
-		account.setUID(uid);
-		account.setParentUID(c.getString(DatabaseAdapter.COLUMN_PARENT_ACCOUNT_UID));
-		account.setAccountType(AccountType.valueOf(c.getString(DatabaseAdapter.COLUMN_TYPE)));
-		//make sure the account currency is set before setting the transactions
-		//else the transactions end up with a different currency from the account
-		account.setCurrency(Currency.getInstance(c.getString(DatabaseAdapter.COLUMN_CURRENCY_CODE)));
-		account.setTransactions(mTransactionsAdapter.getAllTransactionsForAccount(uid));
-        account.setPlaceHolderFlag(c.getInt(DatabaseAdapter.COLUMN_PLACEHOLDER) == 1);
-        account.setDefaultTransferAccountUID(c.getString(DatabaseAdapter.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
-        account.setColorCode(c.getString(DatabaseAdapter.COLUMN_COLOR_CODE));
-        account.setFavorite(c.getInt(DatabaseAdapter.COLUMN_FAVORITE) == 1);
-        account.setFullName(c.getString(DatabaseAdapter.COLUMN_FULL_NAME));
-		return account;
-	}
-		
-	/**
-	 * Fetch an account from the database which has a unique ID <code>uid</code>
-	 * @param uid Unique Identifier of account to be retrieved
-	 * @return Database row ID of account with UID <code>uid</code>
-	 */
-	public long getAccountID(String uid){
-		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[] {DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_UID}, 
-				DatabaseHelper.KEY_UID + " = '" + uid + "'", null, null, null, null);
-		long result = -1;
-		if (cursor != null) {
-            if (cursor.moveToFirst()) {
-                Log.v(TAG, "Returning account id");
-                result = cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
-            }
-            cursor.close();
-        }
-		return result;
+        Account account = buildSimpleAccountInstance(c);
+        account.setTransactions(mTransactionsAdapter.getAllTransactionsForAccount(account.getUID()));
+
+        return account;
 	}
-	
-	/**
+
+    /**
+     * Builds an account instance with the provided cursor and loads its corresponding transactions.
+     * <p>The method will not move the cursor position, so the cursor should already be pointing
+     * to the account record in the database<br/>
+     * <b>Note</b> Unlike {@link  #buildAccountInstance(android.database.Cursor)} this method will not load transactions</p>
+     *
+     * @param c Cursor pointing to account record in database
+     * @return {@link Account} object constructed from database record
+     */
+    private Account buildSimpleAccountInstance(Cursor c) {
+        Account account = new Account(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME)));
+        String uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+        account.setUID(uid);
+        account.setParentUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID)));
+        account.setAccountType(AccountType.valueOf(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE))));
+        account.setCurrency(Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY))));
+        account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
+        account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
+        account.setColorCode(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE)));
+        account.setFavorite(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) == 1);
+        account.setFullName(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_FULL_NAME)));
+        return account;
+    }
+
+    /**
 	 * Returns the  unique ID of the parent account of the account with unique ID <code>uid</code>
 	 * If the account has no parent, null is returned
 	 * @param uid Unique Identifier of account whose parent is to be returned. Should not be null
 	 * @return DB record UID of the parent account, null if the account has no parent
 	 */
 	public String getParentAccountUID(String uid){
-		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[] {DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_PARENT_ACCOUNT_UID}, 
-				DatabaseHelper.KEY_UID + " = ?",
+		Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+				new String[] {AccountEntry._ID, AccountEntry.COLUMN_PARENT_ACCOUNT_UID},
+                AccountEntry.COLUMN_UID + " = ?",
                 new String[]{uid},
                 null, null, null, null);
 		String result = null;
 		if (cursor != null) {
             if (cursor.moveToFirst()) {
                 Log.d(TAG, "Account already exists. Returning existing id");
-                result = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_PARENT_ACCOUNT_UID));
+                result = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
             }
             cursor.close();
         }
@@ -322,7 +330,7 @@ public String getParentAccountUID(long id){
 	public Account getAccount(long rowId){
 		Account account = null;
 		Log.v(TAG, "Fetching account with id " + rowId);
-		Cursor c =	fetchRecord(DatabaseHelper.ACCOUNTS_TABLE_NAME, rowId);
+		Cursor c =	fetchRecord(AccountEntry.TABLE_NAME, rowId);
 		if (c != null) {
             if (c.moveToFirst()) {
                 account = buildAccountInstance(c);
@@ -342,26 +350,6 @@ public Account getAccount(String uid){
 		return getAccount(getId(uid));
 	}	
 	
-	/**
-	 * Returns the unique identifier for the account with record ID <code>id</code>
-	 * @param id Database record id of account
-	 * @return Unique identifier string of the account
-	 */
-	public String getAccountUID(long id){
-		String uid = null;
-		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_UID}, 
-				DatabaseHelper.KEY_ROW_ID + "=" + id, 
-				null, null, null, null);
-		if (c != null) {
-            if (c.moveToFirst()) {
-                uid = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_UID));
-            }
-            c.close();
-        }
-		return uid;
-	}
-
     /**
      * Returns the color code for the account in format #rrggbb
      * @param accountId Database row ID of the account
@@ -369,28 +357,19 @@ public String getAccountUID(long id){
      */
     public String getAccountColorCode(long accountId){
         String colorCode = null;
-        Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_COLOR_CODE},
-                DatabaseHelper.KEY_ROW_ID + "=" + accountId,
+        Cursor c = mDb.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry._ID, AccountEntry.COLUMN_COLOR_CODE},
+                AccountEntry._ID + "=" + accountId,
                 null, null, null, null);
         if (c != null) {
             if (c.moveToFirst()) {
-                colorCode = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_COLOR_CODE));
+                colorCode = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
             }
             c.close();
         }
         return colorCode;
     }
 
-	/**
-	 * Returns the {@link AccountType} of the account with unique ID <code>uid</code>
-	 * @param uid Unique ID of the account
-	 * @return {@link AccountType} of the account
-	 */
-	public AccountType getAccountType(String uid){
-        return mTransactionsAdapter.getAccountType(uid);
-	}
-
     /**
      * Overloaded method. Resolves the account unique ID from the row ID and makes a call to {@link #getAccountType(String)}
      * @param accountId Database row ID of the account
@@ -407,10 +386,10 @@ public AccountType getAccountType(long accountId){
 	 */
 	public String getName(long accountID) {
 		String name = null;
-		Cursor c = fetchRecord(DatabaseHelper.ACCOUNTS_TABLE_NAME, accountID);
+		Cursor c = fetchRecord(AccountEntry.TABLE_NAME, accountID);
 		if (c != null) {
             if (c.moveToFirst()) {
-                name = c.getString(DatabaseAdapter.COLUMN_NAME);
+                name = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME));
             }
             c.close();
         }
@@ -434,7 +413,26 @@ public String getName(long accountID) {
 		c.close();
 		return accounts;
 	}
-	
+
+    /**
+     * Returns a list of all account entries in the system (includes root account)
+     * No transactions are loaded, just the accounts
+     * @return List of {@link Account}s in the database
+     */
+    public List<Account> getSimpleAccountList(){
+        LinkedList<Account> accounts = new LinkedList<Account>();
+        Cursor c = fetchAccounts(null);
+
+        if (c == null)
+            return accounts;
+
+        while(c.moveToNext()){
+            accounts.add(buildSimpleAccountInstance(c));
+        }
+        c.close();
+        return accounts;
+    }
+
 	/**
 	 * Returns a list of accounts which have transactions that have not been exported yet
 	 * @return List of {@link Account}s with unexported transactions
@@ -452,7 +450,30 @@ public String getName(long accountID) {
 		}
 		return accountsList;
 	}
-	
+
+    /**
+     * Retrieves the unique ID of the imbalance account for a particular currency (creates the imbalance account
+     * on demand if necessary)
+     * @param currency Currency for the imbalance account
+     * @return String unique ID of the account
+     */
+    public String getOrCreateImbalanceAccountUID(Currency currency){
+        String imbalanceAccountName = getImbalanceAccountName(currency);
+        Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
+                AccountEntry.COLUMN_NAME + "= ?", new String[]{imbalanceAccountName},
+                null, null, null, "1");
+        String uid;
+        if (c != null && c.moveToNext()) {
+            uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+        } else {
+            Account account = new Account(imbalanceAccountName, currency);
+            account.setAccountType(AccountType.BANK);
+            addAccount(account);
+            uid = account.getUID();
+        }
+        return uid;
+    }
+
 	/**
 	 * Returns a cursor to all account records in the database.
      * GnuCash ROOT accounts are ignored
@@ -461,13 +482,13 @@ public String getName(long accountID) {
     @Override
 	public Cursor fetchAllRecords(){
 		Log.v(TAG, "Fetching all accounts from db");
-        String selection =  DatabaseHelper.KEY_TYPE + " != ?" ;
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        String selection =  AccountEntry.COLUMN_TYPE + " != ?" ;
+        return mDb.query(AccountEntry.TABLE_NAME,
                 null,
                 selection,
                 new String[]{AccountType.ROOT.name()},
                 null, null,
-                DatabaseHelper.KEY_NAME + " ASC");
+                AccountEntry.COLUMN_NAME + " ASC");
 	}
 
     /**
@@ -477,18 +498,18 @@ public Cursor fetchAllRecords(){
      */
     public Cursor fetchAllRecordsOrderedByFullName(){
         Log.v(TAG, "Fetching all accounts from db");
-        String selection =  DatabaseHelper.KEY_TYPE + " != ?" ;
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        String selection =  AccountEntry.COLUMN_TYPE + " != ?" ;
+        return mDb.query(AccountEntry.TABLE_NAME,
                 null,
                 selection,
                 new String[]{AccountType.ROOT.name()},
                 null, null,
-                DatabaseHelper.KEY_FULL_NAME + " ASC");
+                AccountEntry.COLUMN_FULL_NAME + " ASC");
     }
 
     @Override
     public Cursor fetchRecord(long rowId) {
-        return fetchRecord(DatabaseHelper.ACCOUNTS_TABLE_NAME, rowId);
+        return fetchRecord(AccountEntry.TABLE_NAME, rowId);
     }
 
     /**
@@ -500,7 +521,7 @@ public Cursor fetchRecord(long rowId) {
     @Override
     public boolean deleteRecord(long rowId) {
         return destructiveDeleteAccount(rowId);
-        //return deleteRecord(DatabaseHelper.ACCOUNTS_TABLE_NAME, rowId);
+        //return deleteRecord(DatabaseHelper.TABLE_NAME, rowId);
     }
 
     /**
@@ -510,9 +531,9 @@ public boolean deleteRecord(long rowId) {
 	 */
 	public Cursor fetchAccounts(String condition){
 		Log.v(TAG, "Fetching all accounts from db where " + condition);
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        return mDb.query(AccountEntry.TABLE_NAME,
                 null, condition, null, null, null,
-                DatabaseHelper.KEY_NAME + " ASC");
+                AccountEntry.COLUMN_NAME + " ASC");
 	}
 
     /**
@@ -523,18 +544,19 @@ public Cursor fetchAccounts(String condition){
      */
     public Cursor fetchAccountsOrderedByFullName(String condition){
         Log.v(TAG, "Fetching all accounts from db where " + condition);
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        return mDb.query(AccountEntry.TABLE_NAME,
                 null, condition, null, null, null,
-                DatabaseHelper.KEY_FULL_NAME + " ASC");
+                AccountEntry.COLUMN_FULL_NAME + " ASC");
     }
     /**
      * Returns the balance of an account while taking sub-accounts into consideration
      * @return Account Balance of an account including sub-accounts
      */
     public Money getAccountBalance(long accountId){
+        Log.d(TAG, "Computing account balance for account ID " + accountId);
         String currencyCode = getCurrencyCode(accountId);
         currencyCode = currencyCode == null ? Money.DEFAULT_CURRENCY_CODE : currencyCode;
-        Money balance = Money.createInstance(currencyCode);
+        Money balance = Money.createZeroInstance(currencyCode);
 
         List<Long> subAccounts = getSubAccountIds(accountId);
         for (long id : subAccounts){
@@ -547,12 +569,10 @@ public Money getAccountBalance(long accountId){
             }
         }
 
-        return balance.add(mTransactionsAdapter.getTransactionsSum(accountId));
-
-//      properly compute the account balance taking double entry into account
-//      TODO: re-enable this when splits are added
-//        return balance.add(getAccount(accountId).getBalance());
-
+        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
+        Money splitSum = splitsDbAdapter.computeSplitBalance(getAccountUID(accountId));
+        splitsDbAdapter.close();
+        return balance.add(splitSum);
     }
 
     /**
@@ -562,13 +582,15 @@ public Money getAccountBalance(long accountId){
      */
     public List<Long> getSubAccountIds(long accountId){
         List<Long> subAccounts = new ArrayList<Long>();
-        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID}, DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ?",
-                new String[]{getAccountUID(accountId)}, null, null, null);
+        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry._ID},
+                AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?",
+                new String[]{getAccountUID(accountId)},
+                null, null, null);
 
         if (cursor != null){
             while (cursor.moveToNext()){
-                subAccounts.add(cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID));
+                subAccounts.add(cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID)));
             }
             cursor.close();
         }
@@ -583,11 +605,11 @@ public Money getAccountBalance(long accountId){
      */
     public Cursor fetchSubAccounts(long accountId){
         Log.v(TAG, "Fetching sub accounts for account id " + accountId);
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        return mDb.query(AccountEntry.TABLE_NAME,
                 null,
-                DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ?",
+                AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?",
                 new String[]{getAccountUID(accountId)},
-                null, null, DatabaseHelper.KEY_NAME + " ASC");
+                null, null, AccountEntry.COLUMN_NAME + " ASC");
     }
 
     /**
@@ -597,13 +619,13 @@ public Cursor fetchSubAccounts(long accountId){
     public Cursor fetchTopLevelAccounts(){
         //condition which selects accounts with no parent, whose UID is not ROOT and whose name is not ROOT
         StringBuilder condition = new StringBuilder("(");
-        condition.append(DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " IS NULL");
+        condition.append(AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL");
         condition.append(" OR ");
-        condition.append(DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ");
-        condition.append("'" + getGnuCashRootAccountUID() + "'");
+        condition.append(AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ");
+        condition.append("'").append(getGnuCashRootAccountUID()).append("'");
         condition.append(")");
         condition.append(" AND ");
-        condition.append(DatabaseHelper.KEY_TYPE + " != " + "'" + AccountType.ROOT.name() + "'");
+        condition.append(AccountEntry.COLUMN_TYPE + " != " + "'").append(AccountType.ROOT.name()).append("'");
         return fetchAccounts(condition.toString());
     }
 
@@ -612,12 +634,24 @@ public Cursor fetchTopLevelAccounts(){
      * @return Cursor to recently used accounts
      */
     public Cursor fetchRecentAccounts(int numberOfRecents){
-        Cursor recentTxCursor = mDb.query(true, DatabaseHelper.TRANSACTIONS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ACCOUNT_UID},
-                null, null, null, null, DatabaseHelper.KEY_TIMESTAMP + " DESC", Integer.toString(numberOfRecents));
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME
+                + " LEFT OUTER JOIN " + SplitEntry.TABLE_NAME + " ON "
+                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
+        queryBuilder.setDistinct(true);
+        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
+        Map<String, String> projectionMap = new HashMap<String, String>();
+        projectionMap.put(SplitEntry.COLUMN_ACCOUNT_UID, SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID);
+        queryBuilder.setProjectionMap(projectionMap);
+        Cursor recentTxCursor =  queryBuilder.query(mDb,
+                new String[]{SplitEntry.COLUMN_ACCOUNT_UID},
+                null, null, null, null, sortOrder, Integer.toString(numberOfRecents));
+
+
         StringBuilder recentAccountUIDs = new StringBuilder("(");
         while (recentTxCursor.moveToNext()){
-            String uid = recentTxCursor.getString(recentTxCursor.getColumnIndexOrThrow(DatabaseHelper.KEY_ACCOUNT_UID));
+            String uid = recentTxCursor.getString(recentTxCursor.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
             recentAccountUIDs.append("'" + uid + "'");
             if (!recentTxCursor.isLast())
                 recentAccountUIDs.append(",");
@@ -625,9 +659,9 @@ public Cursor fetchRecentAccounts(int numberOfRecents){
         recentAccountUIDs.append(")");
         recentTxCursor.close();
 
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                null, DatabaseHelper.KEY_UID + " IN " + recentAccountUIDs.toString(),
-                null, null, null, DatabaseHelper.KEY_NAME + " ASC");
+        return mDb.query(AccountEntry.TABLE_NAME,
+                null, AccountEntry.COLUMN_UID + " IN " + recentAccountUIDs.toString(),
+                null, null, null, AccountEntry.COLUMN_NAME + " ASC");
 
     }
 
@@ -637,10 +671,10 @@ public Cursor fetchRecentAccounts(int numberOfRecents){
      */
     public Cursor fetchFavoriteAccounts(){
         Log.v(TAG, "Fetching favorite accounts from db");
-        String condition = DatabaseHelper.KEY_FAVORITE + " = 1";
-        return mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
+        String condition = AccountEntry.COLUMN_FAVORITE + " = 1";
+        return mDb.query(AccountEntry.TABLE_NAME,
                 null, condition, null, null, null,
-                DatabaseHelper.KEY_NAME + " ASC");
+                AccountEntry.COLUMN_NAME + " ASC");
     }
 
     /**
@@ -653,11 +687,11 @@ public Cursor fetchFavoriteAccounts(){
      * @return Unique ID of the GnuCash root account.
      */
     public String getGnuCashRootAccountUID(){
-        String condition = DatabaseHelper.KEY_TYPE + "= '" + AccountType.ROOT.name() + "'";
+        String condition = AccountEntry.COLUMN_TYPE + "= '" + AccountType.ROOT.name() + "'";
         Cursor cursor =  fetchAccounts(condition);
         String rootUID = null;
         if (cursor != null && cursor.moveToFirst()){
-            rootUID = cursor.getString(DatabaseAdapter.COLUMN_UID);
+            rootUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
             cursor.close();
         }
         return rootUID;
@@ -671,8 +705,8 @@ public String getGnuCashRootAccountUID(){
     public int getSubAccountCount(long accountId){
         //TODO: at some point when API level 11 and above only is supported, use DatabaseUtils.queryNumEntries
 
-        String queryCount = "SELECT COUNT(*) FROM " + DatabaseHelper.ACCOUNTS_TABLE_NAME + " WHERE "
-                + DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " = ?";
+        String queryCount = "SELECT COUNT(*) FROM " + AccountEntry.TABLE_NAME + " WHERE "
+                + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?";
         String accountUID = getAccountUID(accountId);
         if (accountUID == null) //if the account UID is null, then the accountId param was invalid. Just return
             return 0;
@@ -684,41 +718,19 @@ public int getSubAccountCount(long accountId){
     }
 
 	/**
-	 * Returns the balance for all transactions while taking double entry into consideration
-	 * This means that double transactions will be counted twice
-	 * @return Total balance of the accounts while using double entry
-	 */
-	public Money getDoubleEntryAccountsBalance(){
-        //TODO: take currency into consideration
-		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[]{DatabaseHelper.KEY_ROW_ID},
-				null, null, null, null, null);
-		Money totalSum = new Money();
-		if (c != null){
-			while (c.moveToNext()) {
-				long id = c.getLong(DatabaseAdapter.COLUMN_ROW_ID);
-				Money sum = mTransactionsAdapter.getTransactionsSum(id);
-				totalSum = totalSum.add(sum);
-			}
-			c.close();
-		}
-		return totalSum;
-	}
-	
-	/**
 	 * Return the record ID for the account with UID <code>accountUID</code>
 	 * @param accountUID String Unique ID of the account
 	 * @return Record ID belonging to account UID
 	 */
 	public long getId(String accountUID){
 		long id = -1;
-		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_UID}, 
-				DatabaseHelper.KEY_UID + "='" + accountUID + "'", 
+		Cursor c = mDb.query(AccountEntry.TABLE_NAME,
+				new String[]{AccountEntry._ID},
+				AccountEntry.COLUMN_UID + "='" + accountUID + "'",
 				null, null, null, null);
 		if (c != null) {
             if (c.moveToFirst()) {
-                id = c.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+                id = c.getLong(c.getColumnIndexOrThrow(AccountEntry._ID));
             }
             c.close();
         }
@@ -733,16 +745,6 @@ public long getId(String accountUID){
 	public String getCurrencyCode(long id){
 		return mTransactionsAdapter.getCurrencyCode(id);
 	}
-	
-	/**
-	 * Returns the currency code of account with database ID
-	 * @param accountUID Unique Identifier of the account
-	 * @return ISO 4217 currency code of the account
-	 * @see #getCurrencyCode(long) 
-	 */
-	public String getCurrencyCode(String accountUID){
-		return getCurrencyCode(getAccountID(accountUID));
-	}
 
     /**
      * Returns the simple name of the account with unique ID <code>accountUID</code>.
@@ -754,9 +756,9 @@ public String getAccountName(String accountUID){
         if (accountUID == null)
             return null;
 
-        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_NAME},
-                DatabaseHelper.KEY_UID + " = ?",
+        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry._ID, AccountEntry.COLUMN_NAME},
+                AccountEntry.COLUMN_UID + " = ?",
                 new String[]{accountUID}, null, null, null);
 
         if (cursor == null) {
@@ -768,7 +770,7 @@ public String getAccountName(String accountUID){
             cursor.moveToFirst();
         }
 
-        String accountName = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_NAME));
+        String accountName = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME));
         cursor.close();
 
         return accountName;
@@ -780,9 +782,9 @@ public String getAccountName(String accountUID){
      * @return Record ID of default transfer account
      */
     public long getDefaultTransferAccountID(long accountID){
-        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_DEFAULT_TRANSFER_ACCOUNT_UID},
-                DatabaseHelper.KEY_ROW_ID + " = " + accountID,
+        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID},
+                AccountEntry._ID + " = " + accountID,
                 null, null, null, null);
 
         if (cursor == null) {
@@ -795,7 +797,7 @@ public long getDefaultTransferAccountID(long accountID){
         }
 
         String defaultTransferAccountUID = cursor.getString(
-                cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_DEFAULT_TRANSFER_ACCOUNT_UID));
+                cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
         cursor.close();
 
         return getAccountID(defaultTransferAccountUID);
@@ -838,19 +840,18 @@ public boolean isPlaceholderAccount(String accountUID){
         if (accountUID == null)
             return false;
 
-        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_PLACEHOLDER},
-                DatabaseHelper.KEY_UID + " = ?",
+        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry.COLUMN_PLACEHOLDER},
+                AccountEntry.COLUMN_UID + " = ?",
                 new String[]{accountUID}, null, null, null);
 
-        if (cursor == null)
-            return false;
-        if (!cursor.moveToFirst()) {
+        boolean isPlaceholder = false;
+        if (cursor != null){
+            if (cursor.moveToFirst()){
+                isPlaceholder = cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1;
+            }
             cursor.close();
-            return false;
         }
-        boolean isPlaceholder = cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_PLACEHOLDER)) == 1;
-        cursor.close();
 
         return isPlaceholder;
     }
@@ -870,30 +871,30 @@ public boolean isPlaceholderAccount(long accountId){
      * @return <code>true</code> if the account is a favorite account, <code>false</code> otherwise
      */
     public boolean isFavoriteAccount(long accountId){
-        Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_FAVORITE},
-                DatabaseHelper.KEY_ROW_ID + " = " + accountId, null,
+        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry.COLUMN_FAVORITE},
+                AccountEntry._ID + " = " + accountId, null,
                 null, null, null);
 
-        if (cursor == null)
-            return false;
-        if (!cursor.moveToFirst()){
+        boolean isFavorite = false;
+        if (cursor != null){
+            if (cursor.moveToFirst()){
+                isFavorite = cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) == 1;
+            }
             cursor.close();
-            return false;
         }
-        boolean isFavorite = cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_FAVORITE)) == 1;
-        cursor.close();
-
         return isFavorite;
     }
 
 	/**
-	 * Deletes all accounts and their transactions from the database
+	 * Deletes all accounts and their transactions (and their splits) from the database.
+     * Basically empties all 3 tables, so use with care ;)
 	 */
     @Override
 	public int deleteAllRecords(){
-		mDb.delete(DatabaseHelper.TRANSACTIONS_TABLE_NAME, null, null);
-        return mDb.delete(DatabaseHelper.ACCOUNTS_TABLE_NAME, null, null);
+		mDb.delete(TransactionEntry.TABLE_NAME, null, null);
+        mDb.delete(SplitEntry.TABLE_NAME, null, null);
+        return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
 
 }
diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index fd9952c7..e8eff5ee 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -16,11 +16,14 @@
 
 package org.gnucash.android.db;
 
+import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.model.AccountType;
 
 /**
  * Adapter to be used for creating and opening the database for read/write operations.
@@ -33,32 +36,7 @@
 	/**
 	 * Tag for logging
 	 */
-	protected static final String TAG = "DatabaseAdapter";
-	
-	//Column indices for the various columns in the database tables
-	//row_id, uid, name and type are common to both tables 	
-	public static final int COLUMN_ROW_ID 	= 0;
-	public static final int COLUMN_UID 		= 1;
-	public static final int COLUMN_NAME 	= 2;
-	public static final int COLUMN_TYPE 	= 3;
-	
-	//columns indices specific to transactions
-	public static final int COLUMN_AMOUNT 		= 4;
-	public static final int COLUMN_DESCRIPTION 	= 5;
-	public static final int COLUMN_TIMESTAMP 	= 6;
-	public static final int COLUMN_ACCOUNT_UID 	= 7;
-	public static final int COLUMN_EXPORTED 	= 8;
-	public static final int COLUMN_DOUBLE_ENTRY_ACCOUNT_UID = 9;
-    public static final int COLUMN_RECURRENCE_PERIOD = 10;
-	
-	//columns indices specific to accounts
-	public static final int COLUMN_CURRENCY_CODE        = 4;
-	public static final int COLUMN_PARENT_ACCOUNT_UID   = 5;
-    public static final int COLUMN_PLACEHOLDER          = 6;
-    public static final int COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID = 7;
-    public static final int COLUMN_COLOR_CODE           = 8;
-	public static final int COLUMN_FAVORITE             = 9;
-    public static final int COLUMN_FULL_NAME            = 10;
+	protected static final String TAG = DatabaseAdapter.class.getName();
 
 	/**
 	 * {@link DatabaseHelper} for creating and opening the database
@@ -85,6 +63,17 @@ public DatabaseAdapter(Context context) {
 		open();
 	}
 
+    /**
+     * Opens the database adapter with an existing database
+     * @param db SQLiteDatabase object
+     */
+    public DatabaseAdapter(SQLiteDatabase db){
+        this.mDb = db;
+        this.mContext = GnuCashApplication.getAppContext();
+        if (!db.isOpen() || db.isReadOnly())
+            throw new IllegalArgumentException("Database not open or is read-only. Require writeable database");
+    }
+
 	/**
 	 * Opens/creates database to be used for reading or writing. 
 	 * @return Reference to self for database manipulation
@@ -104,8 +93,12 @@ public DatabaseAdapter open(){
 	 * Close the database
 	 */
 	public void close(){
-		mDbHelper.close();
-		mDb.close();
+        //only close if we opened the db ourselves (through the helper)
+        //if we received the database object (during migrations) leave it alone
+		if (mDbHelper != null) {
+            mDbHelper.close();
+            mDb.close();
+        }
 	}
 
     /**
@@ -131,7 +124,7 @@ public Context getContext(){
 	 * @return {@link Cursor} to record retrieved
 	 */
 	protected Cursor fetchRecord(String tableName, long rowId){
-		return mDb.query(tableName, null, DatabaseHelper.KEY_ROW_ID + "=" + rowId, 
+		return mDb.query(tableName, null, DatabaseSchema.CommonColumns._ID + "=" + rowId,
 				null, null, null, null);
 	}
 	
@@ -146,13 +139,14 @@ protected Cursor fetchAllRecords(String tableName){
 	}
 
 	/**
-	 * Deletes record with ID <code>rowID</code> from database table <code>tableName</code> 
+	 * Deletes record with ID <code>rowID</code> from database table <code>tableName</code>
+     * This does not delete the transactions and splits associated with the account
 	 * @param tableName Name of table in database
 	 * @param rowId ID of record to be deleted
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
 	 */
 	protected boolean deleteRecord(String tableName, long rowId){
-		return mDb.delete(tableName, DatabaseHelper.KEY_ROW_ID + "=" + rowId, null) > 0;
+		return mDb.delete(tableName, DatabaseSchema.CommonColumns._ID + "=" + rowId, null) > 0;
 	}
 
     /**
@@ -189,4 +183,105 @@ protected int deleteAllRecords(String tableName){
      */
     public abstract int deleteAllRecords();
 
+    /**
+     * Returns the currency code (according to the ISO 4217 standard) of the account
+     * with unique Identifier <code>accountUID</code>
+     * @param accountUID Unique Identifier of the account
+     * @return Currency code of the account
+     */
+    public String getCurrencyCode(String accountUID) {
+        Cursor cursor = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
+                new String[] {DatabaseSchema.AccountEntry.COLUMN_CURRENCY},
+                DatabaseSchema.AccountEntry.COLUMN_UID + "= ?",
+                new String[]{accountUID}, null, null, null);
+
+        if (cursor == null)
+            return null;
+        if (cursor.getCount() <= 0) {
+            cursor.close();
+            return null;
+        }
+
+        cursor.moveToFirst();
+        String currencyCode = cursor.getString(0);
+        cursor.close();
+        return currencyCode;
+    }
+
+    /**
+     * Returns the {@link org.gnucash.android.model.AccountType} of the account with unique ID <code>uid</code>
+     * @param accountUID Unique ID of the account
+     * @return {@link org.gnucash.android.model.AccountType} of the account
+     */
+    public AccountType getAccountType(String accountUID){
+        String type = null;
+        Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
+                new String[]{DatabaseSchema.AccountEntry.COLUMN_TYPE},
+                DatabaseSchema.AccountEntry.COLUMN_UID + "=?",
+                new String[]{accountUID}, null, null, null);
+        if (c != null) {
+            if (c.moveToFirst()) {
+                type = c.getString(c.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_TYPE));
+            }
+            c.close();
+        }
+        return AccountType.valueOf(type);
+    }
+
+    /**
+     * Returns an account UID of the account with record id <code>accountRowID</code>
+     * @param accountRowID Record ID of account as long paramenter
+     * @return String containing UID of account
+     */
+    public String getAccountUID(long accountRowID){
+        String uid = null;
+        Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
+                new String[]{DatabaseSchema.AccountEntry.COLUMN_UID},
+                DatabaseSchema.CommonColumns._ID + "=" + accountRowID,
+                null, null, null, null);
+        if (c != null) {
+            if (c.moveToFirst()) {
+                uid = c.getString(0);
+            }
+            c.close();
+        }
+        return uid;
+    }
+
+    /**
+     * Returns the database row Id of the account with unique Identifier <code>accountUID</code>
+     * @param accountUID Unique identifier of the account
+     * @return Database row ID of the account
+     */
+    public long getAccountID(String accountUID){
+        long id = -1;
+        if (accountUID == null)
+            return id;
+        Cursor c = mDb.query(DatabaseSchema.AccountEntry.TABLE_NAME,
+                new String[]{DatabaseSchema.AccountEntry._ID},
+                DatabaseSchema.AccountEntry.COLUMN_UID + "= ?",
+                new String[]{accountUID}, null, null, null);
+        if (c != null) {
+            if (c.moveToFirst()) {
+                id = c.getLong(0);
+            }
+            c.close();
+        }
+        return id;
+    }
+
+    /**
+     * Updates a record in the table
+     * @param recordId Database ID of the record to be updated
+     * @param columnKey Name of column to be updated
+     * @param newValue  New value to be assigned to the columnKey
+     * @return Number of records affected
+     */
+    public int updateRecord(String tableName, long recordId, String columnKey, String newValue){
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(columnKey, newValue);
+
+        return mDb.update(tableName, contentValues,
+                DatabaseSchema.CommonColumns._ID + "=" + recordId, null);
+    }
 }
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index 2541ff60..29844a64 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -22,7 +22,10 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
-import org.gnucash.android.model.Account.AccountType;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.model.AccountType;
+
+import static org.gnucash.android.db.DatabaseSchema.*;
 
 /**
  * Helper class for managing the SQLite database.
@@ -31,241 +34,137 @@
  *
  */
 public class DatabaseHelper extends SQLiteOpenHelper {
-	
-	/**
+
+    /**
 	 * Tag for logging
 	 */
-	private static final String TAG = "DatabaseHelper";
+	private static final String LOG_TAG = DatabaseHelper.class.getName();
 	
 	/**
 	 * Name of the database
 	 */
 	private static final String DATABASE_NAME = "gnucash_db";
-	
-	/**
-	 * Database version.
-	 * With any change to the database schema, this number must increase
-	 */
-	private static final int DATABASE_VERSION = 6;
-	
-	/**
-	 * Name of accounts table
-	 */
-	public static final String ACCOUNTS_TABLE_NAME 		= "accounts";
-	
-	/**
-	 * Name of transactions table
-	 */
-	public static final String TRANSACTIONS_TABLE_NAME 	= "transactions";
-	
-	/**
-	 * Name of the row ID of database records
-	 * All tables in the database have this column as the first.
-	 * The name must be prefixed with an underscore to allow for Android optimizations
-	 */
-	public static final String KEY_ROW_ID 	= "_id";
-	
-	/**
-	 * Name column in the database.
-	 * Currently used by all tables
-	 */
-	public static final String KEY_NAME 	= "name";
-
-    /**
-     * Key for fully qualified name of the account column
-     * This name includes the parent hierarchy
-     */
-    public static final String KEY_FULL_NAME = "full_name";
 
 	/**
-	 * Unique Identifier.
-	 */
-	public static final String KEY_UID 		= "uid";
-	
-	/**
-	 * Type database column
-	 */
-	public static final String KEY_TYPE 	= "type";
-	
-	/**
-	 * Currency code database column. 
-	 * Acceptable currency codes are specified by the ISO 4217 standard
-	 */
-	public static final String KEY_CURRENCY_CODE = "currency_code";
-	
-	/**
-	 * Transaction amount database column
-	 */
-	public static final String KEY_AMOUNT 		= "amount";
-	
-	/**
-	 * Account unique identifier database column
-	 * This associates transactions to accounts
-	 */
-	public static final String KEY_ACCOUNT_UID 	= "account_uid";
-	
-	/**
-	 * UID of the parent account
-	 */
-	public static final String KEY_PARENT_ACCOUNT_UID = "parent_account_uid";
-	
-	/**
-	 * Account which the origin account this transaction in double entry mode
+	 * Account which the origin account this transaction in double entry mode.
+     * This is no longer used since the introduction of splits
 	 */
+    @Deprecated
 	public static final String KEY_DOUBLE_ENTRY_ACCOUNT_UID 	= "double_account_uid";
 
-    /**
-     * Each account has a default target for transfers when in double entry mode unless otherwise specified.
-     * This key holds the UID of the default transfer account for double entries.
-     */
-    public static final String KEY_DEFAULT_TRANSFER_ACCOUNT_UID = "default_transfer_account_uid";
-
-    /**
-     * Color code for the account
-     */
-    public static final String KEY_COLOR_CODE = "color_code";
-
-	/**
-	 * Transaction description database column
-	 */
-	public static final String KEY_DESCRIPTION 	= "description";
-	
-	/**
-	 * Transaction timestamp database column
-	 * Entries in this column indicate when the transaction was created
-	 */
-	public static final String KEY_TIMESTAMP 	= "timestamp";
-	
-	/**
-	 * Flag for exported transactions in the database
-	 */
-	public static final String KEY_EXPORTED		= "is_exported";
-
-    /**
-     * Flag for placeholder accounts.
-     * Placeholder accounts cannot directly contain transactions
-     */
-    public static final String KEY_PLACEHOLDER  = "is_placeholder";
-
-    /**
-     * This is a key to identify a transaction as part of a recurring transaction series.
-     */
-    public static final String KEY_RECURRENCE_PERIOD = "recurrence_period";
-
-    /**
-     * Marks an account as a favourite account
-     */
-    public static final String KEY_FAVORITE = "favorite";
-
-	/**********************************************************************************************************
-	//if you modify the order of the columns (i.e. the way they are created), 
-	//make sure to modify the indices in DatabaseAdapter
-	**********************************************************************************************************/
-	
 	/**
 	 * SQL statement to create the accounts table in the database
 	 */
-	private static final String ACCOUNTS_TABLE_CREATE = "create table " + ACCOUNTS_TABLE_NAME + " ("
-			+ KEY_ROW_ID + " integer primary key autoincrement, "
-			+ KEY_UID 	+ " varchar(255) not null, "
-			+ KEY_NAME 	+ " varchar(255) not null, "
-			+ KEY_TYPE 	+ " varchar(255) not null, "			
-			+ KEY_CURRENCY_CODE + " varchar(255) not null, "
-			+ KEY_PARENT_ACCOUNT_UID + " varchar(255), "
-            + KEY_PLACEHOLDER   + " tinyint default 0, "
-            + KEY_DEFAULT_TRANSFER_ACCOUNT_UID + " varchar(255), "
-            + KEY_COLOR_CODE    + " varchar(255), "
-            + KEY_FAVORITE 		+ " tinyint default 0, "
-            + KEY_FULL_NAME 	+ " varchar(255), "
-			+ "UNIQUE (" + KEY_UID + ")"	
+	private static final String ACCOUNTS_TABLE_CREATE = "create table " + AccountEntry.TABLE_NAME + " ("
+			+ AccountEntry._ID                      + " integer primary key autoincrement, "
+			+ AccountEntry.COLUMN_UID 	            + " varchar(255) not null, "
+			+ AccountEntry.COLUMN_NAME 	            + " varchar(255) not null, "
+			+ AccountEntry.COLUMN_TYPE              + " varchar(255) not null, "
+			+ AccountEntry.COLUMN_CURRENCY          + " varchar(255) not null, "
+            + AccountEntry.COLUMN_COLOR_CODE        + " varchar(255), "
+            + AccountEntry.COLUMN_FAVORITE 		    + " tinyint default 0, "
+            + AccountEntry.COLUMN_FULL_NAME 	    + " varchar(255), "
+            + AccountEntry.COLUMN_PLACEHOLDER            + " tinyint default 0, "
+            + AccountEntry.COLUMN_PARENT_ACCOUNT_UID     + " varchar(255), "
+            + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID   + " varchar(255), "
+            + "UNIQUE (" + AccountEntry.COLUMN_UID       + ")"
 			+ ");";
 	
 	/**
 	 * SQL statement to create the transactions table in the database
 	 */
-	private static final String TRANSACTIONS_TABLE_CREATE = "create table " + TRANSACTIONS_TABLE_NAME + " ("
-			+ KEY_ROW_ID 		+ " integer primary key autoincrement, "
-			+ KEY_UID 			+ " varchar(255) not null, "			
-			+ KEY_NAME 			+ " varchar(255), "
-			+ KEY_TYPE 			+ " varchar(255) not null, "
-			+ KEY_AMOUNT 		+ " varchar(255) not null, "
-			+ KEY_DESCRIPTION 	+ " text, "
-			+ KEY_TIMESTAMP 	+ " integer not null, "
-			+ KEY_ACCOUNT_UID 	+ " varchar(255) not null, "			
-			+ KEY_EXPORTED 		+ " tinyint default 0, "
-			+ KEY_DOUBLE_ENTRY_ACCOUNT_UID 	+ " varchar(255), "
-            + KEY_RECURRENCE_PERIOD         + " integer default 0, "
-			+ "FOREIGN KEY (" 	+ KEY_ACCOUNT_UID + ") REFERENCES " + ACCOUNTS_TABLE_NAME + " (" + KEY_UID + "), "
-			+ "FOREIGN KEY (" 	+ KEY_DOUBLE_ENTRY_ACCOUNT_UID + ") REFERENCES " + ACCOUNTS_TABLE_NAME + " (" + KEY_UID + "), "
-			+ "UNIQUE (" 		+ KEY_UID + ") " 
+	private static final String TRANSACTIONS_TABLE_CREATE = "create table " + TransactionEntry.TABLE_NAME + " ("
+			+ TransactionEntry._ID 		            + " integer primary key autoincrement, "
+			+ TransactionEntry.COLUMN_UID 		    + " varchar(255) not null, "
+			+ TransactionEntry.COLUMN_NAME		    + " varchar(255), "
+			+ TransactionEntry.COLUMN_DESCRIPTION 	+ " text, "
+			+ TransactionEntry.COLUMN_TIMESTAMP     + " integer not null, "
+			+ TransactionEntry.COLUMN_EXPORTED      + " tinyint default 0, "
+            + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
+            + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0, "
+			+ "UNIQUE (" 		+ TransactionEntry.COLUMN_UID + ") "
 			+ ");";
 
-	/**
+    /**
+     * SQL statement to create the transaction splits table
+     */
+    private static final String SPLITS_TABLE_CREATE = "CREATE TABLE " + SplitEntry.TABLE_NAME + " ("
+            + SplitEntry._ID                    + " integer primary key autoincrement, "
+            + SplitEntry.COLUMN_UID             + " varchar(255) not null, "
+            + SplitEntry.COLUMN_MEMO 	        + " text, "
+            + SplitEntry.COLUMN_TYPE            + " varchar(255) not null, "
+            + SplitEntry.COLUMN_AMOUNT          + " varchar(255) not null, "
+            + SplitEntry.COLUMN_ACCOUNT_UID 	+ " varchar(255) not null, "
+            + SplitEntry.COLUMN_TRANSACTION_UID + " varchar(255) not null, "
+            + "FOREIGN KEY (" 	+ SplitEntry.COLUMN_ACCOUNT_UID + ") REFERENCES " + AccountEntry.TABLE_NAME + " (" + AccountEntry.COLUMN_UID + "), "
+            + "FOREIGN KEY (" 	+ SplitEntry.COLUMN_TRANSACTION_UID + ") REFERENCES " + TransactionEntry.TABLE_NAME + " (" + TransactionEntry.COLUMN_UID + "), "
+            + "UNIQUE (" 		+ SplitEntry.COLUMN_UID + ") "
+            + ");";
+
+    /**
 	 * Constructor
 	 * @param context Application context
 	 */
 	public DatabaseHelper(Context context){
-		super(context, DATABASE_NAME, null, DATABASE_VERSION);		
+		super(context, DATABASE_NAME, null, DatabaseSchema.DATABASE_VERSION);
 	}
 	
 	@Override
 	public void onCreate(SQLiteDatabase db) {
-		Log.i(TAG, "Creating gnucash database tables");
-		db.execSQL(ACCOUNTS_TABLE_CREATE);
-		db.execSQL(TRANSACTIONS_TABLE_CREATE);
+		createDatabaseTables(db);
 	}
 
 	@Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-		Log.i(TAG, "Upgrading database from version " 
+		Log.i(LOG_TAG, "Upgrading database from version "
 				+ oldVersion + " to " + newVersion);
 		
 		if (oldVersion < newVersion){
 			//introducing double entry accounting
-			Log.i(TAG, "Upgrading database to version " + newVersion);
+			Log.i(LOG_TAG, "Upgrading database to version " + newVersion);
 			if (oldVersion == 1 && newVersion >= 2){
-				Log.i(TAG, "Adding column for splitting transactions");
-				String addColumnSql = "ALTER TABLE " + TRANSACTIONS_TABLE_NAME + 
+				Log.i(LOG_TAG, "Adding column for double-entry transactions");
+				String addColumnSql = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
 									" ADD COLUMN " + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " varchar(255)";
 				
 				//introducing sub accounts
-				Log.i(TAG, "Adding column for parent accounts");
-				String addParentAccountSql = "ALTER TABLE " + ACCOUNTS_TABLE_NAME + 
-						" ADD COLUMN " + KEY_PARENT_ACCOUNT_UID + " varchar(255)";
+				Log.i(LOG_TAG, "Adding column for parent accounts");
+				String addParentAccountSql = "ALTER TABLE " + AccountEntry.TABLE_NAME +
+						" ADD COLUMN " + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " varchar(255)";
 	
 				db.execSQL(addColumnSql);
 				db.execSQL(addParentAccountSql);
 
                 //update account types to GnuCash account types
                 //since all were previously CHECKING, now all will be CASH
-                Log.i(TAG, "Converting account types to GnuCash compatible types");
+                Log.i(LOG_TAG, "Converting account types to GnuCash compatible types");
                 ContentValues cv = new ContentValues();
-                cv.put(KEY_TYPE, AccountType.CASH.toString());
-                db.update(ACCOUNTS_TABLE_NAME, cv, null, null);
+                cv.put(SplitEntry.COLUMN_TYPE, AccountType.CASH.toString());
+                db.update(AccountEntry.TABLE_NAME, cv, null, null);
 
                 oldVersion = 2;
             }
 			
 
             if (oldVersion == 2 && newVersion >= 3){
-                Log.i(TAG, "Adding flag for placeholder accounts");
-                String addPlaceHolderAccountFlagSql = "ALTER TABLE " + ACCOUNTS_TABLE_NAME +
-                        " ADD COLUMN " + KEY_PLACEHOLDER + " tinyint default 0";
+                Log.i(LOG_TAG, "Adding flag for placeholder accounts");
+                String addPlaceHolderAccountFlagSql = "ALTER TABLE " + AccountEntry.TABLE_NAME +
+                        " ADD COLUMN " + AccountEntry.COLUMN_PLACEHOLDER + " tinyint default 0";
 
                 db.execSQL(addPlaceHolderAccountFlagSql);
                 oldVersion = 3;
             }
 
             if (oldVersion == 3 && newVersion >= 4){
-                Log.i(TAG, "Updating database to version 4");
-                String addRecurrencePeriod = "ALTER TABLE " + TRANSACTIONS_TABLE_NAME +
-                        " ADD COLUMN " + KEY_RECURRENCE_PERIOD + " integer default 0";
+                Log.i(LOG_TAG, "Updating database to version 4");
+                String addRecurrencePeriod = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
+                        " ADD COLUMN " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0";
 
-                String addDefaultTransferAccount = "ALTER TABLE " + ACCOUNTS_TABLE_NAME
-                        + " ADD COLUMN " + KEY_DEFAULT_TRANSFER_ACCOUNT_UID + " varchar(255)";
+                String addDefaultTransferAccount = "ALTER TABLE " + AccountEntry.TABLE_NAME
+                        + " ADD COLUMN " + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " varchar(255)";
 
-                String addAccountColor = " ALTER TABLE " + ACCOUNTS_TABLE_NAME
-                        + " ADD COLUMN " + KEY_COLOR_CODE + " varchar(255)";
+                String addAccountColor = " ALTER TABLE " + AccountEntry.TABLE_NAME
+                        + " ADD COLUMN " + AccountEntry.COLUMN_COLOR_CODE + " varchar(255)";
 
                 db.execSQL(addRecurrencePeriod);
                 db.execSQL(addDefaultTransferAccount);
@@ -275,36 +174,36 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             }
 
             if (oldVersion == 4 && newVersion >= 5){
-                Log.i(TAG, "Upgrading database to version 5");
-                String addAccountFavorite = " ALTER TABLE " + ACCOUNTS_TABLE_NAME
-                        + " ADD COLUMN " + KEY_FAVORITE + " tinyint default 0";
+                Log.i(LOG_TAG, "Upgrading database to version 5");
+                String addAccountFavorite = " ALTER TABLE " + AccountEntry.TABLE_NAME
+                        + " ADD COLUMN " + AccountEntry.COLUMN_FAVORITE + " tinyint default 0";
                 db.execSQL(addAccountFavorite);
 
                 oldVersion = 5;
             }
 
             if (oldVersion == 5 && newVersion >= 6){
-                Log.i(TAG, "Upgrading database to version 6");
-                String addFullAccountNameQuery = " ALTER TABLE " + ACCOUNTS_TABLE_NAME
-                        + " ADD COLUMN " + KEY_FULL_NAME + " varchar(255) ";
+                Log.i(LOG_TAG, "Upgrading database to version 6");
+                String addFullAccountNameQuery = " ALTER TABLE " + AccountEntry.TABLE_NAME
+                        + " ADD COLUMN " + AccountEntry.COLUMN_FULL_NAME + " varchar(255) ";
                 db.execSQL(addFullAccountNameQuery);
 
                 //update all existing accounts with their fully qualified name
-                Cursor cursor = db.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                        new String[]{KEY_ROW_ID, KEY_UID},
+                Cursor cursor = db.query(AccountEntry.TABLE_NAME,
+                        new String[]{AccountEntry._ID, AccountEntry.COLUMN_UID},
                         null, null, null, null, null);
                 while(cursor != null && cursor.moveToNext()){
-                    String uid = cursor.getString(cursor.getColumnIndexOrThrow(KEY_UID));
-                    String fullName = getFullyQualifiedAccountName(db, uid);
+                    String uid = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+                    String fullName = MigrationHelper.getFullyQualifiedAccountName(db, uid);
 
                     if (fullName == null)
                         continue;
 
                     ContentValues contentValues = new ContentValues();
-                    contentValues.put(KEY_FULL_NAME, fullName);
+                    contentValues.put(AccountEntry.COLUMN_FULL_NAME, fullName);
 
-                    long id = cursor.getLong(cursor.getColumnIndexOrThrow(KEY_ROW_ID));
-                    db.update(ACCOUNTS_TABLE_NAME, contentValues, KEY_ROW_ID + " = " + id, null);
+                    long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
+                    db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry._ID + " = " + id, null);
                 }
 
                 if (cursor != null) {
@@ -313,78 +212,49 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
                 oldVersion = 6;
             }
+
+            if (oldVersion == 6 && newVersion >= DatabaseSchema.SPLITS_DB_VERSION){
+                //TODO: add account description and starting balance
+
+                Log.i(LOG_TAG, "Upgrading database to version 7");
+
+                String filepath = MigrationHelper.exportDatabase(db, ExportFormat.GNC_XML);
+
+                dropAllDatabaseTables(db);
+                createDatabaseTables(db);
+
+                MigrationHelper.importGnucashXML(db, filepath);
+
+                oldVersion = DatabaseSchema.SPLITS_DB_VERSION;
+            }
 		}
 
         if (oldVersion != newVersion) {
-            Log.w(TAG, "Upgrade for the database failed. The Database is currently at version " + oldVersion);
+            Log.w(LOG_TAG, "Upgrade for the database failed. The Database is currently at version " + oldVersion);
         }
 	}
 
     /**
-     * Performs same functtion as {@link org.gnucash.android.db.AccountsDbAdapter#getFullyQualifiedAccountName(String)}
-     * <p>This method is only necessary because we cannot open the database again (by instantiating {@link AccountsDbAdapter}
-     * while it is locked for upgrades. So we reimplement the method here.</p>
-     * @param db SQLite database
-     * @param accountUID Unique ID of account whose fully qualified name is to be determined
-     * @return Fully qualified (colon-sepaated) account name
-     * @see org.gnucash.android.db.AccountsDbAdapter#getFullyQualifiedAccountName(String)
+     * Creates the tables in the database
+     * @param db Database instance
      */
-    private String getFullyQualifiedAccountName(SQLiteDatabase db, String accountUID){
-        //get the parent account UID of the account
-        Cursor cursor = db.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[] {DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_PARENT_ACCOUNT_UID},
-                DatabaseHelper.KEY_UID + " = ?",
-                new String[]{accountUID},
-                null, null, null, null);
-
-        String parentAccountUID = null;
-        if (cursor != null && cursor.moveToFirst()){
-            parentAccountUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_PARENT_ACCOUNT_UID));
-            cursor.close();
-        }
-
-        //get the name of the account
-        cursor = db.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_NAME},
-                DatabaseHelper.KEY_UID + " = '" + accountUID + "'",
-                null, null, null, null);
-
-        String accountName = null;
-        if (cursor != null && cursor.moveToFirst()){
-            accountName = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_NAME));
-            cursor.close();
-        }
-
-        String gnucashRootAccountUID = getGnuCashRootAccountUID(db);
-        if (parentAccountUID == null || accountName == null
-            || parentAccountUID.equalsIgnoreCase(gnucashRootAccountUID)){
-            return accountName;
-        }
-
-        String parentAccountName = getFullyQualifiedAccountName(db, parentAccountUID);
-
-        return parentAccountName + AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + accountName;
+    private void createDatabaseTables(SQLiteDatabase db) {
+        Log.i(LOG_TAG, "Creating database tables");
+        db.execSQL(ACCOUNTS_TABLE_CREATE);
+        db.execSQL(TRANSACTIONS_TABLE_CREATE);
+        db.execSQL(SPLITS_TABLE_CREATE);
     }
 
     /**
-     * Returns the GnuCash ROOT account UID.
-     * <p>In GnuCash desktop account structure, there is a root account (which is not visible in the UI) from which
-     * other top level accounts derive. GnuCash Android does not have this ROOT account by default unless the account
-     * structure was imported from GnuCash for desktop. Hence this method also returns <code>null</code> as an
-     * acceptable result.</p>
-     * <p><b>Note:</b> NULL is an acceptable response, be sure to check for it</p>
-     * @return Unique ID of the GnuCash root account.
+     * Drops all tables in the database
+     * @param db Database instance
      */
-    private String getGnuCashRootAccountUID(SQLiteDatabase db){
-        String condition = DatabaseHelper.KEY_TYPE + "= '" + AccountType.ROOT.name() + "'";
-        Cursor cursor =  db.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                null, condition, null, null, null,
-                DatabaseHelper.KEY_NAME + " ASC");
-        String rootUID = null;
-        if (cursor != null && cursor.moveToFirst()){
-            rootUID = cursor.getString(DatabaseAdapter.COLUMN_UID);
-            cursor.close();
-        }
-        return rootUID;
+    private void dropAllDatabaseTables(SQLiteDatabase db) {
+        Log.i(LOG_TAG, "Dropping all database tables");
+        db.execSQL("DROP TABLE IF EXISTS " + AccountEntry.TABLE_NAME);
+        db.execSQL("DROP TABLE IF EXISTS " + TransactionEntry.TABLE_NAME);
+        db.execSQL("DROP TABLE IF EXISTS " + SplitEntry.TABLE_NAME);
     }
+
+
 }
diff --git a/app/src/org/gnucash/android/db/DatabaseSchema.java b/app/src/org/gnucash/android/db/DatabaseSchema.java
new file mode 100644
index 00000000..ddb2c680
--- /dev/null
+++ b/app/src/org/gnucash/android/db/DatabaseSchema.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.db;
+
+import android.provider.BaseColumns;
+
+/**
+ * Holds the
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class DatabaseSchema {
+    /**
+     * Database version.
+     * With any change to the database schema, this number must increase
+     */
+    static final int DATABASE_VERSION = 7;
+
+    /**
+     * Database version where Splits were introduced
+     */
+    public static final int SPLITS_DB_VERSION = 7;
+
+
+    //no instances are to be instantiated
+    private DatabaseSchema(){}
+
+    public interface CommonColumns extends BaseColumns {
+        public static final String COLUMN_UID       = "uid";
+    }
+
+    /**
+     * Columns for the account tables
+     */
+    public static abstract class AccountEntry implements CommonColumns {
+
+        public static final String TABLE_NAME                   = "accounts";
+
+        public static final String COLUMN_NAME                  = "name";
+        public static final String COLUMN_CURRENCY              = "currency_code";
+        public static final String COLUMN_PARENT_ACCOUNT_UID    = "parent_account_uid";
+        public static final String COLUMN_PLACEHOLDER           = "is_placeholder";
+        public static final String COLUMN_COLOR_CODE            = "color_code";
+        public static final String COLUMN_FAVORITE              = "favorite";
+        public static final String COLUMN_FULL_NAME             = "full_name";
+        public static final String COLUMN_TYPE                  = "type";
+        public static final String COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID = "default_transfer_account_uid";
+
+    }
+
+    /**
+     * Column schema for the transaction table in the database
+     */
+    public static abstract class TransactionEntry implements CommonColumns {
+
+        public static final String TABLE_NAME                   = "transactions";
+
+        public static final String COLUMN_NAME                  = "name";
+        public static final String COLUMN_DESCRIPTION           = "description";
+        public static final String COLUMN_CURRENCY              = "currency_code";
+        public static final String COLUMN_TIMESTAMP             = "timestamp";
+        public static final String COLUMN_EXPORTED              = "is_exported";
+        public static final String COLUMN_RECURRENCE_PERIOD     = "recurrence_period";
+    }
+
+    /**
+     * Column schema for the splits table in the database
+     */
+    public static abstract class SplitEntry implements CommonColumns {
+
+        public static final String TABLE_NAME                   = "splits";
+
+        public static final String COLUMN_TYPE                  = "type";
+        public static final String COLUMN_AMOUNT                = "amount";
+        public static final String COLUMN_MEMO                  = "memo";
+        public static final String COLUMN_ACCOUNT_UID           = "account_uid";
+        public static final String COLUMN_TRANSACTION_UID       = "transaction_uid";
+    }
+}
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
new file mode 100644
index 00000000..36ad0f35
--- /dev/null
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.db;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.os.Environment;
+import android.util.Log;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.export.ExportParams;
+import org.gnucash.android.export.Exporter;
+import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.importer.GncXmlHandler;
+import org.gnucash.android.importer.GncXmlImportTask;
+import org.gnucash.android.model.AccountType;
+
+import java.io.*;
+
+import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
+
+/**
+ * Date: 23.03.2014
+ *
+ * @author Ngewi
+ */
+public class MigrationHelper {
+    public static final String LOG_TAG = "MigrationHelper";
+
+    /**
+     * Performs same functtion as {@link AccountsDbAdapter#getFullyQualifiedAccountName(String)}
+     * <p>This method is only necessary because we cannot open the database again (by instantiating {@link org.gnucash.android.db.AccountsDbAdapter}
+     * while it is locked for upgrades. So we reimplement the method here.</p>
+     * @param db SQLite database
+     * @param accountUID Unique ID of account whose fully qualified name is to be determined
+     * @return Fully qualified (colon-sepaated) account name
+     * @see AccountsDbAdapter#getFullyQualifiedAccountName(String)
+     */
+    static String getFullyQualifiedAccountName(SQLiteDatabase db, String accountUID){
+        //get the parent account UID of the account
+        Cursor cursor = db.query(AccountEntry.TABLE_NAME,
+                new String[] {AccountEntry.COLUMN_PARENT_ACCOUNT_UID},
+                AccountEntry.COLUMN_UID + " = ?",
+                new String[]{accountUID},
+                null, null, null, null);
+
+        String parentAccountUID = null;
+        if (cursor != null && cursor.moveToFirst()){
+            parentAccountUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
+            cursor.close();
+        }
+
+        //get the name of the account
+        cursor = db.query(AccountEntry.TABLE_NAME,
+                new String[]{AccountEntry.COLUMN_NAME},
+                AccountEntry.COLUMN_UID + " = ?",
+                new String[]{accountUID}, null, null, null);
+
+        String accountName = null;
+        if (cursor != null && cursor.moveToFirst()){
+            accountName = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME));
+            cursor.close();
+        }
+
+        String gnucashRootAccountUID = getGnuCashRootAccountUID(db);
+        if (parentAccountUID == null || accountName == null
+            || parentAccountUID.equalsIgnoreCase(gnucashRootAccountUID)){
+            return accountName;
+        }
+
+        String parentAccountName = getFullyQualifiedAccountName(db, parentAccountUID);
+
+        return parentAccountName + AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + accountName;
+    }
+
+    /**
+     * Returns the GnuCash ROOT account UID.
+     * <p>In GnuCash desktop account structure, there is a root account (which is not visible in the UI) from which
+     * other top level accounts derive. GnuCash Android does not have this ROOT account by default unless the account
+     * structure was imported from GnuCash for desktop. Hence this method also returns <code>null</code> as an
+     * acceptable result.</p>
+     * <p><b>Note:</b> NULL is an acceptable response, be sure to check for it</p>
+     * @return Unique ID of the GnuCash root account.
+     */
+    private static String getGnuCashRootAccountUID(SQLiteDatabase db){
+        String condition = AccountEntry.COLUMN_TYPE + "= '" + AccountType.ROOT.name() + "'";
+        Cursor cursor =  db.query(DatabaseSchema.AccountEntry.TABLE_NAME,
+                null, condition, null, null, null,
+                AccountEntry.COLUMN_NAME + " ASC");
+        String rootUID = null;
+        if (cursor != null && cursor.moveToFirst()){
+            rootUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+            cursor.close();
+        }
+        return rootUID;
+    }
+
+    /**
+     * Exports the database to a GnuCash XML file and returns the path to the file
+     * @return String with exported GnuCash XML
+     */
+    static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
+        Log.i(LOG_TAG, "Exporting database to GnuCash XML");
+        ExportParams exportParams = new ExportParams(format);
+        exportParams.setExportAllTransactions(true);
+        exportParams.setExportTarget(ExportParams.ExportTarget.SD_CARD);
+        exportParams.setDeleteTransactionsAfterExport(false);
+
+        new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
+        exportParams.setTargetFilepath(Environment.getExternalStorageDirectory()
+                + "/gnucash/" + Exporter.buildExportFilename(format));
+
+        Exporter exporter = null;
+        switch (format){
+            case QIF:
+                exporter = new QifExporter(exportParams, db);
+                break;
+            case GNC_XML:
+            default:
+                exporter = new GncXmlExporter(exportParams, db);
+        }
+        try {
+            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
+                    new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
+            writer.write(exporter.generateExport());
+
+            writer.flush();
+            writer.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+            throw new RuntimeException("Error backing up database for upgrade", e);
+        }
+
+        return exportParams.getTargetFilepath();
+    }
+
+    /**
+     * Imports GnuCash XML into the database from file
+     * @param filepath Path to GnuCash XML file
+     */
+    static void importGnucashXML(SQLiteDatabase db, String filepath) {
+        Log.i(LOG_TAG, "Importing GnuCash XML");
+        try {
+            FileInputStream inputStream = new FileInputStream(filepath);
+            GncXmlHandler.parse(db, inputStream);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+            throw new RuntimeException(e);
+        }
+
+        //update the fully qualified names because
+        //during import, an account may be imported before its parent which will make the full name null:<name>
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db);
+        Cursor cursor = accountsDbAdapter.fetchAllRecords();
+        if (cursor != null){
+            while (cursor.moveToNext()){
+                long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
+                accountsDbAdapter.updateAccount(id, AccountEntry.COLUMN_FULL_NAME,
+                        accountsDbAdapter.getFullyQualifiedAccountName(id));
+            }
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
new file mode 100644
index 00000000..643ae801
--- /dev/null
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -0,0 +1,431 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.db;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteQueryBuilder;
+import android.util.Log;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.TransactionType;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.gnucash.android.db.DatabaseSchema.*;
+
+/**
+ * Database adapter for managing transaction splits in the database
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class SplitsDbAdapter extends DatabaseAdapter {
+
+    protected static final String TAG = "SplitsDbAdapter";
+
+    public SplitsDbAdapter(Context context){
+        super(context);
+    }
+
+    public SplitsDbAdapter(SQLiteDatabase db) {
+        super(db);
+    }
+
+    /**
+     * Adds a split to the database.
+     * If the split (with same unique ID) already exists, then it is simply updated
+     * @param split {@link org.gnucash.android.model.Split} to be recorded in DB
+     * @return Record ID of the newly saved split
+     */
+    public long addSplit(Split split){
+        ContentValues contentValues = new ContentValues();
+        contentValues.put(SplitEntry.COLUMN_UID,        split.getUID());
+        contentValues.put(SplitEntry.COLUMN_AMOUNT,     split.getAmount().absolute().toPlainString());
+        contentValues.put(SplitEntry.COLUMN_TYPE,       split.getType().name());
+        contentValues.put(SplitEntry.COLUMN_MEMO,       split.getMemo());
+        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, split.getAccountUID());
+        contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, split.getTransactionUID());
+
+        long rowId = -1;
+        if ((rowId = getID(split.getUID())) > 0){
+            //if split already exists, then just update
+            Log.d(TAG, "Updating existing transaction split");
+            mDb.update(SplitEntry.TABLE_NAME, contentValues,
+                    SplitEntry._ID + " = " + rowId, null);
+        } else {
+            Log.d(TAG, "Adding new transaction split to db");
+            rowId = mDb.insert(SplitEntry.TABLE_NAME, null, contentValues);
+        }
+
+        //when a split is updated, we want mark the transaction as not exported
+        updateRecord(TransactionEntry.TABLE_NAME, getTransactionID(split.getTransactionUID()),
+                TransactionEntry.COLUMN_EXPORTED, String.valueOf(rowId > 0 ? 1 : 0));
+        return rowId;
+    }
+
+    /**
+     * Builds a split instance from the data pointed to by the cursor provided
+     * <p>This method will not move the cursor in any way. So the cursor should already by pointing to the correct entry</p>
+     * @param cursor Cursor pointing to transaction record in database
+     * @return {@link org.gnucash.android.model.Split} instance
+     */
+    public Split buildSplitInstance(Cursor cursor){
+        String uid          = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_UID));
+        String amountString = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_AMOUNT));
+        String typeName     = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_TYPE));
+        String accountUID   = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
+        String transxUID    = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_TRANSACTION_UID));
+        String memo         = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_MEMO));
+
+        String currencyCode = getCurrencyCode(accountUID);
+        Money amount = new Money(amountString, currencyCode);
+
+        Split split = new Split(amount, accountUID);
+        split.setUID(uid);
+        split.setTransactionUID(transxUID);
+        split.setType(TransactionType.valueOf(typeName));
+        split.setMemo(memo);
+
+        return split;
+    }
+
+
+    /**
+     * Retrieves a split from the database
+     * @param uid Unique Identifier String of the split transaction
+     * @return {@link org.gnucash.android.model.Split} instance
+     */
+    public Split getSplit(String uid){
+        long id = getID(uid);
+        Cursor cursor = fetchRecord(id);
+
+        Split split = null;
+        if (cursor != null && cursor.moveToFirst()){
+            split = buildSplitInstance(cursor);
+            cursor.close();
+        }
+        return split;
+    }
+
+    /**
+     * Returns the sum of the splits for a given account.
+     * This takes into account the kind of movement caused by the split in the account (which also depends on account type)
+     * @param accountUID String unique ID of account
+     * @return Balance of the splits for this account
+     */
+    public Money computeSplitBalance(String accountUID){
+        Cursor cursor = fetchSplitsForAccount(accountUID);
+        String currencyCode = getCurrencyCode(accountUID);
+        Money splitSum = new Money("0", currencyCode);
+        AccountType accountType = getAccountType(accountUID);
+
+        if (cursor != null){
+            while(cursor.moveToNext()){
+                String amountString = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_AMOUNT));
+                String typeString = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_TYPE));
+
+                TransactionType transactionType = TransactionType.valueOf(typeString);
+                Money amount = new Money(amountString, currencyCode);
+
+                if (accountType.hasDebitNormalBalance()){
+                    switch (transactionType) {
+                        case DEBIT:
+                            splitSum = splitSum.add(amount);
+                            break;
+                        case CREDIT:
+                            splitSum = splitSum.subtract(amount);
+                            break;
+                    }
+                } else {
+                    switch (transactionType) {
+                        case DEBIT:
+                            splitSum = splitSum.subtract(amount);
+                            break;
+                        case CREDIT:
+                            splitSum = splitSum.add(amount);
+                            break;
+                    }
+                }
+            }
+            cursor.close();
+        }
+        return splitSum;
+    }
+
+    /**
+     * Returns the list of splits for a transaction
+     * @param transactionUID String unique ID of transaction
+     * @return List of {@link org.gnucash.android.model.Split}s
+     */
+    public List<Split> getSplitsForTransaction(String transactionUID){
+        Cursor cursor = fetchSplitsForTransaction(transactionUID);
+        List<Split> splitList = new ArrayList<Split>();
+        while (cursor != null && cursor.moveToNext()){
+            splitList.add(buildSplitInstance(cursor));
+        }
+        if (cursor != null)
+            cursor.close();
+
+        return splitList;
+    }
+
+    /**
+     * Returns the list of splits for a transaction
+     * @param transactionID DB record ID of the transaction
+     * @return List of {@link org.gnucash.android.model.Split}s
+     * @see #getSplitsForTransaction(String)
+     * @see #getTransactionUID(long)
+     */
+    public List<Split> getSplitsForTransaction(long transactionID){
+        return getSplitsForTransaction(getTransactionUID(transactionID));
+    }
+
+    /**
+     * Fetch splits for a given transaction within a specific account
+     * @param transactionUID String unique ID of transaction
+     * @param accountUID String unique ID of account
+     * @return List of splits
+     */
+    public List<Split> getSplitsForTransactionInAccount(String transactionUID, String accountUID){
+        Cursor cursor = fetchSplitsForTransactionAndAccount(transactionUID, accountUID);
+        List<Split> splitList = new ArrayList<Split>();
+        while (cursor != null && cursor.moveToNext()){
+            splitList.add(buildSplitInstance(cursor));
+        }
+        if (cursor != null)
+            cursor.close();
+
+        return splitList;
+    }
+
+    /**
+     * Fetches a collection of splits for a given condition and sorted by <code>sortOrder</code>
+     * @param condition String condition, formatted as SQL WHERE clause
+     * @param sortOrder Sort order for the returned records
+     * @return Cursor to split records
+     */
+    public Cursor fetchSplits(String condition, String sortOrder){
+        return mDb.query(SplitEntry.TABLE_NAME,
+                null, condition, null, null, null, sortOrder);
+    }
+
+    /**
+     * Returns the database record ID of the split with unique IDentifier <code>uid</code>
+     * @param uid Unique Identifier String of the split transaction
+     * @return Database record ID of split
+     */
+    public long getID(String uid){
+        Cursor cursor = mDb.query(SplitEntry.TABLE_NAME,
+                new String[] {SplitEntry._ID},
+                SplitEntry.COLUMN_UID + " = ?", new String[]{uid}, null, null, null);
+        long result = -1;
+        if (cursor != null && cursor.moveToFirst()){
+            Log.d(TAG, "Transaction already exists. Returning existing id");
+            result = cursor.getLong(cursor.getColumnIndexOrThrow(SplitEntry._ID));
+
+            cursor.close();
+        }
+        return result;
+    }
+
+    /**
+     * Returns the unique identifier string of the split
+     * @param id Database record ID of the split
+     * @return String unique identifier of the split
+     */
+    public String getUID(long id){
+        Cursor cursor = mDb.query(SplitEntry.TABLE_NAME,
+                new String[]{SplitEntry.COLUMN_UID},
+                SplitEntry._ID + " = " + id, null, null, null, null);
+
+        String uid = null;
+        if (cursor != null){
+            if (cursor.moveToFirst()) {
+                uid = cursor.getString(cursor.getColumnIndexOrThrow(SplitEntry.COLUMN_UID));
+            }
+            cursor.close();
+        }
+        return uid;
+    }
+
+    /**
+     * Returns a Cursor to a dataset of splits belonging to a specific transaction
+     * @param transactionUID Unique idendtifier of the transaction
+     * @return Cursor to splits
+     */
+    public Cursor fetchSplitsForTransaction(String transactionUID){
+        Log.v(TAG, "Fetching all splits for transaction UID " + transactionUID);
+        return mDb.query(SplitEntry.TABLE_NAME,
+                null, SplitEntry.COLUMN_TRANSACTION_UID + " = ?",
+                new String[]{transactionUID},
+                null, null, null);
+    }
+
+    /**
+     * Fetches splits for a given account
+     * @param accountUID String unique ID of account
+     * @return Cursor containing splits dataset
+     */
+    public Cursor fetchSplitsForAccount(String accountUID){
+        Log.d(TAG, "Fetching all splits for account UID " + accountUID);
+
+        //This is more complicated than a simple "where account_uid=?" query because
+        // we need to *not* return any splits which belong to recurring transactions
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME
+                + " INNER JOIN " +  SplitEntry.TABLE_NAME + " ON "
+                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
+        queryBuilder.setDistinct(true);
+        String[] projectionIn = new String[]{SplitEntry.TABLE_NAME + ".*"};
+        String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
+                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+        String[] selectionArgs = new String[]{accountUID};
+        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
+
+        return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
+
+    }
+
+    /**
+     * Returns a cursor to splits for a given transaction and account
+     * @param transactionUID Unique idendtifier of the transaction
+     * @param accountUID String unique ID of account
+     * @return Cursor to splits data set
+     */
+    public Cursor fetchSplitsForTransactionAndAccount(String transactionUID, String accountUID){
+        Log.v(TAG, "Fetching all splits for transaction ID " + transactionUID
+                + "and account ID " + accountUID);
+        return mDb.query(SplitEntry.TABLE_NAME,
+                null, SplitEntry.COLUMN_TRANSACTION_UID + " = ? AND "
+                + SplitEntry.COLUMN_ACCOUNT_UID + " = ?",
+                new String[]{transactionUID, accountUID},
+                null, null, SplitEntry.COLUMN_AMOUNT + " ASC");
+    }
+
+    /**
+     * Returns the unique ID of a transaction given the database record ID of same
+     * @param transactionId Database record ID of the transaction
+     * @return String unique ID of the transaction or null if transaction with the ID cannot be found.
+     */
+    public String getTransactionUID(long transactionId){
+        Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
+                new String[]{TransactionEntry.COLUMN_UID},
+                TransactionEntry._ID + " = " + transactionId,
+                null, null, null, null);
+
+        String trxUID = null;
+        if (cursor != null && cursor.moveToFirst()){
+            trxUID = cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID));
+        }
+
+        return trxUID;
+    }
+
+    @Override
+    public Cursor fetchRecord(long rowId) {
+        return fetchRecord(SplitEntry.TABLE_NAME, rowId);
+    }
+
+    @Override
+    public Cursor fetchAllRecords() {
+        return fetchAllRecords(SplitEntry.TABLE_NAME);
+    }
+
+    @Override
+    public boolean deleteRecord(long rowId) {
+        String transactionUID = getSplit(getUID(rowId)).getTransactionUID();
+        boolean result = deleteRecord(SplitEntry.TABLE_NAME, rowId);
+
+        //if we just deleted the last split, then remove the transaction from db
+        Cursor cursor = fetchSplitsForTransaction(transactionUID);
+        if (cursor != null){
+            if (cursor.getCount() > 0){
+                result &= deleteTransaction(getTransactionID(transactionUID));
+            }
+            cursor.close();
+        }
+        return result;
+    }
+
+    /**
+     * Returns the database record ID for the specified transaction UID
+     * @param transactionUID Unique idendtifier of the transaction
+     * @return Database record ID for the transaction
+     */
+    public long getTransactionID(String transactionUID){
+        long id = -1;
+        Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
+                new String[]{TransactionEntry._ID},
+                TransactionEntry.COLUMN_UID + "=?",
+                new String[]{transactionUID}, null, null, null);
+        if (c != null) {
+            if (c.moveToFirst()) {
+                id = c.getLong(0);
+            }
+            c.close();
+        }
+        return id;
+    }
+
+    /**
+     * Deletes all splits for a particular transaction and the transaction itself
+     * @param transactionId Database record ID of the transaction
+     * @return <code>true</code> if at least one split was deleted, <code>false</code> otherwise.
+     */
+    public boolean deleteSplitsForTransaction(long transactionId){
+        String trxUID = getTransactionUID(transactionId);
+        boolean result = mDb.delete(SplitEntry.TABLE_NAME,
+                SplitEntry.COLUMN_TRANSACTION_UID + "=?",
+                new String[]{trxUID}) > 0;
+        result &= deleteTransaction(transactionId);
+        return result;
+    }
+
+    /**
+     * Deletes splits for a specific transaction and account and the transaction itself
+     * @param transactionId Database record ID of the transaction
+     * @param accountId Database ID of the account
+     * @return Number of records deleted
+     */
+    public int deleteSplitsForTransactionAndAccount(long transactionId, long accountId){
+        String transactionUID  = getTransactionUID(transactionId);
+        String accountUID      = getAccountUID(accountId);
+        int deletedCount = mDb.delete(SplitEntry.TABLE_NAME,
+                SplitEntry.COLUMN_TRANSACTION_UID + "= ? AND " + SplitEntry.COLUMN_ACCOUNT_UID + "= ?",
+                new String[]{transactionUID, accountUID});
+        deleteTransaction(transactionId);
+        return deletedCount;
+    }
+
+    /**
+     * Deletes the transaction from the the database
+     * @param transactionId Database record ID of the transaction
+     */
+    private boolean deleteTransaction(long transactionId) {
+        return deleteRecord(TransactionEntry.TABLE_NAME, transactionId);
+    }
+
+    @Override
+    public int deleteAllRecords() {
+        return deleteAllRecords(SplitEntry.TABLE_NAME);
+    }
+}
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 45d6dc3a..9d65c768 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -16,20 +16,19 @@
 
 package org.gnucash.android.db;
 
+import android.app.AlarmManager;
+import android.app.PendingIntent;
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.model.Transaction;
-import org.gnucash.android.model.Transaction.TransactionType;
+import org.gnucash.android.model.*;
+import static org.gnucash.android.db.DatabaseSchema.*;
 
-import java.math.BigDecimal;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.List;
 
 /**
@@ -40,6 +39,7 @@
  */
 public class TransactionsDbAdapter extends DatabaseAdapter {
 
+    SplitsDbAdapter mSplitsDbAdapter;
 	/**
 	 * Constructor. 
 	 * Calls to the base class to open the database
@@ -47,9 +47,25 @@
 	 */
 	public TransactionsDbAdapter(Context context) {
 		super(context);
+        mSplitsDbAdapter = new SplitsDbAdapter(context);
 	}
-	
-	/**
+
+    /**
+     * Overloaded constructor. Creates adapter for already open db
+     * @param db SQlite db instance
+     */
+    public TransactionsDbAdapter(SQLiteDatabase db) {
+        super(db);
+        mSplitsDbAdapter = new SplitsDbAdapter(db);
+    }
+
+    @Override
+    public void close() {
+        super.close();
+        mSplitsDbAdapter.close();
+    }
+
+    /**
 	 * Adds an transaction to the database. 
 	 * If a transaction already exists in the database with the same unique ID, 
 	 * then the record will just be updated instead
@@ -58,27 +74,31 @@ public TransactionsDbAdapter(Context context) {
 	 */
 	public long addTransaction(Transaction transaction){
 		ContentValues contentValues = new ContentValues();
-		contentValues.put(DatabaseHelper.KEY_NAME, transaction.getName());
-		contentValues.put(DatabaseHelper.KEY_AMOUNT, transaction.getAmount().toPlainString());
-		contentValues.put(DatabaseHelper.KEY_TYPE, transaction.getTransactionType().name());
-		contentValues.put(DatabaseHelper.KEY_UID, transaction.getUID());
-		contentValues.put(DatabaseHelper.KEY_ACCOUNT_UID, transaction.getAccountUID());
-		contentValues.put(DatabaseHelper.KEY_TIMESTAMP, transaction.getTimeMillis());
-		contentValues.put(DatabaseHelper.KEY_DESCRIPTION, transaction.getDescription());
-		contentValues.put(DatabaseHelper.KEY_EXPORTED, transaction.isExported() ? 1 : 0);
-		contentValues.put(DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID, transaction.getDoubleEntryAccountUID());
-		contentValues.put(DatabaseHelper.KEY_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
+		contentValues.put(TransactionEntry.COLUMN_NAME, transaction.getName());
+		contentValues.put(TransactionEntry.COLUMN_UID,          transaction.getUID());
+		contentValues.put(TransactionEntry.COLUMN_TIMESTAMP,    transaction.getTimeMillis());
+		contentValues.put(TransactionEntry.COLUMN_DESCRIPTION,  transaction.getDescription());
+		contentValues.put(TransactionEntry.COLUMN_EXPORTED,     transaction.isExported() ? 1 : 0);
+        contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
+        contentValues.put(TransactionEntry.COLUMN_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
 
 		long rowId = -1;
 		if ((rowId = fetchTransactionWithUID(transaction.getUID())) > 0){
 			//if transaction already exists, then just update
 			Log.d(TAG, "Updating existing transaction");
-			mDb.update(DatabaseHelper.TRANSACTIONS_TABLE_NAME, contentValues, DatabaseHelper.KEY_ROW_ID + " = " + rowId, null);
+			mDb.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry._ID + " = " + rowId, null);
 		} else {
 			Log.d(TAG, "Adding new transaction to db");
-			rowId = mDb.insert(DatabaseHelper.TRANSACTIONS_TABLE_NAME, null, contentValues);
+			rowId = mDb.insert(TransactionEntry.TABLE_NAME, null, contentValues);
 		}	
-		
+
+        if (rowId > 0){
+            Log.d(TAG, "Adding splits for transaction");
+            for (Split split : transaction.getSplits()) {
+                mSplitsDbAdapter.addSplit(split);
+            }
+            Log.d(TAG, transaction.getSplits().size() + " splits added");
+        }
 		return rowId;
 	}
 
@@ -88,15 +108,15 @@ public long addTransaction(Transaction transaction){
 	 * @return Database row ID of transaction with UID <code>uid</code>
 	 */
 	public long fetchTransactionWithUID(String uid){
-		Cursor cursor = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				new String[] {DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_UID}, 
-				DatabaseHelper.KEY_UID + " = '" + uid + "'", 
-				null, null, null, null);
+		Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
+				new String[] {TransactionEntry._ID},
+                TransactionEntry.COLUMN_UID + " = ?",
+				new String[]{uid}, null, null, null);
 		long result = -1;
 		if (cursor != null) {
             if (cursor.moveToFirst()) {
                 Log.d(TAG, "Transaction already exists. Returning existing id");
-                result = cursor.getLong(0); //0 because only one row was requested
+                result = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID)); //0 because only one row was requested
             }
             cursor.close();
         }
@@ -114,7 +134,7 @@ public Transaction getTransaction(long rowId){
 		
 		Log.v(TAG, "Fetching transaction with id " + rowId);
         Transaction transaction = null;
-		Cursor c =	fetchRecord(DatabaseHelper.TRANSACTIONS_TABLE_NAME, rowId);
+		Cursor c =	fetchRecord(TransactionEntry.TABLE_NAME, rowId);
 		if (c != null) {
             if (c.moveToFirst()) {
                 transaction = buildTransactionInstance(c);
@@ -132,15 +152,19 @@ public Transaction getTransaction(long rowId){
 	 * @return Cursor holding set of transactions for particular account
 	 */
 	public Cursor fetchAllTransactionsForAccount(String accountUID){
-        //fetch transactions from this account except recurring transactions. Those have their own view
-		Cursor cursor = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				null, 
-				"((" + DatabaseHelper.KEY_ACCOUNT_UID + " = '" + accountUID + "') "
-				+ "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' ))"
-                + " AND " + DatabaseHelper.KEY_RECURRENCE_PERIOD + " = 0",
-				null, null, null, DatabaseHelper.KEY_TIMESTAMP + " DESC");
-
-		return cursor;
+        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+        queryBuilder.setTables(TransactionEntry.TABLE_NAME
+                + " INNER JOIN " +  SplitEntry.TABLE_NAME + " ON "
+                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
+        queryBuilder.setDistinct(true);
+        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+        String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
+                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+        String[] selectionArgs = new String[]{accountUID};
+        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
+
+        return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
 	}
 
     /**
@@ -150,12 +174,12 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
      * @return Cursor holding set of all recurring transactions
      */
     public Cursor fetchAllRecurringTransactions(){
-        Cursor cursor = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
+        Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
                 null,
-                DatabaseHelper.KEY_RECURRENCE_PERIOD + "!= 0",
+                TransactionEntry.COLUMN_RECURRENCE_PERIOD + "!= 0",
                 null, null, null,
-                DatabaseHelper.KEY_ACCOUNT_UID + " ASC, " + DatabaseHelper.KEY_RECURRENCE_PERIOD + " ASC");
-//                DatabaseHelper.KEY_RECURRENCE_PERIOD + " ASC, " + DatabaseHelper.KEY_TIMESTAMP + " DESC");
+                AccountEntry.COLUMN_NAME + " ASC, " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC");
+//                DatabaseHelper.COLUMN_RECURRENCE_PERIOD + " ASC, " + DatabaseHelper.COLUMN_TIMESTAMP + " DESC");
         return cursor;
     }
 
@@ -166,7 +190,7 @@ public Cursor fetchAllRecurringTransactions(){
 	 * @return Cursor holding set of transactions for particular account
 	 */
 	public Cursor fetchAllTransactionsForAccount(long accountID){
-		return fetchAllTransactionsForAccount(getAccountUID(accountID));	
+		return fetchAllTransactionsForAccount(getAccountUID(accountID));
 	}
 	
 	/**
@@ -179,94 +203,68 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
 		ArrayList<Transaction> transactionsList = new ArrayList<Transaction>();
 		if (c == null)
 			return transactionsList;
-        if (c.getCount() <= 0) {
-            c.close();
-            return transactionsList;
-        }
-		
-		while (c.moveToNext()) {
-			Transaction transaction = buildTransactionInstance(c);
-			String doubleEntryAccountUID = transaction.getDoubleEntryAccountUID();
 
-            //one transaction in this case represents both sides of the split
-			if (doubleEntryAccountUID != null && doubleEntryAccountUID.equals(accountUID)){
-                transaction.setAmount(transaction.getAmount().negate());
-/*
-//use this to properly compute the account balance
-				if (GnuCashApplication.isDoubleEntryEnabled(false)) {
-                    if (transaction.getType() == TransactionType.DEBIT) {
-                        transaction.setType(TransactionType.CREDIT);
-                    } else {
-                        transaction.setType(TransactionType.DEBIT);
-                    }
-                } else {
-                    // Negate double entry transactions for the transfer account
-                    transaction.setAmount(transaction.getAmount().negate());
-                }
-*/
-			}
-
-			transactionsList.add(transaction);
+		while (c.moveToNext()) {
+            transactionsList.add(buildTransactionInstance(c));
 		}
 		c.close();
 		return transactionsList;
 	}
-	
+
+    /**
+     * Returns all transaction instances in the database.
+     * @return List of all transactions
+     */
+    public List<Transaction> getAllTransactions(){
+        Cursor cursor = fetchAllRecords();
+        List<Transaction> transactions = new ArrayList<Transaction>();
+        if (cursor != null){
+            while(cursor.moveToNext()){
+                transactions.add(buildTransactionInstance(cursor));
+            }
+            cursor.close();
+        }
+        return transactions;
+    }
+
 	/**
 	 * Builds a transaction instance with the provided cursor.
 	 * The cursor should already be pointing to the transaction record in the database
 	 * @param c Cursor pointing to transaction record in database
 	 * @return {@link Transaction} object constructed from database record
 	 */
-	public Transaction buildTransactionInstance(Cursor c){		
-		String accountUID = c.getString(DatabaseAdapter.COLUMN_ACCOUNT_UID);
-		String doubleAccountUID = c.getString(DatabaseAdapter.COLUMN_DOUBLE_ENTRY_ACCOUNT_UID);
-		Currency currency = Currency.getInstance(getCurrencyCode(accountUID));
-		String amount = c.getString(DatabaseAdapter.COLUMN_AMOUNT);
-		Money moneyAmount = new Money(new BigDecimal(amount), currency);
-		String name   = c.getString(DatabaseAdapter.COLUMN_NAME);
-        long recurrencePeriod = c.getLong(DatabaseAdapter.COLUMN_RECURRENCE_PERIOD);
-		
-		Transaction transaction = new Transaction(moneyAmount, name);
-		transaction.setUID(c.getString(DatabaseAdapter.COLUMN_UID));
-		transaction.setAccountUID(accountUID);
-		transaction.setTime(c.getLong(DatabaseAdapter.COLUMN_TIMESTAMP));
-		transaction.setDescription(c.getString(DatabaseAdapter.COLUMN_DESCRIPTION));
-		transaction.setExported(c.getInt(DatabaseAdapter.COLUMN_EXPORTED) == 1);
-		transaction.setDoubleEntryAccountUID(doubleAccountUID);
+	public Transaction buildTransactionInstance(Cursor c){
+		String name   = c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NAME));
+		Transaction transaction = new Transaction(name);
+		transaction.setUID(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
+		transaction.setTime(c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
+		transaction.setDescription(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_DESCRIPTION)));
+		transaction.setExported(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_EXPORTED)) == 1);
+
+        long recurrencePeriod = c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_RECURRENCE_PERIOD));
         transaction.setRecurrencePeriod(recurrencePeriod);
-		transaction.setTransactionType(Transaction.TransactionType.valueOf(c.getString(DatabaseAdapter.COLUMN_TYPE)));
 
+        if (mDb.getVersion() < SPLITS_DB_VERSION){ //legacy, will be used once, when migrating the database
+            String accountUID = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
+            String transferAccountUID = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID));
+            String amountString = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_AMOUNT));
+            String currencyCode = getCurrencyCode(accountUID);
+            Money amount = new Money(amountString, currencyCode);
+
+            Split split = new Split(amount.absolute(), accountUID);
+            TransactionType type = Transaction.getTypeForBalance(getAccountType(accountUID), amount.isNegative());
+            split.setType(type);
+            transaction.addSplit(split);
+            transaction.addSplit(split.createPair(transferAccountUID));
+        } else {
+            transaction.setCurrencyCode(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_CURRENCY)));
+            long transactionID = c.getLong(c.getColumnIndexOrThrow(TransactionEntry._ID));
+            transaction.setSplits(mSplitsDbAdapter.getSplitsForTransaction(transactionID));
+        }
 		return transaction;
 	}
 
 	/**
-	 * Returns the currency code (according to the ISO 4217 standard) of the account 
-	 * with unique Identifier <code>accountUID</code>
-	 * @param accountUID Unique Identifier of the account
-	 * @return Currency code of the account
-	 * @see #getCurrencyCode(long)
-	 */
-	public String getCurrencyCode(String accountUID) {
-		Cursor cursor = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[] {DatabaseHelper.KEY_CURRENCY_CODE}, 
-				DatabaseHelper.KEY_UID + "= '" + accountUID + "'", 
-				null, null, null, null);
-		
-		if (cursor == null)
-			return null;
-        if (cursor.getCount() <= 0) {
-            cursor.close();
-            return null;
-        }
-					
-		cursor.moveToFirst();
-		String currencyCode = cursor.getString(0);
-		cursor.close();
-		return currencyCode;
-	}
-	
-	/**
 	 * Returns the currency code (ISO 4217) used by the account with id <code>accountId</code>
 	 * If you do not have the database record Id, you can call {@link #getAccountID(String)} instead.
 	 * @param accountId Database record id of the account 
@@ -277,26 +275,62 @@ public String getCurrencyCode(long accountId){
 		String accountUID = getAccountUID(accountId);
 		return getCurrencyCode(accountUID);
 	}
-	
+
+    /**
+     * Returns the transaction balance for the transaction for the specified account.
+     * <p>We consider only those splits which belong to this account</p>
+     * @param transactionId Database record ID of the transaction
+     * @param accountId Database record id of the account
+     * @return {@link org.gnucash.android.model.Money} balance of the transaction for that account
+     */
+    public Money getBalance(long transactionId, long accountId){
+        String accountUID = getAccountUID(accountId);
+        String transactionUID = getUID(transactionId);
+        List<Split> splitList = mSplitsDbAdapter.getSplitsForTransactionInAccount(
+                transactionUID, accountUID);
+
+        return Transaction.computeBalance(accountUID, splitList);
+    }
+
+    /**
+     * Returns the string unique identifier of the transaction
+     * @param transactionId Database record ID of transaction
+     * @return String unique identifier of the transaction
+     */
+    public String getUID(long transactionId){
+        String uid = null;
+        Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
+                new String[]{TransactionEntry.COLUMN_UID},
+                TransactionEntry._ID + "=" + transactionId,
+                null, null, null, null);
+        if (c != null) {
+            if (c.moveToFirst()) {
+                uid = c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID));
+            }
+            c.close();
+        }
+        return uid;
+    }
+
 	/**
-	 * Deletes transaction record with id <code>rowId</code>
+	 * Deletes transaction record with id <code>rowId</code> and all it's splits
 	 * @param rowId Long database record id
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
 	 */
     @Override
 	public boolean deleteRecord(long rowId){
 		Log.d(TAG, "Delete transaction with record Id: " + rowId);
-		return deleteRecord(DatabaseHelper.TRANSACTIONS_TABLE_NAME, rowId);
+		return mSplitsDbAdapter.deleteSplitsForTransaction(rowId) &&
+                deleteRecord(TransactionEntry.TABLE_NAME, rowId);
 	}
 	
 	/**
-	 * Deletes transaction record with unique ID <code>uid</code>
+	 * Deletes transaction record with unique ID <code>uid</code> and all its splits
 	 * @param uid String unique ID of transaction
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise
 	 */
 	public boolean deleteTransaction(String uid){
-		return mDb.delete(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				DatabaseHelper.KEY_UID + "='" + uid + "'", null) > 0;
+        return deleteRecord(getID(uid));
 	}
 	
 	/**
@@ -305,25 +339,27 @@ public boolean deleteTransaction(String uid){
 	 */
     @Override
 	public int deleteAllRecords(){
-		return deleteAllRecords(DatabaseHelper.TRANSACTIONS_TABLE_NAME);
+		return deleteAllRecords(TransactionEntry.TABLE_NAME);
 	}
 	
 	/**
 	 * Assigns transaction with id <code>rowId</code> to account with id <code>accountId</code>
 	 * @param rowId Record ID of the transaction to be assigned
-	 * @param accountId Record Id of the account to which the transaction will be assigned
-	 * @return Number of transactions affected
+     * @param srcAccountId Record Id of the account from which the transaction is to be moved
+	 * @param dstAccountId Record Id of the account to which the transaction will be assigned
+	 * @return Number of transactions splits affected
 	 */
-	public int moveTranscation(long rowId, long accountId){
-		Log.i(TAG, "Moving transaction " + rowId + " to account " + accountId);
-		String accountUID = getAccountUID(accountId);
-		ContentValues contentValue = new ContentValues();
-		contentValue.put(DatabaseHelper.KEY_ACCOUNT_UID, accountUID);
-		
-		return mDb.update(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				contentValue, 
-				DatabaseHelper.KEY_ROW_ID + "=" + rowId, 
-				null);
+	public int moveTranscation(long rowId, long srcAccountId, long dstAccountId){
+		Log.i(TAG, "Moving transaction ID " + rowId + " splits from " + srcAccountId + " to account " + dstAccountId);
+		String srcAccountUID = getAccountUID(srcAccountId);
+        String dstAccountUID = getAccountUID(dstAccountId);
+
+		List<Split> splits = mSplitsDbAdapter.getSplitsForTransactionInAccount(getUID(rowId), srcAccountUID);
+        for (Split split : splits) {
+            split.setAccountUID(dstAccountUID);
+            mSplitsDbAdapter.addSplit(split);
+        }
+        return splits.size();
 	}
 	
 	/**
@@ -349,181 +385,11 @@ public int getTransactionsCount(long accountId){
 	 * @return Number of transaction in the database
 	 */
 	public long getAllTransactionsCount(){
-		String sql = "SELECT COUNT(*) FROM " + DatabaseHelper.TRANSACTIONS_TABLE_NAME;		
+		String sql = "SELECT COUNT(*) FROM " + TransactionEntry.TABLE_NAME;
 		SQLiteStatement statement = mDb.compileStatement(sql);
         return statement.simpleQueryForLong();
 	}
 	
-	/**
-	 * Returns the sum of transactions belonging to the account with id <code>accountId</code>
-     * Double entry accounting is taken into account and the balance reflects the transfer transactions.
-	 * @param accountId Record ID of the account
-	 * @return Sum of transactions belonging to the account
-	 */
-	public Money getTransactionsSum(long accountId) {
-        //FIXME: Properly compute the balance while considering normal account balance
-        String accountUID = getAccountUID(accountId);
-
-        String querySum = "SELECT TOTAL(" + DatabaseHelper.KEY_AMOUNT
-                + ") FROM " + DatabaseHelper.TRANSACTIONS_TABLE_NAME
-                + " WHERE " + DatabaseHelper.KEY_ACCOUNT_UID + " = ? AND "
-                + DatabaseHelper.KEY_RECURRENCE_PERIOD + "=0";
-
-        Cursor sumCursor = mDb.rawQuery(querySum, new String[]{accountUID});
-        double sum = 0d;
-
-        if (sumCursor != null) {
-            if (sumCursor.moveToFirst()) {
-                sum += sumCursor.getFloat(0);
-            }
-            sumCursor.close();
-        }
-
-        querySum = "SELECT TOTAL(" + DatabaseHelper.KEY_AMOUNT
-                + ") FROM " + DatabaseHelper.TRANSACTIONS_TABLE_NAME
-                + " WHERE " + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = ? AND "
-                + DatabaseHelper.KEY_RECURRENCE_PERIOD + "=0";
-
-        sumCursor = mDb.rawQuery(querySum, new String[]{accountUID});
-
-        if (sumCursor != null) {
-            if (sumCursor.moveToFirst()) {
-                sum -= sumCursor.getFloat(0);
-            }
-            sumCursor.close();
-        }
-
-        BigDecimal sumDecimal = new BigDecimal(sum);
-        Currency currency = Currency.getInstance(getCurrencyCode(accountUID));
-        return new Money(sumDecimal, currency);
-	}
-	
-	/**
-	 * Returns true if <code>rowId</code> and <code>accountUID</code> belong to the same account
-	 * @param rowId Database record ID
-	 * @param accountUID Unique Identifier string of the account
-	 * @return <code>true</code> if both are properties of the same account, <code>false</code> otherwise
-	 */
-	public boolean isSameAccount(long rowId, String accountUID){
-		return getAccountID(accountUID) == rowId;
-	}
-
-    /**
-     * Returns the {@link Account.AccountType} of the account with unique ID <code>uid</code>
-     * @param accountUID Unique ID of the account
-     * @return {@link Account.AccountType} of the account
-     */
-    public Account.AccountType getAccountType(String accountUID){
-        String type = null;
-        Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_TYPE},
-                DatabaseHelper.KEY_UID + "='" + accountUID + "'",
-                null, null, null, null);
-        if (c != null) {
-            if (c.moveToFirst()) {
-                type = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_TYPE));
-            }
-            c.close();
-        }
-        return Account.AccountType.valueOf(type);
-    }
-
-	/**
-	 * Marks an account record as exported
-	 * @param accountUID Unique ID of the record to be marked as exported
-	 * @return Number of records marked as exported
-	 */
-	public int markAsExported(String accountUID){
-		ContentValues contentValues = new ContentValues();
-		contentValues.put(DatabaseHelper.KEY_EXPORTED, 1);
-		
-		return mDb.update(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				contentValues, 
-				DatabaseHelper.KEY_ACCOUNT_UID + "='" + accountUID + "'", 
-				null);
-	}
-	
-	/**
-	 * Returns list of all accounts which have not been exported yet
-	 * @return List of {@link Account}s which have not been exported
-	 */
-	public List<Transaction> getNonExportedTransactionsForAccount(String accountUID){
-		Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME, 
-				null, 
-				DatabaseHelper.KEY_EXPORTED + "= 0 AND " + 
-				DatabaseHelper.KEY_ACCOUNT_UID + "= '" + accountUID + "'", 
-				null, null, null, null);
-		ArrayList<Transaction> transactionsList = new ArrayList<Transaction>();
-		if (c == null)
-			return transactionsList;
-		
-		while (c.moveToNext()){
-			transactionsList.add(buildTransactionInstance(c));
-		}
-        c.close();
-		return transactionsList;
-	}
-
-	/**
-	 * Returns an account UID of the account with record id <code>accountRowID</code>
-	 * @param accountRowID Record ID of account as long paramenter
-	 * @return String containing UID of account
-	 */
-	public String getAccountUID(long accountRowID){
-		String uid = null;
-		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[]{DatabaseHelper.KEY_UID}, 
-				DatabaseHelper.KEY_ROW_ID + "=" + accountRowID, 
-				null, null, null, null);
-		if (c != null) {
-            if (c.moveToFirst()) {
-                uid = c.getString(0);
-            }
-            c.close();
-        }
-		return uid;
-	}
-
-    /**
-     * Returns Unique Identifier of account to which <code>transaction</code> belongs
-     * @param transactionID Record ID of the transaction
-     * @return Unique Identifier string of account to which transaction belongs
-     */
-    public String getAccountUidFromTransaction(long transactionID){
-        Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ACCOUNT_UID},
-                DatabaseHelper.KEY_ROW_ID + "=" + transactionID,
-                null, null, null, null);
-        String accountUID = null;
-        if (c != null) {
-            if (c.moveToFirst()) {
-                accountUID = c.getString(0);
-            }
-            c.close();
-        }
-        return accountUID;
-    }
-
-	/**
-	 * Returns the database row Id of the account with unique Identifier <code>accountUID</code>
-	 * @param accountUID Unique identifier of the account
-	 * @return Database row ID of the account
-	 */
-	public long getAccountID(String accountUID){
-		long id = -1;
-		Cursor c = mDb.query(DatabaseHelper.ACCOUNTS_TABLE_NAME, 
-				new String[]{DatabaseHelper.KEY_ROW_ID}, 
-				DatabaseHelper.KEY_UID + "='" + accountUID + "'", 
-				null, null, null, null);
-		if (c != null) {
-            if (c.moveToFirst()) {
-                id = c.getLong(0);
-            }
-            c.close();
-        }
-		return id;
-	}
-
     /**
      * Returns the database record ID for the specified transaction UID
      * @param transactionUID Unique idendtifier of the transaction
@@ -531,9 +397,9 @@ public long getAccountID(String accountUID){
      */
     public long getID(String transactionUID){
         long id = -1;
-        Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID},
-                DatabaseHelper.KEY_UID + "='" + transactionUID + "'",
+        Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
+                new String[]{TransactionEntry._ID},
+                TransactionEntry.COLUMN_UID + "='" + transactionUID + "'",
                 null, null, null, null);
         if (c != null) {
             if (c.moveToFirst()) {
@@ -546,12 +412,12 @@ public long getID(String transactionUID){
 
     @Override
     public Cursor fetchAllRecords() {
-        return fetchAllRecords(DatabaseHelper.TRANSACTIONS_TABLE_NAME);
+        return fetchAllRecords(TransactionEntry.TABLE_NAME);
     }
 
     @Override
     public Cursor fetchRecord(long rowId) {
-        return fetchRecord(DatabaseHelper.TRANSACTIONS_TABLE_NAME, rowId);
+        return fetchRecord(TransactionEntry.TABLE_NAME, rowId);
     }
 
     /**
@@ -561,15 +427,43 @@ public Cursor fetchRecord(long rowId) {
      * @return Cursor to the data set containing all matching transactions
      */
     public Cursor fetchTransactionsStartingWith(String prefix){
-        StringBuffer stringBuffer = new StringBuffer(DatabaseHelper.KEY_NAME)
+        StringBuffer stringBuffer = new StringBuffer(TransactionEntry.COLUMN_NAME)
                 .append(" LIKE '").append(prefix).append("%'");
         String selection = stringBuffer.toString();
 
-        Cursor c = mDb.query(DatabaseHelper.TRANSACTIONS_TABLE_NAME,
-                new String[]{DatabaseHelper.KEY_ROW_ID, DatabaseHelper.KEY_NAME},
+        Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
+                new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_NAME},
                 selection,
                 null, null, null,
-                DatabaseHelper.KEY_NAME);
+                TransactionEntry.COLUMN_NAME + " ASC");
         return c;
     }
+
+    /**
+     * Updates a specific entry of an transaction
+     * @param transactionUID Unique ID of the transaction
+     * @param columnKey Name of column to be updated
+     * @param newValue  New value to be assigned to the columnKey
+     * @return Number of records affected
+     */
+    public int updateTransaction(String transactionUID, String columnKey, String newValue){
+        return updateRecord(TransactionEntry.TABLE_NAME, getID(transactionUID), columnKey, newValue);
+    }
+
+    /**
+     * Schedules <code>recurringTransaction</code> to be executed at specific intervals.
+     * The interval period is packaged within the transaction
+     * @param recurringTransaction Transaction which is to be recurring
+     */
+    public void scheduleTransaction(Transaction recurringTransaction) {
+        long recurrencePeriodMillis = recurringTransaction.getRecurrencePeriod();
+        long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
+        long recurringTransactionId = addTransaction(recurringTransaction);
+
+        PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(mContext,
+                (int)recurringTransactionId, Transaction.createIntent(recurringTransaction), PendingIntent.FLAG_UPDATE_CURRENT);
+        AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
+        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, firstRunMillis,
+                recurrencePeriodMillis, recurringPendingIntent);
+    }
 }
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index 2edb5220..3fe8c6b7 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -30,9 +30,6 @@
 import org.gnucash.android.R;
 
 import java.io.File;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
 
 /**
  * Dialog fragment for exporting account information as OFX files.
@@ -78,8 +75,6 @@
 	 */
 	private static final String TAG = "ExportDialogFragment";
 
-    ;
-
     private ExportFormat mExportFormat = ExportFormat.QIF;
 
 	/**
@@ -113,7 +108,7 @@ public void onRadioButtonClicked(View view){
             case R.id.radio_qif_format:
                 mExportFormat = ExportFormat.QIF;
         }
-        mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
+        mFilePath = getActivity().getExternalFilesDir(null) + "/" + Exporter.buildExportFilename(mExportFormat);
         return;
     }
 
@@ -127,7 +122,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 	public void onActivityCreated(Bundle savedInstanceState) {		
 		super.onActivityCreated(savedInstanceState);
         bindViews();
-		mFilePath = getActivity().getExternalFilesDir(null) + "/" + buildExportFilename(mExportFormat);
+		mFilePath = getActivity().getExternalFilesDir(null) + "/" + Exporter.buildExportFilename(mExportFormat);
 		getDialog().setTitle(R.string.title_export_dialog);
 	}
 
@@ -194,27 +189,6 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
 			file.delete();
 		}
 	}
-	
-
 
-	/**
-	 * Builds a file name based on the current time stamp for the exported file
-	 * @return String containing the file name
-	 */
-	public static String buildExportFilename(ExportFormat format){
-		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
-		String filename = formatter.format(
-				new Date(System.currentTimeMillis())) 
-				+ "_gnucash_all";
-        switch (format) {
-            case QIF:
-                filename += ".qif";
-                break;
-            case OFX:
-                filename += ".ofx";
-                break;
-        }
-		return filename;
-	}
 }
 
diff --git a/app/src/org/gnucash/android/export/ExportFormat.java b/app/src/org/gnucash/android/export/ExportFormat.java
index 6000ebd1..cd70a260 100644
--- a/app/src/org/gnucash/android/export/ExportFormat.java
+++ b/app/src/org/gnucash/android/export/ExportFormat.java
@@ -21,7 +21,8 @@
 */
 public enum ExportFormat {
     QIF("Quicken Interchange Format"),
-    OFX("Open Financial eXchange");
+    OFX("Open Financial eXchange"),
+    GNC_XML ("GnuCash XML");
 
     /**
      * Full name of the export format acronym
@@ -32,6 +33,23 @@
         this.mDescription = description;
     }
 
+    /**
+     * Returns the file extension for this export format including the period e.g. ".qif"
+     * @return String file extension for the export format
+     */
+    public String getExtension(){
+        switch (this) {
+            case QIF:
+                return ".qif";
+            case OFX:
+                return ".ofx";
+            case GNC_XML:
+                return ".gnca";
+            default:
+                return ".txt";
+        }
+    }
+
     @Override
     public String toString() {
         return mDescription;
diff --git a/app/src/org/gnucash/android/export/Exporter.java b/app/src/org/gnucash/android/export/Exporter.java
new file mode 100644
index 00000000..5fbb4479
--- /dev/null
+++ b/app/src/org/gnucash/android/export/Exporter.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+/**
+ * Base class for the different exporters
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public abstract class Exporter {
+    protected ExportParams mParameters;
+
+    /**
+     * Adapter for retrieving accounts to export
+     * Subclasses should close this object when they are done with exporting
+     */
+    protected AccountsDbAdapter mAccountsDbAdapter;
+    protected Context mContext;
+
+    public Exporter(ExportParams params){
+        this.mParameters = params;
+        mContext = GnuCashApplication.getAppContext();
+        mAccountsDbAdapter = new AccountsDbAdapter(mContext);
+    }
+
+    /**
+     * Overloaded constructor, provided the database object to use
+     * @param params Export parameters
+     * @param db Database from which to export (should be initialized and open)
+     */
+    public Exporter(ExportParams params, SQLiteDatabase db){
+        this.mParameters = params;
+        mAccountsDbAdapter = new AccountsDbAdapter(db);
+        mContext = GnuCashApplication.getAppContext();
+    }
+
+    /**
+     * Builds a file name based on the current time stamp for the exported file
+     * @return String containing the file name
+     */
+    public static String buildExportFilename(ExportFormat format) {
+        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
+        String filename = formatter.format(
+                new Date(System.currentTimeMillis()))
+                + "_gnucash_export" + format.getExtension();
+        return filename;
+    }
+
+    /**
+     * Generates the export output
+     * @return Export output as String
+     * @throws ExporterException if an error occurs during export
+     */
+    public abstract String generateExport() throws ExporterException;
+
+    public static class ExporterException extends RuntimeException{
+
+        public ExporterException(ExportParams params){
+            super("Failed to generate " + params.getExportFormat().toString());
+        }
+
+        public ExporterException(ExportParams params, Throwable throwable){
+            super("Failed to generate " + params.getExportFormat().toString(), throwable);
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterTask.java
index 3008e603..66b69af1 100644
--- a/app/src/org/gnucash/android/export/ExporterTask.java
+++ b/app/src/org/gnucash/android/export/ExporterTask.java
@@ -29,21 +29,11 @@
 import android.widget.Toast;
 import org.gnucash.android.R;
 import org.gnucash.android.export.ofx.OfxExporter;
-import org.gnucash.android.export.ofx.OfxHelper;
 import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.transaction.dialog.TransactionsDeleteConfirmationDialogFragment;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.ProcessingInstruction;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.*;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
+
 import java.io.*;
 import java.nio.channels.FileChannel;
 import java.text.SimpleDateFormat;
@@ -62,6 +52,8 @@
 
     private ProgressDialog mProgressDialog;
 
+    private Exporter mExporter;
+
     /**
      * Log tag
      */
@@ -94,30 +86,32 @@ protected void onPreExecute() {
     @Override
     protected Boolean doInBackground(ExportParams... params) {
         mExportParams = params[0];
-        boolean exportAllTransactions = mExportParams.shouldExportAllTransactions();
-        try {
+
             switch (mExportParams.getExportFormat()) {
-                case QIF: {
-                    QifExporter qifExporter = new QifExporter(mContext, exportAllTransactions);
-                    String qif = qifExporter.generateQIF();
+                case QIF:
+                    mExporter = new QifExporter(mExportParams);
+                    break;
 
-                    writeQifExternalStorage(qif);
-                }
-                return true;
+                case OFX:
+                    mExporter = new OfxExporter(mExportParams);
+                    break;
 
-                case OFX: {
-                    Document document = exportOfx(exportAllTransactions);
-                    writeOfxToExternalStorage(document);
-                }
-                return true;
+                case GNC_XML:
+                    mExporter = new GncXmlExporter(mExportParams);
+                    break;
             }
+
+        try {
+            writeOutput(mExporter.generateExport());
         } catch (Exception e) {
             e.printStackTrace();
             Log.e(TAG, e.getMessage());
-            Toast.makeText(mContext, R.string.error_exporting,
+            //TODO: Internationalize (and correct ofx specific) error message
+            Toast.makeText(mContext, R.string.toast_export_error,
                     Toast.LENGTH_LONG).show();
-        };
-        return false;
+            return false;
+        }
+        return true;
     }
 
     /**
@@ -126,7 +120,7 @@ protected Boolean doInBackground(ExportParams... params) {
      */
     @Override
     protected void onPostExecute(Boolean exportResult) {
-
+        //TODO: Internationalize error strings
         if (!exportResult){
             Toast.makeText(mContext,
                     mContext.getString(R.string.toast_error_exporting),
@@ -143,7 +137,7 @@ protected void onPostExecute(Boolean exportResult) {
                 File src = new File(mExportParams.getTargetFilepath());
                 new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
                 File dst = new File(Environment.getExternalStorageDirectory()
-                        + "/gnucash/" + ExportDialogFragment.buildExportFilename(mExportParams.getExportFormat()));
+                        + "/gnucash/" + Exporter.buildExportFilename(mExportParams.getExportFormat()));
 
                 try {
                     copyFile(src, dst);
@@ -180,71 +174,16 @@ protected void onPostExecute(Boolean exportResult) {
 
     }
 
-
-    /**
-     * Exports transactions in the database to the OFX format.
-     * The accounts are written to a DOM document and returned
-     * @param exportAll Flag to export all transactions or only the new ones since last export
-     * @return DOM {@link Document} containing the OFX file information
-     * @throws javax.xml.parsers.ParserConfigurationException
-     */
-    protected Document exportOfx(boolean exportAll) throws ParserConfigurationException {
-        DocumentBuilderFactory docFactory = DocumentBuilderFactory
-                .newInstance();
-        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
-
-        Document document = docBuilder.newDocument();
-        Element root = document.createElement("OFX");
-
-        ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxHelper.OFX_HEADER);
-        document.appendChild(pi);
-        document.appendChild(root);
-
-        OfxExporter exporter = new OfxExporter(mContext, exportAll);
-        exporter.toOfx(document, root);
-
-        return document;
-    }
-
-    /**
-     * Writes out the String containing the exported transaction in QIF format to disk
-     * @param qif String containing exported transactions
-     * @throws IOException
-     */
-    private void writeQifExternalStorage(String qif) throws IOException {
-        File file = new File(mExportParams.getTargetFilepath());
-
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        writer.write(qif);
-
-        writer.flush();
-        writer.close();
-    }
-
     /**
-     * Writes the OFX document <code>doc</code> to external storage
-     * @param doc Document containing OFX file data
-     * @throws IOException if file could not be saved
+     * Writes out the String containing the exported data to disk
+     * @param exportOutput String containing exported data
+     * @throws IOException if the write fails
      */
-    private void writeOfxToExternalStorage(Document doc) throws IOException{
+    private void writeOutput(String exportOutput) throws IOException {
         File file = new File(mExportParams.getTargetFilepath());
 
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(mContext)
-                .getBoolean(mContext.getString(R.string.key_xml_ofx_header), false);
-
-        //if we want SGML OFX headers, write first to string and then prepend header
-        if (useXmlHeader){
-            write(doc, writer, false);
-        } else {
-            Node ofxNode = doc.getElementsByTagName("OFX").item(0);
-            StringWriter stringWriter = new StringWriter();
-            write(ofxNode, stringWriter, true);
-
-            StringBuffer stringBuffer = new StringBuffer(OfxHelper.OFX_SGML_HEADER);
-            stringBuffer.append('\n');
-            writer.write(stringBuffer.toString() + stringWriter.toString());
-        }
+        writer.write(exportOutput);
 
         writer.flush();
         writer.close();
@@ -297,31 +236,4 @@ public static void copyFile(File src, File dst) throws IOException
         }
     }
 
-    /**
-     * Writes out the document held in <code>node</code> to <code>outputWriter</code>
-     * @param node {@link Node} containing the OFX document structure. Usually the parent node
-     * @param outputWriter {@link Writer} to use in writing the file to stream
-     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
-     */
-    public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
-        try {
-            TransformerFactory transformerFactory = TransformerFactory
-                    .newInstance();
-            Transformer transformer = transformerFactory.newTransformer();
-            DOMSource source = new DOMSource(node);
-            StreamResult result = new StreamResult(outputWriter);
-
-            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-            if (omitXmlDeclaration) {
-                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
-            }
-
-            transformer.transform(source, result);
-        } catch (TransformerConfigurationException txconfigException) {
-            txconfigException.printStackTrace();
-        } catch (TransformerException tfException) {
-            tfException.printStackTrace();
-        }
-    }
 }
diff --git a/app/src/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
index 029ae6dc..ae40c2fc 100644
--- a/app/src/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
@@ -16,58 +16,63 @@
 
 package org.gnucash.android.export.ofx;
 
+import java.io.StringWriter;
+import java.io.Writer;
 import java.util.List;
 
+import android.database.sqlite.SQLiteDatabase;
+import android.preference.PreferenceManager;
+import org.gnucash.android.R;
+import org.gnucash.android.export.ExportParams;
+import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
 
-import android.content.Context;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.*;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
 
 /**
  * Exports the data in the database in OFX format
  * @author Ngewi Fet <ngewi.fet@gmail.com>
  */
-public class OfxExporter {
+public class OfxExporter extends Exporter{
 
     /**
 	 * List of accounts in the expense report
 	 */
 	private List<Account> mAccountsList;
-	
-	/**
-	 * Flag indicating whether to ignore the 'exported' on transactions
-	 * If set to true, then all transactions will be exported, regardless of whether they were exported previously
-	 */
-	private boolean mExportAll = false;
-	
-	/**
-	 * Reference to the application context
-	 */
-	private Context mContext;
 
     /**
-	 * Builds an XML representation of the {@link Account}s and {@link Transaction}s in the database 
-	 * @param context Application context
-	 * @param exportAll Whether all transactions should be exported or only new ones since last export
+	 * Builds an XML representation of the {@link Account}s and {@link Transaction}s in the database
 	 */
-	public OfxExporter(Context context, boolean exportAll) {
-		AccountsDbAdapter dbAdapter = new AccountsDbAdapter(context);
-		mAccountsList = exportAll ? dbAdapter.getAllAccounts() : dbAdapter.getExportableAccounts();
-		mExportAll = exportAll;
-		mContext = context;
-        dbAdapter.close();
+	public OfxExporter(ExportParams params) {
+        super(params);
 	}
 
     /**
+     * Initializes the OFX exporter with a specific database to export from
+     * @param params Export parameters/options
+     * @param db SQLite database object (should be already open)
+     */
+    public OfxExporter(ExportParams params, SQLiteDatabase db){
+        super(params, db);
+    }
+
+    /**
 	 * Converts all expenses into OFX XML format and adds them to the XML document
 	 * @param doc DOM document of the OFX expenses.
 	 * @param parent Parent node for all expenses in report
 	 */
-	public void toOfx(Document doc, Element parent){
+	private void generateOfx(Document doc, Element parent){
 		Element transactionUid = doc.createElement(OfxHelper.TAG_TRANSACTION_UID);
 		//unsolicited because the data exported is not as a result of a request
 		transactionUid.appendChild(doc.createTextNode(OfxHelper.UNSOLICITED_TRANSACTION_ID));
@@ -80,18 +85,90 @@ public void toOfx(Document doc, Element parent){
 		
 		parent.appendChild(bankmsgs);		
 		
-		TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(mContext);
+		AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(mContext);
 		for (Account account : mAccountsList) {		
 			if (account.getTransactionCount() == 0)
 				continue; 
 			
 			//add account details (transactions) to the XML document			
-			account.toOfx(doc, statementTransactionResponse, mExportAll);
+			account.toOfx(doc, statementTransactionResponse, mParameters.shouldExportAllTransactions());
 			
 			//mark as exported
-			transactionsDbAdapter.markAsExported(account.getUID());
+			accountsDbAdapter.markAsExported(account.getUID());
 			
 		}
-		transactionsDbAdapter.close();
+		accountsDbAdapter.close();
 	}
+
+    @Override
+    public String generateExport() throws ExporterException {
+        mAccountsList = mParameters.shouldExportAllTransactions() ?
+                mAccountsDbAdapter.getAllAccounts() : mAccountsDbAdapter.getExportableAccounts();
+        mAccountsDbAdapter.close();
+
+        DocumentBuilderFactory docFactory = DocumentBuilderFactory
+                .newInstance();
+        DocumentBuilder docBuilder = null;
+        try {
+            docBuilder = docFactory.newDocumentBuilder();
+        } catch (ParserConfigurationException e) {
+            throw new ExporterException(mParameters, e);
+        }
+
+        Document document = docBuilder.newDocument();
+        Element root = document.createElement("OFX");
+
+        ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxHelper.OFX_HEADER);
+        document.appendChild(pi);
+        document.appendChild(root);
+
+        generateOfx(document, root);
+
+        boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(mContext)
+                .getBoolean(mContext.getString(R.string.key_xml_ofx_header), false);
+
+        StringWriter stringWriter = new StringWriter();
+        //if we want SGML OFX headers, write first to string and then prepend header
+        if (useXmlHeader){
+            write(document, stringWriter, false);
+            return stringWriter.toString();
+        } else {
+            Node ofxNode = document.getElementsByTagName("OFX").item(0);
+
+            write(ofxNode, stringWriter, true);
+
+            StringBuffer stringBuffer = new StringBuffer(OfxHelper.OFX_SGML_HEADER);
+            stringBuffer.append('\n');
+            stringBuffer.append(stringWriter.toString());
+            return stringBuffer.toString();
+        }
+    }
+
+    /**
+     * Writes out the document held in <code>node</code> to <code>outputWriter</code>
+     * @param node {@link Node} containing the OFX document structure. Usually the parent node
+     * @param outputWriter {@link java.io.Writer} to use in writing the file to stream
+     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
+     */
+    private void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
+        try {
+            TransformerFactory transformerFactory = TransformerFactory
+                    .newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            DOMSource source = new DOMSource(node);
+            StreamResult result = new StreamResult(outputWriter);
+
+            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+            if (omitXmlDeclaration) {
+                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+            }
+
+            transformer.transform(source, result);
+        } catch (TransformerConfigurationException txconfigException) {
+            txconfigException.printStackTrace();
+        } catch (TransformerException tfException) {
+            tfException.printStackTrace();
+        }
+    }
 }
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index c2209700..bb88c162 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -15,46 +15,51 @@
  */
 package org.gnucash.android.export.qif;
 
-import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import org.gnucash.android.export.ExportParams;
+import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
  * @author Ngewi
  */
-public class QifExporter {
-    boolean mExportAll;
-    Context mContext;
+public class QifExporter extends Exporter{
     private List<Account> mAccountsList;
 
-    public QifExporter(Context context, boolean exportAll){
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
-        mAccountsList = exportAll ? accountsDbAdapter.getAllAccounts() : accountsDbAdapter.getExportableAccounts();
-        accountsDbAdapter.close();
+    public QifExporter(ExportParams params){
+        super(params);
+    }
 
-        this.mExportAll = exportAll;
-        this.mContext = context;
+    public QifExporter(ExportParams params,  SQLiteDatabase db){
+        super(params, db);
     }
 
-    public String generateQIF(){
+    private String generateQIF(){
         StringBuffer qifBuffer = new StringBuffer();
 
-        TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(mContext);
+        List<String> exportedTransactions = new ArrayList<String>();
         for (Account account : mAccountsList) {
             if (account.getTransactionCount() == 0)
                 continue;
 
-            qifBuffer.append(account.toQIF(mExportAll) + "\n");
+            qifBuffer.append(account.toQIF(mParameters.shouldExportAllTransactions(), exportedTransactions) + "\n");
 
             //mark as exported
-            transactionsDbAdapter.markAsExported(account.getUID());
+            mAccountsDbAdapter.markAsExported(account.getUID());
         }
-        transactionsDbAdapter.close();
+        mAccountsDbAdapter.close();
 
         return qifBuffer.toString();
     }
 
+    @Override
+    public String generateExport() throws ExporterException {
+        mAccountsList = mParameters.shouldExportAllTransactions() ?
+                mAccountsDbAdapter.getAllAccounts() : mAccountsDbAdapter.getExportableAccounts();
+
+        return generateQIF();
+    }
 }
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index 37c83af0..dd5a3f09 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -18,7 +18,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account;
+import org.gnucash.android.model.AccountType;
 
 import java.text.SimpleDateFormat;
 import java.util.Currency;
@@ -63,7 +63,7 @@ public static final String formatDate(long timeMillis){
      * @param accountType AccountType of account
      * @return QIF header for the transactions
      */
-    public static String getQifHeader(Account.AccountType accountType){
+    public static String getQifHeader(AccountType accountType){
         switch (accountType) {
             case CASH:
                 return "!Type:Cash";
@@ -80,12 +80,4 @@ public static String getQifHeader(Account.AccountType accountType){
         }
     }
 
-    /**
-     * Returns the imbalance account where to store transactions which are not double entry
-     * @param currency Currency of the transaction
-     * @return Imbalance account name
-     */
-    public static String getImbalanceAccountName(Currency currency){
-        return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
-    }
 }
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
new file mode 100644
index 00000000..f2afb814
--- /dev/null
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export.xml;
+
+import android.database.sqlite.SQLiteDatabase;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ExportParams;
+import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Transaction;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.*;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.StringWriter;
+import java.util.List;
+import java.util.UUID;
+
+/**
+ * Creates a GnuCash XML representation of the accounts and transactions
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class GncXmlExporter extends Exporter{
+
+    private Document mDocument;
+    private TransactionsDbAdapter mTransactionsDbAdapter;
+
+    public GncXmlExporter(ExportParams params){
+        super(params);
+        mTransactionsDbAdapter = new TransactionsDbAdapter(mContext);
+    }
+
+    /**
+     * Overloaded constructor.
+     * <p>This method is used mainly by the {@link org.gnucash.android.db.DatabaseHelper} for database migrations</p>
+     * @param params Export parameters
+     * @param db SQLite database from which to export
+     */
+    public GncXmlExporter(ExportParams params, SQLiteDatabase db){
+        super(params, db);
+        mTransactionsDbAdapter = new TransactionsDbAdapter(db);
+    }
+
+    private void generateGncXml() throws ParserConfigurationException {
+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
+//        docFactory.setNamespaceAware(true);
+        DocumentBuilder documentBuilder = docFactory.newDocumentBuilder();
+
+        mDocument = documentBuilder.newDocument();
+        mDocument.setXmlVersion("1.0");
+        mDocument.setXmlStandalone(true);
+
+        Element rootElement = mDocument.createElement(GncXmlHelper.TAG_ROOT);
+        rootElement.setAttribute("xmlns:gnc",    "http://www.gnucash.org/XML/gnc");
+        rootElement.setAttribute("xmlns:act",    "http://www.gnucash.org/XML/act");
+        rootElement.setAttribute("xmlns:book",   "http://www.gnucash.org/XML/book");
+        rootElement.setAttribute("xmlns:cd",     "http://www.gnucash.org/XML/cd");
+        rootElement.setAttribute("xmlns:cmdty",  "http://www.gnucash.org/XML/cmdty");
+        rootElement.setAttribute("xmlns:price",  "http://www.gnucash.org/XML/price");
+        rootElement.setAttribute("xmlns:slot",   "http://www.gnucash.org/XML/slot");
+        rootElement.setAttribute("xmlns:split",  "http://www.gnucash.org/XML/split");
+        rootElement.setAttribute("xmlns:trn",    "http://www.gnucash.org/XML/trn");
+        rootElement.setAttribute("xmlns:ts",     "http://www.gnucash.org/XML/ts");
+
+        Element bookCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        bookCountNode.setAttribute("cd:type", "book");
+        bookCountNode.appendChild(mDocument.createTextNode("1"));
+        rootElement.appendChild(bookCountNode);
+
+        Element bookNode = mDocument.createElement(GncXmlHelper.TAG_BOOK);
+        bookNode.setAttribute("version", GncXmlHelper.BOOK_VERSION);
+        rootElement.appendChild(bookNode);
+
+        Element bookIdNode = mDocument.createElement(GncXmlHelper.TAG_BOOK_ID);
+        bookIdNode.setAttribute("type", "guid");
+        bookIdNode.appendChild(mDocument.createTextNode(UUID.randomUUID().toString().replaceAll("-", "")));
+        bookNode.appendChild(bookIdNode);
+
+        Element cmdtyCountData = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        cmdtyCountData.setAttribute("cd:type", "commodity");
+        cmdtyCountData.appendChild(mDocument.createTextNode("1")); //TODO: put actual number of currencies
+        bookNode.appendChild(cmdtyCountData);
+
+        List<Account> accountList = mAccountsDbAdapter.getSimpleAccountList();
+
+        Element accountCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        accountCountNode.setAttribute("cd:type", "account");
+        accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountList.size())));
+        bookNode.appendChild(accountCountNode);
+
+        List<Transaction> transactionsList = mTransactionsDbAdapter.getAllTransactions();
+
+        Element transactionCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        transactionCountNode.setAttribute("cd:type", "transaction");
+        transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionsList.size())));
+        bookNode.appendChild(transactionCountNode);
+
+        for (Account account : accountList) {
+            account.toGncXml(mDocument, bookNode);
+        }
+
+        for (Transaction transaction : transactionsList) {
+            transaction.toGncXml(mDocument, bookNode);
+        }
+        mDocument.appendChild(rootElement);
+        mAccountsDbAdapter.close();
+        mTransactionsDbAdapter.close();
+    }
+
+    @Override
+    public String generateExport() throws ExporterException{
+        StringWriter stringWriter = new StringWriter();
+        try {
+            generateGncXml();
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+
+            Transformer transformer = transformerFactory.newTransformer();
+
+            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+            DOMSource source = new DOMSource(mDocument);
+            StreamResult result = new StreamResult(stringWriter);
+
+            transformer.transform(source, result);
+            stringWriter.flush();
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new ExporterException(mParameters, e);
+        }
+        return stringWriter.toString();
+    }
+}
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
new file mode 100644
index 00000000..03e27c22
--- /dev/null
+++ b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -0,0 +1,109 @@
+package org.gnucash.android.export.xml;
+
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.TransactionType;
+
+import java.math.BigDecimal;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * Date: 17.07.2014
+ *
+ * @author Ngewi
+ */
+public abstract class GncXmlHelper {
+    public static final String TAG_PREFIX           = "gnc:";
+    /*
+    Qualified GnuCash XML tag names
+     */
+    public static final String TAG_ROOT             = "gnc-v2";
+    public static final String TAG_BOOK             = "gnc:book";
+    public static final String TAG_BOOK_ID          = "book:id";
+    public static final String TAG_COUNT_DATA       = "gnc:count-data";
+    public static final String ATTRIBUTE_CD_TYPE    = "cd:type";
+
+    public static final String TAG_COMMODITY        = "gnc:commodity";
+    public static final String TAG_NAME             = "act:name";
+    public static final String TAG_ACCT_ID          = "act:id";
+    public static final String TAG_TYPE             = "act:type";
+    public static final String TAG_COMMODITY_ID     = "cmdty:id";
+    public static final String TAG_COMMODITY_SPACE  = "cmdty:space";
+    public static final String TAG_COMMODITY_SCU    = "act:commodity-scu";
+    public static final String TAG_PARENT_UID       = "act:parent";
+    public static final String TAG_ACCOUNT          = "gnc:account";
+    public static final String TAG_SLOT_KEY         = "slot:key";
+    public static final String TAG_SLOT_VALUE       = "slot:value";
+    public static final String TAG_ACT_SLOTS        = "act:slots";
+    public static final String TAG_SLOT             = "slot";
+    public static final String TAG_ACCT_DESCRIPTION = "act:description";
+
+    public static final String TAG_TRANSACTION      = "gnc:transaction";
+    public static final String TAG_TRX_ID           = "trn:id";
+    public static final String TAG_TRX_CURRENCY     = "trn:currency";
+    public static final String TAG_DATE_POSTED      = "trn:date-posted";
+    public static final String TAG_DATE             = "ts:date";
+    public static final String TAG_DATE_ENTERED     = "trn:date-entered";
+    public static final String TAG_TRX_DESCRIPTION  = "trn:description";
+    public static final String TAG_TRX_SPLITS       = "trn:splits";
+    public static final String TAG_TRX_SPLIT        = "trn:split";
+
+    public static final String TAG_SPLIT_ID         = "split:id";
+    public static final String TAG_SPLIT_MEMO       = "split:memo";
+    public static final String TAG_RECONCILED_STATE = "split:reconciled_state";
+    public static final String TAG_SPLIT_ACCOUNT    = "split:account";
+    public static final String TAG_SPLIT_VALUE      = "split:value";
+    public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
+
+    //TODO: Remove this in the future when scheduled transactions are improved
+    public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
+
+    public static final String BOOK_VERSION         = "2.0.0";
+    public static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
+
+
+    /**
+     * Formats dates for the GnuCash XML format
+     * @param milliseconds Milliseconds since epoch
+     */
+    public static String formatDate(long milliseconds){
+        return DATE_FORMATTER.format(new Date(milliseconds));
+    }
+
+    /**
+     * Parses a date string formatted in the format "yyyy-MM-dd HH:mm:ss Z"
+     * @param dateString String date representation
+     * @return Time in milliseconds since epoch
+     * @throws ParseException if the date string could not be parsed e.g. because of different format
+     */
+    public static long parseDate(String dateString) throws ParseException {
+        Date date = DATE_FORMATTER.parse(dateString);
+        return date.getTime();
+    }
+
+    /**
+     * Formats the money amounts into the GnuCash XML format. GnuCash stores debits as positive and credits as negative
+     * @param split Split for which the amount is to be formatted
+     * @return GnuCash XML representation of amount
+     */
+    public static String formatMoney(Split split){
+        Money amount = split.getType() == TransactionType.DEBIT ? split.getAmount() : split.getAmount().negate();
+        BigDecimal decimal = amount.asBigDecimal().multiply(new BigDecimal(100));
+        return decimal.stripTrailingZeros().toPlainString() + "/100";
+    }
+
+    /**
+     * Parses amount strings from GnuCash XML into {@link java.math.BigDecimal}s
+     * @param amountString String containing the amount
+     * @return BigDecimal with numerical value
+     */
+    public static BigDecimal parseMoney(String amountString){
+        String[] tokens = amountString.split("/");
+        BigDecimal numerator = new BigDecimal(tokens[0]);
+        BigDecimal denominator = new BigDecimal(tokens[1]);
+
+        return numerator.divide(denominator);
+    }
+}
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
new file mode 100644
index 00000000..481579d6
--- /dev/null
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -0,0 +1,344 @@
+/*
+ * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.importer;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+import android.widget.Toast;
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.xml.GncXmlHelper;
+import org.gnucash.android.model.*;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.xml.sax.Attributes;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.helpers.DefaultHandler;
+
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+import java.io.*;
+import java.text.ParseException;
+import java.util.Currency;
+import java.util.regex.Pattern;
+
+/**
+ * Handler for parsing the GnuCash XML file.
+ * The discovered accounts and transactions are automatically added to the database
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class GncXmlHandler extends DefaultHandler {
+
+    /**
+     * ISO 4217 currency code for "No Currency"
+     */
+    private static final String NO_CURRENCY_CODE    = "XXX";
+
+    /**
+     * Tag for logging
+     */
+    private static final String LOG_TAG = "GnuCashAccountImporter";
+
+    /**
+     * Value for placeholder slots in GnuCash account structure file
+     */
+    private static final String PLACEHOLDER_KEY = "placeholder";
+
+    /**
+     * Value of color slots in GnuCash account structure file
+     */
+    private static final String COLOR_KEY = "color";
+
+    /**
+     * Value of favorite slots in GnuCash account structure file
+     */
+    private static final String FAVORITE_KEY = "favorite";
+
+    AccountsDbAdapter mAccountsDbAdapter;
+
+    /**
+     * StringBuilder for accumulating characters between XML tags
+     */
+    StringBuilder mContent;
+
+    /**
+     * Reference to account which is built when each account tag is parsed in the XML file
+     */
+    Account mAccount;
+
+    /**
+     * Transaction instance which will be built for each transaction found
+     */
+    Transaction mTransaction;
+
+    /**
+     * Accumulate attributes of splits found in this object
+     */
+    Split mSplit;
+
+    boolean mInColorSlot        = false;
+    boolean mInPlaceHolderSlot  = false;
+    boolean mInFavoriteSlot     = false;
+    boolean mISO4217Currency    = false;
+
+    private Context mContext;
+    private TransactionsDbAdapter mTransactionsDbAdapter;
+
+    public GncXmlHandler(Context context) {
+        mContext = context;
+        mAccountsDbAdapter = new AccountsDbAdapter(mContext);
+        mTransactionsDbAdapter = new TransactionsDbAdapter(mContext);
+        mContent = new StringBuilder();
+    }
+
+    /**
+     * Instantiates handler to parse XML into already open db
+     * @param db SQLite Database
+     */
+    public GncXmlHandler(SQLiteDatabase db){
+        mContext = GnuCashApplication.getAppContext();
+        mAccountsDbAdapter = new AccountsDbAdapter(db);
+        mTransactionsDbAdapter = new TransactionsDbAdapter(db);
+        mContent = new StringBuilder();
+    }
+
+    @Override
+    public void startElement(String uri, String localName,
+                             String qualifiedName, Attributes attributes) throws SAXException {
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)) {
+            mAccount = new Account(""); //dummy name, will be replaced when we find name tag
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
+            mTransaction = new Transaction(""); //dummy name will be replaced
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_SPLIT)){
+            mSplit = new Split(Money.getZeroInstance(),"");
+        }
+    }
+
+    @Override
+    public void endElement(String uri, String localName, String qualifiedName) throws SAXException {
+        String characterString = mContent.toString().trim();
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_NAME)) {
+            mAccount.setName(characterString);
+            mAccount.setFullName(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCT_ID)){
+            mAccount.setUID(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TYPE)){
+            mAccount.setAccountType(AccountType.valueOf(characterString));
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_COMMODITY_SPACE)){
+            if (characterString.equalsIgnoreCase("ISO4217")){
+                mISO4217Currency = true;
+            }
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_COMMODITY_ID)){
+            String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
+            if (mAccount != null){
+                mAccount.setCurrency(Currency.getInstance(currencyCode));
+            }
+
+            if (mTransaction != null){
+                mTransaction.setCurrencyCode(currencyCode);
+            }
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_PARENT_UID)){
+            mAccount.setParentUID(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
+            Log.d(LOG_TAG, "Saving account...");
+            mAccountsDbAdapter.addAccount(mAccount);
+
+            mAccount = null;
+            //reset ISO 4217 flag for next account
+            mISO4217Currency = false;
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
+            if (characterString.equals(PLACEHOLDER_KEY)){
+                mInPlaceHolderSlot = true;
+            }
+            if (characterString.equals(COLOR_KEY)){
+                mInColorSlot = true;
+            }
+
+            if (characterString.equals(FAVORITE_KEY)){
+                mInFavoriteSlot = true;
+            }
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
+            if (mInPlaceHolderSlot){
+                Log.v(LOG_TAG, "Setting account placeholder flag");
+                mAccount.setPlaceHolderFlag(Boolean.parseBoolean(characterString));
+                mInPlaceHolderSlot = false;
+            }
+
+            if (mInColorSlot){
+                String color = characterString.trim();
+                //Gnucash exports the account color in format #rrrgggbbb, but we need only #rrggbb.
+                //so we trim the last digit in each block, doesn't affect the color much
+                if (!Pattern.matches(Account.COLOR_HEX_REGEX, color))
+                    color = "#" + color.replaceAll(".(.)?", "$1").replace("null", "");
+                try {
+                    mAccount.setColorCode(color);
+                } catch (IllegalArgumentException ex){
+                    //sometimes the color entry in the account file is "Not set" instead of just blank. So catch!
+                    Log.i(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
+                    ex.printStackTrace();
+                }
+
+                mInColorSlot = false;
+            }
+
+            if (mInFavoriteSlot){
+                mAccount.setFavorite(Boolean.parseBoolean(characterString));
+                mInFavoriteSlot = false;
+            }
+        }
+
+
+        //================  PROCESSING OF TRANSACTION TAGS =====================================
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_ID)){
+            mTransaction.setUID(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_DESCRIPTION)){
+            mTransaction.setName(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
+            try {
+                mTransaction.setTime(GncXmlHelper.parseDate(characterString));
+            } catch (ParseException e) {
+                e.printStackTrace();
+                throw new SAXException("Unable to parse transaction time", e);
+            }
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_RECURRENCE_PERIOD)){
+            mTransaction.setRecurrencePeriod(Long.parseLong(characterString));
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ID)){
+            mSplit.setUID(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_MEMO)){
+            mSplit.setMemo(characterString);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_VALUE)){
+            Money amount = new Money(GncXmlHelper.parseMoney(characterString), mTransaction.getCurrency());
+            mSplit.setType(amount.isNegative() ? TransactionType.CREDIT : TransactionType.DEBIT);
+            mSplit.setAmount(amount.absolute());
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ACCOUNT)){
+            mSplit.setAccountUID(characterString);
+        }
+
+        if (qualifiedName.equals(GncXmlHelper.TAG_TRX_SPLIT)){
+            mTransaction.addSplit(mSplit);
+        }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
+            if (mTransaction.getRecurrencePeriod() > 0){ //TODO: Fix this when scheduled actions are expanded
+                mTransactionsDbAdapter.scheduleTransaction(mTransaction);
+            } else {
+                mTransactionsDbAdapter.addTransaction(mTransaction);
+            }
+            mTransaction = null;
+        }
+
+        //reset the accumulated characters
+        mContent.setLength(0);
+    }
+
+    @Override
+    public void characters(char[] chars, int start, int length) throws SAXException {
+        mContent.append(chars, start, length);
+    }
+
+    /**
+     * Parses XML into an already open database.
+     * <p>This method is used mainly by the {@link org.gnucash.android.db.DatabaseHelper} for database migrations.<br>
+     *     You should probably use {@link #parse(android.content.Context, java.io.InputStream)} instead</p>
+     * @param db SQLite Database
+     * @param gncXmlInputStream Input stream of GnuCash XML
+     */
+    public static void parse(SQLiteDatabase db, InputStream gncXmlInputStream) {
+        try {
+            SAXParserFactory spf = SAXParserFactory.newInstance();
+            SAXParser sp = spf.newSAXParser();
+            XMLReader xr = sp.getXMLReader();
+
+            BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
+
+            /** Create handler to handle XML Tags ( extends DefaultHandler ) */
+
+            GncXmlHandler handler = new GncXmlHandler(db);
+            xr.setContentHandler(handler);
+            xr.parse(new InputSource(bos));
+        } catch (Exception e) {
+            e.printStackTrace();
+            Toast.makeText(GnuCashApplication.getAppContext(),
+                    R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
+        }
+    }
+
+    /**
+     * Parse GnuCash XML input and populates the database
+     * @param context Application context
+     * @param gncXmlInputStream InputStream source of the GnuCash XML file
+     */
+    public static void parse(Context context, InputStream gncXmlInputStream){
+        try {
+            SAXParserFactory spf = SAXParserFactory.newInstance();
+            SAXParser sp = spf.newSAXParser();
+            XMLReader xr = sp.getXMLReader();
+
+            BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
+
+            /** Create handler to handle XML Tags ( extends DefaultHandler ) */
+
+            GncXmlHandler handler = new GncXmlHandler(context);
+            xr.setContentHandler(handler);
+            xr.parse(new InputSource(bos));
+            handler.mAccountsDbAdapter.close();
+            handler.mTransactionsDbAdapter.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+            Toast.makeText(context, R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/importer/GncXmlImportTask.java b/app/src/org/gnucash/android/importer/GncXmlImportTask.java
new file mode 100644
index 00000000..109c246c
--- /dev/null
+++ b/app/src/org/gnucash/android/importer/GncXmlImportTask.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */package org.gnucash.android.importer;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.os.AsyncTask;
+import android.widget.Toast;
+import org.gnucash.android.R;
+import org.gnucash.android.ui.account.AccountsActivity;
+
+import java.io.InputStream;
+
+/**
+ * Imports a GnuCash (desktop) account file and displays a progress dialog.
+ * The AccountsActivity is opened when importing is done.
+ */
+public class GncXmlImportTask extends AsyncTask<InputStream, Void, Boolean> {
+    private final Context context;
+    private ProgressDialog progressDialog;
+
+    public GncXmlImportTask(Context context){
+        this.context = context;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+        progressDialog = new ProgressDialog(context);
+        progressDialog.setTitle(R.string.title_progress_importing_accounts);
+        progressDialog.setIndeterminate(true);
+        progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        progressDialog.show();
+    }
+
+    @Override
+    protected Boolean doInBackground(InputStream... inputStreams) {
+        try {
+            GncXmlHandler.parse(context, inputStreams[0]);
+        } catch (Exception exception){
+            exception.printStackTrace();
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    protected void onPostExecute(Boolean importSuccess) {
+        progressDialog.dismiss();
+
+        int message = importSuccess ? R.string.toast_success_importing_accounts : R.string.toast_error_importing_accounts;
+        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
+
+        AccountsActivity.start(context);
+    }
+}
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index 833d9985..d07dd4f6 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -20,11 +20,10 @@
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
 import org.gnucash.android.export.qif.QifHelper;
-import org.gnucash.android.model.Transaction.TransactionType;
+import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
-import java.math.BigDecimal;
 import java.util.*;
 import java.util.regex.Pattern;
 
@@ -66,44 +65,6 @@
     public static final String COLOR_HEX_REGEX = "^#(?:[0-9a-fA-F]{3}){1,2}$";
 
     /**
-	 * The type of account
-	 * This are the different types specified by the OFX format and 
-	 * they are currently not used except for exporting
-	 */
-	public enum AccountType {
-        CASH(TransactionType.DEBIT), BANK(TransactionType.DEBIT), CREDIT, ASSET(TransactionType.DEBIT), LIABILITY,
-        INCOME, EXPENSE(TransactionType.DEBIT), PAYABLE, RECEIVABLE(TransactionType.DEBIT), EQUITY, CURRENCY,
-        STOCK(TransactionType.DEBIT), MUTUAL(TransactionType.DEBIT), ROOT;
-
-        /**
-         * Indicates that this type of normal balance the account type has
-         * <p>To increase the value of an account with normal balance of credit, one would credit the account.
-         * To increase the value of an account with normal balance of debit, one would likewise debit the account.</p>
-         */
-        private TransactionType mNormalBalance = TransactionType.CREDIT;
-
-        private AccountType(TransactionType normalBalance){
-            this.mNormalBalance = normalBalance;
-        }
-
-        private AccountType() {
-            //nothing to see here, move along
-        }
-
-        public boolean hasDebitNormalBalance(){
-            return mNormalBalance == TransactionType.DEBIT;
-        }
-
-        /**
-         * Returns the type of normal balance this account possesses
-         * @return TransactionType balance of the account type
-         */
-        public TransactionType getNormalBalanceType(){
-            return mNormalBalance;
-        }
-    }
-
-    /**
      * Accounts types which are used by the OFX standard
      */
 	public enum OfxAccountType {CHECKING, SAVINGS, MONEYMRKT, CREDITLINE }
@@ -156,7 +117,7 @@ public TransactionType getNormalBalanceType(){
      * Flag for placeholder accounts.
      * These accounts cannot have transactions
      */
-    private boolean mPlaceholderAccount;
+    private boolean mIsPlaceholderAccount;
 
     /**
      * Account color field in hex format #rrggbb
@@ -292,21 +253,10 @@ public void setAccountType(AccountType mAccountType) {
 
 	/**
 	 * Adds a transaction to this account
-	 * <p>The currency of the transaction will be set to the currency of the account
-	 * if they are not the same. The currency value conversion is performed, just 
-	 * a different currency is assigned to the same value amount in the transaction.</p>
-	 * <p>
-	 * If the transaction has no account Unique ID, it will be set to the UID of this account.
-	 * Some transactions already have the account UID and double account UID set. In that case,
-	 * nothing is changed
-	 * </p>
 	 * @param transaction {@link Transaction} to be added to the account
 	 */
 	public void addTransaction(Transaction transaction){
-		//some double transactions may already an account UID. Set only for those with null
-		if (transaction.getAccountUID() == null)
-			transaction.setAccountUID(getUID());
-		transaction.setCurrency(mCurrency);
+		transaction.setCurrencyCode(mCurrency.getCurrencyCode());
 		mTransactionsList.add(transaction);
 	}
 	
@@ -318,11 +268,6 @@ public void addTransaction(Transaction transaction){
 	 * @param transactionsList List of {@link Transaction}s to be set.
 	 */
 	public void setTransactions(List<Transaction> transactionsList){
-		for (Transaction transaction : transactionsList) {
-			if (transaction.getAccountUID() == null)
-				transaction.setAccountUID(getUID());
-			transaction.setCurrency(mCurrency);
-		}
 		this.mTransactionsList = transactionsList;
 	}
 		
@@ -369,32 +314,9 @@ public boolean hasUnexportedTransactions(){
 	 * @return {@link Money} aggregate amount of all transactions in account.
 	 */
 	public Money getBalance(){
-		Money balance = new Money(new BigDecimal(0), this.mCurrency);
-		for (Transaction transaction : mTransactionsList) {
-            balance = balance.add(transaction.getAmount());
-
-/*
-            //TODO: Re-enable proper computation of balance for double-entries in the future
-            if (GnuCashApplication.isDoubleEntryEnabled(false)) {
-                boolean isDebitAccount = getAccountType().hasDebitNormalBalance();
-                boolean isDebitTransaction = transaction.getType() == TransactionType.DEBIT;
-                if (isDebitAccount) {
-                    if (isDebitTransaction) {
-                        balance = balance.add(transaction.getAmount());
-                    } else {
-                        balance = balance.subtract(transaction.getAmount());
-                    }
-                } else {
-                    if (isDebitTransaction) {
-                        balance = balance.subtract(transaction.getAmount());
-                    } else {
-                        balance = balance.add(transaction.getAmount());
-                    }
-                }
-            } else { //not using double entry
-                balance = balance.add(transaction.getAmount());
-            }
-*/
+		Money balance = Money.createZeroInstance(mCurrency.getCurrencyCode());
+        for (Transaction transaction : mTransactionsList) {
+            balance.add(transaction.getBalance(mUID));
 		}
 		return balance;
 	}
@@ -477,7 +399,7 @@ public String getParentUID() {
      * @return <code>true</code> if this account is a placeholder account, <code>false</code> otherwise
      */
     public boolean isPlaceholderAccount(){
-        return mPlaceholderAccount;
+        return mIsPlaceholderAccount;
     }
 
     /**
@@ -486,7 +408,7 @@ public boolean isPlaceholderAccount(){
      * @param isPlaceholder Boolean flag indicating if the account is a placeholder account or not
      */
     public void setPlaceHolderFlag(boolean isPlaceholder){
-        mPlaceholderAccount = isPlaceholder;
+        mIsPlaceholderAccount = isPlaceholder;
     }
 
     /**
@@ -606,8 +528,7 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		for (Transaction transaction : mTransactionsList) {
 			if (!exportAllTransactions && transaction.isExported())
 				continue;
-			
-			bankTransactionsList.appendChild(transaction.toOfx(doc, mUID));
+            bankTransactionsList.appendChild(transaction.toOFX(doc, mUID));
 		}		
 		//================= END TRANSACTIONS LIST =================================
 					
@@ -624,34 +545,116 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
     /**
      * Exports the account info and transactions in the QIF format
      * @param exportAllTransactions Flag to determine whether to export all transactions, or only new transactions since last export
+     * @param exportedTransactionUIDs List of unique IDs of transactions which have already been exported (in the current session). Used to avoid duplicating splits
      * @return QIF representation of the account information
      */
-    public String toQIF(boolean exportAllTransactions) {
-        StringBuffer accountQifBuffer = new StringBuffer();
+    public String toQIF(boolean exportAllTransactions, List<String> exportedTransactionUIDs) {
+        StringBuilder accountQIFBuilder = new StringBuilder();
         final String newLine = "\n";
 
         AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
         String fullyQualifiedAccountName = accountsDbAdapter.getFullyQualifiedAccountName(mUID);
         accountsDbAdapter.close();
 
-        accountQifBuffer.append(QifHelper.ACCOUNT_HEADER).append(newLine);
-        accountQifBuffer.append(QifHelper.ACCOUNT_NAME_PREFIX).append(fullyQualifiedAccountName).append(newLine);
-        accountQifBuffer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
+        accountQIFBuilder.append(QifHelper.ACCOUNT_HEADER).append(newLine);
+        accountQIFBuilder.append(QifHelper.ACCOUNT_NAME_PREFIX).append(fullyQualifiedAccountName).append(newLine);
+        accountQIFBuilder.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
 
         String header = QifHelper.getQifHeader(mAccountType);
-        accountQifBuffer.append(header + newLine);
+        accountQIFBuilder.append(header + newLine);
 
         for (Transaction transaction : mTransactionsList) {
-            //ignore those which are loaded as double transactions.
-            // They will be handled as splits
-            if (!transaction.getAccountUID().equals(mUID))
-                continue;
-
             if (!exportAllTransactions && transaction.isExported())
                 continue;
+            if (exportedTransactionUIDs.contains(transaction.getUID()))
+                continue;
 
-            accountQifBuffer.append(transaction.toQIF() + newLine);
+            accountQIFBuilder.append(transaction.toQIF(mUID) + newLine);
+            exportedTransactionUIDs.add(transaction.getUID());
         }
-        return accountQifBuffer.toString();
+        return accountQIFBuilder.toString();
     }
+
+    /**
+     * Helper method for creating slot key-value pairs in the account XML structure.
+     * <p>This method is for use with slots whose values are strings</p>
+     * @param doc {@link org.w3c.dom.Document} for creating nodes
+     * @param key Slot key as string
+     * @param value Slot value as String
+     * @return Element node containing the key-value pair
+     */
+    private Element createSlot(Document doc, String key, String value){
+        Element slotNode  = doc.createElement(GncXmlHelper.TAG_SLOT);
+        Element slotKeyNode = doc.createElement(GncXmlHelper.TAG_SLOT_KEY);
+        slotKeyNode.appendChild(doc.createTextNode(key));
+        Element slotValueNode = doc.createElement(GncXmlHelper.TAG_SLOT_VALUE);
+        slotValueNode.setAttribute("type", "string");
+        slotValueNode.appendChild(doc.createTextNode(value));
+        slotNode.appendChild(slotKeyNode);
+        slotNode.appendChild(slotValueNode);
+
+        return slotNode;
+    }
+
+    /**
+     * Method which generates the GnuCash XML DOM for this account
+     * @param doc {@link org.w3c.dom.Document} for creating nodes
+     * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
+     */
+    public void toGncXml(Document doc, Element rootNode) {
+        Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
+        nameNode.appendChild(doc.createTextNode(mName));
+
+        Element idNode = doc.createElement(GncXmlHelper.TAG_ACCT_ID);
+        idNode.setAttribute("type", "guid");
+        idNode.appendChild(doc.createTextNode(mUID));
+
+        Element typeNode = doc.createElement(GncXmlHelper.TAG_TYPE);
+        typeNode.appendChild(doc.createTextNode(mAccountType.name()));
+
+        Element commodityNode = doc.createElement(GncXmlHelper.TAG_COMMODITY);
+        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
+        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
+        commodityNode.appendChild(cmdtySpacenode);
+        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
+        cmdtyIdNode.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));
+        commodityNode.appendChild(cmdtyIdNode);
+
+        Element commodityScuNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SCU);
+        int fractionDigits = mCurrency.getDefaultFractionDigits();
+        commodityScuNode.appendChild(doc.createTextNode(Integer.toString((int) Math.pow(10, fractionDigits))));
+
+        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_ACCT_DESCRIPTION);
+        descriptionNode.appendChild(doc.createTextNode(mName));
+
+        Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
+        acctSlotsNode.appendChild(createSlot(doc, "placeholder", Boolean.toString(mIsPlaceholderAccount)));
+
+        if (mColorCode != null && mColorCode.trim().length() > 0){
+            acctSlotsNode.appendChild(createSlot(doc, "color", mColorCode));
+        }
+
+        acctSlotsNode.appendChild(createSlot(doc, "favorite", Boolean.toString(mIsFavorite)));
+
+        Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
+        accountNode.setAttribute("version", GncXmlHelper.BOOK_VERSION);
+        accountNode.appendChild(nameNode);
+        accountNode.appendChild(idNode);
+        accountNode.appendChild(typeNode);
+        accountNode.appendChild(commodityNode);
+        accountNode.appendChild(commodityScuNode);
+        accountNode.appendChild(descriptionNode);
+        accountNode.appendChild(acctSlotsNode);
+
+
+        if (mParentAccountUID != null && mParentAccountUID.trim().length() > 0){
+            Element parentAccountNode = doc.createElement(GncXmlHelper.TAG_PARENT_UID);
+            parentAccountNode.setAttribute("type", "guid");
+            parentAccountNode.appendChild(doc.createTextNode(mParentAccountUID));
+            accountNode.appendChild(parentAccountNode);
+        }
+
+        rootNode.appendChild(accountNode);
+    }
+
 }
diff --git a/app/src/org/gnucash/android/model/AccountType.java b/app/src/org/gnucash/android/model/AccountType.java
new file mode 100644
index 00000000..ea41c89d
--- /dev/null
+++ b/app/src/org/gnucash/android/model/AccountType.java
@@ -0,0 +1,39 @@
+package org.gnucash.android.model;
+
+/**
+ * The type of account
+ * This are the different types specified by the OFX format and
+ * they are currently not used except for exporting
+ */
+public enum AccountType {
+    CASH(TransactionType.DEBIT), BANK(TransactionType.DEBIT), CREDIT, ASSET(TransactionType.DEBIT), LIABILITY,
+    INCOME, EXPENSE(TransactionType.DEBIT), PAYABLE, RECEIVABLE(TransactionType.DEBIT), EQUITY, CURRENCY,
+    STOCK(TransactionType.DEBIT), MUTUAL(TransactionType.DEBIT), ROOT;
+
+    /**
+     * Indicates that this type of normal balance the account type has
+     * <p>To increase the value of an account with normal balance of credit, one would credit the account.
+     * To increase the value of an account with normal balance of debit, one would likewise debit the account.</p>
+     */
+    private TransactionType mNormalBalance = TransactionType.CREDIT;
+
+    AccountType(TransactionType normalBalance){
+        this.mNormalBalance = normalBalance;
+    }
+
+    AccountType() {
+        //nothing to see here, move along
+    }
+
+    public boolean hasDebitNormalBalance(){
+        return mNormalBalance == TransactionType.DEBIT;
+    }
+
+    /**
+     * Returns the type of normal balance this account possesses
+     * @return TransactionType balance of the account type
+     */
+    public TransactionType getNormalBalanceType(){
+        return mNormalBalance;
+    }
+}
diff --git a/app/src/org/gnucash/android/model/Money.java b/app/src/org/gnucash/android/model/Money.java
index 3ef535a4..bbf760c8 100644
--- a/app/src/org/gnucash/android/model/Money.java
+++ b/app/src/org/gnucash/android/model/Money.java
@@ -85,7 +85,7 @@
      * A zero instance with the currency of the default locale.
      * This can be used anywhere where a starting amount is required without having to create a new object
      */
-    private static final Money sDefaultZero = Money.createInstance(Currency.getInstance(Locale.getDefault()).getCurrencyCode());
+    private static final Money sDefaultZero = Money.createZeroInstance(Currency.getInstance(Locale.getDefault()).getCurrencyCode());
 
     /**
      * Returns a Money instance initialized to the local currency and value 0
@@ -173,7 +173,7 @@ public Money(Money money){
      * @param currencyCode Currency to use for this money instance
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
-    public static Money createInstance(String currencyCode){
+    public static Money createZeroInstance(String currencyCode){
         return new Money("0", currencyCode);
     }
 
@@ -465,4 +465,12 @@ public static BigDecimal parseToDecimal(String amountString){
 		}
 		return result;		
 	}
+
+    /**
+     * Returns a new instance of {@link Money} object with the absolute value of the current object
+     * @return Money object with absolute value of this instance
+     */
+    public Money absolute() {
+        return new Money(mAmount.abs(), mCurrency);
+    }
 }
diff --git a/app/src/org/gnucash/android/model/Split.java b/app/src/org/gnucash/android/model/Split.java
new file mode 100644
index 00000000..69192b5b
--- /dev/null
+++ b/app/src/org/gnucash/android/model/Split.java
@@ -0,0 +1,229 @@
+package org.gnucash.android.model;
+
+import org.gnucash.android.export.xml.GncXmlHelper;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
+import java.util.UUID;
+
+/**
+ * A split amount in a transaction.
+ * Every transaction is made up of at least two splits (representing a double entry transaction)
+ * <p>The split amount is always stored in the database as the absolute value alongside its transaction type of CREDIT/DEBIT<br/>
+ * This is independent of the negative values which are shown in the UI (for user convenience).
+ * The actual movement of the balance in the account depends on the type of normal balance of the account and the
+ * transaction type of the split.</p>
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class Split {
+    /**
+     * Amount value of this split
+     */
+    private Money mAmount;
+
+    /**
+     * Unique ID of this split
+     */
+    private String mUID;
+
+    /**
+     * Transaction UID which this split belongs to
+     */
+    private String mTransactionUID;
+
+    /**
+     * Account UID which this split belongs to
+     */
+    private String mAccountUID;
+
+    /**
+     * The type of this transaction, credit or debit
+     */
+    private TransactionType mSplitType;
+
+    /**
+     * Memo associated with this split
+     */
+    private String mMemo;
+
+    /**
+     * Initialize split with an amount and account
+     * @param amount Money amount of this split
+     * @param accountUID String UID of transfer account
+     */
+    public Split(Money amount, String accountUID){
+        setAmount(amount);
+        setAccountUID(accountUID);
+        mUID = UUID.randomUUID().toString().replaceAll("-","");
+    }
+
+    /**
+     * Clones the <code>sourceSplit</code> to create a new instance with same fields
+     * @param sourceSplit Split to be cloned
+     * @param generateUID Determines if the clone should have a new UID or should maintain the one from source
+     */
+    public Split(Split sourceSplit, boolean generateUID){
+        this.mMemo          = sourceSplit.mMemo;
+        this.mAccountUID    = sourceSplit.mAccountUID;
+        this.mSplitType     = sourceSplit.mSplitType;
+        this.mTransactionUID = sourceSplit.mTransactionUID;
+        this.mAmount        = sourceSplit.mAmount.absolute();
+
+        if (generateUID){
+            mUID = UUID.randomUUID().toString().replaceAll("-","");
+        } else {
+            this.mUID           = sourceSplit.mUID;
+        }
+    }
+
+    public Money getAmount() {
+        return mAmount;
+    }
+
+    public void setAmount(Money amount) {
+        this.mAmount = amount;
+    }
+
+    public String getUID() {
+        return mUID;
+    }
+
+    public void setUID(String uid) {
+        this.mUID = uid;
+    }
+
+    public String getTransactionUID() {
+        return mTransactionUID;
+    }
+
+    public void setTransactionUID(String transactionUID) {
+        this.mTransactionUID = transactionUID;
+    }
+
+    public String getAccountUID() {
+        return mAccountUID;
+    }
+
+    public void setAccountUID(String accountUID) {
+        this.mAccountUID = accountUID;
+    }
+
+    public TransactionType getType() {
+        return mSplitType;
+    }
+
+    public void setType(TransactionType transactionType) {
+        this.mSplitType = transactionType;
+    }
+
+    public String getMemo() {
+        return mMemo;
+    }
+
+    public void setMemo(String memo) {
+        this.mMemo = memo;
+    }
+
+    public Split createPair(String accountUID){
+        Split pair = new Split(mAmount.absolute(), accountUID);
+        pair.setType(mSplitType.invert());
+        pair.setMemo(mMemo);
+
+        return pair;
+    }
+
+    protected Split clone(){
+        Split split = new Split(mAmount, mAccountUID);
+        split.mUID = mUID;
+        split.setType(mSplitType);
+        split.setMemo(mMemo);
+        split.setTransactionUID(mTransactionUID);
+        return split;
+    }
+
+    /**
+     * Checks is this <code>other</code> is a pair split of this.
+     * <p>Two splits are considered a pair if they have the same amount and opposite split types</p>
+     * @param other
+     * @return
+     */
+    public boolean isPairOf(Split other) {
+        return mAmount.absolute().equals(other.mAmount.absolute())
+                && mSplitType.invert().equals(other.mSplitType);
+    }
+
+    @Override
+    public String toString() {
+        return mSplitType.name() + " of " + mAmount.toString() + " in account: " + mAccountUID;
+    }
+
+    /**
+     * Returns a string representation of the split which can be parsed again using {@link org.gnucash.android.model.Split#parseSplit(String)}
+     * @return
+     */
+    public String toCsv(){
+        String splitString = mAmount.toString() + ";" + mAmount.getCurrency().getCurrencyCode() + ";"
+                + mAccountUID + ";" + mSplitType.name();
+        if (mMemo != null){
+            splitString = splitString + ";" + mMemo;
+        }
+        return splitString;
+    }
+
+    /**
+     * Parses a split which is in the format "<amount>;<currency_code>;<account_uid>;<type>;<memo>".
+     * The split input string is the same produced by the {@link Split#toCsv()} method
+     *
+     * @param splitString String containing formatted split
+     * @return Split instance parsed from the string
+     */
+    public static Split parseSplit(String splitString) {
+        String[] tokens = splitString.split(";");
+        Money amount = new Money(tokens[0], tokens[1]);
+        Split split = new Split(amount, tokens[2]);
+        split.setType(TransactionType.valueOf(tokens[3]));
+        if (tokens.length == 5){
+            split.setMemo(tokens[4]);
+        }
+        return split;
+    }
+
+    /**
+     * Creates a GnuCash XML representation of this split
+     * @param doc XML {@link org.w3c.dom.Document} for creating the nodes
+     * @param rootNode Parent node to append the split XML to
+     */
+    public void toGncXml(Document doc, Element rootNode) {
+        Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
+        idNode.setAttribute("type", "guid");
+        idNode.appendChild(doc.createTextNode(mUID));
+
+        Element memoNode = doc.createElement(GncXmlHelper.TAG_SPLIT_MEMO);
+        if (mMemo != null)
+            memoNode.appendChild(doc.createTextNode(mMemo));
+
+        Element stateNode = doc.createElement(GncXmlHelper.TAG_RECONCILED_STATE);
+        stateNode.appendChild(doc.createTextNode("n"));
+
+        Element valueNode = doc.createElement(GncXmlHelper.TAG_SPLIT_VALUE);
+        valueNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
+
+        Element quantityNode = doc.createElement(GncXmlHelper.TAG_SPLIT_QUANTITY);
+        quantityNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
+
+        Element accountNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ACCOUNT);
+        accountNode.setAttribute("type", "guid");
+        accountNode.appendChild(doc.createTextNode(mAccountUID));
+
+        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRX_SPLIT);
+        splitNode.appendChild(idNode);
+        splitNode.appendChild(memoNode);
+        splitNode.appendChild(stateNode);
+        splitNode.appendChild(valueNode);
+        splitNode.appendChild(quantityNode);
+        splitNode.appendChild(accountNode);
+
+        rootNode.appendChild(splitNode);
+    }
+}
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 68bbe725..fa54a22c 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -16,21 +16,18 @@
 
 package org.gnucash.android.model;
 
-import java.math.BigDecimal;
-import java.util.Currency;
-import java.util.Date;
-import java.util.Locale;
-import java.util.UUID;
-
+import android.content.Intent;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account.OfxAccountType;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
 import org.gnucash.android.export.qif.QifHelper;
+import org.gnucash.android.export.xml.GncXmlHelper;
+import org.gnucash.android.model.Account.OfxAccountType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
-import android.content.Intent;
+import java.math.BigDecimal;
+import java.util.*;
 
 /**
  * Represents a financial transaction, either credit or debit.
@@ -40,86 +37,80 @@
  */
 public class Transaction {
 
-    /**
-	 * Type of transaction, a credit or a debit
-	 */
-	public enum TransactionType {DEBIT, CREDIT};
-	
 	/**
-	 * Mime type for transactions in Gnucash. 
+	 * Mime type for transactions in Gnucash.
 	 * Used for recording transactions through intents
 	 */
 	public static final String MIME_TYPE 			= "vnd.android.cursor.item/vnd.org.gnucash.android.transaction";
-	
+
 	/**
 	 * Key for passing the account unique Identifier as an argument through an {@link Intent}
 	 */
+    @Deprecated
 	public static final String EXTRA_ACCOUNT_UID 	= "org.gnucash.android.extra.account_uid";
-	
+
 	/**
 	 * Key for specifying the double entry account
 	 */
+    @Deprecated
 	public static final String EXTRA_DOUBLE_ACCOUNT_UID = "org.gnucash.android.extra.double_account_uid";
-	
+
 	/**
 	 * Key for identifying the amount of the transaction through an Intent
 	 */
+    @Deprecated
 	public static final String EXTRA_AMOUNT 		= "org.gnucash.android.extra.amount";
 
     /**
      * Extra key for the transaction type.
-     * This value should typically be set by calling {@link Transaction.TransactionType#name()}
+     * This value should typically be set by calling {@link TransactionType#name()}
      */
+    @Deprecated
     public static final String EXTRA_TRANSACTION_TYPE = "org.gnucash.android.extra.transaction_type";
 
+    /**
+     * Argument key for passing splits as comma-separated multi-line list and each line is a split.
+     * The line format is: <type>;<amount>;<account_uid>
+     * The amount should be formatted in the US Locale
+     */
+    public static final String EXTRA_SPLITS = "org.gnucash.android.extra.transaction.splits";
+
+    /**
+     * Currency used by splits in this transaction
+     */
+    private String mCurrencyCode = Money.DEFAULT_CURRENCY_CODE;
+
+    /**
+     * The splits making up this transaction
+     */
+    private List<Split> mSplitList = new ArrayList<Split>();
+
 	/**
-	 * {@link Money} value of this transaction
-	 */
-	private Money mAmount;
-	
-	/**
-	 * Unique identifier of the transaction. 
+	 * Unique identifier of the transaction.
 	 * This is automatically generated when the transaction is created.
 	 */
-	private String mTransactionUID;
-	
+	private String mUID;
+
 	/**
 	 * Name describing the transaction
 	 */
 	private String mName;
-	
+
 	/**
 	 * An extra note giving details about the transaction
 	 */
 	private String mDescription = "";
-	
-	/**
-	 * Unique Identifier of the account to which this transaction belongs
-	 */
-	private String mAccountUID = null;
-	
-	/**
-	 * Unique Identifier of the account which is used for double entry of this transaction
-	 * This value is null by default for transactions not using double entry
-	 */
-	private String mDoubleEntryAccountUID = null;
-	
+
 	/**
 	 * Flag indicating if this transaction has been exported before or not
 	 * The transactions are typically exported as bank statement in the OFX format
 	 */
 	private int mIsExported = 0;
-	
+
 	/**
 	 * Timestamp when this transaction occurred
 	 */
 	private long mTimestamp;
-	
-	/**
-	 * Type of transaction, either credit or debit
-	 * @see TransactionType
-	 */
-	private TransactionType mType = TransactionType.DEBIT;
 
     /**
      * Recurrence period of this transaction.
@@ -129,41 +120,13 @@
     private long mRecurrencePeriod = 0;
 
 	/**
-	 * Overloaded constructor. Creates a new transaction instance with the 
-	 * provided data and initializes the rest to default values. 
-	 * @param amount Amount for the transaction
-	 * @param name Name of the transaction
-	 */
-	public Transaction(Money amount, String name) {
-		initDefaults();		
-		setName(name);
-		setAmount(amount); //takes care of setting the type for us
-	}
-
-	/**
-	 * Overloaded constructor. Creates a new transaction instance with the 
-	 * provided data and initializes the rest to default values. 
-	 * @param amount Amount for the transaction
-	 * @param name Name of the transaction
-	 */
-	public Transaction(String amount, String name) {
-		initDefaults();		
-		setName(name);
-		setAmount(amount); //takes care of setting the type for us
-	}
-	
-	/**
-	 * Overloaded constructor. Creates a new transaction instance with the 
-	 * provided data and initializes the rest to default values. 
-	 * @param amount Amount for the transaction
+	 * Overloaded constructor. Creates a new transaction instance with the
+	 * provided data and initializes the rest to default values.
 	 * @param name Name of the transaction
-	 * @param type Type of transaction
 	 */
-	public Transaction(Money amount, String name, TransactionType type){
+	public Transaction(String name) {
 		initDefaults();
-		setAmount(amount);		
-		this.mType = type;
-		this.mName = name;
+		setName(name);
 	}
 
     /**
@@ -178,10 +141,9 @@ public Transaction(Transaction transaction, boolean generateNewUID){
         initDefaults();
         setName(transaction.getName());
         setDescription(transaction.getDescription());
-        setAmount(transaction.getAmount());
-        setTransactionType(transaction.getTransactionType());
-        setAccountUID(transaction.getAccountUID());
-        setDoubleEntryAccountUID(transaction.getDoubleEntryAccountUID());
+        for (Split split : transaction.mSplitList) {
+            addSplit(new Split(split, true));
+        }
         setExported(transaction.isExported());
         setTime(transaction.getTimeMillis());
         if (!generateNewUID){
@@ -193,74 +155,181 @@ public Transaction(Transaction transaction, boolean generateNewUID){
 	 * Initializes the different fields to their default values.
 	 */
 	private void initDefaults(){
-		setAmount(new Money());
 		this.mTimestamp = System.currentTimeMillis();
-		this.mType = TransactionType.DEBIT;
-		mTransactionUID = UUID.randomUUID().toString();
-		
-	}
-	
-	/**
-	 * Set the amount of this transaction
-	 * @param amount Amount of the transaction
-	 */
-	public void setAmount(Money amount) {
-		this.mAmount = new Money(amount);
+		mUID = UUID.randomUUID().toString().replaceAll("-", "");
 	}
 
-	/**
-	 * Set the amount of this transaction
-	 * @param amount Amount of the transaction
-	 */
-	public void setAmount(String amount) {
-		this.mAmount = new Money(amount);
-	}
-	
-	/**
-	 * Sets the amount and currency of the transaction
-	 * @param amount String containing number value of transaction amount
-	 * @param currencyCode ISO 4217 currency code
-	 */
-	public void setAmount(String amount, String currencyCode){
-		this.mAmount = new Money(new BigDecimal(amount),
-								 Currency.getInstance(currencyCode));
-	}
+    /**
+     * Returns list of splits for this transaction
+     * @return {@link java.util.List} of splits in the transaction
+     */
+    public List<Split> getSplits(){
+        return mSplitList;
+    }
 
-	/**
-	 * Sets the currency of the transaction
-	 * The currency remains in the object model and is not persisted to the database
-	 * Transactions always use the currency of their accounts
-	 * @param currency {@link Currency} of the transaction value
-	 */
-	public void setCurrency(Currency currency){		
-		mAmount = mAmount.withCurrency(currency);
-	}
-	
-	/**
-	 * Sets the amount of the transaction
-	 * @param amount Amount value of the transaction
-	 * @param currency {@link Currency} of the transaction
-	 */
-	public void setAmount(double amount, Currency currency){
-		this.mAmount = new Money(new BigDecimal(amount), currency);
-	}
-	
-	/**
-	 * Returns the amount involved in this transaction
-	 * @return {@link Money} amount in the transaction
-	 */
-	public Money getAmount() {
-		return mAmount;
-	}
-	
-	/**
-	 * Returns the transaction properly formatted for display
-	 * @return Properly formatted string amount
-	 */
-	public String getFormattedAmount(){		
-		return mAmount.formattedString(Locale.getDefault());		
+    /**
+     * Returns what kind of transaction this is for the specified account depending on the splits for that account.
+     * <br>This is mostly necessary for generating OFX files.
+     * @param accountUID Unique Identifier of the account
+     * @return TransactionType of this transaction
+     */
+    public TransactionType getTransactionTypeForAccount(String accountUID){
+        List<Split> splitList = getSplits(accountUID);
+        if (splitList.size() == 1)
+            return splitList.get(0).getType();
+
+        Money balance = getBalance(accountUID);
+
+        return balance.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
+    }
+
+    /**
+     * Returns the list of splits belonging to a specific account
+     * @param accountUID Unique Identifier of the account
+     * @return List of {@link org.gnucash.android.model.Split}s
+     */
+    public List<Split> getSplits(String accountUID){
+        List<Split> splits = new ArrayList<Split>();
+        for (Split split : mSplitList) {
+            if (split.getAccountUID().equals(accountUID)){
+                splits.add(split);
+            }
+        }
+        return splits;
+    }
+
+    /**
+     * Sets the splits for this transaction
+     * <p>All the splits in the list will have their transaction UID set to this transaction</p>
+     * @param splitList List of splits for this transaction
+     */
+    public void setSplits(List<Split> splitList){
+        mSplitList.clear();
+        for (Split split : splitList) {
+            addSplit(split);
+        }
+    }
+
+    /**
+     * Add a split to the transaction.
+     * <p>Sets the split UID and currency to that of this transaction</p>
+     * @param split Split for this transaction
+     */
+    public void addSplit(Split split){
+        //sets the currency of the split to the currency of the transaction
+        split.setAmount(split.getAmount().withCurrency(Currency.getInstance(mCurrencyCode)));
+        split.setTransactionUID(mUID);
+        mSplitList.add(split);
+    }
+
+    /**
+     * Returns the balance of this transaction for only those splits which relate to the account.
+     * <p>Uses a call to {@link #getBalance(String)} with the appropriate parameters</p>
+     * @param accountUID Unique Identifier of the account
+     * @return Money balance of the transaction for the specified account
+     * @see #computeBalance(String, java.util.List)
+     */
+    public Money getBalance(String accountUID){
+        return computeBalance(accountUID, mSplitList);
+    }
+
+    /**
+     * Computes the imbalance amount for the given transaction.
+     * In double entry, all transactions should resolve to zero. However a user may not enter all such values which
+     * means there is an extra amount which is unresolved.
+     * @return Money imbalance of the transaction
+     */
+    public Money getImbalance(){
+        Money imbalance = Money.createZeroInstance(mCurrencyCode);
+        for (Split split : mSplitList) {
+            Money amount = split.getAmount().absolute();
+            if (split.getType() == TransactionType.DEBIT)
+                imbalance = imbalance.subtract(amount);
+            else
+                imbalance = imbalance.add(amount);
+        }
+        return imbalance;
+    }
+
+    /**
+     * Computes the balance of the splits belonging to a particular account.
+     * Only those splits which belong to the account will be considered.
+     * @param accountUID Unique Identifier of the account
+     * @param splitList List of splits
+     * @return Money list of splits
+     */
+    public static Money computeBalance(String accountUID, List<Split> splitList){
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
+        AccountType accountType = accountsDbAdapter.getAccountType(accountUID);
+        String currencyCode = accountsDbAdapter.getCurrencyCode(accountUID);
+        accountsDbAdapter.close();
+
+        boolean isDebitAccount = accountType.hasDebitNormalBalance();
+        Money balance = Money.createZeroInstance(currencyCode);
+        for (Split split : splitList) {
+            if (!split.getAccountUID().equals(accountUID))
+                continue;
+            Money absAmount = split.getAmount().absolute().withCurrency(Currency.getInstance(currencyCode));
+            boolean isDebitSplit = split.getType() == TransactionType.DEBIT;
+            if (isDebitAccount) {
+                if (isDebitSplit) {
+                    balance = balance.add(absAmount);
+                } else {
+                    balance = balance.subtract(absAmount);
+                }
+            } else {
+                if (isDebitSplit) {
+                    balance = balance.subtract(absAmount);
+                } else {
+                    balance = balance.add(absAmount);
+                }
+            }
+        }
+        return balance;
+    }
+
+    /**
+     * Returns the currency code of this transaction.
+     * @return ISO 4217 currency code string
+     */
+    public String getCurrencyCode() {
+        return mCurrencyCode;
+    }
+
+    /**
+     * Sets the ISO 4217 currency code used by this transaction
+     * <p>The currency remains in the object model and is not persisted to the database
+     * Transactions always use the currency of their accounts. </p>
+     * @param currencyCode String with ISO 4217 currency code
+     */
+    public void setCurrencyCode(String currencyCode) {
+        this.mCurrencyCode = currencyCode;
+    }
+
+    /**
+     * Returns the {@link java.util.Currency} used by this transaction
+     * @return Currency of the transaction
+     * @see #getCurrencyCode()
+     */
+    public Currency getCurrency(){
+        return Currency.getInstance(this.mCurrencyCode);
+    }
+
+    /**
+	 * Returns the transaction amount for a specific account displayed by the account.
+     * <p>This is specific to accounts because the total balance of every transaction in double entry mode is zero.</p>
+	 * @return Properly formatted string amount for account
+	 */
+	public Money getFormattedAmount(String accountUID){
+        Money balance = Money.createZeroInstance(mCurrencyCode);
+        for (Split split : mSplitList) {
+            if (split.getAccountUID().equals(accountUID)){
+                balance = balance.add(split.getAmount());
+            }
+        }
+        return balance;
 	}
-	
+
 	/**
 	 * Returns the name of the transaction
 	 * @return Name of the transaction
@@ -300,7 +369,7 @@ public String getDescription() {
 	public void setTime(Date timestamp){
 		this.mTimestamp = timestamp.getTime();
 	}
-	
+
 	/**
 	 * Sets the time when the transaction occurred
 	 * @param timeInMillis Time in milliseconds
@@ -308,102 +377,77 @@ public void setTime(Date timestamp){
 	public void setTime(long timeInMillis) {
 		this.mTimestamp = timeInMillis;
 	}
-	
+
 	/**
 	 * Returns the time of transaction in milliseconds
-	 * @return Time when transaction occurred in milliseconds 
+	 * @return Time when transaction occurred in milliseconds
 	 */
 	public long getTimeMillis(){
 		return mTimestamp;
 	}
-	
-	/**
-	 * Sets the type of transaction
-	 * @param type The transaction type 
-	 * @see TransactionType 
-	 */
-	public void setTransactionType(TransactionType type){
-		this.mType = type;
-	}
-		
-	/**
-	 * Returns the type of transaction
-	 * @return Type of transaction
-	 */
-	public TransactionType getTransactionType(){
-		return this.mType;
-	}
-	
+
 	/**
-	 * Set Unique Identifier for this transaction
+	 * Set Unique Identifier for this transaction.
+     * <p>Remember that the unique ID is auto-generated when transaction is created.
+     * So this method is only for cases like building an object instance of a persisted transaction.</p>
 	 * @param transactionUID Unique ID string
+     * @see #resetUID()
 	 */
 	public void setUID(String transactionUID) {
-		this.mTransactionUID = transactionUID;
+		this.mUID = transactionUID;
 	}
 
     /**
      * Resets the UID of this transaction to a newly generated one
      */
     public void resetUID(){
-        this.mTransactionUID = UUID.randomUUID().toString();
+        this.mUID = UUID.randomUUID().toString();
     }
 	/**
 	 * Returns unique ID string for transaction
 	 * @return String with Unique ID of transaction
 	 */
 	public String getUID() {
-		return mTransactionUID;
-	}
-
-	/**
-	 * Returns the Unique Identifier of account with which this transaction is double entered
-	 * @return Unique ID of transfer account or <code>null</code> if it is not a double transaction
-	 */
-	public String getDoubleEntryAccountUID() {
-		return mDoubleEntryAccountUID;
-	}
-
-	/**
-	 * Sets the account UID with which to double enter this transaction
-	 * @param doubleEntryAccountUID Unique Identifier to set
-	 */
-	public void setDoubleEntryAccountUID(String doubleEntryAccountUID) {
-		this.mDoubleEntryAccountUID = doubleEntryAccountUID;
+		return mUID;
 	}
 
-	/**
-	 * Returns type of this transaction
-	 * @return Type of this transaction
-	 */
-	public TransactionType getType() {
-		return mType;
-	}
+    /**
+     * Returns the corresponding {@link TransactionType} given the accounttype and the effect which the transaction
+     * type should have on the account balance
+     * @param accountType Type of account
+     * @param shouldReduceBalance <code>true</code> if type should reduce balance, <code>false</code> otherwise
+     * @return TransactionType for the account
+     */
+    public static TransactionType getTypeForBalance(AccountType accountType, boolean shouldReduceBalance){
+        TransactionType type;
+        if (accountType.hasDebitNormalBalance()) {
+            type = shouldReduceBalance ? TransactionType.CREDIT : TransactionType.DEBIT;
+        } else {
+            type = shouldReduceBalance ? TransactionType.DEBIT : TransactionType.CREDIT;
+        }
+        return type;
+    }
 
-	/**
-	 * Sets the type of this transaction
-	 * @param Type of this transaction
-	 */
-	public void setType(TransactionType type) {
-		mType = type;
-	}
+    /**
+     * Returns true if the amount represents a decrease for the account balance in accounty of type <code>accountType</code>, false otherwise
+     * @return true if the amount represents a decrease movement for the account balance, false otherwise
+     * @see #getTypeForBalance(AccountType, boolean)
+     */
+    public static boolean shouldDecreaseBalance(AccountType accountType, TransactionType transactionType){
+        if (accountType.hasDebitNormalBalance()){
+            return transactionType == TransactionType.CREDIT;
+        } else
+            return transactionType == TransactionType.DEBIT;
+    }
 
 	/**
-	 * Returns UID of account to which this transaction belongs
-	 * @return the UID of the account to which this transaction belongs
-	 */
-	public String getAccountUID() {
-		return mAccountUID;
-	}
-	
-	/**
 	 * Sets the exported flag on the transaction
 	 * @param isExported <code>true</code> if the transaction has been exported, <code>false</code> otherwise
 	 */
 	public void setExported(boolean isExported){
 		mIsExported = isExported ? 1 : 0;
 	}
-	
+
 	/**
 	 * Returns <code>true</code> if the transaction has been exported, <code>false</code> otherwise
 	 * @return <code>true</code> if the transaction has been exported, <code>false</code> otherwise
@@ -411,14 +455,6 @@ public void setExported(boolean isExported){
 	public boolean isExported(){
 		return mIsExported == 1;
 	}
-	
-	/**
-	 * Set the account UID of the account to which this transaction belongs
-	 * @param accountUID the UID of the account which owns this transaction
-	 */
-	public void setAccountUID(String accountUID) {
-		this.mAccountUID = accountUID;
-	}
 
     /**
      * Returns the recurrence period for this transaction
@@ -437,101 +473,148 @@ public void setRecurrencePeriod(long recurrenceId) {
     }
 
     /**
-	 * Converts transaction to XML DOM corresponding to OFX Statement transaction and 
+	 * Converts transaction to XML DOM corresponding to OFX Statement transaction and
 	 * returns the element node for the transaction.
 	 * The Unique ID of the account is needed in order to properly export double entry transactions
-	 * @param doc XML document to which transaction should be added
-	 * @param accountUID Unique Identifier of the account which called the method.
-	 * @return Element in DOM corresponding to transaction
-	 */
-	public Element toOfx(Document doc, String accountUID){		
-		Element transactionNode = doc.createElement(OfxHelper.TAG_STATEMENT_TRANSACTION);
-		Element type = doc.createElement(OfxHelper.TAG_TRANSACTION_TYPE);
-		type.appendChild(doc.createTextNode(mType.toString()));
-		transactionNode.appendChild(type);
-
-		Element datePosted = doc.createElement(OfxHelper.TAG_DATE_POSTED);
-		datePosted.appendChild(doc.createTextNode(OfxHelper.getOfxFormattedTime(mTimestamp)));
-		transactionNode.appendChild(datePosted);
-		
-		Element dateUser = doc.createElement(OfxHelper.TAG_DATE_USER);
-		dateUser.appendChild(doc.createTextNode(
-				OfxHelper.getOfxFormattedTime(mTimestamp)));
-		transactionNode.appendChild(dateUser);
-		
-		Element amount = doc.createElement(OfxHelper.TAG_TRANSACTION_AMOUNT);
-		amount.appendChild(doc.createTextNode(mAmount.toPlainString()));
-		transactionNode.appendChild(amount);
-		
-		Element transID = doc.createElement(OfxHelper.TAG_TRANSACTION_FITID);
-		transID.appendChild(doc.createTextNode(mTransactionUID));
-		transactionNode.appendChild(transID);
-		
-		Element name = doc.createElement(OfxHelper.TAG_NAME);
-		name.appendChild(doc.createTextNode(mName));
-		transactionNode.appendChild(name);
-		
-		if (mDescription != null && mDescription.length() > 0){
-			Element memo = doc.createElement(OfxHelper.TAG_MEMO);
-			memo.appendChild(doc.createTextNode(mDescription));
-			transactionNode.appendChild(memo);
-		}
-		
-		if (mDoubleEntryAccountUID != null && mDoubleEntryAccountUID.length() > 0){
-			Element bankId = doc.createElement(OfxHelper.TAG_BANK_ID);
-			bankId.appendChild(doc.createTextNode(OfxHelper.APP_ID));
-			
-			//select the proper account as the double account
-			String doubleAccountUID = mDoubleEntryAccountUID.equals(accountUID) ? mAccountUID : mDoubleEntryAccountUID;
-			
-			Element acctId = doc.createElement(OfxHelper.TAG_ACCOUNT_ID);
-			acctId.appendChild(doc.createTextNode(doubleAccountUID));
-			
-			Element accttype = doc.createElement(OfxHelper.TAG_ACCOUNT_TYPE);
-			AccountsDbAdapter acctDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
-			OfxAccountType ofxAccountType = Account.convertToOfxAccountType(acctDbAdapter.getAccountType(doubleAccountUID));
-			accttype.appendChild(doc.createTextNode(ofxAccountType.toString()));
-			acctDbAdapter.close();
-			
-			Element bankAccountTo = doc.createElement(OfxHelper.TAG_BANK_ACCOUNT_TO);
-			bankAccountTo.appendChild(bankId);
-			bankAccountTo.appendChild(acctId);
-			bankAccountTo.appendChild(accttype);
-			
-			transactionNode.appendChild(bankAccountTo);
-		}
-		
-		return transactionNode;
+     * @param doc XML document to which transaction should be added
+     * @param accountUID Unique Identifier of the account which called the method.  @return Element in DOM corresponding to transaction
+     */
+	public Element toOFX(Document doc, String accountUID){
+        Money balance = getBalance(accountUID);
+        TransactionType transactionType = balance.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
+
+        Element transactionNode = doc.createElement(OfxHelper.TAG_STATEMENT_TRANSACTION);
+        Element typeNode = doc.createElement(OfxHelper.TAG_TRANSACTION_TYPE);
+        typeNode.appendChild(doc.createTextNode(transactionType.toString()));
+        transactionNode.appendChild(typeNode);
+
+        Element datePosted = doc.createElement(OfxHelper.TAG_DATE_POSTED);
+        datePosted.appendChild(doc.createTextNode(OfxHelper.getOfxFormattedTime(mTimestamp)));
+        transactionNode.appendChild(datePosted);
+
+        Element dateUser = doc.createElement(OfxHelper.TAG_DATE_USER);
+        dateUser.appendChild(doc.createTextNode(
+                OfxHelper.getOfxFormattedTime(mTimestamp)));
+        transactionNode.appendChild(dateUser);
+
+        Element amount = doc.createElement(OfxHelper.TAG_TRANSACTION_AMOUNT);
+        amount.appendChild(doc.createTextNode(balance.toPlainString()));
+        transactionNode.appendChild(amount);
+
+        Element transID = doc.createElement(OfxHelper.TAG_TRANSACTION_FITID);
+        transID.appendChild(doc.createTextNode(mUID));
+        transactionNode.appendChild(transID);
+
+        Element name = doc.createElement(OfxHelper.TAG_NAME);
+        name.appendChild(doc.createTextNode(mName));
+        transactionNode.appendChild(name);
+
+        if (mDescription != null && mDescription.length() > 0){
+            Element memo = doc.createElement(OfxHelper.TAG_MEMO);
+            memo.appendChild(doc.createTextNode(mDescription));
+            transactionNode.appendChild(memo);
+        }
+
+        if (mSplitList.size() == 2){ //if we have exactly one other split, then treat it like a transfer
+            String transferAccountUID = accountUID;
+            for (Split split : mSplitList) {
+                if (!split.getAccountUID().equals(accountUID)){
+                    transferAccountUID = split.getAccountUID();
+                    break;
+                }
+            }
+            Element bankId = doc.createElement(OfxHelper.TAG_BANK_ID);
+            bankId.appendChild(doc.createTextNode(OfxHelper.APP_ID));
+
+            Element acctId = doc.createElement(OfxHelper.TAG_ACCOUNT_ID);
+            acctId.appendChild(doc.createTextNode(transferAccountUID));
+
+            Element accttype = doc.createElement(OfxHelper.TAG_ACCOUNT_TYPE);
+            AccountsDbAdapter acctDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
+            OfxAccountType ofxAccountType = Account.convertToOfxAccountType(acctDbAdapter.getAccountType(transferAccountUID));
+            accttype.appendChild(doc.createTextNode(ofxAccountType.toString()));
+            acctDbAdapter.close();
+
+            Element bankAccountTo = doc.createElement(OfxHelper.TAG_BANK_ACCOUNT_TO);
+            bankAccountTo.appendChild(bankId);
+            bankAccountTo.appendChild(acctId);
+            bankAccountTo.appendChild(accttype);
+
+            transactionNode.appendChild(bankAccountTo);
+        }
+
+        return transactionNode;
 	}
 
     /**
      * Builds a QIF entry representing this transaction
      * @return String QIF representation of this transaction
      */
-    public String toQIF(){
+    public String toQIF(String accountUID){
         final String newLine = "\n";
-
         AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
-
         //all transactions are double transactions
-        String splitAccountFullName = QifHelper.getImbalanceAccountName(mAmount.getCurrency());
-        if (mDoubleEntryAccountUID != null && mDoubleEntryAccountUID.length() > 0){
-            splitAccountFullName = accountsDbAdapter.getFullyQualifiedAccountName(mDoubleEntryAccountUID);
-        }
+        String imbalanceAccountName = AccountsDbAdapter.getImbalanceAccountName(Currency.getInstance(mCurrencyCode));
 
-        StringBuilder transactionQifBuffer = new StringBuilder();
-        transactionQifBuffer.append(QifHelper.DATE_PREFIX).append(QifHelper.formatDate(mTimestamp)).append(newLine);
-        transactionQifBuffer.append(QifHelper.MEMO_PREFIX).append(mName).append(newLine);
+        StringBuilder transactionQIFBuilder = new StringBuilder();
 
-        transactionQifBuffer.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(splitAccountFullName).append(newLine);
-        if (mDescription != null && mDescription.length() > 0){
-            transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX).append(mDescription).append(newLine);
+        transactionQIFBuilder.append(QifHelper.DATE_PREFIX).append(QifHelper.formatDate(mTimestamp)).append(newLine);
+        transactionQIFBuilder.append(QifHelper.MEMO_PREFIX).append(mName).append(newLine);
+
+        List<String> processedSplitUIDs = new ArrayList<String>();
+        final List<Split> splitList = getSplits();
+        if (splitList.size() > 2){
+            for (Split split : splitList) {
+                if (split.getAccountUID().equals(accountUID)){
+                    Money amount = split.getAmount();
+
+                    if (split.getType() == TransactionType.CREDIT)
+                        amount = amount.negate();
+
+                    transactionQIFBuilder.append(QifHelper.AMOUNT_PREFIX).append(amount.toPlainString())
+                            .append(newLine);
+                    processedSplitUIDs.add(split.getUID());
+                    break;
+                }
+            }
         }
-        transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(mAmount.asString()).append(newLine);
-        transactionQifBuffer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
+        for (Split split : splitList) {
+            if (split.getAccountUID().equals(accountUID) || processedSplitUIDs.contains(split.getUID()))
+                continue;
+
+            String splitAccountName = accountsDbAdapter.getFullyQualifiedAccountName(split.getAccountUID());
+            transactionQIFBuilder.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(splitAccountName).append(newLine);
+
+            String memo = split.getMemo();
+            if (memo != null && memo.length() > 0) {
+                transactionQIFBuilder.append(QifHelper.SPLIT_MEMO_PREFIX).append(memo).append(newLine);
+            }
+            Money amount = split.getAmount();
+            if (split.getAccountUID().equals(accountUID)) {
+                if (split.getType() == TransactionType.CREDIT)
+                    amount = amount.negate();
+            } else {
+                if (split.getType() == TransactionType.DEBIT)
+                    amount = amount.negate();
+            }
+            transactionQIFBuilder.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(amount.asString()).append(newLine);
+        }
+        Money imbalanceAmount = getImbalance();
+        if (imbalanceAmount.asBigDecimal().compareTo(new BigDecimal(0)) != 0){
+            AccountType accountType = accountsDbAdapter.getAccountType(accountUID);
+            TransactionType imbalanceType = Transaction.getTypeForBalance(accountType,imbalanceAmount.isNegative());
+            imbalanceAmount = imbalanceAmount.absolute();
+            if (imbalanceType == TransactionType.DEBIT){
+                imbalanceAmount = imbalanceAmount.negate();
+            }
+            transactionQIFBuilder.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(imbalanceAccountName).append(newLine);
+            transactionQIFBuilder.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(imbalanceAmount.asString()).append(newLine);
+        }
+
+        transactionQIFBuilder.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
 
         accountsDbAdapter.close();
-        return transactionQifBuffer.toString();
+        return transactionQIFBuilder.toString();
     }
 
     /**
@@ -545,12 +628,66 @@ public static Intent createIntent(Transaction transaction){
         intent.setType(Transaction.MIME_TYPE);
         intent.putExtra(Intent.EXTRA_TITLE, transaction.getName());
         intent.putExtra(Intent.EXTRA_TEXT, transaction.getDescription());
-        intent.putExtra(EXTRA_AMOUNT, transaction.getAmount().asBigDecimal());
-        intent.putExtra(EXTRA_ACCOUNT_UID, transaction.getAccountUID());
-        intent.putExtra(EXTRA_DOUBLE_ACCOUNT_UID, transaction.getDoubleEntryAccountUID());
-        intent.putExtra(Account.EXTRA_CURRENCY_CODE, transaction.getAmount().getCurrency().getCurrencyCode());
-        intent.putExtra(EXTRA_TRANSACTION_TYPE, transaction.getTransactionType().name());
+        intent.putExtra(Account.EXTRA_CURRENCY_CODE, transaction.getCurrencyCode());
+        StringBuilder stringBuilder = new StringBuilder();
+        for (Split split : transaction.getSplits()) {
+            stringBuilder.append(split.toCsv()).append("\n");
+        }
+        intent.putExtra(Transaction.EXTRA_SPLITS, stringBuilder.toString());
         return intent;
     }
 
+    public void toGncXml(Document doc, Element rootElement) {
+        Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
+        idNode.setAttribute("type", "guid");
+        idNode.appendChild(doc.createTextNode(mUID));
+
+        Element currencyNode = doc.createElement(GncXmlHelper.TAG_TRX_CURRENCY);
+        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
+        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
+        currencyNode.appendChild(cmdtySpacenode);
+        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
+        cmdtyIdNode.appendChild(doc.createTextNode(mCurrencyCode));
+        currencyNode.appendChild(cmdtyIdNode);
+
+        Element datePostedNode = doc.createElement(GncXmlHelper.TAG_DATE_POSTED);
+        Element datePNode = doc.createElement(GncXmlHelper.TAG_DATE);
+        datePNode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
+        datePostedNode.appendChild(datePNode);
+
+        Element dateEneteredNode = doc.createElement(GncXmlHelper.TAG_DATE_ENTERED);
+        Element dateENode = doc.createElement(GncXmlHelper.TAG_DATE);
+        dateENode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
+        dateEneteredNode.appendChild(dateENode);
+
+        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRX_DESCRIPTION);
+        if (mName != null) {
+            descriptionNode.appendChild(doc.createTextNode(mName));
+        }
+
+        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRX_SPLITS);
+        for (Split split : mSplitList) {
+            if (split.getMemo() == null || split.getMemo().trim().length() == 0) {
+                split.setMemo(mDescription);
+            }
+            split.toGncXml(doc, trnSplits);
+        }
+
+        Element transactionNode = doc.createElement(GncXmlHelper.TAG_TRANSACTION);
+        transactionNode.setAttribute("version", GncXmlHelper.BOOK_VERSION);
+        transactionNode.appendChild(idNode);
+        transactionNode.appendChild(currencyNode);
+        transactionNode.appendChild(datePostedNode);
+        transactionNode.appendChild(dateEneteredNode);
+        transactionNode.appendChild(descriptionNode);
+        //TODO: Improve xml compatibilty with desktop for scheduled actions
+        if (mRecurrencePeriod != 0) {
+            Element recurrenceNode = doc.createElement(GncXmlHelper.TAG_RECURRENCE_PERIOD);
+            recurrenceNode.appendChild(doc.createTextNode(String.valueOf(mRecurrencePeriod)));
+            transactionNode.appendChild(recurrenceNode);
+        }
+        transactionNode.appendChild(trnSplits);
+
+        rootElement.appendChild(transactionNode);
+    }
 }
diff --git a/app/src/org/gnucash/android/model/TransactionType.java b/app/src/org/gnucash/android/model/TransactionType.java
new file mode 100644
index 00000000..14f4cd97
--- /dev/null
+++ b/app/src/org/gnucash/android/model/TransactionType.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.model;
+
+/**
+ * Type of transaction, a credit or a debit
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Jesse Shieh <jesse.shieh.pub@gmail.com>
+ */
+public enum TransactionType {
+    DEBIT, CREDIT;
+
+    private TransactionType opposite;
+
+    static {
+        DEBIT.opposite = CREDIT;
+        CREDIT.opposite = DEBIT;
+    }
+
+    public TransactionType invert() {
+        return opposite;
+    }
+}
+
diff --git a/app/src/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/org/gnucash/android/receivers/TransactionRecorder.java
index 5ecf8732..a5e21f9a 100644
--- a/app/src/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/org/gnucash/android/receivers/TransactionRecorder.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,69 +16,87 @@
 
 package org.gnucash.android.receivers;
 
-import java.math.BigDecimal;
-import java.util.Currency;
-
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.model.Transaction;
-import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.export.qif.QifHelper;
-import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
-
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
+import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.model.*;
+import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.StringReader;
+import java.math.BigDecimal;
+import java.util.Currency;
 
 /**
  * Broadcast receiver responsible for creating transactions received through {@link Intent}s
  * In order to create a transaction through Intents, broadcast an intent with the arguments needed to 
  * create the transaction. Transactions are strongly bound to {@link Account}s and it is recommended to 
- * create an Account for your transactions. The transactions will be associated to the account using a unique
- * Identifier passed as {@link Transaction#EXTRA_ACCOUNT_UID}
+ * create an Account for your transaction splits.
  * <p>Remember to declare the appropriate permissions in order to create transactions with Intents. 
  * The required permission is "org.gnucash.android.permission.RECORD_TRANSACTION"</p>
  * @author Ngewi Fet <ngewif@gmail.com>
  * @see AccountCreator
+ * @see org.gnucash.android.model.Transaction#createIntent(org.gnucash.android.model.Transaction)
  */
 public class TransactionRecorder extends BroadcastReceiver {
 
 	@Override
 	public void onReceive(Context context, Intent intent) {
-		Log.i("TransactionRecorder", "Received transaction recording intent");
+		Log.i(this.getClass().getName(), "Received transaction recording intent");
 		Bundle args = intent.getExtras();
 		String name = args.getString(Intent.EXTRA_TITLE);
 		String note = args.getString(Intent.EXTRA_TEXT);
-		BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
+
 		String currencyCode = args.getString(Account.EXTRA_CURRENCY_CODE);
 		if (currencyCode == null)
 			currencyCode = Money.DEFAULT_CURRENCY_CODE;
-		
+
+        Transaction transaction = new Transaction(name);
+        transaction.setTime(System.currentTimeMillis());
+        transaction.setDescription(note);
+        transaction.setCurrencyCode(currencyCode);
+
+        //Parse deprecated args for compatibility. Transactions were bound to accounts, now only splits are
 		String accountUID = args.getString(Transaction.EXTRA_ACCOUNT_UID);
-		if (accountUID == null) //if no account was assigned, throw an exception
-			throw new IllegalArgumentException("No account specified for the transaction");
-		
-		String doubleAccountUID = args.getString(Transaction.EXTRA_DOUBLE_ACCOUNT_UID);
-        if (doubleAccountUID == null || doubleAccountUID.length() == 0)
-            doubleAccountUID = QifHelper.getImbalanceAccountName(Currency.getInstance(Money.DEFAULT_CURRENCY_CODE));
-		Transaction.TransactionType type = Transaction.TransactionType.valueOf(args.getString(Transaction.EXTRA_TRANSACTION_TYPE));
+        if (accountUID != null) {
+            TransactionType type = TransactionType.valueOf(args.getString(Transaction.EXTRA_TRANSACTION_TYPE));
+            BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
+            Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
+            Split split = new Split(amount.absolute(), accountUID);
+            split.setType(type);
+            transaction.addSplit(split);
+
+            String transferAccountUID = args.getString(Transaction.EXTRA_DOUBLE_ACCOUNT_UID);
+            if (transferAccountUID != null) {
+                transaction.addSplit(split.createPair(transferAccountUID));
+            }
+        }
 
-		Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
-		Transaction transaction = new Transaction(amount, name);
-		transaction.setTime(System.currentTimeMillis());
-		transaction.setDescription(note);	
-		transaction.setAccountUID(accountUID);
-		transaction.setDoubleEntryAccountUID(doubleAccountUID);
-		transaction.setTransactionType(type);
+        String splits = args.getString(Transaction.EXTRA_SPLITS);
+        if (splits != null) {
+            StringReader stringReader = new StringReader(splits);
+            BufferedReader bufferedReader = new BufferedReader(stringReader);
+            String line = null;
+            try {
+                while ((line = bufferedReader.readLine()) != null){
+                    Split split = Split.parseSplit(line);
+                    transaction.addSplit(split);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
 
-		TransactionsDbAdapter transacionsDbAdapter = new TransactionsDbAdapter(context);
-		transacionsDbAdapter.addTransaction(transaction);
+		TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(context);
+		transactionsDbAdapter.addTransaction(transaction);
 		
 		WidgetConfigurationActivity.updateAllWidgets(context);
 
-		transacionsDbAdapter.close();
+		transactionsDbAdapter.close();
 	}
 
 }
diff --git a/app/src/org/gnucash/android/ui/UxArgument.java b/app/src/org/gnucash/android/ui/UxArgument.java
index 049c945a..8d97baf3 100644
--- a/app/src/org/gnucash/android/ui/UxArgument.java
+++ b/app/src/org/gnucash/android/ui/UxArgument.java
@@ -48,6 +48,11 @@
      */
     public static final String PARENT_ACCOUNT_ID        = "parent_account_id";
 
+    /**
+     * Amount passed as a string
+     */
+    public static final String AMOUNT_STRING = "starting_amount";
+
     //prevent initialization of instances of this class
     private UxArgument(){
         //prevent even the native class from calling the ctor
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index ea2accc9..8d4e9dfe 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -41,7 +41,9 @@
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.colorpicker.ColorPickerDialog;
@@ -134,7 +136,7 @@
 
     /**
      * Spinner for the account type
-     * @see org.gnucash.android.model.Account.AccountType
+     * @see org.gnucash.android.model.AccountType
      */
     private Spinner mAccountTypeSpinner;
 
@@ -350,7 +352,7 @@ private void initializeViews(){
 
 
         if (mParentAccountId > 0) {
-            Account.AccountType parentAccountType = mAccountsDbAdapter.getAccountType(mParentAccountId);
+            AccountType parentAccountType = mAccountsDbAdapter.getAccountType(mParentAccountId);
             setAccountTypeSelection(parentAccountType);
             loadParentAccountList(parentAccountType);
             setParentAccountSelection(mParentAccountId);
@@ -380,7 +382,7 @@ private void initializeColorSquarePreview(String colorHex){
      * Selects the corresponding account type in the spinner
      * @param accountType AccountType to be set
      */
-    private void setAccountTypeSelection(Account.AccountType accountType){
+    private void setAccountTypeSelection(AccountType accountType){
         String[] accountTypeEntries = getResources().getStringArray(R.array.account_type_entries);
         int accountTypeIndex = Arrays.asList(accountTypeEntries).indexOf(accountType.name());
         mAccountTypeSpinner.setSelection(accountTypeIndex);
@@ -514,9 +516,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
      * Initializes the default transfer account spinner with eligible accounts
      */
     private void loadDefaultTransferAccountList(){
-        String condition = DatabaseHelper.KEY_ROW_ID + " != " + mSelectedAccountId
-                + " AND " + DatabaseHelper.KEY_PLACEHOLDER + "=0"
-                + " AND " + DatabaseHelper.KEY_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID() + "'";
+        String condition = DatabaseSchema.AccountEntry._ID + " != " + mSelectedAccountId
+                + " AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + "=0"
+                + " AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID() + "'";
         /*
       Cursor holding data set of eligible transfer accounts
      */
@@ -538,15 +540,15 @@ private void loadDefaultTransferAccountList(){
      * The allowed parent accounts depends on the account type
      * @param accountType AccountType of account whose allowed parent list is to be loaded
      */
-	private void loadParentAccountList(Account.AccountType accountType){
-        String condition = DatabaseHelper.KEY_TYPE + " IN ("
+	private void loadParentAccountList(AccountType accountType){
+        String condition = DatabaseSchema.SplitEntry.COLUMN_TYPE + " IN ("
                 + getAllowedParentAccountTypes(accountType) + ") ";
 
         if (mAccount != null){  //if editing an account
             // limit cyclic account hierarchies. Still technically possible since we don't forbid descendant accounts
-            condition += " AND (" + DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " IS NULL "
-                    + " OR " + DatabaseHelper.KEY_PARENT_ACCOUNT_UID + " != '" + mAccount.getUID() + "')"
-                    + " AND " + DatabaseHelper.KEY_ROW_ID + " != " + mSelectedAccountId;
+            condition += " AND (" + DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL "
+                    + " OR " + DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " != '" + mAccount.getUID() + "')"
+                    + " AND " + DatabaseSchema.AccountEntry._ID + " != " + mSelectedAccountId;
 
             //TODO: Limit all descendants of the account to eliminate the possibility of cyclic hierarchy
         }
@@ -572,20 +574,20 @@ private void loadParentAccountList(Account.AccountType accountType){
 
     /**
      * Returns a comma separated list of account types which can be parent accounts for the specified <code>type</code>.
-     * The strings in the list are the {@link org.gnucash.android.model.Account.AccountType#name()}s of the different types.
-     * @param type {@link org.gnucash.android.model.Account.AccountType}
+     * The strings in the list are the {@link org.gnucash.android.model.AccountType#name()}s of the different types.
+     * @param type {@link org.gnucash.android.model.AccountType}
      * @return String comma separated list of account types
      */
-    private String getAllowedParentAccountTypes(Account.AccountType type){
+    private String getAllowedParentAccountTypes(AccountType type){
 
         switch (type){
             case EQUITY:
-                return "'" + Account.AccountType.EQUITY.name() + "'";
+                return "'" + AccountType.EQUITY.name() + "'";
 
             case INCOME:
             case EXPENSE:
-                return "'" + Account.AccountType.EXPENSE + "', '" + Account.AccountType.INCOME + "', '"
-                        + Account.AccountType.ROOT + "'";
+                return "'" + AccountType.EXPENSE + "', '" + AccountType.INCOME + "', '"
+                        + AccountType.ROOT + "'";
 
             case CASH:
             case BANK:
@@ -599,9 +601,9 @@ private String getAllowedParentAccountTypes(Account.AccountType type){
             case MUTUAL: {
                 List<String> accountTypeStrings = getAccountTypeStringList();
 
-                accountTypeStrings.remove(Account.AccountType.EQUITY.name());
-                accountTypeStrings.remove(Account.AccountType.EXPENSE.name());
-                accountTypeStrings.remove(Account.AccountType.INCOME.name());
+                accountTypeStrings.remove(AccountType.EQUITY.name());
+                accountTypeStrings.remove(AccountType.EXPENSE.name());
+                accountTypeStrings.remove(AccountType.INCOME.name());
 
                 String result = "";
                 for (String accountTypeString : accountTypeStrings) {
@@ -615,16 +617,16 @@ private String getAllowedParentAccountTypes(Account.AccountType type){
 
             case ROOT:
             default:
-                return Arrays.toString(Account.AccountType.values()).replaceAll("\\[|]", "");
+                return Arrays.toString(AccountType.values()).replaceAll("\\[|]", "");
         }
     }
 
     /**
-     * Returns a list of all the available {@link org.gnucash.android.model.Account.AccountType}s as strings
+     * Returns a list of all the available {@link org.gnucash.android.model.AccountType}s as strings
      * @return String list of all account types
      */
     private List<String> getAccountTypeStringList(){
-        String[] accountTypes = Arrays.toString(Account.AccountType.values()).replaceAll("\\[|]", "").split(",");
+        String[] accountTypes = Arrays.toString(AccountType.values()).replaceAll("\\[|]", "").split(",");
         List<String> accountTypesList = new ArrayList<String>();
         for (String accountType : accountTypes) {
             accountTypesList.add(accountType.trim());
@@ -696,7 +698,7 @@ private void saveAccount() {
 				.getSelectedItemPosition());
 		mAccount.setCurrency(Currency.getInstance(curCode));
 
-        Account.AccountType selectedAccountType = getSelectedAccountType();
+        AccountType selectedAccountType = getSelectedAccountType();
         mAccount.setAccountType(selectedAccountType);
 
         mAccount.setPlaceHolderFlag(mPlaceholderCheckBox.isChecked());
@@ -727,12 +729,12 @@ private void saveAccount() {
 
     /**
      * Returns the currently selected account type in the spinner
-     * @return {@link org.gnucash.android.model.Account.AccountType} currently selected
+     * @return {@link org.gnucash.android.model.AccountType} currently selected
      */
-    private Account.AccountType getSelectedAccountType() {
+    private AccountType getSelectedAccountType() {
         int selectedAccountTypeIndex = mAccountTypeSpinner.getSelectedItemPosition();
         String[] accountTypeEntries = getResources().getStringArray(R.array.account_type_entries);
-        return Account.AccountType.valueOf(accountTypeEntries[selectedAccountTypeIndex]);
+        return AccountType.valueOf(accountTypeEntries[selectedAccountTypeIndex]);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index 09cdf12c..79d49a66 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -17,7 +17,6 @@
 package org.gnucash.android.ui.account;
 
 import android.app.AlertDialog;
-import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -26,7 +25,6 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.res.Resources;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.app.Fragment;
@@ -37,31 +35,27 @@
 import android.support.v4.view.ViewPager;
 import android.util.Log;
 import android.util.SparseArray;
-import android.util.SparseIntArray;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Toast;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
+import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transaction.ScheduledTransactionsListFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
-import org.gnucash.android.util.GnucashAccountXmlHandler;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 
 import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.util.Currency;
-import java.util.HashMap;
 import java.util.Locale;
-import java.util.Map;
 
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
@@ -459,7 +453,7 @@ private void createDefaultAccounts(){
 			@Override
 			public void onClick(DialogInterface dialog, int which) {
                 InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                new AccountsActivity.AccountImporterTask(AccountsActivity.this).execute(accountFileInputStream);
+                new GncXmlImportTask(AccountsActivity.this).execute(accountFileInputStream);
                 removeFirstRunFlag();
 			}
 		});
@@ -509,7 +503,7 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
             case REQUEST_PICK_ACCOUNTS_FILE:
                 try {
                     InputStream accountInputStream = getContentResolver().openInputStream(data.getData());
-                    new AccountImporterTask(this).execute(accountInputStream);
+                    new GncXmlImportTask(this).execute(accountInputStream);
                 } catch (FileNotFoundException e) {
                     e.printStackTrace();
                 }
@@ -547,47 +541,4 @@ private void removeFirstRunFlag(){
 		editor.commit();
 	}
 
-    /**
-     * Imports a GnuCash (desktop) account file and displays a progress dialog.
-     * The AccountsActivity is opened when importing is done.
-     */
-    public static class AccountImporterTask extends AsyncTask<InputStream, Void, Boolean>{
-        private final Context context;
-        private ProgressDialog progressDialog;
-
-        public AccountImporterTask(Context context){
-            this.context = context;
-        }
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            progressDialog = new ProgressDialog(context);
-            progressDialog.setTitle(R.string.title_progress_importing_accounts);
-            progressDialog.setIndeterminate(true);
-            progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
-            progressDialog.show();
-        }
-
-        @Override
-        protected Boolean doInBackground(InputStream... inputStreams) {
-            try {
-                GnucashAccountXmlHandler.parse(context, inputStreams[0]);
-            } catch (Exception exception){
-                exception.printStackTrace();
-                return false;
-            }
-            return true;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean importSuccess) {
-            progressDialog.dismiss();
-
-            int message = importSuccess ? R.string.toast_success_importing_accounts : R.string.toast_error_importing_accounts;
-            Toast.makeText(context, message, Toast.LENGTH_LONG).show();
-
-            AccountsActivity.start(context);
-        }
-    }
 }
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
index 2e6fd37a..f14876b1 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -26,7 +26,6 @@
 import android.database.Cursor;
 import android.graphics.Color;
 import android.graphics.Rect;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
@@ -53,17 +52,15 @@
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
 import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Money;
 import org.gnucash.android.db.*;
 import org.gnucash.android.export.ExportDialogFragment;
+import org.gnucash.android.ui.util.AccountBalanceTask;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 
-import java.lang.ref.WeakReference;
-
 /**
  * Fragment for displaying the list of accounts in the database
  *
@@ -213,7 +210,7 @@ public void onCreate(Bundle savedInstanceState) {
         mAccountsCursorAdapter = new AccountsCursorAdapter(
                 getActivity().getApplicationContext(),
                 R.layout.list_item_account, null,
-                new String[]{DatabaseHelper.KEY_NAME},
+                new String[]{DatabaseSchema.AccountEntry.COLUMN_NAME},
                 new int[]{R.id.primary_text});
 
         setListAdapter(mAccountsCursorAdapter);
@@ -634,7 +631,7 @@ public Cursor loadInBackground() {
 
             if (mFilter != null){
                 cursor = ((AccountsDbAdapter)mDatabaseAdapter)
-                        .fetchAccounts(DatabaseHelper.KEY_NAME + " LIKE '%" + mFilter + "%'");
+                        .fetchAccounts(DatabaseSchema.AccountEntry.COLUMN_NAME + " LIKE '%" + mFilter + "%'");
             } else {
                 if (mParentAccountId > 0)
                     cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchSubAccounts(mParentAccountId);
@@ -685,7 +682,7 @@ public void bindView(View v, Context context, Cursor cursor) {
             // perform the default binding
             super.bindView(v, context, cursor);
 
-            final long accountId = cursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+            final long accountId = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
 
             TextView subAccountTextView = (TextView) v.findViewById(R.id.secondary_text);
             int subAccountCount = mAccountsDbAdapter.getSubAccountCount(accountId);
@@ -702,7 +699,7 @@ public void bindView(View v, Context context, Cursor cursor) {
             new AccountBalanceTask(accountBalanceTextView, getActivity()).execute(accountId);
 
             View colorStripView = v.findViewById(R.id.account_color_strip);
-            String accountColor = cursor.getString(DatabaseAdapter.COLUMN_COLOR_CODE);
+            String accountColor = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_COLOR_CODE));
             if (accountColor != null){
                 int color = Color.parseColor(accountColor);
                 colorStripView.setBackgroundColor(color);
@@ -769,53 +766,4 @@ public void run() {
         }
     }
 
-    /**
-     * An asynchronous task for computing the account balance of an account.
-     * This is done asynchronously because in cases of deeply nested accounts,
-     * it can take some time and would block the UI thread otherwise.
-     */
-    public static class AccountBalanceTask extends AsyncTask<Long, Void, Money> {
-        private final WeakReference<TextView> accountBalanceTextViewReference;
-        private final AccountsDbAdapter accountsDbAdapter;
-
-        public AccountBalanceTask(TextView balanceTextView, Context context){
-            accountBalanceTextViewReference = new WeakReference<TextView>(balanceTextView);
-            accountsDbAdapter = new AccountsDbAdapter(context);
-        }
-
-        @Override
-        protected Money doInBackground(Long... params) {
-            //if the view for which we are doing this job is dead, kill the job as well
-            if (accountBalanceTextViewReference == null || accountBalanceTextViewReference.get() == null){
-                cancel(true);
-                return Money.getZeroInstance();
-            }
-            Money balance = Money.getZeroInstance();
-
-            try {
-                balance = accountsDbAdapter.getAccountBalance(params[0]);
-            } catch (IllegalArgumentException ex){
-                //sometimes a load computation has been started and the data set changes.
-                //the account ID may no longer exist. So we catch that exception here and do nothing
-                Log.e(TAG, "Error computing account balance: " + ex);
-            }
-            return balance;
-        }
-
-        @Override
-        protected void onPostExecute(Money balance) {
-            if (accountBalanceTextViewReference != null && balance != null){
-                final Context context = accountsDbAdapter.getContext();
-                final TextView balanceTextView = accountBalanceTextViewReference.get();
-                if (balanceTextView != null){
-                    balanceTextView.setText(balance.formattedString());
-                    int fontColor = balance.isNegative() ? context.getResources().getColor(R.color.debit_red) :
-                            context.getResources().getColor(R.color.credit_green);
-                    balanceTextView.setTextColor(fontColor);
-                }
-            }
-            accountsDbAdapter.close();
-        }
-    }
-
 }
diff --git a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
index 2ceb09cf..cd70b5e8 100644
--- a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
@@ -26,8 +26,8 @@
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import org.gnucash.android.R;
+import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.ui.account.AccountsActivity;
 
 import java.io.InputStream;
 
@@ -81,7 +81,7 @@ public boolean onPreferenceClick(Preference preference) {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
                                 InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                                new AccountsActivity.AccountImporterTask(getActivity()).execute(accountFileInputStream);
+                                new GncXmlImportTask(getActivity()).execute(accountFileInputStream);
                             }
                         })
                         .setNegativeButton(R.string.btn_cancel, new DialogInterface.OnClickListener() {
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 08f084c2..e9e974b6 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -32,6 +32,7 @@
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
+import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
@@ -260,7 +261,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
             case AccountsActivity.REQUEST_PICK_ACCOUNTS_FILE:
                 try {
                     InputStream accountInputStream = getContentResolver().openInputStream(data.getData());
-                    new AccountsActivity.AccountImporterTask(this).execute(accountInputStream);
+                    new GncXmlImportTask(this).execute(accountInputStream);
                 } catch (FileNotFoundException e) {
                     e.printStackTrace();
                     Toast.makeText(this, R.string.toast_error_importing_accounts, Toast.LENGTH_SHORT).show();
diff --git a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index f863eec1..ecdf0c89 100644
--- a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -46,8 +46,6 @@
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
-import java.util.Locale;
-
 /**
  * Fragment which displays the recurring transactions in the system.
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -133,9 +131,9 @@ public void onCreate(Bundle savedInstanceState) {
         mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
         mCursorAdapter = new TransactionsCursorAdapter(
                 getActivity().getApplicationContext(),
-                R.layout.list_item_transaction, null,
-                new String[] {DatabaseHelper.KEY_NAME, DatabaseHelper.KEY_AMOUNT},
-                new int[] {R.id.primary_text, R.id.transaction_amount});
+                R.layout.list_item_scheduled_trxn, null,
+                new String[] {DatabaseSchema.TransactionEntry.COLUMN_NAME},
+                new int[] {R.id.primary_text});
         setListAdapter(mCursorAdapter);
     }
 
@@ -186,8 +184,7 @@ public void onListItemClick(ListView l, View v, int position, long id) {
             checkbox.setChecked(!checkbox.isChecked());
             return;
         }
-        //else
-        String accountUID = mTransactionsDbAdapter.getAccountUidFromTransaction(id);
+        String accountUID = mTransactionsDbAdapter.getTransaction(id).getSplits().get(0).getAccountUID();
         long accountID = mTransactionsDbAdapter.getAccountID(accountUID);
 
         openTransactionForEdit(accountID, id);
@@ -390,48 +387,15 @@ public String getRecurrenceAsString(long periodMillis){
         @Override
         public void bindView(View view, Context context, Cursor cursor) {
             super.bindView(view, context, cursor);
-            AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
-            long accountID = accountsDbAdapter.getAccountID(cursor.getString(DatabaseAdapter.COLUMN_ACCOUNT_UID));
-
-            Money amount = new Money(
-                    cursor.getString(DatabaseAdapter.COLUMN_AMOUNT),
-                    mTransactionsDbAdapter.getCurrencyCode(accountID));
-
-            TextView tramount = (TextView) view.findViewById(R.id.transaction_amount);
-            tramount.setText(amount.formattedString(Locale.getDefault()));
 
-            if (amount.isNegative())
-                tramount.setTextColor(getResources().getColor(R.color.debit_red));
-            else
-                tramount.setTextColor(getResources().getColor(R.color.credit_green));
+            Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(cursor);
+            TextView amountTextView = (TextView) view.findViewById(R.id.transaction_amount);
+            amountTextView.setText(transaction.getSplits().size() + " splits");
 
             TextView trNote = (TextView) view.findViewById(R.id.secondary_text);
-            trNote.setText("Repeats  " + getRecurrenceAsString(cursor.getLong(DatabaseAdapter.COLUMN_RECURRENCE_PERIOD))) ;
-
-            String currentAccountUid = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_ACCOUNT_UID));
-            int position = cursor.getPosition();
-            boolean hasSectionHeader;
-
-            if (position == 0){
-                hasSectionHeader = true;
-            } else {
-                cursor.moveToPosition(position - 1);
-                String previousAccountUid = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_ACCOUNT_UID));
-                cursor.moveToPosition(position);
-
-                hasSectionHeader = !previousAccountUid.equals(currentAccountUid);
-            }
-
-            TextView dateHeader = (TextView) view.findViewById(R.id.date_section_header);
-
-            if (hasSectionHeader){
-                dateHeader.setText(accountsDbAdapter.getFullyQualifiedAccountName(currentAccountUid));
-                dateHeader.setVisibility(View.VISIBLE);
-            } else {
-                dateHeader.setVisibility(View.GONE);
-            }
+            trNote.setText(context.getString(R.string.label_repeats) + " " +
+                    getRecurrenceAsString(cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_RECURRENCE_PERIOD)))) ;
 
-            accountsDbAdapter.close();
         }
 
     }
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index f777bba6..7f653677 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -19,25 +19,22 @@
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 import java.text.DateFormat;
-import java.text.DecimalFormat;
-import java.text.NumberFormat;
 import java.text.ParseException;
 import java.util.*;
 
 import android.app.AlarmManager;
 import android.app.PendingIntent;
+import android.support.v4.app.FragmentManager;
 import android.widget.*;
 import org.gnucash.android.R;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.model.Transaction;
-import org.gnucash.android.model.Transaction.TransactionType;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
-import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.db.*;
+import org.gnucash.android.model.*;
 import org.gnucash.android.ui.transaction.dialog.DatePickerDialogFragment;
+import org.gnucash.android.ui.transaction.dialog.SplitEditorDialogFragment;
 import org.gnucash.android.ui.transaction.dialog.TimePickerDialogFragment;
 import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.util.AmountInputFormatter;
+import org.gnucash.android.ui.util.TransactionTypeToggleButton;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 import android.app.DatePickerDialog;
@@ -52,8 +49,6 @@
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.widget.SimpleCursorAdapter;
-import android.text.Editable;
-import android.text.TextWatcher;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -74,22 +69,23 @@
  */
 public class TransactionFormFragment extends SherlockFragment implements
 	OnDateSetListener, OnTimeSetListener {
-	
-	/**
+
+    public static final String TAG_SPLITS_EDITOR_FRAGMENT = "splits_editor";
+    /**
 	 * Transactions database adapter
 	 */
 	private TransactionsDbAdapter mTransactionsDbAdapter;
-	
+
 	/**
 	 * Accounts database adapter
 	 */
-	private AccountsDbAdapter mAccountsDbAdapter; 
-	
+	private AccountsDbAdapter mAccountsDbAdapter;
+
 	/**
 	 * Adapter for transfer account spinner
 	 */
 	private SimpleCursorAdapter mCursorAdapter;
-	
+
 	/**
 	 * Cursor for transfer account spinner
 	 */
@@ -104,53 +100,53 @@
 	 * Formats a {@link Date} object into a date string of the format dd MMM yyyy e.g. 18 July 2012
 	 */
 	public final static DateFormat DATE_FORMATTER = DateFormat.getDateInstance();
-	
+
 	/**
 	 * Formats a {@link Date} object to time string of format HH:mm e.g. 15:25
 	 */
 	public final static DateFormat TIME_FORMATTER = DateFormat.getTimeInstance();
-	
+
 	/**
 	 * Button for setting the transaction type, either credit or debit
 	 */
-	private ToggleButton mTransactionTypeButton;
-	
+	private TransactionTypeToggleButton mTransactionTypeButton;
+
 	/**
 	 * Input field for the transaction name (description)
 	 */
 	private AutoCompleteTextView mNameEditText;
-	
+
 	/**
 	 * Input field for the transaction amount
 	 */
 	private EditText mAmountEditText;
-	
+
 	/**
 	 * Field for the transaction currency.
 	 * The transaction uses the currency of the account
 	 */
 	private TextView mCurrencyTextView;
-	
+
 	/**
 	 * Input field for the transaction description (note)
 	 */
 	private EditText mDescriptionEditText;
-	
+
 	/**
 	 * Input field for the transaction date
 	 */
 	private TextView mDateTextView;
-	
+
 	/**
 	 * Input field for the transaction time
 	 */
-	private TextView mTimeTextView;		
-	
+	private TextView mTimeTextView;
+
 	/**
 	 * {@link Calendar} for holding the set date
 	 */
 	private Calendar mDate;
-	
+
 	/**
 	 * {@link Calendar} object holding the set time
 	 */
@@ -167,42 +163,45 @@
 	private boolean mUseDoubleEntry;
 
     /**
-     * Flag to note if the user has manually edited the amount of the transaction
-     */
-    boolean mAmountManuallyEdited = false;
-
-    /**
      * The AccountType of the account to which this transaction belongs.
      * Used for determining the accounting rules for credits and debits
      */
-    Account.AccountType mAccountType;
+    AccountType mAccountType;
 
     /**
      * Spinner for marking the transaction as a recurring transaction
      */
     Spinner mRecurringTransactionSpinner;
 
-	/**
+    private AmountInputFormatter mAmountInputFormatter;
+
+    private Button mOpenSplitsButton;
+    private long mAccountId;
+
+    private List<Split> mSplitsList = new ArrayList<Split>();
+
+    /**
 	 * Create the view and retrieve references to the UI elements
 	 */
 	@Override
 	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View v = inflater.inflate(R.layout.fragment_new_transaction, container, false);
-		
+
 		mNameEditText           = (AutoCompleteTextView) v.findViewById(R.id.input_transaction_name);
 		mDescriptionEditText    = (EditText) v.findViewById(R.id.input_description);
 		mDateTextView           = (TextView) v.findViewById(R.id.input_date);
 		mTimeTextView           = (TextView) v.findViewById(R.id.input_time);
 		mAmountEditText         = (EditText) v.findViewById(R.id.input_transaction_amount);
 		mCurrencyTextView       = (TextView) v.findViewById(R.id.currency_symbol);
-		mTransactionTypeButton  = (ToggleButton) v.findViewById(R.id.input_transaction_type);
+		mTransactionTypeButton  = (TransactionTypeToggleButton) v.findViewById(R.id.input_transaction_type);
 		mDoubleAccountSpinner   = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
+        mOpenSplitsButton       = (Button) v.findViewById(R.id.btn_open_splits);
 
         mRecurringTransactionSpinner = (Spinner) v.findViewById(R.id.input_recurring_transaction_spinner);
 		return v;
 	}
-	
+
 	@Override
 	public void onActivityCreated(Bundle savedInstanceState) {
 		super.onActivityCreated(savedInstanceState);
@@ -216,6 +215,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		mUseDoubleEntry = sharedPrefs.getBoolean(getString(R.string.key_use_double_entry), true);
 		if (!mUseDoubleEntry){
 			getView().findViewById(R.id.layout_double_entry).setVisibility(View.GONE);
+            mOpenSplitsButton.setVisibility(View.GONE);
 		}
 
 		//updateTransferAccountsList must only be called after creating mAccountsDbAdapter
@@ -231,17 +231,32 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
 		mTransaction = mTransactionsDbAdapter.getTransaction(transactionId);
 
-        final long accountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
-        mAccountType = mAccountsDbAdapter.getAccountType(accountId);
-        toggleTransactionTypeState();
+        mAccountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
+        mAccountType = mAccountsDbAdapter.getAccountType(mAccountId);
+
+        mDoubleAccountSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
+                if (mSplitsList.size() == 2){ //when handling simple transfer to one account
+                    for (Split split : mSplitsList) {
+                        if (!split.getAccountUID().equals(mAccountsDbAdapter.getAccountUID(mAccountId))){
+                            split.setAccountUID(mAccountsDbAdapter.getAccountUID(id));
+                        }
+                        // else case is handled when saving the transactions
+                    }
+                }
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> adapterView) {
+                //nothing to see here, move along
+            }
+        });
 
         setListeners();
 		if (mTransaction == null)
 			initalizeViews();
 		else {
-			if (mUseDoubleEntry && isInDoubleAccount()){
-				mTransaction.setAmount(mTransaction.getAmount().negate());
-			}
 			initializeViewsWithTransaction();
 		}
 
@@ -249,28 +264,11 @@ public void onActivityCreated(Bundle savedInstanceState) {
 	}
 
     /**
-     * Toggles the state transaction type button in response to the type of account.
-     * This just changes what label is shown to the user, but basically the button in checked state still
-     * represents a negative amount, and unchecked is positive. The CREDIT/DEBIT label depends on the account.
-     * Different types of accounts handle CREDITS/DEBITS differently
-     */
-    private void toggleTransactionTypeState() {
-        if (mAccountType.hasDebitNormalBalance()){
-            mTransactionTypeButton.setTextOff(getString(R.string.label_debit));
-            mTransactionTypeButton.setTextOn(getString(R.string.label_credit));
-        } else {
-            mTransactionTypeButton.setTextOff(getString(R.string.label_credit));
-            mTransactionTypeButton.setTextOn(getString(R.string.label_debit));
-        }
-        mTransactionTypeButton.invalidate();
-    }
-
-    /**
      * Initializes the transaction name field for autocompletion with existing transaction names in the database
      */
     private void initTransactionNameAutocomplete() {
         final int[] to = new int[]{android.R.id.text1};
-        final String[] from = new String[]{DatabaseHelper.KEY_NAME};
+        final String[] from = new String[]{DatabaseSchema.TransactionEntry.COLUMN_NAME};
 
         SimpleCursorAdapter adapter = new SimpleCursorAdapter(
                 getActivity(), android.R.layout.simple_dropdown_item_1line,
@@ -279,7 +277,7 @@ private void initTransactionNameAutocomplete() {
         adapter.setCursorToStringConverter(new SimpleCursorAdapter.CursorToStringConverter() {
             @Override
             public CharSequence convertToString(Cursor cursor) {
-                final int colIndex = cursor.getColumnIndexOrThrow(DatabaseHelper.KEY_NAME);
+                final int colIndex = cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_NAME);
                 return cursor.getString(colIndex);
             }
         });
@@ -298,9 +296,8 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
                 mTransaction.setUID(UUID.randomUUID().toString());
                 mTransaction.setExported(false);
                 mTransaction.setTime(System.currentTimeMillis());
-                long accountId = ((TransactionsActivity)getSherlockActivity()).getCurrentAccountID();
-                mTransaction.setAccountUID(mTransactionsDbAdapter.getAccountUID(accountId));
                 initializeViewsWithTransaction();
+                setAmountEditViewVisible(View.GONE);
             }
         });
 
@@ -314,63 +311,64 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
 	private void initializeViewsWithTransaction(){
 		mNameEditText.setText(mTransaction.getName());
 
-        //FIXME: You need to revisit me when splits are introduced
-        //checking the type button means the amount will be shown as negative (in red) to user
+        String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
+        mTransactionTypeButton.setAccountType(mAccountType);
+        mTransactionTypeButton.setChecked(mTransaction.getBalance(accountUID).isNegative());
 
-        mTransactionTypeButton.setChecked(mTransaction.getAmount().isNegative());
-
-		if (!mAmountManuallyEdited){
+		if (!mAmountInputFormatter.isInputModified()){
             //when autocompleting, only change the amount if the user has not manually changed it already
-            mAmountEditText.setText(mTransaction.getAmount().toPlainString());
+            mAmountEditText.setText(mTransaction.getBalance(accountUID).toPlainString());
         }
-		mCurrencyTextView.setText(mTransaction.getAmount().getCurrency().getSymbol(Locale.getDefault()));
+		mCurrencyTextView.setText(mTransaction.getCurrency().getSymbol(Locale.getDefault()));
 		mDescriptionEditText.setText(mTransaction.getDescription());
 		mDateTextView.setText(DATE_FORMATTER.format(mTransaction.getTimeMillis()));
 		mTimeTextView.setText(TIME_FORMATTER.format(mTransaction.getTimeMillis()));
 		Calendar cal = GregorianCalendar.getInstance();
 		cal.setTimeInMillis(mTransaction.getTimeMillis());
 		mDate = mTime = cal;
-				
-		if (mUseDoubleEntry){			
-			if (isInDoubleAccount()){
-				long accountId = mTransactionsDbAdapter.getAccountID(mTransaction.getAccountUID());
-				setSelectedTransferAccount(accountId);
-			} else {
-				long doubleAccountId = mTransactionsDbAdapter.getAccountID(mTransaction.getDoubleEntryAccountUID());
-				setSelectedTransferAccount(doubleAccountId);
-			}
-		}
-		
-		final long accountId = mTransactionsDbAdapter.getAccountID(mTransaction.getAccountUID());
-		String code = mTransactionsDbAdapter.getCurrencyCode(accountId);
-		Currency accountCurrency = Currency.getInstance(code);
+
+        //if there are more than two splits (which is the default for one entry), then
+        //disable editing of the transfer account. User should open editor
+        if (mTransaction.getSplits().size() > 2) {
+            setAmountEditViewVisible(View.GONE);
+        } else {
+            for (Split split : mTransaction.getSplits()) {
+                //two splits, one belongs to this account and the other to another account
+                if (!split.getAccountUID().equals(accountUID)) {
+                    setSelectedTransferAccount(mAccountsDbAdapter.getAccountID(split.getAccountUID()));
+                }
+            }
+        }
+        mSplitsList = new ArrayList<Split>(mTransaction.getSplits()); //we need a copy so we can modify with impunity
+        mAmountEditText.setEnabled(mSplitsList.size() <= 2);
+
+		String currencyCode = mTransactionsDbAdapter.getCurrencyCode(mAccountId);
+		Currency accountCurrency = Currency.getInstance(currencyCode);
 		mCurrencyTextView.setText(accountCurrency.getSymbol());
 
         setSelectedRecurrenceOption();
     }
 
+    private void setAmountEditViewVisible(int visibility) {
+        getView().findViewById(R.id.layout_double_entry).setVisibility(visibility);
+        mTransactionTypeButton.setVisibility(visibility);
+    }
+
     /**
 	 * Initialize views with default data for new transactions
 	 */
 	private void initalizeViews() {
-		Date time = new Date(System.currentTimeMillis()); 
+		Date time = new Date(System.currentTimeMillis());
 		mDateTextView.setText(DATE_FORMATTER.format(time));
 		mTimeTextView.setText(TIME_FORMATTER.format(time));
 		mTime = mDate = Calendar.getInstance();
 
 		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
 		if (typePref.equals("CREDIT")){
-            if (mAccountType.hasDebitNormalBalance())
-                mTransactionTypeButton.setChecked(false);
-            else
-                mTransactionTypeButton.setChecked(true);
-		} else { //DEBIT
-            if (mAccountType.hasDebitNormalBalance())
-                mTransactionTypeButton.setChecked(true);
-            else
-                mTransactionTypeButton.setChecked(false);
+            mTransactionTypeButton.setChecked(false);
         }
-				
+        mTransactionTypeButton.setAccountType(mAccountType);
+
 		final long accountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
 		String code = Money.DEFAULT_CURRENCY_CODE;
 		if (accountId != 0){
@@ -414,10 +412,10 @@ private void setSelectedRecurrenceOption() {
 	private void updateTransferAccountsList(){
 		long accountId = ((TransactionsActivity)getActivity()).getCurrentAccountID();
 
-		String conditions = "(" + DatabaseHelper.KEY_ROW_ID + " != " + accountId + " AND "
-							+ DatabaseHelper.KEY_CURRENCY_CODE + " = '" + mAccountsDbAdapter.getCurrencyCode(accountId)
-                            + "' AND " + DatabaseHelper.KEY_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
-                            + "' AND " + DatabaseHelper.KEY_PLACEHOLDER + " = 0"
+		String conditions = "(" + DatabaseSchema.AccountEntry._ID + " != " + accountId + " AND "
+							+ DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(accountId)
+                            + "' AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
+                            + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                             + ")";
 
         if (mCursor != null) {
@@ -427,47 +425,62 @@ private void updateTransferAccountsList(){
 
         mCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
                 android.R.layout.simple_spinner_item, mCursor);
-		mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);		
+		mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		mDoubleAccountSpinner.setAdapter(mCursorAdapter);
 	}
-	
+
+    /**
+     * Opens the split editor dialog
+     */
+    private void openSplitEditor(){
+        if (mAmountEditText.getText().toString().length() == 0){
+            Toast.makeText(getActivity(), "Please enter an amount to split", Toast.LENGTH_SHORT).show();
+            return;
+        }
+        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
+        String baseAmountString = "0";
+        long transactionId = getArguments().getLong(UxArgument.SELECTED_TRANSACTION_ID);
+
+        if (transactionId <= 0){
+            BigDecimal enteredAmount = parseInputToDecimal(mAmountEditText.getText().toString());
+            baseAmountString = enteredAmount.toPlainString();
+        } else {
+            Money biggestAmount = Money.createZeroInstance(mTransaction.getCurrencyCode());
+            for (Split split : mTransaction.getSplits()) {
+                if (split.getAmount().compareTo(biggestAmount) > 0)
+                    biggestAmount = split.getAmount();
+            }
+            baseAmountString = biggestAmount.toPlainString();
+        }
+
+        SplitEditorDialogFragment splitEditorDialogFragment =
+                SplitEditorDialogFragment.newInstance(baseAmountString);
+        splitEditorDialogFragment.setTargetFragment(TransactionFormFragment.this, 0);
+        splitEditorDialogFragment.show(fragmentManager, TAG_SPLITS_EDITOR_FRAGMENT);
+    }
 	/**
 	 * Sets click listeners for the dialog buttons
 	 */
 	private void setListeners() {
-		mAmountEditText.addTextChangedListener(new AmountInputFormatter());
-		
-		mTransactionTypeButton.setOnCheckedChangeListener(new OnCheckedChangeListener() {
-			
-			@Override
-			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
-				if (isChecked){
-					int red = getResources().getColor(R.color.debit_red);
-					mTransactionTypeButton.setTextColor(red);
-					mAmountEditText.setTextColor(red);		
-					mCurrencyTextView.setTextColor(red);
-				}
-				else {
-					int green = getResources().getColor(R.color.credit_green);
-					mTransactionTypeButton.setTextColor(green);
-					mAmountEditText.setTextColor(green);
-					mCurrencyTextView.setTextColor(green);
-				}
-				String amountText = mAmountEditText.getText().toString();
-				if (amountText.length() > 0){
-					Money money = new Money(stripCurrencyFormatting(amountText)).divide(100).negate();
-					mAmountEditText.setText(money.toPlainString()); //trigger an edit to update the number sign
-				} 
-			}
-		});
+        mAmountInputFormatter = new AmountInputFormatter(mAmountEditText, mTransactionTypeButton);
+        mAmountEditText.addTextChangedListener(mAmountInputFormatter);
+
+        mOpenSplitsButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                openSplitEditor();
+            }
+        });
+
+		mTransactionTypeButton.setupCheckedListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
-			
+
 			@Override
 			public void onClick(View v) {
 				FragmentTransaction ft = getFragmentManager().beginTransaction();
-				 
-				long dateMillis = 0;				
+
+				long dateMillis = 0;
 				try {
 					Date date = DATE_FORMATTER.parse(mDateTextView.getText().toString());
 					dateMillis = date.getTime();
@@ -478,7 +491,7 @@ public void onClick(View v) {
 				newFragment.show(ft, "date_dialog");
 			}
 		});
-		
+
 		mTimeTextView.setOnClickListener(new View.OnClickListener() {
 
             @Override
@@ -510,23 +523,13 @@ private void setSelectedTransferAccount(long accountId){
                     public void run() {
                         mDoubleAccountSpinner.setSelection(position);
                     }
-                }, 500);
+                }, 200);
 				break;
 			}
 		}
 	}
 
     /**
-     * Returns true if we are editing the transaction from within it's transfer account,
-     * rather than the account in which the transaction was created
-     * @return <code>true</code> if in transfer account, <code>false</code> otherwise
-     */
-	private boolean isInDoubleAccount(){
-		long accountId = mTransactionsDbAdapter.getAccountID(mTransaction.getAccountUID());
-		return ((TransactionsActivity)getActivity()).getCurrentAccountID() != accountId;
-	}
-
-    /**
      * Callback when the account in the navigation bar is changed by the user
      * @param newAccountId Database record ID of the newly selected account
      */
@@ -536,121 +539,131 @@ public void onAccountChanged(long newAccountId){
 		Currency currency = Currency.getInstance(currencyCode);
 		mCurrencyTextView.setText(currency.getSymbol(Locale.getDefault()));
 
-        Account.AccountType previousAccountType = mAccountType;
         mAccountType = accountsDbAdapter.getAccountType(newAccountId);
-        toggleTransactionTypeState();
-
-        //if the new account has a different credit/debit philosophy as the previous one, then toggle the button
-        if (mAccountType.hasDebitNormalBalance() != previousAccountType.hasDebitNormalBalance()){
-            mTransactionTypeButton.toggle();
-        }
+        mTransactionTypeButton.setAccountType(mAccountType);
 
 		updateTransferAccountsList();
 
         accountsDbAdapter.close();
 	}
-	
+
 	/**
-	 * Collects information from the fragment views and uses it to create 
+	 * Collects information from the fragment views and uses it to create
 	 * and save a transaction
 	 */
 	private void saveNewTransaction() {
 		Calendar cal = new GregorianCalendar(
-				mDate.get(Calendar.YEAR), 
-				mDate.get(Calendar.MONTH), 
-				mDate.get(Calendar.DAY_OF_MONTH), 
-				mTime.get(Calendar.HOUR_OF_DAY), 
-				mTime.get(Calendar.MINUTE), 
+				mDate.get(Calendar.YEAR),
+				mDate.get(Calendar.MONTH),
+				mDate.get(Calendar.DAY_OF_MONTH),
+				mTime.get(Calendar.HOUR_OF_DAY),
+				mTime.get(Calendar.MINUTE),
 				mTime.get(Calendar.SECOND));
 		String name = mNameEditText.getText().toString();
 		String description = mDescriptionEditText.getText().toString();
 		BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
-		
-		long accountID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountID(); 		
+
+		long accountID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountID();
+        String accountUID = mAccountsDbAdapter.getAccountUID(accountID);
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getCurrencyCode(accountID));
-		Money amount 	= new Money(amountBigd, currency);
-		TransactionType type;
-        if (mAccountType.hasDebitNormalBalance()){
-            type = amount.isNegative() ? TransactionType.CREDIT : TransactionType.DEBIT;
-        } else
-            type = amount.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
+		Money amount 	= new Money(amountBigd, currency).absolute();
+
 		if (mTransaction != null){
-			mTransaction.setAmount(amount);
+            if (mSplitsList.size() == 2) {
+                //if it is a simple transfer where the editor was not used, then respect the button
+                for (Split split : mSplitsList) {
+                    if (split.getAccountUID().equals(accountUID)){
+                        split.setType(mTransactionTypeButton.getTransactionType());
+                        split.setAmount(amount.absolute());
+                    } else {
+                        split.setType(mTransactionTypeButton.getTransactionType().invert());
+                    }
+                }
+            }
+            mTransaction.setSplits(mSplitsList);
 			mTransaction.setName(name);
-			mTransaction.setTransactionType(type);
 		} else {
-			mTransaction = new Transaction(amount, name, type);
+			mTransaction = new Transaction(name);
+            if (mSplitsList.isEmpty()) { //amount entered in the simple interface (not using splits Editor)
+                Split split = new Split(amount, accountUID);
+                split.setType(mTransactionTypeButton.getTransactionType());
+                mTransaction.addSplit(split);
+
+                String transferAcctUID;
+                if (mUseDoubleEntry) {
+                    long transferAcctId = mDoubleAccountSpinner.getSelectedItemId();
+                    transferAcctUID = mAccountsDbAdapter.getAccountUID(transferAcctId);
+                    mTransaction.addSplit(split.createPair(transferAcctUID));
+                } else {
+                      //TODO: enable this when we can hide certain accounts from the user
+//                    transferAcctUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
+                }
+            } else { //split editor was used to enter splits
+                mTransaction.setSplits(mSplitsList);
+            }
 		}
-		
-		mTransaction.setAccountUID(mTransactionsDbAdapter.getAccountUID(accountID));
+        mTransaction.setCurrencyCode(mAccountsDbAdapter.getCurrencyCode(accountID));
 		mTransaction.setTime(cal.getTimeInMillis());
 		mTransaction.setDescription(description);
-		
-		//set the double account
-		if (mUseDoubleEntry){
-			long doubleAccountId = mDoubleAccountSpinner.getSelectedItemId();
-			//negate the transaction before saving if we are in the double account
-			if (isInDoubleAccount()){
-				mTransaction.setAmount(amount.negate());
-				mTransaction.setAccountUID(mTransactionsDbAdapter.getAccountUID(doubleAccountId));
-				mTransaction.setDoubleEntryAccountUID(mTransactionsDbAdapter.getAccountUID(accountID));
-			} else {
-				mTransaction.setAccountUID(mTransactionsDbAdapter.getAccountUID(accountID));
-				mTransaction.setDoubleEntryAccountUID(mTransactionsDbAdapter.getAccountUID(doubleAccountId));
-			}
-		}
+
         //save the normal transaction first
         mTransactionsDbAdapter.addTransaction(mTransaction);
+        scheduleRecurringTransaction();
+
+
+        //update widgets, if any
+		WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
 
+		finish();
+	}
+
+    /**
+     * Schedules a recurring transaction (if necessary) after the transaction has been saved
+     * @see #saveNewTransaction()
+     */
+    private void scheduleRecurringTransaction() {
         //set up recurring transaction if requested
         int recurrenceIndex = mRecurringTransactionSpinner.getSelectedItemPosition();
         if (recurrenceIndex != 0) {
             String[] recurrenceOptions = getResources().getStringArray(R.array.recurrence_period_millis);
             long recurrencePeriodMillis = Long.parseLong(recurrenceOptions[recurrenceIndex]);
-            long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
+            Transaction recurringTransaction;
+            if (mTransaction.getRecurrencePeriod() > 0) //if we are editing the recurring transaction itself...
+                recurringTransaction = mTransaction;
+            else
+                recurringTransaction = new Transaction(mTransaction, true);
 
-            Transaction recurringTransaction = new Transaction(mTransaction, true);
             recurringTransaction.setRecurrencePeriod(recurrencePeriodMillis);
-            long recurringTransactionId = mTransactionsDbAdapter.addTransaction(recurringTransaction);
-
-            PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(getActivity().getApplicationContext(),
-                    (int)recurringTransactionId, Transaction.createIntent(mTransaction), PendingIntent.FLAG_UPDATE_CURRENT);
-            AlarmManager alarmManager = (AlarmManager) getActivity().getSystemService(Context.ALARM_SERVICE);
-            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, firstRunMillis,
-                    recurrencePeriodMillis, recurringPendingIntent);
+            mTransactionsDbAdapter.scheduleTransaction(recurringTransaction);
         }
+    }
 
-		//update widgets, if any
-		WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
-		
-		finish();
-	}
 
-	@Override
+    @Override
 	public void onDestroyView() {
 		super.onDestroyView();
 		if (mCursor != null)
 			mCursor.close();
-		mAccountsDbAdapter.close();		
+		mAccountsDbAdapter.close();
 		mTransactionsDbAdapter.close();
 	}
-	
+
 	@Override
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 		inflater.inflate(R.menu.default_save_actions, menu);
 	}
-	
+
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		//hide the keyboard if it is visible
 		InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
 		imm.hideSoftInputFromWindow(mNameEditText.getApplicationWindowToken(), 0);
-		
+
 		switch (item.getItemId()) {
 		case R.id.menu_cancel:
 			finish();
 			return true;
-			
+
 		case R.id.menu_save:
             if (mAmountEditText.getText().length() == 0){
                 Toast.makeText(getActivity(), R.string.toast_transanction_amount_required, Toast.LENGTH_SHORT).show();
@@ -663,6 +676,38 @@ public boolean onOptionsItemSelected(MenuItem item) {
 		}
 	}
 
+    /**
+     * Called by the split editor fragment to notify of finished editing
+     * @param splitList List of splits produced in the fragment
+     */
+    public void setSplitList(List<Split> splitList, List<String> removedSplitUIDs){
+        mSplitsList = splitList;
+        String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
+        Money balance = Transaction.computeBalance(accountUID, mSplitsList);
+
+        mAmountEditText.setText(balance.toPlainString());
+        //once we set the split list, do not allow direct editing of the total
+        if (mSplitsList.size() > 1){
+            mAmountEditText.setEnabled(false);
+            mTransactionTypeButton.setVisibility(View.GONE);
+            getView().findViewById(R.id.layout_double_entry).setVisibility(View.GONE);
+        }
+
+        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getActivity());
+        for (String removedSplitUID : removedSplitUIDs) {
+            splitsDbAdapter.deleteRecord(splitsDbAdapter.getID(removedSplitUID));
+        }
+        splitsDbAdapter.close();
+    }
+
+    /**
+     * Returns the list of splits currently in editing
+     * @return List of splits
+     */
+    public List<Split> getSplitList(){
+        return mSplitsList;
+    }
+
 	/**
 	 * Finishes the fragment appropriately.
 	 * Depends on how the fragment was loaded, it might have a backstack or not
@@ -676,7 +721,7 @@ private void finish() {
 			getSherlockActivity().getSupportFragmentManager().popBackStack();
 		}
 	}
-	
+
 	/**
 	 * Callback when the date is set in the {@link DatePickerDialog}
 	 */
@@ -696,80 +741,45 @@ public void onDateSet(DatePicker view, int year, int monthOfYear,
 	@Override
 	public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
 		Calendar cal = new GregorianCalendar(0, 0, 0, hourOfDay, minute);
-		mTimeTextView.setText(TIME_FORMATTER.format(cal.getTime()));	
+		mTimeTextView.setText(TIME_FORMATTER.format(cal.getTime()));
 		mTime.set(Calendar.HOUR_OF_DAY, hourOfDay);
 		mTime.set(Calendar.MINUTE, minute);
 	}
-	
+
 	/**
 	 * Strips formatting from a currency string.
-	 * All non-digit information is removed
+	 * All non-digit information is removed, but the sign is preserved.
 	 * @param s String to be stripped
 	 * @return Stripped string with all non-digits removed
 	 */
 	public static String stripCurrencyFormatting(String s){
+        if (s.length() == 0)
+            return s;
 		//remove all currency formatting and anything else which is not a number
-		return s.trim().replaceAll("\\D*", "");
+        String sign = s.trim().substring(0,1);
+        String stripped = s.trim().replaceAll("\\D*", "");
+        if (sign.equals("+") || sign.equals("-")){
+            stripped = sign + stripped;
+        }
+		return stripped;
 	}
-	
+
 	/**
 	 * Parse an input string into a {@link BigDecimal}
 	 * This method expects the amount including the decimal part
 	 * @param amountString String with amount information
 	 * @return BigDecimal with the amount parsed from <code>amountString</code>
 	 */
-	public BigDecimal parseInputToDecimal(String amountString){
+	public static BigDecimal parseInputToDecimal(String amountString){
 		String clean = stripCurrencyFormatting(amountString);
+        if (clean.length() == 0) //empty string
+                return BigDecimal.ZERO;
 		//all amounts are input to 2 decimal places, so after removing decimal separator, divide by 100
 		BigDecimal amount = new BigDecimal(clean).setScale(2,
 				RoundingMode.HALF_EVEN).divide(new BigDecimal(100), 2,
 				RoundingMode.HALF_EVEN);
-		if (mTransactionTypeButton.isChecked() && amount.doubleValue() > 0)
-			amount = amount.negate();
 		return amount;
 	}
 
 
-	/**
-	 * Captures input string in the amount input field and parses it into a formatted amount
-	 * The amount input field allows numbers to be input sequentially and they are parsed
-	 * into a string with 2 decimal places. This means inputting 245 will result in the amount
-	 * of 2.45
-	 * @author Ngewi Fet <ngewif@gmail.com>
-	 */
-	private class AmountInputFormatter implements TextWatcher {
-		private String current = "0";
-		
-		@Override
-		public void afterTextChanged(Editable s) {
-			if (s.length() == 0)
-				return;
-			
-			BigDecimal amount = parseInputToDecimal(s.toString());
-			DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
-			formatter.setMinimumFractionDigits(2);
-			formatter.setMaximumFractionDigits(2);
-			current = formatter.format(amount.doubleValue());
-			
-			mAmountEditText.removeTextChangedListener(this);
-			mAmountEditText.setText(current);
-			mAmountEditText.setSelection(current.length());
-			mAmountEditText.addTextChangedListener(this);
-			
-		}
-
-		@Override
-		public void beforeTextChanged(CharSequence s, int start, int count,
-				int after) {
-			// nothing to see here, move along
-		}
-
-		@Override
-		public void onTextChanged(CharSequence s, int start, int before,
-				int count) {
-			// nothing to see here, move along
-			mAmountManuallyEdited = true;
-		}
-		
-	}
 }
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 5b33acfa..56474abe 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -42,10 +42,13 @@
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsActivity;
@@ -381,7 +384,7 @@ public void updateNavigationSelection() {
 		int i = 0;
 		Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
         while (accountsCursor.moveToNext()) {
-            long id = accountsCursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+            long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
             if (mAccountId == id) {
                 getSupportActionBar().setSelectedNavigationItem(i);
                 break;
@@ -428,7 +431,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
                 boolean isFavorite = accountsDbAdapter.isFavoriteAccount(mAccountId);
                 //toggle favorite preference
-                accountsDbAdapter.updateAccount(mAccountId, DatabaseHelper.KEY_FAVORITE, isFavorite ? "0" : "1");
+                accountsDbAdapter.updateAccount(mAccountId, DatabaseSchema.AccountEntry.COLUMN_FAVORITE, isFavorite ? "0" : "1");
                 accountsDbAdapter.close();
                 supportInvalidateOptionsMenu();
                 return true;
@@ -509,7 +512,21 @@ private void showTransactionFormFragment(Bundle args){
 			fragmentTransaction.addToBackStack(null);
 		fragmentTransaction.commit();
 	}
-	
+
+    /**
+     * Display the balance of a transaction in a text view and format the text color to match the sign of the amount
+     * @param balanceTextView {@link android.widget.TextView} where balance is to be displayed
+     * @param balance {@link org.gnucash.android.model.Money} balance to display
+     */
+    public static void displayBalance(TextView balanceTextView, Money balance){
+        balanceTextView.setText(balance.formattedString());
+        Context context = GnuCashApplication.getAppContext();
+        int fontColor = balance.isNegative() ?
+                context.getResources().getColor(R.color.debit_red) :
+                context.getResources().getColor(R.color.credit_green);
+        balanceTextView.setTextColor(fontColor);
+    }
+
 	@Override
 	public void createNewTransaction(long accountRowId) {
         Intent createTransactionIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 59cf3c08..e873467c 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -47,20 +47,17 @@
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
+import org.gnucash.android.db.*;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseCursorLoader;
-import org.gnucash.android.db.DatabaseHelper;
-import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.ui.transaction.dialog.BulkMoveDialogFragment;
+import org.gnucash.android.ui.util.AccountBalanceTask;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
-import org.gnucash.android.ui.account.AccountsListFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.ui.util.OnTransactionClickedListener;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import java.util.Locale;
 
 /**
  * List Fragment for displaying list of transactions for an account
@@ -119,9 +116,11 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
 				return true;
 
 			case R.id.context_menu_delete:
+                SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getActivity());
 				for (long id : getListView().getCheckedItemIds()) {
-					mTransactionsDbAdapter.deleteRecord(id);
-				}				
+                    splitsDbAdapter.deleteSplitsForTransactionAndAccount(id, mAccountID);
+				}
+                splitsDbAdapter.close();
 				refresh();
 				mode.finish();
 				WidgetConfigurationActivity.updateAllWidgets(getActivity());
@@ -149,8 +148,8 @@ public void onCreate(Bundle savedInstanceState) {
 		mCursorAdapter = new TransactionsCursorAdapter(
 				getActivity().getApplicationContext(), 
 				R.layout.list_item_transaction, null, 
-				new String[] {DatabaseHelper.KEY_NAME, DatabaseHelper.KEY_AMOUNT}, 
-				new int[] {R.id.primary_text, R.id.transaction_amount});
+				new String[] {DatabaseSchema.TransactionEntry.COLUMN_NAME},
+				new int[] {R.id.primary_text});
 		setListAdapter(mCursorAdapter);
 	}
 	
@@ -190,7 +189,7 @@ public void refresh(){
 		getLoaderManager().restartLoader(0, null, this);
 
         mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
-        new AccountsListFragment.AccountBalanceTask(mSumTextView, getActivity()).execute(mAccountID);
+        new AccountBalanceTask(mSumTextView, getActivity()).execute(mAccountID);
 
 	}
 			
@@ -413,37 +412,15 @@ public void run() {
 		
 		@Override
 		public void bindView(View view, Context context, Cursor cursor) {
-			super.bindView(view, context, cursor);			
-			
-			Money amount = new Money(
-					cursor.getString(DatabaseAdapter.COLUMN_AMOUNT), 
-					mTransactionsDbAdapter.getCurrencyCode(mAccountID));
-
-            //FIXME: Take normal account balances into consideration for double entries
-//            String mainAccountUID = cursor.getString(DatabaseAdapter.COLUMN_ACCOUNT_UID);
-//            Account.AccountType mainAccountType = mTransactionsDbAdapter.getAccountType(mainAccountUID);
-
-			//negate any transactions if this account is the origin in double entry
-			String transferAccountUID = cursor.getString(DatabaseAdapter.COLUMN_DOUBLE_ENTRY_ACCOUNT_UID);
-
-			if (transferAccountUID != null
-					&& mTransactionsDbAdapter.isSameAccount(mAccountID, transferAccountUID)){
-//                Account.AccountType transferAccountType = mTransactionsDbAdapter.getAccountType(transferAccountUID);
-//
-//                if (mainAccountType.getNormalBalanceType() == transferAccountType.getNormalBalanceType())
-                amount = amount.negate();
-			}
-				
-			TextView tramount = (TextView) view.findViewById(R.id.transaction_amount);
-			tramount.setText(amount.formattedString(Locale.getDefault()));
-						
-			if (amount.isNegative())
-				tramount.setTextColor(getResources().getColor(R.color.debit_red));
-			else
-				tramount.setTextColor(getResources().getColor(R.color.credit_green));
-			
+			super.bindView(view, context, cursor);
+
+            long transactionId = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry._ID));
+			Money amount = mTransactionsDbAdapter.getBalance(transactionId, mAccountID);
+			TextView amountTextView = (TextView) view.findViewById(R.id.transaction_amount);
+            TransactionsActivity.displayBalance(amountTextView, amount);
+
 			TextView trNote = (TextView) view.findViewById(R.id.secondary_text);
-			String description = cursor.getString(DatabaseAdapter.COLUMN_DESCRIPTION);
+			String description = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION));
 			if (description == null || description.length() == 0)
 				trNote.setVisibility(View.GONE);
 			else {
@@ -462,7 +439,7 @@ public void bindView(View view, Context context, Cursor cursor) {
          * @see #isSameDay(long, long)
          */
         private void setSectionHeaderVisibility(View view, Cursor cursor) {
-            long transactionTime = cursor.getLong(DatabaseAdapter.COLUMN_TIMESTAMP);
+            long transactionTime = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_TIMESTAMP));
             int position = cursor.getPosition();
 
             boolean hasSectionHeader;
@@ -470,7 +447,7 @@ private void setSectionHeaderVisibility(View view, Cursor cursor) {
                 hasSectionHeader = true;
             } else {
                 cursor.moveToPosition(position - 1);
-                long previousTimestamp = cursor.getLong(DatabaseAdapter.COLUMN_TIMESTAMP);
+                long previousTimestamp = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_TIMESTAMP));
                 cursor.moveToPosition(position);
                 //has header if two consecutive transactions were not on same day
                 hasSectionHeader = !isSameDay(previousTimestamp, transactionTime);
diff --git a/app/src/org/gnucash/android/ui/transaction/BulkMoveDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
similarity index 85%
rename from app/src/org/gnucash/android/ui/transaction/BulkMoveDialogFragment.java
rename to app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
index 84f4616c..cb6b4dda 100644
--- a/app/src/org/gnucash/android/ui/transaction/BulkMoveDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
@@ -14,13 +14,15 @@
  * limitations under the License.
  */
 
-package org.gnucash.android.ui.transaction;
+package org.gnucash.android.ui.transaction.dialog;
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
@@ -104,10 +106,10 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		getDialog().setTitle(title);
 		
 		mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
-        String conditions = "(" + DatabaseHelper.KEY_ROW_ID + " != " + mOriginAccountId + " AND "
-                + DatabaseHelper.KEY_CURRENCY_CODE + " = '" + mAccountsDbAdapter.getCurrencyCode(mOriginAccountId)
-                + "' AND " + DatabaseHelper.KEY_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
-                + "' AND " + DatabaseHelper.KEY_PLACEHOLDER + " = 0"
+        String conditions = "(" + DatabaseSchema.AccountEntry._ID           + " != " + mOriginAccountId + " AND "
+                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = '" + mAccountsDbAdapter.getCurrencyCode(mOriginAccountId)
+                + "' AND " + DatabaseSchema.AccountEntry.COLUMN_UID         + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
+                + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                 + ")";
 		Cursor cursor = mAccountsDbAdapter.fetchAccountsOrderedByFullName(conditions);
 
@@ -144,9 +146,9 @@ public void onClick(View v) {
 					Toast.makeText(getActivity(), R.string.toast_incompatible_currency, Toast.LENGTH_LONG).show();
 					return;
 				}
-				
+                long accountId      = ((TransactionsActivity)getActivity()).getCurrentAccountID();
 				for (long trxnId : mTransactionIds) {
-					trxnAdapter.moveTranscation(trxnId, dstAccountId);
+					trxnAdapter.moveTranscation(trxnId, accountId, dstAccountId);
 				}
 				trxnAdapter.close();
 
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
new file mode 100644
index 00000000..1c364141
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -0,0 +1,380 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.ui.transaction.dialog;
+
+import android.database.Cursor;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.widget.SimpleCursorAdapter;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.*;
+import org.gnucash.android.R;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.SplitsDbAdapter;
+import org.gnucash.android.model.*;
+import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.transaction.TransactionFormFragment;
+import org.gnucash.android.ui.transaction.TransactionsActivity;
+import org.gnucash.android.ui.util.AmountInputFormatter;
+import org.gnucash.android.ui.util.TransactionTypeToggleButton;
+import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.List;
+import java.util.UUID;
+
+/**
+ * Dialog for editing the splits in a transaction
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class SplitEditorDialogFragment extends DialogFragment {
+
+    private LinearLayout mSplitsLinearLayout;
+    private TextView mImbalanceTextView;
+    private Button mAddSplit;
+    private Button mSaveButton;
+    private Button mCancelButton;
+
+    private AccountsDbAdapter mAccountsDbAdapter;
+    private SplitsDbAdapter mSplitsDbAdapter;
+    private Cursor mCursor;
+    private SimpleCursorAdapter mCursorAdapter;
+    private List<View> mSplitItemViewList;
+    private long mAccountId;
+    private String mAccountUID;
+
+    private BalanceTextWatcher mBalanceUpdater = new BalanceTextWatcher();
+    private BigDecimal mBaseAmount = BigDecimal.ZERO;
+
+    private List<String> mRemovedSplitUIDs = new ArrayList<String>();
+    /**
+     * Create and return a new instance of the fragment with the appropriate paramenters
+     * @param baseAmountString String with base amount which is being split
+     * @return New instance of SplitEditorDialogFragment
+     */
+    public static SplitEditorDialogFragment newInstance(String baseAmountString){
+        SplitEditorDialogFragment fragment = new SplitEditorDialogFragment();
+        Bundle args = new Bundle();
+        args.putString(UxArgument.AMOUNT_STRING, baseAmountString);
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.dialog_split_editor, container, false);
+        mSplitsLinearLayout = (LinearLayout) view.findViewById(R.id.split_list_layout);
+
+        mImbalanceTextView = (TextView) view.findViewById(R.id.imbalance_textview);
+
+        mAddSplit   = (Button) view.findViewById(R.id.btn_add_split);
+        mSaveButton = (Button) view.findViewById(R.id.btn_save);
+        mCancelButton       = (Button) view.findViewById(R.id.btn_cancel);
+        return view;
+    }
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getDialog().getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT,
+                WindowManager.LayoutParams.MATCH_PARENT);
+
+        getDialog().setTitle("Transaction splits");
+
+        initArgs();
+        mSplitItemViewList = new ArrayList<View>();
+        mSplitsDbAdapter = new SplitsDbAdapter(getActivity());
+
+        //we are editing splits for a new transaction.
+        // But the user may have already created some splits before. Let's check
+        List<Split> splitList = ((TransactionFormFragment) getTargetFragment()).getSplitList();
+        if (!splitList.isEmpty()) {
+            //aha! there are some splits. Let's load those instead
+            loadSplitViews(splitList);
+        } else {
+            final Currency currency = Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountUID));
+            Split split = new Split(new Money(mBaseAmount, currency), mAccountUID);
+            AccountType accountType = mAccountsDbAdapter.getAccountType(mAccountUID);
+            TransactionType transactionType;
+            if (accountType.hasDebitNormalBalance()) {
+                transactionType = mBaseAmount.signum() < 0 ? TransactionType.CREDIT : TransactionType.DEBIT;
+            } else {
+                transactionType = mBaseAmount.signum() < 0 ? TransactionType.CREDIT : TransactionType.DEBIT;
+            }
+            split.setType(transactionType);
+            View view = addSplitView(split);
+            view.findViewById(R.id.input_accounts_spinner).setEnabled(false);
+            view.findViewById(R.id.btn_remove_split).setVisibility(View.GONE);
+        }
+
+        setListeners();
+        updateTotal();
+    }
+
+    private void loadSplitViews(List<Split> splitList) {
+        for (Split split : splitList) {
+            addSplitView(split);
+        }
+    }
+
+    /**
+     * Add a split view and initialize it with <code>split</code>
+     * @param split Split to initialize the contents to
+     * @return Returns the split view which was added
+     */
+    private View addSplitView(Split split){
+        LayoutInflater layoutInflater = getActivity().getLayoutInflater();
+        View splitView = layoutInflater.inflate(R.layout.item_split_entry, mSplitsLinearLayout, false);
+        mSplitsLinearLayout.addView(splitView,0);
+        bindSplitView(splitView, split);
+        mSplitItemViewList.add(splitView);
+        return splitView;
+    }
+
+    /**
+     * Extracts arguments passed to the view and initializes necessary adapters and cursors
+     */
+    private void initArgs() {
+        mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
+
+        Bundle args     = getArguments();
+        mAccountId      = ((TransactionsActivity)getActivity()).getCurrentAccountID();
+        mAccountUID     = mAccountsDbAdapter.getAccountUID(mAccountId);
+        mBaseAmount     = new BigDecimal(args.getString(UxArgument.AMOUNT_STRING));
+
+        String conditions = "(" //+ AccountEntry._ID + " != " + mAccountId + " AND "
+                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(mAccountId)
+                + "' AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
+                + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
+                + ")";
+        mCursor = mAccountsDbAdapter.fetchAccountsOrderedByFullName(conditions);
+    }
+
+    /**
+     * Binds the different UI elements of an inflated list view to corresponding actions
+     * @param splitView Split item view
+     * @param split {@link org.gnucash.android.model.Split} to use to populate the view
+     */
+    private void bindSplitView(final View splitView, Split split){
+        EditText splitMemoEditText              = (EditText)    splitView.findViewById(R.id.input_split_memo);
+        final EditText splitAmountEditText      = (EditText)    splitView.findViewById(R.id.input_split_amount);
+        ImageButton removeSplitButton           = (ImageButton) splitView.findViewById(R.id.btn_remove_split);
+        Spinner accountsSpinner                 = (Spinner)     splitView.findViewById(R.id.input_accounts_spinner);
+        final TextView splitCurrencyTextView    = (TextView)    splitView.findViewById(R.id.split_currency_symbol);
+        final TextView splitUidTextView         = (TextView)    splitView.findViewById(R.id.split_uid);
+        final TransactionTypeToggleButton splitTypeButton = (TransactionTypeToggleButton) splitView.findViewById(R.id.btn_split_type);
+
+        splitAmountEditText.addTextChangedListener(new AmountInputFormatter(splitAmountEditText,splitTypeButton));
+        splitAmountEditText.addTextChangedListener(mBalanceUpdater);
+
+        removeSplitButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                mRemovedSplitUIDs.add(splitUidTextView.getText().toString());
+                mSplitsLinearLayout.removeView(splitView);
+                mSplitItemViewList.remove(splitView);
+                updateTotal();
+            }
+        });
+
+        accountsSpinner.setOnItemSelectedListener(new TypeButtonLabelUpdater(splitTypeButton));
+        updateTransferAccountsList(accountsSpinner);
+
+        splitTypeButton.setupCheckedListener(splitAmountEditText, splitCurrencyTextView);
+        splitTypeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                updateTotal();
+            }
+        });
+
+        splitTypeButton.setChecked(mBaseAmount.signum() > 0);
+        splitUidTextView.setText(UUID.randomUUID().toString());
+
+        if (split != null) {
+            splitAmountEditText.setText(split.getAmount().toPlainString());
+            splitMemoEditText.setText(split.getMemo());
+            splitUidTextView.setText(split.getUID());
+
+            setSelectedTransferAccount(mAccountsDbAdapter.getAccountID(split.getAccountUID()), accountsSpinner);
+            splitTypeButton.setChecked(Transaction.shouldDecreaseBalance(splitTypeButton.getAccountType(), split.getType()));
+        }
+    }
+
+    /**
+     * Updates the spinner to the selected transfer account
+     * @param accountId Database ID of the transfer account
+     */
+    private void setSelectedTransferAccount(long accountId, final Spinner accountsSpinner){
+        for (int pos = 0; pos < mCursorAdapter.getCount(); pos++) {
+            if (mCursorAdapter.getItemId(pos) == accountId){
+                final int position = pos;
+                accountsSpinner.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        accountsSpinner.setSelection(position);
+                    }
+                }, 100);
+                break;
+            }
+        }
+    }
+    /**
+     * Updates the list of possible transfer accounts.
+     * Only accounts with the same currency can be transferred to
+     */
+    private void updateTransferAccountsList(Spinner transferAccountSpinner){
+
+        mCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
+                android.R.layout.simple_spinner_item, mCursor);
+        mCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        transferAccountSpinner.setAdapter(mCursorAdapter);
+    }
+
+    /**
+     * Attaches listeners for the buttons of the dialog
+     */
+    protected void setListeners(){
+        mCancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                dismiss();
+            }
+        });
+
+        mSaveButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                List<Split> splitList = extractSplitsFromView();
+                ((TransactionFormFragment) getTargetFragment()).setSplitList(splitList, mRemovedSplitUIDs);
+
+                dismiss();
+            }
+        });
+
+        mAddSplit.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                addSplitView(null);
+            }
+        });
+    }
+
+    /**
+     * Extracts the input from the views and builds {@link org.gnucash.android.model.Split}s to correspond to the input.
+     * @return List of {@link org.gnucash.android.model.Split}s represented in the view
+     */
+    private List<Split> extractSplitsFromView(){
+        List<Split> splitList = new ArrayList<Split>();
+        for (View splitView : mSplitItemViewList) {
+            EditText splitMemoEditText              = (EditText)    splitView.findViewById(R.id.input_split_memo);
+            EditText splitAmountEditText      = (EditText)    splitView.findViewById(R.id.input_split_amount);
+            Spinner accountsSpinner                 = (Spinner)     splitView.findViewById(R.id.input_accounts_spinner);
+            TextView splitUidTextView               = (TextView)    splitView.findViewById(R.id.split_uid);
+            TransactionTypeToggleButton splitTypeButton = (TransactionTypeToggleButton) splitView.findViewById(R.id.btn_split_type);
+
+            BigDecimal amountBigDecimal = TransactionFormFragment.parseInputToDecimal(splitAmountEditText.getText().toString());
+            String currencyCode = mAccountsDbAdapter.getCurrencyCode(accountsSpinner.getSelectedItemId());
+            String accountUID = mAccountsDbAdapter.getAccountUID(accountsSpinner.getSelectedItemId());
+            Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
+            Split split = new Split(amount, accountUID);
+            split.setMemo(splitMemoEditText.getText().toString());
+            split.setType(splitTypeButton.getTransactionType());
+            split.setUID(splitUidTextView.getText().toString().trim());
+            splitList.add(split);
+        }
+        return splitList;
+    }
+
+    /**
+     * Updates the displayed total for the transaction.
+     * Computes the total of the splits, the unassigned balance and the split sum
+     */
+    private void updateTotal(){
+        List<Split> splitList   = extractSplitsFromView();
+        String currencyCode     = mAccountsDbAdapter.getCurrencyCode(mAccountId);
+        Money splitSum          = Money.createZeroInstance(currencyCode);
+
+        for (Split split : splitList) {
+            Money amount = split.getAmount().absolute();
+            if (split.getType() == TransactionType.DEBIT)
+                splitSum = splitSum.subtract(amount);
+            else
+                splitSum = splitSum.add(amount);
+        }
+
+        TransactionsActivity.displayBalance(mImbalanceTextView, splitSum);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        mAccountsDbAdapter.close();
+        mSplitsDbAdapter.close();
+    }
+
+    /**
+     * Updates the displayed balance of the accounts when the amount of a split is changed
+     */
+    private class BalanceTextWatcher implements TextWatcher {
+
+        @Override
+        public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+        }
+
+        @Override
+        public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+        }
+
+        @Override
+        public void afterTextChanged(Editable editable) {
+            updateTotal();
+        }
+    }
+
+    /**
+     * Updates the account type for the TransactionTypeButton when the selected account is changed in the spinner
+     */
+    private class TypeButtonLabelUpdater implements AdapterView.OnItemSelectedListener {
+        TransactionTypeToggleButton mTypeToggleButton;
+
+        public TypeButtonLabelUpdater(TransactionTypeToggleButton typeToggleButton){
+            this.mTypeToggleButton = typeToggleButton;
+        }
+
+        @Override
+        public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {
+            AccountType accountType = mAccountsDbAdapter.getAccountType(id);
+            mTypeToggleButton.setAccountType(accountType);
+        }
+
+        @Override
+        public void onNothingSelected(AdapterView<?> adapterView) {
+
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
new file mode 100644
index 00000000..4d80c40d
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.util.Log;
+import android.widget.TextView;
+import org.gnucash.android.R;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.model.Money;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * An asynchronous task for computing the account balance of an account.
+ * This is done asynchronously because in cases of deeply nested accounts,
+ * it can take some time and would block the UI thread otherwise.
+ */
+public class AccountBalanceTask extends AsyncTask<Long, Void, Money> {
+    public static final String LOG_TAG = AccountBalanceTask.class.getName();
+
+    private final WeakReference<TextView> accountBalanceTextViewReference;
+    private final AccountsDbAdapter accountsDbAdapter;
+
+    public AccountBalanceTask(TextView balanceTextView, Context context){
+        accountBalanceTextViewReference = new WeakReference<TextView>(balanceTextView);
+        accountsDbAdapter = new AccountsDbAdapter(context);
+    }
+
+    @Override
+    protected Money doInBackground(Long... params) {
+        //if the view for which we are doing this job is dead, kill the job as well
+        if (accountBalanceTextViewReference.get() == null){
+            cancel(true);
+            return Money.getZeroInstance();
+        }
+
+        Money balance = Money.getZeroInstance();
+        try {
+            balance = accountsDbAdapter.getAccountBalance(params[0]);
+        } catch (IllegalArgumentException ex){
+            //sometimes a load computation has been started and the data set changes.
+            //the account ID may no longer exist. So we catch that exception here and do nothing
+            Log.e(LOG_TAG, "Error computing account balance: " + ex);
+        }
+        return balance;
+    }
+
+    @Override
+    protected void onPostExecute(Money balance) {
+        if (accountBalanceTextViewReference.get() != null && balance != null){
+            final Context context = accountsDbAdapter.getContext();
+            final TextView balanceTextView = accountBalanceTextViewReference.get();
+            if (balanceTextView != null){
+                balanceTextView.setText(balance.formattedString());
+                int fontColor = balance.isNegative() ? context.getResources().getColor(R.color.debit_red) :
+                        context.getResources().getColor(R.color.credit_green);
+                balanceTextView.setTextColor(fontColor);
+            }
+        }
+        accountsDbAdapter.close();
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java b/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java
new file mode 100644
index 00000000..9ac19179
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java
@@ -0,0 +1,102 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.ui.util;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.widget.EditText;
+import android.widget.ToggleButton;
+import org.gnucash.android.ui.transaction.TransactionFormFragment;
+
+import java.math.BigDecimal;
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
+import java.util.Locale;
+
+/**
+ * Captures input string in the amount input field and parses it into a formatted amount
+ * The amount input field allows numbers to be input sequentially and they are parsed
+ * into a string with 2 decimal places. This means inputting 245 will result in the amount
+ * of 2.45
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class AmountInputFormatter implements TextWatcher {
+    private String current = "0";
+    private EditText amountEditText;
+    private ToggleButton mTypeButton;
+    /**
+     * Flag to note if the user has manually edited the amount of the transaction
+     */
+    private boolean isModified = false;
+
+    public AmountInputFormatter(EditText amountInput, ToggleButton typeButton) {
+        this.amountEditText = amountInput;
+        this.mTypeButton = typeButton;
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+        if (s.length() == 0)
+            return;
+//make sure that the sign of the input is in line with the type button state
+        BigDecimal amount = TransactionFormFragment.parseInputToDecimal(s.toString());
+        if (mTypeButton.isChecked()) {
+            if (amount.signum() > 0) {
+                amount = amount.negate();
+            }
+        } else { //if it is to increase account balance
+            if (amount.signum() <= 0) {
+//make the number positive
+                amount = amount.negate();
+            }
+        }
+
+        DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
+        formatter.setMinimumFractionDigits(2);
+        formatter.setMaximumFractionDigits(2);
+
+        current = formatter.format(amount.doubleValue());
+        amountEditText.removeTextChangedListener(this);
+        amountEditText.setText(current);
+        amountEditText.setSelection(current.length());
+        amountEditText.addTextChangedListener(this);
+
+        isModified = true;
+    }
+
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count,
+                                  int after) {
+        // nothing to see here, move along
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before,
+                              int count) {
+        // nothing to see here, move along
+        isModified = true;
+    }
+
+    /**
+     * Returns true if input has been entered into the view
+     *
+     * @return <code>true</code> if the view has been modified, <code>false</code> otherwise.
+     */
+    public boolean isInputModified() {
+        return isModified;
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java b/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
new file mode 100644
index 00000000..25ebb81f
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.ToggleButton;
+import org.gnucash.android.R;
+import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.TransactionType;
+import org.gnucash.android.ui.transaction.TransactionFormFragment;
+
+/**
+ * A special type of {@link android.widget.ToggleButton} which displays the appropriate CREDIT/DEBIT labels for the
+ * different account types.
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class TransactionTypeToggleButton extends ToggleButton {
+    private AccountType mAccountType = AccountType.EXPENSE;
+
+    public TransactionTypeToggleButton(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    public TransactionTypeToggleButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public TransactionTypeToggleButton(Context context) {
+        super(context);
+    }
+
+    public void setAccountType(AccountType accountType){
+        this.mAccountType = accountType;
+        Context context = getContext().getApplicationContext();
+        switch (mAccountType) {
+            case CASH:
+                setTextOn(context.getString(R.string.label_spend));
+                setTextOff(context.getString(R.string.label_receive));
+                break;
+            case BANK:
+                setTextOn(context.getString(R.string.label_withdrawal));
+                setTextOff(context.getString(R.string.label_deposit));
+                break;
+            case CREDIT:
+                setTextOn(context.getString(R.string.label_payment));
+                setTextOff(context.getString(R.string.label_charge));
+                break;
+            case ASSET:
+            case EQUITY:
+            case LIABILITY:
+                setTextOn(context.getString(R.string.label_decrease));
+                setTextOff(context.getString(R.string.label_increase));
+                break;
+            case INCOME:
+                setTextOn(context.getString(R.string.label_charge));
+                setTextOff(context.getString(R.string.label_income));
+                break;
+            case EXPENSE:
+                setTextOn(context.getString(R.string.label_rebate));
+                setTextOff(context.getString(R.string.label_expense));
+                break;
+            case PAYABLE:
+                setTextOn(context.getString(R.string.label_payment));
+                setTextOff(context.getString(R.string.label_bill));
+                break;
+            case RECEIVABLE:
+                setTextOn(context.getString(R.string.label_payment));
+                setTextOff(context.getString(R.string.label_invoice));
+                break;
+            case STOCK:
+            case MUTUAL:
+                setTextOn(context.getString(R.string.label_buy));
+                setTextOff(context.getString(R.string.label_sell));
+                break;
+            case CURRENCY:
+            case ROOT:
+                setTextOn(context.getString(R.string.label_debit));
+                setTextOff(context.getString(R.string.label_credit));
+                break;
+        }
+        setText(isChecked() ? getTextOn() : getTextOff());
+        invalidate();
+    }
+
+    /**
+     * Set a checked change listener to monitor the amount view and currency views and update the display (color & balance accordingly)
+     * @param amoutView Amount string {@link android.widget.EditText}
+     * @param currencyTextView Currency symbol text view
+     */
+    public void setupCheckedListener(EditText amoutView, TextView currencyTextView){
+        setOnCheckedChangeListener(new OnTypeChangedListener(amoutView, currencyTextView));
+    }
+
+    /**
+     * Returns the account type associated with this button
+     * @return
+     */
+    public AccountType getAccountType(){
+        return mAccountType;
+    }
+
+    public TransactionType getTransactionType(){
+        if (mAccountType.hasDebitNormalBalance()){
+            return isChecked() ? TransactionType.CREDIT : TransactionType.DEBIT;
+        } else {
+            return isChecked() ? TransactionType.DEBIT : TransactionType.CREDIT;
+        }
+    }
+
+    private class OnTypeChangedListener implements OnCheckedChangeListener{
+        private EditText mAmountEditText;
+        private TextView mCurrencyTextView;
+        /**
+         * Constructor with the amount view
+         * @param amountEditText EditText displaying the amount value
+         * @param currencyTextView Currency symbol text view
+         */
+        public OnTypeChangedListener(EditText amountEditText, TextView currencyTextView){
+            this.mAmountEditText = amountEditText;
+            this.mCurrencyTextView = currencyTextView;
+        }
+
+        @Override
+        public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
+            if (isChecked){
+                int red = getResources().getColor(R.color.debit_red);
+                TransactionTypeToggleButton.this.setTextColor(red);
+                mAmountEditText.setTextColor(red);
+                mCurrencyTextView.setTextColor(red);
+            }
+            else {
+                int green = getResources().getColor(R.color.credit_green);
+                TransactionTypeToggleButton.this.setTextColor(green);
+                mAmountEditText.setTextColor(green);
+                mCurrencyTextView.setTextColor(green);
+            }
+            String amountText = mAmountEditText.getText().toString();
+            if (amountText.length() > 0){
+                String changedSignText = TransactionFormFragment.parseInputToDecimal(amountText).negate().toPlainString();
+                mAmountEditText.setText(changedSignText); //trigger an edit to update the number sign
+            }
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java b/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
deleted file mode 100644
index ed1e129a..00000000
--- a/app/src/org/gnucash/android/util/GnucashAccountXmlHandler.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/*
- * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gnucash.android.util;
-
-import android.content.Context;
-import android.util.Log;
-import android.widget.Toast;
-import org.gnucash.android.R;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.xml.sax.Attributes;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
-import org.xml.sax.helpers.DefaultHandler;
-
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-import java.io.*;
-import java.util.Currency;
-import java.util.regex.Pattern;
-
-/**
- * Handler for parsing the GnuCash accounts structure file.
- * The discovered accounts are automatically added to the database
- *
- * @author Ngewi Fet <ngewif@gmail.com>
- */
-public class GnucashAccountXmlHandler extends DefaultHandler {
-
-    /*
-     * GnuCash account XML file qualified tag names. Used for matching tags
-     */
-    public static final String TAG_NAME             = "act:name";
-    public static final String TAG_UID              = "act:id";
-    public static final String TAG_TYPE             = "act:type";
-    public static final String TAG_CURRENCY         = "cmdty:id";
-    public static final String TAG_COMMODITY_SPACE  = "cmdty:space";
-    public static final String TAG_PARENT_UID       = "act:parent";
-    public static final String TAG_ACCOUNT          = "gnc:account";
-    public static final String TAG_SLOT_KEY         = "slot:key";
-    public static final String TAG_SLOT_VALUE       = "slot:value";
-
-    /**
-     * ISO 4217 currency code for "No Currency"
-     */
-    private static final String NO_CURRENCY_CODE    = "XXX";
-
-    /**
-     * Tag for logging
-     */
-    private static final String LOG_TAG = "GnuCashAccountImporter";
-
-    /**
-     * Value for placeholder slots in GnuCash account structure file
-     */
-    private static final String PLACEHOLDER_KEY = "placeholder";
-
-    /**
-     * Value of color slots in GnuCash account structure file
-     */
-    private static final String COLOR_KEY = "color";
-
-    AccountsDbAdapter mDatabaseAdapter;
-
-    /**
-     * StringBuilder for accumulating characters between XML tags
-     */
-    StringBuilder mContent;
-
-    /**
-     * Reference to account which is built when each account tag is parsed in the XML file
-     */
-    Account mAccount;
-
-    boolean mInColorSlot        = false;
-    boolean mInPlaceHolderSlot  = false;
-    boolean mISO4217Currency    = false;
-
-    public GnucashAccountXmlHandler(Context context) {
-        mDatabaseAdapter = new AccountsDbAdapter(context);
-        mContent = new StringBuilder();
-    }
-
-    @Override
-    public void startElement(String uri, String localName,
-                             String qualifiedName, Attributes attributes) throws SAXException {
-        if (qualifiedName.equalsIgnoreCase(TAG_ACCOUNT)) {
-            mAccount = new Account("new"); //dummy name, will be replaced when we find name tag
-        }
-    }
-
-    @Override
-    public void endElement(String uri, String localName, String qualifiedName) throws SAXException {
-        String characterString = mContent.toString().trim();
-
-        if (qualifiedName.equalsIgnoreCase(TAG_NAME)) {
-            mAccount.setName(characterString);
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_UID)){
-            mAccount.setUID(characterString);
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_TYPE)){
-            mAccount.setAccountType(Account.AccountType.valueOf(characterString));
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_COMMODITY_SPACE)){
-            if (characterString.equalsIgnoreCase("ISO4217")){
-                mISO4217Currency = true;
-            }
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_CURRENCY)){
-            if (mAccount != null){
-                String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
-                mAccount.setCurrency(Currency.getInstance(currencyCode));
-            }
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_PARENT_UID)){
-            mAccount.setParentUID(characterString);
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_ACCOUNT)){
-            Log.d(LOG_TAG, "Saving account...");
-            mDatabaseAdapter.addAccount(mAccount);
-
-            //reset ISO 4217 flag for next account
-            mISO4217Currency = false;
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_SLOT_KEY)){
-            if (characterString.equals(PLACEHOLDER_KEY)){
-                mInPlaceHolderSlot = true;
-            }
-            if (characterString.equals(COLOR_KEY)){
-                mInColorSlot = true;
-            }
-        }
-
-        if (qualifiedName.equalsIgnoreCase(TAG_SLOT_VALUE)){
-            if (mInPlaceHolderSlot){
-                if (characterString.equals("true")){
-                    Log.d(LOG_TAG, "Setting account placeholder flag");
-                    mAccount.setPlaceHolderFlag(true);
-                };
-                mInPlaceHolderSlot = false;
-            }
-
-            if (mInColorSlot){
-                String color = characterString.trim();
-                //Gnucash exports the account color in format #rrrgggbbb, but we need only #rrggbb.
-                //so we trim the last digit in each block, doesn't affect the color much
-                if (!Pattern.matches(Account.COLOR_HEX_REGEX, color))
-                    color = "#" + color.replaceAll(".(.)?", "$1").replace("null", "");
-                try {
-                    mAccount.setColorCode(color);
-                } catch (IllegalArgumentException ex){
-                    //sometimes the color entry in the account file is "Not set" instead of just blank. So catch!
-                    Log.i(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
-                    ex.printStackTrace();
-                }
-
-                mInColorSlot = false;
-            }
-        }
-        //reset the accumulated characters
-        mContent.setLength(0);
-    }
-
-    @Override
-    public void characters(char[] chars, int start, int length) throws SAXException {
-        mContent.append(chars, start, length);
-    }
-
-    public static void parse(Context context, InputStream accountsInputStream){
-        try {
-            SAXParserFactory spf = SAXParserFactory.newInstance();
-            SAXParser sp = spf.newSAXParser();
-            XMLReader xr = sp.getXMLReader();
-
-            BufferedInputStream bos = new BufferedInputStream(accountsInputStream);
-
-            /** Create handler to handle XML Tags ( extends DefaultHandler ) */
-
-            GnucashAccountXmlHandler handler = new GnucashAccountXmlHandler(context);
-            xr.setContentHandler(handler);
-            xr.parse(new InputSource(bos));
-            handler.mDatabaseAdapter.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-            Toast.makeText(context, R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
-        }
-    }
-}
diff --git a/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java b/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
index edbf2e83..90e7f854 100644
--- a/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
+++ b/app/src/org/gnucash/android/util/QualifiedAccountNameCursorAdapter.java
@@ -25,6 +25,7 @@
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.DatabaseSchema;
 
 /**
  * Cursor adapter which looks up the fully qualified account name and returns that instead of just the simple name.
@@ -36,7 +37,7 @@
 
     public QualifiedAccountNameCursorAdapter(Context context, int layout, Cursor c) {
         super(context, layout, c,
-                new String[] {DatabaseHelper.KEY_FULL_NAME},
+                new String[] {DatabaseSchema.AccountEntry.COLUMN_FULL_NAME},
                 new int[] {android.R.id.text1}, 0);
     }
 
diff --git a/integration-tests/AndroidManifest.xml b/integration-tests/AndroidManifest.xml
index ff7e1ceb..4af4c04c 100644
--- a/integration-tests/AndroidManifest.xml
+++ b/integration-tests/AndroidManifest.xml
@@ -4,7 +4,7 @@
     android:versionCode="3"
     android:versionName="1.2.4" >
 
-    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15" />
+    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16" />
 
     <uses-permission android:name="org.gnucash.android.permission.RECORD_TRANSACTION" />
     <uses-permission android:name="org.gnucash.android.permission.CREATE_ACCOUNT" />
diff --git a/integration-tests/pom.xml b/integration-tests/pom.xml
index 6c32e8fe..15c8973b 100644
--- a/integration-tests/pom.xml
+++ b/integration-tests/pom.xml
@@ -17,7 +17,7 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
     <parent>
-		<version>1.3.2-SNAPSHOT</version>
+		<version>1.4.0-SNAPSHOT</version>
 		<groupId>org.gnucash.android</groupId>
 		<artifactId>gnucash-android-parent</artifactId>
 	</parent>
diff --git a/integration-tests/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java b/integration-tests/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java
index a5eacc71..e7f6e3c2 100644
--- a/integration-tests/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java
+++ b/integration-tests/src/org/gnucash/android/test/db/AccountsDbAdapterTest.java
@@ -21,14 +21,11 @@ protected void setUp() throws Exception {
 		mAdapter = new AccountsDbAdapter(getContext());
 		mAdapter.deleteAllRecords();
 		Account first = new Account(ALPHA_ACCOUNT_NAME);
-		Transaction t1 = new Transaction("2.99", "T800");
-		t1.setAccountUID(first.getUID());
-		Transaction t2 = new Transaction("4.99", "T1000");
-		t2.setAccountUID(first.getUID());
+		Transaction t1 = new Transaction("T800");
+		Transaction t2 = new Transaction("T1000");
 		
 		Account second = new Account(BRAVO_ACCOUNT_NAME);
-		Transaction t = new Transaction("9.99", "buyout");
-		t.setAccountUID(second.getUID());
+		Transaction t = new Transaction("buyout");
 		
 		mAdapter.addAccount(second);
 		mAdapter.addAccount(first);
@@ -45,8 +42,8 @@ public void testAlphabeticalSorting(){
 	public void testTransactionsHaveSameCurrencyAsAccount(){
 		Account acc1 = new Account("Japanese", Currency.getInstance("JPY"));
 		acc1.setUID("simile");
-		Transaction trx = new Transaction("2.50", "Underground");
-		Transaction term = new Transaction("3.49", "Tube");
+		Transaction trx = new Transaction("Underground");
+		Transaction term = new Transaction( "Tube");
 		acc1.addTransaction(trx);
 		acc1.addTransaction(term);
 		
@@ -54,7 +51,7 @@ public void testTransactionsHaveSameCurrencyAsAccount(){
 		
 		Account account = mAdapter.getAccount("simile");
 		for (Transaction t : account.getTransactions()) {
-			assertEquals("JPY", t.getAmount().getCurrency().getCurrencyCode());
+			assertEquals("JPY", t.getBalance(acc1.getUID()).getCurrency().getCurrencyCode());
 		}
 	}
 	
diff --git a/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java b/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
index c5957762..251d4304 100644
--- a/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
+++ b/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
@@ -23,15 +23,15 @@ protected void setUp() throws Exception {
 		AccountsDbAdapter accountsAdapter = new AccountsDbAdapter(mContext);
 		Account first = new Account(ALPHA_ACCOUNT_NAME);
 		first.setUID(ALPHA_ACCOUNT_UID);
-		Transaction t1 = new Transaction("2.99", "T800");
+		Transaction t1 = new Transaction("T800");
 		t1.setTime(System.currentTimeMillis() - 10000);
-		Transaction t2 = new Transaction("4.99", "T1000");
+		Transaction t2 = new Transaction( "T1000");
 		t2.setTime(System.currentTimeMillis());
 		first.addTransaction(t1);
 		first.addTransaction(t2);
 		
 		Account second = new Account(BRAVO_ACCOUNT_NAME);
-		Transaction t = new Transaction("9.99", "buyout");
+		Transaction t = new Transaction( "buyout");
 		second.addTransaction(t);
 		
 		accountsAdapter.addAccount(second);
diff --git a/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java b/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java
index e97b8603..a173f31d 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -203,8 +203,7 @@ public void testDeleteAccount(){
         Account acc = new Account(accountNameToDelete);
         acc.setUID(accountUidToDelete);
 
-        Transaction transaction = new Transaction("5.99", "hats");
-        transaction.setAccountUID(accountUidToDelete);
+        Transaction transaction = new Transaction("hats");
         acc.addTransaction(transaction);
         AccountsDbAdapter accDbAdapter = new AccountsDbAdapter(getActivity());
         accDbAdapter.addAccount(acc);
@@ -243,8 +242,7 @@ public void testDisplayTransactionsList(){
         //first create a couple of transations
         TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(getActivity());
         for (int i = 0; i < TRANSACTION_COUNT; i++) {
-            Transaction transaction = new Transaction(Money.getZeroInstance(), "Transaxion " + i);
-            transaction.setAccountUID(DUMMY_ACCOUNT_UID);
+            Transaction transaction = new Transaction("Transaxion " + i);
             transactionsDbAdapter.addTransaction(transaction);
         }
         transactionsDbAdapter.close();
diff --git a/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
index f5ebfc97..47f8a055 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -19,13 +19,13 @@
 import java.io.File;
 
 import org.gnucash.android.R;
+import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.ui.account.AccountsActivity;
-import org.gnucash.android.export.ExportDialogFragment;
 
 import android.os.Environment;
 import android.test.ActivityInstrumentationTestCase2;
@@ -48,7 +48,7 @@ protected void setUp() throws Exception {
 		mSolo = new Solo(getInstrumentation(), getActivity());	
 		
 		Account account = new Account("Exportable");		
-		Transaction transaction = new Transaction("9.99", "Pizza");		
+		Transaction transaction = new Transaction("Pizza");
 		transaction.setDescription("What up?");
 		transaction.setTime(System.currentTimeMillis());
 		
@@ -80,7 +80,7 @@ public void testOfxExport(){
 		
 		//the file name is time-based (down to the minute), so we cache it here, 
 		//as close as possible to the export itself to minimize difference
-		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		String filename = Exporter.buildExportFilename(ExportFormat.OFX);
 		
 		mSolo.waitForDialogToClose(2000);
         mSolo.sleep(2000);
@@ -112,7 +112,7 @@ public void testQifExport(){
 
         //the file name is time-based (down to the minute), so we cache it here,
         //as close as possible to the export itself to minimize difference
-        String filename = ExportDialogFragment.buildExportFilename(ExportFormat.QIF);
+        String filename = Exporter.buildExportFilename(ExportFormat.QIF);
 
         mSolo.waitForDialogToClose(10000);
 
@@ -174,7 +174,7 @@ public void testShouldIgnoreExportedTransactions(){
 		//the file name is time-based (down to the minute), so we cache it here, 
 		//as close as possible to the export itself to minimize chance of a different name 
 		//due to a different minute
-		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		String filename = Exporter.buildExportFilename(ExportFormat.OFX);
 		
 		mSolo.waitForDialogToClose(10000);
 				
@@ -207,7 +207,7 @@ public void testExportAlreadyExportedTransactions(){
 		//the file name is time-based (down to the minute), so we cache it here, 
 		//as close as possible to the export itself to minimize chance of a different name 
 		//due to a different minute
-		String filename = ExportDialogFragment.buildExportFilename(ExportFormat.OFX);
+		String filename = Exporter.buildExportFilename(ExportFormat.OFX);
 		
 		mSolo.waitForDialogToClose(10000);		
 		
diff --git a/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 43cb3316..2fa68105 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -67,8 +67,7 @@ protected void setUp() throws Exception {
         Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
         account.setCurrency(Currency.getInstance(Locale.getDefault()));
-        mTransaction = new Transaction(TRANSACTION_AMOUNT, TRANSACTION_NAME);
-        mTransaction.setAccountUID(DUMMY_ACCOUNT_UID);
+        mTransaction = new Transaction(TRANSACTION_NAME);
         mTransaction.setDescription("What up?");
         mTransaction.setTime(mTransactionTimeMillis);
 
@@ -159,7 +158,7 @@ private void validateEditTransactionFields(Transaction transaction){
 			e.printStackTrace();
 		}
 		Money amount = new Money(amountString, Currency.getInstance(Locale.getDefault()).getCurrencyCode());
-		assertEquals(transaction.getAmount(), amount);
+		assertEquals(transaction.getBalance(DUMMY_ACCOUNT_UID), amount);
 		
 		String description = mSolo.getEditText(2).getText().toString();
 		assertEquals(transaction.getDescription(), description);
@@ -285,7 +284,7 @@ public void testToggleTransactionType(){
 		
 		assertEquals(1, transactions.size());
 		Transaction trx = transactions.get(0);
-		assertTrue(trx.getAmount().isNegative());
+		assertTrue(trx.getBalance(DUMMY_ACCOUNT_UID).isNegative());
 
         mSolo.goBack();
 	}
@@ -310,7 +309,6 @@ public void testOpenTransactionEditShouldNotModifyTransaction(){
 			assertEquals(1, transactions.size());
 			Transaction trx = transactions.get(0);
 			assertEquals(TRANSACTION_NAME, trx.getName());
-			assertEquals(trx.getAccountUID(), DUMMY_ACCOUNT_UID);
 			Date expectedDate = new Date(mTransactionTimeMillis);
 			Date trxDate = new Date(trx.getTimeMillis());
 			assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
@@ -403,7 +401,7 @@ public void testIntentTransactionRecording(){
 		for (Transaction transaction : transactions) {
 			if (transaction.getName().equals("Power intents")){
 				assertEquals("Intents for sale", transaction.getDescription());
-				assertEquals(4.99, transaction.getAmount().asDouble());
+				assertEquals(4.99, transaction.getBalance(DUMMY_ACCOUNT_UID).asDouble());
 			}
 		}
 		
diff --git a/pom.xml b/pom.xml
index 3bb0faac..94eaf0cd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -17,7 +17,7 @@
 
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
-	<version>1.3.2-SNAPSHOT</version>
+	<version>1.4.0-SNAPSHOT</version>
     <groupId>org.gnucash.android</groupId>
     <artifactId>gnucash-android-parent</artifactId>
     <name>GnuCash Android parent</name>
@@ -45,7 +45,7 @@
                     <configuration>
                         <sdk>
                             <path>${env.ANDROID_HOME}</path>
-                            <platform>15</platform>
+                            <platform>16</platform>
                         </sdk>
                         <undeployBeforeDeploy>true</undeployBeforeDeploy>
                     </configuration>

From 1bb59865af67db1505719d408078c2b64eef63f1 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 23 Jul 2014 11:27:27 +0200
Subject: [PATCH 02/18] Fixed: Database migration fails if non-double-entry
 transactions exist Fixed: Updated "transaction sum" label to "balance"
 Feature: Backup db before any major deletion operations Feature: Added UI
 option for restoring last backup

---
 app/res/layout/transactions_sum_bar.xml            |  2 +-
 app/res/values-de/strings.xml                      |  2 +-
 app/res/values-el/strings.xml                      |  2 +-
 app/res/values-es-rMX/strings.xml                  |  2 +-
 app/res/values-es/strings.xml                      |  2 +-
 app/res/values-fr/strings.xml                      |  2 +-
 app/res/values-hu/strings.xml                      |  2 +-
 app/res/values-it/strings.xml                      |  2 +-
 app/res/values-nb/strings.xml                      |  2 +-
 app/res/values-nl/strings.xml                      |  2 +-
 app/res/values-pt-rBR/strings.xml                  |  2 +-
 app/res/values-ru/strings.xml                      |  2 +-
 app/res/values-zh/strings.xml                      |  2 +-
 app/res/values/strings.xml                         |  3 +-
 app/res/xml/fragment_general_preferences.xml       |  2 +-
 app/src/org/gnucash/android/db/DatabaseHelper.java | 14 ++++-
 .../org/gnucash/android/db/MigrationHelper.java    | 22 ++++++++
 .../gnucash/android/db/TransactionsDbAdapter.java  | 13 ++++-
 app/src/org/gnucash/android/export/Exporter.java   | 63 ++++++++++++++++++++++
 .../org/gnucash/android/export/ExporterTask.java   | 12 +++--
 .../gnucash/android/export/xml/GncXmlExporter.java | 27 +++++++++-
 .../gnucash/android/importer/GncXmlImportTask.java |  5 ++
 .../DeleteAllAccountsConfirmationDialog.java       |  2 +
 .../DeleteAllTransacationsConfirmationDialog.java  |  2 +
 .../ui/settings/GeneralPreferenceFragment.java     |  3 ++
 .../android/ui/settings/SettingsActivity.java      | 29 +++++++---
 ...ansactionsDeleteConfirmationDialogFragment.java |  2 +
 27 files changed, 193 insertions(+), 32 deletions(-)

diff --git a/app/res/layout/transactions_sum_bar.xml b/app/res/layout/transactions_sum_bar.xml
index 0c53c575..4342a2cf 100644
--- a/app/res/layout/transactions_sum_bar.xml
+++ b/app/res/layout/transactions_sum_bar.xml
@@ -30,7 +30,7 @@
 			android:gravity="left|center_vertical"
 			android:layout_weight="1"
 			android:layout_marginLeft="@dimen/edge_padding"
-			android:text="@string/label_transactions_total" 			
+			android:text="@string/label_account_balance"
 			style="@style/ListItemText" />
 		
 		<TextView android:id="@+id/transactions_sum"
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index b29325bb..dff29810 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -46,7 +46,6 @@
     <string name="label_transaction_description">Notizen</string>
     <string name="menu_move">Verschieben</string>
     <string name="title_selected">%1$d ausgew&#228;hlt</string>
-    <string name="label_transactions_total">Summe:</string>
     <string name="label_export_destination">Exportziel</string>
     <string name="title_export_dialog">Buchungen exportieren</string>
     <string name="option_export_all_transactions">Alle Buchungen exportieren</string>
@@ -412,4 +411,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index b9662c1f..7d08fa27 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -47,7 +47,6 @@
     <string name="label_transaction_description"></string>
     <string name="menu_move"></string>
     <string name="title_selected">%1$d </string>
-    <string name="label_transactions_total"> :</string>
     <string name="label_export_destination"> </string>
     <string name="title_export_dialog">Export transactions</string>
     <string name="option_export_all_transactions">   </string>
@@ -429,4 +428,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index f0f543e3..22b4827a 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -47,7 +47,6 @@
     <string name="label_transaction_description">Descripci&#243;n</string>
     <string name="menu_move">Mover</string>
     <string name="title_selected">%1$d seleccionado</string>
-    <string name="label_transactions_total">Total:</string>
     <string name="label_export_destination">Exportar Destino</string>
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
@@ -414,4 +413,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 6650b4d7..d475043c 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -47,7 +47,6 @@
     <string name="label_transaction_description">Nota</string>
     <string name="menu_move">MOVER</string>
     <string name="title_selected">%1$d seleccionado</string>
-    <string name="label_transactions_total">Total:</string>
     <string name="label_export_destination">Destino de la exportaci&#243;n</string>
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
@@ -411,4 +410,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 2b9e8aa4..09fe5280 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -47,7 +47,6 @@
     <string name="label_transaction_description">Note</string>
     <string name="menu_move">DPLACER</string>
     <string name="title_selected">%1$d s&#233;lectionn(s)</string>
-    <string name="label_transactions_total">Total :</string>
     <string name="label_export_destination">Destination d\'export</string>
     <string name="title_export_dialog">Exporter les transactions</string>
     <string name="option_export_all_transactions">Exporter toutes les transactions</string>
@@ -410,5 +409,6 @@
     <string name="label_invoice">Invoice</string>
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
+    <string name="label_account_balance">Balance:</string>
     <string name="label_repeats">Repeats</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 64584f92..4ee69b69 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -46,7 +46,7 @@
     <string name="label_transaction_description">Note</string>
     <string name="menu_move">MOVE</string>
     <string name="title_selected">%1$d selected</string>
-    <string name="label_transactions_total">Total sum:</string>
+    <string name="label_account_balance">Balance:</string>
     <string name="label_export_destination">Export Destination</string>
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index afd87127..1ba794a3 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -47,7 +47,7 @@
     <string name="label_transaction_description">Nota</string>
     <string name="menu_move">SPOSTA</string>
     <string name="title_selected">%1$d selezionate</string>
-    <string name="label_transactions_total">Somma totale:</string>
+    <string name="label_account_balance">Somma totale:</string>
     <string name="label_export_destination">Destinazione di esportazione</string>
     <string name="title_export_dialog">Esporta transazioni</string>
     <string name="option_export_all_transactions">Esporta tutte le transazioni</string>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index e472e1f0..13ab971e 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -48,7 +48,6 @@
     <string name="label_transaction_description">Notat</string>
     <string name="menu_move">FLYTT</string>
     <string name="title_selected">%1$d valgt</string>
-    <string name="label_transactions_total">Totalt belp:</string>
     <string name="label_export_destination">Eksportmottaker</string>
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Eksporter alle transaksjoner</string>
@@ -414,4 +413,5 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index c398bdd3..2ed4b5a0 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -47,7 +47,6 @@
     <string name="label_transaction_description">Opmerking</string>
     <string name="menu_move">Verplaatsen</string>
     <string name="title_selected">%1$d gselecteerd</string>
-    <string name="label_transactions_total">Totaalbedrag:</string>
     <string name="label_export_destination">Export bestemming</string>
     <string name="title_export_dialog">OFX Exporteren</string>
     <string name="option_export_all_transactions">All transacties exporteren</string>
@@ -416,4 +415,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 38ed5310..35fc8651 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -46,7 +46,6 @@
 	  <string name="label_transaction_description">Nota</string>
 	  <string name="menu_move">MOVER</string>
 	  <string name="title_selected">%1$d selecionado</string>
-	  <string name="label_transactions_total">Total:</string>
 	  <string name="label_export_destination">Exportar para:</string>
 	  <string name="title_export_dialog">Export Transactions</string>
 	  <string name="option_export_all_transactions">Exportar todas as transaes</string>
@@ -414,4 +413,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 94115e95..eb3cc625 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -47,7 +47,6 @@
     <string name="label_transaction_description"></string>
     <string name="menu_move"></string>
     <string name="title_selected">%1$d </string>
-    <string name="label_transactions_total"> :</string>
     <string name="label_export_destination"> </string>
     <string name="title_export_dialog"> </string>
     <string name="option_export_all_transactions"> </string>
@@ -415,4 +414,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 18711b55..80164713 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -46,7 +46,6 @@
     <string name="label_transaction_description"></string>
     <string name="menu_move"></string>
     <string name="title_selected">%1$d </string>
-    <string name="label_transactions_total"></string>
     <string name="label_export_destination"></string>
     <string name="title_export_dialog"></string>
     <string name="option_export_all_transactions"></string>
@@ -409,4 +408,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="label_account_balance">Balance:</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 2d32c94a..170b5d16 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -47,7 +47,7 @@
     <string name="label_transaction_description">Note</string>
     <string name="menu_move">MOVE</string>
     <string name="title_selected">%1$d selected</string>
-    <string name="label_transactions_total">Total sum:</string>
+    <string name="label_account_balance">Balance:</string>
     <string name="label_export_destination">Export Destination</string>
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
@@ -645,4 +645,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="key_restore_backup">restore_backup</string>
 </resources>
diff --git a/app/res/xml/fragment_general_preferences.xml b/app/res/xml/fragment_general_preferences.xml
index 5ea542b2..0ae77125 100644
--- a/app/res/xml/fragment_general_preferences.xml
+++ b/app/res/xml/fragment_general_preferences.xml
@@ -29,7 +29,7 @@
         <CheckBoxPreference android:summary="@string/hint_export_choice" android:key="@string/key_export_all_transactions" android:title="@string/title_export_all_transactions"/>
         <CheckBoxPreference android:summary="@string/hint_delete_after_export" android:key="@string/key_delete_transactions_after_export" android:title="@string/title_always_delete_exported_transactions"/>
         <CheckBoxPreference android:key="@string/key_xml_ofx_header" android:summary="@string/summary_xml_ofx_header" android:title="@string/title_xml_ofx_header"/>
-        
+        <Preference android:summary="Restore accounts and transactions from the last backup" android:key="@string/key_restore_backup" android:title="Restore last backup" />
     </PreferenceCategory>
     
     
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index 29844a64..5fbc81b0 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -25,6 +25,10 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.model.AccountType;
 
+import java.util.Currency;
+import java.util.List;
+import java.util.Locale;
+
 import static org.gnucash.android.db.DatabaseSchema.*;
 
 /**
@@ -214,10 +218,16 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             }
 
             if (oldVersion == 6 && newVersion >= DatabaseSchema.SPLITS_DB_VERSION){
-                //TODO: add account description and starting balance
-
                 Log.i(LOG_TAG, "Upgrading database to version 7");
 
+                //for users who do not have double-entry activated, we create imbalance accounts for their splits
+                //TODO: Enable when we can hide imbalance accounts from user
+//                List<Currency> currencies = MigrationHelper.getCurrencies(db);
+//                AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db);
+//                for (Currency currency : currencies) {
+//                    accountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
+//                }
+
                 String filepath = MigrationHelper.exportDatabase(db, ExportFormat.GNC_XML);
 
                 dropAllDatabaseTables(db);
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index 36ad0f35..ec51c83b 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -31,6 +31,9 @@
 import org.gnucash.android.model.AccountType;
 
 import java.io.*;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.List;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
@@ -150,6 +153,25 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
     }
 
     /**
+     * Returns the list of currencies in the database
+     * @return List of currencies in the database
+     */
+    static List<Currency> getCurrencies(SQLiteDatabase db){
+
+        Cursor cursor = db.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
+                null, null, null, null, null, null);
+        List<Currency> currencyList = new ArrayList<Currency>();
+        if (cursor != null){
+            while (cursor.moveToNext()){
+                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+                currencyList.add(Currency.getInstance(currencyCode));
+            }
+            cursor.close();
+        }
+        return currencyList;
+    }
+
+    /**
      * Imports GnuCash XML into the database from file
      * @param filepath Path to GnuCash XML file
      */
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 9d65c768..ce4a9cf1 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -29,6 +29,7 @@
 import static org.gnucash.android.db.DatabaseSchema.*;
 
 import java.util.ArrayList;
+import java.util.Currency;
 import java.util.List;
 
 /**
@@ -246,7 +247,6 @@ public Transaction buildTransactionInstance(Cursor c){
 
         if (mDb.getVersion() < SPLITS_DB_VERSION){ //legacy, will be used once, when migrating the database
             String accountUID = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
-            String transferAccountUID = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID));
             String amountString = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_AMOUNT));
             String currencyCode = getCurrencyCode(accountUID);
             Money amount = new Money(amountString, currencyCode);
@@ -255,7 +255,16 @@ public Transaction buildTransactionInstance(Cursor c){
             TransactionType type = Transaction.getTypeForBalance(getAccountType(accountUID), amount.isNegative());
             split.setType(type);
             transaction.addSplit(split);
-            transaction.addSplit(split.createPair(transferAccountUID));
+
+            String transferAccountUID = c.getString(c.getColumnIndexOrThrow(DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID));
+            //TODO: Enable this when we can successfully hide imbalance accounts from the user
+//            if (transferAccountUID == null) {
+//                AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(mDb);
+//                transferAccountUID = accountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode));
+//                accountsDbAdapter.close();
+//            }
+            if (transferAccountUID != null)
+                transaction.addSplit(split.createPair(transferAccountUID));
         } else {
             transaction.setCurrencyCode(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_CURRENCY)));
             long transactionID = c.getLong(c.getColumnIndexOrThrow(TransactionEntry._ID));
diff --git a/app/src/org/gnucash/android/export/Exporter.java b/app/src/org/gnucash/android/export/Exporter.java
index 5fbb4479..d70413f1 100644
--- a/app/src/org/gnucash/android/export/Exporter.java
+++ b/app/src/org/gnucash/android/export/Exporter.java
@@ -18,9 +18,12 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
+import android.os.Environment;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 
+import java.io.File;
+import java.io.FileFilter;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
@@ -31,6 +34,19 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public abstract class Exporter {
+    /**
+     * Folder where exports like QIF and OFX will be saved for access by external programs
+     */
+    public static final String EXPORT_FOLDER_PATH = Environment.getExternalStorageDirectory() + "/gnucash/";
+
+    /**
+     * Folder where GNC_XML backups will be saved
+     */
+    public static final String BACKUP_FOLDER_PATH = EXPORT_FOLDER_PATH + "backup/";
+
+    /**
+     * Export options
+     */
     protected ExportParams mParameters;
 
     /**
@@ -70,6 +86,53 @@ public static String buildExportFilename(ExportFormat format) {
     }
 
     /**
+     * Builds a file (creating folders where necessary) for saving the exported data
+     * @param format Export format which determines the file extension
+     * @return File for export
+     * @see #EXPORT_FOLDER_PATH
+     */
+    public static File createExportFile(ExportFormat format){
+        new File(EXPORT_FOLDER_PATH).mkdirs();
+        return new File(EXPORT_FOLDER_PATH + buildExportFilename(format));
+    }
+
+    /**
+     * Builds a file for backups of the database (in GNC_XML) format
+     * @return File for saving backups
+     * @see #BACKUP_FOLDER_PATH
+     */
+    public static File createBackupFile(){
+        new File(BACKUP_FOLDER_PATH).mkdirs();
+        return new File(BACKUP_FOLDER_PATH + buildExportFilename(ExportFormat.GNC_XML));
+    }
+
+    /**
+     * Returns the most recent backup file from the backup folder
+     * @return Last modified file from backup folder
+     * @see #BACKUP_FOLDER_PATH
+     */
+    public static File getMostRecentBackupFile(){
+        File backupFolder = new File(BACKUP_FOLDER_PATH);
+        if (!backupFolder.exists())
+            return null;
+
+        File[] files = backupFolder.listFiles(new FileFilter() {
+            public boolean accept(File file) {
+                return file.isFile();
+            }
+        });
+        long lastMod = Long.MIN_VALUE;
+        File backupFile = null;
+        for (File file : files) {
+            if (file.lastModified() > lastMod) {
+                backupFile = file;
+                lastMod = file.lastModified();
+            }
+        }
+        return backupFile;
+    }
+
+    /**
      * Generates the export output
      * @return Export output as String
      * @throws ExporterException if an error occurs during export
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterTask.java
index 66b69af1..a4e886f9 100644
--- a/app/src/org/gnucash/android/export/ExporterTask.java
+++ b/app/src/org/gnucash/android/export/ExporterTask.java
@@ -21,7 +21,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.os.Environment;
+import android.os.Build;
 import android.preference.PreferenceManager;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
@@ -75,6 +75,10 @@ protected void onPreExecute() {
         mProgressDialog.setTitle(R.string.title_progress_exporting_transactions);
         mProgressDialog.setIndeterminate(true);
         mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){
+            mProgressDialog.setProgressNumberFormat(null);
+            mProgressDialog.setProgressPercentFormat(null);
+        }
         mProgressDialog.show();
     }
 
@@ -120,7 +124,7 @@ protected Boolean doInBackground(ExportParams... params) {
      */
     @Override
     protected void onPostExecute(Boolean exportResult) {
-        //TODO: Internationalize error strings
+        //TODO: generalize format error strings
         if (!exportResult){
             Toast.makeText(mContext,
                     mContext.getString(R.string.toast_error_exporting),
@@ -135,9 +139,7 @@ protected void onPostExecute(Boolean exportResult) {
 
             case SD_CARD:
                 File src = new File(mExportParams.getTargetFilepath());
-                new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-                File dst = new File(Environment.getExternalStorageDirectory()
-                        + "/gnucash/" + Exporter.buildExportFilename(mExportParams.getExportFormat()));
+                File dst = Exporter.createExportFile(mExportParams.getExportFormat());
 
                 try {
                     copyFile(src, dst);
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index f2afb814..5bed6449 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -17,8 +17,9 @@
 package org.gnucash.android.export.xml;
 
 import android.database.sqlite.SQLiteDatabase;
-import org.gnucash.android.db.AccountsDbAdapter;
+import android.util.Log;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
@@ -29,9 +30,14 @@
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.*;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+import java.io.IOException;
 import java.io.StringWriter;
 import java.util.List;
 import java.util.UUID;
@@ -150,4 +156,21 @@ public String generateExport() throws ExporterException{
         }
         return stringWriter.toString();
     }
+
+    /**
+     * Creates a backup of current database contents to the default backup location
+     */
+    public static void createBackup(){
+        ExportParams params = new ExportParams(ExportFormat.GNC_XML);
+        try {
+            FileWriter fileWriter = new FileWriter(Exporter.createBackupFile());
+            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
+            bufferedWriter.write(new GncXmlExporter(params).generateExport());
+            bufferedWriter.flush();
+
+        } catch (IOException e) {
+            e.printStackTrace();
+            Log.e("GncXmlExporter", "Error creating backup", e);
+        }
+    }
 }
diff --git a/app/src/org/gnucash/android/importer/GncXmlImportTask.java b/app/src/org/gnucash/android/importer/GncXmlImportTask.java
index 109c246c..37af3317 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImportTask.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImportTask.java
@@ -17,6 +17,7 @@
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.widget.Toast;
 import org.gnucash.android.R;
 import org.gnucash.android.ui.account.AccountsActivity;
@@ -42,6 +43,10 @@ protected void onPreExecute() {
         progressDialog.setTitle(R.string.title_progress_importing_accounts);
         progressDialog.setIndeterminate(true);
         progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){
+            progressDialog.setProgressNumberFormat(null);
+            progressDialog.setProgressPercentFormat(null);
+        }
         progressDialog.show();
     }
 
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
index 9872a809..e4668af6 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllAccountsConfirmationDialog.java
@@ -25,6 +25,7 @@
 import android.widget.Toast;
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 /**
@@ -49,6 +50,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                         new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int whichButton) {
                                 Context context = getDialog().getContext();
+                                GncXmlExporter.createBackup();
                                 AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
                                 accountsDbAdapter.deleteAllRecords();
                                 accountsDbAdapter.close();
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index d69f7ca0..f4ab870b 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -9,6 +9,7 @@
 import android.widget.Toast;
 import org.gnucash.android.R;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
 /**
@@ -32,6 +33,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                 .setPositiveButton(R.string.alert_dialog_ok_delete,
                         new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int whichButton) {
+                                GncXmlExporter.createBackup();
                                 Context context = getDialog().getContext();
                                 TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(context);
                                 transactionsDbAdapter.deleteAllRecords();
diff --git a/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
index b0e174b9..23f1ea38 100644
--- a/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/GeneralPreferenceFragment.java
@@ -69,6 +69,9 @@ public void onResume() {
             pref.setSummary(defaultExportFormat);
         }
         pref.setOnPreferenceChangeListener(this);
+
+        pref = findPreference(getString(R.string.key_restore_backup));
+        pref.setOnPreferenceClickListener((SettingsActivity)getActivity());
 	}
 
     /**
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index e9e974b6..7b54f108 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -32,14 +32,15 @@
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
+import org.gnucash.android.export.Exporter;
+import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.ui.account.AccountsActivity;
 
-import java.io.FileNotFoundException;
-import java.io.InputStream;
+import java.io.*;
 import java.util.List;
 import java.util.Timer;
 import java.util.TimerTask;
@@ -126,10 +127,8 @@ protected void onCreate(Bundle savedInstanceState) {
             pref = findPreference(getString(R.string.key_build_version));
             pref.setOnPreferenceClickListener(this);
 
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB){
-                pref = findPreference(getString(R.string.key_create_default_accounts));
-                pref.setOnPreferenceClickListener(this);
-            }
+            pref = findPreference(getString(R.string.key_restore_backup));
+            pref.setOnPreferenceClickListener(this);
 		}
 	}
 
@@ -192,6 +191,10 @@ public boolean onPreferenceClick(Preference preference) {
             return true;
         }
 
+        if (key.equals(getString(R.string.key_restore_backup))){
+            importMostRecentBackup();
+        }
+
         //since we cannot get a support FragmentManager in the SettingsActivity pre H0NEYCOMB,
         //we will just use 2 taps within 2 seconds as confirmation
         if (key.equals(getString(R.string.key_delete_all_accounts))){
@@ -199,6 +202,7 @@ public boolean onPreferenceClick(Preference preference) {
             if (mDeleteAccountsClickCount < 2){
                 Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
             } else {
+                GncXmlExporter.createBackup(); //create backup before deleting everything
                 AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
                 accountsDbAdapter.deleteAllRecords();
                 accountsDbAdapter.close();
@@ -214,6 +218,7 @@ public boolean onPreferenceClick(Preference preference) {
             if (mDeleteTransactionsClickCount < 2){
                 Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
             } else {
+                GncXmlExporter.createBackup(); //create backup before deleting everything
                 TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(this);
                 transactionsDbAdapter.deleteAllRecords();
                 transactionsDbAdapter.close();
@@ -251,6 +256,18 @@ public void importAccounts() {
 
     }
 
+    public void importMostRecentBackup(){
+        Log.i("Settings", "Importing GnuCash XML");
+
+        try {
+            FileInputStream inputStream = new FileInputStream(Exporter.getMostRecentBackupFile());
+            new GncXmlImportTask(this).execute(inputStream);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+            throw new RuntimeException(e);
+        }
+    }
+
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_CANCELED){
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 4c1d154e..0e6aa25d 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -17,6 +17,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsListFragment;
 
@@ -58,6 +59,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                         public void onClick(DialogInterface dialog, int whichButton) {
                         	TransactionsDbAdapter adapter = new TransactionsDbAdapter(getSherlockActivity());                            
                             if (rowId == 0){
+                                GncXmlExporter.createBackup(); //create backup before deleting everything
 	                        	adapter.deleteAllRecords();
                             } else {
                             	adapter.deleteRecord(rowId);

From 5d4165ba804bab31be219aebab089091a928d872 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 23 Jul 2014 13:36:27 +0200
Subject: [PATCH 03/18] Fixed: Cloning transactions copies the exported flag
 Fixed: display notification if no backup file is found Added indexes on UID
 database columns Updated What's new dialog text

---
 app/res/values-de/strings.xml                          | 16 ++++++++--------
 app/res/values-el/strings.xml                          | 16 ++++++++--------
 app/res/values-es-rMX/strings.xml                      | 16 ++++++++--------
 app/res/values-es/strings.xml                          | 16 ++++++++--------
 app/res/values-fr/strings.xml                          | 16 ++++++++--------
 app/res/values-hu/strings.xml                          | 14 ++++++++------
 app/res/values-it/strings.xml                          | 16 ++++++++--------
 app/res/values-nb/strings.xml                          | 16 ++++++++--------
 app/res/values-nl/strings.xml                          | 16 ++++++++--------
 app/res/values-pt-rBR/strings.xml                      | 16 ++++++++--------
 app/res/values-ru/strings.xml                          | 16 ++++++++--------
 app/res/values-zh/strings.xml                          | 16 ++++++++--------
 app/res/values/strings.xml                             | 16 ++++++++--------
 app/src/org/gnucash/android/db/DatabaseHelper.java     | 18 ++++++++++++++----
 app/src/org/gnucash/android/db/DatabaseSchema.java     |  6 +++++-
 app/src/org/gnucash/android/model/Transaction.java     |  1 -
 .../gnucash/android/ui/settings/SettingsActivity.java  |  8 +++++++-
 .../ui/transaction/TransactionFormFragment.java        | 10 ++++++----
 18 files changed, 136 insertions(+), 113 deletions(-)

diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index dff29810..50baa3d3 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -304,14 +304,13 @@
 	<string name="summary_xml_ofx_header">Diese Option aktivieren, wenn Sie die OFX-Dateien fr ein anderes Programm als GnuCash auf dem Desktop exportieren</string>
 	<string name="title_whats_new">Neuigkeiten in dieser Version</string>
 	<string name="whats_new">
-        - Mark favorite accounts and quickly access them\n
-        - Display different tabs for recent, favorite and all accounts\n
-        - Add, view and delete recurring transactions (daily, weekly, monthly)\n
-        - Mark accounts as placeholder accounts (cannot contain transactions)\n
-        - Set a default transfer account for each account\n
-        - Color code accounts and themed account views\n
-        - Create default GnuCash account structure from within app\n
-        - Numerous bug fixes and improvements\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
     </string>
 	<string name="label_dismiss">Schlieen</string>
     <string name="toast_transanction_amount_required">Geben Sie einen Betrag ein, um die Buchung speichern zu knnen</string>
@@ -412,4 +411,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 7d08fa27..f399fa97 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -310,14 +310,13 @@
 	<string name="summary_xml_ofx_header">        ,   GnuCash   .</string>
 	<string name="title_whats_new">  </string>
 	<string name="whats_new">
-        - Mark favorite accounts and quickly access them\n
-        - Display different tabs for recent, favorite and all accounts\n
-        - Add, view and delete recurring transactions (daily, weekly, monthly)\n
-        - Mark accounts as placeholder accounts (cannot contain transactions)\n
-        - Set a default transfer account for each account\n
-        - Color code accounts and themed account views\n
-        - Create default GnuCash account structure from within app\n
-        - Numerous bug fixes and improvements\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required">  
@@ -429,4 +428,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 22b4827a..5c146e2d 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -304,14 +304,13 @@
 	<string name="summary_xml_ofx_header">Active esta opci&#243;n para exportar a otras aplicaciones distintas a GnuCash para escritorio</string>
 	<string name="title_whats_new">&#191;Qu&#233; hay nuevo?</string>
 	<string name="whats_new">
-        - Mark favorite accounts and quickly access them\n
-        - Display different tabs for recent, favorite and all accounts\n
-        - Add, view and delete recurring transactions (daily, weekly, monthly)\n
-        - Mark accounts as placeholder accounts (cannot contain transactions)\n
-        - Set a default transfer account for each account\n
-        - Color code accounts and themed account views\n
-        - Create default GnuCash account structure from within app\n
-        - Numerous bug fixes and improvements\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
     <string name="toast_transanction_amount_required">Ingrese el saldo para guardar la transacci&#243;n</string>
@@ -414,4 +413,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index d475043c..c9272cd2 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -304,14 +304,13 @@
 	<string name="summary_xml_ofx_header">Active esta opci&#243;n para exportar a otras aplicaciones distintas a GnuCash para escritorio</string>
 	<string name="title_whats_new">Novedades</string>
 	<string name="whats_new">
-        - Marcar cuentas como favoritas para un acceso r&#225;pido\n
-        - Mostrar pesta&#241;as para recientes, favoritos y todas las cuentas\n
-        - A&#241;dir, ver y borrar transacciones recurrentes (diarias, semanales, mensuales)\n
-        - Marcar cuentas como cuentas de referencia (no puede contener transacciones)\n
-        - Definir una cuenta de transferencia por defecto para cada cuenta\n
-        - Escoger un color para cada cuenta y temas para las vistas de cuentas\n
-        - Crear una estructura de cuentas Gnucash por defecto desde la aplicaci&#243;\n
-        - Numerosos arreglos y mejoras\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
     <string name="toast_transanction_amount_required">Introduzca un importe para guardar la transacci&#243;n</string>
@@ -411,4 +410,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 09fe5280..9a4c17c2 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -304,14 +304,13 @@
     <string name="summary_xml_ofx_header">Activez cette option lors d\'un export vers une application tierce autre que GnuCash pour PC</string>
     <string name="title_whats_new">Nouveautes</string>
 	<string name="whats_new">
-        - Marquer vos comptes et accdez-y facilement\n
-        - Affichage en onglets pour les comptes rcents, favoris et tous\n
-        - Ajouter, afficher et supprimer des oprations rcurrentes (quotidien, hebdomadaire, mensuel)\n
-        - Marque les comptes comme espace rserv (ne peut pas contenir de transactions)\n
-        - Dfinir un compte de transfert par dfaut pour chaque compte\n
-        - Code couleur pour comptes et utilisation de thmes\n
-        - Cration d\'une structure de compte GnuCash par dfaut  partir de l\'application\n
-        - Nombreuses corrections de bogues et amliorations\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
     <string name="label_dismiss">Passer</string>
     <string name="toast_transanction_amount_required">Entrez un montant pour sauvegarder la transaction</string>
@@ -411,4 +410,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_account_balance">Balance:</string>
     <string name="label_repeats">Repeats</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 4ee69b69..ef59c545 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -304,12 +304,13 @@
 	<string name="summary_xml_ofx_header">Enable this option when exporting to third-party application other than GnuCash for desktop</string>
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
-        - Import GnuCash desktop account structure\n
-        - Nested display of account hierarchy\n
-        - Options for deleting all accounts/transactions\n
-        - Preliminary support for account types\n
-        - Account balance now takes sub-accounts into consideration\n
-        - Numerous bug fixes\n	        
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Dismiss</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
@@ -413,4 +414,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 1ba794a3..b7a7066b 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -305,14 +305,13 @@
 	<string name="summary_xml_ofx_header">Abilitare questa opzione quando si esporta verso un\'applicazione diversa da GnuCash versione desktop</string>
 	<string name="title_whats_new">Novit</string>
 	<string name="whats_new">
-        - Possibilit di marcare i conti come preferiti per acecdervi pi velocemente\n
-        - Visualizzazione di diverse schede per i conti recenti, favoriti e per tutti i conti\n
-        - Aggiunta, visualizzazione ed eliminazione delle transazioni pianificate (quotidiane, settimanali, mensili)\n
-        - Possibilit di identificare i conti come segnalibro (non possono contenere transazioni)\n
-        - Possibilit di impostare un conto di trasferimento predefinito per ogni conto\n
-        - Introdotti i colori per i conti e le viste a tema\n
-        - Introdotta la possibilit di creare una struttura dei conti all\'interno dell\'app\n
-        - Sono state introdotte varie migliorie e molti problemi sono stati corretti\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Chiudi</string>
     <string name="toast_transanction_amount_required">Inserire un importo per salvare la transazione</string>
@@ -415,4 +414,5 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 13ab971e..a48e892d 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -307,14 +307,13 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
 	<string name="summary_xml_ofx_header">Velg denne hvis du skal eksportere til annen programvare enn GnuCash for PC.</string>
 	<string name="title_whats_new">Hva er nytt</string>
 	<string name="whats_new">
-        - Markere favoritter for rask tilgang\n
-        - Vis forskjellige fliker for nylige, favoritter og alle kontoer\n
-        - Legg til, vis og slett gjentakende transaksjoner (daglig, uke, mned)\n
-        - Marker kontoer som plassholder (kan ikke inneholde transaksjoner)\n
-        - Sette standard overfringskonto per konto\n
-        - Fargekoding av kontoer og temaer i konto visning\n
-        - Opprette standard GnuCash kontostruktur i appen\n
-        - Mange feilrettinger og forbedringer\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Ferdig</string>
     <string name="toast_transanction_amount_required">Oppgi et belp for  lagre transaksjonen</string>
@@ -414,4 +413,5 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 2ed4b5a0..88fc56b5 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -304,14 +304,13 @@
 	<string name="summary_xml_ofx_header">Schakel deze optie in als u naar een applicatie anders dan GnuCash wil exporteren</string>
 	<string name="title_whats_new">Nieuw sinds de vorige versie</string>
 	<string name="whats_new">
-        - Mark favorite accounts and quickly access them\n
-        - Display different tabs for recent, favorite and all accounts\n
-        - Add, view and delete recurring transactions (daily, weekly, monthly)\n
-        - Mark accounts as placeholder accounts (cannot contain transactions)\n
-        - Set a default transfer account for each account\n
-        - Color code accounts and themed account views\n
-        - Create default GnuCash account structure from within app\n
-        - Numerous bug fixes and improvements\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Wijs af</string>
     <string name="toast_transanction_amount_required">Vul een bedrag in om de transactie op te slaan.</string>
@@ -416,4 +415,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 35fc8651..1339f596 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -303,14 +303,13 @@
 	  <string name="summary_xml_ofx_header">Habilitar essa opo quando estiver exportando para um software terceiro, diferente do GnuCash para desktop</string>
 	  <string name="title_whats_new">O que h de novo</string>
 	  <string name="whats_new">
-          - Mark favorite accounts and quickly access them\n
-          - Display different tabs for recent, favorite and all accounts\n
-          - Add, view and delete recurring transactions (daily, weekly, monthly)\n
-          - Mark accounts as placeholder accounts (cannot contain transactions)\n
-          - Set a default transfer account for each account\n
-          - Color code accounts and themed account views\n
-          - Create default GnuCash account structure from within app\n
-          - Numerous bug fixes and improvements\n
+          - Create multiple splits per transaction\n
+          - Account balances now follow GnuCash Desktop accounting principles\n
+          - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+          - Automated backup of database before deletion operations\n
+          - Restore most recent backup of database (in Settings -> General)\n
+          - Read transactions from GnuCash XML files (limited support)\n
+          - Multiple bug fixes and improvements\n
 	  </string>
 	  <string name="label_dismiss">Descartar</string>
     <string name="toast_transanction_amount_required">Adicione um valor para salvar a transao</string>
@@ -414,4 +413,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index eb3cc625..e32c282b 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -304,14 +304,13 @@
 	<string name="summary_xml_ofx_header">  ,       GnuCash  </string>
 	<string name="title_whats_new"></string>
 	<string name="whats_new">
-        -      \n
-        -     ,     \n
-        - ,      (, , )\n
-        -    (   ,  )\n
-        -        \n
-        -       \n
-        -     \n
-        -    \n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required"> ,   </string>
@@ -415,4 +414,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 80164713..13cf720a 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -303,14 +303,13 @@
     <string name="summary_xml_ofx_header">GnuCash</string>
     <string name="title_whats_new"></string>
     <string name="whats_new">
-        - \n
-        - \n
-        - \n
-        - \n
-        - \n
-        - \n
-        - \n
-        - \n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
     <string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required"></string>
@@ -409,4 +408,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 170b5d16..21c2fa49 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -499,14 +499,13 @@
 	<string name="key_previous_minor_version">previous_minor_version</string>
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
-        - Mark favorite accounts and quickly access them\n
-        - Display different tabs for recent, favorite and all accounts\n
-        - Add, view and delete recurring transactions (daily, weekly, monthly)\n
-        - Mark accounts as placeholder accounts (cannot contain transactions)\n
-        - Set a default transfer account for each account\n
-        - Color code accounts and themed account views\n
-        - Create default GnuCash account structure from within app\n
-        - Numerous bug fixes and improvements\n
+        - Create multiple splits per transaction\n
+        - Account balances now follow GnuCash Desktop accounting principles\n
+        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Automated backup of database before deletion operations\n
+        - Restore most recent backup of database (in Settings -> General)\n
+        - Read transactions from GnuCash XML files (limited support)\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Dismiss</string>
     <string name="toast_transanction_amount_required">Enter an amount to save the transaction</string>
@@ -646,4 +645,5 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="key_restore_backup">restore_backup</string>
+    <string name="toast_no_recent_backup">No recent backup found</string>
 </resources>
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index 5fbc81b0..c77d5af0 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -23,12 +23,9 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 import org.gnucash.android.export.ExportFormat;
+import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 
-import java.util.Currency;
-import java.util.List;
-import java.util.Locale;
-
 import static org.gnucash.android.db.DatabaseSchema.*;
 
 /**
@@ -253,6 +250,19 @@ private void createDatabaseTables(SQLiteDatabase db) {
         db.execSQL(ACCOUNTS_TABLE_CREATE);
         db.execSQL(TRANSACTIONS_TABLE_CREATE);
         db.execSQL(SPLITS_TABLE_CREATE);
+
+        String createAccountUidIndex = "CREATE UNIQUE INDEX '" + AccountEntry.INDEX_UID + "' ON "
+                + AccountEntry.TABLE_NAME + "(" + AccountEntry.COLUMN_UID + ")";
+
+        String createTransactionUidIndex = "CREATE UNIQUE INDEX '"+ TransactionEntry.INDEX_UID +"' ON "
+                + TransactionEntry.TABLE_NAME + "(" + TransactionEntry.COLUMN_UID + ")";
+
+        String createSplitUidIndex = "CREATE UNIQUE INDEX '" + SplitEntry.INDEX_UID +"' ON "
+                + SplitEntry.TABLE_NAME + "(" + SplitEntry.COLUMN_UID + ")";
+
+        db.execSQL(createAccountUidIndex);
+        db.execSQL(createTransactionUidIndex);
+        db.execSQL(createSplitUidIndex);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/db/DatabaseSchema.java b/app/src/org/gnucash/android/db/DatabaseSchema.java
index ddb2c680..a486f604 100644
--- a/app/src/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/org/gnucash/android/db/DatabaseSchema.java
@@ -35,7 +35,6 @@
      */
     public static final int SPLITS_DB_VERSION = 7;
 
-
     //no instances are to be instantiated
     private DatabaseSchema(){}
 
@@ -60,6 +59,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_TYPE                  = "type";
         public static final String COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID = "default_transfer_account_uid";
 
+        public static final String INDEX_UID                    = "account_uid_index";
     }
 
     /**
@@ -75,6 +75,8 @@ private DatabaseSchema(){}
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
         public static final String COLUMN_RECURRENCE_PERIOD     = "recurrence_period";
+
+        public static final String INDEX_UID                    = "transaction_uid_index";
     }
 
     /**
@@ -89,5 +91,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_MEMO                  = "memo";
         public static final String COLUMN_ACCOUNT_UID           = "account_uid";
         public static final String COLUMN_TRANSACTION_UID       = "transaction_uid";
+
+        public static final String INDEX_UID                    = "split_uid_index";
     }
 }
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index fa54a22c..0bf5321a 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -144,7 +144,6 @@ public Transaction(Transaction transaction, boolean generateNewUID){
         for (Split split : transaction.mSplitList) {
             addSplit(new Split(split, true));
         }
-        setExported(transaction.isExported());
         setTime(transaction.getTimeMillis());
         if (!generateNewUID){
             setUID(transaction.getUID());
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 7b54f108..659554ba 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -258,9 +258,15 @@ public void importAccounts() {
 
     public void importMostRecentBackup(){
         Log.i("Settings", "Importing GnuCash XML");
+        File backupFile = Exporter.getMostRecentBackupFile();
+
+        if (backupFile == null){
+            Toast.makeText(this, R.string.toast_no_recent_backup, Toast.LENGTH_SHORT).show();
+            return;
+        }
 
         try {
-            FileInputStream inputStream = new FileInputStream(Exporter.getMostRecentBackupFile());
+            FileInputStream inputStream = new FileInputStream(backupFile);
             new GncXmlImportTask(this).execute(inputStream);
         } catch (FileNotFoundException e) {
             e.printStackTrace();
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 7f653677..c4ef0687 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -27,6 +27,7 @@
 import android.support.v4.app.FragmentManager;
 import android.widget.*;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.*;
 import org.gnucash.android.model.*;
 import org.gnucash.android.ui.transaction.dialog.DatePickerDialogFragment;
@@ -292,10 +293,11 @@ public Cursor runQuery(CharSequence name) {
         mNameEditText.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
-                mTransaction = mTransactionsDbAdapter.getTransaction(id);
-                mTransaction.setUID(UUID.randomUUID().toString());
-                mTransaction.setExported(false);
-                mTransaction.setTime(System.currentTimeMillis());
+                mTransaction = new Transaction(mTransactionsDbAdapter.getTransaction(id), true);
+                if (!GnuCashApplication.isDoubleEntryEnabled(true)){ //if no double entry, use only splits for this acct
+                    List<Split> accountSplits = mTransaction.getSplits(mAccountsDbAdapter.getAccountUID(mAccountId));
+                    mTransaction.setSplits(accountSplits);
+                }
                 initializeViewsWithTransaction();
                 setAmountEditViewVisible(View.GONE);
             }

From 985a10a8f152c7ed431dbee537a149ee19306ab2 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 23 Jul 2014 13:48:04 +0200
Subject: [PATCH 04/18] Updated changelog for version 1.4.0

---
 CHANGELOG.md | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index a7544917..c56b2aca 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,29 @@
 Change Log
 ===============================================================================
+Version 1.4.0 *(2014-08-04)*
+----------------------------
+Since transactions are at the core of this app, this release touches almost all subsystems and is therefore huge.
+Transactions are now composed of multiple splits, which belong to different accounts and are no longer bound to accounts,
+nor is the money amount bound to the transaction itself.
+Splits store the amounts as absolute values and then separately the kind - CREDIT/DEBIT - of the split.
+
+* Feature: Introduces multiple splits per transaction
+* Feature: Introduced a new Split editor for the creation and editing of splits
+* Feature: Use account specific labels for CREDIT/DEBIT instead of just generic "debit" and "credit"
+* Feature: Import GnuCash XML files - accounts and transactions only (experimental)
+* Feature: Back up transactions in an XML format (similar to GnuCash XML) called .gnca (Gnucash Android)
+* Improved: Updated processes for moving, creating, exporting, deleting transactions to work with splits
+* Improved: Updated computation of account and transaction balances to be in line with accounting principles
+* Improved: Updated color (red/green) display to match movement in the account, and not a representation of the side of the split
+* Improved: Introduced new format for sending Transactions through Intents (while maintaining backwards compatibility)
+* Improved: Extensive code refactoring for
+    - Better modularity of transaction exports (and ease introduction of new formats),
+    - Cleaner database schema and reduction of overlap and redundancies
+    - Easier database migrations during future update (with reduced risk of data loss)
+
+
 Version 1.3.3 *(2014-05-26)*
+----------------------------
 * Reversed changes in the computation of balances, back to pre-v1.3.2 mode (will be re-instated in the future)
 
 Version 1.3.2 *(2014-05-23)*

From f8f42b3cf056d13df966a48cc2f39d4445c692a1 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 23 Jul 2014 23:53:27 +0200
Subject: [PATCH 05/18] Feature: Save opening balances as transactions in the
 "Equity -> Opening Balances" account. Feature: Added setting for saving
 opening balances before deleting transactions Fixed: Accounts now exported
 hierarchically so that they can be imported properly Fixed: Display the
 actual number of currencies during export Code refactoring for less memory
 use during export

---
 app/res/values-de/strings.xml                      |   5 +
 app/res/values-el/strings.xml                      |   5 +
 app/res/values-es-rMX/strings.xml                  |   5 +
 app/res/values-es/strings.xml                      |   5 +
 app/res/values-fr/strings.xml                      |   5 +
 app/res/values-hu/strings.xml                      |   5 +
 app/res/values-it/strings.xml                      |   5 +
 app/res/values-nb/strings.xml                      |   5 +
 app/res/values-nl/strings.xml                      |   5 +
 app/res/values-pt-rBR/strings.xml                  |   5 +
 app/res/values-ru/strings.xml                      |   5 +
 app/res/values-zh/strings.xml                      |   5 +
 app/res/values/strings.xml                         |   6 +
 .../xml-v11/fragment_transaction_preferences.xml   |   4 +
 app/res/xml/fragment_transaction_preferences.xml   |   4 +
 .../gnucash/android/app/GnuCashApplication.java    |  11 ++
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 165 +++++++++++++++++++--
 app/src/org/gnucash/android/db/DatabaseHelper.java |   4 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  31 ----
 .../gnucash/android/db/TransactionsDbAdapter.java  |  17 +++
 .../gnucash/android/export/xml/GncXmlExporter.java |  46 ++++--
 app/src/org/gnucash/android/model/Account.java     |   2 +-
 .../android/ui/account/AccountFormFragment.java    |   8 +-
 .../DeleteAllTransacationsConfirmationDialog.java  |  42 +++++-
 .../android/ui/settings/SettingsActivity.java      |  16 ++
 ...ansactionsDeleteConfirmationDialogFragment.java |  56 ++++---
 26 files changed, 383 insertions(+), 89 deletions(-)

diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 50baa3d3..296805c1 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -412,4 +412,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Anfangsbestand</string>
+    <string name="account_name_equity"></string> <!-- This is no error, the default German locale has no parent Equity account -->
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index f399fa97..a208ffe9 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -429,4 +429,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances"> </string>
+    <string name="account_name_equity"> </string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 5c146e2d..10ef73eb 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -414,4 +414,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Balances de apertura</string>
+    <string name="account_name_equity">Capital</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index c9272cd2..dfe91296 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -411,4 +411,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Balances de apertura</string>
+    <string name="account_name_equity">Resultado</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 9a4c17c2..0ed99da5 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -411,4 +411,9 @@
     <string name="label_account_balance">Balance:</string>
     <string name="label_repeats">Repeats</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Soldes initiaux</string>
+    <string name="account_name_equity">Capitaux propres</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index ef59c545..8dd9a501 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -415,4 +415,9 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Nyitegyenlegek</string>
+    <string name="account_name_equity">Sajt tke</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index b7a7066b..f40568a1 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -415,4 +415,9 @@
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Bilanci d\'apertura</string>
+    <string name="account_name_equity">Capitali</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index a48e892d..7efbe54a 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -414,4 +414,9 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Opening Balances</string>
+    <string name="account_name_equity">Equity</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 88fc56b5..40e64618 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -416,4 +416,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Openingsbalans</string>
+    <string name="account_name_equity">Eigen Vermogen</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 1339f596..cedfb152 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -414,4 +414,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Saldos Iniciais</string>
+    <string name="account_name_equity">Lquido</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index e32c282b..ed2139d5 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -415,4 +415,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances"> </string>
+    <string name="account_name_equity"> </string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 13cf720a..a7075589 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -409,4 +409,9 @@
     <string name="label_repeats">Repeats</string>
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances"></string>
+    <string name="account_name_equity"></string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 21c2fa49..8a82cf1b 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -646,4 +646,10 @@
     <string name="label_repeats">Repeats</string>
     <string name="key_restore_backup">restore_backup</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="account_name_opening_balances">Opening Balances</string>
+    <string name="account_name_equity">Equity</string>
+    <string name="key_save_opening_balances">save_opening_balances</string>
+    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    </string>
+    <string name="title_save_opening_balances">Save account opening balances</string>
 </resources>
diff --git a/app/res/xml-v11/fragment_transaction_preferences.xml b/app/res/xml-v11/fragment_transaction_preferences.xml
index 3f8fe10d..084e26c8 100644
--- a/app/res/xml-v11/fragment_transaction_preferences.xml
+++ b/app/res/xml-v11/fragment_transaction_preferences.xml
@@ -24,6 +24,10 @@
     <CheckBoxPreference android:summary="@string/summary_use_double_entry"
                         android:key="@string/key_use_double_entry"
                         android:title="@string/title_use_double_entry"/>
+    <CheckBoxPreference android:summary="@string/summary_save_opening_balances"
+                        android:key="@string/key_save_opening_balances"
+                        android:defaultValue="false"
+                        android:title="@string/title_save_opening_balances" />
     <Preference android:key="@string/key_delete_all_transactions"
                 android:summary="@string/summary_delete_all_transactions"
                 android:title="@string/title_delete_all_transactions" />
diff --git a/app/res/xml/fragment_transaction_preferences.xml b/app/res/xml/fragment_transaction_preferences.xml
index f8c7f19b..36aefe5f 100644
--- a/app/res/xml/fragment_transaction_preferences.xml
+++ b/app/res/xml/fragment_transaction_preferences.xml
@@ -25,6 +25,10 @@
                         android:key="@string/key_use_double_entry"
                         android:defaultValue="true"
                         android:title="@string/title_use_double_entry"/>
+    <CheckBoxPreference android:summary="@string/summary_save_opening_balances"
+                        android:key="@string/key_save_opening_balances"
+                        android:defaultValue="false"
+                        android:title="@string/title_save_opening_balances" />
     <Preference android:key="@string/key_delete_all_transactions"
                 android:summary="@string/summary_delete_all_transactions"
                 android:title="@string/title_delete_all_transactions" />
diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index 8d01d9fa..6410b380 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -53,4 +53,15 @@ public static boolean isDoubleEntryEnabled(boolean defaultValue){
         SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
         return sharedPrefs.getBoolean(context.getString(R.string.key_use_double_entry), defaultValue);
     }
+
+    /**
+     * Returns <code>true</code> if setting is enabled to save opening balances after deleting transactions,
+     * <code>false</code> otherwise.
+     * @param defaultValue Default value to return if double entry is not explicitly set
+     * @return <code>true</code> if opening balances should be saved, <code>false</code> otherwise
+     */
+    public static boolean shouldSaveOpeningBalances(boolean defaultValue){
+        SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
+        return sharedPrefs.getBoolean(context.getString(R.string.key_save_opening_balances), defaultValue);
+    }
 }
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 50cfa6eb..f89ee51d 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -24,11 +24,9 @@
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.Money;
-import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.*;
 
+import java.math.BigDecimal;
 import java.util.*;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
@@ -77,6 +75,36 @@ public static String getImbalanceAccountName(Currency currency){
         return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
     }
 
+    /**
+     * Get the name of the default account for opening balances for the current locale.
+     * For the English locale, it will be "Equity:Opening Balances"
+     * @return Fully qualified account name of the opening balances account
+     */
+    public static String getOpeningBalanceAccountFullName(){
+        Context context = GnuCashApplication.getAppContext();
+        return context.getString(R.string.account_name_equity)
+                + ACCOUNT_NAME_SEPARATOR
+                + context.getString(R.string.account_name_opening_balances);
+    }
+
+    /**
+     * Returns the list of currencies in the database
+     * @return List of currencies in the database
+     */
+    public List<Currency> getCurrencies(){
+        Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
+                null, null, null, null, null, null);
+        List<Currency> currencyList = new ArrayList<Currency>();
+        if (cursor != null){
+            while (cursor.moveToNext()){
+                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+                currencyList.add(Currency.getInstance(currencyCode));
+            }
+            cursor.close();
+        }
+        return currencyList;
+    }
+
     @Override
 	public void close() {
 		super.close();
@@ -100,10 +128,10 @@ public long addAccount(Account account){
         contentValues.put(AccountEntry.COLUMN_COLOR_CODE,   account.getColorHexCode());
         contentValues.put(AccountEntry.COLUMN_FAVORITE,     account.isFavorite() ? 1 : 0);
         contentValues.put(AccountEntry.COLUMN_FULL_NAME,    account.getFullName());
-        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,            account.getParentUID());
-        contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID,  account.getDefaultTransferAccountUID());
+        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,           account.getParentUID());
+        contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
 
-		long rowId = -1;
+        long rowId = -1;
 		if ((rowId = getAccountID(account.getUID())) > 0){
 			//if account already exists, then just update
 			Log.d(TAG, "Updating existing account");
@@ -279,7 +307,8 @@ private Account buildSimpleAccountInstance(Cursor c) {
         account.setUID(uid);
         account.setParentUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID)));
         account.setAccountType(AccountType.valueOf(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE))));
-        account.setCurrency(Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY))));
+        Currency currency = Currency.getInstance(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY)));
+        account.setCurrency(currency);
         account.setPlaceHolderFlag(c.getInt(c.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1);
         account.setDefaultTransferAccountUID(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID)));
         account.setColorCode(c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE)));
@@ -459,13 +488,8 @@ public String getName(long accountID) {
      */
     public String getOrCreateImbalanceAccountUID(Currency currency){
         String imbalanceAccountName = getImbalanceAccountName(currency);
-        Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
-                AccountEntry.COLUMN_NAME + "= ?", new String[]{imbalanceAccountName},
-                null, null, null, "1");
-        String uid;
-        if (c != null && c.moveToNext()) {
-            uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
-        } else {
+        String uid = findAccountUidByFullName(imbalanceAccountName);
+        if (uid == null){
             Account account = new Account(imbalanceAccountName, currency);
             account.setAccountType(AccountType.BANK);
             addAccount(account);
@@ -474,6 +498,69 @@ public String getOrCreateImbalanceAccountUID(Currency currency){
         return uid;
     }
 
+    /**
+     * Creates the account with the specified name and returns its unique identifier.
+     * <p>If a full hierarchical account name is provided, then the whole hierarchy is created and the
+     * unique ID of the last account (at bottom) of the hierarchy is returned</p>
+     * @param fullName Fully qualified name of the account
+     * @param accountType Type to assign to all accounts created
+     * @return String unique ID of the account at bottom of hierarchy
+     */
+    public String createAccountHierarchy(String fullName, AccountType accountType){
+        if (fullName == null)
+            throw new IllegalArgumentException("The account name cannot be null");
+
+        String[] tokens = fullName.split(ACCOUNT_NAME_SEPARATOR);
+        String uid = null;
+        String parentName = "";
+        for (String token : tokens) {
+            parentName += token;
+            String parentUID = findAccountUidByFullName(parentName);
+            parentName += ACCOUNT_NAME_SEPARATOR;
+            if (parentUID != null){ //the parent account exists, don't recreate
+                uid = parentUID;
+                continue;
+            }
+            Account account = new Account(token);
+            account.setAccountType(accountType);
+            account.setParentUID(uid); //set its parent
+            uid = account.getUID();
+        }
+        return uid;
+    }
+
+    /**
+     * Returns the unique ID of the opening balance account or creates one if necessary
+     * @return String unique ID of the opening balance account
+     */
+    public String getOrCreateOpeningBalanceAccountUID(){
+        String openingBalanceAccountName = getOpeningBalanceAccountFullName();
+        String uid = findAccountUidByFullName(openingBalanceAccountName);
+        if (uid == null){
+            uid = createAccountHierarchy(openingBalanceAccountName, AccountType.EQUITY);
+        }
+        return uid;
+    }
+
+    /**
+     * Finds an account unique ID by its full name
+     * @param fullName Fully qualified name of the account
+     * @return String unique ID of the account
+     */
+    public String findAccountUidByFullName(String fullName){
+        Cursor c = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
+                AccountEntry.COLUMN_FULL_NAME + "= ?", new String[]{fullName},
+                null, null, null, "1");
+        String uid = null;
+        if (c != null) {
+            if (c.moveToNext()) {
+                uid = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+            }
+            c.close();
+        }
+        return uid;
+    }
+
 	/**
 	 * Returns a cursor to all account records in the database.
      * GnuCash ROOT accounts are ignored
@@ -717,6 +804,22 @@ public int getSubAccountCount(long accountId){
         return count;
     }
 
+    /**
+     * Returns the number of accounts in the database
+     * @return Number of accounts in the database
+     */
+    public int getTotalAccountCount(){
+        String queryCount = "SELECT COUNT(*) FROM " + AccountEntry.TABLE_NAME;
+        Cursor cursor = mDb.rawQuery(queryCount, null);
+        int count = 0;
+        if (cursor != null){
+            cursor.moveToFirst();
+            count = cursor.getInt(0);
+            cursor.close();
+        }
+        return count;
+    }
+
 	/**
 	 * Return the record ID for the account with UID <code>accountUID</code>
 	 * @param accountUID String Unique ID of the account
@@ -886,6 +989,38 @@ public boolean isFavoriteAccount(long accountId){
         return isFavorite;
     }
 
+    /**
+     * Updates all opening balances to the current account balances
+     */
+    public List<Transaction> getAllOpeningBalanceTransactions(){
+        Cursor cursor = fetchAccounts(null);
+        List<Transaction> openingTransactions = new ArrayList<Transaction>();
+        if (cursor != null){
+            SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(mDb);
+            while(cursor.moveToNext()){
+                long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
+                String accountUID = getAccountUID(id);
+                String currencyCode = getCurrencyCode(id);
+                Money balance = splitsDbAdapter.computeSplitBalance(accountUID);
+                if (balance.asBigDecimal().compareTo(new BigDecimal(0)) == 0)
+                    continue;
+
+                Transaction transaction = new Transaction(mContext.getString(R.string.account_name_opening_balances));
+                transaction.setDescription(getName(id));
+                transaction.setCurrencyCode(currencyCode);
+                TransactionType transactionType = Transaction.getTypeForBalance(getAccountType(accountUID),
+                        balance.isNegative());
+                Split split = new Split(balance.absolute(), accountUID);
+                split.setType(transactionType);
+                transaction.addSplit(split);
+                transaction.addSplit(split.createPair(getOrCreateOpeningBalanceAccountUID()));
+                openingTransactions.add(transaction);
+            }
+            cursor.close();
+        }
+        return openingTransactions;
+    }
+
 	/**
 	 * Deletes all accounts and their transactions (and their splits) from the database.
      * Basically empties all 3 tables, so use with care ;)
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index c77d5af0..d7945c51 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -65,8 +65,8 @@
             + AccountEntry.COLUMN_COLOR_CODE        + " varchar(255), "
             + AccountEntry.COLUMN_FAVORITE 		    + " tinyint default 0, "
             + AccountEntry.COLUMN_FULL_NAME 	    + " varchar(255), "
-            + AccountEntry.COLUMN_PLACEHOLDER            + " tinyint default 0, "
-            + AccountEntry.COLUMN_PARENT_ACCOUNT_UID     + " varchar(255), "
+            + AccountEntry.COLUMN_PLACEHOLDER           + " tinyint default 0, "
+            + AccountEntry.COLUMN_PARENT_ACCOUNT_UID    + " varchar(255), "
             + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID   + " varchar(255), "
             + "UNIQUE (" + AccountEntry.COLUMN_UID       + ")"
 			+ ");";
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index ec51c83b..2b609679 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -153,25 +153,6 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
     }
 
     /**
-     * Returns the list of currencies in the database
-     * @return List of currencies in the database
-     */
-    static List<Currency> getCurrencies(SQLiteDatabase db){
-
-        Cursor cursor = db.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
-                null, null, null, null, null, null);
-        List<Currency> currencyList = new ArrayList<Currency>();
-        if (cursor != null){
-            while (cursor.moveToNext()){
-                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
-                currencyList.add(Currency.getInstance(currencyCode));
-            }
-            cursor.close();
-        }
-        return currencyList;
-    }
-
-    /**
      * Imports GnuCash XML into the database from file
      * @param filepath Path to GnuCash XML file
      */
@@ -184,17 +165,5 @@ static void importGnucashXML(SQLiteDatabase db, String filepath) {
             e.printStackTrace();
             throw new RuntimeException(e);
         }
-
-        //update the fully qualified names because
-        //during import, an account may be imported before its parent which will make the full name null:<name>
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db);
-        Cursor cursor = accountsDbAdapter.fetchAllRecords();
-        if (cursor != null){
-            while (cursor.moveToNext()){
-                long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
-                accountsDbAdapter.updateAccount(id, AccountEntry.COLUMN_FULL_NAME,
-                        accountsDbAdapter.getFullyQualifiedAccountName(id));
-            }
-        }
     }
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index ce4a9cf1..92e8accd 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -228,6 +228,23 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
+    /**
+     * Return number of transactions in the database which are non recurring
+     * @return Number of transactions
+     */
+    public int getTotalTransactionsCount(){
+        String queryCount = "SELECT COUNT(*) FROM " + TransactionEntry.TABLE_NAME +
+                " WHERE " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " =0";
+        Cursor cursor = mDb.rawQuery(queryCount, null);
+        int count = 0;
+        if (cursor != null){
+            cursor.moveToFirst();
+            count = cursor.getInt(0);
+            cursor.close();
+        }
+        return count;
+    }
+
 	/**
 	 * Builds a transaction instance with the provided cursor.
 	 * The cursor should already be pointing to the transaction record in the database
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 5bed6449..358c147d 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -16,8 +16,10 @@
 
 package org.gnucash.android.export.xml;
 
+import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
@@ -68,6 +70,10 @@ public GncXmlExporter(ExportParams params, SQLiteDatabase db){
         mTransactionsDbAdapter = new TransactionsDbAdapter(db);
     }
 
+    /**
+     * Generate GnuCash XML
+     * @throws ParserConfigurationException if there was an error when generating the XML
+     */
     private void generateGncXml() throws ParserConfigurationException {
         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
 //        docFactory.setNamespaceAware(true);
@@ -105,30 +111,48 @@ private void generateGncXml() throws ParserConfigurationException {
 
         Element cmdtyCountData = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
         cmdtyCountData.setAttribute("cd:type", "commodity");
-        cmdtyCountData.appendChild(mDocument.createTextNode("1")); //TODO: put actual number of currencies
+        cmdtyCountData.appendChild(mDocument.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
         bookNode.appendChild(cmdtyCountData);
 
-        List<Account> accountList = mAccountsDbAdapter.getSimpleAccountList();
-
         Element accountCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
         accountCountNode.setAttribute("cd:type", "account");
-        accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountList.size())));
+        int accountCount = mAccountsDbAdapter.getTotalAccountCount();
+        accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountCount)));
         bookNode.appendChild(accountCountNode);
 
-        List<Transaction> transactionsList = mTransactionsDbAdapter.getAllTransactions();
-
         Element transactionCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
         transactionCountNode.setAttribute("cd:type", "transaction");
-        transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionsList.size())));
+        int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
+        transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionCount)));
         bookNode.appendChild(transactionCountNode);
 
-        for (Account account : accountList) {
-            account.toGncXml(mDocument, bookNode);
+        String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+        Account rootAccount = mAccountsDbAdapter.getAccount(rootAccountUID);
+        if (rootAccount != null){
+            rootAccount.toGncXml(mDocument, bookNode);
+        }
+        Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
+
+        //create accounts hierarchically by ordering by full name
+        if (accountsCursor != null){
+            while (accountsCursor.moveToNext()){
+                long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
+                Account account = mAccountsDbAdapter.getAccount(id);
+                account.toGncXml(mDocument, bookNode);
+            }
+            accountsCursor.close();
         }
 
-        for (Transaction transaction : transactionsList) {
-            transaction.toGncXml(mDocument, bookNode);
+        //more memory efficient approach than loading all transactions into memory first
+        Cursor transactionsCursor = mTransactionsDbAdapter.fetchAllRecords();
+        if (transactionsCursor != null){
+            while (transactionsCursor.moveToNext()){
+                Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(transactionsCursor);
+                transaction.toGncXml(mDocument, bookNode);
+            }
+            transactionsCursor.close();
         }
+
         mDocument.appendChild(rootElement);
         mAccountsDbAdapter.close();
         mTransactionsDbAdapter.close();
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index d07dd4f6..0d9ebf8b 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -307,7 +307,7 @@ public boolean hasUnexportedTransactions(){
 		}
 		return false;
 	}
-	
+
 	/**
 	 * Returns the aggregate of all transactions in this account.
 	 * It takes into account debit and credit amounts, it does not however consider sub-accounts
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 8d4e9dfe..fad1f4c3 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -40,7 +40,6 @@
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
@@ -246,7 +245,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
-		
+
 		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 			
@@ -679,7 +678,10 @@ public void onDestroy() {
             mDefaultTransferAccountCursorAdapter.getCursor().close();
         }
 	}
-	
+
+    /**
+     * Reads the fields from the account form and saves as a new account
+     */
 	private void saveAccount() {
 		if (mAccount == null){
 			String name = getEnteredName();
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index f4ab870b..e946b9d1 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -8,10 +8,16 @@
 import android.os.Bundle;
 import android.widget.Toast;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Copyright (c) 2013 - gnucash-android
  *
@@ -34,22 +40,42 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                         new DialogInterface.OnClickListener() {
                             public void onClick(DialogInterface dialog, int whichButton) {
                                 GncXmlExporter.createBackup();
+
                                 Context context = getDialog().getContext();
+                                AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+                                List<Transaction> openingBalances = new ArrayList<Transaction>();
+                                boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+                                if (preserveOpeningBalances) {
+                                    openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
+                                    accountsDbAdapter.close();
+                                }
                                 TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(context);
                                 transactionsDbAdapter.deleteAllRecords();
+
+                                if (preserveOpeningBalances) {
+                                    for (Transaction openingBalance : openingBalances) {
+                                        transactionsDbAdapter.addTransaction(openingBalance);
+                                    }
+                                }
                                 transactionsDbAdapter.close();
                                 Toast.makeText(context, R.string.toast_all_transactions_deleted, Toast.LENGTH_SHORT).show();
                                 WidgetConfigurationActivity.updateAllWidgets(getActivity());
                             }
                         }
+
                 )
-                .setNegativeButton(R.string.alert_dialog_cancel,
-                        new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int whichButton) {
-                                dismiss();
-                            }
+                                    .
+
+                            setNegativeButton(R.string.alert_dialog_cancel,
+                                    new DialogInterface.OnClickListener() {
+                                        public void onClick(DialogInterface dialog, int whichButton) {
+                                            dismiss();
+                                        }
+                                    }
+
+                            )
+                                    .
+
+                            create();
                         }
-                )
-                .create();
     }
-}
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 659554ba..1d1e1494 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -32,15 +32,18 @@
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
 
 import java.io.*;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Timer;
 import java.util.TimerTask;
@@ -219,8 +222,21 @@ public boolean onPreferenceClick(Preference preference) {
                 Toast.makeText(this, R.string.toast_tap_again_to_confirm_delete, Toast.LENGTH_SHORT).show();
             } else {
                 GncXmlExporter.createBackup(); //create backup before deleting everything
+                List<Transaction> openingBalances = new ArrayList<Transaction>();
+                boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+                if (preserveOpeningBalances) {
+                    AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
+                    openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
+                    accountsDbAdapter.close();
+                }
                 TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(this);
                 transactionsDbAdapter.deleteAllRecords();
+
+                if (preserveOpeningBalances) {
+                    for (Transaction openingBalance : openingBalances) {
+                        transactionsDbAdapter.addTransaction(openingBalance);
+                    }
+                }
                 transactionsDbAdapter.close();
                 Toast.makeText(this, R.string.toast_all_transactions_deleted, Toast.LENGTH_LONG).show();
             }
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 0e6aa25d..1594f620 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -16,8 +16,11 @@
 package org.gnucash.android.ui.transaction.dialog;
 
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsListFragment;
 
@@ -29,6 +32,9 @@
 import com.actionbarsherlock.app.SherlockDialogFragment;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Displays a delete confirmation dialog for transactions
  * If the transaction ID parameter is 0, then all transactions will be deleted
@@ -55,29 +61,43 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                 .setIcon(android.R.drawable.ic_delete)
                 .setTitle(title).setMessage(message)
                 .setPositiveButton(R.string.alert_dialog_ok_delete,
-                    new DialogInterface.OnClickListener() {
-                        public void onClick(DialogInterface dialog, int whichButton) {
-                        	TransactionsDbAdapter adapter = new TransactionsDbAdapter(getSherlockActivity());                            
-                            if (rowId == 0){
-                                GncXmlExporter.createBackup(); //create backup before deleting everything
-	                        	adapter.deleteAllRecords();
-                            } else {
-                            	adapter.deleteRecord(rowId);
-                            }
-                            adapter.close();
-                            if (getTargetFragment() instanceof AccountsListFragment){                            	
-                            	((AccountsListFragment)getTargetFragment()).refresh();
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int whichButton) {
+                                TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(getSherlockActivity());
+                                if (rowId == 0) {
+                                    GncXmlExporter.createBackup(); //create backup before deleting everything
+                                    List<Transaction> openingBalances = new ArrayList<Transaction>();
+                                    boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
+                                    if (preserveOpeningBalances) {
+                                        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
+                                        openingBalances = accountsDbAdapter.getAllOpeningBalanceTransactions();
+                                        accountsDbAdapter.close();
+                                    }
+
+                                    transactionsDbAdapter.deleteAllRecords();
+
+                                    if (preserveOpeningBalances) {
+                                        for (Transaction openingBalance : openingBalances) {
+                                            transactionsDbAdapter.addTransaction(openingBalance);
+                                        }
+                                    }
+                                } else {
+                                    transactionsDbAdapter.deleteRecord(rowId);
+                                }
+                                transactionsDbAdapter.close();
+                                if (getTargetFragment() instanceof AccountsListFragment) {
+                                    ((AccountsListFragment) getTargetFragment()).refresh();
+                                }
+                                WidgetConfigurationActivity.updateAllWidgets(getActivity());
                             }
-                            WidgetConfigurationActivity.updateAllWidgets(getActivity());
                         }
-                    }
                 )
                 .setNegativeButton(R.string.alert_dialog_cancel,
-                    new DialogInterface.OnClickListener() {
-                        public void onClick(DialogInterface dialog, int whichButton) {
-                        	dismiss();
+                        new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int whichButton) {
+                                dismiss();
+                            }
                         }
-                    }
                 )
                 .create();
     }

From 713e96e1f57b18c3d746cc38be347d2757eb8d7c Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 24 Jul 2014 14:32:08 +0200
Subject: [PATCH 06/18] Updated string translations and app version to
 1.4.0-beta2

- Updated name of Cuban convertible peso currency name
- Updated change log to include opening balances feature
- Updated strings to generalize the account format (now multiple are supported, not just OFX)
- Fixed: Generation of opening balance account for german locale has no parent Equity account
---
 CHANGELOG.md                                       |  1 +
 app/AndroidManifest.xml                            |  2 +-
 app/res/values-de/strings.xml                      | 27 +++---
 app/res/values-el/strings.xml                      | 24 +++---
 app/res/values-es-rMX/strings.xml                  | 24 +++---
 app/res/values-es/strings.xml                      | 24 +++---
 app/res/values-fr/strings.xml                      | 20 ++---
 app/res/values-hu/strings.xml                      | 24 +++---
 app/res/values-it/strings.xml                      | 24 +++---
 app/res/values-nb/strings.xml                      | 24 +++---
 app/res/values-nl/strings.xml                      | 24 +++---
 app/res/values-pt-rBR/strings.xml                  | 24 +++---
 app/res/values-ru/strings.xml                      | 24 +++---
 app/res/values-zh/strings.xml                      | 20 ++---
 app/res/values/strings.xml                         | 35 ++++----
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 99 ++++++++++++----------
 .../org/gnucash/android/export/ExporterTask.java   | 19 +++--
 17 files changed, 223 insertions(+), 216 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index c56b2aca..6d009561 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -12,6 +12,7 @@ Splits store the amounts as absolute values and then separately the kind - CREDI
 * Feature: Use account specific labels for CREDIT/DEBIT instead of just generic "debit" and "credit"
 * Feature: Import GnuCash XML files - accounts and transactions only (experimental)
 * Feature: Back up transactions in an XML format (similar to GnuCash XML) called .gnca (Gnucash Android)
+* Feature: Option for saving opening balances before deleting transactions
 * Improved: Updated processes for moving, creating, exporting, deleting transactions to work with splits
 * Improved: Updated computation of account and transaction balances to be in line with accounting principles
 * Improved: Updated color (red/green) display to match movement in the account, and not a representation of the side of the split
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 238b4f54..3a8cc1e8 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="30"
+    android:versionCode="31"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 296805c1..01a73eac 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -20,7 +20,7 @@
     <string name="title_add_account">Neues Konto</string>
     <string name="title_edit_account">Konto bearbeiten</string>
     <string name="info_details">Info</string>
-    <string name="menu_export_ofx">OFX-Datei exportieren</string>
+    <string name="menu_export">OFX-Datei exportieren</string>
     <string name="description_add_transaction_icon">Neue Buchung in ein Konto</string>
     <string name="label_no_accounts">Keine Konten vorhanden</string>
     <string name="label_account_name">Kontoname</string>
@@ -50,7 +50,7 @@
     <string name="title_export_dialog">Buchungen exportieren</string>
     <string name="option_export_all_transactions">Alle Buchungen exportieren</string>
     <string name="hint_export_choice">Auswhlen, um alle Buchungen zu exportieren. Andernfalls werden nur die neuen Buchungen seit letztem Export exportiert.</string>
-    <string name="toast_export_error">Fehler beim Exportieren der OFX-Datei</string>
+    <string name="toast_export_error">Fehler beim Exportieren der %1$s-Datei</string>
     <string name="btn_export">Export</string>
     <string name="option_delete_after_export">L&#246;schen nach dem Exportieren</string>
     <string name="hint_delete_after_export">Alle exportierten Buchungen werden nach dem Export gelscht.</string>
@@ -115,7 +115,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danish Krone</item>
@@ -192,8 +193,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -242,7 +241,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dollar</item>
+        <item>Uruguayan Peso</item>
+        <item>US Dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -273,10 +273,9 @@
 	<string name="summary_about_gnucash">GnuCashMobile ist eine mobile Datenaufzeichungs-App f&#252;r Android. \nEs erm&#246;glicht die schnelle und flexible Registrierung von Zahlungsvorg&#228;ngen unterwegs, die dann als Datei im OFX-Format exportiert und von der GnuCash-Anwendung an einem Desktop-PC importiert werden k&#246;nnen.</string>
 	<string name="title_about">&#220;ber</string>
 	<string name="ofx_file_exported_to">OFX-Datei exportiert nach:</string>
-	<string name="toast_error_exporting_ofx">Fehler beim Exportieren der OFX-Datei:\n</string>
-	<string name="toast_ofx_exported_to">OFX-Datei erfolgreich exportiert nach:\n</string>
-	<string name="title_export_email">GnuCash exportierte OFX-Datei</string>
-	<string name="description_export_email">GnuCash-Konten-Export von </string>
+	<string name="toast_format_exported_to">%1$s-Datei erfolgreich exportiert nach:\n</string>
+	<string name="title_export_email">GnuCash Android exportierte %1$s-Datei</string>
+	<string name="description_export_email">GnuCash-Android-Konten-Export von </string>
 	<string name="header_transaction_settings">Buchungen</string>
 	<string name="title_transaction_preferences">Einstellungen Buchungen</string>
 	<string name="title_account_preferences">Einstellungen Konten</string>
@@ -305,11 +304,12 @@
 	<string name="title_whats_new">Neuigkeiten in dieser Version</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
     </string>
 	<string name="label_dismiss">Schlieen</string>
@@ -392,7 +392,6 @@
     </string-array>
     <string name="title_scheduled_transactions">Eingeplante Buchungen</string>
     <string name="title_select_export_destination">Select destination for export</string>
-    <string name="toast_error_exporting">Could not write OFX file to :\n</string>
     <string name="hint_split_memo">Memo</string>
     <string name="label_spend">Spend</string>
     <string name="label_receive">Receive</string>
@@ -413,7 +412,7 @@
     <string name="label_account_balance">Balance:</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
     <string name="account_name_opening_balances">Anfangsbestand</string>
-    <string name="account_name_equity"></string> <!-- This is no error, the default German locale has no parent Equity account -->
+    <string name="account_name_equity"> </string> <!-- This is no error, the default German locale has no parent Equity account -->
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index a208ffe9..fd98866d 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account"> </string>
     <string name="title_edit_account"> </string>
     <string name="info_details"></string>
-    <string name="menu_export_ofx"> OFX</string>
+    <string name="menu_export"> OFX</string>
     <string name="description_add_transaction_icon">      </string>
     <string name="label_no_accounts">    </string>
     <string name="label_account_name"> </string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog">Export transactions</string>
     <string name="option_export_all_transactions">   </string>
     <string name="hint_export_choice">,          .          </string>
-    <string name="toast_export_error">   OFX</string>
+    <string name="toast_export_error">   %1$s</string>
     <string name="btn_export"></string>
     <string name="option_delete_after_export">   </string>
     <string name="hint_delete_after_export">    ,       </string>
@@ -116,7 +116,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danish Krone</item>
@@ -193,8 +194,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -243,7 +242,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dolar</item>
+        <item>Uruguayan Peso</item>
+        <item>US Dolar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -278,10 +278,9 @@
 	eXchange (OFX)      GnuCash  
 	.</string>
 	<string name="title_about"></string>
-	<string name="toast_error_exporting">   OFX  :\n</string>
-	<string name="toast_ofx_exported_to"> OFX  :\n</string>
-	<string name="title_export_email"> GnuCash OFX</string>
-	<string name="description_export_email"> GnuCash OFX  </string>
+	<string name="toast_format_exported_to"> %1$s  :\n</string>
+	<string name="title_export_email"> GnuCash Android %1$s</string>
+	<string name="description_export_email"> GnuCash Android  </string>
 	<string name="header_transaction_settings"></string>
 	<string name="title_transaction_preferences"> </string>
 	<string name="title_account_preferences"> </string>
@@ -311,11 +310,12 @@
 	<string name="title_whats_new">  </string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss"></string>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 10ef73eb..26833c09 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account">Crear cuenta</string>
     <string name="title_edit_account">Editar cuenta</string>
     <string name="info_details">Detalles</string>
-    <string name="menu_export_ofx">Exportar a OFX</string>
+    <string name="menu_export">Exportar a OFX</string>
     <string name="description_add_transaction_icon">Agregar transacci&#243;n a una cuenta</string>
     <string name="label_no_accounts">No hay cuentas</string>
     <string name="label_account_name">Nombre de la cuenta</string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
     <string name="hint_export_choice">Por omisi&#243;n, s&#243;lo las trasacciones nuevas ser&#225;n exportadas. Selecione esta opci&#243;n para exportar todas las transacciones</string>
-    <string name="toast_export_error">Error al exportar los datos OFX</string>
+    <string name="toast_export_error">Error al exportar los datos %1$s</string>
     <string name="btn_export">Exportar</string>
     <string name="option_delete_after_export">Borrar despu&#233;s de exportar</string>
     <string name="hint_delete_after_export">Todas las transacciones ser&#225;n borradas despu&#233;s de ser exportadas completamente</string>
@@ -116,7 +116,8 @@
 		<item>C&#243;rdoba Nicarag&#252;ense</item>
 		<item>Col&#243;n Costarricense</item>
 		<item>Kuna Croata</item>
-		<item>Peso Cubano</item>
+        <item>Peso convertible</item>
+        <item>Peso Cubano</item>
 		<item>Corona Checa</item>
 		<item>Dalasi</item>
 		<item>Corona Danesa</item>
@@ -193,8 +194,6 @@
 		<item>Rupia pakistan&#237;</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso convertible</item>
-		<item>Peso uruguayo</item>
 		<item>Peso filipino</item>
 		<item>Platino</item>
 		<item>Libra esterlina</item>
@@ -243,7 +242,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Peso uruguayo en Unidades Indexadas (URUIURUI)</item>
-		<item>D&#243;lar Estadounidense</item>
+        <item>Peso uruguayo</item>
+        <item>D&#243;lar Estadounidense</item>
 		<item>Som uzbeko</item>
 		<item>Vatu</item>
 		<item>Euro WIR</item>
@@ -273,10 +273,9 @@
 	<string name="title_about_gnucash">Acerca de Gnucash</string>
 	<string name="summary_about_gnucash">GnucashMobile es una aplicaci&#243;n de registro de finanzas para Android\nEsta permite un registro flexible de los gastos realizados, los cuales pueden ser exportados a formato Open Financial eXchange (OFX) e importados a Gnucash desde una computadora de escritorio.</string>
 	<string name="title_about">Acerca de</string>
-	<string name="toast_error_exporting">No se pudo escribir el archivo OFX en:\n</string>
-	<string name="toast_ofx_exported_to">Archivo OFX exportado a:\n</string>
-	<string name="title_export_email">Exportaci&#243;n OFX de Gnucash</string>
-	<string name="description_export_email">Exportaci&#243;n OFX de Gnucash </string>
+	<string name="toast_format_exported_to">Archivo %1$s exportado a:\n</string>
+	<string name="title_export_email">Exportaci&#243;n %1$s de Gnucash Android</string>
+	<string name="description_export_email">Exportaci&#243;n de Gnucash Android </string>
 	<string name="header_transaction_settings">Transacciones</string>
 	<string name="title_transaction_preferences">Opciones de transacci&#243;n</string>
 	<string name="title_account_preferences">Opciones de cuenta</string>
@@ -305,11 +304,12 @@
 	<string name="title_whats_new">&#191;Qu&#233; hay nuevo?</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index dfe91296..ffb5796d 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account">Crear Cuenta</string>
     <string name="title_edit_account">Editar Cuenta</string>
     <string name="info_details">Info</string>
-    <string name="menu_export_ofx">Exportar OFX</string>
+    <string name="menu_export">Exportar OFX</string>
     <string name="description_add_transaction_icon">A&#241;adir una nueva transacci&#243;n a una cuenta</string>
     <string name="label_no_accounts">No hay cuentas que mostrar</string>
     <string name="label_account_name">Nombre de la cuenta</string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Exportar todas las transacciones</string>
     <string name="hint_export_choice">Por defecto solo las nuevas transacciones desde la &#250;ltima exportaci&#243;n ser&#225;n exportadas. Seleccione esta opci&#243;n para exportar todas las transacciones</string>
-    <string name="toast_export_error">Error exportando datos OFX</string>
+    <string name="toast_export_error">Error exportando datos %1$s</string>
     <string name="btn_export">Exportar</string>
     <string name="option_delete_after_export">Borrar despu&#233;s de exportar</string>
     <string name="hint_delete_after_export">Todas las transacciones exportadas ser&#225;n borradas cuando la exportaci&#243;n haya terminado</string>
@@ -116,7 +116,8 @@
 		<item>C&#243;rdoba Nicaragense</item>
 		<item>Col&#243;n Costarricense</item>
 		<item>Kuna Croata</item>
-		<item>Peso Cubano</item>
+        <item>Peso convertible</item>
+        <item>Peso Cubano</item>
 		<item>Corona Checa</item>
 		<item>Dalasi</item>
 		<item>Corona Danesa</item>
@@ -193,8 +194,6 @@
 		<item>Rupia pakistan&#237;</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso convertible</item>
-		<item>Peso uruguayo</item>
 		<item>Peso filipino</item>
 		<item>Platino</item>
 		<item>Libra esterlina</item>
@@ -243,7 +242,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Peso uruguayo en Unidades Indexadas (URUIURUI)</item>
-		<item>D&#243;lar Estadounidense</item>
+        <item>Peso uruguayo</item>
+        <item>D&#243;lar Estadounidense</item>
 		<item>Som uzbeko</item>
 		<item>Vatu</item>
 		<item>Euro WIR</item>
@@ -273,10 +273,9 @@
 	<string name="title_about_gnucash">Acerca de Gnucash</string>
 	<string name="summary_about_gnucash">GnucashMobile es una aplicaci&#243;n de registro de gastos financieros para Android.\nPermite un registro flexible de gastos en cualquier lugar que luego pueden ser exportados al formato Open Financial eXchange (OFX) e importados en la aplicaci&#243;n Gnucash para el escritorio.</string>
 	<string name="title_about">Acerca de</string>
-	<string name="toast_error_exporting">No se pudo guardar el archivo OFX en:\n</string>
-	<string name="toast_ofx_exported_to">Archivo OFX exportado a:\n</string>
-	<string name="title_export_email">Exportaci&#243;n OFX de Gnucash</string>
-	<string name="description_export_email">Exportaci&#243;n OFX de Gnucash</string>
+	<string name="toast_format_exported_to">Archivo %1$s exportado a:\n</string>
+	<string name="title_export_email">Exportaci&#243;n %1$s de Gnucash Android</string>
+	<string name="description_export_email">Exportaci&#243;n de Gnucash</string>
 	<string name="header_transaction_settings">Transacciones</string>
 	<string name="title_transaction_preferences">Preferencias de transacciones</string>
 	<string name="title_account_preferences">Preferencias de cuentas</string>
@@ -305,11 +304,12 @@
 	<string name="title_whats_new">Novedades</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 0ed99da5..2f037614 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account">Cr&#233;er un compte</string>
     <string name="title_edit_account">diter le compte</string>
     <string name="info_details">Informations</string>
-    <string name="menu_export_ofx">Exporter en OFX</string>
+    <string name="menu_export">Exporter en OFX</string>
     <string name="description_add_transaction_icon">Ajoute une nouvelle transaction &#224; un compte</string>
     <string name="label_no_accounts">Aucun compte &#224; afficher</string>
     <string name="label_account_name">Nom de compte</string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog">Exporter les transactions</string>
     <string name="option_export_all_transactions">Exporter toutes les transactions</string>
     <string name="hint_export_choice">Par d&#233;faut, seul les nouvelles transactions depuis le dernier export seront exportes. Cochez cette option pour exporter toutes les transactions</string>
-    <string name="toast_export_error">Erreur lors de l\'export des donn&#233;es en OFX</string>
+    <string name="toast_export_error">Erreur lors de l\'export des donn&#233;es en %1$s</string>
     <string name="btn_export">Exporter</string>
     <string name="option_delete_after_export">Supprimer apr&#232;s export</string>
     <string name="hint_delete_after_export">Toutes les transactions export&#233;es seront supprimes apr&#233;s l\'export</string>
@@ -116,6 +116,7 @@
         <item>Cordoba Oro</item>
         <item>Costa Rican Colon</item>
         <item>Croatian Kuna</item>
+        <item>Cuban Convertible Peso</item>
         <item>Cuban Peso</item>
         <item>Czech Koruna</item>
         <item>Dalasi</item>
@@ -193,8 +194,6 @@
         <item>Pakistan Rupee</item>
         <item>Palladium</item>
         <item>Pataca</item>
-        <item>Peso Convertible</item>
-        <item>Peso Uruguayo</item>
         <item>Philippine Peso</item>
         <item>Platinum</item>
         <item>Pound Sterling</item>
@@ -243,6 +242,7 @@
         <item>Unidad de Valor Real</item>
         <item>Unidades de fomento</item>
         <item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
+        <item>Uruguayan Peso</item>
         <item>US Dollar</item>
         <item>Uzbekistan Sum</item>
         <item>Vatu</item>
@@ -273,10 +273,9 @@
     <string name="title_about_gnucash"> propos de GnuCash</string>
     <string name="summary_about_gnucash">GnucashMobile est une application mobile de suivis de finance pour Android.\nElle permet un suivi simple des d&#233;penses qui peut &#234;tre export&#233; vers le format Open Financial eXchange (OFX) et import&#233; dans GnuCash pour PC.</string>
     <string name="title_about">A propos</string>
-    <string name="toast_error_exporting">Impossible d\'&#233;crire un fichier OFX en :\n</string>
-    <string name="toast_ofx_exported_to">Fichier OFX export&#233; en :\n</string>
-    <string name="title_export_email">GnuCash OFX export</string>
-    <string name="description_export_email">GnuCash OFX export de </string>
+    <string name="toast_format_exported_to">Fichier %1$s export&#233; en :\n</string>
+    <string name="title_export_email">GnuCash Android %1$s export</string>
+    <string name="description_export_email">GnuCash Android export de </string>
     <string name="header_transaction_settings">Transactions</string>
     <string name="title_transaction_preferences">Pr&#233;f&#233;rences des transactions</string>
     <string name="title_account_preferences">Pr&#233;f&#233;rences du compte</string>
@@ -305,11 +304,12 @@
     <string name="title_whats_new">Nouveautes</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
     <string name="label_dismiss">Passer</string>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 8dd9a501..2314ab77 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -20,7 +20,7 @@
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
-    <string name="menu_export_ofx">Export OFX</string>
+    <string name="menu_export">Export OFX</string>
     <string name="description_add_transaction_icon">Add a new transaction to an account</string>
     <string name="label_no_accounts">No accounts to display</string>
     <string name="label_account_name">Account name</string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
-    <string name="toast_export_error">Error exporting OFX data</string>
+    <string name="toast_export_error">Error exporting %1$s data</string>
     <string name="btn_export">Export</string>
     <string name="option_delete_after_export">Delete after export</string>
     <string name="hint_delete_after_export">All exported transactions will be deleted when exporting is completed</string>
@@ -116,7 +116,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danish Krone</item>
@@ -193,8 +194,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -243,7 +242,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dollar</item>
+        <item>Uruguayan Peso</item>
+        <item>US Dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -273,10 +273,9 @@
 	<string name="title_about_gnucash">About GnuCash</string>
 	<string name="summary_about_gnucash">Gnucash is a mobile finance expense tracker application for Android.\nIt enables flexible tracking of expenses on-the-go which can be exported to the Open Financial eXchange (OFX) format and imported into GnuCash for the desktop.</string>
 	<string name="title_about">About</string>
-	<string name="toast_error_exporting">Could not write OFX file to :\n</string>
-	<string name="toast_ofx_exported_to">OFX file exported to:\n</string>
-	<string name="title_export_email">GnuCash OFX export</string>
-	<string name="description_export_email">GnuCash OFX Export from </string>
+	<string name="toast_format_exported_to">%1$s file exported to:\n</string>
+	<string name="title_export_email">GnuCash %1$s export</string>
+	<string name="description_export_email">GnuCash Android Export from </string>
 	<string name="header_transaction_settings">Transactions</string>
 	<string name="title_transaction_preferences">Transaction Preferences</string>
 	<string name="title_account_preferences">Account Preferences</string>
@@ -305,11 +304,12 @@
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Dismiss</string>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index f40568a1..b4882656 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account">Crea conto</string>
     <string name="title_edit_account">Modifica conto</string>
     <string name="info_details">Informazioni</string>
-    <string name="menu_export_ofx">Esporta OFX</string>
+    <string name="menu_export">Esporta OFX</string>
     <string name="description_add_transaction_icon">Aggiungi una nuova transazione al conto</string>
     <string name="label_no_accounts">Nessun conto da visualizzare</string>
     <string name="label_account_name">Nome conto</string>
@@ -52,7 +52,7 @@
     <string name="title_export_dialog">Esporta transazioni</string>
     <string name="option_export_all_transactions">Esporta tutte le transazioni</string>
     <string name="hint_export_choice">Di default, verranno esportate solo le transazioni dall\'ultima esportazione. Selezionare questa opzione per esportare tutte le transazioni</string>
-    <string name="toast_export_error">Errore nell\'esportazione dei dati OFX</string>
+    <string name="toast_export_error">Errore nell\'esportazione dei dati %1$s</string>
     <string name="btn_export">Esporta</string>
     <string name="option_delete_after_export">Elimina dopo l\'esportazione</string>
     <string name="hint_delete_after_export">Tutte le transazioni esportate verranno eliminate al termine dell\'esportazione</string>
@@ -117,7 +117,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danish Krone</item>
@@ -194,8 +195,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -244,7 +243,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dollar</item>
+        <item>Uruguayan Peso</item>
+        <item>US Dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -274,10 +274,9 @@
 	<string name="title_about_gnucash">Informazioni su GnuCash</string>
 	<string name="summary_about_gnucash">GnuCashMobile &#232; un\'applicazione Android per tenere traccia delle proprie spese.\nPermette di registrare le proprie uscite al volo, di esportarle in formato OFX (Open Financial eXchange) e di importarle nella versione desktop di GnuCash.</string>
 	<string name="title_about">Informazioni</string>
-	<string name="toast_error_exporting">Impossibile scrivere il file OFX in:\n</string>
-	<string name="toast_ofx_exported_to">File OFX esportato in:\n</string>
-	<string name="title_export_email">Esportazione file OFX di GnuCash</string>
-	<string name="description_export_email">Esportazione OFX di GnuCash con </string>
+	<string name="toast_format_exported_to">File %1$s esportato in:\n</string>
+	<string name="title_export_email">Esportazione file %1$s di GnuCash</string>
+	<string name="description_export_email">Esportazione di GnuCash Android con </string>
 	<string name="header_transaction_settings">Transazioni</string>
 	<string name="title_transaction_preferences">Preferenze della transazione</string>
 	<string name="title_account_preferences">Preferenze del conto</string>
@@ -306,11 +305,12 @@
 	<string name="title_whats_new">Novit</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Chiudi</string>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 7efbe54a..34b207f7 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -22,7 +22,7 @@
     <string name="title_add_account">Opprett konto</string>
     <string name="title_edit_account">Rediger konto</string>
     <string name="info_details">Informasjon</string>
-    <string name="menu_export_ofx">Eksport OFX</string>
+    <string name="menu_export">Eksport OFX</string>
     <string name="description_add_transaction_icon">Legg til ny kontotransaksjon</string>
     <string name="label_no_accounts">Ingen kontoer  vise</string>
     <string name="label_account_name">Kontonavn</string>
@@ -52,7 +52,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Eksporter alle transaksjoner</string>
     <string name="hint_export_choice">Vanligvis vil kun nye transaksjoner bli eksportert.  Merk dette valget for  eksportere alle transaksjonene</string>
-    <string name="toast_export_error">Feil ved eksportering av OFX-data</string>
+    <string name="toast_export_error">Feil ved eksportering av %1$s-data</string>
     <string name="btn_export">Eksporter</string>
     <string name="option_delete_after_export">Slett etter eksportering</string>
     <string name="hint_delete_after_export">Alle eksporterte transaksjoner vil bli slettet etter eksportering</string>
@@ -117,7 +117,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danske kroner</item>
@@ -194,8 +195,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Engelske pund</item>
@@ -244,7 +243,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>Amerikanske dollar</item>
+        <item>Uruguayan Peso</item>
+        <item>Amerikanske dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -276,10 +276,9 @@
 muligheten til  raskt og fleksibelt logge transaksjoner som kan eksporteres til OFX (Open Financial eXchange)-
 format og importeres i regnskapsprogrammet GnuCash for PC.</string> 
 	<string name="title_about">Om</string>
-	<string name="toast_error_exporting">Kunne ikke lagre OFX-fil til :\n</string>
-	<string name="toast_ofx_exported_to">OFX-fil eksportert til:\n</string>
-	<string name="title_export_email">Gnucash OFX-eksportering</string>
-	<string name="description_export_email">Gnucash OFX-eksportering til </string>
+	<string name="toast_format_exported_to">%1$s-fil eksportert til:\n</string>
+	<string name="title_export_email">Gnucash Android %1$s-eksportering</string>
+	<string name="description_export_email">Gnucash Android-eksportering til </string>
 	<string name="header_transaction_settings">Transaksjoner</string>
 	<string name="title_transaction_preferences">Transaksjonsinnstillinger</string>
 	<string name="title_account_preferences">Kontoinnstillinger</string>
@@ -308,11 +307,12 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
 	<string name="title_whats_new">Hva er nytt</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Ferdig</string>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 40e64618..ddc904d0 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account">Nieuw rekening</string>
     <string name="title_edit_account">Rekening bewerken</string>
     <string name="info_details">Info</string>
-    <string name="menu_export_ofx">OFX exporteren</string>
+    <string name="menu_export">OFX exporteren</string>
     <string name="description_add_transaction_icon">Nieuwe transactie in een rekening</string>
     <string name="label_no_accounts">Geen rekeningen beschikbaar</string>
     <string name="label_account_name">Rekeningnaam</string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog">OFX Exporteren</string>
     <string name="option_export_all_transactions">All transacties exporteren</string>
     <string name="hint_export_choice">Aanvinken om alle transacties te exporteren. Anders worden enkel de nieuwe transacties sinds de laatste export ge&#235;xporteerd.</string>
-    <string name="toast_export_error">Fout tijdens het exporteren van de OFX data</string>
+    <string name="toast_export_error">Fout tijdens het exporteren van de %1$s data</string>
     <string name="btn_export">Exporteer</string>
     <string name="option_delete_after_export">Verwijderen na exporteren</string>
     <string name="hint_delete_after_export">Alle ge&#235;xporteerde transacties zullen verwijderd worden na de export</string>
@@ -116,7 +116,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danish Krone</item>
@@ -193,8 +194,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -243,7 +242,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dollar</item>
+        <item>Uruguayan Peso</item>
+        <item>US Dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -273,10 +273,9 @@
 	<string name="title_about_gnucash">Over GnuCash</string>
 	<string name="summary_about_gnucash">GnucashMobile is een mobiele uitgavebeheerstoepassing voor Android.\nHet laat onderweg een snelle en flexibele registratie van uitgaven toe, die als OFX gegevens ge&#235;xporteerd kunnen worden om in de GnuCash-toepassing op een desktop-computer te importeren.</string>
 	<string name="title_about">Over</string>
-	<string name="toast_error_exporting">Fout bij het schrijven van de OFX data naar bestand:\n</string>
-	<string name="toast_ofx_exported_to">OFX data ge&#235;exporteerd naar:\n</string>
-	<string name="title_export_email">GnuCash OFX export</string>
-	<string name="description_export_email">GnuCash OFX Export van </string>
+	<string name="toast_format_exported_to">%1$s data ge&#235;exporteerd naar:\n</string>
+	<string name="title_export_email">GnuCash Android %1$s export</string>
+	<string name="description_export_email">GnuCash Android Export van </string>
 	<string name="header_transaction_settings">Transacties</string>
 	<string name="title_transaction_preferences">Transactie voorkeuren</string>
 	<string name="title_account_preferences">Account voorkeuren</string>
@@ -305,11 +304,12 @@
 	<string name="title_whats_new">Nieuw sinds de vorige versie</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Wijs af</string>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index cedfb152..89c6a37b 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -20,7 +20,7 @@
 	  <string name="title_add_account">Criar Conta</string>
 	  <string name="title_edit_account">Editar Conta</string>
 	  <string name="info_details">Info</string>
-	  <string name="menu_export_ofx">Exportar OFX</string>
+	  <string name="menu_export">Exportar OFX</string>
 	  <string name="description_add_transaction_icon">Adicionar nova transao para uma conta</string>
 	  <string name="label_no_accounts">Sem contas para apresentar</string>
 	  <string name="label_account_name">Nome da conta</string>
@@ -50,7 +50,7 @@
 	  <string name="title_export_dialog">Export Transactions</string>
 	  <string name="option_export_all_transactions">Exportar todas as transaes</string>
 	  <string name="hint_export_choice">Por padro, s sero exportadas as transaes criadas aps o ltimo procedimento de exportar. Selecionar essa opo para exportar todas as transaes.</string>
-	  <string name="toast_export_error">Erro ao exportar os dados OFX</string>
+	  <string name="toast_export_error">Erro ao exportar os dados %1$s</string>
 	  <string name="btn_export">Exportar</string>
 	  <string name="option_delete_after_export">Deletar aps exportar</string>
 	  <string name="hint_delete_after_export">Todas as transao exportadas sero deletadas aps completar o procedimento de exportar.</string>
@@ -115,7 +115,8 @@
 	    <item>Ouro Cordoba</item>
 	    <item>Colon de Costa Rica</item>
 	    <item>Kuna Croata</item>
-	    <item>Peso Cubano</item>
+        <item>Peso conversvel Cubano</item>
+        <item>Peso Cubano</item>
 	    <item>Coroa Tcheca</item>
 	    <item>Dalasi</item>
 	    <item>Coroa da Dinamarca</item>
@@ -192,8 +193,6 @@
 	    <item>Rupia do Paquisto</item>
 	    <item>Paladio</item>
 	    <item>Pataca</item>
-	    <item>Peso conversvel</item>
-	    <item>Peso Uruguaio</item>
 	    <item>Peso Filipino</item>
 	    <item>Platina</item>
 	    <item>Libra Esterlina</item>
@@ -242,7 +241,8 @@
 	    <item>Unidade de Valor Real</item>
 	    <item>unidades de fomento</item>
 	    <item>Uruguai Peso em Unidades Indexadas</item>
-	    <item>Dlar dos EUA</item>
+        <item>Peso Uruguaio</item>
+        <item>Dlar dos EUA</item>
 	    <item>Som do Uzbequisto</item>
 	    <item>Vatu</item>
 	    <item>WIR Euro</item>
@@ -272,10 +272,9 @@
 	  <string name="title_about_gnucash">Sobre o GnuCash</string>
 	  <string name="summary_about_gnucash">GnuCash  um aplicativo para controle de despesas no Android.\nEle proporciona uma forma flexvel de registrar despesas on-the-go, que podem ser exportadas para o formato Open Financial eXchange (OFX) e importadas para o Gnucash para desktop.</string>
 	  <string name="title_about">Sobre</string>
-	  <string name="toast_error_exporting">No foi possvel gravar o arquivo OFX em :\n</string>
-	  <string name="toast_ofx_exported_to">Arquivo OFX exportado para:\n</string>
-	  <string name="title_export_email">Exportar GnuCash OFX</string>
-	  <string name="description_export_email">Exportar GnuCash OFX de</string>
+	  <string name="toast_format_exported_to">Arquivo %1$s exportado para:\n</string>
+	  <string name="title_export_email">Exportar GnuCash %1$s</string>
+	  <string name="description_export_email">Exportar GnuCash Android de</string>
 	  <string name="header_transaction_settings">Transaes</string>
 	  <string name="title_transaction_preferences">Preferncias para Transaes</string>
 	  <string name="title_account_preferences">Preferncias para Contas</string>
@@ -304,11 +303,12 @@
 	  <string name="title_whats_new">O que h de novo</string>
 	  <string name="whats_new">
           - Create multiple splits per transaction\n
-          - Account balances now follow GnuCash Desktop accounting principles\n
-          - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+          - Fixed computation of account balances for different account types\n
+          - Use account-specific labels for CREDIT/DEBITs\n
           - Automated backup of database before deletion operations\n
           - Restore most recent backup of database (in Settings -> General)\n
           - Read transactions from GnuCash XML files (limited support)\n
+          - Option to save opening balances before deleting transactions\n
           - Multiple bug fixes and improvements\n
 	  </string>
 	  <string name="label_dismiss">Descartar</string>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index ed2139d5..436261d9 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -21,7 +21,7 @@
     <string name="title_add_account"> </string>
     <string name="title_edit_account"> </string>
     <string name="info_details"></string>
-    <string name="menu_export_ofx"> OFX</string>
+    <string name="menu_export"> OFX</string>
     <string name="description_add_transaction_icon">    </string>
     <string name="label_no_accounts"> </string>
     <string name="label_account_name"> </string>
@@ -51,7 +51,7 @@
     <string name="title_export_dialog"> </string>
     <string name="option_export_all_transactions"> </string>
     <string name="hint_export_choice">  ,    .</string>
-    <string name="toast_export_error">   OFX</string>
+    <string name="toast_export_error">   %1$s</string>
     <string name="btn_export"></string>
     <string name="option_delete_after_export">  </string>
     <string name="hint_delete_after_export">      .</string>
@@ -116,7 +116,8 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
-		<item>Cuban Peso</item>
+        <item>Cuban Convertible Peso</item>
+        <item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
 		<item>Danish Krone</item>
@@ -193,8 +194,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -243,7 +242,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dollar</item>
+        <item>Uruguayan Peso</item>
+        <item>US Dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -273,10 +273,9 @@
 	<string name="title_about_gnucash"> Gnucash</string>
         <string name="summary_about_gnucash">Gnucash -     Android.\n         Gnucash       OFX (Open Financial eXchange).</string>
 	<string name="title_about"> </string>
-	<string name="toast_error_exporting">    OFX  :\n</string>
-	<string name="toast_ofx_exported_to"> OFX  :\n</string>
-	<string name="title_export_email"> OFX-  Gnucash</string>
-	<string name="description_export_email">OFX-,   Gnucash </string>
+	<string name="toast_format_exported_to"> %1$s  :\n</string>
+	<string name="title_export_email"> %1$s-  Gnucash Android</string>
+	<string name="description_export_email">GnuCash Android export from </string>
 	<string name="header_transaction_settings"></string>
 	<string name="title_transaction_preferences"> </string>
 	<string name="title_account_preferences"> </string>
@@ -305,11 +304,12 @@
 	<string name="title_whats_new"></string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss"></string>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index a7075589..fc21bbbd 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -20,7 +20,7 @@
     <string name="title_add_account"></string>
     <string name="title_edit_account"></string>
     <string name="info_details"></string>
-    <string name="menu_export_ofx">OFX</string>
+    <string name="menu_export">OFX</string>
     <string name="description_add_transaction_icon"></string>
     <string name="label_no_accounts"></string>
     <string name="label_account_name"></string>
@@ -50,7 +50,7 @@
     <string name="title_export_dialog"></string>
     <string name="option_export_all_transactions"></string>
     <string name="hint_export_choice"></string>
-    <string name="toast_export_error">OFX</string>
+    <string name="toast_export_error">%1$s</string>
     <string name="btn_export"></string>
     <string name="option_delete_after_export"></string>
     <string name="hint_delete_after_export"></string>
@@ -115,6 +115,7 @@
         <item></item>
         <item></item>
         <item></item>
+        <item>Cuban Convertible Peso</item>
         <item></item>
         <item></item>
         <item></item>
@@ -192,8 +193,6 @@
         <item></item>
         <item>Palladium</item>
         <item>Pataca</item>
-        <item>Peso Convertible</item>
-        <item>Peso Uruguayo</item>
         <item>Philippine Peso</item>
         <item>Platinum</item>
         <item>Pound Sterling</item>
@@ -242,6 +241,7 @@
         <item>Unidad de Valor Real</item>
         <item>Unidades de fomento</item>
         <item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
+        <item>Uruguayan Peso</item>
         <item></item>
         <item>Uzbekistan Sum</item>
         <item>Vatu</item>
@@ -272,10 +272,9 @@
     <string name="title_about_gnucash">GnuCash</string>
     <string name="summary_about_gnucash">Gnucash for androidOFX GnuCash</string>
     <string name="title_about"></string>
-    <string name="toast_error_exporting">OFX:\n</string>
-    <string name="toast_ofx_exported_to">OFX\n</string>
-    <string name="title_export_email">GnuCash OFX </string>
-    <string name="description_export_email">GnuCash OFX Export from </string>
+    <string name="toast_format_exported_to">%1$s\n</string>
+    <string name="title_export_email">GnuCash Android %1$s </string>
+    <string name="description_export_email">GnuCash Android Export from </string>
     <string name="header_transaction_settings"></string>
     <string name="title_transaction_preferences"></string>
     <string name="title_account_preferences"></string>
@@ -304,11 +303,12 @@
     <string name="title_whats_new"></string>
     <string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
     <string name="label_dismiss"></string>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 8a82cf1b..685afd8d 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,11 +17,11 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.0-beta1</string>
+    <string name="app_version_name">1.4.0-beta2</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
-    <string name="menu_export_ofx">Export OFX</string>
+    <string name="menu_export">Export</string>
     <string name="description_add_transaction_icon">Add a new transaction to an account</string>
     <string name="label_no_accounts">No accounts to display</string>
     <string name="label_account_name">Account name</string>
@@ -52,7 +52,7 @@
     <string name="title_export_dialog">Export Transactions</string>
     <string name="option_export_all_transactions">Export all transactions</string>
     <string name="hint_export_choice">By default, only new transactions since last export will be exported. Check this option to export all transactions</string>
-    <string name="toast_export_error">Error exporting data</string>
+    <string name="toast_export_error">Error exporting %1$s file</string>
     <string name="btn_export">Export</string>
     <string name="option_delete_after_export">Delete after export</string>
     <string name="hint_delete_after_export">All exported transactions will be deleted when exporting is completed</string>
@@ -119,6 +119,7 @@
 		<item>Cordoba Oro</item>
 		<item>Costa Rican Colon</item>
 		<item>Croatian Kuna</item>
+        <item>Cuban Convertible Peso</item>
 		<item>Cuban Peso</item>
 		<item>Czech Koruna</item>
 		<item>Dalasi</item>
@@ -196,8 +197,6 @@
 		<item>Pakistan Rupee</item>
 		<item>Palladium</item>
 		<item>Pataca</item>
-		<item>Peso Convertible</item>
-		<item>Peso Uruguayo</item>
 		<item>Philippine Peso</item>
 		<item>Platinum</item>
 		<item>Pound Sterling</item>
@@ -246,7 +245,8 @@
 		<item>Unidad de Valor Real</item>
 		<item>Unidades de fomento</item>
 		<item>Uruguay Peso en Unidades Indexadas (URUIURUI)</item>
-		<item>US Dollar</item>
+        <item>Uruguayan peso</item>
+        <item>US Dollar</item>
 		<item>Uzbekistan Sum</item>
 		<item>Vatu</item>
 		<item>WIR Euro</item>
@@ -297,7 +297,8 @@
 		<item>NIO</item>
 		<item>CRC</item>
 		<item>HRK</item>
-		<item>CUP</item>
+        <item>CUC</item>
+        <item>CUP</item>
 		<item>CZK</item>
 		<item>GMD</item>
 		<item>DKK</item>
@@ -374,8 +375,6 @@
 		<item>PKR</item>
 		<item>XPD</item>
 		<item>MOP</item>
-		<item>CUC</item>
-		<item>UYU</item>
 		<item>PHP</item>
 		<item>XPT</item>
 		<item>GBP</item>
@@ -424,7 +423,8 @@
 		<item>COU</item>
 		<item>CLF</item>
 		<item>UYI</item>
-		<item>USD</item>
+        <item>UYU</item>
+        <item>USD</item>
 		<item>UZS</item>
 		<item>VUV</item>
 		<item>CHE</item>
@@ -455,12 +455,12 @@
 	<string name="toast_no_transactions_to_export">There are no transactions available to export</string>
 	<string name="key_about">about_gnucash</string>
 	<string name="title_about_gnucash">About GnuCash</string>
-	<string name="summary_about_gnucash">Gnucash is a mobile finance expense tracker application for Android.\nIt enables flexible tracking of expenses on-the-go which can be exported to the Open Financial eXchange (OFX) format and imported into GnuCash for the desktop.</string>
+	<string name="summary_about_gnucash">Gnucash is a mobile finance expense tracker application for Android.\n
+        It enables flexible tracking of expenses on-the-go which can be exported to multiple formats (OFX, QIF) and imported into GnuCash for the desktop.</string>
 	<string name="title_about">About</string>
-	<string name="toast_error_exporting">Could not write OFX file to :\n</string>
-	<string name="toast_ofx_exported_to">OFX file exported to:\n</string>
-	<string name="title_export_email">GnuCash OFX export</string>
-	<string name="description_export_email">GnuCash OFX Export from </string>
+	<string name="toast_format_exported_to">%1$s file exported to:\n</string>
+	<string name="title_export_email">GnuCash Android %1$s export</string>
+	<string name="description_export_email">GnuCash Android Export from </string>
 	<string name="header_transaction_settings">Transactions</string>
 	<string name="title_transaction_preferences">Transaction Preferences</string>
 	<string name="title_account_preferences">Account Preferences</string>
@@ -500,11 +500,12 @@
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
-        - Account balances now follow GnuCash Desktop accounting principles\n
-        - Use account-specific labels for CREDIT/DEBITs (accounting terminology)\n
+        - Fixed computation of account balances for different account types\n
+        - Use account-specific labels for CREDIT/DEBITs\n
         - Automated backup of database before deletion operations\n
         - Restore most recent backup of database (in Settings -> General)\n
         - Read transactions from GnuCash XML files (limited support)\n
+        - Option to save opening balances before deleting transactions\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Dismiss</string>
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index f89ee51d..bbe299c4 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -67,51 +67,6 @@ public AccountsDbAdapter(SQLiteDatabase db) {
     }
 
     /**
-     * Returns the imbalance account where to store transactions which are not double entry
-     * @param currency Currency of the transaction
-     * @return Imbalance account name
-     */
-    public static String getImbalanceAccountName(Currency currency){
-        return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
-    }
-
-    /**
-     * Get the name of the default account for opening balances for the current locale.
-     * For the English locale, it will be "Equity:Opening Balances"
-     * @return Fully qualified account name of the opening balances account
-     */
-    public static String getOpeningBalanceAccountFullName(){
-        Context context = GnuCashApplication.getAppContext();
-        return context.getString(R.string.account_name_equity)
-                + ACCOUNT_NAME_SEPARATOR
-                + context.getString(R.string.account_name_opening_balances);
-    }
-
-    /**
-     * Returns the list of currencies in the database
-     * @return List of currencies in the database
-     */
-    public List<Currency> getCurrencies(){
-        Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
-                null, null, null, null, null, null);
-        List<Currency> currencyList = new ArrayList<Currency>();
-        if (cursor != null){
-            while (cursor.moveToNext()){
-                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
-                currencyList.add(Currency.getInstance(currencyCode));
-            }
-            cursor.close();
-        }
-        return currencyList;
-    }
-
-    @Override
-	public void close() {
-		super.close();
-		mTransactionsAdapter.close();
-	}
-
-    /**
 	 * Adds an account to the database. 
 	 * If an account already exists in the database with the same unique ID, 
 	 * then just update that account. 
@@ -510,7 +465,7 @@ public String createAccountHierarchy(String fullName, AccountType accountType){
         if (fullName == null)
             throw new IllegalArgumentException("The account name cannot be null");
 
-        String[] tokens = fullName.split(ACCOUNT_NAME_SEPARATOR);
+        String[] tokens = fullName.trim().split(ACCOUNT_NAME_SEPARATOR);
         String uid = null;
         String parentName = "";
         for (String token : tokens) {
@@ -1021,7 +976,57 @@ public boolean isFavoriteAccount(long accountId){
         return openingTransactions;
     }
 
-	/**
+
+    /**
+     * Returns the imbalance account where to store transactions which are not double entry
+     * @param currency Currency of the transaction
+     * @return Imbalance account name
+     */
+    public static String getImbalanceAccountName(Currency currency){
+        return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
+    }
+
+    /**
+     * Get the name of the default account for opening balances for the current locale.
+     * For the English locale, it will be "Equity:Opening Balances"
+     * @return Fully qualified account name of the opening balances account
+     */
+    public static String getOpeningBalanceAccountFullName(){
+        Context context = GnuCashApplication.getAppContext();
+        String parentEquity = context.getString(R.string.account_name_equity).trim();
+        //German locale has no parent Equity account
+        if (parentEquity.length() > 0) {
+            return parentEquity + ACCOUNT_NAME_SEPARATOR
+                    + context.getString(R.string.account_name_opening_balances);
+        } else
+            return context.getString(R.string.account_name_opening_balances);
+    }
+
+    /**
+     * Returns the list of currencies in the database
+     * @return List of currencies in the database
+     */
+    public List<Currency> getCurrencies(){
+        Cursor cursor = mDb.query(true, AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_CURRENCY},
+                null, null, null, null, null, null);
+        List<Currency> currencyList = new ArrayList<Currency>();
+        if (cursor != null){
+            while (cursor.moveToNext()){
+                String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+                currencyList.add(Currency.getInstance(currencyCode));
+            }
+            cursor.close();
+        }
+        return currencyList;
+    }
+
+    @Override
+    public void close() {
+        super.close();
+        mTransactionsAdapter.close();
+    }
+
+    /**
 	 * Deletes all accounts and their transactions (and their splits) from the database.
      * Basically empties all 3 tables, so use with care ;)
 	 */
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterTask.java
index a4e886f9..051bd809 100644
--- a/app/src/org/gnucash/android/export/ExporterTask.java
+++ b/app/src/org/gnucash/android/export/ExporterTask.java
@@ -52,8 +52,6 @@
 
     private ProgressDialog mProgressDialog;
 
-    private Exporter mExporter;
-
     /**
      * Log tag
      */
@@ -91,7 +89,8 @@ protected void onPreExecute() {
     protected Boolean doInBackground(ExportParams... params) {
         mExportParams = params[0];
 
-            switch (mExportParams.getExportFormat()) {
+        Exporter mExporter;
+        switch (mExportParams.getExportFormat()) {
                 case QIF:
                     mExporter = new QifExporter(mExportParams);
                     break;
@@ -101,6 +100,7 @@ protected Boolean doInBackground(ExportParams... params) {
                     break;
 
                 case GNC_XML:
+                default:
                     mExporter = new GncXmlExporter(mExportParams);
                     break;
             }
@@ -110,7 +110,6 @@ protected Boolean doInBackground(ExportParams... params) {
         } catch (Exception e) {
             e.printStackTrace();
             Log.e(TAG, e.getMessage());
-            //TODO: Internationalize (and correct ofx specific) error message
             Toast.makeText(mContext, R.string.toast_export_error,
                     Toast.LENGTH_LONG).show();
             return false;
@@ -124,10 +123,9 @@ protected Boolean doInBackground(ExportParams... params) {
      */
     @Override
     protected void onPostExecute(Boolean exportResult) {
-        //TODO: generalize format error strings
         if (!exportResult){
             Toast.makeText(mContext,
-                    mContext.getString(R.string.toast_error_exporting),
+                    mContext.getString(R.string.toast_export_error, mExportParams.getExportFormat().name()),
                     Toast.LENGTH_LONG).show();
             return;
         }
@@ -145,7 +143,8 @@ protected void onPostExecute(Boolean exportResult) {
                     copyFile(src, dst);
                 } catch (IOException e) {
                     Toast.makeText(mContext,
-                            mContext.getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(),
+                            mContext.getString(R.string.toast_export_error, mExportParams.getExportFormat().name())
+                                    + dst.getAbsolutePath(),
                             Toast.LENGTH_LONG).show();
                     Log.e(TAG, e.getMessage());
                     break;
@@ -153,7 +152,8 @@ protected void onPostExecute(Boolean exportResult) {
 
                 //file already exists, just let the user know
                 Toast.makeText(mContext,
-                        mContext.getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(),
+                        mContext.getString(R.string.toast_format_exported_to, mExportParams.getExportFormat().name())
+                                + dst.getAbsolutePath(),
                         Toast.LENGTH_LONG).show();
                 break;
 
@@ -202,7 +202,8 @@ private void shareFile(String path){
         Intent shareIntent = new Intent(Intent.ACTION_SEND);
         shareIntent.setType("application/xml");
         shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://" + path));
-        shareIntent.putExtra(Intent.EXTRA_SUBJECT, mContext.getString(R.string.title_export_email));
+        shareIntent.putExtra(Intent.EXTRA_SUBJECT, mContext.getString(R.string.title_export_email,
+                mExportParams.getExportFormat().name()));
         if (defaultEmail != null && defaultEmail.trim().length() > 0){
             shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
         }

From 0b49a97b89f80084996a641481934bba55168b01 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 25 Jul 2014 10:37:50 +0200
Subject: [PATCH 07/18] Fixed: Crash when deleting transactions with splits
 Fixed: Splits editor shows wrong transaction type when editing splits

---
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 13 +++---
 app/src/org/gnucash/android/model/Transaction.java |  4 +-
 .../ui/transaction/TransactionFormFragment.java    | 13 ++----
 .../dialog/SplitEditorDialogFragment.java          | 47 +++++++++-------------
 .../android/ui/util/AmountInputFormatter.java      | 19 ++-------
 .../ui/util/TransactionTypeToggleButton.java       | 11 ++++-
 6 files changed, 46 insertions(+), 61 deletions(-)

diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index 643ae801..c46d9b66 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -207,12 +207,12 @@ public Money computeSplitBalance(String accountUID){
     public List<Split> getSplitsForTransactionInAccount(String transactionUID, String accountUID){
         Cursor cursor = fetchSplitsForTransactionAndAccount(transactionUID, accountUID);
         List<Split> splitList = new ArrayList<Split>();
-        while (cursor != null && cursor.moveToNext()){
-            splitList.add(buildSplitInstance(cursor));
-        }
-        if (cursor != null)
+        if (cursor != null){
+            while (cursor.moveToNext()){
+                splitList.add(buildSplitInstance(cursor));
+            }
             cursor.close();
-
+        }
         return splitList;
     }
 
@@ -312,6 +312,9 @@ public Cursor fetchSplitsForAccount(String accountUID){
      * @return Cursor to splits data set
      */
     public Cursor fetchSplitsForTransactionAndAccount(String transactionUID, String accountUID){
+        if (transactionUID == null || accountUID == null)
+            return null;
+
         Log.v(TAG, "Fetching all splits for transaction ID " + transactionUID
                 + "and account ID " + accountUID);
         return mDb.query(SplitEntry.TABLE_NAME,
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 0bf5321a..56606dd7 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -428,8 +428,8 @@ public static TransactionType getTypeForBalance(AccountType accountType, boolean
     }
 
     /**
-     * Returns true if the amount represents a decrease for the account balance in accounty of type <code>accountType</code>, false otherwise
-     * @return true if the amount represents a decrease movement for the account balance, false otherwise
+     * Returns true if the transaction type represents a decrease for the account balance for the <code>accountType</code>, false otherwise
+     * @return true if the amount represents a decrease in the account balance, false otherwise
      * @see #getTypeForBalance(AccountType, boolean)
      */
     public static boolean shouldDecreaseBalance(AccountType accountType, TransactionType transactionType){
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index c4ef0687..beae19bc 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -22,8 +22,6 @@
 import java.text.ParseException;
 import java.util.*;
 
-import android.app.AlarmManager;
-import android.app.PendingIntent;
 import android.support.v4.app.FragmentManager;
 import android.widget.*;
 import org.gnucash.android.R;
@@ -55,7 +53,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.CompoundButton.OnCheckedChangeListener;
 
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockFragment;
@@ -365,11 +362,9 @@ private void initalizeViews() {
 		mTimeTextView.setText(TIME_FORMATTER.format(time));
 		mTime = mDate = Calendar.getInstance();
 
-		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
-		if (typePref.equals("CREDIT")){
-            mTransactionTypeButton.setChecked(false);
-        }
         mTransactionTypeButton.setAccountType(mAccountType);
+		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
+        mTransactionTypeButton.setChecked(TransactionType.valueOf(typePref));
 
 		final long accountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
 		String code = Money.DEFAULT_CURRENCY_CODE;
@@ -464,7 +459,7 @@ private void openSplitEditor(){
 	 * Sets click listeners for the dialog buttons
 	 */
 	private void setListeners() {
-        mAmountInputFormatter = new AmountInputFormatter(mAmountEditText, mTransactionTypeButton);
+        mAmountInputFormatter = new AmountInputFormatter(mAmountEditText);
         mAmountEditText.addTextChangedListener(mAmountInputFormatter);
 
         mOpenSplitsButton.setOnClickListener(new View.OnClickListener() {
@@ -474,7 +469,7 @@ public void onClick(View view) {
             }
         });
 
-		mTransactionTypeButton.setupCheckedListener(mAmountEditText, mCurrencyTextView);
+		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
 
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 1c364141..504a3c15 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -117,12 +117,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
             final Currency currency = Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountUID));
             Split split = new Split(new Money(mBaseAmount, currency), mAccountUID);
             AccountType accountType = mAccountsDbAdapter.getAccountType(mAccountUID);
-            TransactionType transactionType;
-            if (accountType.hasDebitNormalBalance()) {
-                transactionType = mBaseAmount.signum() < 0 ? TransactionType.CREDIT : TransactionType.DEBIT;
-            } else {
-                transactionType = mBaseAmount.signum() < 0 ? TransactionType.CREDIT : TransactionType.DEBIT;
-            }
+            TransactionType transactionType = Transaction.getTypeForBalance(accountType, mBaseAmount.signum() < 0);
             split.setType(transactionType);
             View view = addSplitView(split);
             view.findViewById(R.id.input_accounts_spinner).setEnabled(false);
@@ -186,8 +181,7 @@ private void bindSplitView(final View splitView, Split split){
         final TextView splitUidTextView         = (TextView)    splitView.findViewById(R.id.split_uid);
         final TransactionTypeToggleButton splitTypeButton = (TransactionTypeToggleButton) splitView.findViewById(R.id.btn_split_type);
 
-        splitAmountEditText.addTextChangedListener(new AmountInputFormatter(splitAmountEditText,splitTypeButton));
-        splitAmountEditText.addTextChangedListener(mBalanceUpdater);
+        splitAmountEditText.addTextChangedListener(new AmountInputFormatter(splitAmountEditText));
 
         removeSplitButton.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -199,17 +193,10 @@ public void onClick(View view) {
             }
         });
 
-        accountsSpinner.setOnItemSelectedListener(new TypeButtonLabelUpdater(splitTypeButton));
         updateTransferAccountsList(accountsSpinner);
+        accountsSpinner.setOnItemSelectedListener(new TypeButtonLabelUpdater(splitTypeButton));
 
-        splitTypeButton.setupCheckedListener(splitAmountEditText, splitCurrencyTextView);
-        splitTypeButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                updateTotal();
-            }
-        });
-
+        splitTypeButton.setAmountFormattingListener(splitAmountEditText, splitCurrencyTextView);
         splitTypeButton.setChecked(mBaseAmount.signum() > 0);
         splitUidTextView.setText(UUID.randomUUID().toString());
 
@@ -217,10 +204,20 @@ public void onClick(View view) {
             splitAmountEditText.setText(split.getAmount().toPlainString());
             splitMemoEditText.setText(split.getMemo());
             splitUidTextView.setText(split.getUID());
-
-            setSelectedTransferAccount(mAccountsDbAdapter.getAccountID(split.getAccountUID()), accountsSpinner);
-            splitTypeButton.setChecked(Transaction.shouldDecreaseBalance(splitTypeButton.getAccountType(), split.getType()));
+            String splitAccountUID = split.getAccountUID();
+            setSelectedTransferAccount(mAccountsDbAdapter.getAccountID(splitAccountUID), accountsSpinner);
+            splitTypeButton.setAccountType(mAccountsDbAdapter.getAccountType(splitAccountUID));
+            splitTypeButton.setChecked(split.getType());
         }
+
+        //put these balance update triggers last last so as to avoid computing while still loading
+        splitAmountEditText.addTextChangedListener(mBalanceUpdater);
+        splitTypeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                updateTotal();
+            }
+        });
     }
 
     /**
@@ -230,13 +227,7 @@ public void onClick(View view) {
     private void setSelectedTransferAccount(long accountId, final Spinner accountsSpinner){
         for (int pos = 0; pos < mCursorAdapter.getCount(); pos++) {
             if (mCursorAdapter.getItemId(pos) == accountId){
-                final int position = pos;
-                accountsSpinner.postDelayed(new Runnable() {
-                    @Override
-                    public void run() {
-                        accountsSpinner.setSelection(position);
-                    }
-                }, 100);
+                accountsSpinner.setSelection(pos);
                 break;
             }
         }
@@ -290,7 +281,7 @@ public void onClick(View view) {
         List<Split> splitList = new ArrayList<Split>();
         for (View splitView : mSplitItemViewList) {
             EditText splitMemoEditText              = (EditText)    splitView.findViewById(R.id.input_split_memo);
-            EditText splitAmountEditText      = (EditText)    splitView.findViewById(R.id.input_split_amount);
+            EditText splitAmountEditText            = (EditText)    splitView.findViewById(R.id.input_split_amount);
             Spinner accountsSpinner                 = (Spinner)     splitView.findViewById(R.id.input_accounts_spinner);
             TextView splitUidTextView               = (TextView)    splitView.findViewById(R.id.split_uid);
             TransactionTypeToggleButton splitTypeButton = (TransactionTypeToggleButton) splitView.findViewById(R.id.btn_split_type);
diff --git a/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java b/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java
index 9ac19179..5e90b50d 100644
--- a/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java
+++ b/app/src/org/gnucash/android/ui/util/AmountInputFormatter.java
@@ -18,7 +18,6 @@
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.widget.EditText;
-import android.widget.ToggleButton;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 
 import java.math.BigDecimal;
@@ -37,15 +36,13 @@
 public class AmountInputFormatter implements TextWatcher {
     private String current = "0";
     private EditText amountEditText;
-    private ToggleButton mTypeButton;
     /**
      * Flag to note if the user has manually edited the amount of the transaction
      */
     private boolean isModified = false;
 
-    public AmountInputFormatter(EditText amountInput, ToggleButton typeButton) {
+    public AmountInputFormatter(EditText amountInput) {
         this.amountEditText = amountInput;
-        this.mTypeButton = typeButton;
     }
 
     @Override
@@ -54,22 +51,12 @@ public void afterTextChanged(Editable s) {
             return;
 //make sure that the sign of the input is in line with the type button state
         BigDecimal amount = TransactionFormFragment.parseInputToDecimal(s.toString());
-        if (mTypeButton.isChecked()) {
-            if (amount.signum() > 0) {
-                amount = amount.negate();
-            }
-        } else { //if it is to increase account balance
-            if (amount.signum() <= 0) {
-//make the number positive
-                amount = amount.negate();
-            }
-        }
 
         DecimalFormat formatter = (DecimalFormat) NumberFormat.getInstance(Locale.getDefault());
-        formatter.setMinimumFractionDigits(2);
+        formatter.setMinimumFractionDigits(2);  //TODO: Use fraction of the currency in question
         formatter.setMaximumFractionDigits(2);
 
-        current = formatter.format(amount.doubleValue());
+        current = formatter.format(amount.doubleValue()); //TODO: Try with Bigdecimal string instead of double
         amountEditText.removeTextChangedListener(this);
         amountEditText.setText(current);
         amountEditText.setSelection(current.length());
diff --git a/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java b/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
index 25ebb81f..23dba92c 100644
--- a/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
+++ b/app/src/org/gnucash/android/ui/util/TransactionTypeToggleButton.java
@@ -24,6 +24,7 @@
 import android.widget.ToggleButton;
 import org.gnucash.android.R;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 
@@ -105,11 +106,19 @@ public void setAccountType(AccountType accountType){
      * @param amoutView Amount string {@link android.widget.EditText}
      * @param currencyTextView Currency symbol text view
      */
-    public void setupCheckedListener(EditText amoutView, TextView currencyTextView){
+    public void setAmountFormattingListener(EditText amoutView, TextView currencyTextView){
         setOnCheckedChangeListener(new OnTypeChangedListener(amoutView, currencyTextView));
     }
 
     /**
+     * Toggles the button checked based on the movement caused by the transaction type for the specified account
+     * @param transactionType {@link org.gnucash.android.model.TransactionType} of the split
+     */
+    public void setChecked(TransactionType transactionType){
+        setChecked(Transaction.shouldDecreaseBalance(mAccountType, transactionType));
+    }
+
+    /**
      * Returns the account type associated with this button
      * @return
      */

From af507a1dc299b84cb398c75c51f538e1d1861d29 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 25 Jul 2014 18:24:31 +0200
Subject: [PATCH 08/18] Squashes bugs from Android crash logs

- Fixed bug causing crash on start for some locales where device locale has no supported currency
- Fixed app crash post-import/export operations
- Updated Contributions section of README
---
 README.md                                          | 65 +++++++++++++---------
 .../gnucash/android/app/GnuCashApplication.java    | 33 +++++++++++
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  6 +-
 .../org/gnucash/android/export/ExporterTask.java   |  3 +-
 .../gnucash/android/importer/GncXmlImportTask.java |  3 +-
 .../android/ui/account/AccountFormFragment.java    |  9 +--
 .../android/ui/account/AccountsActivity.java       | 18 +-----
 .../ui/transaction/TransactionFormFragment.java    |  1 +
 .../ui/transaction/TransactionsListFragment.java   |  2 +-
 9 files changed, 86 insertions(+), 54 deletions(-)

diff --git a/README.md b/README.md
index fb0b1f9f..31d28d93 100644
--- a/README.md
+++ b/README.md
@@ -1,45 +1,58 @@
 # Introduction
 
 Gnucash Mobile for Android is companion application for desktop Gnucash designed for Android.
-It allows you to record transactions on-the-go and export them in the OFX format and later import the data into Gnucash for the desktop. You can create multiple accounts for transactions in Gnucash. Double-entry accounting is also supported. 
+It allows you to record transactions on-the-go and export them in the QIF or OFX format and later import the data into Gnucash for the desktop. You can create multiple accounts for transactions in Gnucash. Double-entry accounting is also supported.
 
 The application supports Android 2.2 Froyo (API level 8) and above. 
 
 
 # Installation
 
-There are different ways to get the Gnucash app for Android; through the app store, or building it yourself.
+There are different ways to get the Gnucash app for Android; through the app store, or building it yourself.
 
 
-### App Store
+### App Store
 
 <a href="http://play.google.com/store/apps/details?id=org.gnucash.android">
   <img alt="Android app on Google Play" src="http://developer.android.com/images/brand/en_generic_rgb_wo_60.png" />
-</a>
-
-
-## Building
-
-The build requires [Maven](http://maven.apache.org/download.html)
-v3.0.3+ and the [Android SDK](http://developer.android.com/sdk/index.html)
-to be installed in your development environment. In addition you'll need to set
-the `ANDROID_HOME` environment variable to the location of your SDK:
-
-    export ANDROID_HOME=/home/roberto/tools/android-sdk
-
-After satisfying those requirements, the build is pretty simple:
-
-* Run `mvn clean package` from the `app` directory to build the APK only
-* Run `mvn clean install` from the root directory to build the app and also run
-  the integration tests, this requires a connected Android device or running
-  emulator. (see this [blog post](http://goo.gl/TprMw) for details)
-
-You might find that your device doesn't let you install your build if you
-already have the version from the Android Market installed.  This is standard
-Android security as it it won't let you directly replace an app that's been
-signed with a different key.  Manually uninstall GnuCash from your device and
+</a>
+
+
+## Building
+
+The build requires [Maven](http://maven.apache.org/download.html)
+v3.0.3+ and the [Android SDK](http://developer.android.com/sdk/index.html)
+to be installed in your development environment. In addition you'll need to set
+the `ANDROID_HOME` environment variable to the location of your SDK:
+
+    export ANDROID_HOME=/home/<user>/tools/android-sdk
+
+After satisfying those requirements, the build is pretty simple:
+
+* Run `mvn clean package` from the `app` directory to build the APK only
+* Run `mvn clean install` from the root directory to build the app and also run
+  the integration tests, this requires a connected Android device or running
+  emulator. (see this [blog post](http://goo.gl/TprMw) for details)
+
+You might find that your device doesn't let you install your build if you
+already have the version from the Android Market installed.  This is standard
+Android security as it it won't let you directly replace an app that's been
+signed with a different key.  Manually uninstall GnuCash from your device and
 you will then be able to install your own built version.
 
+## Contributing
+
+There are several ways you could contribute to the development.
+
+One way is providing translations for locales which are not yet available, or improving translations.
+See this [blog post](http://www.codinguser.com/2012/09/gnucash-for-android-beta-2-lost-in-translation/) for some guidelines.
+
+You could as well contribute code, fixing bugs, new features or automated tests.
+Take a look at the [bug tracker](https://github.com/codinguser/gnucash-android/issues?state=open)
+for ideas where to start.
+
+For development, it is recommended to use the IntelliJ IDEA 13+ IDE for development which is available as free
+community edition. Import the project into the IDE from an external (maven) model.The IDE will resolve dependencies automatically.
 
 #Licence
 Gnucash for Android is free software; you can redistribute it and/or 
diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index 6410b380..9a91f2e8 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -19,8 +19,12 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
+import android.util.Log;
 import org.gnucash.android.R;
 
+import java.util.Currency;
+import java.util.Locale;
+
 /**
  * An {@link Application} subclass for retrieving static context
  * @author Ngewi Fet <ngewif@gmail.com>
@@ -64,4 +68,33 @@ public static boolean shouldSaveOpeningBalances(boolean defaultValue){
         SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
         return sharedPrefs.getBoolean(context.getString(R.string.key_save_opening_balances), defaultValue);
     }
+
+    /**
+     * Returns the default currency code for the application. <br/>
+     * What value is actually returned is determined in this order of priority:<ul>
+     *     <li>User currency preference (manually set be user in the app)</li>
+     *     <li>Default currency for the device locale</li>
+     *     <li>United States Dollars</li>
+     * </ul>
+     *
+     * @return Default currency code string for the application
+     */
+    public static String getDefaultCurrency(){
+        Locale locale = Locale.getDefault();
+        //sometimes the locale en_UK is returned which causes a crash with Currency
+        if (locale.getCountry().equals("UK")) {
+            locale = new Locale(locale.getLanguage(), "GB");
+        }
+
+        String currencyCode = "USD"; //start with USD as the default
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        try { //there are some strange locales out there
+            currencyCode = Currency.getInstance(locale).getCurrencyCode();
+        } catch (Throwable e) {
+            Log.e(context.getString(R.string.app_name), e.getMessage());
+        } finally {
+            currencyCode = prefs.getString(context.getString(R.string.key_default_currency), currencyCode);
+        }
+        return currencyCode;
+    }
 }
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index bbe299c4..67999f2e 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -624,10 +624,14 @@ public Money getAccountBalance(long accountId){
      */
     public List<Long> getSubAccountIds(long accountId){
         List<Long> subAccounts = new ArrayList<Long>();
+        String accountUID = getAccountUID(accountId);
+        if (accountUID == null)
+            return subAccounts;
+
         Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
                 new String[]{AccountEntry._ID},
                 AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?",
-                new String[]{getAccountUID(accountId)},
+                new String[]{accountUID},
                 null, null, null);
 
         if (cursor != null){
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterTask.java
index 051bd809..654e6e8f 100644
--- a/app/src/org/gnucash/android/export/ExporterTask.java
+++ b/app/src/org/gnucash/android/export/ExporterTask.java
@@ -172,7 +172,8 @@ protected void onPostExecute(Boolean exportResult) {
             alertFragment.show(fragmentManager, "transactions_delete_confirmation_dialog");
         }
 
-        mProgressDialog.dismiss();
+        if (mProgressDialog != null && mProgressDialog.isShowing())
+            mProgressDialog.dismiss();
 
     }
 
diff --git a/app/src/org/gnucash/android/importer/GncXmlImportTask.java b/app/src/org/gnucash/android/importer/GncXmlImportTask.java
index 37af3317..d16c669a 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImportTask.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImportTask.java
@@ -63,7 +63,8 @@ protected Boolean doInBackground(InputStream... inputStreams) {
 
     @Override
     protected void onPostExecute(Boolean importSuccess) {
-        progressDialog.dismiss();
+        if (progressDialog != null && progressDialog.isShowing())
+            progressDialog.dismiss();
 
         int message = importSuccess ? R.string.toast_success_importing_accounts : R.string.toast_error_importing_accounts;
         Toast.makeText(context, message, Toast.LENGTH_LONG).show();
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index fad1f4c3..2a013e74 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -422,14 +422,7 @@ private void setParentAccountSelection(long parentAccountId){
 
         for (int pos = 0; pos < mParentAccountCursorAdapter.getCount(); pos++) {
             if (mParentAccountCursorAdapter.getItemId(pos) == parentAccountId){
-                final int position = pos;
-                mParentAccountSpinner.postDelayed(new Runnable() {
-                    @Override
-                    public void run() {
-                        mParentAccountSpinner.setSelection(position);
-                    }
-                }, 100);
-//                mParentAccountSpinner.setSelection(pos, true);
+                mParentAccountSpinner.setSelection(pos, true);
                 break;
             }
         }
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index 79d49a66..fa7da330 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -43,6 +43,7 @@
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.importer.GncXmlImportTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.util.Refreshable;
@@ -252,24 +253,9 @@ public void onCreate(Bundle savedInstanceState) {
     private void init() {
         PreferenceManager.setDefaultValues(this, R.xml.fragment_transaction_preferences, false);
 
-        Locale locale = Locale.getDefault();
-        //sometimes the locale en_UK is returned which causes a crash with Currency
-        if (locale.getCountry().equals("UK")) {
-            locale = new Locale(locale.getLanguage(), "GB");
-        }
+        Money.DEFAULT_CURRENCY_CODE = GnuCashApplication.getDefaultCurrency();
 
-        String currencyCode;
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
-        try { //there are some strange locales out there
-            currencyCode = prefs.getString(getString(R.string.key_default_currency),
-                    Currency.getInstance(locale).getCurrencyCode());
-        } catch (Exception e) {
-            Log.e(LOG_TAG, e.getMessage());
-            currencyCode = "USD";
-        }
-
-        Money.DEFAULT_CURRENCY_CODE = currencyCode;
-
         boolean firstRun = prefs.getBoolean(getString(R.string.key_first_run), true);
         if (firstRun){
             createDefaultAccounts();
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index beae19bc..4774ff09 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -772,6 +772,7 @@ public static BigDecimal parseInputToDecimal(String amountString){
         if (clean.length() == 0) //empty string
                 return BigDecimal.ZERO;
 		//all amounts are input to 2 decimal places, so after removing decimal separator, divide by 100
+        //TODO: Handle currencies with different kinds of decimal places
 		BigDecimal amount = new BigDecimal(clean).setScale(2,
 				RoundingMode.HALF_EVEN).divide(new BigDecimal(100), 2,
 				RoundingMode.HALF_EVEN);
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index e873467c..978d3b64 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -279,7 +279,7 @@ public void finishEditMode(){
 	 */
 	public void setActionModeTitle(){
 		int count = getListView().getCheckedItemIds().length; //mSelectedIds.size();
-		if (count > 0){			
+		if (count > 0 && mActionMode != null){
 			mActionMode.setTitle(getResources().getString(R.string.title_selected, count));
 		}
 	}

From 2ce82fbc10cd1f46f5528dab32ebb61da3e68a1d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jorge=20Mart=C3=ADnez=20L=C3=B3pez?= <jorgeml@gmail.com>
Date: Sat, 26 Jul 2014 09:11:30 +0100
Subject: [PATCH 09/18] New Spanish translated strings.

---
 app/res/values-es/strings.xml | 66 +++++++++++++++++++++----------------------
 1 file changed, 33 insertions(+), 33 deletions(-)

diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index ffb5796d..73ccf00e 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -303,14 +303,14 @@
 	<string name="summary_xml_ofx_header">Active esta opci&#243;n para exportar a otras aplicaciones distintas a GnuCash para escritorio</string>
 	<string name="title_whats_new">Novedades</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
-        - Multiple bug fixes and improvements\n
+        - Crear m&#250;ltiples desgloses por transacci&#243;n\n
+        - Arreglar el c&#225;lculo de saldos de cuentas para los distintos tipos de cuentas\n
+        - Usar etiquetas especificas de cuenta para ABONO/CARGO\n
+        - Copia de seguridad autom&#225;tica antes de las operaciones de borrado\n
+        - Restaurar la copia de seguridad m&#225;s reciente (En Ajustes -> General)\n
+        - Soporte limitado de lectura de transacciones en archivos GnuCash XML\n
+        - Opci&#243; de guardar saldos de apertura antes de borrar transacciones\n
+        - Correci&#243;n de errores y mejoras\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
     <string name="toast_transanction_amount_required">Introduzca un importe para guardar la transacci&#243;n</string>
@@ -328,7 +328,7 @@
     <string name="confirm_delete_all_accounts">&#191;Borrar todas la cuentas y transacciones? \nEsta operaci&#243;n no se puede deshacer.
     </string>
     <string name="label_account_type">Tipo de cuenta</string>
-    <string name="summary_delete_all_transactions">Todas las transaccipnes en todas las cuentas ser&#225;n borradas</string>
+    <string name="summary_delete_all_transactions">Todas las transacciones en todas las cuentas ser&#225;n borradas</string>
     <string name="title_delete_all_transactions">Borrar todas las transacciones</string>
     <string name="toast_all_transactions_deleted">Todas las transacciones han sido borradas con &#233;xito</string>
     <string name="title_progress_importing_accounts">Importando cuentas</string>
@@ -389,31 +389,31 @@
         <item>SEMANAL</item>
         <item>MENSUAL</item>
     </string-array>
-    <string name="menu_scheduled_transactions">Scheduled Transactions</string>
-    <string name="title_scheduled_transactions">Scheduled Transactions</string>
-    <string name="title_select_export_destination">Select destination for export</string>
+    <string name="menu_scheduled_transactions">Transacciones Programadas</string>
+    <string name="title_scheduled_transactions">Transacciones Programadas</string>
+    <string name="title_select_export_destination">Seleccionar destino para exportar</string>
     <string name="hint_split_memo">Memo</string>
-    <string name="label_spend">Spend</string>
-    <string name="label_receive">Receive</string>
-    <string name="label_withdrawal">Withdrawal</string>
-    <string name="label_deposit">Deposit</string>
-    <string name="label_payment">Payment</string>
-    <string name="label_charge">Charge</string>
-    <string name="label_decrease">Decrease</string>
-    <string name="label_increase">Increase</string>
-    <string name="label_income">Income</string>
-    <string name="label_rebate">Rebate</string>
-    <string name="label_expense">Expense</string>
-    <string name="label_bill">Bill</string>
-    <string name="label_invoice">Invoice</string>
-    <string name="label_buy">Buy</string>
-    <string name="label_sell">Sell</string>
-    <string name="label_repeats">Repeats</string>
-    <string name="label_account_balance">Balance:</string>
-    <string name="toast_no_recent_backup">No recent backup found</string>
-    <string name="account_name_opening_balances">Balances de apertura</string>
+    <string name="label_spend">Gastar</string>
+    <string name="label_receive">Recibir</string>
+    <string name="label_withdrawal">Sacar</string>
+    <string name="label_deposit">Dep&#243;sito</string>
+    <string name="label_payment">Pago</string>
+    <string name="label_charge">Cargo</string>
+    <string name="label_decrease">Disminuir</string>
+    <string name="label_increase">Aumentar</string>
+    <string name="label_income">Ingreso</string>
+    <string name="label_rebate">Descuento</string>
+    <string name="label_expense">Gasto</string>
+    <string name="label_bill">Recibo</string>
+    <string name="label_invoice">Factura</string>
+    <string name="label_buy">Comprar</string>
+    <string name="label_sell">Vender</string>
+    <string name="label_repeats">Repetir</string>
+    <string name="label_account_balance">Saldo:</string>
+    <string name="toast_no_recent_backup">No hay copias de seguridad recientes</string>
+    <string name="account_name_opening_balances">Saldo de apertura</string>
     <string name="account_name_equity">Resultado</string>
-    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    <string name="summary_save_opening_balances">Seleccionar para guardar el saldo actual (antes de borrar las transacciones) como nuevo saldo de apertura despues de borrar las transacciones
     </string>
-    <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="title_save_opening_balances">Guardar saldos de apertura</string>
 </resources>

From 7f6eded191f3d2c60d4c6706cdcfca018c8aca65 Mon Sep 17 00:00:00 2001
From: KTP <kjelltp@gmail.com>
Date: Sat, 26 Jul 2014 10:58:08 +0200
Subject: [PATCH 10/18] Update strings.xml
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Update strings (norwegian bokml)
---
 app/res/values-nb/strings.xml | 97 +++++++++++++++++++++----------------------
 1 file changed, 47 insertions(+), 50 deletions(-)

diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 34b207f7..a0e40336 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -49,7 +49,7 @@
     <string name="menu_move">FLYTT</string>
     <string name="title_selected">%1$d valgt</string>
     <string name="label_export_destination">Eksportmottaker</string>
-    <string name="title_export_dialog">Export Transactions</string>
+    <string name="title_export_dialog">Eksporter transaksjoner</string>
     <string name="option_export_all_transactions">Eksporter alle transaksjoner</string>
     <string name="hint_export_choice">Vanligvis vil kun nye transaksjoner bli eksportert.  Merk dette valget for  eksportere alle transaksjonene</string>
     <string name="toast_export_error">Feil ved eksportering av %1$s-data</string>
@@ -64,7 +64,7 @@
     <string name="btn_move">Flytt</string>
     <string name="title_move_transactions">Flytt %1$d transaksjoner</string>
     <string name="label_move_destination">Til konto</string>
-    <string name="permission_access_sdcard">Aksesser minnekort</string>
+    <string name="permission_access_sdcard">Tilgang til minnekort</string>
     <string name="toast_incompatible_currency">Kan ikke flytte transaksjonen(e).\nMottakerkonto har en annen valuta</string>
     <string name="header_general_settings">Generelt</string>
     <string name="header_about_gnucash">Om</string>
@@ -264,7 +264,7 @@
 	    <item>Egenkapital</item>
 	    <item>Gjeld</item>
 	</string-array>
-	<string name="error_no_accounts">Ingen kontoer finnes i Gnucash.\nOpprett en konto fr du legger til en widget</string>
+	<string name="error_no_accounts">Ingen kontoer funnet.\nOpprett en konto fr du legger til en modul</string>
 	<string name="title_build_version">Byggversion</string>
 	<string name="title_license">Lisens</string>
 	<string name="summary_licence_details">Apache Lisens v2.0. Klikk for detaljer.</string>
@@ -272,9 +272,7 @@
 	<string name="label_widget_configuration">Velg konto</string>
 	<string name="toast_no_transactions_to_export">Ingen transaksjoner  eksportere</string>
 	<string name="title_about_gnucash">Om Gnucash</string>
-	<string name="summary_about_gnucash">GnucashMobile er en mobil regnskapsfrer for Android.\nDen gir 
-muligheten til  raskt og fleksibelt logge transaksjoner som kan eksporteres til OFX (Open Financial eXchange)-
-format og importeres i regnskapsprogrammet GnuCash for PC.</string> 
+	<string name="summary_about_gnucash">GnucashMobile er en mobil regnskapsfrer for Android.\nDen gir muligheten til  raskt og fleksibelt logge transaksjoner som kan eksporteres til OFX (Open Financial eXchange)-format og importeres i regnskapsprogrammet GnuCash for PC.</string> 
 	<string name="title_about">Om</string>
 	<string name="toast_format_exported_to">%1$s-fil eksportert til:\n</string>
 	<string name="title_export_email">Gnucash Android %1$s-eksportering</string>
@@ -294,7 +292,7 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
 	<string name="title_export_all_transactions">Eksportere alle transaksjoner</string>
 	<string name="title_always_delete_exported_transactions">Slette eksporterte transaksjoner</string>
 	<string name="title_default_export_email">E-post for eksportering</string>
-	<string name="summary_default_export_email">E-post adresse for eksport. Du kan endre denne ved eksportering.</string>	
+	<string name="summary_default_export_email">E-post for eksport. Du kan endre denne ved eksportering.</string>	
 	<string name="label_double_entry_account">Overfringskonto</string>
 	<string name="summary_use_double_entry">Alle transaksjoner vil bli overfrt til en annen konto</string>
 	<string name="title_use_double_entry">Aktiver dobbel bokfring</string>
@@ -306,14 +304,14 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
 	<string name="summary_xml_ofx_header">Velg denne hvis du skal eksportere til annen programvare enn GnuCash for PC.</string>
 	<string name="title_whats_new">Hva er nytt</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
-        - Multiple bug fixes and improvements\n
+        - Lag flere splitter for en transaksjon\n
+        - Rettet kalkulering av balanse for ulike kontoer\n
+        - Bruk konto-spesifikke navn for KREDIT/DEBET\n
+        - Automatisk sikkerhetskopi av database fr sletteoperasjoner\n
+        - Tilbakelegging av siste sikkerhetskopi av databasen (i Innstillinger->Generelt)\n
+        - Les transaksjoner fra GnuCash XML filer (begrenset sttte)\n
+        - Mulighet for  lagre inngende balanser fr sletting av transaksjoner\n
+        - Mange feilrettinger og forbedringer\n
 	</string>
 	<string name="label_dismiss">Ferdig</string>
     <string name="toast_transanction_amount_required">Oppgi et belp for  lagre transaksjonen</string>
@@ -321,9 +319,9 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="btn_import_accounts">Importere Kontoer</string>
     <string name="toast_error_importing_accounts">En feil oppstod ved importering fra GnuCash</string>
     <string name="toast_success_importing_accounts">GnuCash kontoer importert</string>
-    <string name="summary_import_accounts">Importere kontostruktur eksportert frac GnuCash (PC)</string>
+    <string name="summary_import_accounts">Importere kontostruktur eksportert fra GnuCash (PC)</string>
     <string name="title_import_accounts">Importere GnuCash kontoer</string>
-    <string name="summary_delete_all_accounts">Slette alle kontoer databasen. Alle transaksjoner vil ogs bli slettet.
+    <string name="summary_delete_all_accounts">Slette alle kontoer i databasen. Alle transaksjoner vil ogs bli slettet.
     </string>
     <string name="title_delete_all_accounts">Slette alle kontoer</string>
     <string name="header_account_settings">Kontoer</string>
@@ -339,15 +337,15 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="section_header_transactions">Transaksjoner</string>
     <string name="section_header_subaccounts">Underkontoer</string>
     <string name="menu_search_accounts">Sk</string>
-    <string name="title_default_export_format">Standard Eksport Format</string>
-    <string name="summary_default_export_format">Standard filformat ved eksportering av transaksjoner</string>
-    <string name="menu_export_transactions">Export transactions</string>
-    <string name="label_recurring_transaction">Recurrence</string>
+    <string name="title_default_export_format">Standard eksportformat</string>
+    <string name="summary_default_export_format">Standard filformat ved eksport av transaksjoner</string>
+    <string name="menu_export_transactions">Eksportere transaksjoner</string>
+    <string name="label_recurring_transaction">Planlagte</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Ubalanse</string>
     <string name="title_progress_exporting_transactions">Eksporter transaksjoner</string>
-    <string name="label_no_recurring_transactions">Ingen gjentakende transaksjoner  vise.</string>
-    <string name="toast_recurring_transaction_deleted">Slettet alle gjentakende transaksjoner</string>
+    <string name="label_no_recurring_transactions">Ingen planlagte transaksjoner  vise.</string>
+    <string name="toast_recurring_transaction_deleted">Slettet alle planlagte transaksjoner</string>
     <string name="label_placeholder_account">Plassholder konto</string>
     <string name="label_default_transfer_account">Standard overfringskonto</string>
     <string name="label_account_color_and_type">Konto Farge &amp; Type</string>
@@ -387,36 +385,35 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="msg_confirm_create_default_accounts_first_run">Velkommen til GnuCash Android! \nDu kan enten opprette et hieraki av de mest brukte kontoene, eller importere din egen GnuCash kontostruktur. \n\nBegge valgene er ogs tilgjengelige under Instillinger, s du kan velge senere.
     </string>
     <string-array name="recurrence_period_strings">
-        <item>NONE</item>
+        <item>INGEN</item>
         <item>DAGLIG</item>
         <item>UKENTLIG</item>
         <item>MNEDLIG</item>
     </string-array>
-    <string name="menu_scheduled_transactions">Scheduled Transactions</string>
-    <string name="title_scheduled_transactions">Scheduled Transactions</string>
+    <string name="menu_scheduled_transactions">Planlagte Transaksjoner</string>
+    <string name="title_scheduled_transactions">Planlagte Transaksjoner</string>
     <string name="title_select_export_destination">Select destination for export</string>
-    <string name="hint_split_memo">Memo</string>
-    <string name="label_spend">Spend</string>
-    <string name="label_receive">Receive</string>
-    <string name="label_withdrawal">Withdrawal</string>
-    <string name="label_deposit">Deposit</string>
-    <string name="label_payment">Payment</string>
-    <string name="label_charge">Charge</string>
-    <string name="label_decrease">Decrease</string>
-    <string name="label_increase">Increase</string>
-    <string name="label_income">Income</string>
-    <string name="label_rebate">Rebate</string>
-    <string name="label_expense">Expense</string>
-    <string name="label_bill">Bill</string>
-    <string name="label_invoice">Invoice</string>
-    <string name="label_buy">Buy</string>
-    <string name="label_sell">Sell</string>
-    <string name="label_repeats">Repeats</string>
-    <string name="label_account_balance">Balance:</string>
-    <string name="toast_no_recent_backup">No recent backup found</string>
-    <string name="account_name_opening_balances">Opening Balances</string>
-    <string name="account_name_equity">Equity</string>
-    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
-    </string>
-    <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="hint_split_memo">Notat</string>
+    <string name="label_spend">Forbruk</string>
+    <string name="label_receive">Motta</string>
+    <string name="label_withdrawal">Uttak</string>
+    <string name="label_deposit">Innskudd</string>
+    <string name="label_payment">Betaling</string>
+    <string name="label_charge">Belast</string>
+    <string name="label_decrease">Reduser</string>
+    <string name="label_increase">k</string>
+    <string name="label_income">Inntekt</string>
+    <string name="label_rebate">Rabatt</string>
+    <string name="label_expense">Utgift</string>
+    <string name="label_bill">Regning</string>
+    <string name="label_invoice">Faktura</string>
+    <string name="label_buy">Kjp</string>
+    <string name="label_sell">Salg</string>
+    <string name="label_repeats">Gjentas</string>
+    <string name="label_account_balance">Saldo:</string>
+    <string name="toast_no_recent_backup">Ingen nylig sikkerhetskopi funnet</string>
+    <string name="account_name_opening_balances">Inngende balanse</string>
+    <string name="account_name_equity">Egenkapital</string>
+    <string name="summary_save_opening_balances">Merk for  lagre gjeldende konto balanse (fr sletting) som ny inngende balanse (etter sletting av transaksjoner).</string>
+    <string name="title_save_opening_balances">Lagre inngende balanser</string>
 </resources>

From 67d24c55ce3e7bfa5e9a378255753ca7d40a6a4b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 28 Jul 2014 14:25:10 +0200
Subject: [PATCH 11/18] Prepare for v1.4.0-beta3 release

Fixed: Crash when upgrading database due to invalid SQL query (for the old db version)
Fixed: Future transactions not imported
Show dialog during database upgrade operations
Show richer exception message as toast when importing or exporting
---
 app/AndroidManifest.xml                            |  2 +-
 app/res/values/strings.xml                         |  2 +-
 app/src/org/gnucash/android/db/DatabaseHelper.java | 33 ++++++++--
 .../org/gnucash/android/db/MigrationHelper.java    | 38 ++++-------
 .../gnucash/android/db/TransactionsDbAdapter.java  | 38 +++++++----
 .../android/export/ExportDialogFragment.java       |  2 +-
 .../org/gnucash/android/export/ExportParams.java   |  2 +-
 .../{ExporterTask.java => ExporterAsyncTask.java}  |  9 +--
 .../gnucash/android/importer/GncXmlHandler.java    | 69 +++++--------------
 .../gnucash/android/importer/GncXmlImporter.java   | 77 ++++++++++++++++++++++
 ...{GncXmlImportTask.java => ImportAsyncTask.java} | 13 ++--
 .../android/ui/account/AccountsActivity.java       |  9 +--
 .../ui/settings/AccountPreferencesFragment.java    |  4 +-
 .../android/ui/settings/SettingsActivity.java      |  6 +-
 14 files changed, 185 insertions(+), 119 deletions(-)
 rename app/src/org/gnucash/android/export/{ExporterTask.java => ExporterAsyncTask.java} (96%)
 create mode 100644 app/src/org/gnucash/android/importer/GncXmlImporter.java
 rename app/src/org/gnucash/android/importer/{GncXmlImportTask.java => ImportAsyncTask.java} (80%)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 3a8cc1e8..3e847627 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="31"
+    android:versionCode="32"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 685afd8d..72d11bf9 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.0-beta2</string>
+    <string name="app_version_name">1.4.0-beta3</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index d7945c51..3dc00e5b 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -16,12 +16,14 @@
 
 package org.gnucash.android.db;
 
+import android.app.ProgressDialog;
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
+import android.widget.Toast;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
@@ -103,11 +105,17 @@
             + ");";
 
     /**
+     * Context passed in for database upgrade. Keep reference so as to be able to display UI dialogs
+     */
+    private Context mContext;
+
+    /**
 	 * Constructor
 	 * @param context Application context
 	 */
 	public DatabaseHelper(Context context){
 		super(context, DATABASE_NAME, null, DatabaseSchema.DATABASE_VERSION);
+        mContext = context;
 	}
 	
 	@Override
@@ -119,7 +127,9 @@ public void onCreate(SQLiteDatabase db) {
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		Log.i(LOG_TAG, "Upgrading database from version "
 				+ oldVersion + " to " + newVersion);
-		
+
+        ProgressDialog progressDialog = ProgressDialog.show(mContext, "Upgrading database", "Processing...", true);
+
 		if (oldVersion < newVersion){
 			//introducing double entry accounting
 			Log.i(LOG_TAG, "Upgrading database to version " + newVersion);
@@ -185,6 +195,8 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
             if (oldVersion == 5 && newVersion >= 6){
                 Log.i(LOG_TAG, "Upgrading database to version 6");
+                progressDialog.setMessage("Upgrading database to version 6");
+
                 String addFullAccountNameQuery = " ALTER TABLE " + AccountEntry.TABLE_NAME
                         + " ADD COLUMN " + AccountEntry.COLUMN_FULL_NAME + " varchar(255) ";
                 db.execSQL(addFullAccountNameQuery);
@@ -216,6 +228,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 
             if (oldVersion == 6 && newVersion >= DatabaseSchema.SPLITS_DB_VERSION){
                 Log.i(LOG_TAG, "Upgrading database to version 7");
+                progressDialog.setMessage("Upgrading to version " + SPLITS_DB_VERSION);
 
                 //for users who do not have double-entry activated, we create imbalance accounts for their splits
                 //TODO: Enable when we can hide imbalance accounts from user
@@ -225,17 +238,27 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 //                    accountsDbAdapter.getOrCreateImbalanceAccountUID(currency);
 //                }
 
-                String filepath = MigrationHelper.exportDatabase(db, ExportFormat.GNC_XML);
+                progressDialog.setMessage("Backing up database");
+                try {
+                    String filepath = MigrationHelper.exportDatabase(db, ExportFormat.GNC_XML);
 
-                dropAllDatabaseTables(db);
-                createDatabaseTables(db);
+                    progressDialog.setMessage("Upgrading database schema");
 
-                MigrationHelper.importGnucashXML(db, filepath);
+                    dropAllDatabaseTables(db);
+                    createDatabaseTables(db);
 
+                    progressDialog.setMessage("Restoring database");
+
+                    MigrationHelper.importGnucashXML(db, filepath);
+                } catch (Exception e){
+                    Toast.makeText(mContext, "Error upgrading database.\n" + e.getMessage(), Toast.LENGTH_LONG).show();
+                    throw new RuntimeException(e);
+                }
                 oldVersion = DatabaseSchema.SPLITS_DB_VERSION;
             }
 		}
 
+        progressDialog.dismiss();
         if (oldVersion != newVersion) {
             Log.w(LOG_TAG, "Upgrade for the database failed. The Database is currently at version " + oldVersion);
         }
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index 2b609679..b71decf1 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -20,20 +20,15 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Environment;
 import android.util.Log;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.export.qif.QifExporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
-import org.gnucash.android.importer.GncXmlHandler;
-import org.gnucash.android.importer.GncXmlImportTask;
+import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.AccountType;
 
 import java.io.*;
-import java.util.ArrayList;
-import java.util.Currency;
-import java.util.List;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
@@ -117,7 +112,7 @@ private static String getGnuCashRootAccountUID(SQLiteDatabase db){
      * Exports the database to a GnuCash XML file and returns the path to the file
      * @return String with exported GnuCash XML
      */
-    static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
+    static String exportDatabase(SQLiteDatabase db, ExportFormat format) throws IOException {
         Log.i(LOG_TAG, "Exporting database to GnuCash XML");
         ExportParams exportParams = new ExportParams(format);
         exportParams.setExportAllTransactions(true);
@@ -128,6 +123,7 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
         exportParams.setTargetFilepath(Environment.getExternalStorageDirectory()
                 + "/gnucash/" + Exporter.buildExportFilename(format));
 
+        //we do not use the ExporterAsyncTask here because we want to use an already open db
         Exporter exporter = null;
         switch (format){
             case QIF:
@@ -137,18 +133,13 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
             default:
                 exporter = new GncXmlExporter(exportParams, db);
         }
-        try {
-            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
-                    new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
-            writer.write(exporter.generateExport());
-
-            writer.flush();
-            writer.close();
-        } catch (IOException e) {
-            e.printStackTrace();
-            throw new RuntimeException("Error backing up database for upgrade", e);
-        }
 
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
+                new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
+        writer.write(exporter.generateExport());
+
+        writer.flush();
+        writer.close();
         return exportParams.getTargetFilepath();
     }
 
@@ -156,14 +147,9 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) {
      * Imports GnuCash XML into the database from file
      * @param filepath Path to GnuCash XML file
      */
-    static void importGnucashXML(SQLiteDatabase db, String filepath) {
+    static void importGnucashXML(SQLiteDatabase db, String filepath) throws Exception {
         Log.i(LOG_TAG, "Importing GnuCash XML");
-        try {
-            FileInputStream inputStream = new FileInputStream(filepath);
-            GncXmlHandler.parse(db, inputStream);
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
-            throw new RuntimeException(e);
-        }
+        FileInputStream inputStream = new FileInputStream(filepath);
+        GncXmlImporter.parse(db, inputStream);
     }
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 92e8accd..425f8479 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -151,21 +151,33 @@ public Transaction getTransaction(long rowId){
 	 * i.e <code>accountUID</code> is double entry account UID
 	 * @param accountUID UID of the account whose transactions are to be retrieved
 	 * @return Cursor holding set of transactions for particular account
+     * @throws java.lang.IllegalArgumentException if the accountUID is null
 	 */
 	public Cursor fetchAllTransactionsForAccount(String accountUID){
-        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-        queryBuilder.setTables(TransactionEntry.TABLE_NAME
-                + " INNER JOIN " +  SplitEntry.TABLE_NAME + " ON "
-                + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
-                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
-        queryBuilder.setDistinct(true);
-        String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
-        String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
-                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
-        String[] selectionArgs = new String[]{accountUID};
-        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
-
-        return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
+        if (accountUID == null)
+            throw new IllegalArgumentException("Unique ID of the account cannot be null");
+
+        if (mDb.getVersion() < DatabaseSchema.SPLITS_DB_VERSION){ //legacy from previous database format
+            return mDb.query(TransactionEntry.TABLE_NAME, null,
+                    "((" + SplitEntry.COLUMN_ACCOUNT_UID + " = '" + accountUID + "') "
+                            + "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' ))"
+                            + " AND " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0",
+                    null, null, null, TransactionEntry.COLUMN_TIMESTAMP + " DESC");
+        } else {
+            SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
+            queryBuilder.setTables(TransactionEntry.TABLE_NAME
+                    + " INNER JOIN " + SplitEntry.TABLE_NAME + " ON "
+                    + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
+                    + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
+            queryBuilder.setDistinct(true);
+            String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
+            String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
+                    + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+            String[] selectionArgs = new String[]{accountUID};
+            String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
+
+            return queryBuilder.query(mDb, projectionIn, selection, selectionArgs, null, null, sortOrder);
+        }
 	}
 
     /**
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index 3fe8c6b7..d7dd6c4f 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -95,7 +95,7 @@ public void onClick(View v) {
             dismiss();
 
             Log.i(TAG, "Commencing async export of transactions");
-            new ExporterTask(getActivity()).execute(exportParameters);
+            new ExporterAsyncTask(getActivity()).execute(exportParameters);
 		}
 		
 	}
diff --git a/app/src/org/gnucash/android/export/ExportParams.java b/app/src/org/gnucash/android/export/ExportParams.java
index 6ad6c496..821fde13 100644
--- a/app/src/org/gnucash/android/export/ExportParams.java
+++ b/app/src/org/gnucash/android/export/ExportParams.java
@@ -21,7 +21,7 @@
  * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
  * actually performs the export.
  * @see org.gnucash.android.export.ExportDialogFragment
- * @see org.gnucash.android.export.ExporterTask
+ * @see ExporterAsyncTask
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
similarity index 96%
rename from app/src/org/gnucash/android/export/ExporterTask.java
rename to app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 654e6e8f..7a52fa50 100644
--- a/app/src/org/gnucash/android/export/ExporterTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -44,7 +44,7 @@
  *
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class ExporterTask extends AsyncTask<ExportParams, Void, Boolean> {
+public class ExporterAsyncTask extends AsyncTask<ExportParams, Void, Boolean> {
     /**
      * App context
      */
@@ -55,14 +55,14 @@
     /**
      * Log tag
      */
-    public static final String TAG = "ExporterTask";
+    public static final String TAG = "ExporterAsyncTask";
 
     /**
      * Export parameters
      */
     private ExportParams mExportParams;
 
-    public ExporterTask(Context context){
+    public ExporterAsyncTask(Context context){
         this.mContext = context;
     }
 
@@ -111,7 +111,8 @@ protected Boolean doInBackground(ExportParams... params) {
             e.printStackTrace();
             Log.e(TAG, e.getMessage());
             Toast.makeText(mContext, R.string.toast_export_error,
-                    Toast.LENGTH_LONG).show();
+                    Toast.LENGTH_SHORT).show();
+            Toast.makeText(mContext, e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
             return false;
         }
         return true;
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 481579d6..bf102a3d 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -32,6 +32,7 @@
 import org.xml.sax.XMLReader;
 import org.xml.sax.helpers.DefaultHandler;
 
+import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 import java.io.*;
@@ -98,6 +99,7 @@
     boolean mInPlaceHolderSlot  = false;
     boolean mInFavoriteSlot     = false;
     boolean mISO4217Currency    = false;
+    boolean mIsDatePosted       = false;
 
     private Context mContext;
     private TransactionsDbAdapter mTransactionsDbAdapter;
@@ -134,6 +136,10 @@ public void startElement(String uri, String localName,
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_SPLIT)){
             mSplit = new Split(Money.getZeroInstance(),"");
         }
+
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_POSTED)){
+            mIsDatePosted = true;
+        }
     }
 
     @Override
@@ -210,7 +216,8 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 if (!Pattern.matches(Account.COLOR_HEX_REGEX, color))
                     color = "#" + color.replaceAll(".(.)?", "$1").replace("null", "");
                 try {
-                    mAccount.setColorCode(color);
+                    if (mAccount != null)
+                        mAccount.setColorCode(color);
                 } catch (IllegalArgumentException ex){
                     //sometimes the color entry in the account file is "Not set" instead of just blank. So catch!
                     Log.i(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
@@ -238,7 +245,10 @@ public void endElement(String uri, String localName, String qualifiedName) throw
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
             try {
-                mTransaction.setTime(GncXmlHelper.parseDate(characterString));
+                if (mIsDatePosted && mTransaction != null) {
+                    mTransaction.setTime(GncXmlHelper.parseDate(characterString));
+                    mIsDatePosted = false;
+                }
             } catch (ParseException e) {
                 e.printStackTrace();
                 throw new SAXException("Unable to parse transaction time", e);
@@ -289,56 +299,11 @@ public void characters(char[] chars, int start, int length) throws SAXException
         mContent.append(chars, start, length);
     }
 
-    /**
-     * Parses XML into an already open database.
-     * <p>This method is used mainly by the {@link org.gnucash.android.db.DatabaseHelper} for database migrations.<br>
-     *     You should probably use {@link #parse(android.content.Context, java.io.InputStream)} instead</p>
-     * @param db SQLite Database
-     * @param gncXmlInputStream Input stream of GnuCash XML
-     */
-    public static void parse(SQLiteDatabase db, InputStream gncXmlInputStream) {
-        try {
-            SAXParserFactory spf = SAXParserFactory.newInstance();
-            SAXParser sp = spf.newSAXParser();
-            XMLReader xr = sp.getXMLReader();
-
-            BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
-
-            /** Create handler to handle XML Tags ( extends DefaultHandler ) */
-
-            GncXmlHandler handler = new GncXmlHandler(db);
-            xr.setContentHandler(handler);
-            xr.parse(new InputSource(bos));
-        } catch (Exception e) {
-            e.printStackTrace();
-            Toast.makeText(GnuCashApplication.getAppContext(),
-                    R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
-        }
+    @Override
+    public void endDocument() throws SAXException {
+        super.endDocument();
+        mAccountsDbAdapter.close();
+        mTransactionsDbAdapter.close();
     }
 
-    /**
-     * Parse GnuCash XML input and populates the database
-     * @param context Application context
-     * @param gncXmlInputStream InputStream source of the GnuCash XML file
-     */
-    public static void parse(Context context, InputStream gncXmlInputStream){
-        try {
-            SAXParserFactory spf = SAXParserFactory.newInstance();
-            SAXParser sp = spf.newSAXParser();
-            XMLReader xr = sp.getXMLReader();
-
-            BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
-
-            /** Create handler to handle XML Tags ( extends DefaultHandler ) */
-
-            GncXmlHandler handler = new GncXmlHandler(context);
-            xr.setContentHandler(handler);
-            xr.parse(new InputSource(bos));
-            handler.mAccountsDbAdapter.close();
-            handler.mTransactionsDbAdapter.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-            Toast.makeText(context, R.string.toast_error_importing_accounts, Toast.LENGTH_LONG).show();
-        }
-    }
 }
diff --git a/app/src/org/gnucash/android/importer/GncXmlImporter.java b/app/src/org/gnucash/android/importer/GncXmlImporter.java
new file mode 100644
index 00000000..068322d3
--- /dev/null
+++ b/app/src/org/gnucash/android/importer/GncXmlImporter.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.importer;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * Importer for Gnucash XML files and GNCA (GnuCash Android) XML files
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class GncXmlImporter {
+
+    /**
+     * Parses XML into an already open database.
+     * <p>This method is used mainly by the {@link org.gnucash.android.db.DatabaseHelper} for database migrations.<br>
+     *     You should probably use {@link #parse(android.content.Context, java.io.InputStream)} instead</p>
+     * @param db SQLite Database
+     * @param gncXmlInputStream Input stream of GnuCash XML
+     */
+    public static void parse(SQLiteDatabase db, InputStream gncXmlInputStream) throws Exception {
+        SAXParserFactory spf = SAXParserFactory.newInstance();
+        SAXParser sp = spf.newSAXParser();
+        XMLReader xr = sp.getXMLReader();
+
+        BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
+
+        /** Create handler to handle XML Tags ( extends DefaultHandler ) */
+
+        GncXmlHandler handler = new GncXmlHandler(db);
+        xr.setContentHandler(handler);
+        xr.parse(new InputSource(bos));
+    }
+
+    /**
+     * Parse GnuCash XML input and populates the database
+     * @param context Application context
+     * @param gncXmlInputStream InputStream source of the GnuCash XML file
+     */
+    public static void parse(Context context, InputStream gncXmlInputStream) throws ParserConfigurationException, SAXException, IOException {
+        SAXParserFactory spf = SAXParserFactory.newInstance();
+        SAXParser sp = spf.newSAXParser();
+        XMLReader xr = sp.getXMLReader();
+
+        BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
+
+        //TODO: Set an error handler which can log errors
+
+        GncXmlHandler handler = new GncXmlHandler(context);
+        xr.setContentHandler(handler);
+        xr.parse(new InputSource(bos));
+    }
+}
diff --git a/app/src/org/gnucash/android/importer/GncXmlImportTask.java b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
similarity index 80%
rename from app/src/org/gnucash/android/importer/GncXmlImportTask.java
rename to app/src/org/gnucash/android/importer/ImportAsyncTask.java
index d16c669a..b585aad0 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImportTask.java
+++ b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
@@ -18,6 +18,7 @@
 import android.content.Context;
 import android.os.AsyncTask;
 import android.os.Build;
+import android.util.Log;
 import android.widget.Toast;
 import org.gnucash.android.R;
 import org.gnucash.android.ui.account.AccountsActivity;
@@ -28,11 +29,11 @@
  * Imports a GnuCash (desktop) account file and displays a progress dialog.
  * The AccountsActivity is opened when importing is done.
  */
-public class GncXmlImportTask extends AsyncTask<InputStream, Void, Boolean> {
+public class ImportAsyncTask extends AsyncTask<InputStream, Void, Boolean> {
     private final Context context;
     private ProgressDialog progressDialog;
 
-    public GncXmlImportTask(Context context){
+    public ImportAsyncTask(Context context){
         this.context = context;
     }
 
@@ -53,9 +54,13 @@ protected void onPreExecute() {
     @Override
     protected Boolean doInBackground(InputStream... inputStreams) {
         try {
-            GncXmlHandler.parse(context, inputStreams[0]);
+            GncXmlImporter.parse(context, inputStreams[0]);
         } catch (Exception exception){
             exception.printStackTrace();
+            Log.e(ImportAsyncTask.class.getName(), exception.getMessage());
+            Toast.makeText(context,
+                    context.getString(R.string.toast_error_importing_accounts) + "\n" + exception.getLocalizedMessage(),
+                    Toast.LENGTH_LONG).show();
             return false;
         }
         return true;
@@ -67,7 +72,7 @@ protected void onPostExecute(Boolean importSuccess) {
             progressDialog.dismiss();
 
         int message = importSuccess ? R.string.toast_success_importing_accounts : R.string.toast_error_importing_accounts;
-        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
+        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
 
         AccountsActivity.start(context);
     }
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index fa7da330..485ecc9b 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -33,7 +33,6 @@
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
-import android.util.Log;
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
@@ -44,7 +43,7 @@
 import com.viewpagerindicator.TitlePageIndicator;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.importer.GncXmlImportTask;
+import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
@@ -55,8 +54,6 @@
 
 import java.io.FileNotFoundException;
 import java.io.InputStream;
-import java.util.Currency;
-import java.util.Locale;
 
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
@@ -439,7 +436,7 @@ private void createDefaultAccounts(){
 			@Override
 			public void onClick(DialogInterface dialog, int which) {
                 InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                new GncXmlImportTask(AccountsActivity.this).execute(accountFileInputStream);
+                new ImportAsyncTask(AccountsActivity.this).execute(accountFileInputStream);
                 removeFirstRunFlag();
 			}
 		});
@@ -489,7 +486,7 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
             case REQUEST_PICK_ACCOUNTS_FILE:
                 try {
                     InputStream accountInputStream = getContentResolver().openInputStream(data.getData());
-                    new GncXmlImportTask(this).execute(accountInputStream);
+                    new ImportAsyncTask(this).execute(accountInputStream);
                 } catch (FileNotFoundException e) {
                     e.printStackTrace();
                 }
diff --git a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
index cd70b5e8..40384546 100644
--- a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
@@ -26,7 +26,7 @@
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import org.gnucash.android.R;
-import org.gnucash.android.importer.GncXmlImportTask;
+import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
 
 import java.io.InputStream;
@@ -81,7 +81,7 @@ public boolean onPreferenceClick(Preference preference) {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
                                 InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                                new GncXmlImportTask(getActivity()).execute(accountFileInputStream);
+                                new ImportAsyncTask(getActivity()).execute(accountFileInputStream);
                             }
                         })
                         .setNegativeButton(R.string.btn_cancel, new DialogInterface.OnClickListener() {
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 1d1e1494..106d943d 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -35,7 +35,7 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
-import org.gnucash.android.importer.GncXmlImportTask;
+import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
@@ -283,7 +283,7 @@ public void importMostRecentBackup(){
 
         try {
             FileInputStream inputStream = new FileInputStream(backupFile);
-            new GncXmlImportTask(this).execute(inputStream);
+            new ImportAsyncTask(this).execute(inputStream);
         } catch (FileNotFoundException e) {
             e.printStackTrace();
             throw new RuntimeException(e);
@@ -300,7 +300,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
             case AccountsActivity.REQUEST_PICK_ACCOUNTS_FILE:
                 try {
                     InputStream accountInputStream = getContentResolver().openInputStream(data.getData());
-                    new GncXmlImportTask(this).execute(accountInputStream);
+                    new ImportAsyncTask(this).execute(accountInputStream);
                 } catch (FileNotFoundException e) {
                     e.printStackTrace();
                     Toast.makeText(this, R.string.toast_error_importing_accounts, Toast.LENGTH_SHORT).show();

From 494ca49fe129fb94a3584464d99f3065a856b21c Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 29 Jul 2014 18:35:19 +0200
Subject: [PATCH 12/18] Fixed: Transaction notes neither imported nor exported

Refactored transactions - "name" becomes "description", and "description" becomes "notes", to match GnuCash XML nomenclature
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  2 +-
 app/src/org/gnucash/android/db/DatabaseHelper.java |  5 +-
 app/src/org/gnucash/android/db/DatabaseSchema.java |  7 +-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 15 ++--
 .../gnucash/android/export/xml/GncXmlExporter.java | 12 +--
 .../gnucash/android/export/xml/GncXmlHelper.java   | 52 +++++++++++--
 .../gnucash/android/importer/GncXmlHandler.java    | 48 +++++-------
 app/src/org/gnucash/android/model/Account.java     | 35 ++-------
 app/src/org/gnucash/android/model/Split.java       |  2 +-
 app/src/org/gnucash/android/model/Transaction.java | 90 ++++++++--------------
 .../android/receivers/TransactionRecorder.java     |  2 +-
 .../ScheduledTransactionsListFragment.java         |  3 +-
 .../ui/transaction/TransactionFormFragment.java    | 32 ++++----
 .../ui/transaction/TransactionsListFragment.java   |  8 +-
 .../android/test/db/TransactionsDbAdapterTest.java |  4 +-
 .../android/test/ui/ExportTransactionsTest.java    |  2 +-
 .../android/test/ui/TransactionsActivityTest.java  | 12 +--
 17 files changed, 157 insertions(+), 174 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 67999f2e..f5d12081 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -965,7 +965,7 @@ public boolean isFavoriteAccount(long accountId){
                     continue;
 
                 Transaction transaction = new Transaction(mContext.getString(R.string.account_name_opening_balances));
-                transaction.setDescription(getName(id));
+                transaction.setNote(getName(id));
                 transaction.setCurrencyCode(currencyCode);
                 TransactionType transactionType = Transaction.getTypeForBalance(getAccountType(accountUID),
                         balance.isNegative());
diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index 3dc00e5b..be2faf05 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -25,7 +25,6 @@
 import android.util.Log;
 import android.widget.Toast;
 import org.gnucash.android.export.ExportFormat;
-import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
@@ -79,8 +78,8 @@
 	private static final String TRANSACTIONS_TABLE_CREATE = "create table " + TransactionEntry.TABLE_NAME + " ("
 			+ TransactionEntry._ID 		            + " integer primary key autoincrement, "
 			+ TransactionEntry.COLUMN_UID 		    + " varchar(255) not null, "
-			+ TransactionEntry.COLUMN_NAME		    + " varchar(255), "
-			+ TransactionEntry.COLUMN_DESCRIPTION 	+ " text, "
+			+ TransactionEntry.COLUMN_DESCRIPTION   + " varchar(255), "
+			+ TransactionEntry.COLUMN_NOTES         + " text, "
 			+ TransactionEntry.COLUMN_TIMESTAMP     + " integer not null, "
 			+ TransactionEntry.COLUMN_EXPORTED      + " tinyint default 0, "
             + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
diff --git a/app/src/org/gnucash/android/db/DatabaseSchema.java b/app/src/org/gnucash/android/db/DatabaseSchema.java
index a486f604..810d6cad 100644
--- a/app/src/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/org/gnucash/android/db/DatabaseSchema.java
@@ -68,9 +68,10 @@ private DatabaseSchema(){}
     public static abstract class TransactionEntry implements CommonColumns {
 
         public static final String TABLE_NAME                   = "transactions";
-
-        public static final String COLUMN_NAME                  = "name";
-        public static final String COLUMN_DESCRIPTION           = "description";
+        //The actual names of columns for description and notes are unlike the variable names because of legacy
+        //We will not change them now for backwards compatibility reasons. But the variable names make sense
+        public static final String COLUMN_DESCRIPTION           = "name";
+        public static final String COLUMN_NOTES                 = "description";
         public static final String COLUMN_CURRENCY              = "currency_code";
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 425f8479..c532f716 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -29,7 +29,6 @@
 import static org.gnucash.android.db.DatabaseSchema.*;
 
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.List;
 
 /**
@@ -75,10 +74,10 @@ public void close() {
 	 */
 	public long addTransaction(Transaction transaction){
 		ContentValues contentValues = new ContentValues();
-		contentValues.put(TransactionEntry.COLUMN_NAME, transaction.getName());
+		contentValues.put(TransactionEntry.COLUMN_DESCRIPTION,  transaction.getDescription());
 		contentValues.put(TransactionEntry.COLUMN_UID,          transaction.getUID());
 		contentValues.put(TransactionEntry.COLUMN_TIMESTAMP,    transaction.getTimeMillis());
-		contentValues.put(TransactionEntry.COLUMN_DESCRIPTION,  transaction.getDescription());
+		contentValues.put(TransactionEntry.COLUMN_NOTES,        transaction.getNote());
 		contentValues.put(TransactionEntry.COLUMN_EXPORTED,     transaction.isExported() ? 1 : 0);
         contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
         contentValues.put(TransactionEntry.COLUMN_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
@@ -264,11 +263,11 @@ public int getTotalTransactionsCount(){
 	 * @return {@link Transaction} object constructed from database record
 	 */
 	public Transaction buildTransactionInstance(Cursor c){
-		String name   = c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NAME));
+		String name   = c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_DESCRIPTION));
 		Transaction transaction = new Transaction(name);
 		transaction.setUID(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
 		transaction.setTime(c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
-		transaction.setDescription(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_DESCRIPTION)));
+		transaction.setNote(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NOTES)));
 		transaction.setExported(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_EXPORTED)) == 1);
 
         long recurrencePeriod = c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_RECURRENCE_PERIOD));
@@ -465,15 +464,15 @@ public Cursor fetchRecord(long rowId) {
      * @return Cursor to the data set containing all matching transactions
      */
     public Cursor fetchTransactionsStartingWith(String prefix){
-        StringBuffer stringBuffer = new StringBuffer(TransactionEntry.COLUMN_NAME)
+        StringBuffer stringBuffer = new StringBuffer(TransactionEntry.COLUMN_DESCRIPTION)
                 .append(" LIKE '").append(prefix).append("%'");
         String selection = stringBuffer.toString();
 
         Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
-                new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_NAME},
+                new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_DESCRIPTION},
                 selection,
                 null, null, null,
-                TransactionEntry.COLUMN_NAME + " ASC");
+                TransactionEntry.COLUMN_DESCRIPTION + " ASC");
         return c;
     }
 
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 358c147d..63c7f09e 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -96,32 +96,32 @@ private void generateGncXml() throws ParserConfigurationException {
         rootElement.setAttribute("xmlns:ts",     "http://www.gnucash.org/XML/ts");
 
         Element bookCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        bookCountNode.setAttribute("cd:type", "book");
+        bookCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, GncXmlHelper.ATTR_VALUE_BOOK);
         bookCountNode.appendChild(mDocument.createTextNode("1"));
         rootElement.appendChild(bookCountNode);
 
         Element bookNode = mDocument.createElement(GncXmlHelper.TAG_BOOK);
-        bookNode.setAttribute("version", GncXmlHelper.BOOK_VERSION);
+        bookNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
         rootElement.appendChild(bookNode);
 
         Element bookIdNode = mDocument.createElement(GncXmlHelper.TAG_BOOK_ID);
-        bookIdNode.setAttribute("type", "guid");
+        bookIdNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
         bookIdNode.appendChild(mDocument.createTextNode(UUID.randomUUID().toString().replaceAll("-", "")));
         bookNode.appendChild(bookIdNode);
 
         Element cmdtyCountData = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        cmdtyCountData.setAttribute("cd:type", "commodity");
+        cmdtyCountData.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
         cmdtyCountData.appendChild(mDocument.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
         bookNode.appendChild(cmdtyCountData);
 
         Element accountCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        accountCountNode.setAttribute("cd:type", "account");
+        accountCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
         int accountCount = mAccountsDbAdapter.getTotalAccountCount();
         accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountCount)));
         bookNode.appendChild(accountCountNode);
 
         Element transactionCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        transactionCountNode.setAttribute("cd:type", "transaction");
+        transactionCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
         int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
         transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionCount)));
         bookNode.appendChild(transactionCountNode);
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
index 03e27c22..79246a20 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -3,6 +3,8 @@
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.TransactionType;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
 
 import java.math.BigDecimal;
 import java.text.ParseException;
@@ -16,6 +18,15 @@
  */
 public abstract class GncXmlHelper {
     public static final String TAG_PREFIX           = "gnc:";
+
+    public static final String ATTR_KEY_CD_TYPE     = "cd:type";
+    public static final String ATTR_KEY_TYPE        = "type";
+    public static final String ATTR_KEY_VERSION     = "version";
+    public static final String ATTR_VALUE_STRING    = "string";
+    public static final String ATTR_VALUE_GUID      = "guid";
+    public static final String ATTR_VALUE_BOOK      = "book";
+    public static final String ATTR_VALUE_GDATE     = "gdate";
+
     /*
     Qualified GnuCash XML tag names
      */
@@ -23,7 +34,6 @@
     public static final String TAG_BOOK             = "gnc:book";
     public static final String TAG_BOOK_ID          = "book:id";
     public static final String TAG_COUNT_DATA       = "gnc:count-data";
-    public static final String ATTRIBUTE_CD_TYPE    = "cd:type";
 
     public static final String TAG_COMMODITY        = "gnc:commodity";
     public static final String TAG_NAME             = "act:name";
@@ -46,9 +56,10 @@
     public static final String TAG_DATE_POSTED      = "trn:date-posted";
     public static final String TAG_DATE             = "ts:date";
     public static final String TAG_DATE_ENTERED     = "trn:date-entered";
-    public static final String TAG_TRX_DESCRIPTION  = "trn:description";
-    public static final String TAG_TRX_SPLITS       = "trn:splits";
-    public static final String TAG_TRX_SPLIT        = "trn:split";
+    public static final String TAG_TRN_DESCRIPTION  = "trn:description";
+    public static final String TAG_TRN_SPLITS       = "trn:splits";
+    public static final String TAG_TRN_SPLIT        = "trn:split";
+    public static final String TAG_TRN_SLOTS        = "trn:slots";
 
     public static final String TAG_SPLIT_ID         = "split:id";
     public static final String TAG_SPLIT_MEMO       = "split:memo";
@@ -61,7 +72,13 @@
     public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
 
     public static final String BOOK_VERSION         = "2.0.0";
-    public static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
+    public static final SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");
+
+
+    public static final String KEY_PLACEHOLDER      = "placeholder";
+    public static final String KEY_COLOR            = "color";
+    public static final String KEY_FAVORITE         = "favorite";
+    public static final String KEY_NOTES            = "notes";
 
 
     /**
@@ -69,7 +86,7 @@
      * @param milliseconds Milliseconds since epoch
      */
     public static String formatDate(long milliseconds){
-        return DATE_FORMATTER.format(new Date(milliseconds));
+        return TIME_FORMATTER.format(new Date(milliseconds));
     }
 
     /**
@@ -79,7 +96,7 @@ public static String formatDate(long milliseconds){
      * @throws ParseException if the date string could not be parsed e.g. because of different format
      */
     public static long parseDate(String dateString) throws ParseException {
-        Date date = DATE_FORMATTER.parse(dateString);
+        Date date = TIME_FORMATTER.parse(dateString);
         return date.getTime();
     }
 
@@ -106,4 +123,25 @@ public static BigDecimal parseMoney(String amountString){
 
         return numerator.divide(denominator);
     }
+
+    /**
+     * Helper method for creating slot key-value pairs in the GnuCash XML structure.
+     * <p>This method is only a helper for creating slots whose values are of string type</p>
+     * @param doc {@link org.w3c.dom.Document} for creating nodes
+     * @param key Slot key as string
+     * @param value Slot value as String
+     * @return Element node containing the key-value pair
+     */
+    public static Element createSlot(Document doc, String key, String value){
+        Element slotNode  = doc.createElement(TAG_SLOT);
+        Element slotKeyNode = doc.createElement(TAG_SLOT_KEY);
+        slotKeyNode.appendChild(doc.createTextNode(key));
+        Element slotValueNode = doc.createElement(TAG_SLOT_VALUE);
+        slotValueNode.setAttribute(ATTR_KEY_TYPE, ATTR_VALUE_STRING);
+        slotValueNode.appendChild(doc.createTextNode(value));
+        slotNode.appendChild(slotKeyNode);
+        slotNode.appendChild(slotValueNode);
+
+        return slotNode;
+    }
 }
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index bf102a3d..c52e374d 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -19,23 +19,15 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
-import android.widget.Toast;
-import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.*;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.xml.sax.Attributes;
-import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
 import org.xml.sax.helpers.DefaultHandler;
 
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
-import java.io.*;
 import java.text.ParseException;
 import java.util.Currency;
 import java.util.regex.Pattern;
@@ -59,20 +51,8 @@
     private static final String LOG_TAG = "GnuCashAccountImporter";
 
     /**
-     * Value for placeholder slots in GnuCash account structure file
+     * Adapter for saving the imported accounts
      */
-    private static final String PLACEHOLDER_KEY = "placeholder";
-
-    /**
-     * Value of color slots in GnuCash account structure file
-     */
-    private static final String COLOR_KEY = "color";
-
-    /**
-     * Value of favorite slots in GnuCash account structure file
-     */
-    private static final String FAVORITE_KEY = "favorite";
-
     AccountsDbAdapter mAccountsDbAdapter;
 
     /**
@@ -100,6 +80,7 @@
     boolean mInFavoriteSlot     = false;
     boolean mISO4217Currency    = false;
     boolean mIsDatePosted       = false;
+    boolean mIsNote = false;
 
     private Context mContext;
     private TransactionsDbAdapter mTransactionsDbAdapter;
@@ -133,7 +114,7 @@ public void startElement(String uri, String localName,
             mTransaction = new Transaction(""); //dummy name will be replaced
         }
 
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_SPLIT)){
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_SPLIT)){
             mSplit = new Split(Money.getZeroInstance(),"");
         }
 
@@ -190,16 +171,20 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
-            if (characterString.equals(PLACEHOLDER_KEY)){
+            if (characterString.equals(GncXmlHelper.KEY_PLACEHOLDER)){
                 mInPlaceHolderSlot = true;
             }
-            if (characterString.equals(COLOR_KEY)){
+            if (characterString.equals(GncXmlHelper.KEY_COLOR)){
                 mInColorSlot = true;
             }
 
-            if (characterString.equals(FAVORITE_KEY)){
+            if (characterString.equals(GncXmlHelper.KEY_FAVORITE)){
                 mInFavoriteSlot = true;
             }
+
+            if (characterString.equals(GncXmlHelper.KEY_NOTES)){
+                mIsNote = true;
+            }
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
@@ -231,6 +216,13 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 mAccount.setFavorite(Boolean.parseBoolean(characterString));
                 mInFavoriteSlot = false;
             }
+
+            if (mIsNote){
+                if (mTransaction != null){
+                    mTransaction.setNote(characterString);
+                    mIsNote = false;
+                }
+            }
         }
 
 
@@ -239,8 +231,8 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             mTransaction.setUID(characterString);
         }
 
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_DESCRIPTION)){
-            mTransaction.setName(characterString);
+        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_DESCRIPTION)){
+            mTransaction.setDescription(characterString);
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
@@ -277,7 +269,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             mSplit.setAccountUID(characterString);
         }
 
-        if (qualifiedName.equals(GncXmlHelper.TAG_TRX_SPLIT)){
+        if (qualifiedName.equals(GncXmlHelper.TAG_TRN_SPLIT)){
             mTransaction.addSplit(mSplit);
         }
 
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index 0d9ebf8b..598bdc30 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -576,27 +576,6 @@ public String toQIF(boolean exportAllTransactions, List<String> exportedTransact
     }
 
     /**
-     * Helper method for creating slot key-value pairs in the account XML structure.
-     * <p>This method is for use with slots whose values are strings</p>
-     * @param doc {@link org.w3c.dom.Document} for creating nodes
-     * @param key Slot key as string
-     * @param value Slot value as String
-     * @return Element node containing the key-value pair
-     */
-    private Element createSlot(Document doc, String key, String value){
-        Element slotNode  = doc.createElement(GncXmlHelper.TAG_SLOT);
-        Element slotKeyNode = doc.createElement(GncXmlHelper.TAG_SLOT_KEY);
-        slotKeyNode.appendChild(doc.createTextNode(key));
-        Element slotValueNode = doc.createElement(GncXmlHelper.TAG_SLOT_VALUE);
-        slotValueNode.setAttribute("type", "string");
-        slotValueNode.appendChild(doc.createTextNode(value));
-        slotNode.appendChild(slotKeyNode);
-        slotNode.appendChild(slotValueNode);
-
-        return slotNode;
-    }
-
-    /**
      * Method which generates the GnuCash XML DOM for this account
      * @param doc {@link org.w3c.dom.Document} for creating nodes
      * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
@@ -606,7 +585,7 @@ public void toGncXml(Document doc, Element rootNode) {
         nameNode.appendChild(doc.createTextNode(mName));
 
         Element idNode = doc.createElement(GncXmlHelper.TAG_ACCT_ID);
-        idNode.setAttribute("type", "guid");
+        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
         idNode.appendChild(doc.createTextNode(mUID));
 
         Element typeNode = doc.createElement(GncXmlHelper.TAG_TYPE);
@@ -628,16 +607,18 @@ public void toGncXml(Document doc, Element rootNode) {
         descriptionNode.appendChild(doc.createTextNode(mName));
 
         Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
-        acctSlotsNode.appendChild(createSlot(doc, "placeholder", Boolean.toString(mIsPlaceholderAccount)));
+        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_PLACEHOLDER,
+                Boolean.toString(mIsPlaceholderAccount)));
 
         if (mColorCode != null && mColorCode.trim().length() > 0){
-            acctSlotsNode.appendChild(createSlot(doc, "color", mColorCode));
+            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode));
         }
 
-        acctSlotsNode.appendChild(createSlot(doc, "favorite", Boolean.toString(mIsFavorite)));
+        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc,
+                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite)));
 
         Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
-        accountNode.setAttribute("version", GncXmlHelper.BOOK_VERSION);
+        accountNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
         accountNode.appendChild(nameNode);
         accountNode.appendChild(idNode);
         accountNode.appendChild(typeNode);
@@ -649,7 +630,7 @@ public void toGncXml(Document doc, Element rootNode) {
 
         if (mParentAccountUID != null && mParentAccountUID.trim().length() > 0){
             Element parentAccountNode = doc.createElement(GncXmlHelper.TAG_PARENT_UID);
-            parentAccountNode.setAttribute("type", "guid");
+            parentAccountNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
             parentAccountNode.appendChild(doc.createTextNode(mParentAccountUID));
             accountNode.appendChild(parentAccountNode);
         }
diff --git a/app/src/org/gnucash/android/model/Split.java b/app/src/org/gnucash/android/model/Split.java
index 69192b5b..41961848 100644
--- a/app/src/org/gnucash/android/model/Split.java
+++ b/app/src/org/gnucash/android/model/Split.java
@@ -216,7 +216,7 @@ public void toGncXml(Document doc, Element rootNode) {
         accountNode.setAttribute("type", "guid");
         accountNode.appendChild(doc.createTextNode(mAccountUID));
 
-        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRX_SPLIT);
+        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRN_SPLIT);
         splitNode.appendChild(idNode);
         splitNode.appendChild(memoNode);
         splitNode.appendChild(stateNode);
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 56606dd7..16aab167 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -94,12 +94,12 @@
 	/**
 	 * Name describing the transaction
 	 */
-	private String mName;
+	private String mDescription;
 
 	/**
 	 * An extra note giving details about the transaction
 	 */
-	private String mDescription = "";
+	private String mNotes = "";
 
 	/**
 	 * Flag indicating if this transaction has been exported before or not
@@ -126,7 +126,7 @@
 	 */
 	public Transaction(String name) {
 		initDefaults();
-		setName(name);
+		setDescription(name);
 	}
 
     /**
@@ -139,8 +139,8 @@ public Transaction(String name) {
      */
     public Transaction(Transaction transaction, boolean generateNewUID){
         initDefaults();
-        setName(transaction.getName());
         setDescription(transaction.getDescription());
+        setNote(transaction.getNote());
         for (Split split : transaction.mSplitList) {
             addSplit(new Split(split, true));
         }
@@ -167,22 +167,6 @@ private void initDefaults(){
     }
 
     /**
-     * Returns what kind of transaction this is for the specified account depending on the splits for that account.
-     * <br>This is mostly necessary for generating OFX files.
-     * @param accountUID Unique Identifier of the account
-     * @return TransactionType of this transaction
-     */
-    public TransactionType getTransactionTypeForAccount(String accountUID){
-        List<Split> splitList = getSplits(accountUID);
-        if (splitList.size() == 1)
-            return splitList.get(0).getType();
-
-        Money balance = getBalance(accountUID);
-
-        return balance.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
-    }
-
-    /**
      * Returns the list of splits belonging to a specific account
      * @param accountUID Unique Identifier of the account
      * @return List of {@link org.gnucash.android.model.Split}s
@@ -314,51 +298,36 @@ public Currency getCurrency(){
         return Currency.getInstance(this.mCurrencyCode);
     }
 
-    /**
-	 * Returns the transaction amount for a specific account displayed by the account.
-     * <p>This is specific to accounts because the total balance of every transaction in double entry mode is zero.</p>
-	 * @return Properly formatted string amount for account
-	 */
-	public Money getFormattedAmount(String accountUID){
-        Money balance = Money.createZeroInstance(mCurrencyCode);
-        for (Split split : mSplitList) {
-            if (split.getAccountUID().equals(accountUID)){
-                balance = balance.add(split.getAmount());
-            }
-        }
-        return balance;
-	}
-
 	/**
 	 * Returns the name of the transaction
 	 * @return Name of the transaction
 	 */
-	public String getName() {
-		return mName;
+	public String getDescription() {
+		return mDescription;
 	}
 
 	/**
 	 * Sets the name of the transaction
 	 * @param name String containing name of transaction to set
 	 */
-	public void setName(String name) {
-		this.mName = name.trim();
+	public void setDescription(String name) {
+		this.mDescription = name.trim();
 	}
 
 	/**
 	 * Set short description of the transaction
 	 * @param description String containing description of transaction
 	 */
-	public void setDescription(String description) {
-		this.mDescription = description;
+	public void setNote(String description) {
+		this.mNotes = description;
 	}
 
 	/**
 	 * Returns the description of the transaction
 	 * @return String containing description of transaction
 	 */
-	public String getDescription() {
-		return mDescription;
+	public String getNote() {
+		return mNotes;
 	}
 
 	/**
@@ -505,12 +474,12 @@ public Element toOFX(Document doc, String accountUID){
         transactionNode.appendChild(transID);
 
         Element name = doc.createElement(OfxHelper.TAG_NAME);
-        name.appendChild(doc.createTextNode(mName));
+        name.appendChild(doc.createTextNode(mDescription));
         transactionNode.appendChild(name);
 
-        if (mDescription != null && mDescription.length() > 0){
+        if (mNotes != null && mNotes.length() > 0){
             Element memo = doc.createElement(OfxHelper.TAG_MEMO);
-            memo.appendChild(doc.createTextNode(mDescription));
+            memo.appendChild(doc.createTextNode(mNotes));
             transactionNode.appendChild(memo);
         }
 
@@ -558,7 +527,7 @@ public String toQIF(String accountUID){
         StringBuilder transactionQIFBuilder = new StringBuilder();
 
         transactionQIFBuilder.append(QifHelper.DATE_PREFIX).append(QifHelper.formatDate(mTimestamp)).append(newLine);
-        transactionQIFBuilder.append(QifHelper.MEMO_PREFIX).append(mName).append(newLine);
+        transactionQIFBuilder.append(QifHelper.MEMO_PREFIX).append(mDescription).append(newLine);
 
         List<String> processedSplitUIDs = new ArrayList<String>();
         final List<Split> splitList = getSplits();
@@ -625,8 +594,8 @@ public String toQIF(String accountUID){
     public static Intent createIntent(Transaction transaction){
         Intent intent = new Intent(Intent.ACTION_INSERT);
         intent.setType(Transaction.MIME_TYPE);
-        intent.putExtra(Intent.EXTRA_TITLE, transaction.getName());
-        intent.putExtra(Intent.EXTRA_TEXT, transaction.getDescription());
+        intent.putExtra(Intent.EXTRA_TITLE, transaction.getDescription());
+        intent.putExtra(Intent.EXTRA_TEXT, transaction.getNote());
         intent.putExtra(Account.EXTRA_CURRENCY_CODE, transaction.getCurrencyCode());
         StringBuilder stringBuilder = new StringBuilder();
         for (Split split : transaction.getSplits()) {
@@ -638,7 +607,7 @@ public static Intent createIntent(Transaction transaction){
 
     public void toGncXml(Document doc, Element rootElement) {
         Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
-        idNode.setAttribute("type", "guid");
+        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
         idNode.appendChild(doc.createTextNode(mUID));
 
         Element currencyNode = doc.createElement(GncXmlHelper.TAG_TRX_CURRENCY);
@@ -659,26 +628,31 @@ public void toGncXml(Document doc, Element rootElement) {
         dateENode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
         dateEneteredNode.appendChild(dateENode);
 
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRX_DESCRIPTION);
-        if (mName != null) {
-            descriptionNode.appendChild(doc.createTextNode(mName));
+        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRN_DESCRIPTION);
+        if (mDescription != null) {
+            descriptionNode.appendChild(doc.createTextNode(mDescription));
         }
 
-        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRX_SPLITS);
+        Element trnSlotsNode = doc.createElement(GncXmlHelper.TAG_TRN_SLOTS);
+        if (mNotes != null && mNotes.length() > 0) {
+            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes));
+            //TODO: Consider adding future transactions date as slot here too
+        }
+        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRN_SPLITS);
         for (Split split : mSplitList) {
-            if (split.getMemo() == null || split.getMemo().trim().length() == 0) {
-                split.setMemo(mDescription);
-            }
             split.toGncXml(doc, trnSplits);
         }
 
         Element transactionNode = doc.createElement(GncXmlHelper.TAG_TRANSACTION);
-        transactionNode.setAttribute("version", GncXmlHelper.BOOK_VERSION);
+        transactionNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
         transactionNode.appendChild(idNode);
         transactionNode.appendChild(currencyNode);
         transactionNode.appendChild(datePostedNode);
         transactionNode.appendChild(dateEneteredNode);
         transactionNode.appendChild(descriptionNode);
+        if (mNotes != null && mNotes.length() > 0){
+            transactionNode.appendChild(trnSlotsNode);
+        }
         //TODO: Improve xml compatibilty with desktop for scheduled actions
         if (mRecurrencePeriod != 0) {
             Element recurrenceNode = doc.createElement(GncXmlHelper.TAG_RECURRENCE_PERIOD);
diff --git a/app/src/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/org/gnucash/android/receivers/TransactionRecorder.java
index a5e21f9a..cb27ed83 100644
--- a/app/src/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/org/gnucash/android/receivers/TransactionRecorder.java
@@ -57,7 +57,7 @@ public void onReceive(Context context, Intent intent) {
 
         Transaction transaction = new Transaction(name);
         transaction.setTime(System.currentTimeMillis());
-        transaction.setDescription(note);
+        transaction.setNote(note);
         transaction.setCurrencyCode(currencyCode);
 
         //Parse deprecated args for compatibility. Transactions were bound to accounts, now only splits are
diff --git a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index ecdf0c89..d5a37b39 100644
--- a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -40,7 +40,6 @@
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 import org.gnucash.android.R;
-import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.db.*;
 import org.gnucash.android.ui.UxArgument;
@@ -132,7 +131,7 @@ public void onCreate(Bundle savedInstanceState) {
         mCursorAdapter = new TransactionsCursorAdapter(
                 getActivity().getApplicationContext(),
                 R.layout.list_item_scheduled_trxn, null,
-                new String[] {DatabaseSchema.TransactionEntry.COLUMN_NAME},
+                new String[] {DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION},
                 new int[] {R.id.primary_text});
         setListAdapter(mCursorAdapter);
     }
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 4774ff09..1d9c4f10 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -112,7 +112,7 @@
 	/**
 	 * Input field for the transaction name (description)
 	 */
-	private AutoCompleteTextView mNameEditText;
+	private AutoCompleteTextView mDescriptionEditText;
 
 	/**
 	 * Input field for the transaction amount
@@ -128,7 +128,7 @@
 	/**
 	 * Input field for the transaction description (note)
 	 */
-	private EditText mDescriptionEditText;
+	private EditText mNotesEditText;
 
 	/**
 	 * Input field for the transaction date
@@ -186,8 +186,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View v = inflater.inflate(R.layout.fragment_new_transaction, container, false);
 
-		mNameEditText           = (AutoCompleteTextView) v.findViewById(R.id.input_transaction_name);
-		mDescriptionEditText    = (EditText) v.findViewById(R.id.input_description);
+		mDescriptionEditText = (AutoCompleteTextView) v.findViewById(R.id.input_transaction_name);
+		mNotesEditText = (EditText) v.findViewById(R.id.input_description);
 		mDateTextView           = (TextView) v.findViewById(R.id.input_date);
 		mTimeTextView           = (TextView) v.findViewById(R.id.input_time);
 		mAmountEditText         = (EditText) v.findViewById(R.id.input_transaction_amount);
@@ -266,7 +266,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
      */
     private void initTransactionNameAutocomplete() {
         final int[] to = new int[]{android.R.id.text1};
-        final String[] from = new String[]{DatabaseSchema.TransactionEntry.COLUMN_NAME};
+        final String[] from = new String[]{DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION};
 
         SimpleCursorAdapter adapter = new SimpleCursorAdapter(
                 getActivity(), android.R.layout.simple_dropdown_item_1line,
@@ -275,7 +275,7 @@ private void initTransactionNameAutocomplete() {
         adapter.setCursorToStringConverter(new SimpleCursorAdapter.CursorToStringConverter() {
             @Override
             public CharSequence convertToString(Cursor cursor) {
-                final int colIndex = cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_NAME);
+                final int colIndex = cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION);
                 return cursor.getString(colIndex);
             }
         });
@@ -287,11 +287,11 @@ public Cursor runQuery(CharSequence name) {
             }
         });
 
-        mNameEditText.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+        mDescriptionEditText.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
                 mTransaction = new Transaction(mTransactionsDbAdapter.getTransaction(id), true);
-                if (!GnuCashApplication.isDoubleEntryEnabled(true)){ //if no double entry, use only splits for this acct
+                if (!GnuCashApplication.isDoubleEntryEnabled(true)) { //if no double entry, use only splits for this acct
                     List<Split> accountSplits = mTransaction.getSplits(mAccountsDbAdapter.getAccountUID(mAccountId));
                     mTransaction.setSplits(accountSplits);
                 }
@@ -300,7 +300,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
             }
         });
 
-        mNameEditText.setAdapter(adapter);
+        mDescriptionEditText.setAdapter(adapter);
     }
 
     /**
@@ -308,7 +308,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
 	 * This method is called if the fragment is used for editing a transaction
 	 */
 	private void initializeViewsWithTransaction(){
-		mNameEditText.setText(mTransaction.getName());
+		mDescriptionEditText.setText(mTransaction.getDescription());
 
         String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
         mTransactionTypeButton.setAccountType(mAccountType);
@@ -319,7 +319,7 @@ private void initializeViewsWithTransaction(){
             mAmountEditText.setText(mTransaction.getBalance(accountUID).toPlainString());
         }
 		mCurrencyTextView.setText(mTransaction.getCurrency().getSymbol(Locale.getDefault()));
-		mDescriptionEditText.setText(mTransaction.getDescription());
+		mNotesEditText.setText(mTransaction.getNote());
 		mDateTextView.setText(DATE_FORMATTER.format(mTransaction.getTimeMillis()));
 		mTimeTextView.setText(TIME_FORMATTER.format(mTransaction.getTimeMillis()));
 		Calendar cal = GregorianCalendar.getInstance();
@@ -556,8 +556,8 @@ private void saveNewTransaction() {
 				mTime.get(Calendar.HOUR_OF_DAY),
 				mTime.get(Calendar.MINUTE),
 				mTime.get(Calendar.SECOND));
-		String name = mNameEditText.getText().toString();
 		String description = mDescriptionEditText.getText().toString();
+		String notes = mNotesEditText.getText().toString();
 		BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
 
 		long accountID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountID();
@@ -578,9 +578,9 @@ private void saveNewTransaction() {
                 }
             }
             mTransaction.setSplits(mSplitsList);
-			mTransaction.setName(name);
+			mTransaction.setDescription(description);
 		} else {
-			mTransaction = new Transaction(name);
+			mTransaction = new Transaction(description);
             if (mSplitsList.isEmpty()) { //amount entered in the simple interface (not using splits Editor)
                 Split split = new Split(amount, accountUID);
                 split.setType(mTransactionTypeButton.getTransactionType());
@@ -601,7 +601,7 @@ private void saveNewTransaction() {
 		}
         mTransaction.setCurrencyCode(mAccountsDbAdapter.getCurrencyCode(accountID));
 		mTransaction.setTime(cal.getTimeInMillis());
-		mTransaction.setDescription(description);
+		mTransaction.setNote(notes);
 
         //save the normal transaction first
         mTransactionsDbAdapter.addTransaction(mTransaction);
@@ -654,7 +654,7 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 	public boolean onOptionsItemSelected(MenuItem item) {
 		//hide the keyboard if it is visible
 		InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
-		imm.hideSoftInputFromWindow(mNameEditText.getApplicationWindowToken(), 0);
+		imm.hideSoftInputFromWindow(mDescriptionEditText.getApplicationWindowToken(), 0);
 
 		switch (item.getItemId()) {
 		case R.id.menu_cancel:
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 978d3b64..0e1beaf4 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -148,7 +148,7 @@ public void onCreate(Bundle savedInstanceState) {
 		mCursorAdapter = new TransactionsCursorAdapter(
 				getActivity().getApplicationContext(), 
 				R.layout.list_item_transaction, null, 
-				new String[] {DatabaseSchema.TransactionEntry.COLUMN_NAME},
+				new String[] {DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION},
 				new int[] {R.id.primary_text});
 		setListAdapter(mCursorAdapter);
 	}
@@ -420,12 +420,12 @@ public void bindView(View view, Context context, Cursor cursor) {
             TransactionsActivity.displayBalance(amountTextView, amount);
 
 			TextView trNote = (TextView) view.findViewById(R.id.secondary_text);
-			String description = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_DESCRIPTION));
-			if (description == null || description.length() == 0)
+			String notes = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_NOTES));
+			if (notes == null || notes.length() == 0)
 				trNote.setVisibility(View.GONE);
 			else {
 				trNote.setVisibility(View.VISIBLE);
-				trNote.setText(description);
+				trNote.setText(notes);
 			}
 
             setSectionHeaderVisibility(view, cursor);
diff --git a/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java b/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
index 251d4304..304b29f4 100644
--- a/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
+++ b/integration-tests/src/org/gnucash/android/test/db/TransactionsDbAdapterTest.java
@@ -40,8 +40,8 @@ protected void setUp() throws Exception {
 	
 	public void testTransactionsAreTimeSorted(){
 		List<Transaction> transactionsList = mAdapter.getAllTransactionsForAccount(ALPHA_ACCOUNT_UID);
-		assertEquals("T1000", transactionsList.get(0).getName());
-		assertEquals("T800", transactionsList.get(1).getName());
+		assertEquals("T1000", transactionsList.get(0).getDescription());
+		assertEquals("T800", transactionsList.get(1).getDescription());
 	}
 	
 	@Override
diff --git a/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 47f8a055..6da6059b 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -49,7 +49,7 @@ protected void setUp() throws Exception {
 		
 		Account account = new Account("Exportable");		
 		Transaction transaction = new Transaction("Pizza");
-		transaction.setDescription("What up?");
+		transaction.setNote("What up?");
 		transaction.setTime(System.currentTimeMillis());
 		
 		account.addTransaction(transaction);
diff --git a/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 2fa68105..1a1cff23 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -68,7 +68,7 @@ protected void setUp() throws Exception {
         account.setUID(DUMMY_ACCOUNT_UID);
         account.setCurrency(Currency.getInstance(Locale.getDefault()));
         mTransaction = new Transaction(TRANSACTION_NAME);
-        mTransaction.setDescription("What up?");
+        mTransaction.setNote("What up?");
         mTransaction.setTime(mTransactionTimeMillis);
 
         account.addTransaction(mTransaction);
@@ -148,7 +148,7 @@ public void testAddTransactionShouldRequireAmount(){
 	private void validateEditTransactionFields(Transaction transaction){
 		
 		String name = mSolo.getEditText(0).getText().toString();
-		assertEquals(transaction.getName(), name);
+		assertEquals(transaction.getDescription(), name);
 		
 		String amountString = mSolo.getEditText(1).getText().toString();
 		NumberFormat formatter = NumberFormat.getInstance();
@@ -161,7 +161,7 @@ private void validateEditTransactionFields(Transaction transaction){
 		assertEquals(transaction.getBalance(DUMMY_ACCOUNT_UID), amount);
 		
 		String description = mSolo.getEditText(2).getText().toString();
-		assertEquals(transaction.getDescription(), description);
+		assertEquals(transaction.getNote(), description);
 		
 		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
 		TextView dateView = (TextView) mSolo.getView(R.id.input_date);
@@ -308,7 +308,7 @@ public void testOpenTransactionEditShouldNotModifyTransaction(){
 			
 			assertEquals(1, transactions.size());
 			Transaction trx = transactions.get(0);
-			assertEquals(TRANSACTION_NAME, trx.getName());
+			assertEquals(TRANSACTION_NAME, trx.getDescription());
 			Date expectedDate = new Date(mTransactionTimeMillis);
 			Date trxDate = new Date(trx.getTimeMillis());
 			assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
@@ -399,8 +399,8 @@ public void testIntentTransactionRecording(){
 		List<Transaction> transactions = trxnAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
 		
 		for (Transaction transaction : transactions) {
-			if (transaction.getName().equals("Power intents")){
-				assertEquals("Intents for sale", transaction.getDescription());
+			if (transaction.getDescription().equals("Power intents")){
+				assertEquals("Intents for sale", transaction.getNote());
 				assertEquals(4.99, transaction.getBalance(DUMMY_ACCOUNT_UID).asDouble());
 			}
 		}

From 2da2c655702a26a88fa3f929180fd1ef39eb041c Mon Sep 17 00:00:00 2001
From: Nicolas <wicowyn@gmail.com>
Date: Thu, 31 Jul 2014 12:53:45 +0200
Subject: [PATCH 13/18] Update french translation

---
 app/res/values-fr/strings.xml | 60 +++++++++++++++++++++----------------------
 1 file changed, 30 insertions(+), 30 deletions(-)

diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 2f037614..f5a2d5f8 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -303,14 +303,14 @@
     <string name="summary_xml_ofx_header">Activez cette option lors d\'un export vers une application tierce autre que GnuCash pour PC</string>
     <string name="title_whats_new">Nouveautes</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
-        - Multiple bug fixes and improvements\n
+        - Cration de multiples dcoupes par transactions\n
+        - Correction du calcul des soldes de comptes pour les comptes de diffrents types\n
+        - Utilisation de labels spcifiques pour les comptes CREDIT/DEBITs\n
+        - Sauvegarde automatique des donnes avant la suppression des oprations\n
+        - Restaurer la dernire sauvegarde des donnes (dans Paramtres -> Gnral)\n
+        - Lecture des transactions depuis les fichiers GnuCash XML (support limit)\n
+        - Options pour sauvegarder le solde des comptes avant la suppression des transactions\n
+        - Multiples amliorations et corrections de bugs\n
 	</string>
     <string name="label_dismiss">Passer</string>
     <string name="toast_transanction_amount_required">Entrez un montant pour sauvegarder la transaction</string>
@@ -371,7 +371,7 @@
     </string-array>
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Slectionnez une couleur</string>
-    <string name="label_delete_sub_accounts">Supprimer sous-comptes</string>
+    <string name="label_delete_sub_accounts">Supprimer les sous-comptes</string>
     <string name="title_recent_accounts">Rcent</string>
     <string name="title_favorite_accounts">Favoris</string>
     <string name="title_all_accounts">Tous</string>
@@ -391,29 +391,29 @@
     </string-array>
     <string name="menu_scheduled_transactions">Transactions planifies</string>
     <string name="title_scheduled_transactions">Transactions planifies</string>
-    <string name="title_select_export_destination">Select destination for export</string>
+    <string name="title_select_export_destination">Selectionnez une destination pour l\'export</string>
     <string name="hint_split_memo">Memo</string>
-    <string name="label_spend">Spend</string>
-    <string name="label_receive">Receive</string>
-    <string name="label_withdrawal">Withdrawal</string>
-    <string name="label_deposit">Deposit</string>
-    <string name="label_payment">Payment</string>
+    <string name="label_spend">Dpense</string>
+    <string name="label_receive">Reu</string>
+    <string name="label_withdrawal">Retrait</string>
+    <string name="label_deposit">Dpt</string>
+    <string name="label_payment">Paiement</string>
     <string name="label_charge">Charge</string>
-    <string name="label_decrease">Decrease</string>
-    <string name="label_increase">Increase</string>
-    <string name="label_income">Income</string>
-    <string name="label_rebate">Rebate</string>
-    <string name="label_expense">Expense</string>
-    <string name="label_bill">Bill</string>
-    <string name="label_invoice">Invoice</string>
-    <string name="label_buy">Buy</string>
-    <string name="label_sell">Sell</string>
-    <string name="label_account_balance">Balance:</string>
-    <string name="label_repeats">Repeats</string>
-    <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="label_decrease">Diminuer</string>
+    <string name="label_increase">Augmenter</string>
+    <string name="label_income">Revenu</string>
+    <string name="label_rebate">Remboursement</string>
+    <string name="label_expense">Frais</string>
+    <string name="label_bill">Note</string>
+    <string name="label_invoice">Facture</string>
+    <string name="label_buy">Achat</string>
+    <string name="label_sell">Vente</string>
+    <string name="label_account_balance">Solde:</string>
+    <string name="label_repeats">Rptitions</string>
+    <string name="toast_no_recent_backup">Aucune sauvegarde rcente trouve</string>
     <string name="account_name_opening_balances">Soldes initiaux</string>
     <string name="account_name_equity">Capitaux propres</string>
-    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    <string name="summary_save_opening_balances">Permet d\'enregistrer le solde du compte courant (avant la suppression des transactions) comme le nouveau solde d\'ouverture aprs la suppression des transactions
     </string>
-    <string name="title_save_opening_balances">Save account opening balances</string>
-</resources>
\ No newline at end of file
+    <string name="title_save_opening_balances">Enregistrer les soldes des comptes d\'ouverture</string>
+</resources>

From 0b956401ee8e871c1e523729153d33ff60f52375 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 31 Jul 2014 17:22:51 +0200
Subject: [PATCH 14/18] Update version strings for 1.4.0-beta4 release

Code refactoring
---
 app/AndroidManifest.xml                            |  2 +-
 app/res/values/strings.xml                         |  2 +-
 app/src/org/gnucash/android/model/Transaction.java | 24 +++++++++++-----------
 .../ui/transaction/TransactionFormFragment.java    |  2 +-
 4 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 3e847627..84a8fc42 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="32"
+    android:versionCode="33"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 72d11bf9..786e173b 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.0-beta3</string>
+    <string name="app_version_name">1.4.0-beta4</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 16aab167..05220ba0 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -299,32 +299,32 @@ public Currency getCurrency(){
     }
 
 	/**
-	 * Returns the name of the transaction
-	 * @return Name of the transaction
+	 * Returns the description of the transaction
+	 * @return Transaction description
 	 */
 	public String getDescription() {
 		return mDescription;
 	}
 
 	/**
-	 * Sets the name of the transaction
-	 * @param name String containing name of transaction to set
+	 * Sets the transaction description
+	 * @param description String description
 	 */
-	public void setDescription(String name) {
-		this.mDescription = name.trim();
+	public void setDescription(String description) {
+		this.mDescription = description.trim();
 	}
 
 	/**
-	 * Set short description of the transaction
-	 * @param description String containing description of transaction
+	 * Add notes to the transaction
+	 * @param notes String containing notes for the transaction
 	 */
-	public void setNote(String description) {
-		this.mNotes = description;
+	public void setNote(String notes) {
+		this.mNotes = notes;
 	}
 
 	/**
-	 * Returns the description of the transaction
-	 * @return String containing description of transaction
+	 * Returns the transaction notes
+	 * @return String notes of transaction
 	 */
 	public String getNote() {
 		return mNotes;
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 1d9c4f10..82f0d936 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -435,7 +435,7 @@ private void openSplitEditor(){
             return;
         }
         FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
-        String baseAmountString = "0";
+        String baseAmountString;
         long transactionId = getArguments().getLong(UxArgument.SELECTED_TRANSACTION_ID);
 
         if (transactionId <= 0){

From 922b7ed7fbf83dd4394973488dc4faaf2c3cb5d2 Mon Sep 17 00:00:00 2001
From: Alexander Galanin <al@galanin.nnov.ru>
Date: Thu, 31 Jul 2014 20:40:50 +0400
Subject: [PATCH 15/18] Updated Russian translation

---
 app/res/values-ru/strings.xml | 64 +++++++++++++++++++++----------------------
 1 file changed, 32 insertions(+), 32 deletions(-)

diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 436261d9..60783748 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -303,14 +303,14 @@
 	<string name="summary_xml_ofx_header">  ,       GnuCash  </string>
 	<string name="title_whats_new"></string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
-        - Multiple bug fixes and improvements\n
+        -   \n
+        -        \n
+        -          \n
+        -       \n
+        -      ( -&gt; )\n
+        -    XML- GnuCash ( )\n
+        -       \n
+        -     \n
 	</string>
 	<string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required"> ,   </string>
@@ -393,31 +393,31 @@
         <item></item>
         <item></item>
     </string-array>
-    <string name="menu_scheduled_transactions">Scheduled Transactions</string>
-    <string name="title_scheduled_transactions">Scheduled Transactions</string>
-    <string name="title_select_export_destination">Select destination for export</string>
-    <string name="hint_split_memo">Memo</string>
-    <string name="label_spend">Spend</string>
-    <string name="label_receive">Receive</string>
-    <string name="label_withdrawal">Withdrawal</string>
-    <string name="label_deposit">Deposit</string>
-    <string name="label_payment">Payment</string>
-    <string name="label_charge">Charge</string>
-    <string name="label_decrease">Decrease</string>
-    <string name="label_increase">Increase</string>
-    <string name="label_income">Income</string>
-    <string name="label_rebate">Rebate</string>
-    <string name="label_expense">Expense</string>
-    <string name="label_bill">Bill</string>
-    <string name="label_invoice">Invoice</string>
-    <string name="label_buy">Buy</string>
-    <string name="label_sell">Sell</string>
-    <string name="label_repeats">Repeats</string>
-    <string name="label_account_balance">Balance:</string>
-    <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="menu_scheduled_transactions"> </string>
+    <string name="title_scheduled_transactions"> </string>
+    <string name="title_select_export_destination">  </string>
+    <string name="hint_split_memo"></string>
+    <string name="label_spend"></string>
+    <string name="label_receive"></string>
+    <string name="label_withdrawal"></string>
+    <string name="label_deposit"></string>
+    <string name="label_payment"></string>
+    <string name="label_charge"></string>
+    <string name="label_decrease"></string>
+    <string name="label_increase"></string>
+    <string name="label_income"></string>
+    <string name="label_rebate"></string>
+    <string name="label_expense"></string>
+    <string name="label_bill"></string>
+    <string name="label_invoice"></string>
+    <string name="label_buy"></string>
+    <string name="label_sell"></string>
+    <string name="label_repeats"></string>
+    <string name="label_account_balance">:</string>
+    <string name="toast_no_recent_backup">  </string>
     <string name="account_name_opening_balances"> </string>
     <string name="account_name_equity"> </string>
-    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
+    <string name="summary_save_opening_balances">     (  )       
     </string>
-    <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="title_save_opening_balances">   </string>
 </resources>

From 945d76620d74e8025012c8bf8accf01713ef7c5d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 11 Aug 2014 10:33:32 +0200
Subject: [PATCH 16/18] Preserve default transfer accounts during upgrade
 database migration

- Improved: Mark opening balances as exported transactions
- Fixed: Editing transactions loaded from templates only partially modifies splits
- Fixed: Transaction templates do not use current date when loaded
- Update version strings for v1.4.0-beta5 release
---
 app/AndroidManifest.xml                                   |  2 +-
 app/res/values/strings.xml                                |  2 +-
 app/src/org/gnucash/android/db/AccountsDbAdapter.java     |  1 +
 app/src/org/gnucash/android/export/xml/GncXmlHelper.java  |  6 +++---
 app/src/org/gnucash/android/importer/GncXmlHandler.java   | 12 +++++++++++-
 app/src/org/gnucash/android/model/Account.java            | 10 +++++++---
 app/src/org/gnucash/android/model/Transaction.java        |  2 +-
 .../android/ui/transaction/TransactionFormFragment.java   | 15 ++++++++++-----
 8 files changed, 35 insertions(+), 15 deletions(-)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 84a8fc42..55e5acb5 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="33"
+    android:versionCode="34"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 786e173b..59e0ed31 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.0-beta4</string>
+    <string name="app_version_name">1.4.0-beta5</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index f5d12081..26a5e277 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -973,6 +973,7 @@ public boolean isFavoriteAccount(long accountId){
                 split.setType(transactionType);
                 transaction.addSplit(split);
                 transaction.addSplit(split.createPair(getOrCreateOpeningBalanceAccountUID()));
+                transaction.setExported(true);
                 openingTransactions.add(transaction);
             }
             cursor.close();
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
index 79246a20..992ea14b 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -79,7 +79,7 @@
     public static final String KEY_COLOR            = "color";
     public static final String KEY_FAVORITE         = "favorite";
     public static final String KEY_NOTES            = "notes";
-
+    public static final String KEY_DEFAULT_TRANSFER_ACCOUNT = "default_transfer_account";
 
     /**
      * Formats dates for the GnuCash XML format
@@ -132,12 +132,12 @@ public static BigDecimal parseMoney(String amountString){
      * @param value Slot value as String
      * @return Element node containing the key-value pair
      */
-    public static Element createSlot(Document doc, String key, String value){
+    public static Element createSlot(Document doc, String key, String value, String valueType){
         Element slotNode  = doc.createElement(TAG_SLOT);
         Element slotKeyNode = doc.createElement(TAG_SLOT_KEY);
         slotKeyNode.appendChild(doc.createTextNode(key));
         Element slotValueNode = doc.createElement(TAG_SLOT_VALUE);
-        slotValueNode.setAttribute(ATTR_KEY_TYPE, ATTR_VALUE_STRING);
+        slotValueNode.setAttribute(ATTR_KEY_TYPE, valueType);
         slotValueNode.appendChild(doc.createTextNode(value));
         slotNode.appendChild(slotKeyNode);
         slotNode.appendChild(slotValueNode);
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index c52e374d..5154b566 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -80,7 +80,8 @@
     boolean mInFavoriteSlot     = false;
     boolean mISO4217Currency    = false;
     boolean mIsDatePosted       = false;
-    boolean mIsNote = false;
+    boolean mIsNote             = false;
+    boolean mInDefaultTransferAccount = false;
 
     private Context mContext;
     private TransactionsDbAdapter mTransactionsDbAdapter;
@@ -185,6 +186,10 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             if (characterString.equals(GncXmlHelper.KEY_NOTES)){
                 mIsNote = true;
             }
+
+            if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
+                mInDefaultTransferAccount = true;
+            }
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
@@ -223,6 +228,11 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                     mIsNote = false;
                 }
             }
+
+            if (mInDefaultTransferAccount){
+                mAccount.setDefaultTransferAccountUID(characterString);
+                mInDefaultTransferAccount = false;
+            }
         }
 
 
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index 598bdc30..319667e8 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -608,14 +608,18 @@ public void toGncXml(Document doc, Element rootNode) {
 
         Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
         acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_PLACEHOLDER,
-                Boolean.toString(mIsPlaceholderAccount)));
+                Boolean.toString(mIsPlaceholderAccount), GncXmlHelper.ATTR_VALUE_STRING));
 
         if (mColorCode != null && mColorCode.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode));
+            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode, GncXmlHelper.ATTR_VALUE_STRING));
+        }
+
+        if (mDefaultTransferAccountUID != null && mDefaultTransferAccountUID.trim().length() > 0){
+            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT, mDefaultTransferAccountUID, "guid"));
         }
 
         acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc,
-                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite)));
+                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite), GncXmlHelper.ATTR_VALUE_STRING));
 
         Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
         accountNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 05220ba0..d76982ee 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -635,7 +635,7 @@ public void toGncXml(Document doc, Element rootElement) {
 
         Element trnSlotsNode = doc.createElement(GncXmlHelper.TAG_TRN_SLOTS);
         if (mNotes != null && mNotes.length() > 0) {
-            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes));
+            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes, GncXmlHelper.ATTR_VALUE_STRING));
             //TODO: Consider adding future transactions date as slot here too
         }
         Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRN_SPLITS);
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 82f0d936..400a91d1 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -291,12 +291,17 @@ public Cursor runQuery(CharSequence name) {
             @Override
             public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
                 mTransaction = new Transaction(mTransactionsDbAdapter.getTransaction(id), true);
-                if (!GnuCashApplication.isDoubleEntryEnabled(true)) { //if no double entry, use only splits for this acct
-                    List<Split> accountSplits = mTransaction.getSplits(mAccountsDbAdapter.getAccountUID(mAccountId));
-                    mTransaction.setSplits(accountSplits);
-                }
+                mTransaction.setTime(System.currentTimeMillis());
                 initializeViewsWithTransaction();
-                setAmountEditViewVisible(View.GONE);
+                List<Split> splitList = mTransaction.getSplits();
+                boolean isSplitPair = splitList.size() == 2 && splitList.get(0).isPairOf(splitList.get(1));
+                if (isSplitPair){
+                    mSplitsList.clear();
+                    mAmountEditText.setText(splitList.get(0).getAmount().toPlainString());
+                } else {
+                    setAmountEditViewVisible(View.GONE);
+                }
+                mTransaction = null; //we are creating a new transaction after all
             }
         });
 

From 93651dbc789ec69f64f28650d7a5dd906c182b8d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 12 Aug 2014 10:27:46 +0200
Subject: [PATCH 17/18] Updates for v1.4.0-beta6 release

Fixed: Split editor showing wrong currency symbol
Fixed: Template transactions overriding user-entered amounts
---
 app/AndroidManifest.xml                                    |  2 +-
 app/res/values/strings.xml                                 |  2 +-
 .../android/ui/transaction/TransactionFormFragment.java    | 14 +++++++++++---
 .../ui/transaction/dialog/SplitEditorDialogFragment.java   |  2 ++
 4 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 55e5acb5..8300811a 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="34"
+    android:versionCode="35"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 59e0ed31..e4aa3117 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.0-beta5</string>
+    <string name="app_version_name">1.4.0-beta6</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 400a91d1..7d03c967 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -292,14 +292,22 @@ public Cursor runQuery(CharSequence name) {
             public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
                 mTransaction = new Transaction(mTransactionsDbAdapter.getTransaction(id), true);
                 mTransaction.setTime(System.currentTimeMillis());
+                //we check here because next method will modify it and we want to catch user-modification
+                boolean amountEntered = mAmountInputFormatter.isInputModified();
                 initializeViewsWithTransaction();
                 List<Split> splitList = mTransaction.getSplits();
                 boolean isSplitPair = splitList.size() == 2 && splitList.get(0).isPairOf(splitList.get(1));
                 if (isSplitPair){
                     mSplitsList.clear();
-                    mAmountEditText.setText(splitList.get(0).getAmount().toPlainString());
+                    if (!amountEntered) //if user already entered an amount
+                        mAmountEditText.setText(splitList.get(0).getAmount().toPlainString());
                 } else {
-                    setAmountEditViewVisible(View.GONE);
+                    if (amountEntered){ //if user entered own amount, clear
+                        mSplitsList.clear();
+                        setAmountEditViewVisible(View.VISIBLE);
+                    } else {
+                        setAmountEditViewVisible(View.GONE);
+                    }
                 }
                 mTransaction = null; //we are creating a new transaction after all
             }
@@ -377,7 +385,7 @@ private void initalizeViews() {
 			code = mTransactionsDbAdapter.getCurrencyCode(accountId);
 		}
 		Currency accountCurrency = Currency.getInstance(code);
-		mCurrencyTextView.setText(accountCurrency.getSymbol(Locale.getDefault()));
+		mCurrencyTextView.setText(accountCurrency.getSymbol());
 
         if (mUseDoubleEntry){
             long defaultTransferAccountID = mAccountsDbAdapter.getDefaultTransferAccountID(accountId);
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 504a3c15..59875cd2 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -196,6 +196,8 @@ public void onClick(View view) {
         updateTransferAccountsList(accountsSpinner);
         accountsSpinner.setOnItemSelectedListener(new TypeButtonLabelUpdater(splitTypeButton));
 
+        Currency accountCurrency = Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountId));
+        splitCurrencyTextView.setText(accountCurrency.getSymbol());
         splitTypeButton.setAmountFormattingListener(splitAmountEditText, splitCurrencyTextView);
         splitTypeButton.setChecked(mBaseAmount.signum() > 0);
         splitUidTextView.setText(UUID.randomUUID().toString());

From 6ba22c7d760682d1fd313aed7aa82004016d172d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 15 Aug 2014 10:03:51 +0200
Subject: [PATCH 18/18] Updated strings for v1.4.0 release

---
 CHANGELOG.md               | 2 +-
 app/AndroidManifest.xml    | 2 +-
 app/res/values/strings.xml | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 6d009561..089d2108 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,6 @@
 Change Log
 ===============================================================================
-Version 1.4.0 *(2014-08-04)*
+Version 1.4.0 *(2014-08-15)*
 ----------------------------
 Since transactions are at the core of this app, this release touches almost all subsystems and is therefore huge.
 Transactions are now composed of multiple splits, which belong to different accounts and are no longer bound to accounts,
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 8300811a..608a0fdf 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="35"
+    android:versionCode="36"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index e4aa3117..fcdf95f3 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.0-beta6</string>
+    <string name="app_version_name">1.4.0</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
