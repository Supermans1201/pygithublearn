From f142f01c920c22cc01f31d5e08c298a6fa4e3fe0 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Fri, 1 Aug 2014 18:15:43 +0300
Subject: [PATCH 01/68] Added passcode settings

---
 app/res/values/strings.xml                         |  6 ++
 app/res/xml/fragment_passcode_preferences.xml      | 29 ++++++++
 app/res/xml/preference_headers.xml                 |  2 +
 app/src/org/gnucash/android/ui/UxArgument.java     | 10 +++
 .../ui/settings/PasscodePreferenceFragment.java    | 78 ++++++++++++++++++++++
 5 files changed, 125 insertions(+)
 create mode 100755 app/res/xml/fragment_passcode_preferences.xml
 create mode 100644 app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java

diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 786e173b..41217efb 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -453,6 +453,12 @@
 	<string name="key_license">app_license</string>
 	<string name="label_widget_configuration">Select Account</string>
 	<string name="toast_no_transactions_to_export">There are no transactions available to export</string>
+    <string name="header_passcode_settings">Passcode</string>
+    <string name="title_passcode_preferences">Passcode Preferences</string>
+    <string name="key_enable_passcode">enable_passcode</string>
+    <string name="title_enable_passcode">Turn On/Off Passcode</string>
+    <string name="title_change_passcode">Change Passcode</string>
+    <string name="key_change_passcode">change_passcode</string>
 	<string name="key_about">about_gnucash</string>
 	<string name="title_about_gnucash">About GnuCash</string>
 	<string name="summary_about_gnucash">Gnucash is a mobile finance expense tracker application for Android.\n
diff --git a/app/res/xml/fragment_passcode_preferences.xml b/app/res/xml/fragment_passcode_preferences.xml
new file mode 100755
index 00000000..09484fe9
--- /dev/null
+++ b/app/res/xml/fragment_passcode_preferences.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android" >
+    <PreferenceCategory android:title="@string/title_passcode_preferences"/>
+    <CheckBoxPreference android:title="@string/title_enable_passcode"
+                        android:key="@string/key_enable_passcode" />
+    <EditTextPreference android:title="@string/title_change_passcode"
+                        android:key="@string/key_change_passcode"
+                        android:dependency="@string/key_enable_passcode"
+                        android:inputType="number"
+                        android:password="true"
+                        android:maxLength="4" />
+
+</PreferenceScreen>
\ No newline at end of file
diff --git a/app/res/xml/preference_headers.xml b/app/res/xml/preference_headers.xml
index 88cc6c0f..b8559671 100644
--- a/app/res/xml/preference_headers.xml
+++ b/app/res/xml/preference_headers.xml
@@ -21,6 +21,8 @@
             android:title="@string/header_account_settings" />
     <header android:fragment="org.gnucash.android.ui.settings.TransactionsPreferenceFragment" 
         android:title="@string/header_transaction_settings" />
+    <header android:fragment="org.gnucash.android.ui.settings.PasscodePreferenceFragment"
+        android:title="@string/header_passcode_settings" />
     <header android:fragment="org.gnucash.android.ui.settings.AboutPreferenceFragment"
         android:title="@string/header_about_gnucash" />
     <header android:title="Rate in Play Store">
diff --git a/app/src/org/gnucash/android/ui/UxArgument.java b/app/src/org/gnucash/android/ui/UxArgument.java
index 8d97baf3..abff1fa7 100644
--- a/app/src/org/gnucash/android/ui/UxArgument.java
+++ b/app/src/org/gnucash/android/ui/UxArgument.java
@@ -49,6 +49,16 @@
     public static final String PARENT_ACCOUNT_ID        = "parent_account_id";
 
     /**
+     * Key for checking whether the passcode is enabled or not.
+     */
+    public static final String ENABLED_PASSCODE         = "enabled_passcode";
+
+    /**
+     * Key for storing the passcode.
+     */
+    public static final String PASSCODE                 = "passcode";
+
+    /**
      * Amount passed as a string
      */
     public static final String AMOUNT_STRING = "starting_amount";
diff --git a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
new file mode 100644
index 00000000..ac6364f1
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.settings;
+
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.PreferenceFragment;
+import android.preference.PreferenceManager;
+
+import com.actionbarsherlock.app.ActionBar;
+import com.actionbarsherlock.app.SherlockPreferenceActivity;
+
+import org.gnucash.android.R;
+import org.gnucash.android.ui.UxArgument;
+
+/**
+ * Fragment for configuring passcode to the application
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ */
+public class PasscodePreferenceFragment extends PreferenceFragment {
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(R.xml.fragment_passcode_preferences);
+
+        ActionBar actionBar = ((SherlockPreferenceActivity) getActivity()).getSupportActionBar();
+        actionBar.setHomeButtonEnabled(true);
+        actionBar.setDisplayHomeAsUpEnabled(true);
+        actionBar.setTitle(R.string.title_passcode_preferences);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        final SharedPreferences.Editor editor = PreferenceManager
+                .getDefaultSharedPreferences(getActivity().getApplicationContext()).edit();
+
+        final String keyEnablePasscode = getString(R.string.key_enable_passcode);
+        findPreference(keyEnablePasscode)
+                .setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+                    @Override
+                    public boolean onPreferenceChange(Preference preference, Object newValue) {
+                        editor.putBoolean(UxArgument.ENABLED_PASSCODE, (Boolean) newValue);
+                        editor.commit();
+                        return true;
+                    }
+                });
+        findPreference(getString(R.string.key_change_passcode))
+                .setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+                    @Override
+                    public boolean onPreferenceChange(Preference preference, Object newValue) {
+                        editor.putString(UxArgument.PASSCODE, newValue.toString());
+                        editor.commit();
+                        return true;
+                    }
+                });
+
+    }
+
+}

From d95acf960cbd4e4d46193c11e27f8be945c1d7a3 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Sat, 2 Aug 2014 21:25:24 +0300
Subject: [PATCH 02/68] Added passcode lock screen

---
 CONTRIBUTORS                                       |  1 +
 app/AndroidManifest.xml                            |  9 ++-
 app/res/layout/passcode_lockscreen.xml             | 37 +++++++++
 app/res/values/strings.xml                         |  3 +
 .../ui/passcode/PasscodeLockScreenActivity.java    | 93 ++++++++++++++++++++++
 5 files changed, 141 insertions(+), 2 deletions(-)
 create mode 100755 app/res/layout/passcode_lockscreen.xml
 create mode 100644 app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java

diff --git a/CONTRIBUTORS b/CONTRIBUTORS
index a33fd3cc..b99b8384 100644
--- a/CONTRIBUTORS
+++ b/CONTRIBUTORS
@@ -16,4 +16,5 @@ Nicolas Barranger <wicowyn@gmail.com>
 Sigurd Gartmann <sigurdga-github@sigurdga.no>
 Pedro Abel <pedroabel@gmail.com>
 windwarrior <lennartbuit@gmail.com>
+Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
 Lei Xiao Bao <lxbzmy@gmail.com>
\ No newline at end of file
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 84a8fc42..78d468aa 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -48,13 +48,18 @@
         android:label="@string/app_name" 
         android:theme="@style/Theme.Sherlock.Light.DarkActionBar">
         <activity
-            android:name=".ui.account.AccountsActivity"
-            android:label="@string/app_name">
+            android:name=".ui.passcode.PasscodeLockScreenActivity"
+            android:noHistory="true"
+            android:windowSoftInputMode="stateAlwaysVisible">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
+        <activity
+            android:name=".ui.account.AccountsActivity"
+            android:label="@string/app_name">
+        </activity>
         <activity android:name=".ui.settings.SettingsActivity"/>
         <activity android:name=".ui.transaction.TransactionsActivity"
             android:configChanges="orientation|screenSize">
diff --git a/app/res/layout/passcode_lockscreen.xml b/app/res/layout/passcode_lockscreen.xml
new file mode 100755
index 00000000..cf92b332
--- /dev/null
+++ b/app/res/layout/passcode_lockscreen.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center"
+    android:orientation="vertical" >
+
+    <TextView android:id="@+id/passcodeLabel"
+              android:layout_width="wrap_content"
+              android:layout_height="wrap_content"
+              android:text="@string/label_passcode" />
+
+    <EditText android:id="@+id/passcode"
+              android:layout_width="wrap_content"
+              android:layout_height="wrap_content"
+              android:hint=""
+              android:maxLength="4"
+              android:password="true"
+              android:inputType="number" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 41217efb..c475d517 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -27,6 +27,9 @@
     <string name="label_account_name">Account name</string>
     <string name="btn_cancel">Cancel</string>
     <string name="btn_save">Save</string>
+    <string name="label_passcode">Enter Passcode</string>
+    <string name="toast_wrong_passcode">Wrong passcode, please try again</string>
+    <string name="toast_enter_full_passcode">You didnt enter the full passcode</string>
     <string name="label_transaction_name">Description</string>
     <string name="label_transaction_amount">Amount</string>
     <string name="title_add_transaction">New transaction</string>
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
new file mode 100644
index 00000000..17fafdb6
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.passcode;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import org.gnucash.android.R;
+import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.account.AccountsActivity;
+
+/**
+ * Activity for displaying and managing the passcode lock screen.
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ */
+public class PasscodeLockScreenActivity extends Activity {
+
+    private static final String TAG = "PasscodeLockScreenActivity";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.passcode_lockscreen);
+
+        final SharedPreferences sharedPreferences = PreferenceManager
+                .getDefaultSharedPreferences(getApplicationContext());
+
+        if (!sharedPreferences.getBoolean(UxArgument.ENABLED_PASSCODE, false)) {
+            startActivity(new Intent(this, AccountsActivity.class));
+        }
+
+        final EditText passcodeEditText = (EditText) findViewById(R.id.passcode);
+        passcodeEditText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void afterTextChanged(Editable editable) {
+                String pass = editable.toString();
+                String passcode = sharedPreferences.getString(UxArgument.PASSCODE, "");
+                Log.d(TAG, passcode);
+                if (pass.length() == 4) {
+                    if (pass.equals(passcode)) {
+                        startActivity(new Intent(getApplicationContext(), AccountsActivity.class));
+                    } else {
+                        Toast.makeText(getApplicationContext(),
+                                R.string.toast_wrong_passcode, Toast.LENGTH_SHORT).show();
+                        passcodeEditText.getText().clear();
+                    }
+                }
+            }
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {}
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {}
+        });
+
+        passcodeEditText.setOnKeyListener(new View.OnKeyListener() {
+            @Override
+            public boolean onKey(View v, int keyCode, KeyEvent event) {
+                if ((event.getAction() == KeyEvent.ACTION_DOWN)
+                        && (keyCode == KeyEvent.KEYCODE_ENTER)) {
+                    Toast.makeText(getApplicationContext(),
+                            R.string.toast_enter_full_passcode, Toast.LENGTH_LONG).show();
+                }
+                return false;
+            }
+        });
+
+    }
+
+}

From 177e8cb3f0567b61908a91d3bf1b918c9837ab60 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Tue, 5 Aug 2014 21:13:30 +0300
Subject: [PATCH 03/68] Added soft numeric keyboard

---
 app/res/drawable-mdpi/clear_btn.png                | Bin 0 -> 1650 bytes
 app/res/layout/fragment_numeric_keyboard.xml       | 227 +++++++++++++++++++++
 .../android/ui/passcode/KeyboardFragment.java      | 188 +++++++++++++++++
 3 files changed, 415 insertions(+)
 create mode 100644 app/res/drawable-mdpi/clear_btn.png
 create mode 100644 app/res/layout/fragment_numeric_keyboard.xml
 create mode 100644 app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java

diff --git a/app/res/drawable-mdpi/clear_btn.png b/app/res/drawable-mdpi/clear_btn.png
new file mode 100644
index 0000000000000000000000000000000000000000..bc3b9850767f7639000c4b33320a0ba96af90a9d
GIT binary patch
literal 1650
zcmV-&295cNP)<h;3K|Lk000e1NJLTq001xm001xu1^@s6R|5Hm00004XF*Lt006O%
z3;baP00006VoOIv0RI600RN!9r;`8x010qNS#tmYE+YT{E+YYWr9XB6000McNliru
z-2ws(CJ<%LRGt6;1@B2jK~!ko?U`$cRaF$ne|H=mZInPo=0lCrQxS^nfkQgp%&064
z0*Nw6D@+J9^Enpyhdwms3o<3jC@@eXlA_XJl&h0u)QD**MrkMxD&qv%q&cIvFYCZ+
zcg{WMIx2mb1p{}^*=Mc)T6?|r+R#Hi^#349S7dD(<t_(k4@lAwU??yc=x2}50jGgu
zl3GiBf7KL_<N*u=W&)E8coonasIcW1fllB&@H?;tcvsR-A+M{cKwn@aumTw8UKLC5
z4d1l@bAT2}e_c@p{B}#K0~*ZY9$XflaqG4Ljgp$mb*tPZfL{bG0s1BYY6qHu13;U-
z9|#Nw#sD=5-*p0OB+V(ut#Vm?T~cpgJ@7;z{DS%Q$G|E{Kd11k1!e(H1A~CdfZujt
zvZRhIO5`%8yWYS?;PF6M8?X#mC#k*67^()Q1M`8}7$qK)^k<q96&c-Uy@B_NHvuCg
zy&<W++&W+uehat_*bo?VJn+S3i2?KZ*8>Z^FX`Ft=J6o5mH{uDQKM|NR?>^5cvPea
zsI!3m7kJ?LIN(_oNhpBxf#pHAnjvXo**jp2`vM<Xs*EhsB<X<|>s=3=lypALXI)Yl
zA?aXDQTzaS#>w0TJP35e@y(SGa3}D+d({Sv0NUJ|D64!290%&N1fHZRW}JDzieUW!
zU=MJUQ{rJsTjThaa-kJ&D=z@cB(()f)>^O)0qy`cOX?pd$XR%rWi%{<%?;L_0UE6?
zM6^1|MUz};7;wZXa2mMPr%D6=tt(6s?Xle>*r~|!8-qYC0xKoWbG$1}{&kLTy`<)n
zLF_b~8T2k6$E3>2m>nzvqa?LNJK+?G+$QIeLPUK67w!Vq1{Hf|Y8G+;Ck5+P#RTqQ
zU^H+rP__t+irgu18=uXh-CrzeR!sY_Ch(H_I2Wpjai1a95=VgA!}h?r#1Y^T;FJR&
z37i0IlQb1r=VbXEXaJVRWFjQ}0qk?exyJgb)F2*e{d@$ZIVBw)0d99ncz3!7_|W;h
zkG++W8YLBDYC`mLhg)A|*isc3Y`srJ2QuXJ6AA7_;4;y(21#=>6hAM!w_!_FpkMI3
zEn~NO1b7r^O~`IVpbJ<O=Qat{7GUjHb~6`~F-o-tha+$aRlgNjEvcBX-%phtr@%Qo
z!$vf)3<aiH0W2nfsRcewDt0mCWnVOGsS2D9s^IX9E;I#r&+0>|zH34hoEenxvbzjh
zsshJsdJtK0Oa=v#id0uj4E?9rmFQ~g-8X*&N3+y{Ry!g_U}~&wNb7CliqtE>-D$-x
zRKotR0`77m&jN?CR^lzex>+%m*t<<qky<9{x0GVHBkY@uUI>)lZ7oKoW^N?#qhoLi
zxKUDvTQeH?CSk&`(&u^ms{wwn&NZA9?UXbw!0;<@gIn{Eq_48L5H>MuagPVt0o+@t
z1$aBgZ5m?0mnwEAfL8+yPg*A$tvMbCKCKSSao{R}`I4@6z&e51PKjblZxh!$odE8W
z)a=$&0}FhI8eu8tJb*P%p8@wfOKgzzR1Cn+fnOxOlriPj06T%{l6D2WmYM>Q%)OS4
z&SX}=37i0Y>2iAxSZ)V!52%-<3t4iz`=(ELhL*I@PGdz^yrxRpl*F%BDFq6J!r^>A
zKM<&MkL&XJe08BvXv*jF<nwuaN10Y#3xz_o?n1QIo-G7kbC`0#Cz6(QXRLzFD!02p
ztpFC-^k6{f=a(=Ssy4T2bX{-`*l%gNdy_e%$)-dUtVJ7r?2+`Gq{=Kqu5gWIo3EYE
z7hQ%MpT#ic40rq61fo93`<=i^JHxKAlT;~wRaT^CTdM36@Y@fJm(<qn;cmih%o<=u
z%v3p|eO6uL#_RP#dk{{!H+#3aEaUZrIp#!QF>r6jo0+srj=grlv8mj6>dqBYH82)<
z6S%pID<&`ZxD~0bHqa_N8B}uV)FEjraEqj|Hn*v_0vLD6*JUm7SztHtPShSG9O$p?
w4#Zi@eh(-4n)N7f$aj_9xuNW#9_k_Z2Nj`H7y<$RE&u=k07*qoM6N<$f}s-MzW@LL

literal 0
HcmV?d00001

diff --git a/app/res/layout/fragment_numeric_keyboard.xml b/app/res/layout/fragment_numeric_keyboard.xml
new file mode 100644
index 00000000..869a455b
--- /dev/null
+++ b/app/res/layout/fragment_numeric_keyboard.xml
@@ -0,0 +1,227 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<!--
+ Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_alignParentBottom="true"
+                android:layout_centerHorizontal="true">
+
+    <LinearLayout
+        android:id="@+id/zero"
+        android:layout_width="match_parent"
+        android:layout_height="55dp"
+        android:layout_alignParentBottom="true"
+        android:orientation="horizontal"
+        android:weightSum="3" >
+
+        <Button
+            android:id="@+id/empty_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text=""
+            android:textSize="25sp"
+            android:enabled="false" />
+
+        <Button
+            android:id="@+id/zero_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="0"
+            android:textSize="25sp"/>
+
+        <ImageButton
+            android:id="@+id/delete_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:src="@drawable/clear_btn" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/seven_to_nine"
+        android:layout_width="match_parent"
+        android:layout_height="55dp"
+        android:layout_above="@+id/zero"
+        android:orientation="horizontal"
+        android:weightSum="3" >
+
+        <Button
+            android:id="@+id/seven_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="7"
+            android:textSize="25sp" />
+
+        <Button
+            android:id="@+id/eight_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="8"
+            android:textSize="25sp" />
+
+        <Button
+            android:id="@+id/nine_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="9"
+            android:textSize="25sp" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/four_to_six"
+        android:layout_width="match_parent"
+        android:layout_height="55dp"
+        android:layout_above="@+id/seven_to_nine"
+        android:orientation="horizontal"
+        android:weightSum="3" >
+
+        <Button
+            android:id="@+id/four_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="4"
+            android:textSize="25sp" />
+
+        <Button
+            android:id="@+id/five_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="5"
+            android:textSize="25sp" />
+
+        <Button
+            android:id="@+id/six_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="6"
+            android:textSize="25sp" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/one_to_three"
+        android:layout_width="match_parent"
+        android:layout_height="55dp"
+        android:layout_above="@+id/four_to_six"
+        android:orientation="horizontal"
+        android:weightSum="3" >
+
+        <Button
+            android:id="@+id/one_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="1"
+            android:textSize="25sp" />
+
+        <Button
+            android:id="@+id/two_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="2"
+            android:textSize="25sp" />
+
+        <Button
+            android:id="@+id/three_btn"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1"
+            android:text="3"
+            android:textSize="25sp" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/pass_label"
+        android:layout_width="match_parent"
+        android:layout_height="100dp"
+        android:orientation="horizontal" >
+
+        <TextView
+            android:id="@+id/passcode_label"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center"
+            android:text="Enter passcode"
+            android:textSize="25sp" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="70dp"
+        android:layout_below="@+id/pass_label"
+        android:orientation="horizontal"
+        android:gravity="center" >
+
+        <EditText
+            android:id="@+id/passcode1"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:cursorVisible="false"
+            android:focusableInTouchMode="false"
+            android:hint="*"
+            android:inputType="numberPassword"
+            android:maxLength="1"
+            android:textSize="33sp" />
+
+        <EditText
+            android:id="@+id/passcode2"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:cursorVisible="false"
+            android:focusableInTouchMode="false"
+            android:hint="*"
+            android:inputType="numberPassword"
+            android:maxLength="1"
+            android:textSize="33sp" />
+
+        <EditText
+            android:id="@+id/passcode3"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:cursorVisible="false"
+            android:focusableInTouchMode="false"
+            android:hint="*"
+            android:inputType="numberPassword"
+            android:maxLength="1"
+            android:textSize="33sp" />
+
+        <EditText
+            android:id="@+id/passcode4"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:cursorVisible="false"
+            android:focusableInTouchMode="false"
+            android:hint="*"
+            android:inputType="numberPassword"
+            android:maxLength="1"
+            android:textSize="33sp" />
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java b/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java
new file mode 100644
index 00000000..94a46d9f
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java
@@ -0,0 +1,188 @@
+/*
+ * Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.passcode;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.os.Bundle;
+import android.os.Handler;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import org.gnucash.android.R;
+
+/**
+ * Soft numeric keyboard for lock screen and passcode preference.
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ */
+public class KeyboardFragment extends Fragment {
+
+    private TextView pass1;
+    private TextView pass2;
+    private TextView pass3;
+    private TextView pass4;
+
+    private int length = 0;
+
+    public interface OnPasscodeEnteredListener {
+        public void onPasscodeEntered(String pass);
+    }
+
+    private OnPasscodeEnteredListener listener;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+
+        View rootView = inflater.inflate(R.layout.fragment_numeric_keyboard, container, false);
+
+        pass1 = (TextView) rootView.findViewById(R.id.passcode1);
+        pass2 = (TextView) rootView.findViewById(R.id.passcode2);
+        pass3 = (TextView) rootView.findViewById(R.id.passcode3);
+        pass4 = (TextView) rootView.findViewById(R.id.passcode4);
+
+        rootView.findViewById(R.id.one_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("1");
+            }
+        });
+        rootView.findViewById(R.id.two_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("2");
+            }
+        });
+        rootView.findViewById(R.id.three_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("3");
+            }
+        });
+        rootView.findViewById(R.id.four_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("4");
+            }
+        });
+        rootView.findViewById(R.id.five_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("5");
+            }
+        });
+        rootView.findViewById(R.id.six_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("6");
+            }
+        });
+        rootView.findViewById(R.id.seven_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("7");
+            }
+        });
+        rootView.findViewById(R.id.eight_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("8");
+            }
+        });
+        rootView.findViewById(R.id.nine_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("9");
+            }
+        });
+        rootView.findViewById(R.id.zero_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                add("0");
+            }
+        });
+        rootView.findViewById(R.id.delete_btn).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                switch (length) {
+                    case 1:
+                        pass1.setText(null);
+                        length--;
+                        break;
+                    case 2:
+                        pass2.setText(null);
+                        length--;
+                        break;
+                    case 3:
+                        pass3.setText(null);
+                        length--;
+                        break;
+                    case 4:
+                        pass4.setText(null);
+                        length--;
+                }
+            }
+        });
+
+        return rootView;
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        try {
+            listener = (OnPasscodeEnteredListener) activity;
+        } catch (ClassCastException e) {
+            throw new ClassCastException(activity.toString() + " must implement "
+                    + KeyboardFragment.OnPasscodeEnteredListener.class);
+        }
+    }
+
+    private void add(String num) {
+        switch (length + 1) {
+            case 1:
+                pass1.setText(num);
+                length++;
+                break;
+            case 2:
+                pass2.setText(num);
+                length++;
+                break;
+            case 3:
+                pass3.setText(num);
+                length++;
+                break;
+            case 4:
+                pass4.setText(num);
+                length++;
+
+                new Handler().postDelayed(new Runnable() {
+                    public void run() {
+                        listener.onPasscodeEntered(pass1.getText().toString() + pass2.getText()
+                                + pass3.getText() + pass4.getText());
+                        pass1.setText(null);
+                        pass2.setText(null);
+                        pass3.setText(null);
+                        pass4.setText(null);
+                        length = 0;
+                    }
+                }, 500);
+        }
+    }
+
+}

From 00b53f881d97b7dc9fbb897844666ba20de3961e Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Wed, 6 Aug 2014 20:00:44 +0300
Subject: [PATCH 04/68] Enhanced passcode lock screen

---
 app/AndroidManifest.xml                            |  2 +-
 app/res/layout/passcode_lockscreen.xml             | 25 ++++------
 app/res/values/strings.xml                         |  1 -
 .../ui/passcode/PasscodeLockScreenActivity.java    | 53 ++++++----------------
 4 files changed, 24 insertions(+), 57 deletions(-)

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 78d468aa..48ee130d 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -50,7 +50,7 @@
         <activity
             android:name=".ui.passcode.PasscodeLockScreenActivity"
             android:noHistory="true"
-            android:windowSoftInputMode="stateAlwaysVisible">
+            android:windowSoftInputMode="stateAlwaysHidden">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
diff --git a/app/res/layout/passcode_lockscreen.xml b/app/res/layout/passcode_lockscreen.xml
index cf92b332..738ab242 100755
--- a/app/res/layout/passcode_lockscreen.xml
+++ b/app/res/layout/passcode_lockscreen.xml
@@ -16,22 +16,15 @@
 -->
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:gravity="center"
-    android:orientation="vertical" >
+              xmlns:tools="http://schemas.android.com/tools"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical" >
 
-    <TextView android:id="@+id/passcodeLabel"
-              android:layout_width="wrap_content"
-              android:layout_height="wrap_content"
-              android:text="@string/label_passcode" />
-
-    <EditText android:id="@+id/passcode"
-              android:layout_width="wrap_content"
-              android:layout_height="wrap_content"
-              android:hint=""
-              android:maxLength="4"
-              android:password="true"
-              android:inputType="number" />
+    <fragment android:id="@+id/listFragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              tools:layout="@layout/fragment_numeric_keyboard"
+              class="org.gnucash.android.ui.passcode.KeyboardFragment" />
 
 </LinearLayout>
\ No newline at end of file
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index c475d517..ebb863c8 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -29,7 +29,6 @@
     <string name="btn_save">Save</string>
     <string name="label_passcode">Enter Passcode</string>
     <string name="toast_wrong_passcode">Wrong passcode, please try again</string>
-    <string name="toast_enter_full_passcode">You didnt enter the full passcode</string>
     <string name="label_transaction_name">Description</string>
     <string name="label_transaction_amount">Amount</string>
     <string name="title_add_transaction">New transaction</string>
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
index 17fafdb6..fe5e6787 100644
--- a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
@@ -37,57 +37,32 @@
  * Activity for displaying and managing the passcode lock screen.
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
-public class PasscodeLockScreenActivity extends Activity {
+public class PasscodeLockScreenActivity extends Activity implements KeyboardFragment.OnPasscodeEnteredListener {
 
     private static final String TAG = "PasscodeLockScreenActivity";
+    private SharedPreferences sharedPreferences;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.passcode_lockscreen);
 
-        final SharedPreferences sharedPreferences = PreferenceManager
-                .getDefaultSharedPreferences(getApplicationContext());
-
+        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         if (!sharedPreferences.getBoolean(UxArgument.ENABLED_PASSCODE, false)) {
+            Log.i(TAG, "Passcode disabled");
             startActivity(new Intent(this, AccountsActivity.class));
         }
+    }
 
-        final EditText passcodeEditText = (EditText) findViewById(R.id.passcode);
-        passcodeEditText.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void afterTextChanged(Editable editable) {
-                String pass = editable.toString();
-                String passcode = sharedPreferences.getString(UxArgument.PASSCODE, "");
-                Log.d(TAG, passcode);
-                if (pass.length() == 4) {
-                    if (pass.equals(passcode)) {
-                        startActivity(new Intent(getApplicationContext(), AccountsActivity.class));
-                    } else {
-                        Toast.makeText(getApplicationContext(),
-                                R.string.toast_wrong_passcode, Toast.LENGTH_SHORT).show();
-                        passcodeEditText.getText().clear();
-                    }
-                }
-            }
-            @Override
-            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {}
-            @Override
-            public void onTextChanged(CharSequence s, int start, int before, int count) {}
-        });
-
-        passcodeEditText.setOnKeyListener(new View.OnKeyListener() {
-            @Override
-            public boolean onKey(View v, int keyCode, KeyEvent event) {
-                if ((event.getAction() == KeyEvent.ACTION_DOWN)
-                        && (keyCode == KeyEvent.KEYCODE_ENTER)) {
-                    Toast.makeText(getApplicationContext(),
-                            R.string.toast_enter_full_passcode, Toast.LENGTH_LONG).show();
-                }
-                return false;
-            }
-        });
-
+    @Override
+    public void onPasscodeEntered(String pass) {
+        String passcode = sharedPreferences.getString(UxArgument.PASSCODE, "");
+        Log.d(TAG, "Passcode: " + passcode);
+        if (passcode.equals(pass)) {
+            startActivity(new Intent(this, AccountsActivity.class));
+        } else {
+            Toast.makeText(this, R.string.toast_wrong_passcode, Toast.LENGTH_SHORT).show();
+        }
     }
 
 }

From 3672036fa16ab77d370ea8e2144e409375e55cf0 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Wed, 6 Aug 2014 21:23:16 +0300
Subject: [PATCH 05/68] Closed #39. Implemented passcode lock screen feature

---
 app/AndroidManifest.xml                            |  1 +
 app/res/values/strings.xml                         |  3 ++
 app/res/xml/fragment_passcode_preferences.xml      |  9 ++--
 .../ui/passcode/PasscodePreferenceActivity.java    | 59 ++++++++++++++++++++++
 .../ui/settings/PasscodePreferenceFragment.java    | 33 +++++++++---
 5 files changed, 91 insertions(+), 14 deletions(-)
 create mode 100644 app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 48ee130d..61a7a671 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -61,6 +61,7 @@
             android:label="@string/app_name">
         </activity>
         <activity android:name=".ui.settings.SettingsActivity"/>
+        <activity android:name=".ui.passcode.PasscodePreferenceActivity" />
         <activity android:name=".ui.transaction.TransactionsActivity"
             android:configChanges="orientation|screenSize">
         </activity>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index ebb863c8..dfb6b874 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -29,6 +29,9 @@
     <string name="btn_save">Save</string>
     <string name="label_passcode">Enter Passcode</string>
     <string name="toast_wrong_passcode">Wrong passcode, please try again</string>
+    <string name="toast_passcode_set">Passcode set</string>
+    <string name="toast_confirm_passcode">Please confirm your passcode</string>
+    <string name="toast_invalid_passcode_confirmation">Invalid passcode confirmation. Please try again</string>
     <string name="label_transaction_name">Description</string>
     <string name="label_transaction_amount">Amount</string>
     <string name="title_add_transaction">New transaction</string>
diff --git a/app/res/xml/fragment_passcode_preferences.xml b/app/res/xml/fragment_passcode_preferences.xml
index 09484fe9..027aa088 100755
--- a/app/res/xml/fragment_passcode_preferences.xml
+++ b/app/res/xml/fragment_passcode_preferences.xml
@@ -19,11 +19,8 @@
     <PreferenceCategory android:title="@string/title_passcode_preferences"/>
     <CheckBoxPreference android:title="@string/title_enable_passcode"
                         android:key="@string/key_enable_passcode" />
-    <EditTextPreference android:title="@string/title_change_passcode"
-                        android:key="@string/key_change_passcode"
-                        android:dependency="@string/key_enable_passcode"
-                        android:inputType="number"
-                        android:password="true"
-                        android:maxLength="4" />
+    <Preference android:key="@string/key_change_passcode"
+                android:title="@string/title_change_passcode"
+                android:dependency="@string/key_enable_passcode" />
 
 </PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java
new file mode 100644
index 00000000..6b290c12
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2014 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.passcode;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.gnucash.android.R;
+import org.gnucash.android.ui.UxArgument;
+
+/**
+ * Activity for entering and confirming passcode
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ */
+public class PasscodePreferenceActivity extends Activity implements KeyboardFragment.OnPasscodeEnteredListener {
+
+    private boolean reenter = false;
+    private String passcode;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.passcode_lockscreen);
+    }
+
+    @Override
+    public void onPasscodeEntered(String pass) {
+        if (reenter) {
+            if (passcode.equals(pass)) {
+                setResult(RESULT_OK, new Intent().putExtra(UxArgument.PASSCODE, pass));
+                finish();
+            } else {
+                Toast.makeText(this, R.string.toast_invalid_passcode_confirmation, Toast.LENGTH_LONG).show();
+            }
+        } else {
+            passcode = pass;
+            reenter = true;
+            ((TextView) findViewById(R.id.passcode_label)).setText(R.string.toast_confirm_passcode);
+            Toast.makeText(this, R.string.toast_confirm_passcode, Toast.LENGTH_SHORT).show();
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
index ac6364f1..4e334fe7 100644
--- a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
@@ -16,18 +16,22 @@
 
 package org.gnucash.android.ui.settings;
 
+import android.app.Activity;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceChangeListener;
 import android.preference.PreferenceFragment;
 import android.preference.PreferenceManager;
+import android.widget.Toast;
 
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 
 import org.gnucash.android.R;
 import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.passcode.PasscodePreferenceActivity;
 
 /**
  * Fragment for configuring passcode to the application
@@ -35,6 +39,10 @@
  */
 public class PasscodePreferenceFragment extends PreferenceFragment {
 
+    private static final int REQUEST_CODE = 1;
+
+    private SharedPreferences.Editor editor;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -50,11 +58,10 @@ public void onCreate(Bundle savedInstanceState) {
     public void onResume() {
         super.onResume();
 
-        final SharedPreferences.Editor editor = PreferenceManager
-                .getDefaultSharedPreferences(getActivity().getApplicationContext()).edit();
+        editor = PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()).edit();
+
 
-        final String keyEnablePasscode = getString(R.string.key_enable_passcode);
-        findPreference(keyEnablePasscode)
+        findPreference(getString(R.string.key_enable_passcode))
                 .setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
                     @Override
                     public boolean onPreferenceChange(Preference preference, Object newValue) {
@@ -64,15 +71,25 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                     }
                 });
         findPreference(getString(R.string.key_change_passcode))
-                .setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+                .setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
                     @Override
-                    public boolean onPreferenceChange(Preference preference, Object newValue) {
-                        editor.putString(UxArgument.PASSCODE, newValue.toString());
-                        editor.commit();
+                    public boolean onPreferenceClick(Preference preference) {
+                        startActivityForResult(
+                                new Intent(getActivity(), PasscodePreferenceActivity.class), REQUEST_CODE);
                         return true;
                     }
                 });
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
 
+        if (resultCode == Activity.RESULT_OK && requestCode == REQUEST_CODE && data!= null) {
+            editor.putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE));
+            editor.commit();
+            Toast.makeText(getActivity(), R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
+        }
     }
 
 }

From a65edd5f51b005ac3c5867590360b1687bba897c Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Thu, 7 Aug 2014 20:49:39 +0300
Subject: [PATCH 06/68] Added support for older devices

---
 app/res/layout/fragment_numeric_keyboard.xml       | 12 +++++---
 .../android/ui/passcode/KeyboardFragment.java      |  5 ++--
 .../ui/passcode/PasscodeLockScreenActivity.java    | 11 +++-----
 .../ui/passcode/PasscodePreferenceActivity.java    |  6 ++--
 .../ui/settings/PasscodePreferenceFragment.java    |  9 ++++--
 .../android/ui/settings/SettingsActivity.java      | 32 ++++++++++++++++++++--
 6 files changed, 55 insertions(+), 20 deletions(-)

diff --git a/app/res/layout/fragment_numeric_keyboard.xml b/app/res/layout/fragment_numeric_keyboard.xml
index 869a455b..e4a007df 100644
--- a/app/res/layout/fragment_numeric_keyboard.xml
+++ b/app/res/layout/fragment_numeric_keyboard.xml
@@ -185,7 +185,8 @@
             android:cursorVisible="false"
             android:focusableInTouchMode="false"
             android:hint="*"
-            android:inputType="numberPassword"
+            android:inputType="textPassword|number"
+            android:password="true"
             android:maxLength="1"
             android:textSize="33sp" />
 
@@ -196,7 +197,8 @@
             android:cursorVisible="false"
             android:focusableInTouchMode="false"
             android:hint="*"
-            android:inputType="numberPassword"
+            android:inputType="textPassword|number"
+            android:password="true"
             android:maxLength="1"
             android:textSize="33sp" />
 
@@ -207,7 +209,8 @@
             android:cursorVisible="false"
             android:focusableInTouchMode="false"
             android:hint="*"
-            android:inputType="numberPassword"
+            android:inputType="textPassword|number"
+            android:password="true"
             android:maxLength="1"
             android:textSize="33sp" />
 
@@ -218,7 +221,8 @@
             android:cursorVisible="false"
             android:focusableInTouchMode="false"
             android:hint="*"
-            android:inputType="numberPassword"
+            android:inputType="textPassword|number"
+            android:password="true"
             android:maxLength="1"
             android:textSize="33sp" />
 
diff --git a/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java b/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java
index 94a46d9f..bcfddb23 100644
--- a/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java
+++ b/app/src/org/gnucash/android/ui/passcode/KeyboardFragment.java
@@ -17,7 +17,6 @@
 package org.gnucash.android.ui.passcode;
 
 import android.app.Activity;
-import android.app.Fragment;
 import android.os.Bundle;
 import android.os.Handler;
 import android.view.LayoutInflater;
@@ -25,13 +24,15 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import com.actionbarsherlock.app.SherlockFragment;
+
 import org.gnucash.android.R;
 
 /**
  * Soft numeric keyboard for lock screen and passcode preference.
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
-public class KeyboardFragment extends Fragment {
+public class KeyboardFragment extends SherlockFragment {
 
     private TextView pass1;
     private TextView pass2;
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
index fe5e6787..1ffc206a 100644
--- a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
@@ -16,19 +16,15 @@
 
 package org.gnucash.android.ui.passcode;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
-import android.text.Editable;
-import android.text.TextWatcher;
 import android.util.Log;
-import android.view.KeyEvent;
-import android.view.View;
-import android.widget.EditText;
 import android.widget.Toast;
 
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+
 import org.gnucash.android.R;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsActivity;
@@ -37,7 +33,8 @@
  * Activity for displaying and managing the passcode lock screen.
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
-public class PasscodeLockScreenActivity extends Activity implements KeyboardFragment.OnPasscodeEnteredListener {
+public class PasscodeLockScreenActivity extends SherlockFragmentActivity
+        implements KeyboardFragment.OnPasscodeEnteredListener {
 
     private static final String TAG = "PasscodeLockScreenActivity";
     private SharedPreferences sharedPreferences;
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java
index 6b290c12..7dc7e43d 100644
--- a/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodePreferenceActivity.java
@@ -16,12 +16,13 @@
 
 package org.gnucash.android.ui.passcode;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+
 import org.gnucash.android.R;
 import org.gnucash.android.ui.UxArgument;
 
@@ -29,7 +30,8 @@
  * Activity for entering and confirming passcode
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
-public class PasscodePreferenceActivity extends Activity implements KeyboardFragment.OnPasscodeEnteredListener {
+public class PasscodePreferenceActivity extends SherlockFragmentActivity
+        implements KeyboardFragment.OnPasscodeEnteredListener {
 
     private boolean reenter = false;
     private String passcode;
diff --git a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
index 4e334fe7..599650b0 100644
--- a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
@@ -39,7 +39,10 @@
  */
 public class PasscodePreferenceFragment extends PreferenceFragment {
 
-    private static final int REQUEST_CODE = 1;
+    /**
+     * * Request code for retrieving passcode to store
+     */
+    public static final int PASSCODE_REQUEST_CODE = 2;
 
     private SharedPreferences.Editor editor;
 
@@ -75,7 +78,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                     @Override
                     public boolean onPreferenceClick(Preference preference) {
                         startActivityForResult(
-                                new Intent(getActivity(), PasscodePreferenceActivity.class), REQUEST_CODE);
+                                new Intent(getActivity(), PasscodePreferenceActivity.class), PASSCODE_REQUEST_CODE);
                         return true;
                     }
                 });
@@ -85,7 +88,7 @@ public boolean onPreferenceClick(Preference preference) {
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
 
-        if (resultCode == Activity.RESULT_OK && requestCode == REQUEST_CODE && data!= null) {
+        if (resultCode == Activity.RESULT_OK && requestCode == PASSCODE_REQUEST_CODE && data!= null) {
             editor.putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE));
             editor.commit();
             Toast.makeText(getActivity(), R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 106d943d..d816d376 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -40,7 +40,9 @@
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Transaction;
+import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.passcode.PasscodePreferenceActivity;
 
 import java.io.*;
 import java.util.ArrayList;
@@ -51,7 +53,7 @@
 /**
  * Activity for displaying settings and information about the application
  * @author Ngewi Fet <ngewif@gmail.com>
- *
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
 public class SettingsActivity extends SherlockPreferenceActivity implements OnPreferenceChangeListener, Preference.OnPreferenceClickListener{
 
@@ -111,6 +113,7 @@ protected void onCreate(Bundle savedInstanceState) {
 			addPreferencesFromResource(R.xml.fragment_general_preferences);
             addPreferencesFromResource(R.xml.fragment_account_preferences);
 			addPreferencesFromResource(R.xml.fragment_transaction_preferences);
+            addPreferencesFromResource(R.xml.fragment_passcode_preferences);
 			addPreferencesFromResource(R.xml.fragment_about_preferences);
 			setDefaultCurrencyListener();
 			SharedPreferences manager = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
@@ -132,6 +135,12 @@ protected void onCreate(Bundle savedInstanceState) {
 
             pref = findPreference(getString(R.string.key_restore_backup));
             pref.setOnPreferenceClickListener(this);
+
+            pref = findPreference(getString(R.string.key_change_passcode));
+            pref.setOnPreferenceClickListener(this);
+
+            pref = findPreference(getString(R.string.key_enable_passcode));
+            pref.setOnPreferenceChangeListener(this);
 		}
 	}
 
@@ -168,7 +177,12 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
 		preference.setSummary(newValue.toString());
 		if (preference.getKey().equals(getString(R.string.key_default_currency))){
 			Money.DEFAULT_CURRENCY_CODE = newValue.toString();
-		}
+		} else if (preference.getKey().equals(getString(R.string.key_enable_passcode))) {
+            Editor editor = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit();
+            editor.putBoolean(UxArgument.ENABLED_PASSCODE, (Boolean) newValue);
+            editor.commit();
+        }
+
 		return true;
 	}
 	
@@ -245,6 +259,12 @@ public boolean onPreferenceClick(Preference preference) {
             return true;
         }
 
+        if (key.equals(getString(R.string.key_change_passcode))){
+            startActivityForResult(new Intent(this, PasscodePreferenceActivity.class),
+                    PasscodePreferenceFragment.PASSCODE_REQUEST_CODE);
+            return true;
+        }
+
         return false;
     }
 
@@ -307,6 +327,14 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                 }
 
                 break;
+            case PasscodePreferenceFragment.PASSCODE_REQUEST_CODE:
+                if (data!= null) {
+                    Editor editor = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit();
+                    editor.putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE));
+                    editor.commit();
+                    Toast.makeText(getApplicationContext(), R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
+                }
+                break;
         }
     }
 }

From ae8145f947cfd8c0b662243e680db70372c1f0ca Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Tue, 12 Aug 2014 17:59:53 +0300
Subject: [PATCH 07/68] Prevent from enabling passlock without entering a
 passcode

---
 .../ui/settings/PasscodePreferenceFragment.java    | 18 +++++++---
 .../android/ui/settings/SettingsActivity.java      | 40 ++++++++++++++++------
 2 files changed, 42 insertions(+), 16 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
index 599650b0..2c9ca704 100644
--- a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
@@ -20,6 +20,7 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.preference.CheckBoxPreference;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceChangeListener;
 import android.preference.PreferenceFragment;
@@ -45,6 +46,7 @@
     public static final int PASSCODE_REQUEST_CODE = 2;
 
     private SharedPreferences.Editor editor;
+    private CheckBoxPreference checkBoxPreference;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -62,12 +64,15 @@ public void onResume() {
         super.onResume();
 
         editor = PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()).edit();
+        final Intent intent = new Intent(getActivity(), PasscodePreferenceActivity.class);
 
-
-        findPreference(getString(R.string.key_enable_passcode))
-                .setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
+        checkBoxPreference = (CheckBoxPreference) findPreference(getString(R.string.key_enable_passcode));
+        checkBoxPreference.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
                     @Override
                     public boolean onPreferenceChange(Preference preference, Object newValue) {
+                        if ((Boolean) newValue) {
+                            startActivityForResult(intent, PASSCODE_REQUEST_CODE);
+                        }
                         editor.putBoolean(UxArgument.ENABLED_PASSCODE, (Boolean) newValue);
                         editor.commit();
                         return true;
@@ -77,8 +82,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 .setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
                     @Override
                     public boolean onPreferenceClick(Preference preference) {
-                        startActivityForResult(
-                                new Intent(getActivity(), PasscodePreferenceActivity.class), PASSCODE_REQUEST_CODE);
+                        startActivityForResult(intent, PASSCODE_REQUEST_CODE);
                         return true;
                     }
                 });
@@ -92,7 +96,11 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
             editor.putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE));
             editor.commit();
             Toast.makeText(getActivity(), R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
+        } else {
+            editor.putBoolean(UxArgument.ENABLED_PASSCODE, false);
+            checkBoxPreference.setChecked(false);
         }
+        editor.commit();
     }
 
 }
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index d816d376..7527c6bb 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -23,28 +23,34 @@
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.os.Build;
 import android.os.Bundle;
+import android.preference.CheckBoxPreference;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceChangeListener;
 import android.preference.PreferenceManager;
 import android.util.Log;
 import android.widget.Toast;
+
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
 import com.actionbarsherlock.view.MenuItem;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.passcode.PasscodePreferenceActivity;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Timer;
@@ -174,13 +180,18 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	
 	@Override
  	public boolean onPreferenceChange(Preference preference, Object newValue) {
-		preference.setSummary(newValue.toString());
 		if (preference.getKey().equals(getString(R.string.key_default_currency))){
 			Money.DEFAULT_CURRENCY_CODE = newValue.toString();
+            preference.setSummary(newValue.toString());
 		} else if (preference.getKey().equals(getString(R.string.key_enable_passcode))) {
-            Editor editor = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit();
-            editor.putBoolean(UxArgument.ENABLED_PASSCODE, (Boolean) newValue);
-            editor.commit();
+            if ((Boolean) newValue) {
+                startActivityForResult(new Intent(this, PasscodePreferenceActivity.class),
+                        PasscodePreferenceFragment.PASSCODE_REQUEST_CODE);
+            }
+            PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
+                    .edit()
+                    .putBoolean(UxArgument.ENABLED_PASSCODE, (Boolean) newValue)
+                    .commit();
         }
 
 		return true;
@@ -313,6 +324,13 @@ public void importMostRecentBackup(){
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_CANCELED){
+            if (requestCode == PasscodePreferenceFragment.PASSCODE_REQUEST_CODE) {
+                PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
+                        .edit()
+                        .putBoolean(UxArgument.ENABLED_PASSCODE, false)
+                        .commit();
+                ((CheckBoxPreference) findPreference(getString(R.string.key_enable_passcode))).setChecked(false);
+            }
             return;
         }
 
@@ -325,13 +343,13 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                     e.printStackTrace();
                     Toast.makeText(this, R.string.toast_error_importing_accounts, Toast.LENGTH_SHORT).show();
                 }
-
                 break;
             case PasscodePreferenceFragment.PASSCODE_REQUEST_CODE:
                 if (data!= null) {
-                    Editor editor = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit();
-                    editor.putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE));
-                    editor.commit();
+                    PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
+                            .edit()
+                            .putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE))
+                            .commit();
                     Toast.makeText(getApplicationContext(), R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
                 }
                 break;

From 144d11aead7b85bcf516319e79961d8b902f0aca Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Tue, 12 Aug 2014 22:16:26 +0300
Subject: [PATCH 08/68] Implemented the passcode lock with handling resuming

---
 app/AndroidManifest.xml                            | 10 ++---
 .../gnucash/android/app/GnuCashApplication.java    | 10 +++++
 app/src/org/gnucash/android/ui/UxArgument.java     |  5 +++
 .../android/ui/account/AccountsActivity.java       |  8 ++--
 .../android/ui/passcode/PassLockActivity.java      | 51 ++++++++++++++++++++++
 .../ui/passcode/PasscodeLockScreenActivity.java    | 30 ++++++++-----
 .../ui/settings/PasscodePreferenceFragment.java    |  1 -
 .../android/ui/settings/SettingsActivity.java      |  6 +++
 .../ui/transaction/TransactionsActivity.java       | 12 ++---
 9 files changed, 107 insertions(+), 26 deletions(-)
 create mode 100644 app/src/org/gnucash/android/ui/passcode/PassLockActivity.java

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 61a7a671..f2c23526 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -48,17 +48,17 @@
         android:label="@string/app_name" 
         android:theme="@style/Theme.Sherlock.Light.DarkActionBar">
         <activity
-            android:name=".ui.passcode.PasscodeLockScreenActivity"
-            android:noHistory="true"
-            android:windowSoftInputMode="stateAlwaysHidden">
+            android:name=".ui.account.AccountsActivity"
+            android:label="@string/app_name">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
         <activity
-            android:name=".ui.account.AccountsActivity"
-            android:label="@string/app_name">
+            android:name=".ui.passcode.PasscodeLockScreenActivity"
+            android:noHistory="true"
+            android:windowSoftInputMode="stateAlwaysHidden">
         </activity>
         <activity android:name=".ui.settings.SettingsActivity"/>
         <activity android:name=".ui.passcode.PasscodePreferenceActivity" />
diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index 9a91f2e8..e556d9a3 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -32,6 +32,16 @@
  */
 public class GnuCashApplication extends Application{
 
+    /**
+     * Lifetime of passcode session
+     */
+    public static final long SESSION_TIMEOUT = 5 * 1000;
+
+    /**
+     * Init time of passcode session
+     */
+    public static long PASSCODE_SESSION_INIT_TIME = 0l;
+
     private static Context context;
 
     public void onCreate(){
diff --git a/app/src/org/gnucash/android/ui/UxArgument.java b/app/src/org/gnucash/android/ui/UxArgument.java
index abff1fa7..0bc60732 100644
--- a/app/src/org/gnucash/android/ui/UxArgument.java
+++ b/app/src/org/gnucash/android/ui/UxArgument.java
@@ -63,6 +63,11 @@
      */
     public static final String AMOUNT_STRING = "starting_amount";
 
+    /**
+     * Class caller, which will be launched after the unlocking
+     */
+    public static final String PASSCODE_CLASS_CALLER = "passcode_class_caller";
+
     //prevent initialization of instances of this class
     private UxArgument(){
         //prevent even the native class from calling the ctor
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index 485ecc9b..5589d31c 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -36,21 +36,23 @@
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
-import com.actionbarsherlock.app.SherlockFragmentActivity;
+
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
+import org.gnucash.android.ui.passcode.PassLockActivity;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transaction.ScheduledTransactionsListFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
+import org.gnucash.android.ui.util.Refreshable;
 
 import java.io.FileNotFoundException;
 import java.io.InputStream;
@@ -61,7 +63,7 @@
  * @author Ngewi Fet <ngewif@gmail.com>
  * 
  */
-public class AccountsActivity extends SherlockFragmentActivity implements OnAccountClickedListener {
+public class AccountsActivity extends PassLockActivity implements OnAccountClickedListener {
 
 	/**
 	 * Tag used for identifying the account list fragment when it is added to this activity
diff --git a/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java b/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
new file mode 100644
index 00000000..3972a2ac
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
@@ -0,0 +1,51 @@
+package org.gnucash.android.ui.passcode;
+
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+
+import com.actionbarsherlock.app.SherlockFragmentActivity;
+
+import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.ui.UxArgument;
+
+/**
+ * This activity used as the parent class for enabling passcode lock
+ *
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ * @see org.gnucash.android.ui.account.AccountsActivity
+ * @see org.gnucash.android.ui.transaction.TransactionsActivity
+ */
+public class PassLockActivity extends SherlockFragmentActivity {
+
+    private static final String TAG = "PassLockActivity";
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        if (sharedPreferences.getBoolean(UxArgument.ENABLED_PASSCODE, false) && !isSessionActive()) {
+            startActivity(new Intent(this, PasscodeLockScreenActivity.class)
+                    .setAction(getIntent().getAction())
+                    .putExtra(UxArgument.PASSCODE_CLASS_CALLER, this.getClass().getName())
+                    .putExtra(UxArgument.SELECTED_ACCOUNT_ID, getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_ID, 0L))
+            );
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        GnuCashApplication.PASSCODE_SESSION_INIT_TIME = System.currentTimeMillis();
+    }
+
+    /**
+     * @return {@code true} if passcode session is active, and {@code false} otherwise
+     */
+    private boolean isSessionActive() {
+        return System.currentTimeMillis() - GnuCashApplication.PASSCODE_SESSION_INIT_TIME
+                < GnuCashApplication.SESSION_TIMEOUT ? true : false;
+    }
+
+}
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
index 1ffc206a..9bac9665 100644
--- a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
@@ -17,7 +17,6 @@
 package org.gnucash.android.ui.passcode;
 
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.util.Log;
@@ -26,8 +25,8 @@
 import com.actionbarsherlock.app.SherlockFragmentActivity;
 
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.ui.UxArgument;
-import org.gnucash.android.ui.account.AccountsActivity;
 
 /**
  * Activity for displaying and managing the passcode lock screen.
@@ -37,29 +36,38 @@
         implements KeyboardFragment.OnPasscodeEnteredListener {
 
     private static final String TAG = "PasscodeLockScreenActivity";
-    private SharedPreferences sharedPreferences;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.passcode_lockscreen);
-
-        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
-        if (!sharedPreferences.getBoolean(UxArgument.ENABLED_PASSCODE, false)) {
-            Log.i(TAG, "Passcode disabled");
-            startActivity(new Intent(this, AccountsActivity.class));
-        }
     }
 
     @Override
     public void onPasscodeEntered(String pass) {
-        String passcode = sharedPreferences.getString(UxArgument.PASSCODE, "");
+        String passcode = PreferenceManager.getDefaultSharedPreferences(getApplicationContext())
+                .getString(UxArgument.PASSCODE, "");
         Log.d(TAG, "Passcode: " + passcode);
+
         if (passcode.equals(pass)) {
-            startActivity(new Intent(this, AccountsActivity.class));
+            GnuCashApplication.PASSCODE_SESSION_INIT_TIME = System.currentTimeMillis();
+            startActivity(new Intent()
+                    .setClassName(this, getIntent().getStringExtra(UxArgument.PASSCODE_CLASS_CALLER))
+                    .setAction(getIntent().getAction())
+                    .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
+                    .putExtra(UxArgument.SELECTED_ACCOUNT_ID, getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_ID, 0L))
+            );
         } else {
             Toast.makeText(this, R.string.toast_wrong_passcode, Toast.LENGTH_SHORT).show();
         }
     }
 
+    @Override
+    public void onBackPressed() {
+        GnuCashApplication.PASSCODE_SESSION_INIT_TIME = System.currentTimeMillis() - GnuCashApplication.SESSION_TIMEOUT;
+        startActivity(new Intent(Intent.ACTION_MAIN)
+                .addCategory(Intent.CATEGORY_HOME)
+                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
+    }
+
 }
diff --git a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
index 2c9ca704..52744e07 100644
--- a/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/PasscodePreferenceFragment.java
@@ -94,7 +94,6 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
 
         if (resultCode == Activity.RESULT_OK && requestCode == PASSCODE_REQUEST_CODE && data!= null) {
             editor.putString(UxArgument.PASSCODE, data.getStringExtra(UxArgument.PASSCODE));
-            editor.commit();
             Toast.makeText(getActivity(), R.string.toast_passcode_set, Toast.LENGTH_SHORT).show();
         } else {
             editor.putBoolean(UxArgument.ENABLED_PASSCODE, false);
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 7527c6bb..1a2b3d2e 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -158,6 +158,12 @@ protected void onResume() {
     }
 
     @Override
+    protected void onPause() {
+        super.onPause();
+        GnuCashApplication.PASSCODE_SESSION_INIT_TIME = System.currentTimeMillis();
+    }
+
+    @Override
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
 		case android.R.id.home:		
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 56474abe..1ef5fe2f 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -35,33 +35,33 @@
 import android.view.inputmethod.InputMethodManager;
 import android.widget.SpinnerAdapter;
 import android.widget.TextView;
+
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.ActionBar.OnNavigationListener;
-import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
+
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.Account;
-import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseAdapter;
-import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.account.AccountsListFragment;
+import org.gnucash.android.ui.passcode.PassLockActivity;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.OnTransactionClickedListener;
+import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
 /**
  * Activity for displaying, creating and editing transactions
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class TransactionsActivity extends SherlockFragmentActivity implements
+public class TransactionsActivity extends PassLockActivity implements
         Refreshable, OnAccountClickedListener, OnTransactionClickedListener{
 
 	/**

From afbc58883af47265ff1521dfc68565943af75206 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 26 Aug 2014 14:19:59 +0800
Subject: [PATCH 09/68] Support for zipped xml file

Will automatically detect if the file is zipped or not
---
 app/src/org/gnucash/android/importer/GncXmlImporter.java | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/importer/GncXmlImporter.java b/app/src/org/gnucash/android/importer/GncXmlImporter.java
index 068322d3..58e58d3f 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImporter.java
@@ -25,8 +25,10 @@
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 import java.io.BufferedInputStream;
+import java.io.PushbackInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.zip.GZIPInputStream;
 
 /**
  * Importer for Gnucash XML files and GNCA (GnuCash Android) XML files
@@ -66,7 +68,15 @@ public static void parse(Context context, InputStream gncXmlInputStream) throws
         SAXParser sp = spf.newSAXParser();
         XMLReader xr = sp.getXMLReader();
 
-        BufferedInputStream bos = new BufferedInputStream(gncXmlInputStream);
+        BufferedInputStream bos;
+        PushbackInputStream pb = new PushbackInputStream( gncXmlInputStream, 2 ); //we need a pushbackstream to look ahead
+        byte [] signature = new byte[2];
+        pb.read( signature ); //read the signature
+        pb.unread( signature ); //push back the signature to the stream
+        if( signature[ 0 ] == (byte) 0x1f && signature[ 1 ] == (byte) 0x8b ) //check if matches standard gzip magic number
+            bos = new BufferedInputStream(new GZIPInputStream(pb));
+        else
+            bos = new BufferedInputStream(pb);
 
         //TODO: Set an error handler which can log errors
 

From 498bf48ba61cba71b0a88d7615f613d802494c6c Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 29 Aug 2014 21:53:07 +0800
Subject: [PATCH 10/68] Bulk import of GnuCash XML file

Reduce import time to about 1/3 .
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  71 +++++++++++---
 .../org/gnucash/android/db/SplitsDbAdapter.java    |  59 ++++++++++--
 .../gnucash/android/db/TransactionsDbAdapter.java  |  64 +++++++++++--
 .../gnucash/android/importer/GncXmlHandler.java    | 102 +++++++++++++++++++--
 .../gnucash/android/importer/GncXmlImporter.java   |   6 +-
 5 files changed, 263 insertions(+), 39 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index adc13d79..ed3df1a0 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -21,6 +21,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
@@ -86,17 +87,9 @@ public long addAccount(Account account){
         contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID,           account.getParentUID());
         contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
 
-        long rowId = -1;
-		if ((rowId = getAccountID(account.getUID())) > 0){
-			//if account already exists, then just update
-			Log.d(TAG, "Updating existing account");
-			mDb.update(AccountEntry.TABLE_NAME, contentValues,
-                    AccountEntry._ID + " = " + rowId, null);
-		} else {
-			Log.d(TAG, "Adding new account to db");
-			rowId = mDb.insert(AccountEntry.TABLE_NAME, null, contentValues);
-		}
-		
+        Log.d(TAG, "Replace account to db");
+        long rowId =  mDb.replace(AccountEntry.TABLE_NAME, null, contentValues);
+
 		//now add transactions if there are any
 		if (rowId > 0){
             //update the fully qualified account name
@@ -109,6 +102,62 @@ public long addAccount(Account account){
 	}
 
     /**
+     * Adds some accounts to the database.
+     * If an account already exists in the database with the same unique ID,
+     * then just update that account. This function will NOT try to determine the full name
+     * of the accounts inserted, full names should be generated prior to the insert.
+     * All or none of the accounts will be inserted;
+     * @param accountList {@link Account} to be inserted to database
+     * @return number of rows inserted
+     */
+    public long bulkAddAccounts(List<Account> accountList){
+        long nRow = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + AccountEntry.TABLE_NAME + " ( "
+                    + AccountEntry.COLUMN_UID 	            + " , "
+                    + AccountEntry.COLUMN_NAME 	            + " , "
+                    + AccountEntry.COLUMN_TYPE              + " , "
+                    + AccountEntry.COLUMN_CURRENCY          + " , "
+                    + AccountEntry.COLUMN_COLOR_CODE        + " , "
+                    + AccountEntry.COLUMN_FAVORITE 		    + " , "
+                    + AccountEntry.COLUMN_FULL_NAME 	    + " , "
+                    + AccountEntry.COLUMN_PLACEHOLDER           + " , "
+                    + AccountEntry.COLUMN_PARENT_ACCOUNT_UID    + " , "
+                    + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID   + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");
+            for (Account account:accountList) {
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1, account.getUID());
+                replaceStatement.bindString(2, account.getName());
+                replaceStatement.bindString(3, account.getAccountType().name());
+                replaceStatement.bindString(4, account.getCurrency().getCurrencyCode());
+                if (account.getColorHexCode() != null) {
+                    replaceStatement.bindString(5, account.getColorHexCode());
+                }
+                replaceStatement.bindLong(6, account.isFavorite() ? 1 : 0);
+                replaceStatement.bindString(7, account.getFullName());
+                replaceStatement.bindLong(8, account.isPlaceholderAccount() ? 1 : 0);
+                if (account.getParentUID() != null) {
+                    replaceStatement.bindString(9, account.getParentUID());
+                }
+                if (account.getDefaultTransferAccountUID() != null) {
+                    replaceStatement.bindString(10, account.getDefaultTransferAccountUID());
+                }
+                Log.d(TAG, "Replacing account in db");
+                replaceStatement.execute();
+                nRow ++;
+            }
+            mDb.setTransactionSuccessful();
+        }
+        catch (Exception e){
+            nRow = 0;
+        }
+        finally {
+            mDb.endTransaction();
+        }
+        return nRow;
+    }
+    /**
      * Marks all transactions for a given account as exported
      * @param accountUID Unique ID of the record to be marked as exported
      * @return Number of records marked as exported
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index 591ae754..d6c72dec 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -21,6 +21,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
@@ -64,16 +65,8 @@ public long addSplit(Split split){
         contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, split.getAccountUID());
         contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, split.getTransactionUID());
 
-        long rowId = -1;
-        if ((rowId = getID(split.getUID())) > 0){
-            //if split already exists, then just update
-            Log.d(TAG, "Updating existing transaction split");
-            mDb.update(SplitEntry.TABLE_NAME, contentValues,
-                    SplitEntry._ID + " = " + rowId, null);
-        } else {
-            Log.d(TAG, "Adding new transaction split to db");
-            rowId = mDb.insert(SplitEntry.TABLE_NAME, null, contentValues);
-        }
+        Log.d(TAG, "Replace transaction split in db");
+        long rowId = mDb.replace(SplitEntry.TABLE_NAME, null, contentValues);
 
         //when a split is updated, we want mark the transaction as not exported
         updateRecord(TransactionEntry.TABLE_NAME, getTransactionID(split.getTransactionUID()),
@@ -82,6 +75,52 @@ public long addSplit(Split split){
     }
 
     /**
+     * Adds some splits to the database.
+     * If the split already exists, then it is simply updated.
+     * This function will NOT update the exported status of corresponding transactions.
+     * All or none of the splits will be inserted/updated into the database.
+     * @param splitList {@link org.gnucash.android.model.Split} to be recorded in DB
+     * @return Number of records of the newly saved split
+     */
+    public long bulkAddSplits(List<Split> splitList){
+        long nRow = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + SplitEntry.TABLE_NAME + " ( "
+                    + SplitEntry.COLUMN_UID             + " , "
+                    + SplitEntry.COLUMN_MEMO 	        + " , "
+                    + SplitEntry.COLUMN_TYPE            + " , "
+                    + SplitEntry.COLUMN_AMOUNT          + " , "
+                    + SplitEntry.COLUMN_ACCOUNT_UID 	+ " , "
+                    + SplitEntry.COLUMN_TRANSACTION_UID + " ) VALUES ( ? , ? , ? , ? , ? , ? ) ");
+            for (Split split : splitList) {
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1, split.getUID());
+                if (split.getMemo() != null) {
+                    replaceStatement.bindString(2, split.getMemo());
+                }
+                replaceStatement.bindString(3, split.getType().name());
+                replaceStatement.bindString(4, split.getAmount().absolute().toPlainString());
+                replaceStatement.bindString(5, split.getAccountUID());
+                replaceStatement.bindString(6, split.getTransactionUID());
+
+                Log.d(TAG, "Replacing transaction split in db");
+                replaceStatement.execute();
+                nRow++;
+            }
+            mDb.setTransactionSuccessful();
+        }
+        catch(Exception e) {
+            nRow = 0;
+        }
+        finally {
+            mDb.endTransaction();
+        }
+
+        return nRow;
+    }
+
+    /**
      * Builds a split instance from the data pointed to by the cursor provided
      * <p>This method will not move the cursor in any way. So the cursor should already by pointing to the correct entry</p>
      * @param cursor Cursor pointing to transaction record in database
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index c532f716..8b69761f 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -82,15 +82,8 @@ public long addTransaction(Transaction transaction){
         contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
         contentValues.put(TransactionEntry.COLUMN_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
 
-		long rowId = -1;
-		if ((rowId = fetchTransactionWithUID(transaction.getUID())) > 0){
-			//if transaction already exists, then just update
-			Log.d(TAG, "Updating existing transaction");
-			mDb.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry._ID + " = " + rowId, null);
-		} else {
-			Log.d(TAG, "Adding new transaction to db");
-			rowId = mDb.insert(TransactionEntry.TABLE_NAME, null, contentValues);
-		}	
+        Log.d(TAG, "Replacing transaction in db");
+        long rowId = mDb.replace(TransactionEntry.TABLE_NAME, null, contentValues);
 
         if (rowId > 0){
             Log.d(TAG, "Adding splits for transaction");
@@ -103,6 +96,59 @@ public long addTransaction(Transaction transaction){
 	}
 
     /**
+     * Adds an several transactions to the database.
+     * If a transaction already exists in the database with the same unique ID,
+     * then the record will just be updated instead. Recurrence Transactions will not
+     * be inserted, instead schedule Transaction would be called. If an exception
+     * occurs, no transaction would be inserted.
+     * @param transactionList {@link Transaction} transactions to be inserted to database
+     * @return Number of transactions inserted
+     */
+    public long bulkAddTransactions(List<Transaction> transactionList){
+        List<Split> splitList = new ArrayList<Split>(transactionList.size()*3);
+        long rowInserted = 0;
+        try {
+            mDb.beginTransaction();
+            SQLiteStatement replaceStatement = mDb.compileStatement("REPLACE INTO " + TransactionEntry.TABLE_NAME + " ( "
+                + TransactionEntry.COLUMN_UID 		    + " , "
+                + TransactionEntry.COLUMN_DESCRIPTION   + " , "
+                + TransactionEntry.COLUMN_NOTES         + " , "
+                + TransactionEntry.COLUMN_TIMESTAMP     + " , "
+                + TransactionEntry.COLUMN_EXPORTED      + " , "
+                + TransactionEntry.COLUMN_CURRENCY      + " ) VALUES ( ? , ? , ? , ? , ? , ?)");
+            for (Transaction transaction : transactionList) {
+                if (transaction.getRecurrencePeriod() > 0) {
+                    scheduleTransaction(transaction);
+                    continue;
+                }
+                Log.d(TAG, "Replacing transaction in db");
+                replaceStatement.clearBindings();
+                replaceStatement.bindString(1, transaction.getUID());
+                replaceStatement.bindString(2, transaction.getDescription());
+                replaceStatement.bindString(3, transaction.getNote());
+                replaceStatement.bindLong(4, transaction.getTimeMillis());
+                replaceStatement.bindLong(5, transaction.isExported() ? 1 : 0);
+                replaceStatement.bindString(6, transaction.getCurrencyCode());
+                //replaceStatement.bindLong(7, transaction.getRecurrencePeriod());
+                replaceStatement.execute();
+                rowInserted ++;
+                splitList.addAll(transaction.getSplits());
+            }
+            mDb.setTransactionSuccessful();
+        }
+        catch (Exception e) {
+            rowInserted = 0;
+        }
+        finally {
+            mDb.endTransaction();
+        }
+        if (rowInserted != 0 && !splitList.isEmpty()) { // TODO: clear empty transactions
+            mSplitsDbAdapter.bulkAddSplits(splitList);
+        }
+        return rowInserted;
+    }
+
+    /**
 	 * Fetch a transaction from the database which has a unique ID <code>uid</code>
 	 * @param uid Unique Identifier of transaction to be retrieved
 	 * @return Database row ID of transaction with UID <code>uid</code>
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index af8d8bde..15c8d872 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -30,7 +30,11 @@
 
 import java.text.ParseException;
 import java.util.Currency;
+import java.util.HashMap;
+import java.util.Stack;
 import java.util.regex.Pattern;
+import java.util.List;
+import java.util.ArrayList;
 
 /**
  * Handler for parsing the GnuCash XML file.
@@ -66,11 +70,21 @@
     Account mAccount;
 
     /**
+     * All the accounts found in a file to be imported, used for bulk import mode
+     */
+    List<Account> mAccountList;
+
+    /**
      * Transaction instance which will be built for each transaction found
      */
     Transaction mTransaction;
 
     /**
+     * All the transaction instances found in a file to be inserted, used in bulk mode
+     */
+    List<Transaction> mTransactionList;
+
+    /**
      * Accumulate attributes of splits found in this object
      */
     Split mSplit;
@@ -80,6 +94,11 @@
      */
     String mIgnoreElement = null;
 
+    /**
+     * Showing whether we are in bulk import mode
+     */
+    boolean mBulk = false;
+
     boolean mInColorSlot        = false;
     boolean mInPlaceHolderSlot  = false;
     boolean mInFavoriteSlot     = false;
@@ -92,10 +111,23 @@
     private TransactionsDbAdapter mTransactionsDbAdapter;
 
     public GncXmlHandler(Context context) {
+        init(context, false);
+    }
+
+    public GncXmlHandler(Context context, boolean bulk) {
+        init(context, bulk);
+    }
+
+    private void init(Context context, boolean bulk) {
         mContext = context;
         mAccountsDbAdapter = new AccountsDbAdapter(mContext);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mContext);
         mContent = new StringBuilder();
+        mBulk = bulk;
+        if (bulk) {
+            mAccountList = new ArrayList<Account>();
+            mTransactionList = new ArrayList<Transaction>();
+        }
     }
 
     /**
@@ -181,9 +213,13 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
-            Log.d(LOG_TAG, "Saving account...");
-            mAccountsDbAdapter.addAccount(mAccount);
-
+            if (mBulk) {
+                mAccountList.add(mAccount);
+            }
+            else {
+                Log.d(LOG_TAG, "Saving account...");
+                mAccountsDbAdapter.addAccount(mAccount);
+            }
             mAccount = null;
             //reset ISO 4217 flag for next account
             mISO4217Currency = false;
@@ -302,10 +338,15 @@ public void endElement(String uri, String localName, String qualifiedName) throw
         }
 
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
-            if (mTransaction.getRecurrencePeriod() > 0){ //TODO: Fix this when scheduled actions are expanded
-                mTransactionsDbAdapter.scheduleTransaction(mTransaction);
-            } else {
-                mTransactionsDbAdapter.addTransaction(mTransaction);
+            if (mBulk) {
+                mTransactionList.add(mTransaction);
+            }
+            else {
+                if (mTransaction.getRecurrencePeriod() > 0) { //TODO: Fix this when scheduled actions are expanded
+                    mTransactionsDbAdapter.scheduleTransaction(mTransaction);
+                } else {
+                    mTransactionsDbAdapter.addTransaction(mTransaction);
+                }
             }
             mTransaction = null;
         }
@@ -322,8 +363,53 @@ public void characters(char[] chars, int start, int length) throws SAXException
     @Override
     public void endDocument() throws SAXException {
         super.endDocument();
+        if (mBulk) {
+            HashMap<String, Account> map = new HashMap<String, Account>(mAccountList.size());
+            HashMap<String, String> mapFullName = new HashMap<String, String>(mAccountList.size());
+            for(Account account:mAccountList) {
+                map.put(account.getUID(), account);
+                mapFullName.put(account.getUID(), null);
+            }
+            java.util.Stack<Account> stack = new Stack<Account>();
+            for (Account account:mAccountList){
+                if (mapFullName.get(account.getUID()) != null) {
+                    continue;
+                }
+                stack.push(account);
+                String parentAccountFullName = null;
+                while (!stack.isEmpty()) {
+                    Account acc = stack.peek();
+                    if (acc.getAccountType().name().equals("ROOT")) {
+                        mapFullName.put(acc.getUID(), "");
+                        stack.pop();
+                        parentAccountFullName = "";
+                        continue;
+                    }
+                    if (mapFullName.get(acc.getParentUID()) == null) {
+                        stack.push(map.get(acc.getParentUID()));
+                        continue;
+                    }
+                    else {
+                        parentAccountFullName = mapFullName.get(acc.getParentUID());
+                    }
+                    if (parentAccountFullName != null) {
+                        parentAccountFullName = parentAccountFullName.length() == 0 ? acc.getName() :
+                                (parentAccountFullName + AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
+                        mapFullName.put(acc.getUID(), parentAccountFullName);
+                        stack.pop();
+                    }
+                }
+            }
+            for (Account account:mAccountList){
+                account.setFullName(mapFullName.get(account.getUID()));
+            }
+            long startTime = System.nanoTime();
+            mAccountsDbAdapter.bulkAddAccounts(mAccountList);
+            mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
+            long endTime = System.nanoTime();
+            Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
+        }
         mAccountsDbAdapter.close();
         mTransactionsDbAdapter.close();
     }
-
 }
diff --git a/app/src/org/gnucash/android/importer/GncXmlImporter.java b/app/src/org/gnucash/android/importer/GncXmlImporter.java
index 068322d3..424f4e4e 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImporter.java
@@ -17,6 +17,7 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.XMLReader;
@@ -70,8 +71,11 @@ public static void parse(Context context, InputStream gncXmlInputStream) throws
 
         //TODO: Set an error handler which can log errors
 
-        GncXmlHandler handler = new GncXmlHandler(context);
+        GncXmlHandler handler = new GncXmlHandler(context, true);
         xr.setContentHandler(handler);
+        long startTime = System.nanoTime();
         xr.parse(new InputSource(bos));
+        long endTime = System.nanoTime();
+        Log.d("Import", String.format("%d ns spent on importing the file", endTime-startTime));
     }
 }

From cbbbf5178be280d5e2b693d581a4f5ce956e08d5 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 23 Aug 2014 10:00:27 +0800
Subject: [PATCH 11/68] FIX: acount title color propagation

---
 .../android/ui/account/AccountsActivity.java       |  2 +-
 .../ui/transaction/TransactionsActivity.java       | 32 ++++++++++++++++------
 integration-tests/project.properties               |  2 +-
 3 files changed, 25 insertions(+), 11 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index 485ecc9b..bce29da4 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -269,7 +269,7 @@ private void init() {
      @Override
     protected void onResume() {
         super.onResume();
-        TransactionsActivity.sLastTitleColor = -1;
+        //TransactionsActivity.sLastTitleColor = -1;
     }
 
     @Override
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 56474abe..91512895 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -128,7 +128,7 @@
      * This is the last known color for the title indicator.
      * This is used to remember the color of the top level account if the child account doesn't have one.
      */
-    public static int sLastTitleColor = -1;
+    //public static int sLastTitleColor = -1;
 
     private TextView mSectionHeaderTransactions;
     private TitlePageIndicator mTitlePageIndicator;
@@ -281,8 +281,8 @@ protected void onCreate(Bundle savedInstanceState) {
         mTitlePageIndicator = (TitlePageIndicator) findViewById(R.id.titles);
         mSectionHeaderTransactions = (TextView) findViewById(R.id.section_header_transactions);
 
-        if (sLastTitleColor == -1) //if this is first launch of app. Previous launches would have set the color already
-            sLastTitleColor = getResources().getColor(R.color.title_green);
+        //if (sLastTitleColor == -1) //if this is first launch of app. Previous launches would have set the color already
+        //    sLastTitleColor = getResources().getColor(R.color.title_green);
 
 		mAccountId = getIntent().getLongExtra(
                 UxArgument.SELECTED_ACCOUNT_ID, -1);
@@ -324,7 +324,7 @@ private void initializeCreateOrEditTransaction() {
             mSectionHeaderTransactions.setText(R.string.title_add_transaction);
             args.putLong(UxArgument.SELECTED_ACCOUNT_ID, mAccountId);
         }
-        mSectionHeaderTransactions.setBackgroundColor(sLastTitleColor);
+        //mSectionHeaderTransactions.setBackgroundColor(sLastTitleColor);
         showTransactionFormFragment(args);
     }
 
@@ -341,14 +341,28 @@ private void setTitleIndicatorColor() {
         //Basically, if we are in a top level account, use the default title color.
         //but propagate a parent account's title color to children who don't have own color
         String colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountId);
+        int iColor = -1;
         if (colorCode != null){
-            sLastTitleColor = Color.parseColor(colorCode);
+            iColor = Color.parseColor(colorCode);
+        } else {
+            String UIDParent = mAccountsDbAdapter.getAccountUID(mAccountId);
+            while ((UIDParent = mAccountsDbAdapter.getParentAccountUID(UIDParent)) != null) {
+                colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountsDbAdapter.getAccountID(UIDParent));
+                if (colorCode != null) {
+                    iColor = Color.parseColor(colorCode);
+                    break;
+                }
+            }
+            if (colorCode == null)
+            {
+                iColor = getResources().getColor(R.color.title_green);
+            }
         }
 
-        mTitlePageIndicator.setSelectedColor(sLastTitleColor);
-        mTitlePageIndicator.setTextColor(sLastTitleColor);
-        mTitlePageIndicator.setFooterColor(sLastTitleColor);
-        mSectionHeaderTransactions.setBackgroundColor(sLastTitleColor);
+        mTitlePageIndicator.setSelectedColor(iColor);
+        mTitlePageIndicator.setTextColor(iColor);
+        mTitlePageIndicator.setFooterColor(iColor);
+        mSectionHeaderTransactions.setBackgroundColor(iColor);
     }
 
     /**
diff --git a/integration-tests/project.properties b/integration-tests/project.properties
index 0840b4a0..9b84a6b4 100644
--- a/integration-tests/project.properties
+++ b/integration-tests/project.properties
@@ -11,4 +11,4 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-15
+target=android-16

From 292c19e00e852ae20edfcbe78f4ee41cf32275ba Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 30 Aug 2014 22:40:05 +0800
Subject: [PATCH 12/68] Tried to speed up endElement

reduce the number of calls of equalsIgnoreCase. reduce the number of
call to printStackTrace. Not much impact is seen on the overall runing
time.
---
 .../gnucash/android/importer/GncXmlHandler.java    | 93 +++++++++-------------
 1 file changed, 38 insertions(+), 55 deletions(-)

diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 15c8d872..ea71a88c 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -182,37 +182,30 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             mAccount.setName(characterString);
             mAccount.setFullName(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCT_ID)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCT_ID)){
             mAccount.setUID(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TYPE)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TYPE)){
             mAccount.setAccountType(AccountType.valueOf(characterString));
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_COMMODITY_SPACE)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_COMMODITY_SPACE)){
             if (characterString.equalsIgnoreCase("ISO4217")){
                 mISO4217Currency = true;
             }
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_COMMODITY_ID)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_COMMODITY_ID)){
             String currencyCode = mISO4217Currency ? characterString : NO_CURRENCY_CODE;
             if (mAccount != null){
                 mAccount.setCurrency(Currency.getInstance(currencyCode));
             }
-
             if (mTransaction != null){
                 mTransaction.setCurrencyCode(currencyCode);
             }
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_PARENT_UID)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_PARENT_UID)){
             mAccount.setParentUID(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)){
             if (mBulk) {
                 mAccountList.add(mAccount);
             }
@@ -224,29 +217,24 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             //reset ISO 4217 flag for next account
             mISO4217Currency = false;
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_KEY)){
             if (characterString.equals(GncXmlHelper.KEY_PLACEHOLDER)){
                 mInPlaceHolderSlot = true;
             }
-            if (characterString.equals(GncXmlHelper.KEY_COLOR)){
+            else if (characterString.equals(GncXmlHelper.KEY_COLOR)){
                 mInColorSlot = true;
             }
-
-            if (characterString.equals(GncXmlHelper.KEY_FAVORITE)){
+            else if (characterString.equals(GncXmlHelper.KEY_FAVORITE)){
                 mInFavoriteSlot = true;
             }
-
-            if (characterString.equals(GncXmlHelper.KEY_NOTES)){
+            else if (characterString.equals(GncXmlHelper.KEY_NOTES)){
                 mIsNote = true;
             }
-
-            if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
+            else if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
                 mInDefaultTransferAccount = true;
             }
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
             if (mInPlaceHolderSlot){
                 Log.v(LOG_TAG, "Setting account placeholder flag");
                 mAccount.setPlaceHolderFlag(Boolean.parseBoolean(characterString));
@@ -257,17 +245,19 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 String color = characterString.trim();
                 //Gnucash exports the account color in format #rrrgggbbb, but we need only #rrggbb.
                 //so we trim the last digit in each block, doesn't affect the color much
-                if (!Pattern.matches(Account.COLOR_HEX_REGEX, color))
-                    color = "#" + color.replaceAll(".(.)?", "$1").replace("null", "");
-                try {
-                    if (mAccount != null)
-                        mAccount.setColorCode(color);
-                } catch (IllegalArgumentException ex){
-                    //sometimes the color entry in the account file is "Not set" instead of just blank. So catch!
-                    Log.i(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
-                    ex.printStackTrace();
+                if (!color.equals("Not Set")) {
+                    // avoid known exception, printStackTrace is very time consuming
+                    if (!Pattern.matches(Account.COLOR_HEX_REGEX, color))
+                        color = "#" + color.replaceAll(".(.)?", "$1").replace("null", "");
+                    try {
+                        if (mAccount != null)
+                            mAccount.setColorCode(color);
+                    } catch (IllegalArgumentException ex) {
+                        //sometimes the color entry in the account file is "Not set" instead of just blank. So catch!
+                        Log.i(LOG_TAG, "Invalid color code '" + color + "' for account " + mAccount.getName());
+                        ex.printStackTrace();
+                    }
                 }
-
                 mInColorSlot = false;
             }
 
@@ -291,15 +281,13 @@ public void endElement(String uri, String localName, String qualifiedName) throw
 
 
         //================  PROCESSING OF TRANSACTION TAGS =====================================
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_ID)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRX_ID)){
             mTransaction.setUID(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_DESCRIPTION)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_DESCRIPTION)){
             mTransaction.setDescription(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
             try {
                 if (mIsDatePosted && mTransaction != null) {
                     mTransaction.setTime(GncXmlHelper.parseDate(characterString));
@@ -310,34 +298,27 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 throw new SAXException("Unable to parse transaction time", e);
             }
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_RECURRENCE_PERIOD)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_RECURRENCE_PERIOD)){
             mTransaction.setRecurrencePeriod(Long.parseLong(characterString));
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ID)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ID)){
             mSplit.setUID(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_MEMO)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_MEMO)){
             mSplit.setMemo(characterString);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_VALUE)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_VALUE)){
             Money amount = new Money(GncXmlHelper.parseMoney(characterString), mTransaction.getCurrency());
             mSplit.setType(amount.isNegative() ? TransactionType.CREDIT : TransactionType.DEBIT);
             mSplit.setAmount(amount.absolute());
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ACCOUNT)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ACCOUNT)){
             mSplit.setAccountUID(characterString);
         }
-
-        if (qualifiedName.equals(GncXmlHelper.TAG_TRN_SPLIT)){
+        else if (qualifiedName.equals(GncXmlHelper.TAG_TRN_SPLIT)){
             mTransaction.addSplit(mSplit);
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
             if (mBulk) {
                 mTransactionList.add(mTransaction);
             }
@@ -404,8 +385,10 @@ public void endDocument() throws SAXException {
                 account.setFullName(mapFullName.get(account.getUID()));
             }
             long startTime = System.nanoTime();
-            mAccountsDbAdapter.bulkAddAccounts(mAccountList);
-            mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
+            long nAccounts = mAccountsDbAdapter.bulkAddAccounts(mAccountList);
+            Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
+            long nTransactions = mTransactionsDbAdapter.bulkAddTransactions(mTransactionList);
+            Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
             long endTime = System.nanoTime();
             Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
         }

From fa4f8b119be9dcc3a9895472416350ea4fe6ef34 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 30 Aug 2014 22:41:51 +0800
Subject: [PATCH 13/68] Bulk insert refinement

propagate exception out of bulk insertion.
Delete all empty transaction after insertion.
---
 .../org/gnucash/android/db/AccountsDbAdapter.java    |  5 +----
 app/src/org/gnucash/android/db/SplitsDbAdapter.java  |  7 ++-----
 .../gnucash/android/db/TransactionsDbAdapter.java    | 20 ++++++++++++++------
 3 files changed, 17 insertions(+), 15 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index ed3df1a0..30c2ead9 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -143,15 +143,12 @@ public long bulkAddAccounts(List<Account> accountList){
                 if (account.getDefaultTransferAccountUID() != null) {
                     replaceStatement.bindString(10, account.getDefaultTransferAccountUID());
                 }
-                Log.d(TAG, "Replacing account in db");
+                //Log.d(TAG, "Replacing account in db");
                 replaceStatement.execute();
                 nRow ++;
             }
             mDb.setTransactionSuccessful();
         }
-        catch (Exception e){
-            nRow = 0;
-        }
         finally {
             mDb.endTransaction();
         }
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index d6c72dec..cea64d69 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -82,7 +82,7 @@ public long addSplit(Split split){
      * @param splitList {@link org.gnucash.android.model.Split} to be recorded in DB
      * @return Number of records of the newly saved split
      */
-    public long bulkAddSplits(List<Split> splitList){
+    public long bulkAddSplits(List<Split> splitList) {
         long nRow = 0;
         try {
             mDb.beginTransaction();
@@ -104,15 +104,12 @@ public long bulkAddSplits(List<Split> splitList){
                 replaceStatement.bindString(5, split.getAccountUID());
                 replaceStatement.bindString(6, split.getTransactionUID());
 
-                Log.d(TAG, "Replacing transaction split in db");
+                //Log.d(TAG, "Replacing transaction split in db");
                 replaceStatement.execute();
                 nRow++;
             }
             mDb.setTransactionSuccessful();
         }
-        catch(Exception e) {
-            nRow = 0;
-        }
         finally {
             mDb.endTransaction();
         }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 8b69761f..b511b9b8 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -121,7 +121,7 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                     scheduleTransaction(transaction);
                     continue;
                 }
-                Log.d(TAG, "Replacing transaction in db");
+                //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
                 replaceStatement.bindString(1, transaction.getUID());
                 replaceStatement.bindString(2, transaction.getDescription());
@@ -136,14 +136,22 @@ public long bulkAddTransactions(List<Transaction> transactionList){
             }
             mDb.setTransactionSuccessful();
         }
-        catch (Exception e) {
-            rowInserted = 0;
-        }
         finally {
             mDb.endTransaction();
         }
-        if (rowInserted != 0 && !splitList.isEmpty()) { // TODO: clear empty transactions
-            mSplitsDbAdapter.bulkAddSplits(splitList);
+        if (rowInserted != 0 && !splitList.isEmpty()) {
+            try {
+                long nSplits = mSplitsDbAdapter.bulkAddSplits(splitList);
+                Log.d(TAG, String.format("%d splits inserted", nSplits));
+            }
+            finally {
+                SQLiteStatement deleteEmptyTransaction = mDb.compileStatement("DELETE FROM " +
+                        TransactionEntry.TABLE_NAME + " WHERE NOT EXISTS ( SELECT * FROM " +
+                        SplitEntry.TABLE_NAME +
+                        " WHERE " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " ) ");
+                deleteEmptyTransaction.execute();
+            }
         }
         return rowInserted;
     }

From fc5d4b12dc5858807ab7d8559ecbe97214284a2e Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 31 Aug 2014 20:13:38 +0800
Subject: [PATCH 14/68] Speeding up Account balance calculation

Calculate account balance using SQL query.

Conflicts:
	app/src/org/gnucash/android/db/AccountsDbAdapter.java
	app/src/org/gnucash/android/db/SplitsDbAdapter.java
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 51 ++++++++++++++++++++++
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 47 ++++++++++++++++++++
 .../android/ui/util/AccountBalanceTask.java        |  5 ++-
 3 files changed, 102 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index adc13d79..3d6809c3 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -21,6 +21,9 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
+import android.text.TextUtils;
+
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
@@ -618,6 +621,54 @@ public Money getAccountBalance(long accountId){
     }
 
     /**
+     * Returns the balance of an account while taking sub-accounts into consideration
+     * @return Account Balance of an account including sub-accounts
+     */
+    public Money getAccountBalance(String accountUID){
+        Log.d(TAG, "Computing account balance for account ID " + accountUID);
+        String currencyCode = mTransactionsAdapter.getCurrencyCode(accountUID);
+        boolean hasDebitNormalBalance = getAccountType(accountUID).hasDebitNormalBalance();
+        currencyCode = currencyCode == null ? Money.DEFAULT_CURRENCY_CODE : currencyCode;
+        Money balance = Money.createZeroInstance(currencyCode);
+
+        // retrieve all descendant accounts of the accountUID
+        // accountsList will hold accountUID with all descendant accounts.
+        // accountsList level will hold descendant accounts of the same level
+        // only accounts have the same currency with accountUID will be retrieved
+        ArrayList<String> accountsList = new ArrayList<String>();
+        accountsList.add(accountUID);
+        ArrayList<String> accountsListLevel = new ArrayList<String>();
+        accountsListLevel.add(accountUID);
+        for (;;) {
+            Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
+                    new String[]{AccountEntry.COLUMN_UID},
+                    AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IN ( '" + TextUtils.join("' , '", accountsListLevel) + "' ) AND " +
+                            AccountEntry.COLUMN_CURRENCY + " = ? ",
+                    new String[]{currencyCode}, null, null, null);
+            accountsListLevel.clear();
+            if (cursor != null){
+                int columnIndex = cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID);
+                while(cursor.moveToNext()){
+                    accountsListLevel.add(cursor.getString(columnIndex));
+                }
+                cursor.close();
+            }
+            if (accountsListLevel.size() > 0) {
+                accountsList.addAll(accountsListLevel);
+            }
+            else {
+                break;
+            }
+        }
+
+        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
+        Log.d(TAG, "all account list : " + accountsList.size());
+        Money splitSum = splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance);
+        splitsDbAdapter.close();
+        return balance.add(splitSum);
+    }
+
+    /**
      * Returns a list of IDs for the sub-accounts for account <code>accountId</code>
      * @param accountId Account ID whose sub-accounts are to be retrieved
      * @return List of IDs for the sub-accounts for account <code>accountId</code>
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index b5437388..64907cb3 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -21,13 +21,21 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
+import android.text.TextUtils;
+
 import android.util.Log;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
 
+import java.math.BigDecimal;
+import java.math.MathContext;
+import java.math.RoundingMode;
 import java.util.ArrayList;
+import java.util.Currency;
 import java.util.List;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
@@ -181,6 +189,45 @@ public Money computeSplitBalance(String accountUID){
     }
 
     /**
+     * Returns the sum of the splits for given set of accounts.
+     * This takes into account the kind of movement caused by the split in the account (which also depends on account type)
+     * The Caller must make sure all accounts have the currency, which is passed in as currencyCode
+     * @param accountUIDList List of String unique IDs of given set of accounts
+     * @param currencyCode currencyCode for all the accounts in the list
+     * @param hasDebitNormalBalance Does the final balance has normal debit credit meaning
+     * @return Balance of the splits for this account
+     */
+    public Money computeSplitBalance(List<String> accountUIDList, String currencyCode, boolean hasDebitNormalBalance){
+        //Cursor cursor = fetchSplitsForAccount(accountUID);
+        if (accountUIDList == null || accountUIDList.size() == 0){
+            return new Money("0", currencyCode);
+        }
+
+        Cursor cursor;
+        cursor = mDb.query(SplitEntry.TABLE_NAME + " , " + TransactionEntry.TABLE_NAME,
+                new String[]{"TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+
+                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " END )"},
+                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
+                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0",
+                null, null, null, null);
+
+        if (cursor != null){
+            if (cursor.moveToFirst()) {
+                double amount = cursor.getDouble(0);
+                cursor.close();
+                Log.d(TAG, "amount return " + amount);
+                if (!hasDebitNormalBalance) {
+                    amount = -amount;
+                }
+                return new Money(BigDecimal.valueOf(amount).setScale(2, BigDecimal.ROUND_HALF_UP), Currency.getInstance(currencyCode));
+            }
+            cursor.close();
+        }
+        return new Money("0", currencyCode);
+    }
+
+    /**
      * Returns the list of splits for a transaction
      * @param transactionUID String unique ID of transaction
      * @return List of {@link org.gnucash.android.model.Split}s
diff --git a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
index 4d80c40d..63864c77 100644
--- a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
+++ b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -52,11 +52,14 @@ protected Money doInBackground(Long... params) {
 
         Money balance = Money.getZeroInstance();
         try {
-            balance = accountsDbAdapter.getAccountBalance(params[0]);
+            balance = accountsDbAdapter.getAccountBalance(accountsDbAdapter.getAccountUID(params[0]));
         } catch (IllegalArgumentException ex){
             //sometimes a load computation has been started and the data set changes.
             //the account ID may no longer exist. So we catch that exception here and do nothing
             Log.e(LOG_TAG, "Error computing account balance: " + ex);
+        } catch (Exception ex) {
+            Log.e(LOG_TAG, "Error computing account balance: " + ex);
+            ex.printStackTrace();
         }
         return balance;
     }

From 569a40a6185af938a5a3e77d02a504f48bece386 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 5 Sep 2014 08:24:38 +0800
Subject: [PATCH 15/68] rewrite backup procedure, use XmlSerializer

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 124 ++++++++++++++++
 .../gnucash/android/db/TransactionsDbAdapter.java  | 160 +++++++++++++++++++++
 .../gnucash/android/export/xml/GncXmlExporter.java |  67 ++++++++-
 3 files changed, 348 insertions(+), 3 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index adc13d79..52015246 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -24,8 +24,11 @@
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.*;
+import org.xmlpull.v1.XmlSerializer;
 
+import java.io.IOException;
 import java.math.BigDecimal;
 import java.util.*;
 
@@ -580,6 +583,20 @@ public Cursor fetchAccounts(String condition){
 
     /**
      * Returns a Cursor set of accounts which fulfill <code>condition</code>
+     * and ordered by <code>orderBy</code>
+     * @param condition SQL WHERE statement without the 'WHERE' itself
+     * @return Cursor set of accounts which fulfill <code>condition</code>
+     */
+    public Cursor fetchAccounts(String condition, String orderBy){
+        Log.v(TAG, "Fetching all accounts from db where " +
+                (condition == null ? "NONE" : condition) + " order by " +
+                (orderBy == null ? "NONE" : orderBy));
+        return mDb.query(AccountEntry.TABLE_NAME,
+                null, condition, null, null, null,
+                orderBy);
+    }
+    /**
+     * Returns a Cursor set of accounts which fulfill <code>condition</code>
      * <p>This method returns the accounts list sorted by the full account name</p>
      * @param condition SQL WHERE statement without the 'WHERE' itself
      * @return Cursor set of accounts which fulfill <code>condition</code>
@@ -1044,4 +1061,111 @@ public int deleteAllRecords(){
         return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
 
+    /**
+     * Export set of accounts in GncXML format
+     * @param condition condition to select accounts
+     * @param orderBy       how accounts are ordered
+     * @param xmlSerializer XmlSerializer object to write the XML output
+     * @return export successful
+     */
+    public void exportAccountsToGncXML(XmlSerializer xmlSerializer, String condition, String orderBy) throws IOException{
+        Cursor cursor = fetchAccounts(null, null);
+        while(cursor.moveToNext())
+        {
+            // write account
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+            // account name
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_NAME);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME)));
+            xmlSerializer.endTag(null,GncXmlHelper.TAG_NAME);
+            // account guid
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCT_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCT_ID);
+            // account type
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TYPE);
+            String acct_type = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE));
+            xmlSerializer.text(acct_type);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TYPE);
+            // commodity
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.text("ISO4217");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            String acctCurrencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
+            xmlSerializer.text(acctCurrencyCode);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
+            // commodity scu
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
+            xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
+            // account description
+            // this is optional in Gnc XML, and currently not in the db, so description node
+            // is omitted
+            //
+            // account slots, color, placeholder, default transfer account, favorite
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.text(GncXmlHelper.KEY_PLACEHOLDER);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+            xmlSerializer.text(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) != 0));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+
+            String color = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
+            if (color != null && color.length() > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                xmlSerializer.text(GncXmlHelper.KEY_COLOR);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                xmlSerializer.text(color);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            }
+
+            String defaultTransferAcctUUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
+            if (defaultTransferAcctUUID != null && defaultTransferAcctUUID.length() > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                xmlSerializer.text(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                xmlSerializer.text(defaultTransferAcctUUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            }
+
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.text(GncXmlHelper.KEY_FAVORITE);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+            xmlSerializer.text(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) != 0));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+
+            // parent uid
+            String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
+            if (acct_type != "ROOT" && parentUID != null && parentUID.length() > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PARENT_UID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                xmlSerializer.text(parentUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PARENT_UID);
+            }
+            else
+            {
+                Log.d("export", "root account : " + cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID)));
+            }
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT);
+        }
+        cursor.close();
+    }
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index c532f716..f869ccd2 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -25,10 +25,17 @@
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
+
+import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.*;
+import org.xmlpull.v1.XmlSerializer;
+
 import static org.gnucash.android.db.DatabaseSchema.*;
 
+import java.io.IOException;
+import java.math.BigDecimal;
 import java.util.ArrayList;
+import java.util.Currency;
 import java.util.List;
 
 /**
@@ -239,6 +246,159 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
+    public void exportTransactionsWithSplitsToGncXML(
+            XmlSerializer xmlSerializer,
+            String condition) throws IOException{
+        Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
+                        " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID,
+                new String[]{
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_UID + " AS trans_uid",
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_NOTES + " AS trans_notes",
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
+                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS trans_recur",
+                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_UID + " AS split_uid",
+                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_MEMO + " AS split_memo",
+                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_TYPE + " AS split_type",
+                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_AMOUNT + " AS split_amount",
+                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"
+                }, condition, null, null, null,
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC , " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
+
+        String lastTrxUID = "";
+        Currency trxCurrency = null;
+        int fractionDigits = 2;
+        BigDecimal denom = new BigDecimal(100);
+        String denomString = "100";
+        int recur = 0;
+        while (cursor.moveToNext()){
+            String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+            if (!lastTrxUID.equals(curTrxUID)){ // new transaction starts
+                if (!lastTrxUID.equals("")){ // there's an old transaction, close it
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
+                    if (recur > 0) {
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                        xmlSerializer.text(Integer.toString(recur));
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                    }
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
+                }
+                // new transaction
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRANSACTION);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+                // transaction id
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_ID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+                xmlSerializer.text(curTrxUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_ID);
+                // currency
+                String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                trxCurrency = Currency.getInstance(currency);
+                fractionDigits = trxCurrency.getDefaultFractionDigits();
+                int denomInt = (int)Math.pow(10, fractionDigits);
+                denom = new BigDecimal(denomInt);
+                denomString = Integer.toString(denomInt);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.text("ISO4217");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.text(currency);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
+                // date posted
+                String strDate = GncXmlHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time")));
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_POSTED);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
+                // date entered
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+                // description
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                lastTrxUID = curTrxUID;
+                // notes
+                String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
+                if (notes != null && notes.length() > 0) {
+                    xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SLOTS);
+                    xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+                    xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                    xmlSerializer.text(GncXmlHelper.KEY_NOTES);
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                    xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                    xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                    xmlSerializer.text(notes);
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SLOTS);
+                }
+                // recurrence period
+                recur = cursor.getInt(cursor.getColumnIndexOrThrow("trans_recur"));
+                // splits start
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
+            }
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLIT);
+            // split id
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_uid")));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ID);
+            // memo
+            String memo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
+            if (memo != null && memo.length() > 0){
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
+                xmlSerializer.text(memo);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
+            }
+            // reconciled
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
+            xmlSerializer.text("n");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
+            // value, in the transaction's currency
+            String trxType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
+            BigDecimal value = new BigDecimal(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")));
+            value = value.multiply(denom);
+            String strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
+            xmlSerializer.text(strValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
+            // quantity, in the split account's currency
+            // TODO: multi currency support.
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
+            xmlSerializer.text(strValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
+            // account guid
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid")));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLIT);
+        }
+        if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
+            xmlSerializer.endTag(null,GncXmlHelper.TAG_TRN_SPLITS);
+            if (recur > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                xmlSerializer.text(Integer.toString(recur));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+            }
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
+        }
+
+        cursor.close();
+    }
+
     /**
      * Return number of transactions in the database which are non recurring
      * @return Number of transactions
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 63c7f09e..de2a90dd 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -19,6 +19,8 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
+
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
@@ -28,6 +30,8 @@
 import org.gnucash.android.model.Transaction;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
+import org.xmlpull.v1.XmlPullParserFactory;
+import org.xmlpull.v1.XmlSerializer;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -41,6 +45,8 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.StringWriter;
+import java.io.Writer;
+import java.util.Currency;
 import java.util.List;
 import java.util.UUID;
 
@@ -181,6 +187,61 @@ public String generateExport() throws ExporterException{
         return stringWriter.toString();
     }
 
+
+    public void generateExport(Writer writer) throws ExporterException{
+        try {
+            String[] namespaces = new String[] {"gnc", "act", "book", "cd", "cmdty", "price", "slot", "split", "trn", "ts"};
+            XmlSerializer xmlSerializer = XmlPullParserFactory.newInstance().newSerializer();
+            xmlSerializer.setOutput(writer);
+            xmlSerializer.startDocument("utf-8", true);
+            // root tag
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ROOT);
+            for(String ns : namespaces) {
+                xmlSerializer.attribute(null, "xmlns:" + ns, "http://www.gnucash.org/XML/" + ns);
+            }
+            // book count
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "book");
+            xmlSerializer.text("1");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            // book
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_BOOK);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+            // book_id
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_BOOK_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(UUID.randomUUID().toString().replaceAll("-", ""));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK_ID);
+            //commodity count
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
+            xmlSerializer.text(mAccountsDbAdapter.getCurrencies().size() + "");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            //account count
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
+            xmlSerializer.text(mAccountsDbAdapter.getTotalAccountCount() + "");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            //transaction count
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
+            xmlSerializer.text(mTransactionsDbAdapter.getTotalTransactionsCount() + "");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
+            // accounts. bulk import does not rely on account order
+            // the cursor gather account in arbitrary order
+            mAccountsDbAdapter.exportAccountsToGncXML(xmlSerializer, null, null);
+
+            // transactions.
+            mTransactionsDbAdapter.exportTransactionsWithSplitsToGncXML(xmlSerializer, null);
+
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ROOT);
+            xmlSerializer.endDocument();
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new ExporterException(mParameters, e);
+        }
+    }
     /**
      * Creates a backup of current database contents to the default backup location
      */
@@ -188,9 +249,9 @@ public static void createBackup(){
         ExportParams params = new ExportParams(ExportFormat.GNC_XML);
         try {
             FileWriter fileWriter = new FileWriter(Exporter.createBackupFile());
-            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
-            bufferedWriter.write(new GncXmlExporter(params).generateExport());
-            bufferedWriter.flush();
+            //BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
+            new GncXmlExporter(params).generateExport(fileWriter);
+            //bufferedWriter.flush();
 
         } catch (IOException e) {
             e.printStackTrace();

From 12d6fde63c88fb8a0186e4f8a7b40fac6ca22c0e Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 5 Sep 2014 21:36:37 +0800
Subject: [PATCH 16/68] Backup use zipped Gnc XML

---
 .../org/gnucash/android/export/xml/GncXmlExporter.java   | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index de2a90dd..53a380f0 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -41,14 +41,19 @@
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
+
+import java.io.BufferedOutputStream;
 import java.io.BufferedWriter;
+import java.io.FileOutputStream;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
 import java.io.StringWriter;
 import java.io.Writer;
 import java.util.Currency;
 import java.util.List;
 import java.util.UUID;
+import java.util.zip.GZIPOutputStream;
 
 /**
  * Creates a GnuCash XML representation of the accounts and transactions
@@ -248,11 +253,12 @@ public void generateExport(Writer writer) throws ExporterException{
     public static void createBackup(){
         ExportParams params = new ExportParams(ExportFormat.GNC_XML);
         try {
-            FileWriter fileWriter = new FileWriter(Exporter.createBackupFile());
-            //BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
-            new GncXmlExporter(params).generateExport(fileWriter);
-            //bufferedWriter.flush();
-
+            FileOutputStream fileOutputStream = new FileOutputStream(Exporter.createBackupFile());
+            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream);
+            GZIPOutputStream gzipOutputStream = new GZIPOutputStream(bufferedOutputStream);
+            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(gzipOutputStream);
+            new GncXmlExporter(params).generateExport(outputStreamWriter);
+            outputStreamWriter.close();
         } catch (IOException e) {
             e.printStackTrace();
             Log.e("GncXmlExporter", "Error creating backup", e);

From 26c02834e7da7175e3b512ad99e4e0b060307570 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 6 Sep 2014 10:03:19 +0800
Subject: [PATCH 17/68] Import of exported status

Exported status default to 'true'
---
 .../gnucash/android/export/xml/GncXmlHelper.java   |  1 +
 .../gnucash/android/importer/GncXmlHandler.java    | 36 +++++++++++-----------
 2 files changed, 19 insertions(+), 18 deletions(-)

diff --git a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
index a52d9fd7..0b40ba36 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -81,6 +81,7 @@
     public static final String KEY_FAVORITE         = "favorite";
     public static final String KEY_NOTES            = "notes";
     public static final String KEY_DEFAULT_TRANSFER_ACCOUNT = "default_transfer_account";
+    public static final String KEY_EXPORTED         = "exported";
 
     /**
      * Formats dates for the GnuCash XML format
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index ea71a88c..2c0a9ebc 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -106,6 +106,7 @@
     boolean mIsDatePosted       = false;
     boolean mIsNote             = false;
     boolean mInDefaultTransferAccount = false;
+    boolean mInExported         = false;
 
     private Context mContext;
     private TransactionsDbAdapter mTransactionsDbAdapter;
@@ -145,22 +146,19 @@ public GncXmlHandler(SQLiteDatabase db){
     public void startElement(String uri, String localName,
                              String qualifiedName, Attributes attributes) throws SAXException {
         if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_ACCOUNT)) {
-            mAccount = new Account(""); //dummy name, will be replaced when we find name tag
+            mAccount = new Account(""); // dummy name, will be replaced when we find name tag
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
-            mTransaction = new Transaction(""); //dummy name will be replaced
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
+            mTransaction = new Transaction(""); // dummy name will be replaced
+            mTransaction.setExported(true);     // default to exported when import transactions
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_SPLIT)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_SPLIT)){
             mSplit = new Split(Money.getZeroInstance(),"");
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_POSTED)){
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE_POSTED)){
             mIsDatePosted = true;
         }
-
-        if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TEMPLATE_TRANSACTION)) {
+        else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TEMPLATE_TRANSACTION)) {
             mIgnoreElement = GncXmlHelper.TAG_TEMPLATE_TRANSACTION;
         }
     }
@@ -240,8 +238,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
                 mAccount.setPlaceHolderFlag(Boolean.parseBoolean(characterString));
                 mInPlaceHolderSlot = false;
             }
-
-            if (mInColorSlot){
+            else if (mInColorSlot){
                 String color = characterString.trim();
                 //Gnucash exports the account color in format #rrrgggbbb, but we need only #rrggbb.
                 //so we trim the last digit in each block, doesn't affect the color much
@@ -260,23 +257,26 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
                 }
                 mInColorSlot = false;
             }
-
-            if (mInFavoriteSlot){
+            else if (mInFavoriteSlot){
                 mAccount.setFavorite(Boolean.parseBoolean(characterString));
                 mInFavoriteSlot = false;
             }
-
-            if (mIsNote){
+            else if (mIsNote){
                 if (mTransaction != null){
                     mTransaction.setNote(characterString);
                     mIsNote = false;
                 }
             }
-
-            if (mInDefaultTransferAccount){
+            else if (mInDefaultTransferAccount){
                 mAccount.setDefaultTransferAccountUID(characterString);
                 mInDefaultTransferAccount = false;
             }
+            else if (mInExported){
+                if (mTransaction != null) {
+                    mTransaction.setExported(Boolean.parseBoolean(characterString));
+                    mInExported = false;
+                }
+            }
         }
 
 

From b6dcf5d082dbcb6f70a2b4037af7af1bb507297f Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 6 Sep 2014 10:57:48 +0800
Subject: [PATCH 18/68] bug fix import of exported status

---
 app/src/org/gnucash/android/importer/GncXmlHandler.java | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 2c0a9ebc..721c7648 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -231,6 +231,9 @@ else if (characterString.equals(GncXmlHelper.KEY_NOTES)){
             else if (characterString.equals(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT)){
                 mInDefaultTransferAccount = true;
             }
+            else if (characterString.equals(GncXmlHelper.KEY_EXPORTED)){
+                mInExported = true;
+            }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SLOT_VALUE)){
             if (mInPlaceHolderSlot){

From adba5c0c2a5f1f082bca7ea76642a1bc0af28767 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 6 Sep 2014 11:00:35 +0800
Subject: [PATCH 19/68] Export expoted status to Gnc XML

Constants definition are shared with import, in other commits.
---
 .../gnucash/android/db/TransactionsDbAdapter.java  | 38 +++++++++++++++-------
 1 file changed, 26 insertions(+), 12 deletions(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index f869ccd2..7dd76f10 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -81,7 +81,7 @@ public void close() {
 	 */
 	public long addTransaction(Transaction transaction){
 		ContentValues contentValues = new ContentValues();
-		contentValues.put(TransactionEntry.COLUMN_DESCRIPTION,  transaction.getDescription());
+		contentValues.put(TransactionEntry.COLUMN_DESCRIPTION, transaction.getDescription());
 		contentValues.put(TransactionEntry.COLUMN_UID,          transaction.getUID());
 		contentValues.put(TransactionEntry.COLUMN_TIMESTAMP,    transaction.getTimeMillis());
 		contentValues.put(TransactionEntry.COLUMN_NOTES,        transaction.getNote());
@@ -329,19 +329,33 @@ public void exportTransactionsWithSplitsToGncXML(
                 xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
                 xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
                 lastTrxUID = curTrxUID;
-                // notes
+                // slots
                 String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
-                if (notes != null && notes.length() > 0) {
+                boolean exported = cursor.getInt(cursor.getColumnIndexOrThrow("trans_exported")) == 1;
+                if ((notes != null && notes.length() > 0) || !exported) {
                     xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SLOTS);
-                    xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-                    xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                    xmlSerializer.text(GncXmlHelper.KEY_NOTES);
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                    xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                    xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                    xmlSerializer.text(notes);
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+                    if (notes != null && notes.length() > 0) {
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                        xmlSerializer.text(GncXmlHelper.KEY_NOTES);
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                        xmlSerializer.text(notes);
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+                    }
+                    if (!exported) {
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                        xmlSerializer.text(GncXmlHelper.KEY_EXPORTED);
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                        xmlSerializer.text("false");
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+                    }
                     xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SLOTS);
                 }
                 // recurrence period

From bb18b367b9c8d789ae6f9bcda74874537d328de2 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 7 Sep 2014 12:23:38 +0800
Subject: [PATCH 20/68] Export to GncXml clean up

Move all export code from db adapter to exporter.
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 108 ---------
 .../gnucash/android/db/TransactionsDbAdapter.java  | 175 +-------------
 .../gnucash/android/export/xml/GncXmlExporter.java | 260 ++++++++++++++++++++-
 3 files changed, 264 insertions(+), 279 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 52015246..4aa6385a 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1060,112 +1060,4 @@ public int deleteAllRecords(){
         mDb.delete(SplitEntry.TABLE_NAME, null, null);
         return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
-
-    /**
-     * Export set of accounts in GncXML format
-     * @param condition condition to select accounts
-     * @param orderBy       how accounts are ordered
-     * @param xmlSerializer XmlSerializer object to write the XML output
-     * @return export successful
-     */
-    public void exportAccountsToGncXML(XmlSerializer xmlSerializer, String condition, String orderBy) throws IOException{
-        Cursor cursor = fetchAccounts(null, null);
-        while(cursor.moveToNext())
-        {
-            // write account
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-            // account name
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_NAME);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_NAME)));
-            xmlSerializer.endTag(null,GncXmlHelper.TAG_NAME);
-            // account guid
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCT_ID);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID)));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCT_ID);
-            // account type
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_TYPE);
-            String acct_type = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_TYPE));
-            xmlSerializer.text(acct_type);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TYPE);
-            // commodity
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-            xmlSerializer.text("ISO4217");
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-            String acctCurrencyCode = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_CURRENCY));
-            xmlSerializer.text(acctCurrencyCode);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
-            // commodity scu
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
-            xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
-            // account description
-            // this is optional in Gnc XML, and currently not in the db, so description node
-            // is omitted
-            //
-            // account slots, color, placeholder, default transfer account, favorite
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.text(GncXmlHelper.KEY_PLACEHOLDER);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-            xmlSerializer.text(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) != 0));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-
-            String color = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_COLOR_CODE));
-            if (color != null && color.length() > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.text(GncXmlHelper.KEY_COLOR);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                xmlSerializer.text(color);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            }
-
-            String defaultTransferAcctUUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
-            if (defaultTransferAcctUUID != null && defaultTransferAcctUUID.length() > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.text(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                xmlSerializer.text(defaultTransferAcctUUID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            }
-
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.text(GncXmlHelper.KEY_FAVORITE);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-            xmlSerializer.text(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) != 0));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
-
-            // parent uid
-            String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
-            if (acct_type != "ROOT" && parentUID != null && parentUID.length() > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_PARENT_UID);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                xmlSerializer.text(parentUID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_PARENT_UID);
-            }
-            else
-            {
-                Log.d("export", "root account : " + cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID)));
-            }
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT);
-        }
-        cursor.close();
-    }
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 7dd76f10..61d7e544 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -26,16 +26,11 @@
 import android.database.sqlite.SQLiteStatement;
 import android.util.Log;
 
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.*;
-import org.xmlpull.v1.XmlSerializer;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
 
-import java.io.IOException;
-import java.math.BigDecimal;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.List;
 
 /**
@@ -246,171 +241,13 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
-    public void exportTransactionsWithSplitsToGncXML(
-            XmlSerializer xmlSerializer,
-            String condition) throws IOException{
-        Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
-                        " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID,
-                new String[]{
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_UID + " AS trans_uid",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_NOTES + " AS trans_notes",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
-                        TransactionEntry.TABLE_NAME+"."+TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS trans_recur",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_UID + " AS split_uid",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_MEMO + " AS split_memo",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_TYPE + " AS split_type",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_AMOUNT + " AS split_amount",
-                        SplitEntry.TABLE_NAME+"."+SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"
-                }, condition, null, null, null,
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC , " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
-                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
-
-        String lastTrxUID = "";
-        Currency trxCurrency = null;
-        int fractionDigits = 2;
-        BigDecimal denom = new BigDecimal(100);
-        String denomString = "100";
-        int recur = 0;
-        while (cursor.moveToNext()){
-            String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
-            if (!lastTrxUID.equals(curTrxUID)){ // new transaction starts
-                if (!lastTrxUID.equals("")){ // there's an old transaction, close it
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
-                    if (recur > 0) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                        xmlSerializer.text(Integer.toString(recur));
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                    }
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
-                }
-                // new transaction
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRANSACTION);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-                // transaction id
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_ID);
-                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-                xmlSerializer.text(curTrxUID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_ID);
-                // currency
-                String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
-                trxCurrency = Currency.getInstance(currency);
-                fractionDigits = trxCurrency.getDefaultFractionDigits();
-                int denomInt = (int)Math.pow(10, fractionDigits);
-                denom = new BigDecimal(denomInt);
-                denomString = Integer.toString(denomInt);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-                xmlSerializer.text("ISO4217");
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.text(currency);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
-                // date posted
-                String strDate = GncXmlHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time")));
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_POSTED);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.text(strDate);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
-                // date entered
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.text(strDate);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_ENTERED);
-                // description
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
-                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
-                lastTrxUID = curTrxUID;
-                // slots
-                String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
-                boolean exported = cursor.getInt(cursor.getColumnIndexOrThrow("trans_exported")) == 1;
-                if ((notes != null && notes.length() > 0) || !exported) {
-                    xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SLOTS);
-                    if (notes != null && notes.length() > 0) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.text(GncXmlHelper.KEY_NOTES);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                        xmlSerializer.text(notes);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
-                    }
-                    if (!exported) {
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.text(GncXmlHelper.KEY_EXPORTED);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
-                        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
-                        xmlSerializer.text("false");
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
-                        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
-                    }
-                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SLOTS);
-                }
-                // recurrence period
-                recur = cursor.getInt(cursor.getColumnIndexOrThrow("trans_recur"));
-                // splits start
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
-            }
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLIT);
-            // split id
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ID);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_uid")));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ID);
-            // memo
-            String memo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
-            if (memo != null && memo.length() > 0){
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
-                xmlSerializer.text(memo);
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
-            }
-            // reconciled
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
-            xmlSerializer.text("n");
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
-            // value, in the transaction's currency
-            String trxType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
-            BigDecimal value = new BigDecimal(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")));
-            value = value.multiply(denom);
-            String strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
-            xmlSerializer.text(strValue);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
-            // quantity, in the split account's currency
-            // TODO: multi currency support.
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
-            xmlSerializer.text(strValue);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
-            // account guid
-            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
-            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid")));
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLIT);
-        }
-        if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
-            xmlSerializer.endTag(null,GncXmlHelper.TAG_TRN_SPLITS);
-            if (recur > 0) {
-                xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-                xmlSerializer.text(Integer.toString(recur));
-                xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
-            }
-            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
-        }
+    public Cursor fetchTransactionsWithSplits(String [] columns, String condition, String orderBy) {
+        return mDb.query(DatabaseSchema.TransactionEntry.TABLE_NAME + " , " + DatabaseSchema.SplitEntry.TABLE_NAME +
+                        " ON " + DatabaseSchema.TransactionEntry.TABLE_NAME + "." + DatabaseSchema.TransactionEntry.COLUMN_UID +
+                        " = " + DatabaseSchema.SplitEntry.TABLE_NAME + "." + DatabaseSchema.SplitEntry.COLUMN_TRANSACTION_UID,
+                columns, condition, null, null, null,
+                orderBy);
 
-        cursor.close();
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 53a380f0..6bb14329 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -22,6 +22,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
+import static org.gnucash.android.db.DatabaseSchema.*;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
@@ -50,6 +51,8 @@
 import java.io.OutputStreamWriter;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.math.BigDecimal;
+import java.util.ArrayList;
 import java.util.Currency;
 import java.util.List;
 import java.util.UUID;
@@ -192,6 +195,259 @@ public String generateExport() throws ExporterException{
         return stringWriter.toString();
     }
 
+    private void exportSlots(XmlSerializer xmlSerializer,
+                             List<String> slotKey,
+                             List<String> slotType,
+                             List<String> slotValue) throws IOException {
+        if (slotKey == null || slotType == null || slotValue == null ||
+                slotKey.size() == 0 || slotType.size() != slotKey.size() || slotValue.size() != slotKey.size()) {
+            return;
+        }
+        xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
+        for (int i = 0; i < slotKey.size(); i++) {
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.text(slotKey.get(i));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, slotType.get(i));
+            xmlSerializer.text(slotValue.get(i));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+        }
+        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
+        xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
+    }
+
+    private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
+        Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null);
+        while (cursor.moveToNext()) {
+            // write account
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+            // account name
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_NAME);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_NAME)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_NAME);
+            // account guid
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCT_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID)));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCT_ID);
+            // account type
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TYPE);
+            String acct_type = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_TYPE));
+            xmlSerializer.text(acct_type);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TYPE);
+            // commodity
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.text("ISO4217");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            String acctCurrencyCode = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_CURRENCY));
+            xmlSerializer.text(acctCurrencyCode);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY);
+            // commodity scu
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
+            xmlSerializer.text(Integer.toString((int) Math.pow(10, Currency.getInstance(acctCurrencyCode).getDefaultFractionDigits())));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SCU);
+            // account description
+            // this is optional in Gnc XML, and currently not in the db, so description node
+            // is omitted
+            //
+            // account slots, color, placeholder, default transfer account, favorite
+            ArrayList<String> slotKey = new ArrayList<String>();
+            ArrayList<String> slotType = new ArrayList<String>();
+            ArrayList<String> slotValue = new ArrayList<String>();
+            slotKey.add(GncXmlHelper.KEY_PLACEHOLDER);
+            slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+            slotValue.add(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER)) != 0));
+
+            String color = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_COLOR_CODE));
+            if (color != null && color.length() > 0) {
+                slotKey.add(GncXmlHelper.KEY_COLOR);
+                slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                slotValue.add(color);
+            }
+
+            String defaultTransferAcctUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID));
+            if (defaultTransferAcctUID != null && defaultTransferAcctUID.length() > 0) {
+                slotKey.add(GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT);
+                slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                slotValue.add(defaultTransferAcctUID);
+            }
+
+            slotKey.add(GncXmlHelper.KEY_FAVORITE);
+            slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+            slotValue.add(Boolean.toString(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_FAVORITE)) != 0));
+            exportSlots(xmlSerializer, slotKey, slotType, slotValue);
+
+            // parent uid
+            String parentUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID));
+            if (!acct_type.equals("ROOT") && parentUID != null && parentUID.length() > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_PARENT_UID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_STRING);
+                xmlSerializer.text(parentUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_PARENT_UID);
+            } else {
+                Log.d("export", "root account : " + cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID)));
+            }
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_ACCOUNT);
+        }
+        cursor.close();
+    }
+
+    public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
+        Cursor cursor = mTransactionsDbAdapter.fetchTransactionsWithSplits(
+                new String[]{
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_UID + " AS trans_uid",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_NOTES + " AS trans_notes",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_EXPORTED + " AS trans_exported",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
+                        TransactionEntry.TABLE_NAME+"."+ TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS trans_recur",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_UID + " AS split_uid",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_MEMO + " AS split_memo",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_TYPE + " AS split_type",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_AMOUNT + " AS split_amount",
+                        SplitEntry.TABLE_NAME+"."+ SplitEntry.COLUMN_ACCOUNT_UID + " AS split_acct_uid"
+                }, null,
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC , " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ASC , " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
+
+        String lastTrxUID = "";
+        Currency trxCurrency = null;
+        int fractionDigits = 2;
+        BigDecimal denom = new BigDecimal(100);
+        String denomString = "100";
+        int recur = 0;
+        while (cursor.moveToNext()){
+            String curTrxUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+            if (!lastTrxUID.equals(curTrxUID)) { // new transaction starts
+                if (!lastTrxUID.equals("")) { // there's an old transaction, close it
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLITS);
+                    if (recur > 0) {
+                        xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                        xmlSerializer.text(Integer.toString(recur));
+                        xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                    }
+                    xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
+                }
+                // new transaction
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRANSACTION);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+                // transaction id
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_ID);
+                xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+                xmlSerializer.text(curTrxUID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_ID);
+                // currency
+                String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                trxCurrency = Currency.getInstance(currency);
+                fractionDigits = trxCurrency.getDefaultFractionDigits();
+                int denomInt = (int) Math.pow(10, fractionDigits);
+                denom = new BigDecimal(denomInt);
+                denomString = Integer.toString(denomInt);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.text("ISO4217");
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_SPACE);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.text(currency);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_COMMODITY_ID);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
+                // date posted
+                String strDate = GncXmlHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time")));
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_POSTED);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_POSTED);
+                // date entered
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.text(strDate);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_DATE_ENTERED);
+                // description
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_DESCRIPTION);
+                lastTrxUID = curTrxUID;
+                // slots
+                ArrayList<String> slotKey = new ArrayList<String>();
+                ArrayList<String> slotType = new ArrayList<String>();
+                ArrayList<String> slotValue = new ArrayList<String>();
+
+                String notes = cursor.getString(cursor.getColumnIndexOrThrow("trans_notes"));
+                boolean exported = cursor.getInt(cursor.getColumnIndexOrThrow("trans_exported")) == 1;
+                if (notes != null && notes.length() > 0) {
+                    slotKey.add(GncXmlHelper.KEY_NOTES);
+                    slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                    slotValue.add(notes);
+                }
+                if (!exported) {
+                    slotKey.add(GncXmlHelper.KEY_EXPORTED);
+                    slotType.add(GncXmlHelper.ATTR_VALUE_STRING);
+                    slotValue.add("false");
+                }
+                exportSlots(xmlSerializer, slotKey, slotType, slotValue);
+                // recurrence period, will be write out when all splits are generated.
+                recur = cursor.getInt(cursor.getColumnIndexOrThrow("trans_recur"));
+                // splits start
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLITS);
+            }
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_TRN_SPLIT);
+            // split id
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ID);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_uid")));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ID);
+            // memo
+            String memo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
+            if (memo != null && memo.length() > 0){
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
+                xmlSerializer.text(memo);
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_MEMO);
+            }
+            // reconciled
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
+            xmlSerializer.text("n");
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_RECONCILED_STATE);
+            // value, in the transaction's currency
+            String trxType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
+            BigDecimal value = new BigDecimal(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")));
+            value = value.multiply(denom);
+            String strValue = (trxType.equals("CREDIT") ? "-" : "") + value.stripTrailingZeros().toPlainString() + "/" + denomString;
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
+            xmlSerializer.text(strValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_VALUE);
+            // quantity, in the split account's currency
+            // TODO: multi currency support.
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
+            xmlSerializer.text(strValue);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_QUANTITY);
+            // account guid
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+            xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            xmlSerializer.text(cursor.getString(cursor.getColumnIndexOrThrow("split_acct_uid")));
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SPLIT_ACCOUNT);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRN_SPLIT);
+        }
+        if (!lastTrxUID.equals("")){ // there's an unfinished transaction, close it
+            xmlSerializer.endTag(null,GncXmlHelper.TAG_TRN_SPLITS);
+            if (recur > 0) {
+                xmlSerializer.startTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+                xmlSerializer.text(Integer.toString(recur));
+                xmlSerializer.endTag(null, GncXmlHelper.TAG_RECURRENCE_PERIOD);
+            }
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_TRANSACTION);
+        }
+        cursor.close();
+    }
 
     public void generateExport(Writer writer) throws ExporterException{
         try {
@@ -234,10 +490,10 @@ public void generateExport(Writer writer) throws ExporterException{
             xmlSerializer.endTag(null, GncXmlHelper.TAG_COUNT_DATA);
             // accounts. bulk import does not rely on account order
             // the cursor gather account in arbitrary order
-            mAccountsDbAdapter.exportAccountsToGncXML(xmlSerializer, null, null);
+            exportAccounts(xmlSerializer);
 
             // transactions.
-            mTransactionsDbAdapter.exportTransactionsWithSplitsToGncXML(xmlSerializer, null);
+            exportTransactions(xmlSerializer);
 
             xmlSerializer.endTag(null, GncXmlHelper.TAG_BOOK);
             xmlSerializer.endTag(null, GncXmlHelper.TAG_ROOT);

From 9ede6c763dcf2ff755a6ae6d1097cad58ca0f0a3 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 7 Sep 2014 15:35:48 +0800
Subject: [PATCH 21/68] rewrite Qif Export

Conflicts:
	app/src/org/gnucash/android/db/TransactionsDbAdapter.java
---
 .../gnucash/android/db/TransactionsDbAdapter.java  |  51 ++++++++++
 .../gnucash/android/export/ExporterAsyncTask.java  |  14 ++-
 .../gnucash/android/export/qif/QifExporter.java    | 106 +++++++++++++++++++++
 .../org/gnucash/android/export/qif/QifHelper.java  |   3 +
 4 files changed, 173 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index c532f716..b1096870 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -239,6 +239,53 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
         return transactions;
     }
 
+    public Cursor fetchTransactionsWithSplits(String [] columns, String condition, String orderBy) {
+        return mDb.query(TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
+                        " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                        " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID,
+                columns, condition, null, null, null,
+                orderBy);
+
+    }
+
+    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
+        // table is :
+        // transactions, splits ON transactions.uid = splits.transaction_uid ,
+        // ( SELECT transactions.uid AS trans_acct_t_uid , MAX ( splits.account_uid ) as trans_acct_a_uid FROM
+        //     transactions, splits ON transactions.uid = splits.transaction_uid GROUP BY transactions.uid ) AS trans_acct ON
+        // trans_acct.trans_acct_t_uid = transactions.uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid ,
+        // accounts AS account2 ON account2.uid = splits.split_account_uid
+        //
+        // This is multi table/sub-query join. The third select would pick one Account_UID for each
+        // Transaction, which can be used to order all transactions.
+        // This is used in QIF export, when all transactions are grouped by accounts.
+        // account1 provides information for the grouped account. Splits from the grouped account
+        // can be eliminated with a WHERE clause. Transactions in QIF can be auto balanced.
+        // account2 provides information for the account associated with the split.
+        //
+        // Account, transaction and split Information can be retrieve in a single query.
+        //
+        // Another approach is not to group transactions by account, be prefix each transaction with an account.
+        // It is easier and should also work, never tried though.
+        // By Yongxin Wang
+        return mDb.query(
+                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
+                " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
+                " , ( SELECT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                " AS trans_acct_t_uid , MAX ( " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID +
+                " ) AS trans_acct_a_uid FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
+                " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
+                " GROUP BY " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = " +
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " , " +
+                AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
+                " = trans_acct.trans_acct_a_uid , " + AccountEntry.TABLE_NAME + " AS account2 ON account2." +
+                AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID,
+                columns, condition, null, null, null , orderBy);
+    }
+
     /**
      * Return number of transactions in the database which are non recurring
      * @return Number of transactions
@@ -487,6 +534,10 @@ public int updateTransaction(String transactionUID, String columnKey, String new
         return updateRecord(TransactionEntry.TABLE_NAME, getID(transactionUID), columnKey, newValue);
     }
 
+    public int updateTransaction(ContentValues contentValues, String whereClause, String[] whereArgs){
+        return mDb.update(TransactionEntry.TABLE_NAME, contentValues, whereClause, whereArgs);
+    }
+
     /**
      * Schedules <code>recurringTransaction</code> to be executed at specific intervals.
      * The interval period is packaged within the transaction
diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index c6593dc0..1fa78aad 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -107,7 +107,19 @@ protected Boolean doInBackground(ExportParams... params) {
             }
 
         try {
-            writeOutput(mExporter.generateExport());
+            if (mExportParams.getExportFormat() == ExportFormat.QIF) {
+                File file = new File(mExportParams.getTargetFilepath());
+                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+                try {
+                    ((QifExporter)mExporter).generateExport(writer);
+                }
+                finally {
+                    writer.close();
+                }
+            }
+            else {
+                writeOutput(mExporter.generateExport());
+            }
         } catch (Exception e) {
             e.printStackTrace();
             Log.e(TAG, e.getMessage());
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index bb88c162..5da1be7e 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -15,11 +15,20 @@
  */
 package org.gnucash.android.export.qif;
 
+import android.content.ContentValues;
+import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+
+import org.gnucash.android.app.GnuCashApplication;
+import static org.gnucash.android.db.DatabaseSchema.*;
+import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Transaction;
 
+import java.io.IOException;
+import java.io.Writer;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -62,4 +71,101 @@ public String generateExport() throws ExporterException {
 
         return generateQIF();
     }
+
+    public void generateExport(Writer writer) throws ExporterException , IOException {
+        final String newLine = "\n";
+        TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(GnuCashApplication.getAppContext());
+        try {
+            Cursor cursor = transactionsDbAdapter.fetchTransactionsWithSplitsWithTransactionAccount(
+                    new String[]{
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
+                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
+                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS split_type",
+                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS split_memo",
+                            "account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
+                            "account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
+                            "account1." + AccountEntry.COLUMN_TYPE + " AS acct1_type",
+                            "account2." + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
+                    },
+                    // no recurrence transactions
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                            // in qif, split from the one account entry is not recorded (will be auto balanced)
+                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " != account1." + AccountEntry.COLUMN_UID +
+                            (
+                            mParameters.shouldExportAllTransactions() ?
+                                    "" : " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + "== 0"
+                            ),
+                    "acct1_uid ASC, trans_uid ASC"
+                    );
+            try {
+                String currentAccountUID = "";
+                String currentTransactionUID = "";
+                while (cursor.moveToNext()) {
+                    String accountUID = cursor.getString(cursor.getColumnIndexOrThrow("acct1_uid"));
+                    String transactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+                    if (!transactionUID.equals(currentTransactionUID)) {
+                        if (!currentTransactionUID.equals("")) {
+                            writer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
+                            // end last transaction
+                        }
+                        if (!accountUID.equals(currentAccountUID)) {
+                            // no need to end account
+                            //if (!currentAccountUID.equals("")) {
+                            //    // end last account
+                            //}
+                            // start new account
+                            currentAccountUID = accountUID;
+                            writer.append(QifHelper.ACCOUNT_HEADER).append(newLine);
+                            writer.append(QifHelper.ACCOUNT_NAME_PREFIX)
+                                    .append(cursor.getString(cursor.getColumnIndexOrThrow("acct1_full_name")))
+                                    .append(newLine);
+                            writer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
+                            writer.append(QifHelper.getQifHeader(cursor.getString(cursor.getColumnIndexOrThrow("acct1_type"))))
+                                    .append(newLine);
+                        }
+                        // start new transaction
+                        currentTransactionUID = transactionUID;
+                        writer.append(QifHelper.DATE_PREFIX)
+                                .append(QifHelper.formatDate(cursor.getLong(cursor.getColumnIndexOrThrow("trans_time"))))
+                                .append(newLine);
+                        writer.append(QifHelper.MEMO_PREFIX)
+                                .append(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")))
+                                .append(newLine);
+                    }
+                    // all splits
+                    // amount associated with the header account will not be exported.
+                    // It can be auto balanced when importing to GnuCash
+                    writer.append(QifHelper.SPLIT_CATEGORY_PREFIX)
+                            .append(cursor.getString(cursor.getColumnIndexOrThrow("acct2_full_name")))
+                            .append(newLine);
+                    String splitMemo = cursor.getString(cursor.getColumnIndexOrThrow("split_memo"));
+                    if (splitMemo != null && splitMemo.length() > 0) {
+                        writer.append(QifHelper.SPLIT_MEMO_PREFIX)
+                                .append(splitMemo)
+                                .append(newLine);
+                    }
+                    String splitType = cursor.getString(cursor.getColumnIndexOrThrow("split_type"));
+                    writer.append(QifHelper.SPLIT_AMOUNT_PREFIX)
+                            .append(splitType.equals("DEBIT") ? "-" : "")
+                            .append(cursor.getString(cursor.getColumnIndexOrThrow("split_amount")))
+                            .append(newLine);
+                }
+                if (!currentTransactionUID.equals("")) {
+                    // end last transaction
+                    writer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
+                }
+            }
+            finally {
+                cursor.close();
+            }
+            ContentValues contentValues = new ContentValues();
+            contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
+            transactionsDbAdapter.updateTransaction(contentValues, null, null);
+        }
+        finally {
+            transactionsDbAdapter.close();
+        }
+    }
 }
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index dd5a3f09..9b5deff9 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -80,4 +80,7 @@ public static String getQifHeader(AccountType accountType){
         }
     }
 
+    public static String getQifHeader(String accountType) {
+        return getQifHeader(AccountType.valueOf(accountType));
+    }
 }

From 1479a95e0270a901391eb994b05c2f9d7d8b8f45 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 7 Sep 2014 16:11:50 +0800
Subject: [PATCH 22/68] remove dependency on other commits.

This branch now compiles on itself.
---
 app/src/org/gnucash/android/export/xml/GncXmlHelper.java | 1 +
 1 file changed, 1 insertion(+)

diff --git a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
index a52d9fd7..0b40ba36 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -81,6 +81,7 @@
     public static final String KEY_FAVORITE         = "favorite";
     public static final String KEY_NOTES            = "notes";
     public static final String KEY_DEFAULT_TRANSFER_ACCOUNT = "default_transfer_account";
+    public static final String KEY_EXPORTED         = "exported";
 
     /**
      * Formats dates for the GnuCash XML format

From 9d98f7fac1feccf9d50f0ad0c6ef3eb5288a9e30 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 7 Sep 2014 21:37:55 +0800
Subject: [PATCH 23/68] Balance transactions in QIF export

Unbalanced transactions will be automatically balanced with Imbalance-CURRENCY account
---
 app/src/org/gnucash/android/db/TransactionsDbAdapter.java | 11 ++++++++---
 app/src/org/gnucash/android/export/qif/QifExporter.java   | 15 +++++++++++++++
 2 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index b1096870..21f39efb 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -251,8 +251,9 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
     public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
         // table is :
         // transactions, splits ON transactions.uid = splits.transaction_uid ,
-        // ( SELECT transactions.uid AS trans_acct_t_uid , MAX ( splits.account_uid ) as trans_acct_a_uid FROM
-        //     transactions, splits ON transactions.uid = splits.transaction_uid GROUP BY transactions.uid ) AS trans_acct ON
+        // ( SELECT transactions.uid AS trans_acct_t_uid , MAX ( splits.account_uid ) as trans_acct_a_uid
+        //   TOTAL ( CASE WHEN splits.type = 'DEBIT' THEN splits.amount ELSE - splits.amount END ) AS trans_acct_balance
+        //   FROM transactions, splits ON transactions.uid = splits.transaction_uid GROUP BY transactions.uid ) AS trans_acct ON
         // trans_acct.trans_acct_t_uid = transactions.uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid ,
         // accounts AS account2 ON account2.uid = splits.split_account_uid
         //
@@ -274,7 +275,11 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
                 " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
                 " , ( SELECT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
                 " AS trans_acct_t_uid , MAX ( " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID +
-                " ) AS trans_acct_a_uid FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
+                " ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." +
+                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "." +
+                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM " +
+                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
                 " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
                 " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
                 " GROUP BY " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 5da1be7e..d6d9494e 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -29,6 +29,7 @@
 
 import java.io.IOException;
 import java.io.Writer;
+import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -84,8 +85,10 @@ public void generateExport(Writer writer) throws ExporterException , IOException
                             SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
                             SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS split_type",
                             SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS split_memo",
+                            "trans_acct.trans_acct_balance AS trans_acct_balance",
                             "account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
                             "account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
+                            "account1." + AccountEntry.COLUMN_CURRENCY + " AS acct1_currency",
                             "account1." + AccountEntry.COLUMN_TYPE + " AS acct1_type",
                             "account2." + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
                     },
@@ -133,6 +136,18 @@ public void generateExport(Writer writer) throws ExporterException , IOException
                         writer.append(QifHelper.MEMO_PREFIX)
                                 .append(cursor.getString(cursor.getColumnIndexOrThrow("trans_desc")))
                                 .append(newLine);
+                        // deal with imbalance first
+                        double imbalance = cursor.getDouble(cursor.getColumnIndexOrThrow("trans_acct_balance"));
+                        BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
+                        if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
+                            writer.append(QifHelper.SPLIT_CATEGORY_PREFIX)
+                                    .append("Imbalance-")
+                                    .append(cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency")))
+                                    .append(newLine);
+                            writer.append(QifHelper.SPLIT_AMOUNT_PREFIX)
+                                    .append(decimalImbalance.toPlainString())
+                                    .append(newLine);
+                        }
                     }
                     // all splits
                     // amount associated with the header account will not be exported.

From e1c9983cb7a85c7922381a75b56108b737c218ac Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 8 Sep 2014 15:55:37 +0200
Subject: [PATCH 24/68] Updated copyright notices

---
 CONTRIBUTORS                                            |  5 +++--
 app/src/org/gnucash/android/db/AccountsDbAdapter.java   |  1 +
 app/src/org/gnucash/android/db/SplitsDbAdapter.java     |  1 +
 .../org/gnucash/android/db/TransactionsDbAdapter.java   |  1 +
 .../org/gnucash/android/export/ExporterAsyncTask.java   |  3 ++-
 app/src/org/gnucash/android/export/qif/QifExporter.java |  1 +
 app/src/org/gnucash/android/export/qif/QifHelper.java   |  1 +
 .../org/gnucash/android/export/xml/GncXmlExporter.java  |  1 +
 app/src/org/gnucash/android/importer/GncXmlHandler.java |  1 +
 .../org/gnucash/android/importer/GncXmlImporter.java    |  1 +
 .../gnucash/android/ui/account/AccountsActivity.java    |  9 ++-------
 .../android/ui/transaction/TransactionsActivity.java    | 17 ++++-------------
 .../org/gnucash/android/ui/util/AccountBalanceTask.java |  1 +
 13 files changed, 20 insertions(+), 23 deletions(-)

diff --git a/CONTRIBUTORS b/CONTRIBUTORS
index b99b8384..ac8d111d 100644
--- a/CONTRIBUTORS
+++ b/CONTRIBUTORS
@@ -3,7 +3,7 @@ several different people.
 Appreciation goes to Muslim Chochlov and the to whole GnuCash community for guiding the 
 project through the early phases and providing valuable feedback.
 
-The following people contributed translations to GnuCash for Android:
+The following people contributed (code and translations) to GnuCash for Android:
 Christian Stimming <christian@cstimming.de>
 Cristian Marchi <cri.penta@gmail.com>
 Menelaos Maglis <mmaglis@metacom.gr>
@@ -17,4 +17,5 @@ Sigurd Gartmann <sigurdga-github@sigurdga.no>
 Pedro Abel <pedroabel@gmail.com>
 windwarrior <lennartbuit@gmail.com>
 Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
-Lei Xiao Bao <lxbzmy@gmail.com>
\ No newline at end of file
+Lei Xiao Bao <lxbzmy@gmail.com>
+Yongxin Wang <fefe.wyx@gmail.com>
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index d897e99d..b98d815a 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index 1105e262..cea52d41 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index b21ff4a4..7d3402e3 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 1fa78aad..81711577 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -1,5 +1,6 @@
 /*
- * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index d6d9494e..6f9e249c 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index 9b5deff9..3a5e3d08 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 6bb14329..9d7e3451 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 721c7648..3f203c98 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/importer/GncXmlImporter.java b/app/src/org/gnucash/android/importer/GncXmlImporter.java
index 50e5c77d..e8de150d 100644
--- a/app/src/org/gnucash/android/importer/GncXmlImporter.java
+++ b/app/src/org/gnucash/android/importer/GncXmlImporter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index fa382c29..0b6cc94f 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -1,5 +1,6 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -268,12 +269,6 @@ private void init() {
 
     }
 
-     @Override
-    protected void onResume() {
-        super.onResume();
-        //TransactionsActivity.sLastTitleColor = -1;
-    }
-
     @Override
     protected void onDestroy() {
         super.onDestroy();
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 77be09e6..47dd7c51 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -124,12 +125,6 @@
      */
     private Cursor mAccountsCursor = null;
 
-    /**
-     * This is the last known color for the title indicator.
-     * This is used to remember the color of the top level account if the child account doesn't have one.
-     */
-    //public static int sLastTitleColor = -1;
-
     private TextView mSectionHeaderTransactions;
     private TitlePageIndicator mTitlePageIndicator;
 
@@ -281,9 +276,6 @@ protected void onCreate(Bundle savedInstanceState) {
         mTitlePageIndicator = (TitlePageIndicator) findViewById(R.id.titles);
         mSectionHeaderTransactions = (TextView) findViewById(R.id.section_header_transactions);
 
-        //if (sLastTitleColor == -1) //if this is first launch of app. Previous launches would have set the color already
-        //    sLastTitleColor = getResources().getColor(R.color.title_green);
-
 		mAccountId = getIntent().getLongExtra(
                 UxArgument.SELECTED_ACCOUNT_ID, -1);
 
@@ -324,7 +316,6 @@ private void initializeCreateOrEditTransaction() {
             mSectionHeaderTransactions.setText(R.string.title_add_transaction);
             args.putLong(UxArgument.SELECTED_ACCOUNT_ID, mAccountId);
         }
-        //mSectionHeaderTransactions.setBackgroundColor(sLastTitleColor);
         showTransactionFormFragment(args);
     }
 
@@ -345,9 +336,9 @@ private void setTitleIndicatorColor() {
         if (colorCode != null){
             iColor = Color.parseColor(colorCode);
         } else {
-            String UIDParent = mAccountsDbAdapter.getAccountUID(mAccountId);
-            while ((UIDParent = mAccountsDbAdapter.getParentAccountUID(UIDParent)) != null) {
-                colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountsDbAdapter.getAccountID(UIDParent));
+            String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
+            while ((accountUID = mAccountsDbAdapter.getParentAccountUID(accountUID)) != null) {
+                colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountsDbAdapter.getAccountID(accountUID));
                 if (colorCode != null) {
                     iColor = Color.parseColor(colorCode);
                     break;
diff --git a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
index 63864c77..dcb6a068 100644
--- a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
+++ b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

From 763598d7bb13e324d7ea75ce53d4f6f6fba11951 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 8 Sep 2014 16:19:33 +0200
Subject: [PATCH 25/68] Updated zh translation

---
 app/res/values-zh/strings.xml | 42 ++++++++++++++++++++----------------------
 1 file changed, 20 insertions(+), 22 deletions(-)

diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index fc21bbbd..21ca7414 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -390,28 +390,26 @@
     </string-array>
     <string name="title_scheduled_transactions"></string>
     <string name="title_select_export_destination">Select destination for export</string>
-    <string name="hint_split_memo">Memo</string>
-    <string name="label_spend">Spend</string>
-    <string name="label_receive">Receive</string>
-    <string name="label_withdrawal">Withdrawal</string>
-    <string name="label_deposit">Deposit</string>
-    <string name="label_payment">Payment</string>
-    <string name="label_charge">Charge</string>
-    <string name="label_decrease">Decrease</string>
-    <string name="label_increase">Increase</string>
-    <string name="label_income">Income</string>
-    <string name="label_rebate">Rebate</string>
-    <string name="label_expense">Expense</string>
-    <string name="label_bill">Bill</string>
-    <string name="label_invoice">Invoice</string>
-    <string name="label_buy">Buy</string>
-    <string name="label_sell">Sell</string>
-    <string name="label_repeats">Repeats</string>
-    <string name="label_account_balance">Balance:</string>
-    <string name="toast_no_recent_backup">No recent backup found</string>
+    <string name="hint_split_memo"></string>
+    <string name="label_spend"></string>
+    <string name="label_receive"></string>
+    <string name="label_withdrawal"></string>
+    <string name="label_deposit"></string>
+    <string name="label_payment"></string>
+    <string name="label_charge">charge</string>
+    <string name="label_decrease"></string>
+    <string name="label_increase"></string>
+    <string name="label_income"></string>
+    <string name="label_rebate">Rebate</string>
+    <string name="label_expense">Expense</string>
+    <string name="label_bill"></string>
+    <string name="label_invoice"></string>
+    <string name="label_buy"></string>
+    <string name="label_sell"></string>
+    <string name="label_repeats"></string>
+    <string name="toast_no_recent_backup"></string>
     <string name="account_name_opening_balances"></string>
     <string name="account_name_equity"></string>
-    <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
-    </string>
-    <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="summary_save_opening_balances"></string>
+    <string name="title_save_opening_balances"></string>
 </resources>

From aba812f6c2c05573b0317a71c5613ae485d26101 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Tue, 9 Sep 2014 20:33:10 +0800
Subject: [PATCH 26/68] Switch to the new interface of exporter.

For OFX, the old interface is used as a proxy.
For QIF and GncXML, old interface and related methods in QifExpoter, GncXmlExport, Account (toQIF, toGncXML), Transaction (toQIF, toGncXML), and Split (toGncXML) are removed
---
 .../org/gnucash/android/db/MigrationHelper.java    |   2 +-
 app/src/org/gnucash/android/export/Exporter.java   |   5 +-
 .../gnucash/android/export/ExporterAsyncTask.java  |  32 +----
 .../gnucash/android/export/ofx/OfxExporter.java    |  14 ++-
 .../gnucash/android/export/qif/QifExporter.java    |  37 +-----
 .../gnucash/android/export/xml/GncXmlExporter.java | 137 +--------------------
 app/src/org/gnucash/android/model/Account.java     | 101 ---------------
 app/src/org/gnucash/android/model/Split.java       |  38 ------
 app/src/org/gnucash/android/model/Transaction.java | 130 -------------------
 9 files changed, 32 insertions(+), 464 deletions(-)

diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index b71decf1..860746b5 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -136,7 +136,7 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) throws IOEx
 
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                 new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
-        writer.write(exporter.generateExport());
+        exporter.generateExport(writer);
 
         writer.flush();
         writer.close();
diff --git a/app/src/org/gnucash/android/export/Exporter.java b/app/src/org/gnucash/android/export/Exporter.java
index d70413f1..9865de12 100644
--- a/app/src/org/gnucash/android/export/Exporter.java
+++ b/app/src/org/gnucash/android/export/Exporter.java
@@ -24,6 +24,7 @@
 
 import java.io.File;
 import java.io.FileFilter;
+import java.io.Writer;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
@@ -134,10 +135,10 @@ public boolean accept(File file) {
 
     /**
      * Generates the export output
-     * @return Export output as String
+     * @param writer A Writer to export result to
      * @throws ExporterException if an error occurs during export
      */
-    public abstract String generateExport() throws ExporterException;
+    public abstract void generateExport(Writer writer) throws ExporterException;
 
     public static class ExporterException extends RuntimeException{
 
diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 81711577..796e1b58 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -108,18 +108,13 @@ protected Boolean doInBackground(ExportParams... params) {
             }
 
         try {
-            if (mExportParams.getExportFormat() == ExportFormat.QIF) {
-                File file = new File(mExportParams.getTargetFilepath());
-                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-                try {
-                    ((QifExporter)mExporter).generateExport(writer);
-                }
-                finally {
-                    writer.close();
-                }
+            File file = new File(mExportParams.getTargetFilepath());
+            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+            try {
+                mExporter.generateExport(writer);
             }
-            else {
-                writeOutput(mExporter.generateExport());
+            finally {
+                writer.close();
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -199,21 +194,6 @@ protected void onPostExecute(Boolean exportResult) {
     }
 
     /**
-     * Writes out the String containing the exported data to disk
-     * @param exportOutput String containing exported data
-     * @throws IOException if the write fails
-     */
-    private void writeOutput(String exportOutput) throws IOException {
-        File file = new File(mExportParams.getTargetFilepath());
-
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        writer.write(exportOutput);
-
-        writer.flush();
-        writer.close();
-    }
-
-    /**
      * Starts an intent chooser to allow the user to select an activity to receive
      * the exported OFX file
      * @param path String path to the file on disk
diff --git a/app/src/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
index ae40c2fc..c902c761 100644
--- a/app/src/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
@@ -16,6 +16,7 @@
 
 package org.gnucash.android.export.ofx;
 
+import java.io.IOException;
 import java.io.StringWriter;
 import java.io.Writer;
 import java.util.List;
@@ -100,7 +101,6 @@ private void generateOfx(Document doc, Element parent){
 		accountsDbAdapter.close();
 	}
 
-    @Override
     public String generateExport() throws ExporterException {
         mAccountsList = mParameters.shouldExportAllTransactions() ?
                 mAccountsDbAdapter.getAllAccounts() : mAccountsDbAdapter.getExportableAccounts();
@@ -108,7 +108,7 @@ public String generateExport() throws ExporterException {
 
         DocumentBuilderFactory docFactory = DocumentBuilderFactory
                 .newInstance();
-        DocumentBuilder docBuilder = null;
+        DocumentBuilder docBuilder;
         try {
             docBuilder = docFactory.newDocumentBuilder();
         } catch (ParserConfigurationException e) {
@@ -144,6 +144,16 @@ public String generateExport() throws ExporterException {
         }
     }
 
+    @Override
+    public void generateExport(Writer writer) throws ExporterException {
+        try {
+            writer.write(generateExport());
+        }
+        catch (IOException e) {
+            throw new ExporterException(mParameters, e);
+        }
+    }
+
     /**
      * Writes out the document held in <code>node</code> to <code>outputWriter</code>
      * @param node {@link Node} containing the OFX document structure. Usually the parent node
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 6f9e249c..8d8494b0 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -25,21 +25,15 @@
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Transaction;
 
 import java.io.IOException;
 import java.io.Writer;
 import java.math.BigDecimal;
-import java.util.ArrayList;
-import java.util.List;
 
 /**
  * @author Ngewi
  */
 public class QifExporter extends Exporter{
-    private List<Account> mAccountsList;
-
     public QifExporter(ExportParams params){
         super(params);
     }
@@ -48,33 +42,8 @@ public QifExporter(ExportParams params,  SQLiteDatabase db){
         super(params, db);
     }
 
-    private String generateQIF(){
-        StringBuffer qifBuffer = new StringBuffer();
-
-        List<String> exportedTransactions = new ArrayList<String>();
-        for (Account account : mAccountsList) {
-            if (account.getTransactionCount() == 0)
-                continue;
-
-            qifBuffer.append(account.toQIF(mParameters.shouldExportAllTransactions(), exportedTransactions) + "\n");
-
-            //mark as exported
-            mAccountsDbAdapter.markAsExported(account.getUID());
-        }
-        mAccountsDbAdapter.close();
-
-        return qifBuffer.toString();
-    }
-
     @Override
-    public String generateExport() throws ExporterException {
-        mAccountsList = mParameters.shouldExportAllTransactions() ?
-                mAccountsDbAdapter.getAllAccounts() : mAccountsDbAdapter.getExportableAccounts();
-
-        return generateQIF();
-    }
-
-    public void generateExport(Writer writer) throws ExporterException , IOException {
+    public void generateExport(Writer writer) throws ExporterException {
         final String newLine = "\n";
         TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(GnuCashApplication.getAppContext());
         try {
@@ -180,6 +149,10 @@ public void generateExport(Writer writer) throws ExporterException , IOException
             contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
             transactionsDbAdapter.updateTransaction(contentValues, null, null);
         }
+        catch (IOException e)
+        {
+            throw new ExporterException(mParameters, e);
+        }
         finally {
             transactionsDbAdapter.close();
         }
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 9d7e3451..b2a09103 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -21,36 +21,19 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
 import static org.gnucash.android.db.DatabaseSchema.*;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.model.Account;
-import org.gnucash.android.model.Transaction;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
 import org.xmlpull.v1.XmlPullParserFactory;
 import org.xmlpull.v1.XmlSerializer;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
 import java.io.BufferedOutputStream;
-import java.io.BufferedWriter;
 import java.io.FileOutputStream;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
-import java.io.StringWriter;
 import java.io.Writer;
 import java.math.BigDecimal;
 import java.util.ArrayList;
@@ -66,7 +49,6 @@
  */
 public class GncXmlExporter extends Exporter{
 
-    private Document mDocument;
     private TransactionsDbAdapter mTransactionsDbAdapter;
 
     public GncXmlExporter(ExportParams params){
@@ -85,117 +67,6 @@ public GncXmlExporter(ExportParams params, SQLiteDatabase db){
         mTransactionsDbAdapter = new TransactionsDbAdapter(db);
     }
 
-    /**
-     * Generate GnuCash XML
-     * @throws ParserConfigurationException if there was an error when generating the XML
-     */
-    private void generateGncXml() throws ParserConfigurationException {
-        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
-//        docFactory.setNamespaceAware(true);
-        DocumentBuilder documentBuilder = docFactory.newDocumentBuilder();
-
-        mDocument = documentBuilder.newDocument();
-        mDocument.setXmlVersion("1.0");
-        mDocument.setXmlStandalone(true);
-
-        Element rootElement = mDocument.createElement(GncXmlHelper.TAG_ROOT);
-        rootElement.setAttribute("xmlns:gnc",    "http://www.gnucash.org/XML/gnc");
-        rootElement.setAttribute("xmlns:act",    "http://www.gnucash.org/XML/act");
-        rootElement.setAttribute("xmlns:book",   "http://www.gnucash.org/XML/book");
-        rootElement.setAttribute("xmlns:cd",     "http://www.gnucash.org/XML/cd");
-        rootElement.setAttribute("xmlns:cmdty",  "http://www.gnucash.org/XML/cmdty");
-        rootElement.setAttribute("xmlns:price",  "http://www.gnucash.org/XML/price");
-        rootElement.setAttribute("xmlns:slot",   "http://www.gnucash.org/XML/slot");
-        rootElement.setAttribute("xmlns:split",  "http://www.gnucash.org/XML/split");
-        rootElement.setAttribute("xmlns:trn",    "http://www.gnucash.org/XML/trn");
-        rootElement.setAttribute("xmlns:ts",     "http://www.gnucash.org/XML/ts");
-
-        Element bookCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        bookCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, GncXmlHelper.ATTR_VALUE_BOOK);
-        bookCountNode.appendChild(mDocument.createTextNode("1"));
-        rootElement.appendChild(bookCountNode);
-
-        Element bookNode = mDocument.createElement(GncXmlHelper.TAG_BOOK);
-        bookNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        rootElement.appendChild(bookNode);
-
-        Element bookIdNode = mDocument.createElement(GncXmlHelper.TAG_BOOK_ID);
-        bookIdNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        bookIdNode.appendChild(mDocument.createTextNode(UUID.randomUUID().toString().replaceAll("-", "")));
-        bookNode.appendChild(bookIdNode);
-
-        Element cmdtyCountData = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        cmdtyCountData.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
-        cmdtyCountData.appendChild(mDocument.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
-        bookNode.appendChild(cmdtyCountData);
-
-        Element accountCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        accountCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
-        int accountCount = mAccountsDbAdapter.getTotalAccountCount();
-        accountCountNode.appendChild(mDocument.createTextNode(String.valueOf(accountCount)));
-        bookNode.appendChild(accountCountNode);
-
-        Element transactionCountNode = mDocument.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        transactionCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
-        int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
-        transactionCountNode.appendChild(mDocument.createTextNode(String.valueOf(transactionCount)));
-        bookNode.appendChild(transactionCountNode);
-
-        String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
-        Account rootAccount = mAccountsDbAdapter.getAccount(rootAccountUID);
-        if (rootAccount != null){
-            rootAccount.toGncXml(mDocument, bookNode);
-        }
-        Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
-
-        //create accounts hierarchically by ordering by full name
-        if (accountsCursor != null){
-            while (accountsCursor.moveToNext()){
-                long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
-                Account account = mAccountsDbAdapter.getAccount(id);
-                account.toGncXml(mDocument, bookNode);
-            }
-            accountsCursor.close();
-        }
-
-        //more memory efficient approach than loading all transactions into memory first
-        Cursor transactionsCursor = mTransactionsDbAdapter.fetchAllRecords();
-        if (transactionsCursor != null){
-            while (transactionsCursor.moveToNext()){
-                Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(transactionsCursor);
-                transaction.toGncXml(mDocument, bookNode);
-            }
-            transactionsCursor.close();
-        }
-
-        mDocument.appendChild(rootElement);
-        mAccountsDbAdapter.close();
-        mTransactionsDbAdapter.close();
-    }
-
-    @Override
-    public String generateExport() throws ExporterException{
-        StringWriter stringWriter = new StringWriter();
-        try {
-            generateGncXml();
-            TransformerFactory transformerFactory = TransformerFactory.newInstance();
-
-            Transformer transformer = transformerFactory.newTransformer();
-
-            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-            DOMSource source = new DOMSource(mDocument);
-            StreamResult result = new StreamResult(stringWriter);
-
-            transformer.transform(source, result);
-            stringWriter.flush();
-        } catch (Exception e) {
-            e.printStackTrace();
-            throw new ExporterException(mParameters, e);
-        }
-        return stringWriter.toString();
-    }
-
     private void exportSlots(XmlSerializer xmlSerializer,
                              List<String> slotKey,
                              List<String> slotType,
@@ -320,8 +191,8 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
                         TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " ASC ");
 
         String lastTrxUID = "";
-        Currency trxCurrency = null;
-        int fractionDigits = 2;
+        Currency trxCurrency;
+        int fractionDigits;
         BigDecimal denom = new BigDecimal(100);
         String denomString = "100";
         int recur = 0;
@@ -349,7 +220,8 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
                 String currency = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
                 trxCurrency = Currency.getInstance(currency);
                 fractionDigits = trxCurrency.getDefaultFractionDigits();
-                int denomInt = (int) Math.pow(10, fractionDigits);
+                int denomInt;
+                denomInt = (int) Math.pow(10, fractionDigits);
                 denom = new BigDecimal(denomInt);
                 denomString = Integer.toString(denomInt);
                 xmlSerializer.startTag(null, GncXmlHelper.TAG_TRX_CURRENCY);
@@ -450,6 +322,7 @@ public void exportTransactions(XmlSerializer xmlSerializer) throws IOException {
         cursor.close();
     }
 
+    @Override
     public void generateExport(Writer writer) throws ExporterException{
         try {
             String[] namespaces = new String[] {"gnc", "act", "book", "cd", "cmdty", "price", "slot", "split", "trn", "ts"};
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index 319667e8..c51e9351 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -541,105 +541,4 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		parent.appendChild(statementTransactions);
 				
 	}
-
-    /**
-     * Exports the account info and transactions in the QIF format
-     * @param exportAllTransactions Flag to determine whether to export all transactions, or only new transactions since last export
-     * @param exportedTransactionUIDs List of unique IDs of transactions which have already been exported (in the current session). Used to avoid duplicating splits
-     * @return QIF representation of the account information
-     */
-    public String toQIF(boolean exportAllTransactions, List<String> exportedTransactionUIDs) {
-        StringBuilder accountQIFBuilder = new StringBuilder();
-        final String newLine = "\n";
-
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
-        String fullyQualifiedAccountName = accountsDbAdapter.getFullyQualifiedAccountName(mUID);
-        accountsDbAdapter.close();
-
-        accountQIFBuilder.append(QifHelper.ACCOUNT_HEADER).append(newLine);
-        accountQIFBuilder.append(QifHelper.ACCOUNT_NAME_PREFIX).append(fullyQualifiedAccountName).append(newLine);
-        accountQIFBuilder.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
-
-        String header = QifHelper.getQifHeader(mAccountType);
-        accountQIFBuilder.append(header + newLine);
-
-        for (Transaction transaction : mTransactionsList) {
-            if (!exportAllTransactions && transaction.isExported())
-                continue;
-            if (exportedTransactionUIDs.contains(transaction.getUID()))
-                continue;
-
-            accountQIFBuilder.append(transaction.toQIF(mUID) + newLine);
-            exportedTransactionUIDs.add(transaction.getUID());
-        }
-        return accountQIFBuilder.toString();
-    }
-
-    /**
-     * Method which generates the GnuCash XML DOM for this account
-     * @param doc {@link org.w3c.dom.Document} for creating nodes
-     * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
-     */
-    public void toGncXml(Document doc, Element rootNode) {
-        Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
-        nameNode.appendChild(doc.createTextNode(mName));
-
-        Element idNode = doc.createElement(GncXmlHelper.TAG_ACCT_ID);
-        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element typeNode = doc.createElement(GncXmlHelper.TAG_TYPE);
-        typeNode.appendChild(doc.createTextNode(mAccountType.name()));
-
-        Element commodityNode = doc.createElement(GncXmlHelper.TAG_COMMODITY);
-        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
-        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
-        commodityNode.appendChild(cmdtySpacenode);
-        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
-        cmdtyIdNode.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));
-        commodityNode.appendChild(cmdtyIdNode);
-
-        Element commodityScuNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SCU);
-        int fractionDigits = mCurrency.getDefaultFractionDigits();
-        commodityScuNode.appendChild(doc.createTextNode(Integer.toString((int) Math.pow(10, fractionDigits))));
-
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_ACCT_DESCRIPTION);
-        descriptionNode.appendChild(doc.createTextNode(mName));
-
-        Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
-        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_PLACEHOLDER,
-                Boolean.toString(mIsPlaceholderAccount), GncXmlHelper.ATTR_VALUE_STRING));
-
-        if (mColorCode != null && mColorCode.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode, GncXmlHelper.ATTR_VALUE_STRING));
-        }
-
-        if (mDefaultTransferAccountUID != null && mDefaultTransferAccountUID.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT, mDefaultTransferAccountUID, "guid"));
-        }
-
-        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc,
-                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite), GncXmlHelper.ATTR_VALUE_STRING));
-
-        Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
-        accountNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        accountNode.appendChild(nameNode);
-        accountNode.appendChild(idNode);
-        accountNode.appendChild(typeNode);
-        accountNode.appendChild(commodityNode);
-        accountNode.appendChild(commodityScuNode);
-        accountNode.appendChild(descriptionNode);
-        accountNode.appendChild(acctSlotsNode);
-
-
-        if (mParentAccountUID != null && mParentAccountUID.trim().length() > 0){
-            Element parentAccountNode = doc.createElement(GncXmlHelper.TAG_PARENT_UID);
-            parentAccountNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            parentAccountNode.appendChild(doc.createTextNode(mParentAccountUID));
-            accountNode.appendChild(parentAccountNode);
-        }
-
-        rootNode.appendChild(accountNode);
-    }
-
 }
diff --git a/app/src/org/gnucash/android/model/Split.java b/app/src/org/gnucash/android/model/Split.java
index 41961848..e62cb508 100644
--- a/app/src/org/gnucash/android/model/Split.java
+++ b/app/src/org/gnucash/android/model/Split.java
@@ -188,42 +188,4 @@ public static Split parseSplit(String splitString) {
         }
         return split;
     }
-
-    /**
-     * Creates a GnuCash XML representation of this split
-     * @param doc XML {@link org.w3c.dom.Document} for creating the nodes
-     * @param rootNode Parent node to append the split XML to
-     */
-    public void toGncXml(Document doc, Element rootNode) {
-        Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
-        idNode.setAttribute("type", "guid");
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element memoNode = doc.createElement(GncXmlHelper.TAG_SPLIT_MEMO);
-        if (mMemo != null)
-            memoNode.appendChild(doc.createTextNode(mMemo));
-
-        Element stateNode = doc.createElement(GncXmlHelper.TAG_RECONCILED_STATE);
-        stateNode.appendChild(doc.createTextNode("n"));
-
-        Element valueNode = doc.createElement(GncXmlHelper.TAG_SPLIT_VALUE);
-        valueNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
-
-        Element quantityNode = doc.createElement(GncXmlHelper.TAG_SPLIT_QUANTITY);
-        quantityNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
-
-        Element accountNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ACCOUNT);
-        accountNode.setAttribute("type", "guid");
-        accountNode.appendChild(doc.createTextNode(mAccountUID));
-
-        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRN_SPLIT);
-        splitNode.appendChild(idNode);
-        splitNode.appendChild(memoNode);
-        splitNode.appendChild(stateNode);
-        splitNode.appendChild(valueNode);
-        splitNode.appendChild(quantityNode);
-        splitNode.appendChild(accountNode);
-
-        rootNode.appendChild(splitNode);
-    }
 }
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index d76982ee..3c14e1b7 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -515,77 +515,6 @@ public Element toOFX(Document doc, String accountUID){
 	}
 
     /**
-     * Builds a QIF entry representing this transaction
-     * @return String QIF representation of this transaction
-     */
-    public String toQIF(String accountUID){
-        final String newLine = "\n";
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
-        //all transactions are double transactions
-        String imbalanceAccountName = AccountsDbAdapter.getImbalanceAccountName(Currency.getInstance(mCurrencyCode));
-
-        StringBuilder transactionQIFBuilder = new StringBuilder();
-
-        transactionQIFBuilder.append(QifHelper.DATE_PREFIX).append(QifHelper.formatDate(mTimestamp)).append(newLine);
-        transactionQIFBuilder.append(QifHelper.MEMO_PREFIX).append(mDescription).append(newLine);
-
-        List<String> processedSplitUIDs = new ArrayList<String>();
-        final List<Split> splitList = getSplits();
-        if (splitList.size() > 2){
-            for (Split split : splitList) {
-                if (split.getAccountUID().equals(accountUID)){
-                    Money amount = split.getAmount();
-
-                    if (split.getType() == TransactionType.CREDIT)
-                        amount = amount.negate();
-
-                    transactionQIFBuilder.append(QifHelper.AMOUNT_PREFIX).append(amount.toPlainString())
-                            .append(newLine);
-                    processedSplitUIDs.add(split.getUID());
-                    break;
-                }
-            }
-        }
-        for (Split split : splitList) {
-            if (split.getAccountUID().equals(accountUID) || processedSplitUIDs.contains(split.getUID()))
-                continue;
-
-            String splitAccountName = accountsDbAdapter.getFullyQualifiedAccountName(split.getAccountUID());
-            transactionQIFBuilder.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(splitAccountName).append(newLine);
-
-            String memo = split.getMemo();
-            if (memo != null && memo.length() > 0) {
-                transactionQIFBuilder.append(QifHelper.SPLIT_MEMO_PREFIX).append(memo).append(newLine);
-            }
-            Money amount = split.getAmount();
-            if (split.getAccountUID().equals(accountUID)) {
-                if (split.getType() == TransactionType.CREDIT)
-                    amount = amount.negate();
-            } else {
-                if (split.getType() == TransactionType.DEBIT)
-                    amount = amount.negate();
-            }
-            transactionQIFBuilder.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(amount.asString()).append(newLine);
-        }
-        Money imbalanceAmount = getImbalance();
-        if (imbalanceAmount.asBigDecimal().compareTo(new BigDecimal(0)) != 0){
-            AccountType accountType = accountsDbAdapter.getAccountType(accountUID);
-            TransactionType imbalanceType = Transaction.getTypeForBalance(accountType,imbalanceAmount.isNegative());
-            imbalanceAmount = imbalanceAmount.absolute();
-            if (imbalanceType == TransactionType.DEBIT){
-                imbalanceAmount = imbalanceAmount.negate();
-            }
-            transactionQIFBuilder.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(imbalanceAccountName).append(newLine);
-            transactionQIFBuilder.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(imbalanceAmount.asString()).append(newLine);
-        }
-
-        transactionQIFBuilder.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
-
-        accountsDbAdapter.close();
-        return transactionQIFBuilder.toString();
-    }
-
-    /**
      * Creates an Intent with arguments from the <code>transaction</code>.
      * This intent can be broadcast to create a new transaction
      * @param transaction Transaction used to create intent
@@ -604,63 +533,4 @@ public static Intent createIntent(Transaction transaction){
         intent.putExtra(Transaction.EXTRA_SPLITS, stringBuilder.toString());
         return intent;
     }
-
-    public void toGncXml(Document doc, Element rootElement) {
-        Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
-        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element currencyNode = doc.createElement(GncXmlHelper.TAG_TRX_CURRENCY);
-        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
-        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
-        currencyNode.appendChild(cmdtySpacenode);
-        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
-        cmdtyIdNode.appendChild(doc.createTextNode(mCurrencyCode));
-        currencyNode.appendChild(cmdtyIdNode);
-
-        Element datePostedNode = doc.createElement(GncXmlHelper.TAG_DATE_POSTED);
-        Element datePNode = doc.createElement(GncXmlHelper.TAG_DATE);
-        datePNode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
-        datePostedNode.appendChild(datePNode);
-
-        Element dateEneteredNode = doc.createElement(GncXmlHelper.TAG_DATE_ENTERED);
-        Element dateENode = doc.createElement(GncXmlHelper.TAG_DATE);
-        dateENode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
-        dateEneteredNode.appendChild(dateENode);
-
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRN_DESCRIPTION);
-        if (mDescription != null) {
-            descriptionNode.appendChild(doc.createTextNode(mDescription));
-        }
-
-        Element trnSlotsNode = doc.createElement(GncXmlHelper.TAG_TRN_SLOTS);
-        if (mNotes != null && mNotes.length() > 0) {
-            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes, GncXmlHelper.ATTR_VALUE_STRING));
-            //TODO: Consider adding future transactions date as slot here too
-        }
-        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRN_SPLITS);
-        for (Split split : mSplitList) {
-            split.toGncXml(doc, trnSplits);
-        }
-
-        Element transactionNode = doc.createElement(GncXmlHelper.TAG_TRANSACTION);
-        transactionNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        transactionNode.appendChild(idNode);
-        transactionNode.appendChild(currencyNode);
-        transactionNode.appendChild(datePostedNode);
-        transactionNode.appendChild(dateEneteredNode);
-        transactionNode.appendChild(descriptionNode);
-        if (mNotes != null && mNotes.length() > 0){
-            transactionNode.appendChild(trnSlotsNode);
-        }
-        //TODO: Improve xml compatibilty with desktop for scheduled actions
-        if (mRecurrencePeriod != 0) {
-            Element recurrenceNode = doc.createElement(GncXmlHelper.TAG_RECURRENCE_PERIOD);
-            recurrenceNode.appendChild(doc.createTextNode(String.valueOf(mRecurrencePeriod)));
-            transactionNode.appendChild(recurrenceNode);
-        }
-        transactionNode.appendChild(trnSplits);
-
-        rootElement.appendChild(transactionNode);
-    }
 }

From b6e59ce6e3bab1f0bba112a4844cb1ef19d0d8c8 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 11 Sep 2014 21:33:18 +0800
Subject: [PATCH 27/68] QIF export refinement

Try best effort to keep splits memo. The split whose account to chosen as group account will lose its split memo. Now we try to pick one without split memo as group account.

Sort all transactions by time.
---
 .../gnucash/android/db/TransactionsDbAdapter.java  | 22 +++++++++++++++++++---
 .../gnucash/android/export/qif/QifExporter.java    |  4 +++-
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 7d3402e3..5b697ecd 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -308,7 +308,13 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
     public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
         // table is :
         // transactions, splits ON transactions.uid = splits.transaction_uid ,
-        // ( SELECT transactions.uid AS trans_acct_t_uid , MAX ( splits.account_uid ) as trans_acct_a_uid
+        // ( SELECT transactions.uid AS trans_acct_t_uid ,
+        //      SUBSTR (
+        //          MIN (
+        //              ( CASE WHEN IFNULL ( splits.memo , '' ) == '' THEN 'a' ELSE 'b' END ) || splits.account_uid
+        //          ) ,
+        //          2
+        //      ) as trans_acct_a_uid ,
         //   TOTAL ( CASE WHEN splits.type = 'DEBIT' THEN splits.amount ELSE - splits.amount END ) AS trans_acct_balance
         //   FROM transactions, splits ON transactions.uid = splits.transaction_uid GROUP BY transactions.uid ) AS trans_acct ON
         // trans_acct.trans_acct_t_uid = transactions.uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid ,
@@ -317,6 +323,14 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
         // This is multi table/sub-query join. The third select would pick one Account_UID for each
         // Transaction, which can be used to order all transactions.
         // This is used in QIF export, when all transactions are grouped by accounts.
+        //
+        // As the split memo for the account used for grouping is lost, a split without a split memo
+        // is chosen if possible, in the following manner:
+        //   if the splits memo is null or empty string, attach an 'a' in front of the split account uid,
+        //   if not, attach a 'b' to the split account uid
+        //   pick the minimal value of the modified account uid (one of the ones begins with 'a', if exists)
+        //   use substr to get account uid
+        //
         // account1 provides information for the grouped account. Splits from the grouped account
         // can be eliminated with a WHERE clause. Transactions in QIF can be auto balanced.
         // account2 provides information for the account associated with the split.
@@ -331,8 +345,10 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
                 " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
                 " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
                 " , ( SELECT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " AS trans_acct_t_uid , MAX ( " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID +
-                " ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." +
+                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "." +
+                SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
+                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID +
+                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." +
                 SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "." +
                 SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." +
                 SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM " +
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 8d8494b0..835342bc 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -70,7 +70,9 @@ public void generateExport(Writer writer) throws ExporterException {
                             mParameters.shouldExportAllTransactions() ?
                                     "" : " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + "== 0"
                             ),
-                    "acct1_uid ASC, trans_uid ASC"
+                    // trans_time ASC : put transactions in time order
+                    // trans_uid ASC  : put splits from the same transaction together
+                   "trans_time ASC, trans_uid ASC"
                     );
             try {
                 String currentAccountUID = "";

From a630ec8e75c4bad2480e288fa19a64b43e4d55f2 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 12 Sep 2014 08:24:36 +0800
Subject: [PATCH 28/68] Rewrite SQL to retrieve recent accounts

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 39 +++++++---------------
 1 file changed, 12 insertions(+), 27 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index b98d815a..85b9c6b0 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -794,35 +794,20 @@ public Cursor fetchTopLevelAccounts(){
      * @return Cursor to recently used accounts
      */
     public Cursor fetchRecentAccounts(int numberOfRecents){
-        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
-        queryBuilder.setTables(TransactionEntry.TABLE_NAME
+        return mDb.query(TransactionEntry.TABLE_NAME
                 + " LEFT OUTER JOIN " + SplitEntry.TABLE_NAME + " ON "
                 + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = "
-                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID);
-        queryBuilder.setDistinct(true);
-        String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
-        Map<String, String> projectionMap = new HashMap<String, String>();
-        projectionMap.put(SplitEntry.COLUMN_ACCOUNT_UID, SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID);
-        queryBuilder.setProjectionMap(projectionMap);
-        Cursor recentTxCursor =  queryBuilder.query(mDb,
-                new String[]{SplitEntry.COLUMN_ACCOUNT_UID},
-                null, null, null, null, sortOrder, Integer.toString(numberOfRecents));
-
-
-        StringBuilder recentAccountUIDs = new StringBuilder("(");
-        while (recentTxCursor.moveToNext()){
-            String uid = recentTxCursor.getString(recentTxCursor.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
-            recentAccountUIDs.append("'" + uid + "'");
-            if (!recentTxCursor.isLast())
-                recentAccountUIDs.append(",");
-        }
-        recentAccountUIDs.append(")");
-        recentTxCursor.close();
-
-        return mDb.query(AccountEntry.TABLE_NAME,
-                null, AccountEntry.COLUMN_UID + " IN " + recentAccountUIDs.toString(),
-                null, null, null, AccountEntry.COLUMN_NAME + " ASC");
-
+                + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+                + " , " + AccountEntry.TABLE_NAME + " ON " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID
+                + " = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
+                new String[]{AccountEntry.TABLE_NAME + ".*"},
+                null,
+                null,
+                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID, //groupby
+                null, //haveing
+                "MAX ( " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " ) DESC", // order
+                Integer.toString(numberOfRecents) // limit;
+        );
     }
 
     /**

From c2e454fb6af9f066b6a90f87b801d08a5dcd8c64 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 09:15:58 +0800
Subject: [PATCH 29/68] Remove all descendant sccounts from parent account
 candidate.

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 54 ++++++++++++++--------
 .../gnucash/android/importer/GncXmlHandler.java    | 11 +++--
 .../android/ui/account/AccountFormFragment.java    | 24 +++++-----
 3 files changed, 56 insertions(+), 33 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index b98d815a..ce82e18e 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -694,27 +694,50 @@ public Money getAccountBalance(String accountUID){
         currencyCode = currencyCode == null ? Money.DEFAULT_CURRENCY_CODE : currencyCode;
         Money balance = Money.createZeroInstance(currencyCode);
 
-        // retrieve all descendant accounts of the accountUID
+        List<String> accountsList = getDescendantAccountUIDs(accountUID,
+                AccountEntry.COLUMN_CURRENCY + " = ? ",
+                new String[]{currencyCode});
+
+        accountsList.add(0, accountUID);
+
+        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
+        Log.d(TAG, "all account list : " + accountsList.size());
+        Money splitSum = splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance);
+        splitsDbAdapter.close();
+        return balance.add(splitSum);
+    }
+
+    /**
+     * Retrieve all descendant accounts of an account
+     * Note, in filtering, once an account is filtered out, all its descendants
+     * will also be filtered out, even they don't meet the filter condition
+     * @param accountUID The account to retrieve descendant accounts
+     * @param where      Condition to filter accounts
+     * @param whereArgs  Condition args to filter accounts
+     * @return The descendant accounts list.
+     */
+    public List<String> getDescendantAccountUIDs(String accountUID, String where, String[] whereArgs) {
         // accountsList will hold accountUID with all descendant accounts.
-        // accountsList level will hold descendant accounts of the same level
-        // only accounts have the same currency with accountUID will be retrieved
+        // accountsListLevel will hold descendant accounts of the same level
         ArrayList<String> accountsList = new ArrayList<String>();
-        accountsList.add(accountUID);
         ArrayList<String> accountsListLevel = new ArrayList<String>();
         accountsListLevel.add(accountUID);
         for (;;) {
             Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
                     new String[]{AccountEntry.COLUMN_UID},
-                    AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IN ( '" + TextUtils.join("' , '", accountsListLevel) + "' ) AND " +
-                            AccountEntry.COLUMN_CURRENCY + " = ? ",
-                    new String[]{currencyCode}, null, null, null);
+                    AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IN ( '" + TextUtils.join("' , '", accountsListLevel) + "' )" +
+                            (where == null ? "" : " AND " + where),
+                    whereArgs, null, null, null);
             accountsListLevel.clear();
-            if (cursor != null){
-                int columnIndex = cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID);
-                while(cursor.moveToNext()){
-                    accountsListLevel.add(cursor.getString(columnIndex));
+            if (cursor != null) {
+                try {
+                    int columnIndex = cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID);
+                    while (cursor.moveToNext()) {
+                        accountsListLevel.add(cursor.getString(columnIndex));
+                    }
+                } finally {
+                    cursor.close();
                 }
-                cursor.close();
             }
             if (accountsListLevel.size() > 0) {
                 accountsList.addAll(accountsListLevel);
@@ -723,12 +746,7 @@ public Money getAccountBalance(String accountUID){
                 break;
             }
         }
-
-        SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getContext());
-        Log.d(TAG, "all account list : " + accountsList.size());
-        Money splitSum = splitsDbAdapter.computeSplitBalance(accountsList, currencyCode, hasDebitNormalBalance);
-        splitsDbAdapter.close();
-        return balance.add(splitSum);
+        return accountsList;
     }
 
     /**
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 3f203c98..076b32aa 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -361,13 +361,14 @@ public void endDocument() throws SAXException {
                     continue;
                 }
                 stack.push(account);
-                String parentAccountFullName = null;
+                String parentAccountFullName;
+                String rootAccountUID = null;
                 while (!stack.isEmpty()) {
                     Account acc = stack.peek();
-                    if (acc.getAccountType().name().equals("ROOT")) {
+                    if (acc.getAccountType() == AccountType.ROOT) {
                         mapFullName.put(acc.getUID(), "");
+                        rootAccountUID = acc.getUID();
                         stack.pop();
-                        parentAccountFullName = "";
                         continue;
                     }
                     if (mapFullName.get(acc.getParentUID()) == null) {
@@ -384,6 +385,10 @@ public void endDocument() throws SAXException {
                         stack.pop();
                     }
                 }
+                if (rootAccountUID != null)
+                {
+                    mapFullName.put(rootAccountUID, map.get(rootAccountUID).getName());
+                }
             }
             for (Account account:mAccountList){
                 account.setFullName(mapFullName.get(account.getUID()));
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 2a013e74..8078047f 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -28,6 +28,7 @@
 import android.preference.PreferenceManager;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.widget.SimpleCursorAdapter;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -117,6 +118,11 @@
 	private Cursor mParentAccountCursor;
 
     /**
+     * List of all descendant Account UIDs, if we are modifying an account
+     */
+    private List<String> mDescendantAccountUIDs;
+
+    /**
      * SimpleCursorAdapter for the parent account spinner
      * @see QualifiedAccountNameCursorAdapter
      */
@@ -537,12 +543,11 @@ private void loadParentAccountList(AccountType accountType){
                 + getAllowedParentAccountTypes(accountType) + ") ";
 
         if (mAccount != null){  //if editing an account
-            // limit cyclic account hierarchies. Still technically possible since we don't forbid descendant accounts
+            mDescendantAccountUIDs = mAccountsDbAdapter.getDescendantAccountUIDs(mAccount.getUID(), null, null);
+            // limit cyclic account hierarchies.
             condition += " AND (" + DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL "
-                    + " OR " + DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " != '" + mAccount.getUID() + "')"
+                    + " OR " + DatabaseSchema.AccountEntry.COLUMN_UID + " NOT IN ( '" + TextUtils.join("','", mDescendantAccountUIDs) + "' ) )"
                     + " AND " + DatabaseSchema.AccountEntry._ID + " != " + mSelectedAccountId;
-
-            //TODO: Limit all descendants of the account to eliminate the possibility of cyclic hierarchy
         }
 
         //if we are reloading the list, close the previous cursor first
@@ -574,7 +579,8 @@ private String getAllowedParentAccountTypes(AccountType type){
 
         switch (type){
             case EQUITY:
-                return "'" + AccountType.EQUITY.name() + "'";
+                return "'" + AccountType.EQUITY.name()+ "', '"
+                        + AccountType.ROOT + "'";
 
             case INCOME:
             case EXPENSE:
@@ -597,13 +603,7 @@ private String getAllowedParentAccountTypes(AccountType type){
                 accountTypeStrings.remove(AccountType.EXPENSE.name());
                 accountTypeStrings.remove(AccountType.INCOME.name());
 
-                String result = "";
-                for (String accountTypeString : accountTypeStrings) {
-                    result += "'" + accountTypeString + "',";
-                }
-
-                //remove the last comma
-                return result.substring(0, result.length() - 1);
+                return "'" + TextUtils.join("','", accountTypeStrings) + "'";
 
             }
 

From 95a41bf0daba85c60f316fb7c789dfa485ee012f Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 11:42:30 +0800
Subject: [PATCH 30/68] Update the descendant accounts'full names after parent
 account is changed.

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 61 +++++++++++++++++---
 .../gnucash/android/export/xml/GncXmlExporter.java |  2 +-
 .../android/ui/account/AccountFormFragment.java    | 67 ++++++++++++++++++++--
 3 files changed, 116 insertions(+), 14 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index ce82e18e..ee3c046f 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -458,17 +458,40 @@ public String getName(long accountID) {
     public List<Account> getSimpleAccountList(){
         LinkedList<Account> accounts = new LinkedList<Account>();
         Cursor c = fetchAccounts(null);
-
         if (c == null)
             return accounts;
 
-        while(c.moveToNext()){
-            accounts.add(buildSimpleAccountInstance(c));
+        try {
+            while (c.moveToNext()) {
+                accounts.add(buildSimpleAccountInstance(c));
+            }
+        }
+        finally {
+            c.close();
         }
-        c.close();
         return accounts;
     }
 
+    /**
+     * Returns a list of all account entries in the system (includes root account)
+     * No transactions are loaded, just the accounts
+     * @return List of {@link Account}s in the database
+     */
+    public List<Account> getSimpleAccountList(String where, String[] whereArgs, String orderBy){
+        LinkedList<Account> accounts = new LinkedList<Account>();
+        Cursor c = fetchAccounts(where, whereArgs, orderBy);
+        if (c == null)
+            return accounts;
+        try {
+            while (c.moveToNext()) {
+                accounts.add(buildSimpleAccountInstance(c));
+            }
+        }
+        finally {
+            c.close();
+        }
+        return accounts;
+    }
 	/**
 	 * Returns a list of accounts which have transactions that have not been exported yet
 	 * @return List of {@link Account}s with unexported transactions
@@ -633,15 +656,17 @@ public Cursor fetchAccounts(String condition){
     /**
      * Returns a Cursor set of accounts which fulfill <code>condition</code>
      * and ordered by <code>orderBy</code>
-     * @param condition SQL WHERE statement without the 'WHERE' itself
+     * @param where SQL WHERE statement without the 'WHERE' itself
+     * @param whereArgs args to where clause
+     * @param orderBy orderBy clause
      * @return Cursor set of accounts which fulfill <code>condition</code>
      */
-    public Cursor fetchAccounts(String condition, String orderBy){
+    public Cursor fetchAccounts(String where, String[] whereArgs, String orderBy){
         Log.v(TAG, "Fetching all accounts from db where " +
-                (condition == null ? "NONE" : condition) + " order by " +
+                (where == null ? "NONE" : where) + " order by " +
                 (orderBy == null ? "NONE" : orderBy));
         return mDb.query(AccountEntry.TABLE_NAME,
-                null, condition, null, null, null,
+                null, where, whereArgs, null, null,
                 orderBy);
     }
     /**
@@ -1018,6 +1043,26 @@ public String getFullyQualifiedAccountName(String accountUID){
     }
 
     /**
+     * get account's full name directly from DB
+     * @param accountUID the account to retrieve full name
+     * @return full name registered in DB
+     */
+    public String getAccountFullName(String accountUID) {
+        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_FULL_NAME},
+                AccountEntry.COLUMN_UID + " = ?", new String[]{accountUID},
+                null, null, null);
+        try {
+            if (cursor.moveToFirst()) {
+                return cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FULL_NAME));
+            }
+        }
+        finally {
+            cursor.close();
+        }
+        return null;
+    }
+
+    /**
      * Overloaded convenience method.
      * Simply resolves the account UID and calls {@link #getFullyQualifiedAccountName(String)}
      * @param accountId Database record ID of account
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index b2a09103..90294c1b 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -91,7 +91,7 @@ private void exportSlots(XmlSerializer xmlSerializer,
     }
 
     private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
-        Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null);
+        Cursor cursor = mAccountsDbAdapter.fetchAccounts(null, null, null);
         while (cursor.moveToNext()) {
             // write account
             xmlSerializer.startTag(null, GncXmlHelper.TAG_ACCOUNT);
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 8078047f..3a15b2b0 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -29,6 +29,7 @@
 import android.support.v4.app.FragmentManager;
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -54,6 +55,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Currency;
+import java.util.HashMap;
 import java.util.List;
 
 /**
@@ -119,6 +121,7 @@
 
     /**
      * List of all descendant Account UIDs, if we are modifying an account
+     * null if creating a new account
      */
     private List<String> mDescendantAccountUIDs;
 
@@ -664,7 +667,7 @@ public void onDestroy() {
 			mParentAccountCursor.close();
         // The mAccountsDbAdapter should only be closed when it is not passed in
         // by other Activities.
-		if (mReleaseDbAdapter == true && mAccountsDbAdapter != null) {
+		if (mReleaseDbAdapter && mAccountsDbAdapter != null) {
             mAccountsDbAdapter.close();
         }
         if (mDefaultTransferAccountCursorAdapter != null) {
@@ -676,6 +679,8 @@ public void onDestroy() {
      * Reads the fields from the account form and saves as a new account
      */
 	private void saveAccount() {
+        // accounts to update, in case we're updating full names of a sub account tree
+        ArrayList<Account> accountsToUpdate = new ArrayList<Account>();
 		if (mAccount == null){
 			String name = getEnteredName();
 			if (name == null || name.length() == 0){
@@ -699,12 +704,19 @@ private void saveAccount() {
         mAccount.setPlaceHolderFlag(mPlaceholderCheckBox.isChecked());
         mAccount.setColorCode(mSelectedColor);
 
+        long newParentAccountID;
+        String newParentAccountGUID;
+        String rootAccountGUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+        long rootAccountID = mAccountsDbAdapter.getAccountID(rootAccountGUID);
 		if (mParentCheckBox.isChecked()){
-			long id = mParentAccountSpinner.getSelectedItemId();
-			mAccount.setParentUID(mAccountsDbAdapter.getAccountUID(id));
+            newParentAccountID = mParentAccountSpinner.getSelectedItemId();
+            newParentAccountGUID = mAccountsDbAdapter.getAccountUID(newParentAccountID);
+			mAccount.setParentUID(newParentAccountGUID);
 		} else {
             //need to do this explicitly in case user removes parent account
 			mAccount.setParentUID(null);
+            newParentAccountGUID = rootAccountGUID;
+            newParentAccountID = rootAccountID;
 		}
 
         if (mDefaultTransferAccountCheckBox.isChecked()){
@@ -714,10 +726,55 @@ private void saveAccount() {
             //explicitly set in case of removal of default account
             mAccount.setDefaultTransferAccountUID(null);
         }
-		
+
+        // update full names
+        long oldParentAccountId = mParentAccountId == -1 ? rootAccountID : mParentAccountId;
+        if (mDescendantAccountUIDs == null || newParentAccountID != oldParentAccountId) {
+            // new Account or parent account changed
+            String newAccountFullName;
+            if (newParentAccountID == rootAccountID){
+                newAccountFullName = mAccount.getName();
+            }
+            else {
+                newAccountFullName = mAccountsDbAdapter.getAccountFullName(newParentAccountGUID) +
+                    AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + mAccount.getName();
+            }
+            mAccount.setFullName(newAccountFullName);
+            if (mDescendantAccountUIDs != null) {
+                // modifying existing account
+                if (oldParentAccountId != newParentAccountID && mDescendantAccountUIDs.size() > 0) {
+                    // parent change, update all full names of descent accounts
+                    accountsToUpdate.addAll(mAccountsDbAdapter.getSimpleAccountList(
+                            DatabaseSchema.AccountEntry.COLUMN_UID + " IN ('" +
+                                    TextUtils.join("','", mDescendantAccountUIDs) + "')",
+                            null,
+                            null
+                    ));
+                }
+                HashMap<String, Account> mapAccount = new HashMap<String, Account>();
+                for (Account acct : accountsToUpdate) mapAccount.put(acct.getUID(), acct);
+                for (String uid: mDescendantAccountUIDs) {
+                    // mAccountsDbAdapter.getDescendantAccountUIDs() will ensure a parent-child order
+                    Account acct = mapAccount.get(uid);
+                    // mAccount cannot be root, so acct here cannot be top level account.
+                    if (acct.getParentUID().equals(mAccount.getUID())) {
+                        acct.setFullName(mAccount.getFullName() + AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acct.getName());
+                    }
+                    else {
+                        acct.setFullName(
+                                mapAccount.get(acct.getParentUID()).getFullName() +
+                                        AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR +
+                                        acct.getName()
+                        );
+                    }
+                }
+            }
+        }
+        accountsToUpdate.add(mAccount);
 		if (mAccountsDbAdapter == null)
 			mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
-		mAccountsDbAdapter.addAccount(mAccount);
+        // bulk update, will not update transactions
+		mAccountsDbAdapter.bulkAddAccounts(accountsToUpdate);
 
 		finishFragment();
 	}

From 583bedd90bda0b39aaff3658a9a94659aaf2b36d Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 12:05:14 +0800
Subject: [PATCH 31/68] FIX importing root account name

---
 .../gnucash/android/importer/GncXmlHandler.java    | 33 +++++++++++-----------
 1 file changed, 16 insertions(+), 17 deletions(-)

diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 076b32aa..d2b37da0 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -362,32 +362,31 @@ public void endDocument() throws SAXException {
                 }
                 stack.push(account);
                 String parentAccountFullName;
-                String rootAccountUID = null;
                 while (!stack.isEmpty()) {
                     Account acc = stack.peek();
                     if (acc.getAccountType() == AccountType.ROOT) {
-                        mapFullName.put(acc.getUID(), "");
-                        rootAccountUID = acc.getUID();
+                        // append blank to Root Account, ensure it always sorts first
+                        mapFullName.put(acc.getUID(), " " + acc.getName());
                         stack.pop();
                         continue;
                     }
-                    if (mapFullName.get(acc.getParentUID()) == null) {
-                        stack.push(map.get(acc.getParentUID()));
+                    String parentUID = acc.getParentUID();
+                    Account parentAccount = map.get(parentUID);
+                    if (parentAccount.getAccountType() == AccountType.ROOT) {
+                        // top level account, full name is the same as its name
+                        mapFullName.put(acc.getUID(), acc.getName());
+                        stack.pop();
                         continue;
                     }
-                    else {
-                        parentAccountFullName = mapFullName.get(acc.getParentUID());
-                    }
-                    if (parentAccountFullName != null) {
-                        parentAccountFullName = parentAccountFullName.length() == 0 ? acc.getName() :
-                                (parentAccountFullName + AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
-                        mapFullName.put(acc.getUID(), parentAccountFullName);
-                        stack.pop();
+                    parentAccountFullName = mapFullName.get(parentUID);
+                    if (parentAccountFullName == null) {
+                        // non-top-level account, parent full name still unknown
+                        stack.push(parentAccount);
+                        continue;
                     }
-                }
-                if (rootAccountUID != null)
-                {
-                    mapFullName.put(rootAccountUID, map.get(rootAccountUID).getName());
+                    mapFullName.put(acc.getUID(), parentAccountFullName +
+                            AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + acc.getName());
+                    stack.pop();
                 }
             }
             for (Account account:mAccountList){

From d8b008740f659651714b9e3a0f997d62eae0f9b2 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 16:48:02 +0800
Subject: [PATCH 32/68] Rewrite getExportableAccounts

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 35 +++++++++++++++-------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 13 ++++----
 2 files changed, 31 insertions(+), 17 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index b98d815a..a5317be1 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -474,17 +474,30 @@ public String getName(long accountID) {
 	 * @return List of {@link Account}s with unexported transactions
 	 */
 	public List<Account> getExportableAccounts(){
-        //TODO: Optimize to use SQL DISTINCT and load only necessary accounts from db
-		List<Account> accountsList = getAllAccounts();
-		Iterator<Account> it = accountsList.iterator();
-		
-		while (it.hasNext()){
-			Account account = it.next();
-			
-			if (!account.hasUnexportedTransactions())
-				it.remove();
-		}
-		return accountsList;
+        LinkedList<Account> accountsList = new LinkedList<Account>();
+        Cursor cursor = mDb.query(
+                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
+                        " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = " +
+                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " , " +
+                        AccountEntry.TABLE_NAME + " ON " + AccountEntry.TABLE_NAME + "." +
+                        AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." +
+                        SplitEntry.COLUMN_ACCOUNT_UID,
+                new String[]{AccountEntry.TABLE_NAME + ".*"},
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " == 0",
+                null,
+                AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
+                null,
+                null
+        );
+        try {
+            while (cursor.moveToNext()) {
+                accountsList.add(buildAccountInstance(cursor));
+            }
+        }
+        finally {
+            cursor.close();
+        }
+        return accountsList;
 	}
 
     /**
diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index e8eff5ee..82d53123 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -197,14 +197,15 @@ public String getCurrencyCode(String accountUID) {
 
         if (cursor == null)
             return null;
-        if (cursor.getCount() <= 0) {
+        String currencyCode = null;
+        try {
+            if (cursor.moveToFirst()) {
+                currencyCode = cursor.getString(0);
+            }
+        }
+        finally {
             cursor.close();
-            return null;
         }
-
-        cursor.moveToFirst();
-        String currencyCode = cursor.getString(0);
-        cursor.close();
         return currencyCode;
     }
 

From c08c98c4f4d9cfb4913b2bd8ac25bd75311572f4 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 17:11:09 +0800
Subject: [PATCH 33/68] FIX: new created accounts are not added to the DB

---
 .../org/gnucash/android/db/AccountsDbAdapter.java   | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index b98d815a..72623121 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -518,20 +518,27 @@ public String createAccountHierarchy(String fullName, AccountType accountType){
             throw new IllegalArgumentException("The account name cannot be null");
 
         String[] tokens = fullName.trim().split(ACCOUNT_NAME_SEPARATOR);
-        String uid = null;
+        String uid = getGnuCashRootAccountUID();
         String parentName = "";
+        ArrayList<Account> accountsList = new ArrayList<Account>();
         for (String token : tokens) {
             parentName += token;
             String parentUID = findAccountUidByFullName(parentName);
-            parentName += ACCOUNT_NAME_SEPARATOR;
             if (parentUID != null){ //the parent account exists, don't recreate
                 uid = parentUID;
-                continue;
             }
-            Account account = new Account(token);
-            account.setAccountType(accountType);
-            account.setParentUID(uid); //set its parent
-            uid = account.getUID();
+            else {
+                Account account = new Account(token);
+                account.setAccountType(accountType);
+                account.setParentUID(uid); //set its parent
+                account.setFullName(parentName);
+                accountsList.add(account);
+                uid = account.getUID();
+            }
+            parentName += ACCOUNT_NAME_SEPARATOR;
+        }
+        if (accountsList.size() > 0) {
+            bulkAddAccounts(accountsList);
         }
         return uid;
     }

From 0dcce515ccfbf7af666dc30a4c82be2734e20210 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 17:27:51 +0800
Subject: [PATCH 34/68] Use bulk approach to add new transactions

Prevent the exported status to be reset with the old add Transaction
---
 .../android/ui/settings/DeleteAllTransacationsConfirmationDialog.java | 4 +---
 app/src/org/gnucash/android/ui/settings/SettingsActivity.java         | 4 +---
 .../dialog/TransactionsDeleteConfirmationDialogFragment.java          | 4 +---
 3 files changed, 3 insertions(+), 9 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index e946b9d1..acd04169 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -53,9 +53,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                 transactionsDbAdapter.deleteAllRecords();
 
                                 if (preserveOpeningBalances) {
-                                    for (Transaction openingBalance : openingBalances) {
-                                        transactionsDbAdapter.addTransaction(openingBalance);
-                                    }
+                                    transactionsDbAdapter.bulkAddTransactions(openingBalances);
                                 }
                                 transactionsDbAdapter.close();
                                 Toast.makeText(context, R.string.toast_all_transactions_deleted, Toast.LENGTH_SHORT).show();
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 1a2b3d2e..76618cd3 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -264,9 +264,7 @@ public boolean onPreferenceClick(Preference preference) {
                 transactionsDbAdapter.deleteAllRecords();
 
                 if (preserveOpeningBalances) {
-                    for (Transaction openingBalance : openingBalances) {
-                        transactionsDbAdapter.addTransaction(openingBalance);
-                    }
+                    transactionsDbAdapter.bulkAddTransactions(openingBalances);
                 }
                 transactionsDbAdapter.close();
                 Toast.makeText(this, R.string.toast_all_transactions_deleted, Toast.LENGTH_LONG).show();
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 1594f620..7ab94c6e 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -77,9 +77,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                     transactionsDbAdapter.deleteAllRecords();
 
                                     if (preserveOpeningBalances) {
-                                        for (Transaction openingBalance : openingBalances) {
-                                            transactionsDbAdapter.addTransaction(openingBalance);
-                                        }
+                                        transactionsDbAdapter.bulkAddTransactions(openingBalances);
                                     }
                                 } else {
                                     transactionsDbAdapter.deleteRecord(rowId);

From 20bb6e66cf9dd2e7dfd8d8680f3877840ef323fc Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 17:36:21 +0800
Subject: [PATCH 35/68] Add recurrence transactions to DB

---
 app/src/org/gnucash/android/db/TransactionsDbAdapter.java | 6 +++---
 app/src/org/gnucash/android/importer/GncXmlHandler.java   | 1 +
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 7d3402e3..b54d466b 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -118,11 +118,11 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 + TransactionEntry.COLUMN_NOTES         + " , "
                 + TransactionEntry.COLUMN_TIMESTAMP     + " , "
                 + TransactionEntry.COLUMN_EXPORTED      + " , "
-                + TransactionEntry.COLUMN_CURRENCY      + " ) VALUES ( ? , ? , ? , ? , ? , ?)");
+                + TransactionEntry.COLUMN_CURRENCY      + " , "
+                + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ) VALUES ( ? , ? , ? , ? , ? , ? , ?)");
             for (Transaction transaction : transactionList) {
                 if (transaction.getRecurrencePeriod() > 0) {
                     scheduleTransaction(transaction);
-                    continue;
                 }
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
@@ -132,7 +132,7 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 replaceStatement.bindLong(4, transaction.getTimeMillis());
                 replaceStatement.bindLong(5, transaction.isExported() ? 1 : 0);
                 replaceStatement.bindString(6, transaction.getCurrencyCode());
-                //replaceStatement.bindLong(7, transaction.getRecurrencePeriod());
+                replaceStatement.bindLong(7, transaction.getRecurrencePeriod());
                 replaceStatement.execute();
                 rowInserted ++;
                 splitList.addAll(transaction.getSplits());
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 3f203c98..ae0b0429 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -329,6 +329,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
             else {
                 if (mTransaction.getRecurrencePeriod() > 0) { //TODO: Fix this when scheduled actions are expanded
                     mTransactionsDbAdapter.scheduleTransaction(mTransaction);
+                    mTransactionsDbAdapter.addTransaction(mTransaction);
                 } else {
                     mTransactionsDbAdapter.addTransaction(mTransaction);
                 }

From 45041153954801a0f2a69007aa776f1608ec7a12 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 18:02:58 +0800
Subject: [PATCH 36/68] Rewrite accountsDbAdapter.markAsExported

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 31 +++++++++++-----------
 1 file changed, 15 insertions(+), 16 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index a5317be1..0ffbe08b 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -168,22 +168,21 @@ public long bulkAddAccounts(List<Account> accountList){
     public int markAsExported(String accountUID){
         ContentValues contentValues = new ContentValues();
         contentValues.put(TransactionEntry.COLUMN_EXPORTED, 1);
-        Cursor cursor = mTransactionsAdapter.fetchAllTransactionsForAccount(accountUID);
-        List<Long> transactionIdList = new ArrayList<Long>();
-        if (cursor != null){
-            while(cursor.moveToNext()){
-                long id = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID));
-                transactionIdList.add(id);
-            }
-            cursor.close();
-        }
-        int recordsTouched = 0;
-        for (long id : transactionIdList) {
-            recordsTouched += mDb.update(TransactionEntry.TABLE_NAME,
-                    contentValues,
-                    TransactionEntry._ID + "=" + id, null);
-        }
-        return recordsTouched;
+        return mDb.update(
+                TransactionEntry.TABLE_NAME,
+                contentValues,
+                TransactionEntry.COLUMN_UID + " IN ( " +
+                        "SELECT DISTINCT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                        " FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON " +
+                        TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " = " +
+                        SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " , " +
+                        AccountEntry.TABLE_NAME + " ON " + SplitEntry.TABLE_NAME + "." +
+                        SplitEntry.COLUMN_ACCOUNT_UID + " = " + AccountEntry.TABLE_NAME + "." +
+                        AccountEntry.COLUMN_UID + " WHERE " + AccountEntry.TABLE_NAME + "." +
+                        AccountEntry.COLUMN_UID + " = ? "
+                        + " ) ",
+                new String[] {accountUID}
+        );
     }
 
     /**

From 43adc2784929ac222849b7dd9d9e6883b95e70f3 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 22:27:44 +0800
Subject: [PATCH 37/68] Replaced hard-coded account name

---
 app/src/org/gnucash/android/export/qif/QifExporter.java | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 835342bc..a6049f3d 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -22,6 +22,8 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import static org.gnucash.android.db.DatabaseSchema.*;
+
+import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
@@ -29,6 +31,7 @@
 import java.io.IOException;
 import java.io.Writer;
 import java.math.BigDecimal;
+import java.util.Currency;
 
 /**
  * @author Ngewi
@@ -113,8 +116,9 @@ public void generateExport(Writer writer) throws ExporterException {
                         BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
                         if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
                             writer.append(QifHelper.SPLIT_CATEGORY_PREFIX)
-                                    .append("Imbalance-")
-                                    .append(cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency")))
+                                    .append(AccountsDbAdapter.getImbalanceAccountName(
+                                            Currency.getInstance(cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency")))
+                                    ))
                                     .append(newLine);
                             writer.append(QifHelper.SPLIT_AMOUNT_PREFIX)
                                     .append(decimalImbalance.toPlainString())

From e2391c4e170ad207db8758b4d132d09b737f3d9b Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 14 Sep 2014 11:02:53 +0800
Subject: [PATCH 38/68] Enforce only ROOT's parent can be null

---
 .../android/ui/account/AccountFormFragment.java    | 63 ++++++++++++----------
 1 file changed, 36 insertions(+), 27 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 3a15b2b0..b5acebf4 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -109,6 +109,16 @@
      */
     private long mParentAccountId = -1;
 
+    /**
+     * Account ID of the root account
+     */
+    private long mRootAccountId = -1;
+
+    /**
+     * Account UID of the root account
+     */
+    private String mRootAccountUID = null;
+
 	/**
 	 * Reference to account object which will be created at end of dialog
 	 */
@@ -306,6 +316,8 @@ public void onActivityCreated(Bundle savedInstanceState) {
             mAccount = mAccountsDbAdapter.getAccount(mSelectedAccountId);
             getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
         }
+        mRootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+        mRootAccountId = mAccountsDbAdapter.getAccountID(mRootAccountUID);
 
         //need to load the cursor adapters for the spinners before initializing the views
         loadAccountTypesList();
@@ -332,6 +344,10 @@ private void initializeViewsWithAccount(Account account){
 
         loadParentAccountList(account.getAccountType());
         mParentAccountId = mAccountsDbAdapter.getAccountID(account.getParentUID());
+        if (mParentAccountId == -1) {
+            // null parent, set Parent as root
+            mParentAccountId = mRootAccountId;
+        }
         setParentAccountSelection(mParentAccountId);
 
         String currencyCode = account.getCurrency().getCurrencyCode();
@@ -423,7 +439,7 @@ private void setSelectedCurrency(String currencyCode){
      * @param parentAccountId Record ID of parent account to be selected
      */
     private void setParentAccountSelection(long parentAccountId){
-        if (parentAccountId > 0){
+        if (parentAccountId > 0 && parentAccountId != mRootAccountId){
             mParentCheckBox.setChecked(true);
             mParentAccountSpinner.setEnabled(true);
         } else
@@ -578,17 +594,15 @@ private void loadParentAccountList(AccountType accountType){
      * @param type {@link org.gnucash.android.model.AccountType}
      * @return String comma separated list of account types
      */
-    private String getAllowedParentAccountTypes(AccountType type){
+    private String getAllowedParentAccountTypes(AccountType type) {
 
-        switch (type){
+        switch (type) {
             case EQUITY:
-                return "'" + AccountType.EQUITY.name()+ "', '"
-                        + AccountType.ROOT + "'";
+                return "'" + AccountType.EQUITY.name() + "'";
 
             case INCOME:
             case EXPENSE:
-                return "'" + AccountType.EXPENSE + "', '" + AccountType.INCOME + "', '"
-                        + AccountType.ROOT + "'";
+                return "'" + AccountType.EXPENSE + "', '" + AccountType.INCOME + "'";
 
             case CASH:
             case BANK:
@@ -601,13 +615,11 @@ private String getAllowedParentAccountTypes(AccountType type){
             case STOCK:
             case MUTUAL: {
                 List<String> accountTypeStrings = getAccountTypeStringList();
-
                 accountTypeStrings.remove(AccountType.EQUITY.name());
                 accountTypeStrings.remove(AccountType.EXPENSE.name());
                 accountTypeStrings.remove(AccountType.INCOME.name());
-
+                accountTypeStrings.remove(AccountType.ROOT.name());
                 return "'" + TextUtils.join("','", accountTypeStrings) + "'";
-
             }
 
             case ROOT:
@@ -704,20 +716,18 @@ private void saveAccount() {
         mAccount.setPlaceHolderFlag(mPlaceholderCheckBox.isChecked());
         mAccount.setColorCode(mSelectedColor);
 
-        long newParentAccountID;
-        String newParentAccountGUID;
-        String rootAccountGUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
-        long rootAccountID = mAccountsDbAdapter.getAccountID(rootAccountGUID);
-		if (mParentCheckBox.isChecked()){
-            newParentAccountID = mParentAccountSpinner.getSelectedItemId();
-            newParentAccountGUID = mAccountsDbAdapter.getAccountUID(newParentAccountID);
-			mAccount.setParentUID(newParentAccountGUID);
-		} else {
+        long newParentAccountId;
+        String newParentAccountUID;
+		if (mParentCheckBox.isChecked()) {
+            newParentAccountId = mParentAccountSpinner.getSelectedItemId();
+            newParentAccountUID = mAccountsDbAdapter.getAccountUID(newParentAccountId);
+            mAccount.setParentUID(newParentAccountUID);
+        } else {
             //need to do this explicitly in case user removes parent account
-			mAccount.setParentUID(null);
-            newParentAccountGUID = rootAccountGUID;
-            newParentAccountID = rootAccountID;
+            newParentAccountUID = mRootAccountUID;
+            newParentAccountId = mRootAccountId;
 		}
+        mAccount.setParentUID(newParentAccountUID);
 
         if (mDefaultTransferAccountCheckBox.isChecked()){
             long id = mDefaulTransferAccountSpinner.getSelectedItemId();
@@ -728,21 +738,20 @@ private void saveAccount() {
         }
 
         // update full names
-        long oldParentAccountId = mParentAccountId == -1 ? rootAccountID : mParentAccountId;
-        if (mDescendantAccountUIDs == null || newParentAccountID != oldParentAccountId) {
+        if (mDescendantAccountUIDs == null || newParentAccountId != mParentAccountId) {
             // new Account or parent account changed
             String newAccountFullName;
-            if (newParentAccountID == rootAccountID){
+            if (newParentAccountId == mRootAccountId){
                 newAccountFullName = mAccount.getName();
             }
             else {
-                newAccountFullName = mAccountsDbAdapter.getAccountFullName(newParentAccountGUID) +
+                newAccountFullName = mAccountsDbAdapter.getAccountFullName(newParentAccountUID) +
                     AccountsDbAdapter.ACCOUNT_NAME_SEPARATOR + mAccount.getName();
             }
             mAccount.setFullName(newAccountFullName);
             if (mDescendantAccountUIDs != null) {
                 // modifying existing account
-                if (oldParentAccountId != newParentAccountID && mDescendantAccountUIDs.size() > 0) {
+                if (mParentAccountId != newParentAccountId && mDescendantAccountUIDs.size() > 0) {
                     // parent change, update all full names of descent accounts
                     accountsToUpdate.addAll(mAccountsDbAdapter.getSimpleAccountList(
                             DatabaseSchema.AccountEntry.COLUMN_UID + " IN ('" +

From 04560bb39cbca3687496384b5af87b7727cfa6bb Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 14 Sep 2014 11:31:26 +0800
Subject: [PATCH 39/68] Set spinner invisible when it is not enabled.

---
 app/src/org/gnucash/android/ui/account/AccountFormFragment.java | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index b5acebf4..bae03f51 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -264,6 +264,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
+        mParentAccountSpinner.setVisibility(View.INVISIBLE);
 
 		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
@@ -271,17 +272,20 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 			@Override
 			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
 				mParentAccountSpinner.setEnabled(isChecked);
+                mParentAccountSpinner.setVisibility(isChecked?View.VISIBLE:View.INVISIBLE);
 			}
 		});
 
         mDefaulTransferAccountSpinner = (Spinner) view.findViewById(R.id.input_default_transfer_account);
         mDefaulTransferAccountSpinner.setEnabled(false);
+        mDefaulTransferAccountSpinner.setVisibility(View.INVISIBLE);
 
         mDefaultTransferAccountCheckBox = (CheckBox) view.findViewById(R.id.checkbox_default_transfer_account);
         mDefaultTransferAccountCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                 mDefaulTransferAccountSpinner.setEnabled(isChecked);
+                mDefaulTransferAccountSpinner.setVisibility(isChecked?View.VISIBLE:View.INVISIBLE);
             }
         });
 
@@ -442,6 +446,7 @@ private void setParentAccountSelection(long parentAccountId){
         if (parentAccountId > 0 && parentAccountId != mRootAccountId){
             mParentCheckBox.setChecked(true);
             mParentAccountSpinner.setEnabled(true);
+            mParentAccountSpinner.setVisibility(View.VISIBLE);
         } else
             return;
 
@@ -461,6 +466,7 @@ private void setDefaultTransferAccountSelection(long defaultTransferAccountId){
         if (defaultTransferAccountId > 0){
             mDefaultTransferAccountCheckBox.setChecked(true);
             mDefaulTransferAccountSpinner.setEnabled(true);
+            mDefaulTransferAccountSpinner.setVisibility(View.VISIBLE);
         } else
             return;
 

From 777ead9c25dfdf8c35174980ba88320ee4bb25c3 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 14 Sep 2014 12:09:04 +0800
Subject: [PATCH 40/68] FIX GncXML export

Slots before the fix:
```
<slot>
    <slot:key>placeholder</slot:key>
    <slot:value type="string">false</slot:value>
    <slot:key>favorite</slot:key>
    <slot:value type="string">false</slot:value>
</slot>
```
Which should be:
```
<slot>
    <slot:key>placeholder</slot:key>
    <slot:value type="string">false</slot:value>
</slot>
<slot>
    <slot:key>favorite</slot:key>
    <slot:value type="string">false</slot:value>
</slot>
```

Don't affect import to App.
---
 app/src/org/gnucash/android/export/xml/GncXmlExporter.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index b2a09103..ef2a079c 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -76,8 +76,8 @@ private void exportSlots(XmlSerializer xmlSerializer,
             return;
         }
         xmlSerializer.startTag(null, GncXmlHelper.TAG_ACT_SLOTS);
-        xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
         for (int i = 0; i < slotKey.size(); i++) {
+            xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT);
             xmlSerializer.startTag(null, GncXmlHelper.TAG_SLOT_KEY);
             xmlSerializer.text(slotKey.get(i));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_KEY);
@@ -85,8 +85,8 @@ private void exportSlots(XmlSerializer xmlSerializer,
             xmlSerializer.attribute(null, GncXmlHelper.ATTR_KEY_TYPE, slotType.get(i));
             xmlSerializer.text(slotValue.get(i));
             xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT_VALUE);
+            xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
         }
-        xmlSerializer.endTag(null, GncXmlHelper.TAG_SLOT);
         xmlSerializer.endTag(null, GncXmlHelper.TAG_ACT_SLOTS);
     }
 

From 4c05dc0ff735a249f1e38c17a1eb82deac6271d3 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 14 Sep 2014 23:29:02 +0800
Subject: [PATCH 41/68] Revert "Set spinner invisible when it is not enabled."

This reverts commit 04560bb39cbca3687496384b5af87b7727cfa6bb.
---
 app/src/org/gnucash/android/ui/account/AccountFormFragment.java | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index bae03f51..b5acebf4 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -264,7 +264,6 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
-        mParentAccountSpinner.setVisibility(View.INVISIBLE);
 
 		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
@@ -272,20 +271,17 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 			@Override
 			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
 				mParentAccountSpinner.setEnabled(isChecked);
-                mParentAccountSpinner.setVisibility(isChecked?View.VISIBLE:View.INVISIBLE);
 			}
 		});
 
         mDefaulTransferAccountSpinner = (Spinner) view.findViewById(R.id.input_default_transfer_account);
         mDefaulTransferAccountSpinner.setEnabled(false);
-        mDefaulTransferAccountSpinner.setVisibility(View.INVISIBLE);
 
         mDefaultTransferAccountCheckBox = (CheckBox) view.findViewById(R.id.checkbox_default_transfer_account);
         mDefaultTransferAccountCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                 mDefaulTransferAccountSpinner.setEnabled(isChecked);
-                mDefaulTransferAccountSpinner.setVisibility(isChecked?View.VISIBLE:View.INVISIBLE);
             }
         });
 
@@ -446,7 +442,6 @@ private void setParentAccountSelection(long parentAccountId){
         if (parentAccountId > 0 && parentAccountId != mRootAccountId){
             mParentCheckBox.setChecked(true);
             mParentAccountSpinner.setEnabled(true);
-            mParentAccountSpinner.setVisibility(View.VISIBLE);
         } else
             return;
 
@@ -466,7 +461,6 @@ private void setDefaultTransferAccountSelection(long defaultTransferAccountId){
         if (defaultTransferAccountId > 0){
             mDefaultTransferAccountCheckBox.setChecked(true);
             mDefaulTransferAccountSpinner.setEnabled(true);
-            mDefaulTransferAccountSpinner.setVisibility(View.VISIBLE);
         } else
             return;
 

From 673774bb0b200ecd9fe81c4096f8f7579721602a Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 20:53:27 +0800
Subject: [PATCH 42/68] FIX account deletion (destructive)

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 121 ++++++++++++++++++---
 1 file changed, 106 insertions(+), 15 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 03e1e331..dd0d72cc 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -214,18 +214,85 @@ public int updateAccount(long accountId, String columnKey, String newValue){
 	/**
 	 * Deletes an account with database id <code>rowId</code>
 	 * All the transactions in the account will also be deleted
+     * All descendant account will be assigned to the account's parent
 	 * @param rowId Database id of the account record to be deleted
 	 * @return <code>true</code> if deletion was successful, <code>false</code> otherwise.
 	 */
 	public boolean destructiveDeleteAccount(long rowId){
+        String accountUID = getAccountUID(rowId);
+        if (getAccountType(accountUID) == AccountType.ROOT) {
+            // refuse to delete ROOT
+            return false;
+        }
 		Log.d(TAG, "Delete account with rowId and all its associated splits: " + rowId);
+        List<String> descendantAccountUIDs = getDescendantAccountUIDs(accountUID, null, null);
 
-        //delete splits in this account
-        mDb.delete(SplitEntry.TABLE_NAME,
-               SplitEntry.COLUMN_ACCOUNT_UID + "=?",
-                new String[]{getAccountUID(rowId)});
-
-		return deleteRecord(AccountEntry.TABLE_NAME, rowId);
+        mDb.beginTransaction();
+        try {
+            if (descendantAccountUIDs.size() > 0) {
+                List<Account> descendantAccounts = getSimpleAccountList(
+                        AccountEntry.COLUMN_UID + " IN ('" + TextUtils.join("','", descendantAccountUIDs) + "')",
+                        null,
+                        null
+                );
+                HashMap<String, Account> mapAccounts = new HashMap<String, Account>();
+                for (Account account : descendantAccounts)
+                    mapAccounts.put(account.getUID(), account);
+                String parentAccountFullName;
+                String parentAccountUID = getParentAccountUID(accountUID);
+                if (getAccountType(parentAccountUID) == AccountType.ROOT) {
+                    parentAccountFullName = "";
+                } else {
+                    parentAccountFullName = getAccountFullName(parentAccountUID);
+                }
+                ContentValues contentValues = new ContentValues();
+                for (String acctUID : descendantAccountUIDs) {
+                    Account acct = mapAccounts.get(acctUID);
+                    if (acct.getParentUID().equals(accountUID)) {
+                        // direct descendant
+                        acct.setParentUID(parentAccountUID);
+                        if (parentAccountFullName.length() == 0) {
+                            acct.setFullName(acct.getName());
+                        } else {
+                            acct.setFullName(parentAccountFullName + ACCOUNT_NAME_SEPARATOR + acct.getName());
+                        }
+                        // update DB
+                        contentValues.clear();
+                        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, parentAccountUID);
+                        contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
+                        mDb.update(
+                                AccountEntry.TABLE_NAME, contentValues,
+                                AccountEntry.COLUMN_UID + " = ?",
+                                new String[]{acct.getUID()}
+                        );
+                    } else {
+                        // in direct descendant
+                        acct.setFullName(
+                                mapAccounts.get(acct.getParentUID()).getFullName() +
+                                        ACCOUNT_NAME_SEPARATOR + acct.getName()
+                        );
+                        // update DB
+                        contentValues.clear();
+                        contentValues.put(AccountEntry.COLUMN_FULL_NAME, acct.getFullName());
+                        mDb.update(
+                                AccountEntry.TABLE_NAME, contentValues,
+                                AccountEntry.COLUMN_UID + " = ?",
+                                new String[]{acct.getUID()}
+                        );
+                    }
+                }
+            }
+            //delete splits in this account
+            mDb.delete(SplitEntry.TABLE_NAME,
+                    SplitEntry.COLUMN_ACCOUNT_UID + "=?",
+                    new String[]{getAccountUID(rowId)});
+            deleteRecord(AccountEntry.TABLE_NAME, rowId);
+            mDb.setTransactionSuccessful();
+            return true;
+        }
+        finally {
+            mDb.endTransaction();
+        }
 	}
 
     /**
@@ -267,22 +334,46 @@ public boolean transactionPreservingDelete(long accountId, long accountReassignI
     }
 
     /**
-     * Deletes an account and all its sub-accounts and transactions with it
+     * Deletes an account and all its sub-accounts and splits with it
      * @param accountId Database record ID of account
      * @return <code>true</code> if the account and subaccounts were all successfully deleted, <code>false</code> if
      * even one was not deleted
      */
     public boolean recursiveDestructiveDelete(long accountId){
         Log.d(TAG, "Delete account with rowId with its transactions and sub-accounts: " + accountId);
-        boolean result = false;
-
-        List<Long> subAccountIds = getSubAccountIds(accountId);
-        for (long subAccountId : subAccountIds) {
-            result |= recursiveDestructiveDelete(subAccountId);
+        String accountUID = getAccountUID(accountId);
+        if (accountUID == null) return false;
+        List<String> descendantAccountUIDs = getDescendantAccountUIDs(accountUID, null, null);
+        mDb.beginTransaction();
+        try {
+            descendantAccountUIDs.add(accountUID);
+            String accountUIDList = "'" + TextUtils.join("','", descendantAccountUIDs) + "'";
+            // delete splits
+            mDb.delete(
+                    SplitEntry.TABLE_NAME,
+                    SplitEntry.COLUMN_ACCOUNT_UID + " IN (" + accountUIDList + ")",
+                    null
+            );
+            // delete transactions that do not have any splits associate them any more
+            mDb.delete(
+                    TransactionEntry.TABLE_NAME,
+                    "NOT EXISTS ( SELECT * FROM " + SplitEntry.TABLE_NAME +
+                    " WHERE " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                    " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " ) ",
+                    null
+            );
+            // delete accounts
+            mDb.delete(
+                    AccountEntry.TABLE_NAME,
+                    AccountEntry.COLUMN_UID + " IN (" + accountUIDList + ")",
+                    null
+            );
+            mDb.setTransactionSuccessful();
+            return true;
+        }
+        finally {
+            mDb.endTransaction();
         }
-        result |= destructiveDeleteAccount(accountId);
-
-        return result;
     }
 
 	/**

From fad43a51b8ac4b1cb8bd5d830746b51d28ea92a3 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 21:09:29 +0800
Subject: [PATCH 43/68] Remove assign parent as that is done in the process of
 deletion

---
 app/src/org/gnucash/android/db/AccountsDbAdapter.java            | 2 +-
 app/src/org/gnucash/android/ui/account/AccountsListFragment.java | 1 -
 2 files changed, 1 insertion(+), 2 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index dd0d72cc..b9b68522 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -266,7 +266,7 @@ public boolean destructiveDeleteAccount(long rowId){
                                 new String[]{acct.getUID()}
                         );
                     } else {
-                        // in direct descendant
+                        // indirect descendant
                         acct.setFullName(
                                 mapAccounts.get(acct.getParentUID()).getFullName() +
                                         ACCOUNT_NAME_SEPARATOR + acct.getName()
diff --git a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
index f14876b1..372f0ad3 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -315,7 +315,6 @@ protected void deleteAccount(long rowId, boolean deleteSubAccounts) {
                 mAccountsDbAdapter.recursiveDestructiveDelete(rowId)
                 : mAccountsDbAdapter.destructiveDeleteAccount(rowId);
         if (deleted) {
-            mAccountsDbAdapter.reassignParent(accountUID, parentUID);
             Toast.makeText(getActivity(), R.string.toast_account_deleted, Toast.LENGTH_SHORT).show();
             WidgetConfigurationActivity.updateAllWidgets(getActivity().getApplicationContext());
         }

From 5ec2ccf40455ffefa28fd4a9614029adf8f2d19e Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 13 Sep 2014 21:56:58 +0800
Subject: [PATCH 44/68] Switch to new opening balance approach

---
 app/src/org/gnucash/android/db/AccountsDbAdapter.java | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index b9b68522..acae0520 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1234,7 +1234,10 @@ public boolean isFavoriteAccount(long accountId){
                 long id = cursor.getLong(cursor.getColumnIndexOrThrow(AccountEntry._ID));
                 String accountUID = getAccountUID(id);
                 String currencyCode = getCurrencyCode(id);
-                Money balance = splitsDbAdapter.computeSplitBalance(accountUID);
+                ArrayList<String> accountList = new ArrayList<String>();
+                accountList.add(accountUID);
+                Money balance = splitsDbAdapter.computeSplitBalance(accountList,
+                        currencyCode, getAccountType(accountUID).hasDebitNormalBalance());
                 if (balance.asBigDecimal().compareTo(new BigDecimal(0)) == 0)
                     continue;
 

From f657d81a9fc7fa42c98941334c36ad1f9a32d47b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sun, 14 Sep 2014 22:37:58 +0200
Subject: [PATCH 45/68] Use the GUIDs of accounts and transactions as arguments
 for UI components. The IDs which were previously used will change whenever
 records are updated

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 34 +++++----
 .../org/gnucash/android/db/DatabaseAdapter.java    | 14 ++++
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 20 +++---
 .../gnucash/android/db/TransactionsDbAdapter.java  | 38 ++++++----
 .../receivers/TransactionAppWidgetProvider.java    | 15 ++--
 app/src/org/gnucash/android/ui/UxArgument.java     | 27 ++++---
 .../android/ui/account/AccountFormFragment.java    | 68 ++++++++----------
 .../android/ui/account/AccountsActivity.java       | 26 +++----
 .../android/ui/account/AccountsListFragment.java   | 82 ++++++++++++---------
 .../android/ui/passcode/PassLockActivity.java      |  5 +-
 .../ui/passcode/PasscodeLockScreenActivity.java    |  2 +-
 .../ScheduledTransactionsListFragment.java         | 14 ++--
 .../ui/transaction/TransactionFormFragment.java    | 48 ++++++-------
 .../ui/transaction/TransactionsActivity.java       | 83 +++++++++++-----------
 .../ui/transaction/TransactionsListFragment.java   | 37 +++++-----
 .../transaction/dialog/BulkMoveDialogFragment.java | 19 +++--
 .../dialog/SplitEditorDialogFragment.java          |  4 +-
 .../android/ui/util/AccountBalanceTask.java        |  6 +-
 .../android/ui/util/OnAccountClickedListener.java  |  4 +-
 .../ui/util/OnTransactionClickedListener.java      |  8 +--
 .../org/gnucash/android/ui/util/Refreshable.java   |  4 +-
 .../ui/widget/WidgetConfigurationActivity.java     | 27 +++----
 .../android/test/ui/TransactionsActivityTest.java  |  4 +-
 23 files changed, 309 insertions(+), 280 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index acae0520..8e15a1a6 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -21,18 +21,14 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
 
 import android.util.Log;
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.*;
-import org.xmlpull.v1.XmlSerializer;
 
-import java.io.IOException;
 import java.math.BigDecimal;
 import java.util.*;
 
@@ -473,7 +469,7 @@ public Account getAccount(long rowId){
 	 * @return {@link Account} object for unique ID <code>uid</code>
 	 */
 	public Account getAccount(String uid){
-		return getAccount(getId(uid));
+		return getAccount(getID(uid));
 	}	
 	
     /**
@@ -913,12 +909,14 @@ public Money getAccountBalance(String accountUID){
 
     /**
      * Returns a cursor to the dataset containing sub-accounts of the account with record ID <code>accoundId</code>
-     * @param accountId Record ID of the parent account
+     * @param accountUID GUID of the parent account
      * @return {@link Cursor} to the sub accounts data set
      */
-    public Cursor fetchSubAccounts(long accountId){
-        Log.v(TAG, "Fetching sub accounts for account id " + accountId);
-        String accountUID = getAccountUID(accountId);
+    public Cursor fetchSubAccounts(String accountUID){
+        if (accountUID == null)
+            throw new IllegalArgumentException("Account UID cannot be null");
+
+        Log.v(TAG, "Fetching sub accounts for account id " + accountUID);
         return mDb.query(AccountEntry.TABLE_NAME,
                 null,
                 AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = '" + accountUID + "'",
@@ -999,15 +997,14 @@ public String getGnuCashRootAccountUID(){
 
     /**
      * Returns the number of accounts for which the account with ID <code>accoundId</code> is a first level parent
-     * @param accountId Database ID of parent account
+     * @param accountUID String Unique ID (GUID) of the account
      * @return Number of sub accounts
      */
-    public int getSubAccountCount(long accountId){
+    public int getSubAccountCount(String accountUID){
         //TODO: at some point when API level 11 and above only is supported, use DatabaseUtils.queryNumEntries
 
         String queryCount = "SELECT COUNT(*) FROM " + AccountEntry.TABLE_NAME + " WHERE "
                 + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " = ?";
-        String accountUID = getAccountUID(accountId);
         if (accountUID == null) //if the account UID is null, then the accountId param was invalid. Just return
             return 0;
         Cursor cursor = mDb.rawQuery(queryCount, new String[]{accountUID});
@@ -1038,7 +1035,8 @@ public int getTotalAccountCount(){
 	 * @param accountUID String Unique ID of the account
 	 * @return Record ID belonging to account UID
 	 */
-	public long getId(String accountUID){
+    @Override
+	public long getID(String accountUID){
 		long id = -1;
 		Cursor c = mDb.query(AccountEntry.TABLE_NAME,
 				new String[]{AccountEntry._ID},
@@ -1052,8 +1050,13 @@ public long getId(String accountUID){
         }
 		return id;
 	}
-	
-	/**
+
+    @Override
+    public String getUID(long id) {
+        return getAccountUID(id);
+    }
+
+    /**
 	 * Returns currency code of account with database ID <code>id</code>
 	 * @param id Record ID of the account to be removed
 	 * @return Currency code of the account
@@ -1318,4 +1321,5 @@ public int deleteAllRecords(){
         mDb.delete(SplitEntry.TABLE_NAME, null, null);
         return mDb.delete(AccountEntry.TABLE_NAME, null, null);
 	}
+
 }
diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 82d53123..39726893 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -272,6 +272,20 @@ public long getAccountID(String accountUID){
     }
 
     /**
+     * Returns the database record ID of the entry
+     * @param uid GUID of the record
+     * @return Long database identifier of the record
+     */
+    public abstract long getID(String uid);
+
+    /**
+     * Returns the global unique identifier of the record
+     * @param id Database record ID of the entry
+     * @return String GUID of the record
+     */
+    public abstract String getUID(long id);
+
+    /**
      * Updates a record in the table
      * @param recordId Database ID of the record to be updated
      * @param columnKey Name of column to be updated
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index cea52d41..edc6011d 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -24,22 +24,19 @@
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
-
 import android.util.Log;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
-import org.gnucash.android.model.Transaction;
 import org.gnucash.android.model.TransactionType;
 
 import java.math.BigDecimal;
-import java.math.MathContext;
-import java.math.RoundingMode;
 import java.util.ArrayList;
 import java.util.Currency;
 import java.util.List;
 
-import static org.gnucash.android.db.DatabaseSchema.*;
+import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
+import static org.gnucash.android.db.DatabaseSchema.TransactionEntry;
 
 /**
  * Database adapter for managing transaction splits in the database
@@ -325,6 +322,7 @@ public Cursor fetchSplits(String condition, String sortOrder){
      * @param uid Unique Identifier String of the split transaction
      * @return Database record ID of split
      */
+    @Override
     public long getID(String uid){
         if (uid == null)
             return 0;
@@ -348,6 +346,7 @@ public long getID(String uid){
      * @param id Database record ID of the split
      * @return String unique identifier of the split
      */
+    @Override
     public String getUID(long id){
         Cursor cursor = mDb.query(SplitEntry.TABLE_NAME,
                 new String[]{SplitEntry.COLUMN_UID},
@@ -526,17 +525,15 @@ public boolean deleteSplitsForTransaction(long transactionId){
 
     /**
      * Deletes splits for a specific transaction and account and the transaction itself
-     * @param transactionId Database record ID of the transaction
-     * @param accountId Database ID of the account
+     * @param transactionUID String unique ID of transaction
+     * @param accountUID String unique ID of account
      * @return Number of records deleted
      */
-    public int deleteSplitsForTransactionAndAccount(long transactionId, long accountId){
-        String transactionUID  = getTransactionUID(transactionId);
-        String accountUID      = getAccountUID(accountId);
+    public int deleteSplitsForTransactionAndAccount(String transactionUID, String accountUID){
         int deletedCount = mDb.delete(SplitEntry.TABLE_NAME,
                 SplitEntry.COLUMN_TRANSACTION_UID + "= ? AND " + SplitEntry.COLUMN_ACCOUNT_UID + "= ?",
                 new String[]{transactionUID, accountUID});
-        deleteTransaction(transactionId);
+        deleteTransaction(getID(transactionUID));
         return deletedCount;
     }
 
@@ -552,4 +549,5 @@ private boolean deleteTransaction(long transactionId) {
     public int deleteAllRecords() {
         return deleteAllRecords(SplitEntry.TABLE_NAME);
     }
+
 }
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 05852e88..bed881d0 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -441,13 +441,11 @@ public String getCurrencyCode(long accountId){
     /**
      * Returns the transaction balance for the transaction for the specified account.
      * <p>We consider only those splits which belong to this account</p>
-     * @param transactionId Database record ID of the transaction
-     * @param accountId Database record id of the account
+     * @param transactionUID GUID of the transaction
+     * @param accountUID GUID of the account
      * @return {@link org.gnucash.android.model.Money} balance of the transaction for that account
      */
-    public Money getBalance(long transactionId, long accountId){
-        String accountUID = getAccountUID(accountId);
-        String transactionUID = getUID(transactionId);
+    public Money getBalance(String transactionUID, String accountUID){
         List<Split> splitList = mSplitsDbAdapter.getSplitsForTransactionInAccount(
                 transactionUID, accountUID);
 
@@ -459,6 +457,7 @@ public Money getBalance(long transactionId, long accountId){
      * @param transactionId Database record ID of transaction
      * @return String unique identifier of the transaction
      */
+    @Override
     public String getUID(long transactionId){
         String uid = null;
         Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
@@ -503,20 +502,19 @@ public boolean deleteTransaction(String uid){
 	public int deleteAllRecords(){
 		return deleteAllRecords(TransactionEntry.TABLE_NAME);
 	}
-	
-	/**
+
+    /**
 	 * Assigns transaction with id <code>rowId</code> to account with id <code>accountId</code>
-	 * @param rowId Record ID of the transaction to be assigned
-     * @param srcAccountId Record Id of the account from which the transaction is to be moved
-	 * @param dstAccountId Record Id of the account to which the transaction will be assigned
+	 * @param transactionUID GUID of the transaction
+     * @param srcAccountUID GUID of the account from which the transaction is to be moved
+	 * @param dstAccountUID GUID of the account to which the transaction will be assigned
 	 * @return Number of transactions splits affected
 	 */
-	public int moveTranscation(long rowId, long srcAccountId, long dstAccountId){
-		Log.i(TAG, "Moving transaction ID " + rowId + " splits from " + srcAccountId + " to account " + dstAccountId);
-		String srcAccountUID = getAccountUID(srcAccountId);
-        String dstAccountUID = getAccountUID(dstAccountId);
+	public int moveTranscation(String transactionUID, String srcAccountUID, String dstAccountUID){
+		Log.i(TAG, "Moving transaction ID " + transactionUID
+                + " splits from " + srcAccountUID + " to account " + dstAccountUID);
 
-		List<Split> splits = mSplitsDbAdapter.getSplitsForTransactionInAccount(getUID(rowId), srcAccountUID);
+		List<Split> splits = mSplitsDbAdapter.getSplitsForTransactionInAccount(transactionUID, srcAccountUID);
         for (Split split : splits) {
             split.setAccountUID(dstAccountUID);
             mSplitsDbAdapter.addSplit(split);
@@ -557,6 +555,7 @@ public long getAllTransactionsCount(){
      * @param transactionUID Unique idendtifier of the transaction
      * @return Database record ID for the transaction
      */
+    @Override
     public long getID(String transactionUID){
         long id = -1;
         Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
@@ -632,4 +631,13 @@ public void scheduleTransaction(Transaction recurringTransaction) {
         alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, firstRunMillis,
                 recurrencePeriodMillis, recurringPendingIntent);
     }
+
+    /**
+     * Returns a transaction for the given transaction GUID
+     * @param transactionUID GUID of the transaction
+     * @return Retrieves a transaction from the database
+     */
+    public Transaction getTransaction(String transactionUID) {
+        return getTransaction(getID(transactionUID));
+    }
 }
diff --git a/app/src/org/gnucash/android/receivers/TransactionAppWidgetProvider.java b/app/src/org/gnucash/android/receivers/TransactionAppWidgetProvider.java
index 52435d7e..ee62139b 100644
--- a/app/src/org/gnucash/android/receivers/TransactionAppWidgetProvider.java
+++ b/app/src/org/gnucash/android/receivers/TransactionAppWidgetProvider.java
@@ -42,15 +42,14 @@ public void onUpdate(Context context, AppWidgetManager appWidgetManager,
         // Perform this loop procedure for each App Widget that belongs to this provider
         for (int i=0; i<N; i++) {
             int appWidgetId = appWidgetIds[i];
-            
-            long accountId = PreferenceManager
-            		.getDefaultSharedPreferences(context)
-            		.getLong(UxArgument.SELECTED_ACCOUNT_ID + appWidgetId, -1);
-            
-            if (accountId <= 0)
+
+            String accountUID = PreferenceManager
+                    .getDefaultSharedPreferences(context)
+                    .getString(UxArgument.SELECTED_ACCOUNT_UID + appWidgetId, null);
+            if (accountUID == null)
             	return;
             
-            WidgetConfigurationActivity.updateWidget(context, appWidgetId, accountId);            
+            WidgetConfigurationActivity.updateWidget(context, appWidgetId, accountUID);
         }
 	}
 
@@ -66,7 +65,7 @@ public void onDeleted(Context context, int[] appWidgetIds) {
 		Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
 		
 		for (int appWidgetId : appWidgetIds) {
-			editor.remove(UxArgument.SELECTED_ACCOUNT_ID + appWidgetId);
+			editor.remove(UxArgument.SELECTED_ACCOUNT_UID + appWidgetId);
 		}
 		editor.commit();		
 	}
diff --git a/app/src/org/gnucash/android/ui/UxArgument.java b/app/src/org/gnucash/android/ui/UxArgument.java
index 0bc60732..9230bd2c 100644
--- a/app/src/org/gnucash/android/ui/UxArgument.java
+++ b/app/src/org/gnucash/android/ui/UxArgument.java
@@ -23,15 +23,9 @@
 public final class UxArgument {
 
     /**
-     * Arguments key for database ID of transaction.
-     * Is used to pass a transaction ID into a bundle or intent
+     * Key for passing the transaction GUID as parameter in a bundle
      */
-    public static final String SELECTED_TRANSACTION_ID  = "selected_transaction_id";
-
-    /**
-     * Key for passing the selected account ID as an argument in a bundle or intent
-     */
-    public static final String SELECTED_ACCOUNT_ID 		= "selected_account_id";
+    public static final String SELECTED_TRANSACTION_UID  = "selected_transaction_uid";
 
     /**
 	 * Key for passing list of IDs selected transactions as an argument in a bundle or intent
@@ -41,12 +35,7 @@
     /**
 	 * Key for the origin account as argument when moving accounts
 	 */
-	public static final String ORIGIN_ACCOUNT_ID        = "origin_acccount_id";
-
-    /**
-     * Key for passing argument for the parent account ID.
-     */
-    public static final String PARENT_ACCOUNT_ID        = "parent_account_id";
+	public static final String ORIGIN_ACCOUNT_UID = "origin_acccount_uid";
 
     /**
      * Key for checking whether the passcode is enabled or not.
@@ -68,6 +57,16 @@
      */
     public static final String PASSCODE_CLASS_CALLER = "passcode_class_caller";
 
+    /**
+     * Key for passing the account unique ID as argument to UI
+     */
+    public static final String SELECTED_ACCOUNT_UID = "account_uid";
+
+    /**
+     * Key for passing argument for the parent account GUID.
+     */
+    public static final String PARENT_ACCOUNT_UID = "parent_account_uid";
+
     //prevent initialization of instances of this class
     private UxArgument(){
         //prevent even the native class from calling the ctor
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index b5acebf4..28db64eb 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -29,7 +29,6 @@
 import android.support.v4.app.FragmentManager;
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -52,11 +51,7 @@
 import org.gnucash.android.ui.colorpicker.ColorSquare;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Currency;
-import java.util.HashMap;
-import java.util.List;
+import java.util.*;
 
 /**
  * Fragment used for creating and editing accounts
@@ -95,19 +90,13 @@
 	 * List of all currency codes (ISO 4217) supported by the app
 	 */
 	private List<String> mCurrencyCodes;
-	
-	/**
-	 * Record ID of the account which was selected
-	 * This is used if we are editing an account instead of creating one
-	 */
-	private long mSelectedAccountId = 0;
 
     /**
-     * Database ID of the parent account
+     * GUID of the parent account
      * This value is set to the parent account of the transaction being edited or
      * the account in which a new sub-account is being created
      */
-    private long mParentAccountId = -1;
+    private String mParentAccountUID = null;
 
     /**
      * Account ID of the root account
@@ -125,6 +114,11 @@
 	private Account mAccount = null;
 
     /**
+     * Unique ID string of account being edited
+     */
+    private String mAccountUID = null;
+
+    /**
      * Cursor which will hold set of eligible parent accounts
      */
 	private Cursor mParentAccountCursor;
@@ -201,6 +195,7 @@ public void onColorSelected(int color) {
         }
     };
 
+
     /**
 	 * Default constructor
 	 * Required, else the app crashes on screen rotation
@@ -251,7 +246,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
             @Override
             public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {
                 loadParentAccountList(getSelectedAccountType());
-                setParentAccountSelection(mParentAccountId);
+                setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
             }
 
             @Override
@@ -311,9 +306,10 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		currencyArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		mCurrencySpinner.setAdapter(currencyArrayAdapter);
 
-        mSelectedAccountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
-        if (mSelectedAccountId > 0) {
-            mAccount = mAccountsDbAdapter.getAccount(mSelectedAccountId);
+        mAccountUID = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
+
+        if (mAccountUID != null) {
+            mAccount = mAccountsDbAdapter.getAccount(mAccountUID);
             getSherlockActivity().getSupportActionBar().setTitle(R.string.title_edit_account);
         }
         mRootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
@@ -343,12 +339,12 @@ private void initializeViewsWithAccount(Account account){
             throw new IllegalArgumentException("Account cannot be null");
 
         loadParentAccountList(account.getAccountType());
-        mParentAccountId = mAccountsDbAdapter.getAccountID(account.getParentUID());
-        if (mParentAccountId == -1) {
+        mParentAccountUID = account.getParentUID();
+        if (mParentAccountUID == null) {
             // null parent, set Parent as root
-            mParentAccountId = mRootAccountId;
+            mParentAccountUID = mRootAccountUID;
         }
-        setParentAccountSelection(mParentAccountId);
+        setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
 
         String currencyCode = account.getCurrency().getCurrencyCode();
         setSelectedCurrency(currencyCode);
@@ -372,23 +368,16 @@ private void initializeViewsWithAccount(Account account){
     private void initializeViews(){
         setSelectedCurrency(Money.DEFAULT_CURRENCY_CODE);
         mColorSquare.setBackgroundColor(Color.LTGRAY);
-        mParentAccountId = getArguments().getLong(UxArgument.PARENT_ACCOUNT_ID);
+        mParentAccountUID = getArguments().getString(UxArgument.PARENT_ACCOUNT_UID);
 
 
-        if (mParentAccountId > 0) {
-            AccountType parentAccountType = mAccountsDbAdapter.getAccountType(mParentAccountId);
+        if (mParentAccountUID != null) {
+            AccountType parentAccountType = mAccountsDbAdapter.getAccountType(mParentAccountUID);
             setAccountTypeSelection(parentAccountType);
             loadParentAccountList(parentAccountType);
-            setParentAccountSelection(mParentAccountId);
-//            String colorHex = mAccountsDbAdapter.getAccountColorCode(parentAccountId);
-//            initializeColorSquarePreview(colorHex);
-//            mSelectedColor = colorHex;
+            setParentAccountSelection(mAccountsDbAdapter.getID(mParentAccountUID));
         }
 
-        //this must be called after changing account type
-        //because changing account type reloads list of eligible parent accounts
-
-
     }
 
     /**
@@ -533,7 +522,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
      * Initializes the default transfer account spinner with eligible accounts
      */
     private void loadDefaultTransferAccountList(){
-        String condition = DatabaseSchema.AccountEntry._ID + " != " + mSelectedAccountId
+        String condition = DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountUID + "' "
                 + " AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + "=0"
                 + " AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID() + "'";
         /*
@@ -563,10 +552,10 @@ private void loadParentAccountList(AccountType accountType){
 
         if (mAccount != null){  //if editing an account
             mDescendantAccountUIDs = mAccountsDbAdapter.getDescendantAccountUIDs(mAccount.getUID(), null, null);
+            mDescendantAccountUIDs.add(mAccountUID); //cannot set self as parent
             // limit cyclic account hierarchies.
             condition += " AND (" + DatabaseSchema.AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL "
-                    + " OR " + DatabaseSchema.AccountEntry.COLUMN_UID + " NOT IN ( '" + TextUtils.join("','", mDescendantAccountUIDs) + "' ) )"
-                    + " AND " + DatabaseSchema.AccountEntry._ID + " != " + mSelectedAccountId;
+                    + " OR " + DatabaseSchema.AccountEntry.COLUMN_UID + " NOT IN ( '" + TextUtils.join("','", mDescendantAccountUIDs) + "' ) )";
         }
 
         //if we are reloading the list, close the previous cursor first
@@ -737,8 +726,9 @@ private void saveAccount() {
             mAccount.setDefaultTransferAccountUID(null);
         }
 
+        long parentAccountId = mAccountsDbAdapter.getID(mParentAccountUID);
         // update full names
-        if (mDescendantAccountUIDs == null || newParentAccountId != mParentAccountId) {
+        if (mDescendantAccountUIDs == null || newParentAccountId != parentAccountId) {
             // new Account or parent account changed
             String newAccountFullName;
             if (newParentAccountId == mRootAccountId){
@@ -751,7 +741,7 @@ private void saveAccount() {
             mAccount.setFullName(newAccountFullName);
             if (mDescendantAccountUIDs != null) {
                 // modifying existing account
-                if (mParentAccountId != newParentAccountId && mDescendantAccountUIDs.size() > 0) {
+                if (parentAccountId != newParentAccountId && mDescendantAccountUIDs.size() > 0) {
                     // parent change, update all full names of descent accounts
                     accountsToUpdate.addAll(mAccountsDbAdapter.getSimpleAccountList(
                             DatabaseSchema.AccountEntry.COLUMN_UID + " IN ('" +
@@ -800,7 +790,7 @@ private AccountType getSelectedAccountType() {
 
     /**
 	 * Retrieves the name of the account which has been entered in the EditText
-	 * @return
+	 * @return Name of the account which has been entered in the EditText
 	 */
 	public String getEnteredName(){
 		return mNameEditText.getText().toString().trim();
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index 0b6cc94f..28fb5717 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -223,12 +223,12 @@ public void onCreate(Bundle savedInstanceState) {
             mPager.setVisibility(View.GONE);
             titlePageIndicator.setVisibility(View.GONE);
 
-            long accountId = intent.getLongExtra(UxArgument.SELECTED_ACCOUNT_ID, 0L);
-            if (accountId > 0)
-                showEditAccountFragment(accountId);
+            String accountUID = intent.getStringExtra(UxArgument.SELECTED_ACCOUNT_UID);
+            if (accountUID != null)
+                showEditAccountFragment(accountUID);
             else {
-                long parentAccountId = intent.getLongExtra(UxArgument.PARENT_ACCOUNT_ID, 0L);
-                showAddAccountFragment(parentAccountId);
+                String parentAccountUID = intent.getStringExtra(UxArgument.PARENT_ACCOUNT_UID);
+                showAddAccountFragment(parentAccountUID);
             }
         } else if (action != null && action.equals(ACTION_VIEW_RECURRING)) {
             mPager.setVisibility(View.GONE);
@@ -360,11 +360,11 @@ private Intent createNewAccountIntent(){
 
     /**
      * Shows form fragment for creating a new account
-     * @param parentAccountId Record ID of the parent account present. Can be 0 for top-level account
+     * @param parentAccountUID GUID of the parent account present. Can be 0 for top-level account
      */
-    private void showAddAccountFragment(long parentAccountId){
+    private void showAddAccountFragment(String parentAccountUID){
         Bundle args = new Bundle();
-        args.putLong(UxArgument.PARENT_ACCOUNT_ID, parentAccountId);
+        args.putString(UxArgument.PARENT_ACCOUNT_UID, parentAccountUID);
         showAccountFormFragment(args);
     }
 
@@ -385,11 +385,11 @@ private void showRecurringTransactionsFragment(){
     }
     /**
      * Shows the form fragment for editing the account with record ID <code>accountId</code>
-     * @param accountId Record ID of the account to be edited
+     * @param accountUID GUID of the account to be edited
      */
-    private void showEditAccountFragment(long accountId) {
+    private void showEditAccountFragment(String accountUID) {
         Bundle args = new Bundle();
-        args.putLong(UxArgument.SELECTED_ACCOUNT_ID, accountId);
+        args.putString(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
         showAccountFormFragment(args);
     }
 
@@ -503,10 +503,10 @@ public static void start(Context context){
     }
 
     @Override
-	public void accountSelected(long accountRowId) {
+	public void accountSelected(String accountUID) {
 		Intent intent = new Intent(this, TransactionsActivity.class);
 		intent.setAction(Intent.ACTION_VIEW);
-		intent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountRowId);
+		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
 
 		startActivity(intent);
 	}
diff --git a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
index 372f0ad3..060b2ed9 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -127,7 +127,13 @@
      * Database record ID of the account whose children will be loaded by the list fragment.
      * If no parent account is specified, then all top-level accounts are loaded.
      */
-    private long mParentAccountId = -1;
+//    private long mParentAccountId = -1;
+
+    /**
+     * GUID of the account whose children will be loaded in the list fragment.
+     * If no parent account is specified, then all top-level accounts are loaded.
+     */
+    private String mParentAccountUID = null;
 
     /**
      * Filter for which accounts should be displayed. Used by search interface
@@ -204,7 +210,7 @@ public void onCreate(Bundle savedInstanceState) {
 
         Bundle args = getArguments();
         if (args != null)
-            mParentAccountId = args.getLong(UxArgument.PARENT_ACCOUNT_ID);
+            mParentAccountUID = args.getString(UxArgument.PARENT_ACCOUNT_UID);
 
         mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
         mAccountsCursorAdapter = new AccountsCursorAdapter(
@@ -260,7 +266,7 @@ public void onListItemClick(ListView listView, View view, int position, long id)
             listView.setItemChecked(position, true);
             return;
         }
-        mAccountSelectedListener.accountSelected(id);
+        mAccountSelectedListener.accountSelected(mAccountsDbAdapter.getAccountUID(id));
     }
 
     @Override
@@ -296,7 +302,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
      */
     public void tryDeleteAccount(long rowId) {
         Account acc = mAccountsDbAdapter.getAccount(rowId);
-        if (acc.getTransactionCount() > 0 || mAccountsDbAdapter.getSubAccountCount(rowId) > 0) {
+        if (acc.getTransactionCount() > 0 || mAccountsDbAdapter.getSubAccountCount(acc.getUID()) > 0) {
             showConfirmationDialog(rowId);
         } else {
             deleteAccount(rowId, false);
@@ -327,7 +333,8 @@ protected void deleteAccount(long rowId, boolean deleteSubAccounts) {
      * @param id Record ID of account to be deleted after confirmation
      */
     public void showConfirmationDialog(long id) {
-        DeleteConfirmationDialogFragment alertFragment = DeleteConfirmationDialogFragment.newInstance(R.string.title_confirm_delete, id);
+        DeleteConfirmationDialogFragment alertFragment =
+                DeleteConfirmationDialogFragment.newInstance(R.string.title_confirm_delete, mAccountsDbAdapter.getAccountUID(id));
         alertFragment.setTargetFragment(this, 0);
         alertFragment.show(getSherlockActivity().getSupportFragmentManager(), "dialog");
     }
@@ -345,7 +352,7 @@ public void finishEditMode() {
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        if (mParentAccountId > 0)
+        if (mParentAccountUID != null)
             inflater.inflate(R.menu.sub_account_actions, menu);
         else {
             inflater.inflate(R.menu.account_actions, menu);
@@ -371,7 +378,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
             case R.id.menu_add_account:
                 Intent addAccountIntent = new Intent(getActivity(), AccountsActivity.class);
                 addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-                addAccountIntent.putExtra(UxArgument.PARENT_ACCOUNT_ID, mParentAccountId);
+                addAccountIntent.putExtra(UxArgument.PARENT_ACCOUNT_UID, mParentAccountUID);
                 startActivityForResult(addAccountIntent, AccountsActivity.REQUEST_EDIT_ACCOUNT);
                 return true;
 
@@ -385,8 +392,8 @@ public boolean onOptionsItemSelected(MenuItem item) {
     }
 
     @Override
-    public void refresh(long parentAccountId) {
-        getArguments().putLong(UxArgument.PARENT_ACCOUNT_ID, parentAccountId);
+    public void refresh(String parentAccountUID) {
+        getArguments().putString(UxArgument.PARENT_ACCOUNT_UID, parentAccountUID);
         refresh();
     }
 
@@ -428,13 +435,13 @@ public void onDestroy() {
         mAccountsCursorAdapter.close();
     }
 
-    public void showAddAccountFragment(long accountId) {
+    public void showAddAccountFragment(String accountUID) {
         FragmentManager fragmentManager = getSherlockActivity().getSupportFragmentManager();
         FragmentTransaction fragmentTransaction = fragmentManager
                 .beginTransaction();
 
         Bundle args = new Bundle();
-        args.putLong(UxArgument.SELECTED_ACCOUNT_ID, accountId);
+        args.putString(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
         AccountFormFragment accountFormFragment = AccountFormFragment.newInstance(mAccountsDbAdapter);
         accountFormFragment.setArguments(args);
 
@@ -453,7 +460,7 @@ public void showAddAccountFragment(long accountId) {
     public void openCreateOrEditActivity(long accountId){
         Intent editAccountIntent = new Intent(AccountsListFragment.this.getActivity(), AccountsActivity.class);
         editAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-        editAccountIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountId);
+        editAccountIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, mAccountsDbAdapter.getAccountUID(accountId));
         startActivityForResult(editAccountIntent, AccountsActivity.REQUEST_EDIT_ACCOUNT);
     }
 
@@ -477,13 +484,13 @@ public void showExportDialog() {
     @Override
     public Loader<Cursor> onCreateLoader(int id, Bundle args) {
         Log.d(TAG, "Creating the accounts loader");
-        Bundle fragmentArguments = getArguments();
-        long accountId = fragmentArguments == null ? -1 : fragmentArguments.getLong(UxArgument.PARENT_ACCOUNT_ID);
+        Bundle arguments = getArguments();
+        String accountUID = arguments == null ? null : arguments.getString(UxArgument.PARENT_ACCOUNT_UID);
 
         if (mCurrentFilter != null){
             return new AccountsCursorLoader(getActivity(), mCurrentFilter);
         } else {
-            return new AccountsCursorLoader(this.getActivity(), accountId, mDisplayMode);
+            return new AccountsCursorLoader(this.getActivity(), accountUID, mDisplayMode);
         }
     }
 
@@ -538,11 +545,17 @@ public boolean onClose() {
      */
     public static class DeleteConfirmationDialogFragment extends SherlockDialogFragment {
 
-        public static DeleteConfirmationDialogFragment newInstance(int title, long id) {
+        /**
+         * Creates new instance of the delete confirmation dialog and provides parameters for it
+         * @param title Title to use for the dialog
+         * @param uid GUID of the account to be deleted
+         * @return New instance of the delete confirmation dialog
+         */
+        public static DeleteConfirmationDialogFragment newInstance(int title, String uid) {
             DeleteConfirmationDialogFragment frag = new DeleteConfirmationDialogFragment();
             Bundle args = new Bundle();
             args.putInt("title", title);
-            args.putLong(UxArgument.SELECTED_ACCOUNT_ID, id);
+            args.putString(UxArgument.SELECTED_ACCOUNT_UID, uid);
             frag.setArguments(args);
             return frag;
         }
@@ -550,7 +563,8 @@ public static DeleteConfirmationDialogFragment newInstance(int title, long id) {
         @Override
         public Dialog onCreateDialog(Bundle savedInstanceState) {
             int title = getArguments().getInt("title");
-            final long rowId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
+            final String uid = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
+
             LayoutInflater layoutInflater = getSherlockActivity().getLayoutInflater();
             final View dialogLayout = layoutInflater.inflate(R.layout.dialog_account_delete, (ViewGroup) getView());
             AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(getActivity())
@@ -561,16 +575,17 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                             new DialogInterface.OnClickListener() {
                                 public void onClick(DialogInterface dialog, int whichButton) {
                                     Context context = getDialog().getContext();
-                                    if (rowId < 0) {
-                                        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+                                    AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+                                    if (uid == null) {
                                         accountsDbAdapter.deleteAllRecords();
-                                        accountsDbAdapter.close();
                                         Toast.makeText(context, R.string.toast_all_accounts_deleted, Toast.LENGTH_SHORT).show();
                                     } else {
                                         CheckBox deleteSubAccountsCheckBox = (CheckBox) dialogLayout
                                                 .findViewById(R.id.checkbox_delete_sub_accounts);
+                                        long rowId = accountsDbAdapter.getID(uid);
                                         ((AccountsListFragment) getTargetFragment()).deleteAccount(rowId, deleteSubAccountsCheckBox.isChecked());
                                     }
+                                    accountsDbAdapter.close();
                                 }
                             })
                     .setNegativeButton(R.string.alert_dialog_cancel,
@@ -595,7 +610,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
      * @author Ngewi Fet <ngewif@gmail.com>
      */
     private static final class AccountsCursorLoader extends DatabaseCursorLoader {
-        private long mParentAccountId = -1;
+        private String mParentAccountUID = null;
         private String mFilter;
         private DisplayMode mDisplayMode = DisplayMode.TOP_LEVEL;
 
@@ -604,11 +619,11 @@ public void onClick(DialogInterface dialog, int whichButton) {
          * If the <code>parentAccountId <= 0</code> then only top-level accounts are loaded.
          * Else only the child accounts of the <code>parentAccountId</code> will be loaded
          * @param context Application context
-         * @param parentAccountId Record ID of the parent account
+         * @param parentAccountUID GUID of the parent account
          */
-        public AccountsCursorLoader(Context context, long parentAccountId, DisplayMode displayMode) {
+        public AccountsCursorLoader(Context context, String parentAccountUID, DisplayMode displayMode) {
             super(context);
-            mParentAccountId = parentAccountId;
+            this.mParentAccountUID = parentAccountUID;
             this.mDisplayMode = displayMode;
         }
 
@@ -632,8 +647,8 @@ public Cursor loadInBackground() {
                 cursor = ((AccountsDbAdapter)mDatabaseAdapter)
                         .fetchAccounts(DatabaseSchema.AccountEntry.COLUMN_NAME + " LIKE '%" + mFilter + "%'");
             } else {
-                if (mParentAccountId > 0)
-                    cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchSubAccounts(mParentAccountId);
+                if (mParentAccountUID != null && mParentAccountUID.length() > 0)
+                    cursor = ((AccountsDbAdapter) mDatabaseAdapter).fetchSubAccounts(mParentAccountUID);
                 else {
                     switch (this.mDisplayMode){
                         case RECENT:
@@ -677,14 +692,14 @@ public void close() {
         }
 
         @Override
-        public void bindView(View v, Context context, Cursor cursor) {
+        public void bindView(View v, Context context, final Cursor cursor) {
             // perform the default binding
             super.bindView(v, context, cursor);
 
-            final long accountId = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
+            final String accountUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID));
 
             TextView subAccountTextView = (TextView) v.findViewById(R.id.secondary_text);
-            int subAccountCount = mAccountsDbAdapter.getSubAccountCount(accountId);
+            int subAccountCount = mAccountsDbAdapter.getSubAccountCount(accountUID);
             if (subAccountCount > 0) {
                 subAccountTextView.setVisibility(View.VISIBLE);
                 String text = getResources().getQuantityString(R.plurals.label_sub_accounts, subAccountCount, subAccountCount);
@@ -695,7 +710,7 @@ public void bindView(View v, Context context, Cursor cursor) {
             // add a summary of transactions to the account view
             TextView accountBalanceTextView = (TextView) v
                     .findViewById(R.id.transactions_summary);
-            new AccountBalanceTask(accountBalanceTextView, getActivity()).execute(accountId);
+            new AccountBalanceTask(accountBalanceTextView, getActivity()).execute(accountUID);
 
             View colorStripView = v.findViewById(R.id.account_color_strip);
             String accountColor = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_COLOR_CODE));
@@ -706,7 +721,7 @@ public void bindView(View v, Context context, Cursor cursor) {
                 colorStripView.setBackgroundColor(Color.TRANSPARENT);
             }
 
-            boolean isPlaceholderAccount = mAccountsDbAdapter.isPlaceholderAccount(accountId);
+            boolean isPlaceholderAccount = mAccountsDbAdapter.isPlaceholderAccount(accountUID);
             ImageButton newTransactionButton = (ImageButton) v.findViewById(R.id.btn_new_transaction);
             if (isPlaceholderAccount){
                 newTransactionButton.setVisibility(View.GONE);
@@ -718,7 +733,8 @@ public void bindView(View v, Context context, Cursor cursor) {
                     public void onClick(View v) {
                         Intent intent = new Intent(getActivity(), TransactionsActivity.class);
                         intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-                        intent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountId);
+                        String accountUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID));
+                        intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
                         getActivity().startActivity(intent);
                     }
                 });
diff --git a/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java b/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
index 3972a2ac..e9f8b208 100644
--- a/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
@@ -29,7 +29,8 @@ protected void onResume() {
             startActivity(new Intent(this, PasscodeLockScreenActivity.class)
                     .setAction(getIntent().getAction())
                     .putExtra(UxArgument.PASSCODE_CLASS_CALLER, this.getClass().getName())
-                    .putExtra(UxArgument.SELECTED_ACCOUNT_ID, getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_ID, 0L))
+                    .putExtra(UxArgument.SELECTED_ACCOUNT_UID,
+                            getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_UID, 0L))
             );
         }
     }
@@ -45,7 +46,7 @@ protected void onPause() {
      */
     private boolean isSessionActive() {
         return System.currentTimeMillis() - GnuCashApplication.PASSCODE_SESSION_INIT_TIME
-                < GnuCashApplication.SESSION_TIMEOUT ? true : false;
+                < GnuCashApplication.SESSION_TIMEOUT;
     }
 
 }
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
index 9bac9665..ba7b55f1 100644
--- a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
@@ -55,7 +55,7 @@ public void onPasscodeEntered(String pass) {
                     .setClassName(this, getIntent().getStringExtra(UxArgument.PASSCODE_CLASS_CALLER))
                     .setAction(getIntent().getAction())
                     .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
-                    .putExtra(UxArgument.SELECTED_ACCOUNT_ID, getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_ID, 0L))
+                    .putExtra(UxArgument.SELECTED_ACCOUNT_UID, getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_UID, 0L))
             );
         } else {
             Toast.makeText(this, R.string.toast_wrong_passcode, Toast.LENGTH_SHORT).show();
diff --git a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index d5a37b39..3cdd9008 100644
--- a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -184,21 +184,19 @@ public void onListItemClick(ListView l, View v, int position, long id) {
             return;
         }
         String accountUID = mTransactionsDbAdapter.getTransaction(id).getSplits().get(0).getAccountUID();
-        long accountID = mTransactionsDbAdapter.getAccountID(accountUID);
-
-        openTransactionForEdit(accountID, id);
+        openTransactionForEdit(accountUID, mTransactionsDbAdapter.getUID(id));
     }
 
     /**
      * Opens the transaction editor to enable editing of the transaction
-     * @param accountId Account ID of the transaction
-     * @param transactionId Transaction to be edited
+     * @param accountUID GUID of account to which transaction belongs
+     * @param transactionUID GUID of transaction to be edited
      */
-    public void openTransactionForEdit(long accountId, long transactionId){
+    public void openTransactionForEdit(String accountUID, String transactionUID){
         Intent createTransactionIntent = new Intent(getActivity(), TransactionsActivity.class);
         createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-        createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountId);
-        createTransactionIntent.putExtra(UxArgument.SELECTED_TRANSACTION_ID, transactionId);
+        createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
+        createTransactionIntent.putExtra(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
         startActivity(createTransactionIntent);
     }
 
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index df9184c6..529e0537 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -173,7 +173,7 @@
     private AmountInputFormatter mAmountInputFormatter;
 
     private Button mOpenSplitsButton;
-    private long mAccountId;
+    private String mAccountUID;
 
     private List<Split> mSplitsList = new ArrayList<Split>();
 
@@ -215,8 +215,11 @@ public void onActivityCreated(Bundle savedInstanceState) {
             mOpenSplitsButton.setVisibility(View.GONE);
 		}
 
-		//updateTransferAccountsList must only be called after creating mAccountsDbAdapter
+        mAccountUID = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
 		mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
+        mAccountType = mAccountsDbAdapter.getAccountType(mAccountUID);
+
+        //updateTransferAccountsList must only be called after initializing mAccountsDbAdapter
 		updateTransferAccountsList();
 
         ArrayAdapter<CharSequence> recurrenceAdapter = ArrayAdapter.createFromResource(getActivity(),
@@ -224,19 +227,16 @@ public void onActivityCreated(Bundle savedInstanceState) {
         recurrenceAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         mRecurringTransactionSpinner.setAdapter(recurrenceAdapter);
 
-        long transactionId = getArguments().getLong(UxArgument.SELECTED_TRANSACTION_ID);
+        String transactionUID = getArguments().getString(UxArgument.SELECTED_TRANSACTION_UID);
 		mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
-		mTransaction = mTransactionsDbAdapter.getTransaction(transactionId);
-
-        mAccountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
-        mAccountType = mAccountsDbAdapter.getAccountType(mAccountId);
+		mTransaction = mTransactionsDbAdapter.getTransaction(transactionUID);
 
         mDoubleAccountSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
             public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
                 if (mSplitsList.size() == 2){ //when handling simple transfer to one account
                     for (Split split : mSplitsList) {
-                        if (!split.getAccountUID().equals(mAccountsDbAdapter.getAccountUID(mAccountId))){
+                        if (!split.getAccountUID().equals(mAccountUID)){
                             split.setAccountUID(mAccountsDbAdapter.getAccountUID(id));
                         }
                         // else case is handled when saving the transactions
@@ -325,13 +325,12 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon
 	private void initializeViewsWithTransaction(){
 		mDescriptionEditText.setText(mTransaction.getDescription());
 
-        String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
         mTransactionTypeButton.setAccountType(mAccountType);
-        mTransactionTypeButton.setChecked(mTransaction.getBalance(accountUID).isNegative());
+        mTransactionTypeButton.setChecked(mTransaction.getBalance(mAccountUID).isNegative());
 
 		if (!mAmountInputFormatter.isInputModified()){
             //when autocompleting, only change the amount if the user has not manually changed it already
-            mAmountEditText.setText(mTransaction.getBalance(accountUID).toPlainString());
+            mAmountEditText.setText(mTransaction.getBalance(mAccountUID).toPlainString());
         }
 		mCurrencyTextView.setText(mTransaction.getCurrency().getSymbol(Locale.getDefault()));
 		mNotesEditText.setText(mTransaction.getNote());
@@ -348,7 +347,7 @@ private void initializeViewsWithTransaction(){
         } else {
             for (Split split : mTransaction.getSplits()) {
                 //two splits, one belongs to this account and the other to another account
-                if (mUseDoubleEntry && !split.getAccountUID().equals(accountUID)) {
+                if (mUseDoubleEntry && !split.getAccountUID().equals(mAccountUID)) {
                     setSelectedTransferAccount(mAccountsDbAdapter.getAccountID(split.getAccountUID()));
                 }
             }
@@ -356,7 +355,7 @@ private void initializeViewsWithTransaction(){
         mSplitsList = new ArrayList<Split>(mTransaction.getSplits()); //we need a copy so we can modify with impunity
         mAmountEditText.setEnabled(mSplitsList.size() <= 2);
 
-		String currencyCode = mTransactionsDbAdapter.getCurrencyCode(mAccountId);
+		String currencyCode = mTransactionsDbAdapter.getCurrencyCode(mAccountUID);
 		Currency accountCurrency = Currency.getInstance(currencyCode);
 		mCurrencyTextView.setText(accountCurrency.getSymbol());
 
@@ -381,15 +380,16 @@ private void initalizeViews() {
 		String typePref = PreferenceManager.getDefaultSharedPreferences(getActivity()).getString(getString(R.string.key_default_transaction_type), "DEBIT");
         mTransactionTypeButton.setChecked(TransactionType.valueOf(typePref));
 
-		final long accountId = getArguments().getLong(UxArgument.SELECTED_ACCOUNT_ID);
+		final String accountUID = getArguments().getString(UxArgument.SELECTED_ACCOUNT_UID);
 		String code = Money.DEFAULT_CURRENCY_CODE;
-		if (accountId != 0){
-			code = mTransactionsDbAdapter.getCurrencyCode(accountId);
+		if (accountUID != null){
+			code = mTransactionsDbAdapter.getCurrencyCode(mAccountUID);
 		}
 		Currency accountCurrency = Currency.getInstance(code);
 		mCurrencyTextView.setText(accountCurrency.getSymbol());
 
         if (mUseDoubleEntry){
+            long accountId = mAccountsDbAdapter.getID(mAccountUID);
             long defaultTransferAccountID = mAccountsDbAdapter.getDefaultTransferAccountID(accountId);
             if (defaultTransferAccountID > 0){
                 setSelectedTransferAccount(defaultTransferAccountID);
@@ -422,10 +422,10 @@ private void setSelectedRecurrenceOption() {
      * Only accounts with the same currency can be transferred to
      */
 	private void updateTransferAccountsList(){
-		long accountId = ((TransactionsActivity)getActivity()).getCurrentAccountID();
+		String accountUID = ((TransactionsActivity)getActivity()).getCurrentAccountUID();
 
-		String conditions = "(" + DatabaseSchema.AccountEntry._ID + " != " + accountId + " AND "
-							+ DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(accountId)
+		String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + accountUID
+                            + "' AND " + DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(accountUID)
                             + "' AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
                             + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                             + ")";
@@ -574,9 +574,8 @@ private void saveNewTransaction() {
 		String notes = mNotesEditText.getText().toString();
 		BigDecimal amountBigd = parseInputToDecimal(mAmountEditText.getText().toString());
 
-		long accountID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountID();
-        String accountUID = mAccountsDbAdapter.getAccountUID(accountID);
-		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getCurrencyCode(accountID));
+		String accountUID 	= ((TransactionsActivity) getSherlockActivity()).getCurrentAccountUID();
+		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getCurrencyCode(accountUID));
 		Money amount 	= new Money(amountBigd, currency).absolute();
 
         //capture any edits which were done directly (not using split editor)
@@ -637,7 +636,7 @@ private void saveNewTransaction() {
                 mTransaction.setSplits(mSplitsList);
             }
 		}
-        mTransaction.setCurrencyCode(mAccountsDbAdapter.getCurrencyCode(accountID));
+        mTransaction.setCurrencyCode(mAccountsDbAdapter.getCurrencyCode(mAccountUID));
 		mTransaction.setTime(cal.getTimeInMillis());
 		mTransaction.setNote(notes);
 
@@ -717,8 +716,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
      */
     public void setSplitList(List<Split> splitList, List<String> removedSplitUIDs){
         mSplitsList = splitList;
-        String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
-        Money balance = Transaction.computeBalance(accountUID, mSplitsList);
+        Money balance = Transaction.computeBalance(mAccountUID, mSplitsList);
 
         mAmountEditText.setText(balance.toPlainString());
         //once we set the split list, do not allow direct editing of the total
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
index 47dd7c51..87d06394 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -104,8 +104,13 @@
     /**
 	 * Database ID of {@link Account} whose transactions are displayed 
 	 */
-	private long mAccountId 	= 0;
-		
+//	private long mAccountId 	= 0;
+
+    /**
+     * GUID of {@link Account} whose transactions are displayed
+     */
+    private String mAccountUID = null;
+
 	/**
 	 * Flag which is used to determine if the activity is running or not. 
 	 * Basically if onCreate has already been called or not. It is used
@@ -134,8 +139,7 @@
 
 		  @Override
 		  public boolean onNavigationItemSelected(int position, long itemId) {
-			mAccountId = itemId;
-
+            mAccountUID = mAccountsDbAdapter.getAccountUID(itemId);
             FragmentManager fragmentManager = getSupportFragmentManager();
 
 		    //inform new accounts fragment that account was changed
@@ -222,7 +226,7 @@ public int getCount() {
         private AccountsListFragment prepareSubAccountsListFragment(){
             AccountsListFragment subAccountsListFragment = new AccountsListFragment();
             Bundle args = new Bundle();
-            args.putLong(UxArgument.PARENT_ACCOUNT_ID, mAccountId);
+            args.putString(UxArgument.PARENT_ACCOUNT_UID, mAccountUID);
             subAccountsListFragment.setArguments(args);
             return subAccountsListFragment;
         }
@@ -234,10 +238,9 @@ private AccountsListFragment prepareSubAccountsListFragment(){
         private TransactionsListFragment prepareTransactionsListFragment(){
             TransactionsListFragment transactionsListFragment = new TransactionsListFragment();
             Bundle args = new Bundle();
-            args.putLong(UxArgument.SELECTED_ACCOUNT_ID,
-                    mAccountId);
+            args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
             transactionsListFragment.setArguments(args);
-            Log.i(TAG, "Opening transactions for account id " +  mAccountId);
+            Log.i(TAG, "Opening transactions for account:  " +  mAccountUID);
             return transactionsListFragment;
         }
     }
@@ -247,23 +250,23 @@ private TransactionsListFragment prepareTransactionsListFragment(){
      * @return <code>true</code> is the current account is a placeholder account, <code>false</code> otherwise.
      */
     private boolean isPlaceHolderAccount(){
-        return mAccountsDbAdapter.isPlaceholderAccount(mAccountId);
+        return mAccountsDbAdapter.isPlaceholderAccount(mAccountUID);
     }
 
     /**
      * Refreshes the fragments currently in the transactions activity
      */
     @Override
-    public void refresh(long accountId) {
+    public void refresh(String accountUID) {
         for (int i = 0; i < mFragmentPageReferenceMap.size(); i++) {
-            mFragmentPageReferenceMap.valueAt(i).refresh(accountId);
+            mFragmentPageReferenceMap.valueAt(i).refresh(accountUID);
         }
         mTitlePageIndicator.notifyDataSetChanged();
     }
 
     @Override
     public void refresh(){
-        refresh(mAccountId);
+        refresh(mAccountUID);
         setTitleIndicatorColor();
     }
 
@@ -276,8 +279,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mTitlePageIndicator = (TitlePageIndicator) findViewById(R.id.titles);
         mSectionHeaderTransactions = (TextView) findViewById(R.id.section_header_transactions);
 
-		mAccountId = getIntent().getLongExtra(
-                UxArgument.SELECTED_ACCOUNT_ID, -1);
+		mAccountUID = getIntent().getStringExtra(UxArgument.SELECTED_ACCOUNT_UID);
 
         mAccountsDbAdapter = new AccountsDbAdapter(this);
 
@@ -306,15 +308,15 @@ protected void onCreate(Bundle savedInstanceState) {
      * Loads the fragment for creating/editing transactions and initializes it to be displayed
      */
     private void initializeCreateOrEditTransaction() {
-        long transactionId = getIntent().getLongExtra(UxArgument.SELECTED_TRANSACTION_ID, -1);
+        String transactionUID = getIntent().getStringExtra(UxArgument.SELECTED_TRANSACTION_UID);
         Bundle args = new Bundle();
-        if (transactionId > 0) {
+        if (transactionUID != null) {
             mSectionHeaderTransactions.setText(R.string.title_edit_transaction);
-            args.putLong(UxArgument.SELECTED_TRANSACTION_ID, transactionId);
-            args.putLong(UxArgument.SELECTED_ACCOUNT_ID, mAccountId);
+            args.putString(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
+            args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
         } else {
             mSectionHeaderTransactions.setText(R.string.title_add_transaction);
-            args.putLong(UxArgument.SELECTED_ACCOUNT_ID, mAccountId);
+            args.putString(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
         }
         showTransactionFormFragment(args);
     }
@@ -331,12 +333,12 @@ protected void onResume() {
     private void setTitleIndicatorColor() {
         //Basically, if we are in a top level account, use the default title color.
         //but propagate a parent account's title color to children who don't have own color
-        String colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountId);
+        String colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountsDbAdapter.getAccountID(mAccountUID));
         int iColor = -1;
         if (colorCode != null){
             iColor = Color.parseColor(colorCode);
         } else {
-            String accountUID = mAccountsDbAdapter.getAccountUID(mAccountId);
+            String accountUID = mAccountUID;
             while ((accountUID = mAccountsDbAdapter.getParentAccountUID(accountUID)) != null) {
                 colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountsDbAdapter.getAccountID(accountUID));
                 if (colorCode != null) {
@@ -389,8 +391,8 @@ public void updateNavigationSelection() {
 		int i = 0;
 		Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
         while (accountsCursor.moveToNext()) {
-            long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
-            if (mAccountId == id) {
+            String uid = accountsCursor.getString(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID));
+            if (mAccountUID.equals(uid)) {
                 getSupportActionBar().setSelectedNavigationItem(i);
                 break;
             }
@@ -408,7 +410,7 @@ public boolean onPrepareOptionsMenu(Menu menu) {
             return super.onPrepareOptionsMenu(menu);
 
         AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
-        boolean isFavoriteAccount = accountsDbAdapter.isFavoriteAccount(mAccountId);
+        boolean isFavoriteAccount = accountsDbAdapter.isFavoriteAccount(mAccountsDbAdapter.getAccountID(mAccountUID));
         accountsDbAdapter.close();
 
         int favoriteIcon = isFavoriteAccount ? android.R.drawable.btn_star_big_on : android.R.drawable.btn_star_big_off;
@@ -434,9 +436,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
 
             case R.id.menu_favorite_account:
                 AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
-                boolean isFavorite = accountsDbAdapter.isFavoriteAccount(mAccountId);
+                long accountId = accountsDbAdapter.getAccountID(mAccountUID);
+                boolean isFavorite = accountsDbAdapter.isFavoriteAccount(accountId);
                 //toggle favorite preference
-                accountsDbAdapter.updateAccount(mAccountId, DatabaseSchema.AccountEntry.COLUMN_FAVORITE, isFavorite ? "0" : "1");
+                accountsDbAdapter.updateAccount(accountId, DatabaseSchema.AccountEntry.COLUMN_FAVORITE, isFavorite ? "0" : "1");
                 accountsDbAdapter.close();
                 supportInvalidateOptionsMenu();
                 return true;
@@ -444,7 +447,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
             case R.id.menu_edit_account:
                 Intent editAccountIntent = new Intent(this, AccountsActivity.class);
                 editAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-                editAccountIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, mAccountId);
+                editAccountIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
                 startActivityForResult(editAccountIntent, AccountsActivity.REQUEST_EDIT_ACCOUNT);
                 return true;
 
@@ -470,11 +473,11 @@ protected void onDestroy() {
 	}
 	
 	/**
-	 * Returns the database row ID of the current account
-	 * @return Database row ID of the current account
+	 * Returns the global unique ID of the current account
+	 * @return GUID of the current account
 	 */
-	public long getCurrentAccountID(){
-		return mAccountId;
+	public String getCurrentAccountUID(){
+		return mAccountUID;
 	}
 	
 	/**
@@ -483,7 +486,7 @@ public long getCurrentAccountID(){
 	 * @param v View which triggered this method
 	 */
 	public void onNewTransactionClick(View v){
-		createNewTransaction(mAccountId);
+		createNewTransaction(mAccountUID);
 	}
 
 
@@ -494,7 +497,7 @@ public void onNewTransactionClick(View v){
     public void onNewAccountClick(View v) {
         Intent addAccountIntent = new Intent(this, AccountsActivity.class);
         addAccountIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-        addAccountIntent.putExtra(UxArgument.PARENT_ACCOUNT_ID, mAccountId);
+        addAccountIntent.putExtra(UxArgument.PARENT_ACCOUNT_UID, mAccountUID);
         startActivityForResult(addAccountIntent, AccountsActivity.REQUEST_EDIT_ACCOUNT);
     }
 
@@ -533,27 +536,27 @@ public static void displayBalance(TextView balanceTextView, Money balance){
     }
 
 	@Override
-	public void createNewTransaction(long accountRowId) {
+	public void createNewTransaction(String accountUID) {
         Intent createTransactionIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
         createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-        createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountRowId);
+        createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
         startActivity(createTransactionIntent);
 	}
 
 	@Override
-	public void editTransaction(long transactionId){
+	public void editTransaction(String transactionUID){
         Intent createTransactionIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
         createTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-        createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, mAccountId);
-        createTransactionIntent.putExtra(UxArgument.SELECTED_TRANSACTION_ID, transactionId);
+        createTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, mAccountUID);
+        createTransactionIntent.putExtra(UxArgument.SELECTED_TRANSACTION_UID, transactionUID);
         startActivity(createTransactionIntent);
 	}
 
     @Override
-    public void accountSelected(long accountRowId) {
+    public void accountSelected(String accountUID) {
         Intent restartIntent = new Intent(this.getApplicationContext(), TransactionsActivity.class);
         restartIntent.setAction(Intent.ACTION_VIEW);
-        restartIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountRowId);
+        restartIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
         startActivity(restartIntent);
     }
 }
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 0e1beaf4..bc986e78 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -76,7 +76,8 @@
 	private SimpleCursorAdapter mCursorAdapter;
 	private ActionMode mActionMode = null;
 	private boolean mInEditMode = false;
-	private long mAccountID;
+//	private long mAccountID;
+    private String mAccountUID;
 
 	/**
 	 * Callback listener for editing transactions
@@ -118,7 +119,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
 			case R.id.context_menu_delete:
                 SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(getActivity());
 				for (long id : getListView().getCheckedItemIds()) {
-                    splitsDbAdapter.deleteSplitsForTransactionAndAccount(id, mAccountID);
+                    splitsDbAdapter.deleteSplitsForTransactionAndAccount(mTransactionsDbAdapter.getUID(id), mAccountUID);
 				}
                 splitsDbAdapter.close();
 				refresh();
@@ -142,7 +143,7 @@ public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setHasOptionsMenu(true);
 		Bundle args = getArguments();
-		mAccountID = args.getLong(UxArgument.SELECTED_ACCOUNT_ID);
+		mAccountUID = args.getString(UxArgument.SELECTED_ACCOUNT_UID);
 
 		mTransactionsDbAdapter = new TransactionsDbAdapter(getActivity());
 		mCursorAdapter = new TransactionsCursorAdapter(
@@ -173,11 +174,11 @@ public void onActivityCreated(Bundle savedInstanceState) {
 
     /**
      * Refresh the list with transactions from account with ID <code>accountId</code>
-     * @param accountId Database ID of account to load transactions from
+     * @param accountUID GUID of account to load transactions from
      */
     @Override
-	public void refresh(long accountId){
-		mAccountID = accountId;
+	public void refresh(String accountUID){
+		mAccountUID = accountUID;
 		refresh();
 	}
 
@@ -189,7 +190,7 @@ public void refresh(){
 		getLoaderManager().restartLoader(0, null, this);
 
         mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
-        new AccountBalanceTask(mSumTextView, getActivity()).execute(mAccountID);
+        new AccountBalanceTask(mSumTextView, getActivity()).execute(mAccountUID);
 
 	}
 			
@@ -207,7 +208,7 @@ public void onAttach(Activity activity) {
 	public void onResume() {
 		super.onResume();
 		((TransactionsActivity)getSherlockActivity()).updateNavigationSelection();		
-		refresh(((TransactionsActivity) getActivity()).getCurrentAccountID());
+		refresh(((TransactionsActivity) getActivity()).getCurrentAccountUID());
 	}
 	
 	@Override
@@ -224,7 +225,7 @@ public void onListItemClick(ListView l, View v, int position, long id) {
 			checkbox.setChecked(!checkbox.isChecked());
 			return;
 		}
-		mTransactionEditListener.editTransaction(id);
+		mTransactionEditListener.editTransaction(mTransactionsDbAdapter.getUID(id));
 	}
 	
 	@Override
@@ -236,7 +237,7 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
             case R.id.menu_add_transaction:
-                mTransactionEditListener.createNewTransaction(mAccountID);
+                mTransactionEditListener.createNewTransaction(mAccountUID);
                 return true;
 
             default:
@@ -247,7 +248,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
 	@Override
 	public Loader<Cursor> onCreateLoader(int arg0, Bundle arg1) {
 		Log.d(LOG_TAG, "Creating transactions loader");
-		return new TransactionsCursorLoader(getActivity(), mAccountID);
+		return new TransactionsCursorLoader(getActivity(), mAccountUID);
 	}
 
 	@Override
@@ -337,7 +338,7 @@ protected void showBulkMoveDialog(){
 	    // Create and show the dialog.
 	    DialogFragment bulkMoveFragment = new BulkMoveDialogFragment();
 	    Bundle args = new Bundle();
-	    args.putLong(UxArgument.ORIGIN_ACCOUNT_ID, mAccountID);
+	    args.putString(UxArgument.ORIGIN_ACCOUNT_UID, mAccountUID);
 	    args.putLongArray(UxArgument.SELECTED_TRANSACTION_IDS, getListView().getCheckedItemIds());
 	    bulkMoveFragment.setArguments(args);
         bulkMoveFragment.setTargetFragment(this, 0);
@@ -414,8 +415,8 @@ public void run() {
 		public void bindView(View view, Context context, Cursor cursor) {
 			super.bindView(view, context, cursor);
 
-            long transactionId = cursor.getLong(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry._ID));
-			Money amount = mTransactionsDbAdapter.getBalance(transactionId, mAccountID);
+            String transactionUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.TransactionEntry.COLUMN_UID));
+			Money amount = mTransactionsDbAdapter.getBalance(transactionUID, mAccountUID);
 			TextView amountTextView = (TextView) view.findViewById(R.id.transaction_amount);
             TransactionsActivity.displayBalance(amountTextView, amount);
 
@@ -485,17 +486,17 @@ private boolean isSameDay(long timeMillis1, long timeMillis2){
 	 * @author Ngewi Fet <ngewif@gmail.com>
 	 */
 	protected static class TransactionsCursorLoader extends DatabaseCursorLoader {
-		private long accountID; 
+		private String accountUID;
 		
-		public TransactionsCursorLoader(Context context, long accountID) {
+		public TransactionsCursorLoader(Context context, String accountUID) {
 			super(context);			
-			this.accountID = accountID;
+			this.accountUID = accountUID;
 		}
 		
 		@Override
 		public Cursor loadInBackground() {
 			mDatabaseAdapter = new TransactionsDbAdapter(getContext());
-			Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllTransactionsForAccount(accountID);
+			Cursor c = ((TransactionsDbAdapter) mDatabaseAdapter).fetchAllTransactionsForAccount(accountUID);
 			if (c != null)
 				registerContentObserver(c);
 			return c;
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
index cb6b4dda..af55c964 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/BulkMoveDialogFragment.java
@@ -18,7 +18,6 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.ui.UxArgument;
@@ -29,7 +28,6 @@
 import android.database.Cursor;
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
 import android.support.v4.widget.SimpleCursorAdapter;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -67,9 +65,9 @@
 	long[] mTransactionIds = null;
 	
 	/**
-	 * Account from which to move the transactions
+	 * GUID of account from which to move the transactions
 	 */
-	long mOriginAccountId = -1;
+	String mOriginAccountUID = null;
 	
 	/**
 	 * Accounts database adapter
@@ -99,15 +97,15 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		
 		Bundle args = getArguments();
 		mTransactionIds = args.getLongArray(UxArgument.SELECTED_TRANSACTION_IDS);
-		mOriginAccountId = args.getLong(UxArgument.ORIGIN_ACCOUNT_ID);
+		mOriginAccountUID = args.getString(UxArgument.ORIGIN_ACCOUNT_UID);
 		
 		String title = getActivity().getString(R.string.title_move_transactions, 
 				mTransactionIds.length);
 		getDialog().setTitle(title);
 		
 		mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
-        String conditions = "(" + DatabaseSchema.AccountEntry._ID           + " != " + mOriginAccountId + " AND "
-                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = '" + mAccountsDbAdapter.getCurrencyCode(mOriginAccountId)
+        String conditions = "(" + DatabaseSchema.AccountEntry.COLUMN_UID    + " != '" + mOriginAccountUID + "' AND "
+                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY               + " = '" + mAccountsDbAdapter.getCurrencyCode(mOriginAccountUID)
                 + "' AND " + DatabaseSchema.AccountEntry.COLUMN_UID         + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
                 + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                 + ")";
@@ -142,13 +140,14 @@ public void onClick(View v) {
 				
 				long dstAccountId = mDestinationAccountSpinner.getSelectedItemId();
 				TransactionsDbAdapter trxnAdapter = new TransactionsDbAdapter(getActivity());
-				if (!trxnAdapter.getCurrencyCode(dstAccountId).equals(trxnAdapter.getCurrencyCode(mOriginAccountId))){
+				if (!trxnAdapter.getCurrencyCode(dstAccountId).equals(trxnAdapter.getCurrencyCode(mOriginAccountUID))){
 					Toast.makeText(getActivity(), R.string.toast_incompatible_currency, Toast.LENGTH_LONG).show();
 					return;
 				}
-                long accountId      = ((TransactionsActivity)getActivity()).getCurrentAccountID();
+                String srcAccountUID    = ((TransactionsActivity)getActivity()).getCurrentAccountUID();
+                String dstAccountUID    = trxnAdapter.getAccountUID(dstAccountId);
 				for (long trxnId : mTransactionIds) {
-					trxnAdapter.moveTranscation(trxnId, accountId, dstAccountId);
+					trxnAdapter.moveTranscation(trxnAdapter.getUID(trxnId), srcAccountUID, dstAccountUID);
 				}
 				trxnAdapter.close();
 
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 59875cd2..02e1e780 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -155,8 +155,8 @@ private void initArgs() {
         mAccountsDbAdapter = new AccountsDbAdapter(getActivity());
 
         Bundle args     = getArguments();
-        mAccountId      = ((TransactionsActivity)getActivity()).getCurrentAccountID();
-        mAccountUID     = mAccountsDbAdapter.getAccountUID(mAccountId);
+        mAccountUID      = ((TransactionsActivity)getActivity()).getCurrentAccountUID();
+        mAccountId     = mAccountsDbAdapter.getID(mAccountUID);
         mBaseAmount     = new BigDecimal(args.getString(UxArgument.AMOUNT_STRING));
 
         String conditions = "(" //+ AccountEntry._ID + " != " + mAccountId + " AND "
diff --git a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
index dcb6a068..2deef3bc 100644
--- a/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
+++ b/app/src/org/gnucash/android/ui/util/AccountBalanceTask.java
@@ -32,7 +32,7 @@
  * This is done asynchronously because in cases of deeply nested accounts,
  * it can take some time and would block the UI thread otherwise.
  */
-public class AccountBalanceTask extends AsyncTask<Long, Void, Money> {
+public class AccountBalanceTask extends AsyncTask<String, Void, Money> {
     public static final String LOG_TAG = AccountBalanceTask.class.getName();
 
     private final WeakReference<TextView> accountBalanceTextViewReference;
@@ -44,7 +44,7 @@ public AccountBalanceTask(TextView balanceTextView, Context context){
     }
 
     @Override
-    protected Money doInBackground(Long... params) {
+    protected Money doInBackground(String... params) {
         //if the view for which we are doing this job is dead, kill the job as well
         if (accountBalanceTextViewReference.get() == null){
             cancel(true);
@@ -53,7 +53,7 @@ protected Money doInBackground(Long... params) {
 
         Money balance = Money.getZeroInstance();
         try {
-            balance = accountsDbAdapter.getAccountBalance(accountsDbAdapter.getAccountUID(params[0]));
+            balance = accountsDbAdapter.getAccountBalance(params[0]);
         } catch (IllegalArgumentException ex){
             //sometimes a load computation has been started and the data set changes.
             //the account ID may no longer exist. So we catch that exception here and do nothing
diff --git a/app/src/org/gnucash/android/ui/util/OnAccountClickedListener.java b/app/src/org/gnucash/android/ui/util/OnAccountClickedListener.java
index 1ca69018..fb75cba2 100644
--- a/app/src/org/gnucash/android/ui/util/OnAccountClickedListener.java
+++ b/app/src/org/gnucash/android/ui/util/OnAccountClickedListener.java
@@ -27,8 +27,8 @@
 
 	/**
 	 * Callback when an account is selected (clicked) from in a list of accounts
-	 * @param accountRowId Database row ID of the selected account
+	 * @param accountUID GUID of the selected account
 	 */
-	public void accountSelected(long accountRowId);
+	public void accountSelected(String accountUID);
 	
 }
diff --git a/app/src/org/gnucash/android/ui/util/OnTransactionClickedListener.java b/app/src/org/gnucash/android/ui/util/OnTransactionClickedListener.java
index c4639a20..9be53905 100644
--- a/app/src/org/gnucash/android/ui/util/OnTransactionClickedListener.java
+++ b/app/src/org/gnucash/android/ui/util/OnTransactionClickedListener.java
@@ -28,13 +28,13 @@
 
 	/**
 	 * Callback for creating a new transaction
-	 * @param accountRowId Database row ID of the account in which to create the new transaction
+	 * @param accountUID GUID of the account in which to create the new transaction
 	 */
-	public void createNewTransaction(long accountRowId);
+	public void createNewTransaction(String accountUID);
 	
 	/**
 	 * Callback request to edit a transaction
-	 * @param transactionId Database row Id of the transaction to be edited
+	 * @param transactionUID GUID of the transaction to be edited
 	 */
-	public void editTransaction(long transactionId);	
+	public void editTransaction(String transactionUID);
 }
diff --git a/app/src/org/gnucash/android/ui/util/Refreshable.java b/app/src/org/gnucash/android/ui/util/Refreshable.java
index 7ca7f377..eb1c78c0 100644
--- a/app/src/org/gnucash/android/ui/util/Refreshable.java
+++ b/app/src/org/gnucash/android/ui/util/Refreshable.java
@@ -28,7 +28,7 @@
 
     /**
      * Refresh the list with modified parameters
-     * @param id Record ID of relevant item to be refreshed
+     * @param uid GUID of relevant item to be refreshed
      */
-    public void refresh(long id);
+    public void refresh(String uid);
 }
diff --git a/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java b/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
index 726becd8..ff582b7f 100644
--- a/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
+++ b/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
@@ -115,12 +115,13 @@ public void onClick(View v) {
 				}					
 				
 				long accountId = mAccountsSpinner.getSelectedItemId();
+                String accountUID = mAccountsDbAdapter.getUID(accountId);
 				SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(WidgetConfigurationActivity.this);
 				Editor editor = prefs.edit();
-				editor.putLong(UxArgument.SELECTED_ACCOUNT_ID + mAppWidgetId, accountId);
+				editor.putString(UxArgument.SELECTED_ACCOUNT_UID + mAppWidgetId, accountUID);
 				editor.commit();	
 				
-				updateWidget(WidgetConfigurationActivity.this, mAppWidgetId, accountId);
+				updateWidget(WidgetConfigurationActivity.this, mAppWidgetId, accountUID);
 						
 				Intent resultValue = new Intent();
 				resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, mAppWidgetId);
@@ -143,14 +144,14 @@ public void onClick(View v) {
 	 * account with record ID <code>accountId</code>
      * If the account has been deleted, then a notice is posted in the widget
      * @param appWidgetId ID of the widget to be updated
-     * @param accountId Database ID of the account tied to the widget
+     * @param accountUID GUID of the account tied to the widget
 	 */
-	public static void updateWidget(Context context, int appWidgetId, long accountId) {
+	public static void updateWidget(Context context, int appWidgetId, String accountUID) {
 		Log.i("WidgetConfiguration", "Updating widget: " + appWidgetId);
 		AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
 
 		AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
-		Account account = accountsDbAdapter.getAccount(accountId);
+		Account account = accountsDbAdapter.getAccount(accountUID);
 
 		
 		if (account == null){
@@ -167,7 +168,7 @@ public static void updateWidget(Context context, int appWidgetId, long accountId
 			views.setOnClickPendingIntent(R.id.btn_new_transaction, pendingIntent);
 			appWidgetManager.updateAppWidget(appWidgetId, views);
 			Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
-			editor.remove(UxArgument.SELECTED_ACCOUNT_ID + appWidgetId);
+			editor.remove(UxArgument.SELECTED_ACCOUNT_UID + appWidgetId);
 			editor.commit();
 			return;
 		}
@@ -175,7 +176,7 @@ public static void updateWidget(Context context, int appWidgetId, long accountId
 		RemoteViews views = new RemoteViews(context.getPackageName(),
 				R.layout.widget_4x1);
 		views.setTextViewText(R.id.account_name, account.getName());
-        Money accountBalance = accountsDbAdapter.getAccountBalance(accountId);
+        Money accountBalance = accountsDbAdapter.getAccountBalance(accountUID);
 
         views.setTextViewText(R.id.transactions_summary,
 				accountBalance.formattedString(Locale.getDefault()));
@@ -187,7 +188,7 @@ public static void updateWidget(Context context, int appWidgetId, long accountId
 		Intent accountViewIntent = new Intent(context, TransactionsActivity.class);
 		accountViewIntent.setAction(Intent.ACTION_VIEW);
 		accountViewIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK);
-		accountViewIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountId);
+		accountViewIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
 		PendingIntent accountPendingIntent = PendingIntent
 				.getActivity(context, appWidgetId, accountViewIntent, 0);
 		views.setOnClickPendingIntent(R.id.widget_layout, accountPendingIntent);
@@ -195,7 +196,7 @@ public static void updateWidget(Context context, int appWidgetId, long accountId
 		Intent newTransactionIntent = new Intent(context, TransactionsActivity.class);
 		newTransactionIntent.setAction(Intent.ACTION_INSERT_OR_EDIT);
 		newTransactionIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK);
-		newTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, accountId);
+		newTransactionIntent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
 		PendingIntent pendingIntent = PendingIntent
 				.getActivity(context, appWidgetId, newTransactionIntent, 0);	            
 		views.setOnClickPendingIntent(R.id.btn_new_transaction, pendingIntent);
@@ -216,12 +217,12 @@ public static void updateAllWidgets(Context context){
 
         SharedPreferences defaultSharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
 		for (int widgetId : appWidgetIds) {
-			long accountId = defaultSharedPrefs
-            		.getLong(UxArgument.SELECTED_ACCOUNT_ID + widgetId, -1);
+			String accountUID = defaultSharedPrefs
+            		.getString(UxArgument.SELECTED_ACCOUNT_UID + widgetId, null);
             
-			if (accountId <= 0)
+			if (accountUID == null)
 				continue;
-			updateWidget(context, widgetId, accountId);
+			updateWidget(context, widgetId, accountUID);
 		}
 	}
 }
diff --git a/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java b/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 1a1cff23..974896b5 100644
--- a/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/integration-tests/src/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -80,7 +80,7 @@ protected void setUp() throws Exception {
         assertTrue(id > 0);
 
         Intent intent = new Intent(Intent.ACTION_VIEW);
-        intent.putExtra(UxArgument.SELECTED_ACCOUNT_ID, id);
+        intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, id);
         setActivityIntent(intent);
 
         mSolo = new Solo(getInstrumentation(), getActivity());
@@ -330,7 +330,7 @@ public void testDeleteTransaction(){
 		clickSherlockActionBarItem(R.id.context_menu_delete);
 		
 		AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(getActivity());
-		long id = accountsDbAdapter.getId(DUMMY_ACCOUNT_UID);
+		long id = accountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
 		TransactionsDbAdapter adapter = new TransactionsDbAdapter(getActivity());
 		assertEquals(0, adapter.getTransactionsCount(id));
 		

From 359caa0070e552c189f056375a1a9f649c567dfa Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Sun, 14 Sep 2014 20:11:30 +0300
Subject: [PATCH 46/68] Added dialog for default currency before creating
 accounts for the first time

---
 .../android/ui/account/AccountsActivity.java       | 46 ++++++++++++++++++++--
 1 file changed, 43 insertions(+), 3 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index 28fb5717..b9e3ad7d 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -37,6 +37,7 @@
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.ArrayAdapter;
 
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
@@ -55,13 +56,19 @@
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
 
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.Arrays;
 
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
  * The various actions are implemented as Fragments which are then added to this activity
  * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  * 
  */
 public class AccountsActivity extends PassLockActivity implements OnAccountClickedListener {
@@ -432,9 +439,42 @@ private void createDefaultAccounts(){
 			
 			@Override
 			public void onClick(DialogInterface dialog, int which) {
-                InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                new ImportAsyncTask(AccountsActivity.this).execute(accountFileInputStream);
-                removeFirstRunFlag();
+                AlertDialog.Builder adb = new AlertDialog.Builder(AccountsActivity.this);
+                adb.setTitle(R.string.title_choose_currency);
+                ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(
+                        AccountsActivity.this,
+                        android.R.layout.select_dialog_singlechoice,
+                        getResources().getStringArray(R.array.currency_names));
+                adb.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
+
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        String currency = Arrays.asList(getResources().getStringArray(R.array.currency_codes)).get(which);
+                        PreferenceManager.getDefaultSharedPreferences(AccountsActivity.this)
+                                .edit()
+                                .putString(getString(R.string.key_default_currency), currency)
+                                .commit();
+
+                        InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
+                        BufferedReader reader = new BufferedReader(new InputStreamReader(accountFileInputStream));
+                        StringBuilder sb = new StringBuilder();
+                        String line = null;
+                        try {
+                            while ((line = reader.readLine()) != null) {
+                                sb.append(line).append("\n");
+                            }
+                            reader.close();
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                        String accountFile = sb.toString().replaceAll("<cmdty:id>(.*?)</cmdty:id>",
+                                "<cmdty:id>" + currency + "</cmdty:id>");
+                        accountFileInputStream = new ByteArrayInputStream(accountFile.getBytes());
+                        new ImportAsyncTask(AccountsActivity.this).execute(accountFileInputStream);
+                        removeFirstRunFlag();
+                    }
+                });
+                adb.create().show();
 			}
 		});
 		

From 01ad322618de4ddde07110bc5c921651ce946aa1 Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Mon, 15 Sep 2014 21:12:07 +0300
Subject: [PATCH 47/68] Use default currency when creating default accounts

---
 .../android/ui/account/AccountsActivity.java       | 48 +++++++++++++---------
 .../ui/settings/AccountPreferencesFragment.java    | 19 ++++++---
 2 files changed, 42 insertions(+), 25 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index b9e3ad7d..cfd38db5 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -17,6 +17,7 @@
 
 package org.gnucash.android.ui.account;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
@@ -67,9 +68,9 @@
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
  * The various actions are implemented as Fragments which are then added to this activity
+ *
  * @author Ngewi Fet <ngewif@gmail.com>
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
- * 
  */
 public class AccountsActivity extends PassLockActivity implements OnAccountClickedListener {
 
@@ -265,7 +266,7 @@ private void init() {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
         boolean firstRun = prefs.getBoolean(getString(R.string.key_first_run), true);
         if (firstRun){
-            createDefaultAccounts();
+            showFirstRunDialog();
             //default to using double entry and save the preference explicitly
             prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).commit();
         }
@@ -430,7 +431,7 @@ public void onNewAccountClick(View v) {
 	/**
 	 * Shows the user dialog to create default account structure or import existing account structure
 	 */
-	private void createDefaultAccounts(){
+	private void showFirstRunDialog() {
 		AlertDialog.Builder builder = new AlertDialog.Builder(this);
 		builder.setTitle(R.string.title_default_accounts);
         builder.setMessage(R.string.msg_confirm_create_default_accounts_first_run);
@@ -455,22 +456,7 @@ public void onClick(DialogInterface dialog, int which) {
                                 .putString(getString(R.string.key_default_currency), currency)
                                 .commit();
 
-                        InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                        BufferedReader reader = new BufferedReader(new InputStreamReader(accountFileInputStream));
-                        StringBuilder sb = new StringBuilder();
-                        String line = null;
-                        try {
-                            while ((line = reader.readLine()) != null) {
-                                sb.append(line).append("\n");
-                            }
-                            reader.close();
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                        }
-                        String accountFile = sb.toString().replaceAll("<cmdty:id>(.*?)</cmdty:id>",
-                                "<cmdty:id>" + currency + "</cmdty:id>");
-                        accountFileInputStream = new ByteArrayInputStream(accountFile.getBytes());
-                        new ImportAsyncTask(AccountsActivity.this).execute(accountFileInputStream);
+                        createDefaultAccounts(currency, AccountsActivity.this);
                         removeFirstRunFlag();
                     }
                 });
@@ -500,6 +486,30 @@ public void onClick(DialogInterface dialogInterface, int i) {
 	}
 
     /**
+     * Creates default accounts with the specified currency
+     *
+     * @param currencyCode
+     * @param activity
+     */
+    public static void createDefaultAccounts(String currencyCode, Activity activity) {
+        InputStream accountFileInputStream = activity.getResources().openRawResource(R.raw.default_accounts);
+        BufferedReader reader = new BufferedReader(new InputStreamReader(accountFileInputStream));
+        StringBuilder sb = new StringBuilder();
+        String line = null;
+        try {
+            while ((line = reader.readLine()) != null) {
+                sb.append(line).append("\n");
+            }
+            reader.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        String accountFile = sb.toString().replaceAll("<cmdty:id>(.*?)</cmdty:id>", "<cmdty:id>" + currencyCode + "</cmdty:id>");
+        accountFileInputStream = new ByteArrayInputStream(accountFile.getBytes());
+        new ImportAsyncTask(activity).execute(accountFileInputStream);
+    }
+
+    /**
      * Starts Intent chooser for selecting a GnuCash accounts file to import.
      * The accounts are actually imported in onActivityResult
      */
diff --git a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
index 40384546..aa9ae5a7 100644
--- a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
@@ -16,6 +16,7 @@
 
 package org.gnucash.android.ui.settings;
 
+import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.SharedPreferences;
@@ -23,20 +24,24 @@
 import android.preference.Preference;
 import android.preference.PreferenceFragment;
 import android.preference.PreferenceManager;
+
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.SherlockPreferenceActivity;
+
 import org.gnucash.android.R;
-import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
-
-import java.io.InputStream;
+import org.gnucash.android.ui.account.AccountsActivity;
 
 /**
  * Account settings fragment inside the Settings activity
  *
  * @author Ngewi Fet <ngewi.fet@gmail.com>
+ * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
  */
 public class AccountPreferencesFragment extends PreferenceFragment {
+
+    private Activity activity;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -46,13 +51,16 @@ public void onCreate(Bundle savedInstanceState) {
         actionBar.setHomeButtonEnabled(true);
         actionBar.setDisplayHomeAsUpEnabled(true);
         actionBar.setTitle(R.string.title_account_preferences);
+
+        activity = getActivity();
     }
 
     @Override
     public void onResume() {
         super.onResume();
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
-        String defaultCurrency = sharedPreferences.getString(getString(R.string.key_default_currency), Money.DEFAULT_CURRENCY_CODE);
+        final String defaultCurrency = sharedPreferences.getString(getString(R.string.key_default_currency),
+                Money.DEFAULT_CURRENCY_CODE);
         Preference pref = findPreference(getString(R.string.key_default_currency));
         pref.setSummary(defaultCurrency);
         pref.setOnPreferenceChangeListener((SettingsActivity)getActivity());
@@ -80,8 +88,7 @@ public boolean onPreferenceClick(Preference preference) {
                         .setPositiveButton(R.string.btn_create_accounts, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
-                                InputStream accountFileInputStream = getResources().openRawResource(R.raw.default_accounts);
-                                new ImportAsyncTask(getActivity()).execute(accountFileInputStream);
+                                new AccountsActivity().createDefaultAccounts(defaultCurrency, activity);
                             }
                         })
                         .setNegativeButton(R.string.btn_cancel, new DialogInterface.OnClickListener() {

From 6175a9eab6016077e7c26ab216e91d06b02a0a9a Mon Sep 17 00:00:00 2001
From: Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
Date: Tue, 16 Sep 2014 14:46:10 +0300
Subject: [PATCH 48/68] Fix for creating default accounts after changing
 currency

---
 .../org/gnucash/android/ui/settings/AccountPreferencesFragment.java  | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
index aa9ae5a7..e9b137c1 100644
--- a/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
+++ b/app/src/org/gnucash/android/ui/settings/AccountPreferencesFragment.java
@@ -59,8 +59,7 @@ public void onCreate(Bundle savedInstanceState) {
     public void onResume() {
         super.onResume();
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
-        final String defaultCurrency = sharedPreferences.getString(getString(R.string.key_default_currency),
-                Money.DEFAULT_CURRENCY_CODE);
+        String defaultCurrency = sharedPreferences.getString(getString(R.string.key_default_currency), Money.DEFAULT_CURRENCY_CODE);
         Preference pref = findPreference(getString(R.string.key_default_currency));
         pref.setSummary(defaultCurrency);
         pref.setOnPreferenceChangeListener((SettingsActivity)getActivity());
@@ -88,7 +87,7 @@ public boolean onPreferenceClick(Preference preference) {
                         .setPositiveButton(R.string.btn_create_accounts, new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialogInterface, int i) {
-                                new AccountsActivity().createDefaultAccounts(defaultCurrency, activity);
+                                AccountsActivity.createDefaultAccounts(Money.DEFAULT_CURRENCY_CODE, activity);
                             }
                         })
                         .setNegativeButton(R.string.btn_cancel, new DialogInterface.OnClickListener() {

From 535dd3717fb42224b2c0249b00ade459ceedca0b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 17 Sep 2014 11:10:10 +0200
Subject: [PATCH 49/68] Instead of modifying input stream before importing, we
 update currency in database after importing.

Introduce task delegate for executing tasks on completion of import.
---
 .../gnucash/android/importer/ImportAsyncTask.java  | 13 +++++++-
 .../android/ui/account/AccountsActivity.java       | 39 ++++++++++++----------
 .../org/gnucash/android/ui/util/TaskDelegate.java  | 30 +++++++++++++++++
 3 files changed, 63 insertions(+), 19 deletions(-)
 create mode 100644 app/src/org/gnucash/android/ui/util/TaskDelegate.java

diff --git a/app/src/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
index a19cb035..ecc69235 100644
--- a/app/src/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
@@ -12,7 +12,8 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */package org.gnucash.android.importer;
+ */
+package org.gnucash.android.importer;
 
 import android.app.Activity;
 import android.app.ProgressDialog;
@@ -23,6 +24,7 @@
 import android.widget.Toast;
 import org.gnucash.android.R;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.gnucash.android.ui.util.TaskDelegate;
 
 import java.io.InputStream;
 
@@ -32,12 +34,18 @@
  */
 public class ImportAsyncTask extends AsyncTask<InputStream, Void, Boolean> {
     private final Activity context;
+    private TaskDelegate mDelegate;
     private ProgressDialog progressDialog;
 
     public ImportAsyncTask(Activity context){
         this.context = context;
     }
 
+    public ImportAsyncTask(Activity context, TaskDelegate delegate){
+        this.context = context;
+        this.mDelegate = delegate;
+    }
+
     @Override
     protected void onPreExecute() {
         super.onPreExecute();
@@ -76,6 +84,9 @@ public void run() {
 
     @Override
     protected void onPostExecute(Boolean importSuccess) {
+        if (mDelegate != null)
+            mDelegate.onTaskComplete();
+
         if (progressDialog != null && progressDialog.isShowing())
             progressDialog.dismiss();
 
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index cfd38db5..c4a2dbb3 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -47,6 +47,8 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.importer.ImportAsyncTask;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.ui.UxArgument;
@@ -56,6 +58,7 @@
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
+import org.gnucash.android.ui.util.TaskDelegate;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -486,27 +489,27 @@ public void onClick(DialogInterface dialogInterface, int i) {
 	}
 
     /**
-     * Creates default accounts with the specified currency
+     * Creates default accounts with the specified currency code.
+     * If the currency parameter is null, then locale currency will be used if available
      *
-     * @param currencyCode
-     * @param activity
+     * @param currencyCode Currency code to assign to the imported accounts
+     * @param activity Activity for providing context and displaying dialogs
      */
-    public static void createDefaultAccounts(String currencyCode, Activity activity) {
-        InputStream accountFileInputStream = activity.getResources().openRawResource(R.raw.default_accounts);
-        BufferedReader reader = new BufferedReader(new InputStreamReader(accountFileInputStream));
-        StringBuilder sb = new StringBuilder();
-        String line = null;
-        try {
-            while ((line = reader.readLine()) != null) {
-                sb.append(line).append("\n");
-            }
-            reader.close();
-        } catch (IOException e) {
-            e.printStackTrace();
+    public static void createDefaultAccounts(final String currencyCode, final Activity activity) {
+        TaskDelegate delegate = null;
+        if (currencyCode != null) {
+            delegate = new TaskDelegate() {
+                @Override
+                public void onTaskComplete() {
+                    AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(activity);
+                    accountsDbAdapter.updateAllAccounts(DatabaseSchema.AccountEntry.COLUMN_CURRENCY, currencyCode);
+                    accountsDbAdapter.close();
+                }
+            };
         }
-        String accountFile = sb.toString().replaceAll("<cmdty:id>(.*?)</cmdty:id>", "<cmdty:id>" + currencyCode + "</cmdty:id>");
-        accountFileInputStream = new ByteArrayInputStream(accountFile.getBytes());
-        new ImportAsyncTask(activity).execute(accountFileInputStream);
+
+        InputStream accountFileInputStream = activity.getResources().openRawResource(R.raw.default_accounts);
+        new ImportAsyncTask(activity, delegate).execute(accountFileInputStream);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/ui/util/TaskDelegate.java b/app/src/org/gnucash/android/ui/util/TaskDelegate.java
new file mode 100644
index 00000000..04953c05
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/util/TaskDelegate.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.util;
+
+/**
+ * Interface for delegates which can be used to execute functions when an AsyncTask is complete
+ * @see org.gnucash.android.importer.ImportAsyncTask
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public interface TaskDelegate {
+
+    /**
+     * Function to execute on completion of task
+     */
+    public void onTaskComplete();
+}

From aff430382532a030cad7c483787eba2a51e7e469 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 18 Sep 2014 20:31:44 +0800
Subject: [PATCH 50/68] Separate QIF export by currency

---
 .../gnucash/android/db/TransactionsDbAdapter.java  |  4 +-
 .../gnucash/android/export/ExporterAsyncTask.java  | 54 +++++++++++++++++-----
 .../gnucash/android/export/qif/QifExporter.java    | 11 ++++-
 .../org/gnucash/android/export/qif/QifHelper.java  |  1 +
 4 files changed, 55 insertions(+), 15 deletions(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index bed881d0..d871ef3e 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -305,7 +305,7 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
 
     }
 
-    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
+    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
         // transactions, splits ON transactions.uid = splits.transaction_uid ,
         // ( SELECT transactions.uid AS trans_acct_t_uid ,
@@ -361,7 +361,7 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
                 AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
                 " = trans_acct.trans_acct_a_uid , " + AccountEntry.TABLE_NAME + " AS account2 ON account2." +
                 AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID,
-                columns, condition, null, null, null , orderBy);
+                columns, where, whereArgs, null, null , orderBy);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 796e1b58..d72aa6a6 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -32,6 +32,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.transaction.dialog.TransactionsDeleteConfirmationDialogFragment;
@@ -223,21 +224,50 @@ private void shareFile(String path){
      * @param dst Absolute path to the destination file
      * @throws IOException if the file could not be copied
      */
-    public static void copyFile(File src, File dst) throws IOException
+    public void copyFile(File src, File dst) throws IOException
     {
         //TODO: Make this asynchronous at some time, t in the future.
-        FileChannel inChannel = new FileInputStream(src).getChannel();
-        FileChannel outChannel = new FileOutputStream(dst).getChannel();
-        try
-        {
-            inChannel.transferTo(0, inChannel.size(), outChannel);
+        if (mExportParams.getExportFormat() == ExportFormat.QIF) {
+            // split only at the last dot
+            String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
+            String line;
+            BufferedReader in = new BufferedReader(new FileReader(src));
+            BufferedWriter out = null;
+            try {
+                while ((line = in.readLine()) != null) {
+                    if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
+                        String currencyCode = line.substring(1);
+                        if (out != null) {
+                            out.close();
+                        }
+                        out = new BufferedWriter(new FileWriter(pathParts[0] + "_" + currencyCode + pathParts[1]));
+                    }
+                    else {
+                        if (out == null) {
+                            out = new BufferedWriter(new FileWriter(pathParts[0] + pathParts[1]));
+                        }
+                        out.append(line).append('\n');
+                    }
+                }
+            }
+            finally {
+                in.close();
+                if (out != null) {
+                    out.close();
+                }
+            }
         }
-        finally
-        {
-            if (inChannel != null)
-                inChannel.close();
-            if (outChannel != null)
-                outChannel.close();
+        else {
+            FileChannel inChannel = new FileInputStream(src).getChannel();
+            FileChannel outChannel = new FileOutputStream(dst).getChannel();
+            try {
+                inChannel.transferTo(0, inChannel.size(), outChannel);
+            } finally {
+                if (inChannel != null)
+                    inChannel.close();
+                if (outChannel != null)
+                    outChannel.close();
+            }
         }
     }
 
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index a6049f3d..92d271c3 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -73,14 +73,18 @@ public void generateExport(Writer writer) throws ExporterException {
                             mParameters.shouldExportAllTransactions() ?
                                     "" : " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + "== 0"
                             ),
+                    null,
+                    // acct1_currency : group transaction with the same currency together
                     // trans_time ASC : put transactions in time order
                     // trans_uid ASC  : put splits from the same transaction together
-                   "trans_time ASC, trans_uid ASC"
+                   "acct1_currency ASC, trans_time ASC, trans_uid ASC"
                     );
             try {
+                String currentCurrencyCode = "";
                 String currentAccountUID = "";
                 String currentTransactionUID = "";
                 while (cursor.moveToNext()) {
+                    String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency"));
                     String accountUID = cursor.getString(cursor.getColumnIndexOrThrow("acct1_uid"));
                     String transactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
                     if (!transactionUID.equals(currentTransactionUID)) {
@@ -93,6 +97,11 @@ public void generateExport(Writer writer) throws ExporterException {
                             //if (!currentAccountUID.equals("")) {
                             //    // end last account
                             //}
+                            if (!currencyCode.equals(currentCurrencyCode)) {
+                                currentCurrencyCode = currencyCode;
+                                writer.append(QifHelper.INTERNAL_CURRENCY_PREFIX)
+                                        .append(currencyCode);
+                            }
                             // start new account
                             currentAccountUID = accountUID;
                             writer.append(QifHelper.ACCOUNT_HEADER).append(newLine);
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index 3a5e3d08..13374ded 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -43,6 +43,7 @@
     public static final String ACCOUNT_HEADER           = "!Account";
     public static final String ACCOUNT_NAME_PREFIX      = "N";
 
+    public static final String INTERNAL_CURRENCY_PREFIX = "*";
 
     public static final String ENTRY_TERMINATOR = "^";
     private static final SimpleDateFormat QIF_DATE_FORMATTER = new SimpleDateFormat("yyyy/M/d");

From 913120dff3e3197d7514225db3c2b9bfc416a9af Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 18 Sep 2014 21:01:29 +0800
Subject: [PATCH 51/68] QIF export fixup

---
 app/src/org/gnucash/android/export/qif/QifExporter.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 92d271c3..bf00221a 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -100,7 +100,8 @@ public void generateExport(Writer writer) throws ExporterException {
                             if (!currencyCode.equals(currentCurrencyCode)) {
                                 currentCurrencyCode = currencyCode;
                                 writer.append(QifHelper.INTERNAL_CURRENCY_PREFIX)
-                                        .append(currencyCode);
+                                        .append(currencyCode)
+                                        .append(newLine);
                             }
                             // start new account
                             currentAccountUID = accountUID;

From 314a9d66f0644f65edaa99321a357a0432ce7c03 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 19 Sep 2014 13:49:46 +0200
Subject: [PATCH 52/68] Re-implements old method of GncXML exports to suppport
 database migrations from version 1.3.x of the app

---
 app/src/org/gnucash/android/db/DatabaseHelper.java |   4 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  31 +++--
 .../gnucash/android/export/xml/GncXmlExporter.java | 128 ++++++++++++++++++++-
 app/src/org/gnucash/android/model/Account.java     |  71 +++++++++++-
 app/src/org/gnucash/android/model/Split.java       |  39 +++++++
 app/src/org/gnucash/android/model/Transaction.java |  67 ++++++++++-
 6 files changed, 310 insertions(+), 30 deletions(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseHelper.java b/app/src/org/gnucash/android/db/DatabaseHelper.java
index f44bbdc6..7a95bd6c 100644
--- a/app/src/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/org/gnucash/android/db/DatabaseHelper.java
@@ -16,7 +16,6 @@
 
 package org.gnucash.android.db;
 
-import android.app.ProgressDialog;
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -24,7 +23,6 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 import android.widget.Toast;
-import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.model.AccountType;
 
 import static org.gnucash.android.db.DatabaseSchema.*;
@@ -234,7 +232,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 //                }
 
                 try {
-                    String filepath = MigrationHelper.exportDatabase(db, ExportFormat.GNC_XML);
+                    String filepath = MigrationHelper.exportGnucashXML(db);
 
                     dropAllDatabaseTables(db);
                     createDatabaseTables(db);
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index 860746b5..61fa8175 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -23,11 +23,11 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.export.qif.QifExporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.AccountType;
 
+import javax.xml.parsers.ParserConfigurationException;
 import java.io.*;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
@@ -112,34 +112,31 @@ private static String getGnuCashRootAccountUID(SQLiteDatabase db){
      * Exports the database to a GnuCash XML file and returns the path to the file
      * @return String with exported GnuCash XML
      */
-    static String exportDatabase(SQLiteDatabase db, ExportFormat format) throws IOException {
+    static String exportGnucashXML(SQLiteDatabase db) throws IOException {
         Log.i(LOG_TAG, "Exporting database to GnuCash XML");
-        ExportParams exportParams = new ExportParams(format);
+        ExportParams exportParams = new ExportParams(ExportFormat.GNC_XML);
         exportParams.setExportAllTransactions(true);
         exportParams.setExportTarget(ExportParams.ExportTarget.SD_CARD);
         exportParams.setDeleteTransactionsAfterExport(false);
 
         new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
         exportParams.setTargetFilepath(Environment.getExternalStorageDirectory()
-                + "/gnucash/" + Exporter.buildExportFilename(format));
+                + "/gnucash/" + Exporter.buildExportFilename(ExportFormat.GNC_XML));
 
         //we do not use the ExporterAsyncTask here because we want to use an already open db
-        Exporter exporter = null;
-        switch (format){
-            case QIF:
-                exporter = new QifExporter(exportParams, db);
-                break;
-            case GNC_XML:
-            default:
-                exporter = new GncXmlExporter(exportParams, db);
-        }
-
+        GncXmlExporter exporter = new GncXmlExporter(exportParams, db);
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                 new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
-        exporter.generateExport(writer);
+        try {
+            String xml = exporter.generateXML();
+            writer.write(xml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } finally {
+            writer.flush();
+            writer.close();
+        }
 
-        writer.flush();
-        writer.close();
         return exportParams.getTargetFilepath();
     }
 
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 9922ff63..5601d02e 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -27,14 +27,22 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Transaction;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
 import org.xmlpull.v1.XmlPullParserFactory;
 import org.xmlpull.v1.XmlSerializer;
 
-import java.io.BufferedOutputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.*;
 import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.Currency;
@@ -394,4 +402,114 @@ public static void createBackup(){
             Log.e("GncXmlExporter", "Error creating backup", e);
         }
     }
+
+    /**
+     * Generate GnuCash XML by loading the accounts and transactions from the database and exporting each one.
+     * This method consumes a lot of memory and is slow, but exists for database migrations for backwards compatibility.
+     * <p>The normal exporter interface should be used to generate GncXML files</p>
+     * @return String with the generated XML
+     * @throws ParserConfigurationException if there was an error when generating the XML
+     * @deprecated Use the {@link #generateExport(java.io.Writer)} to generate XML
+     */
+    public String generateXML() throws ParserConfigurationException {
+        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
+        DocumentBuilder documentBuilder = docFactory.newDocumentBuilder();
+
+        Document document = documentBuilder.newDocument();
+        document.setXmlVersion("1.0");
+        document.setXmlStandalone(true);
+
+        Element rootElement = document.createElement(GncXmlHelper.TAG_ROOT);
+        rootElement.setAttribute("xmlns:gnc",    "http://www.gnucash.org/XML/gnc");
+        rootElement.setAttribute("xmlns:act",    "http://www.gnucash.org/XML/act");
+        rootElement.setAttribute("xmlns:book",   "http://www.gnucash.org/XML/book");
+        rootElement.setAttribute("xmlns:cd",     "http://www.gnucash.org/XML/cd");
+        rootElement.setAttribute("xmlns:cmdty",  "http://www.gnucash.org/XML/cmdty");
+        rootElement.setAttribute("xmlns:price",  "http://www.gnucash.org/XML/price");
+        rootElement.setAttribute("xmlns:slot",   "http://www.gnucash.org/XML/slot");
+        rootElement.setAttribute("xmlns:split",  "http://www.gnucash.org/XML/split");
+        rootElement.setAttribute("xmlns:trn",    "http://www.gnucash.org/XML/trn");
+        rootElement.setAttribute("xmlns:ts",     "http://www.gnucash.org/XML/ts");
+
+        Element bookCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        bookCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, GncXmlHelper.ATTR_VALUE_BOOK);
+        bookCountNode.appendChild(document.createTextNode("1"));
+        rootElement.appendChild(bookCountNode);
+
+        Element bookNode = document.createElement(GncXmlHelper.TAG_BOOK);
+        bookNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+        rootElement.appendChild(bookNode);
+
+        Element bookIdNode = document.createElement(GncXmlHelper.TAG_BOOK_ID);
+        bookIdNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+        bookIdNode.appendChild(document.createTextNode(UUID.randomUUID().toString().replaceAll("-", "")));
+        bookNode.appendChild(bookIdNode);
+
+        Element cmdtyCountData = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        cmdtyCountData.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
+        cmdtyCountData.appendChild(document.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
+        bookNode.appendChild(cmdtyCountData);
+
+        Element accountCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        accountCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
+        int accountCount = mAccountsDbAdapter.getTotalAccountCount();
+        accountCountNode.appendChild(document.createTextNode(String.valueOf(accountCount)));
+        bookNode.appendChild(accountCountNode);
+
+        Element transactionCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
+        transactionCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
+        int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
+        transactionCountNode.appendChild(document.createTextNode(String.valueOf(transactionCount)));
+        bookNode.appendChild(transactionCountNode);
+
+        String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
+        Account rootAccount = mAccountsDbAdapter.getAccount(rootAccountUID);
+        if (rootAccount != null){
+            rootAccount.toGncXml(document, bookNode);
+        }
+        Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
+
+        //create accounts hierarchically by ordering by full name
+        if (accountsCursor != null){
+            while (accountsCursor.moveToNext()){
+                long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
+                Account account = mAccountsDbAdapter.getAccount(id);
+                account.toGncXml(document, bookNode);
+            }
+            accountsCursor.close();
+        }
+
+        //more memory efficient approach than loading all transactions into memory first
+        Cursor transactionsCursor = mTransactionsDbAdapter.fetchAllRecords();
+        if (transactionsCursor != null){
+            while (transactionsCursor.moveToNext()){
+                Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(transactionsCursor);
+                transaction.toGncXml(document, bookNode);
+            }
+            transactionsCursor.close();
+        }
+
+        document.appendChild(rootElement);
+        mAccountsDbAdapter.close();
+        mTransactionsDbAdapter.close();
+
+        StringWriter stringWriter = new StringWriter();
+        try {
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+
+            Transformer transformer = transformerFactory.newTransformer();
+
+            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+            DOMSource source = new DOMSource(document);
+            StreamResult result = new StreamResult(stringWriter);
+
+            transformer.transform(source, result);
+            stringWriter.flush();
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new ExporterException(mParameters, e);
+        }
+        return stringWriter.toString();
+    }
 }
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index c51e9351..32244e8a 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -16,10 +16,7 @@
 
 package org.gnucash.android.model;
 
-import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
-import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -541,4 +538,72 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		parent.appendChild(statementTransactions);
 				
 	}
+
+    /**
+     * Method which generates the GnuCash XML DOM for this account
+     * @param doc {@link org.w3c.dom.Document} for creating nodes
+     * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
+     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
+     */
+    public void toGncXml(Document doc, Element rootNode) {
+        Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
+        nameNode.appendChild(doc.createTextNode(mName));
+
+        Element idNode = doc.createElement(GncXmlHelper.TAG_ACCT_ID);
+        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+        idNode.appendChild(doc.createTextNode(mUID));
+
+        Element typeNode = doc.createElement(GncXmlHelper.TAG_TYPE);
+        typeNode.appendChild(doc.createTextNode(mAccountType.name()));
+
+        Element commodityNode = doc.createElement(GncXmlHelper.TAG_COMMODITY);
+        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
+        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
+        commodityNode.appendChild(cmdtySpacenode);
+        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
+        cmdtyIdNode.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));
+        commodityNode.appendChild(cmdtyIdNode);
+
+        Element commodityScuNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SCU);
+        int fractionDigits = mCurrency.getDefaultFractionDigits();
+        commodityScuNode.appendChild(doc.createTextNode(Integer.toString((int) Math.pow(10, fractionDigits))));
+
+        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_ACCT_DESCRIPTION);
+        descriptionNode.appendChild(doc.createTextNode(mName));
+
+        Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
+        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_PLACEHOLDER,
+                Boolean.toString(mIsPlaceholderAccount), GncXmlHelper.ATTR_VALUE_STRING));
+
+        if (mColorCode != null && mColorCode.trim().length() > 0){
+            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode, GncXmlHelper.ATTR_VALUE_STRING));
+        }
+
+        if (mDefaultTransferAccountUID != null && mDefaultTransferAccountUID.trim().length() > 0){
+            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT, mDefaultTransferAccountUID, "guid"));
+        }
+
+        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc,
+                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite), GncXmlHelper.ATTR_VALUE_STRING));
+
+        Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
+        accountNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+        accountNode.appendChild(nameNode);
+        accountNode.appendChild(idNode);
+        accountNode.appendChild(typeNode);
+        accountNode.appendChild(commodityNode);
+        accountNode.appendChild(commodityScuNode);
+        accountNode.appendChild(descriptionNode);
+        accountNode.appendChild(acctSlotsNode);
+
+
+        if (mParentAccountUID != null && mParentAccountUID.trim().length() > 0){
+            Element parentAccountNode = doc.createElement(GncXmlHelper.TAG_PARENT_UID);
+            parentAccountNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+            parentAccountNode.appendChild(doc.createTextNode(mParentAccountUID));
+            accountNode.appendChild(parentAccountNode);
+        }
+
+        rootNode.appendChild(accountNode);
+    }
 }
diff --git a/app/src/org/gnucash/android/model/Split.java b/app/src/org/gnucash/android/model/Split.java
index e62cb508..9c99fb8e 100644
--- a/app/src/org/gnucash/android/model/Split.java
+++ b/app/src/org/gnucash/android/model/Split.java
@@ -172,6 +172,45 @@ public String toCsv(){
     }
 
     /**
+     * Creates a GnuCash XML representation of this split
+     * @param doc XML {@link org.w3c.dom.Document} for creating the nodes
+     * @param rootNode Parent node to append the split XML to
+     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
+     */
+    public void toGncXml(Document doc, Element rootNode) {
+        Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
+        idNode.setAttribute("type", "guid");
+        idNode.appendChild(doc.createTextNode(mUID));
+
+        Element memoNode = doc.createElement(GncXmlHelper.TAG_SPLIT_MEMO);
+        if (mMemo != null)
+            memoNode.appendChild(doc.createTextNode(mMemo));
+
+        Element stateNode = doc.createElement(GncXmlHelper.TAG_RECONCILED_STATE);
+        stateNode.appendChild(doc.createTextNode("n"));
+
+        Element valueNode = doc.createElement(GncXmlHelper.TAG_SPLIT_VALUE);
+        valueNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
+
+        Element quantityNode = doc.createElement(GncXmlHelper.TAG_SPLIT_QUANTITY);
+        quantityNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
+
+        Element accountNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ACCOUNT);
+        accountNode.setAttribute("type", "guid");
+        accountNode.appendChild(doc.createTextNode(mAccountUID));
+
+        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRN_SPLIT);
+        splitNode.appendChild(idNode);
+        splitNode.appendChild(memoNode);
+        splitNode.appendChild(stateNode);
+        splitNode.appendChild(valueNode);
+        splitNode.appendChild(quantityNode);
+        splitNode.appendChild(accountNode);
+
+        rootNode.appendChild(splitNode);
+    }
+
+    /**
      * Parses a split which is in the format "<amount>;<currency_code>;<account_uid>;<type>;<memo>".
      * The split input string is the same produced by the {@link Split#toCsv()} method
      *
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 3c14e1b7..ecdfe1ae 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -20,13 +20,11 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
-import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.Account.OfxAccountType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
-import java.math.BigDecimal;
 import java.util.*;
 
 /**
@@ -515,6 +513,71 @@ public Element toOFX(Document doc, String accountUID){
 	}
 
     /**
+     * Generate the GncXML for the transaction and append to the DOM document
+     * @param doc XML document to which transaction should be added
+     * @param rootElement Parent node for the XML
+     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
+     */
+    public void toGncXml(Document doc, Element rootElement) {
+        Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
+        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
+        idNode.appendChild(doc.createTextNode(mUID));
+
+        Element currencyNode = doc.createElement(GncXmlHelper.TAG_TRX_CURRENCY);
+        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
+        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
+        currencyNode.appendChild(cmdtySpacenode);
+        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
+        cmdtyIdNode.appendChild(doc.createTextNode(mCurrencyCode));
+        currencyNode.appendChild(cmdtyIdNode);
+
+        Element datePostedNode = doc.createElement(GncXmlHelper.TAG_DATE_POSTED);
+        Element datePNode = doc.createElement(GncXmlHelper.TAG_DATE);
+        datePNode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
+        datePostedNode.appendChild(datePNode);
+
+        Element dateEneteredNode = doc.createElement(GncXmlHelper.TAG_DATE_ENTERED);
+        Element dateENode = doc.createElement(GncXmlHelper.TAG_DATE);
+        dateENode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
+        dateEneteredNode.appendChild(dateENode);
+
+        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRN_DESCRIPTION);
+        if (mDescription != null) {
+            descriptionNode.appendChild(doc.createTextNode(mDescription));
+        }
+
+        Element trnSlotsNode = doc.createElement(GncXmlHelper.TAG_TRN_SLOTS);
+        if (mNotes != null && mNotes.length() > 0) {
+            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes, GncXmlHelper.ATTR_VALUE_STRING));
+            //TODO: Consider adding future transactions date as slot here too
+        }
+        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRN_SPLITS);
+        for (Split split : mSplitList) {
+            split.toGncXml(doc, trnSplits);
+        }
+
+        Element transactionNode = doc.createElement(GncXmlHelper.TAG_TRANSACTION);
+        transactionNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
+        transactionNode.appendChild(idNode);
+        transactionNode.appendChild(currencyNode);
+        transactionNode.appendChild(datePostedNode);
+        transactionNode.appendChild(dateEneteredNode);
+        transactionNode.appendChild(descriptionNode);
+        if (mNotes != null && mNotes.length() > 0){
+            transactionNode.appendChild(trnSlotsNode);
+        }
+        //TODO: Improve xml compatibilty with desktop for scheduled actions
+        if (mRecurrencePeriod != 0) {
+            Element recurrenceNode = doc.createElement(GncXmlHelper.TAG_RECURRENCE_PERIOD);
+            recurrenceNode.appendChild(doc.createTextNode(String.valueOf(mRecurrencePeriod)));
+            transactionNode.appendChild(recurrenceNode);
+        }
+        transactionNode.appendChild(trnSplits);
+
+        rootElement.appendChild(transactionNode);
+    }
+
+    /**
      * Creates an Intent with arguments from the <code>transaction</code>.
      * This intent can be broadcast to create a new transaction
      * @param transaction Transaction used to create intent

From 6ac205856b923d8597568385901368e86d8ddf10 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 19 Sep 2014 20:53:24 +0800
Subject: [PATCH 53/68] handling of export by file sharing

---
 .../gnucash/android/export/ExporterAsyncTask.java  | 102 +++++++++++++--------
 1 file changed, 65 insertions(+), 37 deletions(-)

diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index d72aa6a6..9b9ed163 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -40,7 +40,9 @@
 import java.io.*;
 import java.nio.channels.FileChannel;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Date;
+import java.util.List;
 
 /**
  * Asynchronous task for exporting transactions.
@@ -199,21 +201,38 @@ protected void onPostExecute(Boolean exportResult) {
      * the exported OFX file
      * @param path String path to the file on disk
      */
-    private void shareFile(String path){
+    private void shareFile(String path) {
         String defaultEmail = PreferenceManager.getDefaultSharedPreferences(mContext)
                 .getString(mContext.getString(R.string.key_default_export_email), null);
-        Intent shareIntent = new Intent(Intent.ACTION_SEND);
+        Intent shareIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
         shareIntent.setType("application/xml");
-        shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://" + path));
+        ArrayList<Uri> exportFiles = new ArrayList<Uri>();
+        if (mExportParams.getExportFormat() == ExportFormat.QIF) {
+            try {
+                List<String> splitFiles = splitQIF(new File(path), new File(path));
+                for (String file : splitFiles) {
+                    exportFiles.add(Uri.parse("file://" + file));
+                }
+            } catch (IOException e) {
+                Log.e(TAG, "error split up files in shareFile");
+                e.printStackTrace();
+                return;
+            }
+        } else {
+            exportFiles.add(Uri.parse("file://" + path));
+        }
+        shareIntent.putExtra(Intent.EXTRA_STREAM, exportFiles);
         shareIntent.putExtra(Intent.EXTRA_SUBJECT, mContext.getString(R.string.title_export_email,
                 mExportParams.getExportFormat().name()));
-        if (defaultEmail != null && defaultEmail.trim().length() > 0){
+        if (defaultEmail != null && defaultEmail.trim().length() > 0) {
             shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
         }
         SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
 
-        shareIntent.putExtra(Intent.EXTRA_TEXT, mContext.getString(R.string.description_export_email)
+        ArrayList<CharSequence> extraText = new ArrayList<CharSequence>();
+        extraText.add(mContext.getString(R.string.description_export_email)
                 + " " + formatter.format(new Date(System.currentTimeMillis())));
+        shareIntent.putExtra(Intent.EXTRA_TEXT, extraText);
 
         mContext.startActivity(Intent.createChooser(shareIntent, mContext.getString(R.string.title_select_export_destination)));
     }
@@ -224,40 +243,11 @@ private void shareFile(String path){
      * @param dst Absolute path to the destination file
      * @throws IOException if the file could not be copied
      */
-    public void copyFile(File src, File dst) throws IOException
-    {
+    public void copyFile(File src, File dst) throws IOException {
         //TODO: Make this asynchronous at some time, t in the future.
         if (mExportParams.getExportFormat() == ExportFormat.QIF) {
-            // split only at the last dot
-            String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
-            String line;
-            BufferedReader in = new BufferedReader(new FileReader(src));
-            BufferedWriter out = null;
-            try {
-                while ((line = in.readLine()) != null) {
-                    if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
-                        String currencyCode = line.substring(1);
-                        if (out != null) {
-                            out.close();
-                        }
-                        out = new BufferedWriter(new FileWriter(pathParts[0] + "_" + currencyCode + pathParts[1]));
-                    }
-                    else {
-                        if (out == null) {
-                            out = new BufferedWriter(new FileWriter(pathParts[0] + pathParts[1]));
-                        }
-                        out.append(line).append('\n');
-                    }
-                }
-            }
-            finally {
-                in.close();
-                if (out != null) {
-                    out.close();
-                }
-            }
-        }
-        else {
+            splitQIF(src, dst);
+        } else {
             FileChannel inChannel = new FileInputStream(src).getChannel();
             FileChannel outChannel = new FileOutputStream(dst).getChannel();
             try {
@@ -271,4 +261,42 @@ public void copyFile(File src, File dst) throws IOException
         }
     }
 
+    /**
+     * Copies a file from <code>src</code> to <code>dst</code>
+     * @param src Absolute path to the source file
+     * @param dst Absolute path to the destination file
+     * @throws IOException if the file could not be copied
+     */
+    private static List<String> splitQIF(File src, File dst) throws IOException {
+        // split only at the last dot
+        String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
+        ArrayList<String> splitFiles = new ArrayList<String>();
+        String line;
+        BufferedReader in = new BufferedReader(new FileReader(src));
+        BufferedWriter out = null;
+        try {
+            while ((line = in.readLine()) != null) {
+                if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
+                    String currencyCode = line.substring(1);
+                    if (out != null) {
+                        out.close();
+                    }
+                    String newFileName = pathParts[0] + "_" + currencyCode + pathParts[1];
+                    splitFiles.add(newFileName);
+                    out = new BufferedWriter(new FileWriter(newFileName));
+                } else {
+                    if (out == null) {
+                        throw new IllegalArgumentException(src.getPath() + " format is not correct");
+                    }
+                    out.append(line).append('\n');
+                }
+            }
+        } finally {
+            in.close();
+            if (out != null) {
+                out.close();
+            }
+        }
+        return splitFiles;
+    }
 }

From bfb7bdfd75ceaecfdb58d5701ed25695335e3485 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 19 Sep 2014 14:55:10 +0200
Subject: [PATCH 54/68] Code refactoring and cleanup

Updated copyright notices
Moved non-translatable strings into own file (should ease comparing string files during translation)
---
 .../{dialog_export_ofx.xml => dialog_export.xml}   |   0
 app/res/values/key_strings.xml                     | 232 +++++++++++++++++++++
 app/res/values/strings.xml                         | 231 +-------------------
 app/res/xml-v11/fragment_account_preferences.xml   |   2 +-
 app/res/xml/fragment_account_preferences.xml       |   2 +-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |   2 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  10 +-
 .../org/gnucash/android/db/SplitsDbAdapter.java    |   1 +
 .../gnucash/android/db/TransactionsDbAdapter.java  |   9 +-
 .../android/export/ExportDialogFragment.java       |   2 +-
 app/src/org/gnucash/android/export/Exporter.java   |   2 +
 .../gnucash/android/export/ofx/OfxExporter.java    |   2 +
 .../gnucash/android/export/qif/QifExporter.java    |   5 +-
 .../org/gnucash/android/export/qif/QifHelper.java  |   5 +-
 .../gnucash/android/export/xml/GncXmlExporter.java |   1 +
 .../gnucash/android/export/xml/GncXmlHelper.java   |  22 +-
 .../gnucash/android/importer/GncXmlHandler.java    |   1 +
 .../android/ui/account/AccountFormFragment.java    |   8 +-
 .../android/ui/account/AccountsActivity.java       |   8 +-
 .../android/ui/account/AccountsListFragment.java   |  19 --
 .../DeleteAllTransacationsConfirmationDialog.java  |  40 ++--
 .../android/ui/settings/SettingsActivity.java      |   2 +
 .../ScheduledTransactionsListFragment.java         |   2 +-
 .../ui/transaction/TransactionFormFragment.java    |   4 +-
 .../ui/transaction/TransactionsListFragment.java   |  21 +-
 .../dialog/DatePickerDialogFragment.java           |   2 +-
 ...ansactionsDeleteConfirmationDialogFragment.java |   1 +
 .../ui/widget/WidgetConfigurationActivity.java     |   2 +-
 28 files changed, 328 insertions(+), 310 deletions(-)
 rename app/res/layout/{dialog_export_ofx.xml => dialog_export.xml} (100%)
 create mode 100644 app/res/values/key_strings.xml

diff --git a/app/res/layout/dialog_export_ofx.xml b/app/res/layout/dialog_export.xml
similarity index 100%
rename from app/res/layout/dialog_export_ofx.xml
rename to app/res/layout/dialog_export.xml
diff --git a/app/res/values/key_strings.xml b/app/res/values/key_strings.xml
new file mode 100644
index 00000000..6a716b60
--- /dev/null
+++ b/app/res/values/key_strings.xml
@@ -0,0 +1,232 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="key_default_currency">default_currency</string>
+    <string name="key_first_run">key_first_run</string>
+    <string name="key_build_version">build_version</string>
+    <string name="key_license">app_license</string>
+    <string name="key_enable_passcode">enable_passcode</string>
+    <string name="key_change_passcode">change_passcode</string>
+    <string name="key_about">about_gnucash</string>
+    <string name="key_default_transaction_type">default_transaction_type</string>
+    <string name="key_export_all_transactions">export_all_transactions</string>
+    <string name="key_delete_transactions_after_export">delete_transactions_after_export</string>
+    <string name="key_default_export_email">export_email_target</string>
+    <string name="key_use_double_entry">use_double_entry</string>
+    <string name="key_xml_ofx_header">xml_ofx_header</string>
+    <string name="key_previous_minor_version">previous_minor_version</string>
+    <string name="key_import_accounts">import_gnucash_accounts</string>
+    <string name="key_delete_all_accounts">delete_all_accounts</string>
+    <string name="key_delete_all_transactions">delete_all_transactions</string>
+    <string name="key_default_export_format">default_export_format</string>
+    <string name="key_recurring_transaction_ids">recurring_transaction_ids</string>
+    <string name="key_create_default_accounts">create_default_accounts</string>
+    <string name="key_restore_backup">restore_backup</string>
+    <string name="key_save_opening_balances">save_opening_balances</string>
+
+    <string-array name="key_transaction_type_values">
+        <item>CREDIT</item>
+        <item>DEBIT</item>
+    </string-array>
+    <string-array name="key_account_type_entries">
+        <item>CASH</item>
+        <item>BANK</item>
+        <item>CREDIT</item>
+        <item>ASSET</item>
+        <item>LIABILITY</item>
+        <item>INCOME</item>
+        <item>EXPENSE</item>
+        <item>PAYABLE</item>
+        <item>RECEIVABLE</item>
+        <item>EQUITY</item>
+        <item>CURRENCY</item>
+        <item>STOCK</item>
+        <item>MUTUAL</item>
+    </string-array>
+    <string-array name="key_export_format_values">
+        <item>QIF</item>
+        <item>OFX</item>
+    </string-array>
+    <string-array name="key_recurrence_period_millis">
+        <item>0</item>
+        <item>86400000</item>
+        <item>604800000</item>
+        <item>2630000000</item>
+    </string-array>
+    <string-array name="key_currency_codes">
+        <item>AFN</item>
+        <item>DZD</item>
+        <item>ARS</item>
+        <item>AMD</item>
+        <item>AWG</item>
+        <item>AUD</item>
+        <item>AZN</item>
+        <item>BSD</item>
+        <item>BHD</item>
+        <item>THB</item>
+        <item>PAB</item>
+        <item>BBD</item>
+        <item>BYR</item>
+        <item>BZD</item>
+        <item>BMD</item>
+        <item>VEF</item>
+        <item>BOB</item>
+        <item>BRL</item>
+        <item>BND</item>
+        <item>BGN</item>
+        <item>BIF</item>
+        <item>CAD</item>
+        <item>CVE</item>
+        <item>KYD</item>
+        <item>XOF</item>
+        <item>XAF</item>
+        <item>XPF</item>
+        <item>CLP</item>
+        <item>XTS</item>
+        <item>COP</item>
+        <item>KMF</item>
+        <item>CDF</item>
+        <item>BAM</item>
+        <item>NIO</item>
+        <item>CRC</item>
+        <item>HRK</item>
+        <item>CUC</item>
+        <item>CUP</item>
+        <item>CZK</item>
+        <item>GMD</item>
+        <item>DKK</item>
+        <item>MKD</item>
+        <item>DJF</item>
+        <item>STD</item>
+        <item>DOP</item>
+        <item>VND</item>
+        <item>XCD</item>
+        <item>EGP</item>
+        <item>SVC</item>
+        <item>ETB</item>
+        <item>EUR</item>
+        <item>FKP</item>
+        <item>FJD</item>
+        <item>HUF</item>
+        <item>GHS</item>
+        <item>GIP</item>
+        <item>XAU</item>
+        <item>HTG</item>
+        <item>PYG</item>
+        <item>GNF</item>
+        <item>GYD</item>
+        <item>HKD</item>
+        <item>UAH</item>
+        <item>ISK</item>
+        <item>INR</item>
+        <item>IRR</item>
+        <item>IQD</item>
+        <item>JMD</item>
+        <item>JOD</item>
+        <item>KES</item>
+        <item>PGK</item>
+        <item>LAK</item>
+        <item>KWD</item>
+        <item>MWK</item>
+        <item>AOA</item>
+        <item>MMK</item>
+        <item>GEL</item>
+        <item>LVL</item>
+        <item>LBP</item>
+        <item>ALL</item>
+        <item>HNL</item>
+        <item>SLL</item>
+        <item>LRD</item>
+        <item>LYD</item>
+        <item>SZL</item>
+        <item>LTL</item>
+        <item>LSL</item>
+        <item>MGA</item>
+        <item>MYR</item>
+        <item>MUR</item>
+        <item>MXN</item>
+        <item>MXV</item>
+        <item>MDL</item>
+        <item>MAD</item>
+        <item>MZN</item>
+        <item>BOV</item>
+        <item>NGN</item>
+        <item>ERN</item>
+        <item>NAD</item>
+        <item>NPR</item>
+        <item>ANG</item>
+        <item>ILS</item>
+        <item>RON</item>
+        <item>TWD</item>
+        <item>NZD</item>
+        <item>BTN</item>
+        <item>KPW</item>
+        <item>NOK</item>
+        <item>PEN</item>
+        <item>MRO</item>
+        <item>TOP</item>
+        <item>PKR</item>
+        <item>XPD</item>
+        <item>MOP</item>
+        <item>PHP</item>
+        <item>XPT</item>
+        <item>GBP</item>
+        <item>BWP</item>
+        <item>QAR</item>
+        <item>GTQ</item>
+        <item>ZAR</item>
+        <item>OMR</item>
+        <item>KHR</item>
+        <item>MVR</item>
+        <item>IDR</item>
+        <item>RUB</item>
+        <item>RWF</item>
+        <item>SHP</item>
+        <item>SAR</item>
+        <item>XDR</item>
+        <item>RSD</item>
+        <item>SCR</item>
+        <item>XAG</item>
+        <item>SGD</item>
+        <item>SBD</item>
+        <item>KGS</item>
+        <item>SOS</item>
+        <item>TJS</item>
+        <item>SSP</item>
+        <item>LKR</item>
+        <item>XSU</item>
+        <item>SDG</item>
+        <item>SRD</item>
+        <item>SEK</item>
+        <item>CHF</item>
+        <item>SYP</item>
+        <item>BDT</item>
+        <item>WST</item>
+        <item>TZS</item>
+        <item>KZT</item>
+        <item>XXX</item>
+        <item>TTD</item>
+        <item>MNT</item>
+        <item>TND</item>
+        <item>TRY</item>
+        <item>TMT</item>
+        <item>AED</item>
+        <item>UGX</item>
+        <item>XFU</item>
+        <item>COU</item>
+        <item>CLF</item>
+        <item>UYI</item>
+        <item>UYU</item>
+        <item>USD</item>
+        <item>UZS</item>
+        <item>VUV</item>
+        <item>CHE</item>
+        <item>CHW</item>
+        <item>KRW</item>
+        <item>YER</item>
+        <item>JPY</item>
+        <item>CNY</item>
+        <item>ZMK</item>
+        <item>ZWL</item>
+        <item>PLN</item>
+    </string-array>
+</resources>
\ No newline at end of file
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index af77f829..2c5b8ed5 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -70,7 +70,6 @@
     <string name="title_move_transactions">Move %1$d transaction(s)</string>
     <string name="label_move_destination">Destination Account</string>
     <string name="permission_access_sdcard">Access SD Card</string>
-    <string name="key_default_currency">default_currency</string>
     <string name="toast_incompatible_currency">Cannot move transactions.\nThe destination account uses a different currency from origin account</string>
     <string name="header_general_settings">General</string>
     <string name="header_about_gnucash">About</string>
@@ -86,7 +85,6 @@
     <string name="label_display_account">Display account</string>
     <string name="btn_create_accounts">Create Accounts</string>
     <string name="title_default_accounts">Select accounts to create</string>
-    <string name="key_first_run">key_first_run</string>
     <string-array name="currency_names">
         <item>Afghani</item>
 		<item>Algerian Dinar</item>
@@ -264,207 +262,24 @@
 		<item>Zimbabwe Dollar</item>
 		<item>Zloty</item>
     </string-array>
-    
-	<string-array name="currency_codes">
-        <item>AFN</item>
-		<item>DZD</item>
-		<item>ARS</item>
-		<item>AMD</item>
-		<item>AWG</item>
-		<item>AUD</item>
-		<item>AZN</item>
-		<item>BSD</item>
-		<item>BHD</item>
-		<item>THB</item>
-		<item>PAB</item>
-		<item>BBD</item>
-		<item>BYR</item>
-		<item>BZD</item>
-		<item>BMD</item>
-		<item>VEF</item>
-		<item>BOB</item>
-		<item>BRL</item>
-		<item>BND</item>
-		<item>BGN</item>
-		<item>BIF</item>
-		<item>CAD</item>
-		<item>CVE</item>
-		<item>KYD</item>
-		<item>XOF</item>
-		<item>XAF</item>
-		<item>XPF</item>
-		<item>CLP</item>
-		<item>XTS</item>
-		<item>COP</item>
-		<item>KMF</item>
-		<item>CDF</item>
-		<item>BAM</item>
-		<item>NIO</item>
-		<item>CRC</item>
-		<item>HRK</item>
-        <item>CUC</item>
-        <item>CUP</item>
-		<item>CZK</item>
-		<item>GMD</item>
-		<item>DKK</item>
-		<item>MKD</item>
-		<item>DJF</item>
-		<item>STD</item>
-		<item>DOP</item>
-		<item>VND</item>
-		<item>XCD</item>
-		<item>EGP</item>
-		<item>SVC</item>
-		<item>ETB</item>
-		<item>EUR</item>
-		<item>FKP</item>
-		<item>FJD</item>
-		<item>HUF</item>
-		<item>GHS</item>
-		<item>GIP</item>
-		<item>XAU</item>
-		<item>HTG</item>
-		<item>PYG</item>
-		<item>GNF</item>
-		<item>GYD</item>
-		<item>HKD</item>
-		<item>UAH</item>
-		<item>ISK</item>
-		<item>INR</item>
-		<item>IRR</item>
-		<item>IQD</item>
-		<item>JMD</item>
-		<item>JOD</item>
-		<item>KES</item>
-		<item>PGK</item>
-		<item>LAK</item>
-		<item>KWD</item>
-		<item>MWK</item>
-		<item>AOA</item>
-		<item>MMK</item>
-		<item>GEL</item>
-		<item>LVL</item>
-		<item>LBP</item>
-		<item>ALL</item>
-		<item>HNL</item>
-		<item>SLL</item>
-		<item>LRD</item>
-		<item>LYD</item>
-		<item>SZL</item>
-		<item>LTL</item>
-		<item>LSL</item>
-		<item>MGA</item>
-		<item>MYR</item>
-		<item>MUR</item>
-		<item>MXN</item>
-		<item>MXV</item>
-		<item>MDL</item>
-		<item>MAD</item>
-		<item>MZN</item>
-		<item>BOV</item>
-		<item>NGN</item>
-		<item>ERN</item>
-		<item>NAD</item>
-		<item>NPR</item>
-		<item>ANG</item>
-		<item>ILS</item>
-		<item>RON</item>
-		<item>TWD</item>
-		<item>NZD</item>
-		<item>BTN</item>
-		<item>KPW</item>
-		<item>NOK</item>
-		<item>PEN</item>
-		<item>MRO</item>
-		<item>TOP</item>
-		<item>PKR</item>
-		<item>XPD</item>
-		<item>MOP</item>
-		<item>PHP</item>
-		<item>XPT</item>
-		<item>GBP</item>
-		<item>BWP</item>
-		<item>QAR</item>
-		<item>GTQ</item>
-		<item>ZAR</item>
-		<item>OMR</item>
-		<item>KHR</item>
-		<item>MVR</item>
-		<item>IDR</item>
-		<item>RUB</item>
-		<item>RWF</item>
-		<item>SHP</item>
-		<item>SAR</item>
-		<item>XDR</item>
-		<item>RSD</item>
-		<item>SCR</item>
-		<item>XAG</item>
-		<item>SGD</item>
-		<item>SBD</item>
-		<item>KGS</item>
-		<item>SOS</item>
-		<item>TJS</item>
-		<item>SSP</item>
-		<item>LKR</item>
-		<item>XSU</item>
-		<item>SDG</item>
-		<item>SRD</item>
-		<item>SEK</item>
-		<item>CHF</item>
-		<item>SYP</item>
-		<item>BDT</item>
-		<item>WST</item>
-		<item>TZS</item>
-		<item>KZT</item>
-		<item>XXX</item>
-		<item>TTD</item>
-		<item>MNT</item>
-		<item>TND</item>
-		<item>TRY</item>
-		<item>TMT</item>
-		<item>AED</item>
-		<item>UGX</item>
-		<item>XFU</item>
-		<item>COU</item>
-		<item>CLF</item>
-		<item>UYI</item>
-        <item>UYU</item>
-        <item>USD</item>
-		<item>UZS</item>
-		<item>VUV</item>
-		<item>CHE</item>
-		<item>CHW</item>
-		<item>KRW</item>
-		<item>YER</item>
-		<item>JPY</item>
-		<item>CNY</item>
-		<item>ZMK</item>
-		<item>ZWL</item>
-		<item>PLN</item>
-    </string-array>
 	<string-array name="default_accounts">
 	    <item>Expenses</item>
 	    <item>Income</item>
-	    <item>Assets</item>	    
+	    <item>Assets</item>
 	    <item>Equity</item>
 	    <item>Liabilities</item>
 	</string-array>
 	<string name="error_no_accounts">No accounts exist in GnuCash.\nCreate an account before adding a widget</string>
-	<string name="key_build_version">build_version</string>
 	<string name="title_build_version">Build version</string>
 	<string name="title_license">License</string>
 	<string name="summary_licence_details">Apache License v2.0. Click for details</string>
 	<string name="title_general_prefs">General Preferences</string>
-	<string name="key_license">app_license</string>
 	<string name="label_widget_configuration">Select Account</string>
 	<string name="toast_no_transactions_to_export">There are no transactions available to export</string>
     <string name="header_passcode_settings">Passcode</string>
     <string name="title_passcode_preferences">Passcode Preferences</string>
-    <string name="key_enable_passcode">enable_passcode</string>
     <string name="title_enable_passcode">Turn On/Off Passcode</string>
     <string name="title_change_passcode">Change Passcode</string>
-    <string name="key_change_passcode">change_passcode</string>
-	<string name="key_about">about_gnucash</string>
 	<string name="title_about_gnucash">About GnuCash</string>
 	<string name="summary_about_gnucash">Gnucash is a mobile finance expense tracker application for Android.\n
         It enables flexible tracking of expenses on-the-go which can be exported to multiple formats (OFX, QIF) and imported into GnuCash for the desktop.</string>
@@ -475,29 +290,19 @@
 	<string name="header_transaction_settings">Transactions</string>
 	<string name="title_transaction_preferences">Transaction Preferences</string>
 	<string name="title_account_preferences">Account Preferences</string>
-	<string name="key_default_transaction_type">default_transaction_type</string>
 	<string name="title_default_transaction_type">Default Transaction Type</string>
 	<string name="summary_default_transaction_type">The type of transaction to use by default, CREDIT or DEBIT</string>
 	<string-array name="transaction_types">
 		<item>CREDIT</item>
 		<item>DEBIT</item>
 	</string-array>
-	<string-array name="key_transaction_type_values">
-		<item>CREDIT</item>
-		<item>DEBIT</item>
-	</string-array>
 	<string name="msg_delete_all_transactions_confirmation">Are you sure you want to delete ALL transactions?</string>
 	<string name="msg_delete_transaction_confirmation">Are you sure you want to delete this transaction?</string>
 	<string name="title_export_preference_category">Export</string>
-	<string name="key_export_all_transactions">export_all_transactions</string>
 	<string name="title_export_all_transactions">Export all transactions</string>
-	<string name="key_delete_transactions_after_export">delete_transactions_after_export</string>
 	<string name="title_always_delete_exported_transactions">Delete exported transactions</string>
-	<string name="key_default_export_email">export_email_target</string>
 	<string name="title_default_export_email">Default export email</string>
 	<string name="summary_default_export_email">The default email address to send exports to. You can still change this when you export.</string>
-	<string name="key_use_double_entry">use_double_entry</string>	
-	<string name="key_xml_ofx_header">xml_ofx_header</string>
 	<string name="label_double_entry_account">Transfer Account</string>
 	<string name="summary_use_double_entry">All transactions will be a transfer from one account to another</string>
 	<string name="title_use_double_entry">Activate Double Entry</string>
@@ -507,7 +312,6 @@
 	<string name="label_parent_account">Parent account</string>
 	<string name="title_xml_ofx_header">Use XML OFX header</string>
 	<string name="summary_xml_ofx_header">Enable this option when exporting to third-party application other than GnuCash for desktop</string>
-	<string name="key_previous_minor_version">previous_minor_version</string>
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
         - Create multiple splits per transaction\n
@@ -525,10 +329,8 @@
     <string name="btn_import_accounts">Import Accounts</string>
     <string name="toast_error_importing_accounts">An error occurred while importing the GnuCash accounts</string>
     <string name="toast_success_importing_accounts">GnuCash Accounts successfully imported</string>
-    <string name="key_import_accounts">import_gnucash_accounts</string>
     <string name="summary_import_accounts">Import account structure exported from GnuCash desktop</string>
     <string name="title_import_accounts">Import GnuCash accounts</string>
-    <string name="key_delete_all_accounts">delete_all_accounts</string>
     <string name="summary_delete_all_accounts">Delete all accounts in the database. All transactions will be deleted as
         well.
     </string>
@@ -539,7 +341,6 @@
         operation cannot be undone!
     </string>
     <string name="label_account_type">Account Type</string>
-    <string name="key_delete_all_transactions">delete_all_transactions</string>
     <string name="summary_delete_all_transactions">All transactions in all accounts will be deleted!</string>
     <string name="title_delete_all_transactions">Delete all transactions</string>
     <string name="toast_all_transactions_deleted">All transactions successfully deleted!</string>
@@ -549,14 +350,12 @@
     <string name="section_header_subaccounts">Sub-Accounts</string>
     <string name="menu_search_accounts">Search</string>
     <string name="title_default_export_format">Default Export Format</string>
-    <string name="key_default_export_format">default_export_format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions</string>
     <string name="label_recurring_transaction">Recurrence</string>
     <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
     <string name="imbalance_account_name">Imbalance</string>
     <string name="title_progress_exporting_transactions">Exporting transactions</string>
-    <string name="key_recurring_transaction_ids">recurring_transaction_ids</string>
     <string name="label_no_recurring_transactions">No recurring transactions to display.</string>
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
@@ -580,25 +379,6 @@
         <item>STOCK</item>
         <item>MUTUAL FUND</item>
     </string-array>
-    <string-array name="account_type_entries">
-        <item>CASH</item>
-        <item>BANK</item>
-        <item>CREDIT</item>
-        <item>ASSET</item>
-        <item>LIABILITY</item>
-        <item>INCOME</item>
-        <item>EXPENSE</item>
-        <item>PAYABLE</item>
-        <item>RECEIVABLE</item>
-        <item>EQUITY</item>
-        <item>CURRENCY</item>
-        <item>STOCK</item>
-        <item>MUTUAL</item>
-    </string-array>
-    <string-array name="key_export_format_values">
-        <item>QIF</item>
-        <item>OFX</item>
-    </string-array>
     <string-array name="export_formats">
         <item>QIF</item>
         <item>OFX</item>
@@ -609,12 +389,6 @@
         <item>WEEKLY</item>
         <item>MONTHLY</item>
     </string-array>
-    <string-array name="recurrence_period_millis">
-        <item>0</item>
-        <item>86400000</item>
-        <item>604800000</item>
-        <item>2630000000</item>
-    </string-array>
     <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
     <string name="color_picker_default_title">Select a Color</string>
     <!-- Content description for a color square. -->
@@ -626,7 +400,6 @@
     <string name="title_recent_accounts">Recent</string>
     <string name="title_favorite_accounts">Favorites</string>
     <string name="title_all_accounts">All</string>
-    <string name="key_create_default_accounts">create_default_accounts</string>
     <string name="summary_create_default_accounts">Creates default GnuCash commonly-used account structure</string>
     <string name="title_create_default_accounts">Create default accounts</string>
     <string name="msg_confirm_create_default_accounts_setting">New accounts will be created in addition to the existing
@@ -656,11 +429,9 @@
     <string name="label_buy">Buy</string>
     <string name="label_sell">Sell</string>
     <string name="label_repeats">Repeats</string>
-    <string name="key_restore_backup">restore_backup</string>
     <string name="toast_no_recent_backup">No recent backup found</string>
     <string name="account_name_opening_balances">Opening Balances</string>
     <string name="account_name_equity">Equity</string>
-    <string name="key_save_opening_balances">save_opening_balances</string>
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
diff --git a/app/res/xml-v11/fragment_account_preferences.xml b/app/res/xml-v11/fragment_account_preferences.xml
index 7655dda3..d2f360a9 100644
--- a/app/res/xml-v11/fragment_account_preferences.xml
+++ b/app/res/xml-v11/fragment_account_preferences.xml
@@ -6,7 +6,7 @@
                     android:dialogTitle="@string/title_choose_currency"
                     android:title="@string/title_default_currency"
                     android:entries="@array/currency_names"
-                    android:entryValues="@array/currency_codes"/>
+                    android:entryValues="@array/key_currency_codes"/>
     <Preference android:key="@string/key_create_default_accounts"
                 android:title="@string/title_create_default_accounts"
                 android:summary="@string/summary_create_default_accounts" />
diff --git a/app/res/xml/fragment_account_preferences.xml b/app/res/xml/fragment_account_preferences.xml
index d74b59eb..33e57f67 100644
--- a/app/res/xml/fragment_account_preferences.xml
+++ b/app/res/xml/fragment_account_preferences.xml
@@ -7,7 +7,7 @@
                     android:dialogTitle="@string/title_choose_currency"
                     android:title="@string/title_default_currency"
                     android:entries="@array/currency_names"
-                    android:entryValues="@array/currency_codes"
+                    android:entryValues="@array/key_currency_codes"
                     android:defaultValue="USD"/>
     <Preference android:key="@string/key_import_accounts"
                 android:summary="@string/summary_import_accounts"
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 8e15a1a6..33fcf484 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -38,7 +38,7 @@
  * Manages persistence of {@link Account}s in the database
  * Handles adding, modifying and deleting of account records.
  * @author Ngewi Fet <ngewif@gmail.com>
- *
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class AccountsDbAdapter extends DatabaseAdapter {
     /**
diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index 61fa8175..87a76a3f 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -33,20 +33,20 @@
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
 /**
- * Date: 23.03.2014
+ * Collection of helper methods which are used during database migrations
  *
- * @author Ngewi
+ * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class MigrationHelper {
     public static final String LOG_TAG = "MigrationHelper";
 
     /**
-     * Performs same functtion as {@link AccountsDbAdapter#getFullyQualifiedAccountName(String)}
+     * Performs same function as {@link AccountsDbAdapter#getFullyQualifiedAccountName(String)}
      * <p>This method is only necessary because we cannot open the database again (by instantiating {@link org.gnucash.android.db.AccountsDbAdapter}
-     * while it is locked for upgrades. So we reimplement the method here.</p>
+     * while it is locked for upgrades. So we re-implement the method here.</p>
      * @param db SQLite database
      * @param accountUID Unique ID of account whose fully qualified name is to be determined
-     * @return Fully qualified (colon-sepaated) account name
+     * @return Fully qualified (colon-separated) account name
      * @see AccountsDbAdapter#getFullyQualifiedAccountName(String)
      */
     static String getFullyQualifiedAccountName(SQLiteDatabase db, String accountUID){
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index edc6011d..e01a93fb 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -42,6 +42,7 @@
  * Database adapter for managing transaction splits in the database
  *
  * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class SplitsDbAdapter extends DatabaseAdapter {
 
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index bed881d0..9f6d861b 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -38,7 +38,7 @@
  * Manages persistence of {@link Transaction}s in the database
  * Handles adding, modifying and deleting of transaction records.
  * @author Ngewi Fet <ngewif@gmail.com> 
- * 
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class TransactionsDbAdapter extends DatabaseAdapter {
 
@@ -243,13 +243,11 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
      * @return Cursor holding set of all recurring transactions
      */
     public Cursor fetchAllRecurringTransactions(){
-        Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
+        return mDb.query(TransactionEntry.TABLE_NAME,
                 null,
                 TransactionEntry.COLUMN_RECURRENCE_PERIOD + "!= 0",
                 null, null, null,
                 AccountEntry.COLUMN_NAME + " ASC, " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ASC");
-//                DatabaseHelper.COLUMN_RECURRENCE_PERIOD + " ASC, " + DatabaseHelper.COLUMN_TIMESTAMP + " DESC");
-        return cursor;
     }
 
 	/**
@@ -592,12 +590,11 @@ public Cursor fetchTransactionsStartingWith(String prefix){
                 .append(" LIKE '").append(prefix).append("%'");
         String selection = stringBuffer.toString();
 
-        Cursor c = mDb.query(TransactionEntry.TABLE_NAME,
+        return mDb.query(TransactionEntry.TABLE_NAME,
                 new String[]{TransactionEntry._ID, TransactionEntry.COLUMN_DESCRIPTION},
                 selection,
                 null, null, null,
                 TransactionEntry.COLUMN_DESCRIPTION + " ASC");
-        return c;
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index d7dd6c4f..b5a23353 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -115,7 +115,7 @@ public void onRadioButtonClicked(View view){
 	@Override
 	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
-		return inflater.inflate(R.layout.dialog_export_ofx, container, false);
+		return inflater.inflate(R.layout.dialog_export, container, false);
 	}
 	
 	@Override
diff --git a/app/src/org/gnucash/android/export/Exporter.java b/app/src/org/gnucash/android/export/Exporter.java
index 9865de12..e7b121ec 100644
--- a/app/src/org/gnucash/android/export/Exporter.java
+++ b/app/src/org/gnucash/android/export/Exporter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,6 +34,7 @@
  * Base class for the different exporters
  *
  * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public abstract class Exporter {
     /**
diff --git a/app/src/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
index c902c761..5caa4ad5 100644
--- a/app/src/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/org/gnucash/android/export/ofx/OfxExporter.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,6 +45,7 @@
 /**
  * Exports the data in the database in OFX format
  * @author Ngewi Fet <ngewi.fet@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class OfxExporter extends Exporter{
 
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index a6049f3d..2634fae1 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -34,7 +34,10 @@
 import java.util.Currency;
 
 /**
- * @author Ngewi
+ * Exports the accounts and transactions in the database to the QIF format
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class QifExporter extends Exporter{
     public QifExporter(ExportParams params){
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index 3a5e3d08..6bebe6eb 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -17,16 +17,13 @@
 
 package org.gnucash.android.export.qif;
 
-import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.AccountType;
 
 import java.text.SimpleDateFormat;
-import java.util.Currency;
 import java.util.Date;
 
 /**
- * @author Ngewi
+ * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class QifHelper {
     /*
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
index 5601d02e..1fc81fdc 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -54,6 +54,7 @@
  * Creates a GnuCash XML representation of the accounts and transactions
  *
  * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class GncXmlExporter extends Exporter{
 
diff --git a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
index 0b40ba36..298fa085 100644
--- a/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright (c) 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.gnucash.android.export.xml;
 
 import org.gnucash.android.model.Money;
@@ -12,9 +29,10 @@
 import java.util.Date;
 
 /**
- * Date: 17.07.2014
+ * Collection of helper tags and methods for Gnc XML export
  *
- * @author Ngewi
+ * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public abstract class GncXmlHelper {
     public static final String TAG_PREFIX           = "gnc:";
diff --git a/app/src/org/gnucash/android/importer/GncXmlHandler.java b/app/src/org/gnucash/android/importer/GncXmlHandler.java
index 1c940cd4..7f52a96e 100644
--- a/app/src/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/org/gnucash/android/importer/GncXmlHandler.java
@@ -42,6 +42,7 @@
  * The discovered accounts and transactions are automatically added to the database
  *
  * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class GncXmlHandler extends DefaultHandler {
 
diff --git a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
index 28db64eb..91d5136a 100644
--- a/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,6 +57,7 @@
 /**
  * Fragment used for creating and editing accounts
  * @author Ngewi Fet <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class AccountFormFragment extends SherlockFragment {
 
@@ -396,7 +398,7 @@ private void initializeColorSquarePreview(String colorHex){
      * @param accountType AccountType to be set
      */
     private void setAccountTypeSelection(AccountType accountType){
-        String[] accountTypeEntries = getResources().getStringArray(R.array.account_type_entries);
+        String[] accountTypeEntries = getResources().getStringArray(R.array.key_account_type_entries);
         int accountTypeIndex = Arrays.asList(accountTypeEntries).indexOf(accountType.name());
         mAccountTypeSpinner.setSelection(accountTypeIndex);
     }
@@ -417,7 +419,7 @@ private void setDefaultTransferAccountInputsVisible(boolean visible) {
      * @param currencyCode ISO 4217 currency code to be selected
      */
     private void setSelectedCurrency(String currencyCode){
-        mCurrencyCodes = Arrays.asList(getResources().getStringArray(R.array.currency_codes));
+        mCurrencyCodes = Arrays.asList(getResources().getStringArray(R.array.key_currency_codes));
         if (mCurrencyCodes.contains(currencyCode)){
             mCurrencySpinner.setSelection(mCurrencyCodes.indexOf(currencyCode));
         }
@@ -784,7 +786,7 @@ private void saveAccount() {
      */
     private AccountType getSelectedAccountType() {
         int selectedAccountTypeIndex = mAccountTypeSpinner.getSelectedItemPosition();
-        String[] accountTypeEntries = getResources().getStringArray(R.array.account_type_entries);
+        String[] accountTypeEntries = getResources().getStringArray(R.array.key_account_type_entries);
         return AccountType.valueOf(accountTypeEntries[selectedAccountTypeIndex]);
     }
 
diff --git a/app/src/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
index c4a2dbb3..e0ed799e 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsActivity.java
@@ -39,12 +39,10 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
-
 import com.actionbarsherlock.view.Menu;
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 import com.viewpagerindicator.TitlePageIndicator;
-
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -60,12 +58,8 @@
 import org.gnucash.android.ui.util.Refreshable;
 import org.gnucash.android.ui.util.TaskDelegate;
 
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.util.Arrays;
 
 /**
@@ -453,7 +447,7 @@ public void onClick(DialogInterface dialog, int which) {
 
                     @Override
                     public void onClick(DialogInterface dialog, int which) {
-                        String currency = Arrays.asList(getResources().getStringArray(R.array.currency_codes)).get(which);
+                        String currency = Arrays.asList(getResources().getStringArray(R.array.key_currency_codes)).get(which);
                         PreferenceManager.getDefaultSharedPreferences(AccountsActivity.this)
                                 .edit()
                                 .putString(getString(R.string.key_default_currency), currency)
diff --git a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
index 060b2ed9..158ee5d1 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -315,8 +315,6 @@ public void tryDeleteAccount(long rowId) {
      * @param rowId Record ID of the account to be deleted
      */
     protected void deleteAccount(long rowId, boolean deleteSubAccounts) {
-        String accountUID = mAccountsDbAdapter.getAccountUID(rowId);
-        String parentUID    = mAccountsDbAdapter.getParentAccountUID(rowId);
         boolean deleted     = deleteSubAccounts ?
                 mAccountsDbAdapter.recursiveDestructiveDelete(rowId)
                 : mAccountsDbAdapter.destructiveDeleteAccount(rowId);
@@ -435,23 +433,6 @@ public void onDestroy() {
         mAccountsCursorAdapter.close();
     }
 
-    public void showAddAccountFragment(String accountUID) {
-        FragmentManager fragmentManager = getSherlockActivity().getSupportFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager
-                .beginTransaction();
-
-        Bundle args = new Bundle();
-        args.putString(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
-        AccountFormFragment accountFormFragment = AccountFormFragment.newInstance(mAccountsDbAdapter);
-        accountFormFragment.setArguments(args);
-
-        fragmentTransaction.replace(R.id.fragment_container,
-                accountFormFragment, AccountsActivity.FRAGMENT_NEW_ACCOUNT);
-
-        fragmentTransaction.addToBackStack(null);
-        fragmentTransaction.commit();
-    }
-
     /**
      * Opens a new activity for creating or editing an account.
      * If the <code>accountId</code> &lt; 1, then create else edit the account.
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index acd04169..89aca3fb 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.gnucash.android.ui.settings;
 
 import android.app.AlertDialog;
@@ -19,10 +35,10 @@
 import java.util.List;
 
 /**
- * Copyright (c) 2013 - gnucash-android
- *
  * Confirmation dialog for deleting all transactions
+ *
  * @author ngewif <ngewif@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class DeleteAllTransacationsConfirmationDialog extends DialogFragment {
 
@@ -62,18 +78,18 @@ public void onClick(DialogInterface dialog, int whichButton) {
                         }
 
                 )
-                                    .
+                .
 
-                            setNegativeButton(R.string.alert_dialog_cancel,
-                                    new DialogInterface.OnClickListener() {
-                                        public void onClick(DialogInterface dialog, int whichButton) {
-                                            dismiss();
-                                        }
+                        setNegativeButton(R.string.alert_dialog_cancel,
+                                new DialogInterface.OnClickListener() {
+                                    public void onClick(DialogInterface dialog, int whichButton) {
+                                        dismiss();
                                     }
+                                }
 
-                            )
-                                    .
+                        )
+                .
 
-                            create();
-                        }
+                        create();
     }
+}
diff --git a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
index 76618cd3..596d71df 100644
--- a/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,6 +61,7 @@
  * Activity for displaying settings and information about the application
  * @author Ngewi Fet <ngewif@gmail.com>
  * @author Oleksandr Tyshkovets <olexandr.tyshkovets@gmail.com>
+ * @author Yongxin Wang <fefe.wyx@gmail.com>
  */
 public class SettingsActivity extends SherlockPreferenceActivity implements OnPreferenceChangeListener, Preference.OnPreferenceClickListener{
 
diff --git a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index 3cdd9008..ce142492 100644
--- a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -367,7 +367,7 @@ public void run() {
          * @return String formatted representation of recurrence period
          */
         public String getRecurrenceAsString(long periodMillis){
-            String[] recurrencePeriods = getResources().getStringArray(R.array.recurrence_period_millis);
+            String[] recurrencePeriods = getResources().getStringArray(R.array.key_recurrence_period_millis);
             String[] recurrenceStrings = getResources().getStringArray(R.array.recurrence_period_strings);
 
             int index = 0;
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 529e0537..e8b9b1b3 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -405,7 +405,7 @@ private void setSelectedRecurrenceOption() {
         //init recurrence options
         final long recurrencePeriod = mTransaction.getRecurrencePeriod();
         if (recurrencePeriod > 0){
-            String[] recurrenceOptions = getResources().getStringArray(R.array.recurrence_period_millis);
+            String[] recurrenceOptions = getResources().getStringArray(R.array.key_recurrence_period_millis);
 
             int selectionIndex = 0;
             for (String recurrenceOption : recurrenceOptions) {
@@ -659,7 +659,7 @@ private void scheduleRecurringTransaction() {
         //set up recurring transaction if requested
         int recurrenceIndex = mRecurringTransactionSpinner.getSelectedItemPosition();
         if (recurrenceIndex != 0) {
-            String[] recurrenceOptions = getResources().getStringArray(R.array.recurrence_period_millis);
+            String[] recurrenceOptions = getResources().getStringArray(R.array.key_recurrence_period_millis);
             long recurrencePeriodMillis = Long.parseLong(recurrenceOptions[recurrenceIndex]);
             Transaction recurringTransaction;
             if (mTransaction.getRecurrencePeriod() > 0) //if we are editing the recurring transaction itself...
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index bc986e78..337262b8 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -133,12 +133,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
 		}
 	};
 
-	/**
-	 * Text view displaying the sum of the accounts
-	 */
-	private TextView mSumTextView;
-	
-	@Override
+    @Override
  	public void onCreate(Bundle savedInstanceState) {		
 		super.onCreate(savedInstanceState);
 		setHasOptionsMenu(true);
@@ -189,7 +184,10 @@ public void refresh(String accountUID){
 	public void refresh(){
 		getLoaderManager().restartLoader(0, null, this);
 
-        mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
+        /*
+	  Text view displaying the sum of the accounts
+	 */
+        TextView mSumTextView = (TextView) getView().findViewById(R.id.transactions_sum);
         new AccountBalanceTask(mSumTextView, getActivity()).execute(mAccountUID);
 
 	}
@@ -317,11 +315,10 @@ private void startActionMode(){
 	 */
 	private void stopActionMode(){
         int checkedCount = getListView().getCheckedItemIds().length;
-		if (checkedCount > 0 || mActionMode == null)
-			return;
-		else
-			mActionMode.finish();
-	}
+        if (checkedCount <= 0 && mActionMode != null) {
+            mActionMode.finish();
+        }
+    }
 		
 	/**
 	 * Prepares and displays the dialog for bulk moving transactions to another account
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
index b64c6462..862fc7d2 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/DatePickerDialogFragment.java
@@ -57,7 +57,7 @@ public DatePickerDialogFragment() {
 	 * @param dateMillis Time in milliseconds to which to initialize the dialog
 	 */
 	public DatePickerDialogFragment(OnDateSetListener callback, long dateMillis) {
-		mDateSetListener = (OnDateSetListener) callback;
+		mDateSetListener = callback;
 		if (dateMillis > 0){
 			mDate = new GregorianCalendar();
 			mDate.setTimeInMillis(dateMillis);
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 7ab94c6e..cc90ff29 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2013 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2014 Yongxin Wang <fefe.wyx@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java b/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
index ff582b7f..39fe7266 100644
--- a/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
+++ b/app/src/org/gnucash/android/ui/widget/WidgetConfigurationActivity.java
@@ -48,7 +48,7 @@
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
 /**
- * Activity for configuration which account to diplay on a widget. 
+ * Activity for configuration which account to display on a widget.
  * The activity is opened each time a widget is added to the homescreen
  * @author Ngewi Fet <ngewif@gmail.com>
  */

From 920bcfa1bf7095f525868f82c4c09fa566db20d8 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 19 Sep 2014 20:56:03 +0800
Subject: [PATCH 55/68] reject non-GncXML in migrationHelper

---
 app/src/org/gnucash/android/db/MigrationHelper.java | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index 860746b5..f285f7c6 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -126,12 +126,11 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) throws IOEx
         //we do not use the ExporterAsyncTask here because we want to use an already open db
         Exporter exporter = null;
         switch (format){
-            case QIF:
-                exporter = new QifExporter(exportParams, db);
-                break;
             case GNC_XML:
-            default:
                 exporter = new GncXmlExporter(exportParams, db);
+                break;
+            default:
+                throw new IllegalArgumentException("Only Gnc XML is supported in Migration");
         }
 
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(

From ce50ee116f18a373f30cb135ee48b5ad6c187db0 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 19 Sep 2014 23:11:08 +0800
Subject: [PATCH 56/68] Bug fix, see code

---
 app/src/org/gnucash/android/ui/passcode/PassLockActivity.java           | 2 +-
 app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java b/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
index e9f8b208..384359a3 100644
--- a/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PassLockActivity.java
@@ -30,7 +30,7 @@ protected void onResume() {
                     .setAction(getIntent().getAction())
                     .putExtra(UxArgument.PASSCODE_CLASS_CALLER, this.getClass().getName())
                     .putExtra(UxArgument.SELECTED_ACCOUNT_UID,
-                            getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_UID, 0L))
+                            getIntent().getStringExtra(UxArgument.SELECTED_ACCOUNT_UID))
             );
         }
     }
diff --git a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
index ba7b55f1..e2e98cff 100644
--- a/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
+++ b/app/src/org/gnucash/android/ui/passcode/PasscodeLockScreenActivity.java
@@ -55,7 +55,7 @@ public void onPasscodeEntered(String pass) {
                     .setClassName(this, getIntent().getStringExtra(UxArgument.PASSCODE_CLASS_CALLER))
                     .setAction(getIntent().getAction())
                     .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
-                    .putExtra(UxArgument.SELECTED_ACCOUNT_UID, getIntent().getLongExtra(UxArgument.SELECTED_ACCOUNT_UID, 0L))
+                    .putExtra(UxArgument.SELECTED_ACCOUNT_UID, getIntent().getStringExtra(UxArgument.SELECTED_ACCOUNT_UID))
             );
         } else {
             Toast.makeText(this, R.string.toast_wrong_passcode, Toast.LENGTH_SHORT).show();

From 89c0fcd439ed086274b4e88bf4b344e5aca2e499 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 21 Sep 2014 18:05:27 +0800
Subject: [PATCH 57/68] add TEMP VIEW trans_split_acct

---
 .../org/gnucash/android/db/DatabaseAdapter.java    | 65 ++++++++++++++++++++--
 .../gnucash/android/db/TransactionsDbAdapter.java  | 55 ++++++++----------
 .../gnucash/android/export/qif/QifExporter.java    | 22 ++++----
 3 files changed, 94 insertions(+), 48 deletions(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 39726893..a6f379c0 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -23,6 +23,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.DatabaseSchema.*;
 import org.gnucash.android.model.AccountType;
 
 /**
@@ -58,20 +59,74 @@
 	 * @param context Application context to be used for opening database
 	 */
 	public DatabaseAdapter(Context context) {
-		mDbHelper = new DatabaseHelper(context);
-		mContext = context.getApplicationContext();
-		open();
-	}
+        mDbHelper = new DatabaseHelper(context);
+        mContext = context.getApplicationContext();
+        open();
+        createTempView();
+    }
 
     /**
      * Opens the database adapter with an existing database
      * @param db SQLiteDatabase object
      */
-    public DatabaseAdapter(SQLiteDatabase db){
+    public DatabaseAdapter(SQLiteDatabase db) {
         this.mDb = db;
         this.mContext = GnuCashApplication.getAppContext();
         if (!db.isOpen() || db.isReadOnly())
             throw new IllegalArgumentException("Database not open or is read-only. Require writeable database");
+        createTempView();
+    }
+
+    private void createTempView() {
+        // create a temporary view, combining accounts, transactions and splits
+        mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_split_acct AS SELECT "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_NOTES + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_NOTES + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_CURRENCY + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_UID + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_UID + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_AMOUNT + " , "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS "
+                        + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_NAME + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_NAME + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_CURRENCY + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_PLACEHOLDER + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_PLACEHOLDER + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_COLOR_CODE + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_COLOR_CODE + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_FAVORITE + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FAVORITE + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_FULL_NAME + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_TYPE + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_TYPE + " , "
+                        + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " AS "
+                        + AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
+                        + " FROM " + TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + "=" + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+                        + " , " + AccountEntry.TABLE_NAME + " ON "
+                        + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
+        );
     }
 
 	/**
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 9f6d861b..1d97e7c8 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -303,23 +303,23 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
 
     }
 
-    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
+    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
-        // transactions, splits ON transactions.uid = splits.transaction_uid ,
-        // ( SELECT transactions.uid AS trans_acct_t_uid ,
+        // trans_split_acct ,
+        // ( SELECT transactions_uid AS trans_acct_t_uid ,
         //      SUBSTR (
         //          MIN (
-        //              ( CASE WHEN IFNULL ( splits.memo , '' ) == '' THEN 'a' ELSE 'b' END ) || splits.account_uid
+        //              ( CASE WHEN IFNULL ( splits_memo , '' ) == '' THEN 'a' ELSE 'b' END ) || accounts_uid
         //          ) ,
         //          2
         //      ) as trans_acct_a_uid ,
-        //   TOTAL ( CASE WHEN splits.type = 'DEBIT' THEN splits.amount ELSE - splits.amount END ) AS trans_acct_balance
-        //   FROM transactions, splits ON transactions.uid = splits.transaction_uid GROUP BY transactions.uid ) AS trans_acct ON
-        // trans_acct.trans_acct_t_uid = transactions.uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid ,
-        // accounts AS account2 ON account2.uid = splits.split_account_uid
+        //   TOTAL ( CASE WHEN splits_type = 'DEBIT' THEN splits_amount ELSE - splits_amount END ) AS trans_acct_balance
+        //   FROM trans_split_acct GROUP BY transactions_uid ) AS trans_acct ON
+        // trans_acct.trans_acct_t_uid = transactions_uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid
         //
-        // This is multi table/sub-query join. The third select would pick one Account_UID for each
-        // Transaction, which can be used to order all transactions.
+        // This is multi table/sub-query join. The second select would pick one Account_UID for each
+        // Transaction, which can be used to order all transactions. If possible, account_uid of a split whose
+        // memo is null is select. Transaction balance is also picked out
         // This is used in QIF export, when all transactions are grouped by accounts.
         //
         // As the split memo for the account used for grouping is lost, a split without a split memo
@@ -331,35 +331,24 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
         //
         // account1 provides information for the grouped account. Splits from the grouped account
         // can be eliminated with a WHERE clause. Transactions in QIF can be auto balanced.
-        // account2 provides information for the account associated with the split.
         //
         // Account, transaction and split Information can be retrieve in a single query.
-        //
-        // Another approach is not to group transactions by account, be prefix each transaction with an account.
-        // It is easier and should also work, never tried though.
         // By Yongxin Wang
         return mDb.query(
-                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
-                " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
-                " , ( SELECT " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "." +
+                "trans_split_acct , ( SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
+                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
                 SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
-                SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID +
-                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "." +
-                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "." +
-                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "." +
-                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM " +
-                TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME +
-                " ON " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID +
-                " GROUP BY " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = " +
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " , " +
+                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
+                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
+                " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
+                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = trans_split_acct." +
+                TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , " +
                 AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
-                " = trans_acct.trans_acct_a_uid , " + AccountEntry.TABLE_NAME + " AS account2 ON account2." +
-                AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID,
-                columns, condition, null, null, null , orderBy);
+                " = trans_acct.trans_acct_a_uid",
+                columns, where, whereArgs, null, null , orderBy);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 2634fae1..fe77a9a7 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -27,6 +27,7 @@
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.Account;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -55,27 +56,28 @@ public void generateExport(Writer writer) throws ExporterException {
         try {
             Cursor cursor = transactionsDbAdapter.fetchTransactionsWithSplitsWithTransactionAccount(
                     new String[]{
-                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
-                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
-                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS split_type",
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_MEMO + " AS split_memo",
+                            TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " AS trans_uid",
+                            TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " AS trans_time",
+                            TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_DESCRIPTION + " AS trans_desc",
+                            SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
+                            SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " AS split_type",
+                            SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " AS split_memo",
                             "trans_acct.trans_acct_balance AS trans_acct_balance",
                             "account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
                             "account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
                             "account1." + AccountEntry.COLUMN_CURRENCY + " AS acct1_currency",
                             "account1." + AccountEntry.COLUMN_TYPE + " AS acct1_type",
-                            "account2." + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
+                            AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
                     },
                     // no recurrence transactions
-                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                    TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
                             // in qif, split from the one account entry is not recorded (will be auto balanced)
-                            SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " != account1." + AccountEntry.COLUMN_UID +
+                            AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " != account1." + AccountEntry.COLUMN_UID +
                             (
                             mParameters.shouldExportAllTransactions() ?
-                                    "" : " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + "== 0"
+                                    "" : " AND " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + "== 0"
                             ),
+                    null,
                     // trans_time ASC : put transactions in time order
                     // trans_uid ASC  : put splits from the same transaction together
                    "trans_time ASC, trans_uid ASC"

From e26bc916c719fa35762548fd016c50a3b3ccdf89 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 21 Sep 2014 18:23:23 +0800
Subject: [PATCH 58/68] add temp view trans_extra_info

---
 .../org/gnucash/android/db/DatabaseAdapter.java    | 40 +++++++++++++++++++++-
 .../gnucash/android/db/TransactionsDbAdapter.java  | 39 +++------------------
 .../gnucash/android/export/qif/QifExporter.java    |  2 +-
 3 files changed, 45 insertions(+), 36 deletions(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index a6f379c0..45d79b21 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -78,7 +78,13 @@ public DatabaseAdapter(SQLiteDatabase db) {
     }
 
     private void createTempView() {
-        // create a temporary view, combining accounts, transactions and splits
+        // Create some temporary views. Temporary views only exists in one DB session, and will not
+        // be saved in the DB
+        //
+        // TODO: Useful views should be add to the DB
+        //
+        // create a temporary view, combining accounts, transactions and splits, as this is often used
+        // in the queries
         mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_split_acct AS SELECT "
                         + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS "
                         + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , "
@@ -127,6 +133,38 @@ private void createTempView() {
                         + " , " + AccountEntry.TABLE_NAME + " ON "
                         + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
         );
+
+        // SELECT transactions_uid AS trans_acct_t_uid ,
+        //      SUBSTR (
+        //          MIN (
+        //              ( CASE WHEN IFNULL ( splits_memo , '' ) == '' THEN 'a' ELSE 'b' END ) || accounts_uid
+        //          ) ,
+        //          2
+        //      ) as trans_acct_a_uid ,
+        //   TOTAL ( CASE WHEN splits_type = 'DEBIT' THEN splits_amount ELSE - splits_amount END ) AS trans_acct_balance
+        //   FROM trans_split_acct GROUP BY transactions_uid
+        //
+        // This temporary view would pick one Account_UID for each
+        // Transaction, which can be used to order all transactions. If possible, account_uid of a split whose
+        // memo is null is select.
+        //
+        // Transaction balance is also picked out by this view
+        //
+        // a split without split memo is chosen if possible, in the following manner:
+        //   if the splits memo is null or empty string, attach an 'a' in front of the split account uid,
+        //   if not, attach a 'b' to the split account uid
+        //   pick the minimal value of the modified account uid (one of the ones begins with 'a', if exists)
+        //   use substr to get account uid
+        mDb.execSQL("CREATE TEMP VIEW IF NOT EXISTS trans_extra_info AS SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
+                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
+                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
+                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
+                " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
+        );
     }
 
 	/**
diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index 1d97e7c8..e27d7269 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -305,49 +305,20 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
 
     public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
-        // trans_split_acct ,
-        // ( SELECT transactions_uid AS trans_acct_t_uid ,
-        //      SUBSTR (
-        //          MIN (
-        //              ( CASE WHEN IFNULL ( splits_memo , '' ) == '' THEN 'a' ELSE 'b' END ) || accounts_uid
-        //          ) ,
-        //          2
-        //      ) as trans_acct_a_uid ,
-        //   TOTAL ( CASE WHEN splits_type = 'DEBIT' THEN splits_amount ELSE - splits_amount END ) AS trans_acct_balance
-        //   FROM trans_split_acct GROUP BY transactions_uid ) AS trans_acct ON
-        // trans_acct.trans_acct_t_uid = transactions_uid , accounts AS account1 ON account1.uid = trans_acct.trans_acct_a_uid
+        // trans_split_acct , trans_extra_info ON trans_extra_info.trans_acct_t_uid = transactions_uid ,
+        // accounts AS account1 ON account1.uid = trans_extra_info.trans_acct_a_uid
         //
-        // This is multi table/sub-query join. The second select would pick one Account_UID for each
-        // Transaction, which can be used to order all transactions. If possible, account_uid of a split whose
-        // memo is null is select. Transaction balance is also picked out
-        // This is used in QIF export, when all transactions are grouped by accounts.
-        //
-        // As the split memo for the account used for grouping is lost, a split without a split memo
-        // is chosen if possible, in the following manner:
-        //   if the splits memo is null or empty string, attach an 'a' in front of the split account uid,
-        //   if not, attach a 'b' to the split account uid
-        //   pick the minimal value of the modified account uid (one of the ones begins with 'a', if exists)
-        //   use substr to get account uid
+        // views effectively simplified this query
         //
         // account1 provides information for the grouped account. Splits from the grouped account
         // can be eliminated with a WHERE clause. Transactions in QIF can be auto balanced.
         //
         // Account, transaction and split Information can be retrieve in a single query.
-        // By Yongxin Wang
         return mDb.query(
-                "trans_split_acct , ( SELECT " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
-                " AS trans_acct_t_uid , SUBSTR ( MIN ( ( CASE WHEN IFNULL ( " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_MEMO + " , '' ) == '' THEN 'a' ELSE 'b' END ) || " +
-                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID +
-                " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
-                " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID +
-                " )  AS trans_acct ON trans_acct.trans_acct_t_uid = trans_split_acct." +
+                "trans_split_acct , trans_extra_info ON trans_extra_info.trans_acct_t_uid = trans_split_acct." +
                 TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID + " , " +
                 AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
-                " = trans_acct.trans_acct_a_uid",
+                " = trans_extra_info.trans_acct_a_uid",
                 columns, where, whereArgs, null, null , orderBy);
     }
 
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index fe77a9a7..e6bae5ee 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -62,7 +62,7 @@ public void generateExport(Writer writer) throws ExporterException {
                             SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_AMOUNT + " AS split_amount",
                             SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_TYPE + " AS split_type",
                             SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_MEMO + " AS split_memo",
-                            "trans_acct.trans_acct_balance AS trans_acct_balance",
+                            "trans_extra_info.trans_acct_balance AS trans_acct_balance",
                             "account1." + AccountEntry.COLUMN_UID + " AS acct1_uid",
                             "account1." + AccountEntry.COLUMN_FULL_NAME + " AS acct1_full_name",
                             "account1." + AccountEntry.COLUMN_CURRENCY + " AS acct1_currency",

From 3368d5abd64532b227e667add57145d896303633 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 21 Sep 2014 20:39:32 +0800
Subject: [PATCH 59/68] Export only single currency transacions to QIF

---
 app/src/org/gnucash/android/db/DatabaseAdapter.java     | 4 +++-
 app/src/org/gnucash/android/export/qif/QifExporter.java | 2 ++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/db/DatabaseAdapter.java b/app/src/org/gnucash/android/db/DatabaseAdapter.java
index 45d79b21..24bf926d 100644
--- a/app/src/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/org/gnucash/android/db/DatabaseAdapter.java
@@ -162,7 +162,9 @@ private void createTempView() {
                 " ) , 2 ) AS trans_acct_a_uid , TOTAL ( CASE WHEN " + SplitEntry.TABLE_NAME + "_" +
                 SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN "+ SplitEntry.TABLE_NAME + "_" +
                 SplitEntry.COLUMN_AMOUNT + " ELSE - " + SplitEntry.TABLE_NAME + "_" +
-                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance FROM trans_split_acct " +
+                SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance , COUNT ( DISTINCT " +
+                AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_CURRENCY +
+                " ) AS trans_currency_count FROM trans_split_acct " +
                 " GROUP BY " + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_UID
         );
     }
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index e6bae5ee..78863dd8 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -71,6 +71,8 @@ public void generateExport(Writer writer) throws ExporterException {
                     },
                     // no recurrence transactions
                     TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                            // exclude transactions involving multiple currencies
+                            "trans_extra_info.trans_currency_count = 1 AND " +
                             // in qif, split from the one account entry is not recorded (will be auto balanced)
                             AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_UID + " != account1." + AccountEntry.COLUMN_UID +
                             (

From eb6ad5a3eb776899498fbe4a21f0740df20176af Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Mon, 22 Sep 2014 14:59:13 +0800
Subject: [PATCH 60/68] e.getMessage can be null

---
 app/src/org/gnucash/android/export/ExporterAsyncTask.java | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 796e1b58..674644c0 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -118,14 +118,16 @@ protected Boolean doInBackground(ExportParams... params) {
             }
         } catch (Exception e) {
             e.printStackTrace();
-            Log.e(TAG, e.getMessage());
+            Log.e(TAG, (e.getMessage() == null ? "" : e.getMessage()));
             final String err_msg = e.getLocalizedMessage();
             mContext.runOnUiThread(new Runnable() {
                 @Override
                 public void run() {
                     Toast.makeText(mContext, R.string.toast_export_error,
                             Toast.LENGTH_SHORT).show();
-                    Toast.makeText(mContext, err_msg, Toast.LENGTH_LONG).show();
+                    if (err_msg != null) {
+                        Toast.makeText(mContext, err_msg, Toast.LENGTH_LONG).show();
+                    }
                 }
             });
             return false;

From 358ccbb1360da7977ae0c1a7bc67e85505b328a6 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Mon, 22 Sep 2014 16:13:22 +0800
Subject: [PATCH 61/68] other getMessage calls

---
 app/src/org/gnucash/android/app/GnuCashApplication.java   | 2 +-
 app/src/org/gnucash/android/export/ExporterAsyncTask.java | 2 +-
 app/src/org/gnucash/android/importer/ImportAsyncTask.java | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index e556d9a3..ef3bda82 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -101,7 +101,7 @@ public static String getDefaultCurrency(){
         try { //there are some strange locales out there
             currencyCode = Currency.getInstance(locale).getCurrencyCode();
         } catch (Throwable e) {
-            Log.e(context.getString(R.string.app_name), e.getMessage());
+            Log.e(context.getString(R.string.app_name), "" + e.getMessage());
         } finally {
             currencyCode = prefs.getString(context.getString(R.string.key_default_currency), currencyCode);
         }
diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 674644c0..6aa86c3e 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -118,7 +118,7 @@ protected Boolean doInBackground(ExportParams... params) {
             }
         } catch (Exception e) {
             e.printStackTrace();
-            Log.e(TAG, (e.getMessage() == null ? "" : e.getMessage()));
+            Log.e(TAG, "" + e.getMessage());
             final String err_msg = e.getLocalizedMessage();
             mContext.runOnUiThread(new Runnable() {
                 @Override
diff --git a/app/src/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
index ecc69235..52173029 100644
--- a/app/src/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
@@ -67,7 +67,7 @@ protected Boolean doInBackground(InputStream... inputStreams) {
         } catch (Exception exception){
             exception.printStackTrace();
             final String err_msg = exception.getLocalizedMessage();
-            Log.e(ImportAsyncTask.class.getName(), exception.getMessage());
+            Log.e(ImportAsyncTask.class.getName(), "" + exception.getMessage());
             context.runOnUiThread(new Runnable() {
                 @Override
                 public void run() {

From b636b28373359695d397f2e8fe7b6a2288142dd3 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 22 Sep 2014 23:53:19 +0200
Subject: [PATCH 62/68] Fixed several bugs from crash logs

Fixed: Random crash in transaction delete confirmation dialog
Fixed: Transaction type label word wraps around button - fixes #203
Fixed: Negative sign not displayed for amount when entering a debit in a new transaction
---
 app/res/layout/item_split_entry.xml                 |  2 +-
 .../gnucash/android/importer/ImportAsyncTask.java   |  4 +++-
 .../DeleteAllTransacationsConfirmationDialog.java   |  2 +-
 .../ScheduledTransactionsListFragment.java          | 10 +++++++++-
 .../ui/transaction/TransactionFormFragment.java     | 21 ++++++++++++++++++++-
 .../dialog/SplitEditorDialogFragment.java           |  8 +++-----
 6 files changed, 37 insertions(+), 10 deletions(-)

diff --git a/app/res/layout/item_split_entry.xml b/app/res/layout/item_split_entry.xml
index 363563de..da992141 100644
--- a/app/res/layout/item_split_entry.xml
+++ b/app/res/layout/item_split_entry.xml
@@ -47,7 +47,7 @@ limitations under the License.
 
         <org.gnucash.android.ui.util.TransactionTypeToggleButton android:id="@+id/btn_split_type"
                       android:layout_width="0dp"
-                      android:layout_weight="2"
+                      android:layout_weight="3"
                       android:layout_height="wrap_content"
                       android:textOn="@string/label_debit"
                       android:textOff="@string/label_credit"
diff --git a/app/src/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
index 52173029..e24f376f 100644
--- a/app/src/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/org/gnucash/android/importer/ImportAsyncTask.java
@@ -53,11 +53,13 @@ protected void onPreExecute() {
         progressDialog.setTitle(R.string.title_progress_importing_accounts);
         progressDialog.setIndeterminate(true);
         progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        progressDialog.show();
         if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){
+            //these methods must be called after progressDialog.show()
             progressDialog.setProgressNumberFormat(null);
             progressDialog.setProgressPercentFormat(null);
         }
-        progressDialog.show();
+
     }
 
     @Override
diff --git a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
index 89aca3fb..578e5bf2 100644
--- a/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
+++ b/app/src/org/gnucash/android/ui/settings/DeleteAllTransacationsConfirmationDialog.java
@@ -57,7 +57,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                             public void onClick(DialogInterface dialog, int whichButton) {
                                 GncXmlExporter.createBackup();
 
-                                Context context = getDialog().getContext();
+                                Context context = getActivity();
                                 AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
                                 List<Transaction> openingBalances = new ArrayList<Transaction>();
                                 boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
diff --git a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index ce142492..005a8e92 100644
--- a/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -183,7 +183,15 @@ public void onListItemClick(ListView l, View v, int position, long id) {
             checkbox.setChecked(!checkbox.isChecked());
             return;
         }
-        String accountUID = mTransactionsDbAdapter.getTransaction(id).getSplits().get(0).getAccountUID();
+        Transaction transaction = mTransactionsDbAdapter.getTransaction(id);
+
+        //this should actually never happen, but has happened once. So perform check for the future
+        if (transaction.getSplits().size() == 0){
+            Toast.makeText(getActivity(), "The selected transaction has no splits and cannot be opened", Toast.LENGTH_SHORT).show();
+            return;
+        }
+
+        String accountUID = transaction.getSplits().get(0).getAccountUID();
         openTransactionForEdit(accountUID, mTransactionsDbAdapter.getUID(id));
     }
 
diff --git a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index e8b9b1b3..aa993df4 100644
--- a/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -23,6 +23,7 @@
 import java.util.*;
 
 import android.support.v4.app.FragmentManager;
+import android.text.Editable;
 import android.widget.*;
 import org.gnucash.android.R;
 import org.gnucash.android.db.*;
@@ -473,7 +474,7 @@ private void openSplitEditor(){
 	 * Sets click listeners for the dialog buttons
 	 */
 	private void setListeners() {
-        mAmountInputFormatter = new AmountInputFormatter(mAmountEditText);
+        mAmountInputFormatter = new AmountTextWatcher(mAmountEditText); //new AmountInputFormatter(mAmountEditText);
         mAmountEditText.addTextChangedListener(mAmountInputFormatter);
 
         mOpenSplitsButton.setOnClickListener(new View.OnClickListener() {
@@ -790,6 +791,8 @@ public static String stripCurrencyFormatting(String s){
 		//remove all currency formatting and anything else which is not a number
         String sign = s.trim().substring(0,1);
         String stripped = s.trim().replaceAll("\\D*", "");
+        if (stripped.length() == 0)
+            return "";
         if (sign.equals("+") || sign.equals("-")){
             stripped = sign + stripped;
         }
@@ -814,5 +817,21 @@ public static BigDecimal parseInputToDecimal(String amountString){
 		return amount;
 	}
 
+    private class AmountTextWatcher extends AmountInputFormatter {
 
+        public AmountTextWatcher(EditText amountInput) {
+            super(amountInput);
+        }
+
+        @Override
+        public void afterTextChanged(Editable s) {
+            String value = s.toString();
+            if (mTransactionTypeButton.isChecked()){
+                if (s.charAt(0) != '-'){
+                    s = Editable.Factory.getInstance().newEditable("-" + value);
+                }
+            }
+            super.afterTextChanged(s);
+        }
+    }
 }
diff --git a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
index 02e1e780..09de0d8b 100644
--- a/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
+++ b/app/src/org/gnucash/android/ui/transaction/dialog/SplitEditorDialogFragment.java
@@ -62,7 +62,6 @@
     private Cursor mCursor;
     private SimpleCursorAdapter mCursorAdapter;
     private List<View> mSplitItemViewList;
-    private long mAccountId;
     private String mAccountUID;
 
     private BalanceTextWatcher mBalanceUpdater = new BalanceTextWatcher();
@@ -156,11 +155,10 @@ private void initArgs() {
 
         Bundle args     = getArguments();
         mAccountUID      = ((TransactionsActivity)getActivity()).getCurrentAccountUID();
-        mAccountId     = mAccountsDbAdapter.getID(mAccountUID);
         mBaseAmount     = new BigDecimal(args.getString(UxArgument.AMOUNT_STRING));
 
         String conditions = "(" //+ AccountEntry._ID + " != " + mAccountId + " AND "
-                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(mAccountId)
+                + DatabaseSchema.AccountEntry.COLUMN_CURRENCY + " = '" + mAccountsDbAdapter.getCurrencyCode(mAccountUID)
                 + "' AND " + DatabaseSchema.AccountEntry.COLUMN_UID + " != '" + mAccountsDbAdapter.getGnuCashRootAccountUID()
                 + "' AND " + DatabaseSchema.AccountEntry.COLUMN_PLACEHOLDER + " = 0"
                 + ")";
@@ -196,7 +194,7 @@ public void onClick(View view) {
         updateTransferAccountsList(accountsSpinner);
         accountsSpinner.setOnItemSelectedListener(new TypeButtonLabelUpdater(splitTypeButton));
 
-        Currency accountCurrency = Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountId));
+        Currency accountCurrency = Currency.getInstance(mAccountsDbAdapter.getCurrencyCode(mAccountUID));
         splitCurrencyTextView.setText(accountCurrency.getSymbol());
         splitTypeButton.setAmountFormattingListener(splitAmountEditText, splitCurrencyTextView);
         splitTypeButton.setChecked(mBaseAmount.signum() > 0);
@@ -307,7 +305,7 @@ public void onClick(View view) {
      */
     private void updateTotal(){
         List<Split> splitList   = extractSplitsFromView();
-        String currencyCode     = mAccountsDbAdapter.getCurrencyCode(mAccountId);
+        String currencyCode     = mAccountsDbAdapter.getCurrencyCode(mAccountUID);
         Money splitSum          = Money.createZeroInstance(currencyCode);
 
         for (Split split : splitList) {

From b60a05c00260c5735e446c530d0fcff9d1389829 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 23 Sep 2014 00:17:40 +0200
Subject: [PATCH 63/68] Show appropriate warnings for the different export
 formats in the export dialog

---
 app/res/layout/dialog_export.xml                   |  6 ++++
 app/res/values-de/strings.xml                      |  2 ++
 app/res/values-el/strings.xml                      |  2 ++
 app/res/values-es-rMX/strings.xml                  |  2 ++
 app/res/values-es/strings.xml                      |  2 ++
 app/res/values-fr/strings.xml                      |  2 ++
 app/res/values-hu/strings.xml                      |  2 ++
 app/res/values-it/strings.xml                      |  2 ++
 app/res/values-nb/strings.xml                      |  2 ++
 app/res/values-nl/strings.xml                      |  2 ++
 app/res/values-pt-rBR/strings.xml                  |  2 ++
 app/res/values-ru/strings.xml                      |  2 ++
 app/res/values-zh/strings.xml                      |  2 ++
 app/res/values/strings.xml                         |  2 ++
 .../gnucash/android/app/GnuCashApplication.java    |  5 ++--
 .../android/export/ExportDialogFragment.java       | 34 +++++++++++++++++++---
 16 files changed, 64 insertions(+), 7 deletions(-)

diff --git a/app/res/layout/dialog_export.xml b/app/res/layout/dialog_export.xml
index e032abaa..9ea5bdad 100644
--- a/app/res/layout/dialog_export.xml
+++ b/app/res/layout/dialog_export.xml
@@ -69,6 +69,12 @@
                          android:layout_height="wrap_content"
                          android:text="OFX"/>
         </RadioGroup>
+        <TextView android:id="@+id/export_warning"
+                  android:layout_marginLeft="@dimen/dialog_padding"
+                  android:text="Some format-based export warning"
+                  android:textColor="@color/account_red"
+                  style="@style/TextAppearance.Hint"
+                  android:visibility="gone" />
 
 	    <CheckBox android:id="@+id/checkbox_export_all"
 	        android:layout_width="wrap_content"
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 7d7519ac..496cf559 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -416,4 +416,6 @@
     <string name="summary_save_opening_balances">Mglichkeit aktivieren, den aktuellen Saldo als neuen Anfangsbestand nach dem Lschen der Buchungen zu bernehmen
     </string>
     <string name="title_save_opening_balances">Saldo als neuen Anfangsbestand bernehmen</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index fd98866d..1b9f053d 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -434,4 +434,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 26833c09..0fc3198d 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -419,4 +419,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 73ccf00e..99e67c7c 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -416,4 +416,6 @@
     <string name="summary_save_opening_balances">Seleccionar para guardar el saldo actual (antes de borrar las transacciones) como nuevo saldo de apertura despues de borrar las transacciones
     </string>
     <string name="title_save_opening_balances">Guardar saldos de apertura</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index f5a2d5f8..99b681e7 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -416,4 +416,6 @@
     <string name="summary_save_opening_balances">Permet d\'enregistrer le solde du compte courant (avant la suppression des transactions) comme le nouveau solde d\'ouverture aprs la suppression des transactions
     </string>
     <string name="title_save_opening_balances">Enregistrer les soldes des comptes d\'ouverture</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 2314ab77..8ec09d9a 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -420,4 +420,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index b4882656..71d68d14 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -420,4 +420,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index a0e40336..cc816911 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -416,4 +416,6 @@
     <string name="account_name_equity">Egenkapital</string>
     <string name="summary_save_opening_balances">Merk for  lagre gjeldende konto balanse (fr sletting) som ny inngende balanse (etter sletting av transaksjoner).</string>
     <string name="title_save_opening_balances">Lagre inngende balanser</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index ddc904d0..c3beebcf 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -421,4 +421,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 89c6a37b..56e85b24 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -419,4 +419,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 60783748..b69e83d2 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -420,4 +420,6 @@
     <string name="summary_save_opening_balances">     (  )       
     </string>
     <string name="title_save_opening_balances">   </string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 21ca7414..8f68e059 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -412,4 +412,6 @@
     <string name="account_name_equity"></string>
     <string name="summary_save_opening_balances"></string>
     <string name="title_save_opening_balances"></string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 2c5b8ed5..5c70c985 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -435,4 +435,6 @@
     <string name="summary_save_opening_balances">Enable to save the current account balance (before deleting transactions) as new opening balance after deleting transactions
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
+    <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
+    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
 </resources>
diff --git a/app/src/org/gnucash/android/app/GnuCashApplication.java b/app/src/org/gnucash/android/app/GnuCashApplication.java
index ef3bda82..f4add72a 100644
--- a/app/src/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/org/gnucash/android/app/GnuCashApplication.java
@@ -60,12 +60,11 @@ public static Context getAppContext() {
     /**
      * Returns <code>true</code> if double entry is enabled in the app settings, <code>false</code> otherwise.
      * If the value is not set, the default value can be specified in the parameters.
-     * @param defaultValue Default value to return if double entry is not explicitly set
      * @return <code>true</code> if double entry is enabled, <code>false</code> otherwise
      */
-    public static boolean isDoubleEntryEnabled(boolean defaultValue){
+    public static boolean isDoubleEntryEnabled(){
         SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
-        return sharedPrefs.getBoolean(context.getString(R.string.key_use_double_entry), defaultValue);
+        return sharedPrefs.getBoolean(context.getString(R.string.key_use_double_entry), false);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index b5a23353..4ae49090 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -19,15 +19,18 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.app.DialogFragment;
+import android.text.AndroidCharacter;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.*;
 import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 
 import java.io.File;
 
@@ -64,7 +67,12 @@
 	 * Cancels the export dialog
 	 */
 	Button mCancelButton;
-	
+
+    /**
+     * Text view for showing warnings based on chosen export format
+     */
+    TextView mExportWarningTextView;
+
 	/**
 	 * File path for saving the OFX files
 	 */
@@ -104,12 +112,24 @@ public void onRadioButtonClicked(View view){
         switch (view.getId()){
             case R.id.radio_ofx_format:
                 mExportFormat = ExportFormat.OFX;
+                if (GnuCashApplication.isDoubleEntryEnabled()){
+                    mExportWarningTextView.setText(getActivity().getString(R.string.export_warning_ofx));
+                    mExportWarningTextView.setVisibility(View.VISIBLE);
+                } else {
+                    mExportWarningTextView.setVisibility(View.GONE);
+                }
                 break;
             case R.id.radio_qif_format:
                 mExportFormat = ExportFormat.QIF;
+                //TODO: Also check that there exist transactions with multiple currencies before displaying warning
+                if (GnuCashApplication.isDoubleEntryEnabled()) {
+                    mExportWarningTextView.setText(getActivity().getString(R.string.export_warning_qif));
+                    mExportWarningTextView.setVisibility(View.VISIBLE);
+                } else {
+                    mExportWarningTextView.setVisibility(View.GONE);
+                }
         }
         mFilePath = getActivity().getExternalFilesDir(null) + "/" + Exporter.buildExportFilename(mExportFormat);
-        return;
     }
 
 	@Override
@@ -158,6 +178,8 @@ public void onClick(View v) {
 		
 		mSaveButton.setOnClickListener(new ExportClickListener());
 
+        mExportWarningTextView = (TextView) v.findViewById(R.id.export_warning);
+
         String defaultExportFormat = sharedPrefs.getString(getString(R.string.key_default_export_format), ExportFormat.QIF.name());
         mExportFormat = ExportFormat.valueOf(defaultExportFormat);
         View.OnClickListener clickListener = new View.OnClickListener() {
@@ -168,12 +190,16 @@ public void onClick(View view) {
         };
 
         RadioButton ofxRadioButton = (RadioButton) v.findViewById(R.id.radio_ofx_format);
-        ofxRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name()));
         ofxRadioButton.setOnClickListener(clickListener);
+        if (defaultExportFormat.equalsIgnoreCase(ExportFormat.OFX.name())) {
+            ofxRadioButton.performClick();
+        }
 
         RadioButton qifRadioButton = (RadioButton) v.findViewById(R.id.radio_qif_format);
-        qifRadioButton.setChecked(defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name()));
         qifRadioButton.setOnClickListener(clickListener);
+        if (defaultExportFormat.equalsIgnoreCase(ExportFormat.QIF.name())){
+            qifRadioButton.performClick();
+        }
 	}
 
 

From e476460605b4482ed192f1013a3cf98dbad8eb60 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 23 Sep 2014 09:56:56 +0200
Subject: [PATCH 64/68] Update export warning for QIF

---
 app/res/values-de/strings.xml     | 2 +-
 app/res/values-el/strings.xml     | 2 +-
 app/res/values-es-rMX/strings.xml | 2 +-
 app/res/values-es/strings.xml     | 2 +-
 app/res/values-fr/strings.xml     | 2 +-
 app/res/values-hu/strings.xml     | 2 +-
 app/res/values-it/strings.xml     | 2 +-
 app/res/values-nb/strings.xml     | 2 +-
 app/res/values-nl/strings.xml     | 2 +-
 app/res/values-pt-rBR/strings.xml | 2 +-
 app/res/values-ru/strings.xml     | 2 +-
 app/res/values-zh/strings.xml     | 2 +-
 12 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 496cf559..59a14a91 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -417,5 +417,5 @@
     </string>
     <string name="title_save_opening_balances">Saldo als neuen Anfangsbestand bernehmen</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 1b9f053d..8af91936 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -435,5 +435,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index 0fc3198d..f1461471 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -420,5 +420,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 99e67c7c..1b4b215a 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -417,5 +417,5 @@
     </string>
     <string name="title_save_opening_balances">Guardar saldos de apertura</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 99b681e7..2fb56406 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -417,5 +417,5 @@
     </string>
     <string name="title_save_opening_balances">Enregistrer les soldes des comptes d\'ouverture</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 8ec09d9a..8c2d8aad 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -421,5 +421,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 71d68d14..29d38f64 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -421,5 +421,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index cc816911..8e795256 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -417,5 +417,5 @@
     <string name="summary_save_opening_balances">Merk for  lagre gjeldende konto balanse (fr sletting) som ny inngende balanse (etter sletting av transaksjoner).</string>
     <string name="title_save_opening_balances">Lagre inngende balanser</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index c3beebcf..dc8dc4dc 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -422,5 +422,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 56e85b24..4634d100 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -420,5 +420,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index b69e83d2..aab214b0 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -421,5 +421,5 @@
     </string>
     <string name="title_save_opening_balances">   </string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 8f68e059..0f24237e 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -413,5 +413,5 @@
     <string name="summary_save_opening_balances"></string>
     <string name="title_save_opening_balances"></string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
 </resources>

From 7bdca159a19e091f79dc6dd6974939052c0693da Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 23 Sep 2014 11:08:45 +0200
Subject: [PATCH 65/68] Updated QIF export warning

---
 app/res/values-de/strings.xml     | 2 +-
 app/res/values-el/strings.xml     | 2 +-
 app/res/values-es-rMX/strings.xml | 2 +-
 app/res/values-es/strings.xml     | 2 +-
 app/res/values-fr/strings.xml     | 2 +-
 app/res/values-hu/strings.xml     | 2 +-
 app/res/values-it/strings.xml     | 2 +-
 app/res/values-nb/strings.xml     | 2 +-
 app/res/values-nl/strings.xml     | 2 +-
 app/res/values-pt-rBR/strings.xml | 2 +-
 app/res/values-ru/strings.xml     | 2 +-
 app/res/values-zh/strings.xml     | 2 +-
 app/res/values/strings.xml        | 2 +-
 13 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 59a14a91..41a32aa7 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -417,5 +417,5 @@
     </string>
     <string name="title_save_opening_balances">Saldo als neuen Anfangsbestand bernehmen</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 8af91936..77c47ec9 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -435,5 +435,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index f1461471..b8aa7b9c 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -420,5 +420,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 1b4b215a..5dc7ae19 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -417,5 +417,5 @@
     </string>
     <string name="title_save_opening_balances">Guardar saldos de apertura</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 2fb56406..19738f4b 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -417,5 +417,5 @@
     </string>
     <string name="title_save_opening_balances">Enregistrer les soldes des comptes d\'ouverture</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 8c2d8aad..9736bf03 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -421,5 +421,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 29d38f64..b9c58ced 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -421,5 +421,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 8e795256..1c3f70cd 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -417,5 +417,5 @@
     <string name="summary_save_opening_balances">Merk for  lagre gjeldende konto balanse (fr sletting) som ny inngende balanse (etter sletting av transaksjoner).</string>
     <string name="title_save_opening_balances">Lagre inngende balanser</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index dc8dc4dc..6aefc698 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -422,5 +422,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 4634d100..d41dde59 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -420,5 +420,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index aab214b0..847893ad 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -421,5 +421,5 @@
     </string>
     <string name="title_save_opening_balances">   </string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 0f24237e..9434a861 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -413,5 +413,5 @@
     <string name="summary_save_opening_balances"></string>
     <string name="title_save_opening_balances"></string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">There will be one QIF file per currency in use</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 5c70c985..68fa2e2f 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -436,5 +436,5 @@
     </string>
     <string name="title_save_opening_balances">Save account opening balances</string>
     <string name="export_warning_ofx">OFX does not support double-entry transactions</string>
-    <string name="export_warning_qif">QIF does not support transactions with splits of different currencies</string>
+    <string name="export_warning_qif">A separate QIF file will be generated for each currency in use</string>
 </resources>

From 0ac4f5318aa76eb1d4494eb8ff30aa243c966c77 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 23 Sep 2014 15:13:45 +0200
Subject: [PATCH 66/68] Fixed: transactions created from accounts list view
 have wrong account assigned

---
 app/src/org/gnucash/android/ui/account/AccountsListFragment.java | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
index 158ee5d1..f8ead4fd 100644
--- a/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -673,7 +673,7 @@ public void close() {
         }
 
         @Override
-        public void bindView(View v, Context context, final Cursor cursor) {
+        public void bindView(View v, Context context, Cursor cursor) {
             // perform the default binding
             super.bindView(v, context, cursor);
 
@@ -714,7 +714,6 @@ public void bindView(View v, Context context, final Cursor cursor) {
                     public void onClick(View v) {
                         Intent intent = new Intent(getActivity(), TransactionsActivity.class);
                         intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
-                        String accountUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry.COLUMN_UID));
                         intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, accountUID);
                         getActivity().startActivity(intent);
                     }

From ee0880fc62f96cde24f0e87f88c8f32b4f79663d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 23 Sep 2014 15:41:48 +0200
Subject: [PATCH 67/68] Updated version strings & changelog for v1.5.0-beta1
 release

---
 CHANGELOG.md                      | 25 +++++++++++++++++++++++++
 app/AndroidManifest.xml           |  2 +-
 app/pom.xml                       |  2 +-
 app/res/values-de/strings.xml     | 12 +++++-------
 app/res/values-el/strings.xml     | 12 +++++-------
 app/res/values-es-rMX/strings.xml | 12 +++++-------
 app/res/values-es/strings.xml     | 14 ++++++--------
 app/res/values-fr/strings.xml     | 14 ++++++--------
 app/res/values-hu/strings.xml     | 12 +++++-------
 app/res/values-it/strings.xml     | 12 +++++-------
 app/res/values-nb/strings.xml     | 14 ++++++--------
 app/res/values-nl/strings.xml     | 12 +++++-------
 app/res/values-pt-rBR/strings.xml | 12 +++++-------
 app/res/values-ru/strings.xml     | 14 ++++++--------
 app/res/values-zh/strings.xml     | 12 +++++-------
 app/res/values/strings.xml        | 14 ++++++--------
 integration-tests/pom.xml         |  2 +-
 pom.xml                           |  2 +-
 18 files changed, 99 insertions(+), 100 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5c6e8367..91381016 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,30 @@
 Change Log
 ===============================================================================
+Version 1.5.0 *(2014-09-xx)*
+----------------------------
+* Need for speed! Lots of performance optimizations in the application
+  - Application balances are now computed faster
+  - App loads faster and is more responsive
+  - Faster recording of opening balances before delete operations
+  - Import and export operations rewritten to perform faster and use less resources
+* Fixed: Crash after saving opening balances and trying to create new transactions
+* Fixed: Parent account title color sometimes not propagated to child accounts
+* Fixed: Recurring transactions scheduled but not saved to database during import
+* Fixed: Crash caused by null exception message during import
+* Fixed: Poor word-wrap of transaction type labels
+* Fixed: Amount values not always displaying the correct sign
+* Feature: Select default currency upon first run of application
+* Feature: Creating account hierarchy uses the user currency preference
+* Feature: Support for reading and writing compressed GnuCash XML files.
+* Feature: Set a passcode lock to restrict access to the application
+* Feature: Export a QIF file for transactions of each currency in use  
+* Improved: Increased stability of import/export operations
+* Improved: Exclude multi-currency transactions from QIF exports
+* Improved: Display warnings/limitations of different export formats in the export dialog
+* Improved: Preserve split memos in QIF export (as much as possible)
+* Improved: Child accounts now assigned to account parent upon deletion of account
+* Improved: Descendant accounts cannot be selected as a parent account (no cyclic dependencies)
+
 Version 1.4.3 *(2014-09-09)*
 ----------------------------
 * Fixed: Cannot edit transactions when in single-entry mode
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 8fbc2eb3..69300cd4 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="40"
+    android:versionCode="41"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/pom.xml b/app/pom.xml
index 7f873c84..534877ea 100644
--- a/app/pom.xml
+++ b/app/pom.xml
@@ -22,7 +22,7 @@
     <description>Gnucash Android companion application</description>
 
     <parent>
-        <version>1.4.3-SNAPSHOT</version>
+        <version>1.5.0-SNAPSHOT</version>
         <groupId>org.gnucash.android</groupId>
         <artifactId>gnucash-android-parent</artifactId>
     </parent>
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 41a32aa7..8bb64a17 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -303,13 +303,11 @@
 	<string name="summary_xml_ofx_header">Diese Option aktivieren, wenn Sie die OFX-Dateien fr ein anderes Programm als GnuCash auf dem Desktop exportieren</string>
 	<string name="title_whats_new">Neuigkeiten in dieser Version</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
     </string>
 	<string name="label_dismiss">Schlieen</string>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 77c47ec9..001b3eb8 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -309,13 +309,11 @@
 	<string name="summary_xml_ofx_header">        ,   GnuCash   .</string>
 	<string name="title_whats_new">  </string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss"></string>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index b8aa7b9c..478058cd 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -303,13 +303,11 @@
 	<string name="summary_xml_ofx_header">Active esta opci&#243;n para exportar a otras aplicaciones distintas a GnuCash para escritorio</string>
 	<string name="title_whats_new">&#191;Qu&#233; hay nuevo?</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 5dc7ae19..9ff3b593 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -303,14 +303,12 @@
 	<string name="summary_xml_ofx_header">Active esta opci&#243;n para exportar a otras aplicaciones distintas a GnuCash para escritorio</string>
 	<string name="title_whats_new">Novedades</string>
 	<string name="whats_new">
-        - Crear m&#250;ltiples desgloses por transacci&#243;n\n
-        - Arreglar el c&#225;lculo de saldos de cuentas para los distintos tipos de cuentas\n
-        - Usar etiquetas especificas de cuenta para ABONO/CARGO\n
-        - Copia de seguridad autom&#225;tica antes de las operaciones de borrado\n
-        - Restaurar la copia de seguridad m&#225;s reciente (En Ajustes -> General)\n
-        - Soporte limitado de lectura de transacciones en archivos GnuCash XML\n
-        - Opci&#243; de guardar saldos de apertura antes de borrar transacciones\n
-        - Correci&#243;n de errores y mejoras\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Cerrar</string>
     <string name="toast_transanction_amount_required">Introduzca un importe para guardar la transacci&#243;n</string>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 19738f4b..afa76eda 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -303,14 +303,12 @@
     <string name="summary_xml_ofx_header">Activez cette option lors d\'un export vers une application tierce autre que GnuCash pour PC</string>
     <string name="title_whats_new">Nouveautes</string>
 	<string name="whats_new">
-        - Cration de multiples dcoupes par transactions\n
-        - Correction du calcul des soldes de comptes pour les comptes de diffrents types\n
-        - Utilisation de labels spcifiques pour les comptes CREDIT/DEBITs\n
-        - Sauvegarde automatique des donnes avant la suppression des oprations\n
-        - Restaurer la dernire sauvegarde des donnes (dans Paramtres -> Gnral)\n
-        - Lecture des transactions depuis les fichiers GnuCash XML (support limit)\n
-        - Options pour sauvegarder le solde des comptes avant la suppression des transactions\n
-        - Multiples amliorations et corrections de bugs\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
+        - Multiple bug fixes and improvements\n
 	</string>
     <string name="label_dismiss">Passer</string>
     <string name="toast_transanction_amount_required">Entrez un montant pour sauvegarder la transaction</string>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 9736bf03..34f1c293 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -303,13 +303,11 @@
 	<string name="summary_xml_ofx_header">Enable this option when exporting to third-party application other than GnuCash for desktop</string>
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Dismiss</string>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index b9c58ced..dd4a4b39 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -304,13 +304,11 @@
 	<string name="summary_xml_ofx_header">Abilitare questa opzione quando si esporta verso un\'applicazione diversa da GnuCash versione desktop</string>
 	<string name="title_whats_new">Novit</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Chiudi</string>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 1c3f70cd..edbb061c 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -304,14 +304,12 @@
 	<string name="summary_xml_ofx_header">Velg denne hvis du skal eksportere til annen programvare enn GnuCash for PC.</string>
 	<string name="title_whats_new">Hva er nytt</string>
 	<string name="whats_new">
-        - Lag flere splitter for en transaksjon\n
-        - Rettet kalkulering av balanse for ulike kontoer\n
-        - Bruk konto-spesifikke navn for KREDIT/DEBET\n
-        - Automatisk sikkerhetskopi av database fr sletteoperasjoner\n
-        - Tilbakelegging av siste sikkerhetskopi av databasen (i Innstillinger->Generelt)\n
-        - Les transaksjoner fra GnuCash XML filer (begrenset sttte)\n
-        - Mulighet for  lagre inngende balanser fr sletting av transaksjoner\n
-        - Mange feilrettinger og forbedringer\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Ferdig</string>
     <string name="toast_transanction_amount_required">Oppgi et belp for  lagre transaksjonen</string>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 6aefc698..70159364 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -303,13 +303,11 @@
 	<string name="summary_xml_ofx_header">Schakel deze optie in als u naar een applicatie anders dan GnuCash wil exporteren</string>
 	<string name="title_whats_new">Nieuw sinds de vorige versie</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Wijs af</string>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index d41dde59..06e1aef4 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -302,13 +302,11 @@
 	  <string name="summary_xml_ofx_header">Habilitar essa opo quando estiver exportando para um software terceiro, diferente do GnuCash para desktop</string>
 	  <string name="title_whats_new">O que h de novo</string>
 	  <string name="whats_new">
-          - Create multiple splits per transaction\n
-          - Fixed computation of account balances for different account types\n
-          - Use account-specific labels for CREDIT/DEBITs\n
-          - Automated backup of database before deletion operations\n
-          - Restore most recent backup of database (in Settings -> General)\n
-          - Read transactions from GnuCash XML files (limited support)\n
-          - Option to save opening balances before deleting transactions\n
+          - General resource and performance optimization\n
+          - Faster computation of account balances\n
+          - Set passcode to restrict access to app (in Settings)\n
+          - Export separate QIF files for each currency in use\n
+          - Use currencey settings when creating account hierarchy\n
           - Multiple bug fixes and improvements\n
 	  </string>
 	  <string name="label_dismiss">Descartar</string>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 847893ad..876309c1 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -303,14 +303,12 @@
 	<string name="summary_xml_ofx_header">  ,       GnuCash  </string>
 	<string name="title_whats_new"></string>
 	<string name="whats_new">
-        -   \n
-        -        \n
-        -          \n
-        -       \n
-        -      ( -&gt; )\n
-        -    XML- GnuCash ( )\n
-        -       \n
-        -     \n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
+        - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required"> ,   </string>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 9434a861..23a3a931 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -302,13 +302,11 @@
     <string name="summary_xml_ofx_header">GnuCash</string>
     <string name="title_whats_new"></string>
     <string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
     <string name="label_dismiss"></string>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 68fa2e2f..8dbce224 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.4.3</string>
+    <string name="app_version_name">1.5.0-beta1</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
@@ -314,13 +314,11 @@
 	<string name="summary_xml_ofx_header">Enable this option when exporting to third-party application other than GnuCash for desktop</string>
 	<string name="title_whats_new">What\'s New</string>
 	<string name="whats_new">
-        - Create multiple splits per transaction\n
-        - Fixed computation of account balances for different account types\n
-        - Use account-specific labels for CREDIT/DEBITs\n
-        - Automated backup of database before deletion operations\n
-        - Restore most recent backup of database (in Settings -> General)\n
-        - Read transactions from GnuCash XML files (limited support)\n
-        - Option to save opening balances before deleting transactions\n
+        - General resource and performance optimization\n
+        - Faster computation of account balances\n
+        - Set passcode to restrict access to app (in Settings)\n
+        - Export separate QIF files for each currency in use\n
+        - Use currencey settings when creating account hierarchy\n
         - Multiple bug fixes and improvements\n
 	</string>
 	<string name="label_dismiss">Dismiss</string>
diff --git a/integration-tests/pom.xml b/integration-tests/pom.xml
index cba85f06..7bfb0512 100644
--- a/integration-tests/pom.xml
+++ b/integration-tests/pom.xml
@@ -17,7 +17,7 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
     <parent>
-		<version>1.4.3-SNAPSHOT</version>
+		<version>1.5.0-SNAPSHOT</version>
 		<groupId>org.gnucash.android</groupId>
 		<artifactId>gnucash-android-parent</artifactId>
 	</parent>
diff --git a/pom.xml b/pom.xml
index aa8501da..bd8b298e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -17,7 +17,7 @@
 
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
-	<version>1.4.3-SNAPSHOT</version>
+	<version>1.5.0-SNAPSHOT</version>
     <groupId>org.gnucash.android</groupId>
     <artifactId>gnucash-android-parent</artifactId>
     <name>GnuCash Android parent</name>

From 47c2784c671b8b8ef3d56dc8fc545822aba67042 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 1 Oct 2014 10:25:11 +0200
Subject: [PATCH 68/68] Updated version strings for v1.5.0 release

---
 CHANGELOG.md               | 2 +-
 app/AndroidManifest.xml    | 2 +-
 app/res/values/strings.xml | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 91381016..df104618 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,6 @@
 Change Log
 ===============================================================================
-Version 1.5.0 *(2014-09-xx)*
+Version 1.5.0 *(2014-10-01)*
 ----------------------------
 * Need for speed! Lots of performance optimizations in the application
   - Application balances are now computed faster
diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index 69300cd4..9985b6da 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="41"
+    android:versionCode="42"
     android:versionName="@string/app_version_name" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16"/>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 8dbce224..594b7a41 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -17,7 +17,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
-    <string name="app_version_name">1.5.0-beta1</string>
+    <string name="app_version_name">1.5.0</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
     <string name="info_details">Info</string>
