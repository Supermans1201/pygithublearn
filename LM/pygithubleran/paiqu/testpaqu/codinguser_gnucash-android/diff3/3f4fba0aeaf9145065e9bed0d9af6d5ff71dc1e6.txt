From 3f4fba0aeaf9145065e9bed0d9af6d5ff71dc1e6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Wed, 12 Apr 2017 17:46:26 +0200
Subject: [PATCH] Use Commodity instead of Currency in
 TransferFundsDialogFragment

Commodity should be used in place of Currency, as it's a superset. This
is just a step in the migration process.
---
 .../dialog/TransferFundsDialogFragment.java        | 24 +++++++++-------------
 1 file changed, 10 insertions(+), 14 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index 234dd892..55bccd9c 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -48,7 +48,6 @@
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
 import java.text.ParseException;
-import java.util.Currency;
 
 import butterknife.BindView;
 import butterknife.ButterKnife;
@@ -78,7 +77,7 @@
     @BindView(R.id.btn_save) Button mSaveButton;
     @BindView(R.id.btn_cancel) Button mCancelButton;
     Money mOriginAmount;
-    String mTargetCurrencyCode;
+    private Commodity mTargetCommodity;
 
     Money mConvertedAmount;
     OnTransferFundsListener mOnTransferFundsListener;
@@ -87,7 +86,7 @@ public static TransferFundsDialogFragment getInstance(Money transactionAmount, S
                                                           OnTransferFundsListener transferFundsListener){
         TransferFundsDialogFragment fragment = new TransferFundsDialogFragment();
         fragment.mOriginAmount = transactionAmount;
-        fragment.mTargetCurrencyCode = Currency.getInstance(targetCurrencyCode).getCurrencyCode();
+        fragment.mTargetCommodity = CommoditiesDbAdapter.getInstance().getCommodity(targetCurrencyCode);
         fragment.mOnTransferFundsListener = transferFundsListener;
         return fragment;
     }
@@ -101,18 +100,17 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         TransactionsActivity.displayBalance(mStartAmountLabel, mOriginAmount);
         String fromCurrencyCode = mOriginAmount.getCommodity().getCurrencyCode();
         mFromCurrencyLabel.setText(fromCurrencyCode);
-        mToCurrencyLabel.setText(mTargetCurrencyCode);
-        mConvertedAmountCurrencyLabel.setText(mTargetCurrencyCode);
+        mToCurrencyLabel.setText(mTargetCommodity.getCurrencyCode());
+        mConvertedAmountCurrencyLabel.setText(mTargetCommodity.getCurrencyCode());
 
         mSampleExchangeRate.setText(String.format(getString(R.string.sample_exchange_rate),
                                                   fromCurrencyCode,
-                                                  mTargetCurrencyCode));
+                                                  mTargetCommodity.getCurrencyCode()));
         final InputLayoutErrorClearer textChangeListener = new InputLayoutErrorClearer();
 
         CommoditiesDbAdapter commoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
         String commodityUID = commoditiesDbAdapter.getCommodityUID(fromCurrencyCode);
-        Commodity currencyCommodity = commoditiesDbAdapter.getCommodity(mTargetCurrencyCode);
-        String currencyUID = currencyCommodity.getUID();
+        String currencyUID = mTargetCommodity.getUID();
         PricesDbAdapter pricesDbAdapter = PricesDbAdapter.getInstance();
         Pair<Long, Long> pricePair = pricesDbAdapter.getPrice(commodityUID, currencyUID);
 
@@ -127,7 +125,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             BigDecimal denominator = new BigDecimal(pricePair.second);
             // convertedAmount = mOriginAmount * numerator / denominator
             BigDecimal convertedAmount = mOriginAmount.asBigDecimal().multiply(numerator)
-                .divide(denominator, currencyCommodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
+                .divide(denominator, mTargetCommodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN);
             DecimalFormat formatter = (DecimalFormat) NumberFormat.getNumberInstance();
             mConvertedAmountInput.setText(formatter.format(convertedAmount));
         }
@@ -197,9 +195,8 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
     private void transferFunds() {
         Price price = null;
 
-        CommoditiesDbAdapter commoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
         String originCommodityUID = mOriginAmount.getCommodity().getUID();
-        String targetCommodityUID = commoditiesDbAdapter.getCommodityUID(mTargetCurrencyCode);
+        String targetCommodityUID = mTargetCommodity.getUID();
 
         if (mExchangeRateRadioButton.isChecked()) {
             BigDecimal rate;
@@ -211,8 +208,7 @@ private void transferFunds() {
             }
             price = new Price(originCommodityUID, targetCommodityUID, rate);
 
-            Commodity targetCommodity = Commodity.getInstance(mTargetCurrencyCode);
-            mConvertedAmount = mOriginAmount.multiply(rate).withCurrency(targetCommodity);
+            mConvertedAmount = mOriginAmount.multiply(rate).withCurrency(mTargetCommodity);
         }
 
         if (mConvertedAmountRadioButton.isChecked()) {
@@ -223,7 +219,7 @@ private void transferFunds() {
                 mConvertedAmountInputLayout.setError(getString(R.string.error_invalid_amount));
                 return;
             }
-            mConvertedAmount = new Money(amount, Commodity.getInstance(mTargetCurrencyCode));
+            mConvertedAmount = new Money(amount, mTargetCommodity);
 
             price = new Price(originCommodityUID, targetCommodityUID);
             // fractions cannot be exactly represented by BigDecimal.
