From 06875fff12298695b54218a026aad08d24cf18e7 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 6 Dec 2013 15:12:12 +0100
Subject: [PATCH] Fixed: QIF export always exports all transactions (not only
 new ones) Fixed: Exported QIF does not contain transaction description
 Improved: Internationalized imbalance account name Improved: Reliability of
 export. Progress dialog now displayed during export

---
 app/AndroidManifest.xml                            |   2 +-
 app/res/values-de/strings.xml                      |   3 +
 app/res/values-el/strings.xml                      |   3 +
 app/res/values-es-rMX/strings.xml                  |   3 +
 app/res/values-es/strings.xml                      |   3 +
 app/res/values-fr/strings.xml                      |   3 +
 app/res/values-hu/strings.xml                      |   3 +
 app/res/values-it/strings.xml                      |   3 +
 app/res/values-nb/strings.xml                      |   3 +
 app/res/values-nl/strings.xml                      |   3 +
 app/res/values-pt-rBR/strings.xml                  |   3 +
 app/res/values-ru/strings.xml                      |   3 +
 app/res/values-zh/strings.xml                      |   3 +
 app/res/values/strings.xml                         |   3 +
 app/src/org/gnucash/android/data/Account.java      |  16 +-
 app/src/org/gnucash/android/data/Transaction.java  |  34 +--
 .../android/export/ExportDialogFragment.java       | 256 ++--------------
 .../org/gnucash/android/export/ExportParams.java   | 152 ++++++++++
 .../org/gnucash/android/export/ExporterTask.java   | 323 +++++++++++++++++++++
 .../gnucash/android/export/qif/QifExporter.java    |   2 +-
 .../org/gnucash/android/export/qif/QifHelper.java  |   4 +-
 21 files changed, 561 insertions(+), 267 deletions(-)
 create mode 100644 app/src/org/gnucash/android/export/ExportParams.java
 create mode 100644 app/src/org/gnucash/android/export/ExporterTask.java

diff --git a/app/AndroidManifest.xml b/app/AndroidManifest.xml
index fa43fb54..979451b0 100644
--- a/app/AndroidManifest.xml
+++ b/app/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="org.gnucash.android"
-    android:versionCode="20"
+    android:versionCode="21"
     android:versionName="1.2.6" >
 
     <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="15"/>
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index eda08890..f6ecd346 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -343,6 +343,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Ausgleichskonto</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index ffb01bb3..9d407c54 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -357,6 +357,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index de572f7c..29350cb1 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -341,6 +341,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index 31d76e91..eb3f7e23 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -341,6 +341,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index fa7ca90a..f7b2f3a0 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -339,6 +339,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index 888d3009..cf65d343 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -342,6 +342,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index f085d6e8..2a90f25c 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -342,6 +342,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index 1223ff16..601ad206 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -344,6 +344,9 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index 330cbeec..42ec42b0 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -343,6 +343,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index f04863c5..851de696 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -341,6 +341,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 63083f66..05da2196 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -339,6 +339,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index 95b5e775..fdbb7605 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -516,6 +516,9 @@
     <string name="title_default_export_format">Default Export Format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index ca20308e..7e883163 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -540,6 +540,9 @@
     <string name="key_default_export_format">default_export_format</string>
     <string name="summary_default_export_format">File format to use by default when exporting transactions</string>
     <string name="menu_export_transactions">Export transactions...</string>
+    <!-- This should be the same name used by GnuCash desktop for imbalance accounts -->
+    <string name="imbalance_account_name">Imbalance</string>
+    <string name="title_progress_exporting_transactions">Exporting transactions</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index 31e29397..82df0fd5 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -24,6 +24,7 @@
 import java.util.UUID;
 
 import android.content.Context;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifHelper;
@@ -402,7 +403,7 @@ public static OfxAccountType convertToOfxAccountType(AccountType accountType){
 	 * @param doc XML DOM document for the OFX data
 	 * @param parent Parent node to which to add this account's transactions in XML
 	 */
-	public void toOfx(Document doc, Element parent, boolean allTransactions){
+	public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		Element currency = doc.createElement("CURDEF");
 		currency.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));						
 		
@@ -459,7 +460,7 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 		bankTransactionsList.appendChild(dtend);
 		
 		for (Transaction transaction : mTransactionsList) {
-			if (!allTransactions && transaction.isExported())
+			if (!exportAllTransactions && transaction.isExported())
 				continue;
 			
 			bankTransactionsList.appendChild(transaction.toOfx(doc, mUID));
@@ -478,14 +479,14 @@ public void toOfx(Document doc, Element parent, boolean allTransactions){
 
     /**
      * Exports the account info and transactions in the QIF format
-     * @param exportAll Flag to determine whether to export all transactions, or only new transactions since last export
+     * @param exportAllTransactions Flag to determine whether to export all transactions, or only new transactions since last export
      * @return QIF representation of the account information
      */
-    public String toQIF(boolean exportAll, Context context) {
+    public String toQIF(boolean exportAllTransactions) {
         StringBuffer accountQifBuffer = new StringBuffer();
         final String newLine = "\n";
 
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
         String fullyQualifiedAccountName = accountsDbAdapter.getFullyQualifiedAccountName(mUID);
         accountsDbAdapter.close();
 
@@ -502,7 +503,10 @@ public String toQIF(boolean exportAll, Context context) {
             if (!transaction.getAccountUID().equals(mUID))
                 continue;
 
-            accountQifBuffer.append(transaction.toQIF(context) + newLine);
+            if (!exportAllTransactions && transaction.isExported())
+                continue;
+
+            accountQifBuffer.append(transaction.toQIF() + newLine);
         }
         return accountQifBuffer.toString();
     }
diff --git a/app/src/org/gnucash/android/data/Transaction.java b/app/src/org/gnucash/android/data/Transaction.java
index b10b3f82..17349499 100644
--- a/app/src/org/gnucash/android/data/Transaction.java
+++ b/app/src/org/gnucash/android/data/Transaction.java
@@ -434,33 +434,29 @@ public Element toOfx(Document doc, String accountUID){
 
     /**
      * Builds a QIF entry representing this transaction
-     * @param context Application context
      * @return String QIF representation of this transaction
      */
-    public String toQIF(Context context){
+    public String toQIF(){
         final String newLine = "\n";
 
-        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(context);
+        AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(GnuCashApplication.getAppContext());
+
+        //all transactions are double transactions
+        String splitAccountFullName = QifHelper.getImbalanceAccountName(mAmount.getCurrency());
+        if (mDoubleEntryAccountUID != null && mDoubleEntryAccountUID.length() > 0){
+            splitAccountFullName = accountsDbAdapter.getFullyQualifiedAccountName(mDoubleEntryAccountUID);
+        }
 
         StringBuffer transactionQifBuffer = new StringBuffer();
-        transactionQifBuffer.append(QifHelper.DATE_PREFIX + QifHelper.formatDate(mTimestamp) + newLine);
+        transactionQifBuffer.append(QifHelper.DATE_PREFIX).append(QifHelper.formatDate(mTimestamp)).append(newLine);
+        transactionQifBuffer.append(QifHelper.MEMO_PREFIX).append(mName).append(newLine);
 
-        if (mDoubleEntryAccountUID != null && !mDoubleEntryAccountUID.isEmpty()){
-            String splitAccountFullName = accountsDbAdapter.getFullyQualifiedAccountName(mDoubleEntryAccountUID);
-            transactionQifBuffer.append(QifHelper.SPLIT_CATEGORY_PREFIX + splitAccountFullName + newLine);
-            if (mDescription != null || mDescription.isEmpty()){
-                transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX + mDescription + newLine);
-            }
-            transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX + mAmount.asString() + newLine);
-        } else {
-            transactionQifBuffer.append(QifHelper.AMOUNT_PREFIX + mAmount.asString() + newLine);
-            if (mDescription != null && !mDescription.isEmpty()){
-                transactionQifBuffer.append(QifHelper.MEMO_PREFIX + mDescription + newLine);
-            }
-            transactionQifBuffer.append(QifHelper.CATEGORY_PREFIX + QifHelper.getImbalanceAccountName(mAmount.getCurrency()) + newLine);
+        transactionQifBuffer.append(QifHelper.SPLIT_CATEGORY_PREFIX).append(splitAccountFullName).append(newLine);
+        if (mDescription != null && mDescription.length() > 0){
+            transactionQifBuffer.append(QifHelper.SPLIT_MEMO_PREFIX).append(mDescription).append(newLine);
         }
-
-        transactionQifBuffer.append(QifHelper.ENTRY_TERMINATOR + newLine);
+        transactionQifBuffer.append(QifHelper.SPLIT_AMOUNT_PREFIX).append(mAmount.asString()).append(newLine);
+        transactionQifBuffer.append(QifHelper.ENTRY_TERMINATOR).append(newLine);
 
         accountsDbAdapter.close();
         return transactionQifBuffer.toString();
diff --git a/app/src/org/gnucash/android/export/ExportDialogFragment.java b/app/src/org/gnucash/android/export/ExportDialogFragment.java
index fde0a93e..77bb5b67 100644
--- a/app/src/org/gnucash/android/export/ExportDialogFragment.java
+++ b/app/src/org/gnucash/android/export/ExportDialogFragment.java
@@ -16,55 +16,23 @@
 
 package org.gnucash.android.export;
 
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.nio.channels.FileChannel;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.OutputKeys;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-
-import android.widget.*;
-import org.gnucash.android.R;
-import org.gnucash.android.export.ExportFormat;
-import org.gnucash.android.export.ofx.OfxExporter;
-import org.gnucash.android.export.qif.QifExporter;
-import org.gnucash.android.ui.accounts.AccountsActivity;
-import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.ProcessingInstruction;
-
 import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.net.Uri;
 import android.os.Bundle;
-import android.os.Environment;
 import android.preference.PreferenceManager;
 import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.*;
+import org.gnucash.android.R;
+
+import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
 
 /**
  * Dialog fragment for exporting account information as OFX files.
@@ -122,72 +90,16 @@
 
 		@Override
 		public void onClick(View v) {
-            boolean exportAll = mExportAllCheckBox.isChecked();
-            try {
-                switch (mExportFormat) {
-                    case QIF: {
-                        QifExporter qifExporter = new QifExporter(getActivity(), exportAll);
-                        String qif = qifExporter.generateQIF();
-
-                        writeQifExternalStorage(qif);
-                    }
-                    break;
-
-                    case OFX: {
-                        Document document = exportOfx(exportAll);
-                        writeOfxToExternalStorage(document);
-                    }
-                    break;
-                }
-            } catch (Exception e) {
-                Log.e(TAG, e.getMessage());
-                Toast.makeText(getActivity(), R.string.error_exporting,
-                        Toast.LENGTH_LONG).show();
-                dismiss();
-                return;
-            }
-
-
+            ExportParams exportParameters = new ExportParams(mExportFormat);
+            exportParameters.setExportAllTransactions(mExportAllCheckBox.isChecked());
+            exportParameters.setTargetFilepath(mFilePath);
             int position = mDestinationSpinner.getSelectedItemPosition();
-			switch (position) {
-			case 0:					
-				shareFile(mFilePath);				
-				break;
+            exportParameters.setExportTarget(position == 0 ? ExportParams.ExportTarget.SHARING : ExportParams.ExportTarget.SD_CARD);
+            exportParameters.setDeleteTransactionsAfterExport(mDeleteAllCheckBox.isChecked());
+
+            Log.i(TAG, "Commencing async export of transactions");
+            new ExporterTask(getActivity()).execute(exportParameters);
 
-			case 1:				
-				File src = new File(mFilePath);
-				new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-				File dst = new File(Environment.getExternalStorageDirectory() + "/gnucash/" + buildExportFilename(mExportFormat));
-				
-				try {
-					copyFile(src, dst);
-				} catch (IOException e) {
-					Toast.makeText(getActivity(), 
-							getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(), 
-							Toast.LENGTH_LONG).show();		
-					Log.e(TAG, e.getMessage());
-					break;
-				}
-				
-				//file already exists, just let the user know
-				Toast.makeText(getActivity(), 
-						getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(), 
-						Toast.LENGTH_LONG).show();					
-				break;
-				
-			default:
-				break;
-			}
-			
-			if (mDeleteAllCheckBox.isChecked()){
-				Fragment currentFragment = getActivity().getSupportFragmentManager()
-						.findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
-				TransactionsDeleteConfirmationDialog alertFragment = 
-						TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
-				alertFragment.setTargetFragment(currentFragment, 0);
-				alertFragment.show(getActivity().getSupportFragmentManager(), "transactions_delete_confirmation_dialog");
-			}
-			
 			dismiss();
 		}
 		
@@ -268,45 +180,8 @@ public void onClick(View view) {
         qifRadioButton.setOnClickListener(clickListener);
 	}
 
-    private void writeQifExternalStorage(String qif) throws IOException {
-        File file = new File(mFilePath);
-
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-        writer.write(qif);
-
-        writer.flush();
-    }
 
 	/**
-	 * Writes the OFX document <code>doc</code> to external storage
-	 * @param doc Document containing OFX file data
-	 * @throws IOException if file could not be saved
-	 */
-	private void writeOfxToExternalStorage(Document doc) throws IOException{
-		File file = new File(mFilePath);
-		
-		BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
-		boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(getActivity())
-				.getBoolean(getString(R.string.key_xml_ofx_header), false);
-
-		//if we want SGML OFX headers, write first to string and then prepend header
-		if (useXmlHeader){
-			write(doc, writer, false);
-		} else {			
-			Node ofxNode = doc.getElementsByTagName("OFX").item(0);
-			StringWriter stringWriter = new StringWriter();
-			write(ofxNode, stringWriter, true);
-			
-			StringBuffer stringBuffer = new StringBuffer(OfxExporter.OFX_SGML_HEADER);
-			stringBuffer.append('\n');
-			writer.write(stringBuffer.toString() + stringWriter.toString());
-		}
-		
-		writer.flush();
-		writer.close();
-	}
-	
-	/**
 	 * Callback for when the activity chooser dialog is completed
 	 */
 	@Override
@@ -319,52 +194,8 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
 		}
 	}
 	
-	/**
-	 * Starts an intent chooser to allow the user to select an activity to receive
-	 * the exported OFX file
-	 * @param path String path to the file on disk
-	 */
-	private void shareFile(String path){
-		String defaultEmail = PreferenceManager.getDefaultSharedPreferences(getActivity())
-												.getString(getString(R.string.key_default_export_email), null);
-		Intent shareIntent = new Intent(Intent.ACTION_SEND);
-		shareIntent.setType("application/xml");
-		shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://"+ path));
-		shareIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.title_export_email));
-		if (defaultEmail != null && defaultEmail.trim().length() > 0){
-			shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
-		}			
-		SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
-		
-		shareIntent.putExtra(Intent.EXTRA_TEXT, getString(R.string.description_export_email) 
-							+ " " + formatter.format(new Date(System.currentTimeMillis())));
-		startActivity(Intent.createChooser(shareIntent, getString(R.string.title_share_ofx_with)));	
-	}
-	
-	/**
-	 * Copies a file from <code>src</code> to <code>dst</code>
-	 * @param src Absolute path to the source file
-	 * @param dst Absolute path to the destination file 
-	 * @throws IOException if the file could not be copied
-	 */
-	public static void copyFile(File src, File dst) throws IOException
-	{
-		//TODO: Make this asynchronous at some time, t in the future.
-	    FileChannel inChannel = new FileInputStream(src).getChannel();
-	    FileChannel outChannel = new FileOutputStream(dst).getChannel();
-	    try
-	    {
-	        inChannel.transferTo(0, inChannel.size(), outChannel);
-	    }
-	    finally
-	    {
-	        if (inChannel != null)
-	            inChannel.close();
-	        if (outChannel != null)
-	            outChannel.close();
-	    }
-	}
-	
+
+
 	/**
 	 * Builds a file name based on the current time stamp for the exported file
 	 * @return String containing the file name
@@ -384,58 +215,5 @@ public static String buildExportFilename(ExportFormat format){
         }
 		return filename;
 	}
-	
-	/**
-	 * Exports transactions in the database to the OFX format.
-	 * The accounts are written to a DOM document and returned
-	 * @param exportAll Flag to export all transactions or only the new ones since last export
-	 * @return DOM {@link Document} containing the OFX file information
-	 * @throws ParserConfigurationException
-	 */
-	protected Document exportOfx(boolean exportAll) throws ParserConfigurationException{		
-		DocumentBuilderFactory docFactory = DocumentBuilderFactory
-				.newInstance();
-		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
-
-		Document document = docBuilder.newDocument();
-		Element root = document.createElement("OFX");
-		
-		ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxExporter.OFX_HEADER);
-		document.appendChild(pi);		
-		document.appendChild(root);
-		
-		OfxExporter exporter = new OfxExporter(getActivity(), exportAll);
-		exporter.toOfx(document, root);
-		
-		return document;
-	}
-	
-	/**
-	 * Writes out the document held in <code>node</code> to <code>outputWriter</code>
-	 * @param node {@link Node} containing the OFX document structure. Usually the parent node
-	 * @param outputWriter {@link Writer} to use in writing the file to stream
-     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
-	 */
-	public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
-		try {
-			TransformerFactory transformerFactory = TransformerFactory
-					.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			DOMSource source = new DOMSource(node);
-			StreamResult result = new StreamResult(outputWriter);
-			
-			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-			if (omitXmlDeclaration) {
-				transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
-			}
-			
-			transformer.transform(source, result);
-		} catch (TransformerConfigurationException txconfigException) {
-			txconfigException.printStackTrace();
-		} catch (TransformerException tfException) {
-			tfException.printStackTrace();
-		}
-	}
 }
 
diff --git a/app/src/org/gnucash/android/export/ExportParams.java b/app/src/org/gnucash/android/export/ExportParams.java
new file mode 100644
index 00000000..6ad6c496
--- /dev/null
+++ b/app/src/org/gnucash/android/export/ExportParams.java
@@ -0,0 +1,152 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+/**
+ * Encapsulation of the parameters used for exporting transactions.
+ * The parameters are determined by the user in the export dialog and are then transmitted to the asynchronous task which
+ * actually performs the export.
+ * @see org.gnucash.android.export.ExportDialogFragment
+ * @see org.gnucash.android.export.ExporterTask
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class ExportParams {
+    /**
+     * Options for the destination of the exported transctions file.
+     * It could be stored on the {@link #SD_CARD} or exported through another program via {@link #SHARING}
+     */
+    public enum ExportTarget {SD_CARD, SHARING};
+
+    /**
+     * Format to use for the exported transactions
+     * By default, the {@link ExportFormat#QIF} format is used
+     */
+    private ExportFormat mExportFormat      = ExportFormat.QIF;
+
+    /**
+     * Flag to determine if all transactions (including previously exported ones) should be exported
+     * By default only new transactions since the last export will be exported.
+     */
+    private boolean mExportAllTransactions  = false;
+
+    /**
+     * Flag to determine if all transactions should be deleted after exporting is complete
+     * By default no transactions are deleted
+     */
+    private boolean mDeleteTransactionsAfterExport = false;
+
+    /**
+     * Destination for the exported transactions
+     */
+    private ExportTarget mExportTarget      = ExportTarget.SHARING;
+
+    /**
+     * File path for the internal saving of transactions before determining export destination.
+     */
+    private String mTargetFilepath;
+
+    /**
+     * Creates a new set of paramters and specifies the export format
+     * @param format Format to use when exporting the transactions
+     */
+    public ExportParams(ExportFormat format){
+        mExportFormat = format;
+    }
+
+    /**
+     * Return the format used for exporting
+     * @return {@link ExportFormat}
+     */
+    public ExportFormat getExportFormat() {
+        return mExportFormat;
+    }
+
+    /**
+     * Set the export format
+     * @param exportFormat {@link ExportFormat}
+     */
+    public void setExportFormat(ExportFormat exportFormat) {
+        this.mExportFormat = exportFormat;
+    }
+
+    /**
+     * Returns flag whether all transactions should be exported, or only new ones since last export
+     * @return <code>true</code> if all transactions should be exported, <code>false</code> otherwise
+     */
+    public boolean shouldExportAllTransactions() {
+        return mExportAllTransactions;
+    }
+
+    /**
+     * Sets flag for exporting all transactions or only new transactions since last export
+     * @param exportAll Boolean flag
+     */
+    public void setExportAllTransactions(boolean exportAll) {
+        this.mExportAllTransactions = exportAll;
+    }
+
+    /**
+     * Returns flag whether transactions should be deleted after export
+     * @return <code>true</code> if all transactions will be deleted, <code>false</code> otherwise
+     */
+    public boolean shouldDeleteTransactionsAfterExport() {
+        return mDeleteTransactionsAfterExport;
+    }
+
+    /**
+     * Set flag to delete transactions after exporting is complete
+     * @param deleteTransactions SEt to <code>true</code> if transactions should be deleted, false if not
+     */
+    public void setDeleteTransactionsAfterExport(boolean deleteTransactions) {
+        this.mDeleteTransactionsAfterExport = deleteTransactions;
+    }
+
+    /**
+     * Get the target for the exported file
+     * @return {@link org.gnucash.android.export.ExportParams.ExportTarget}
+     */
+    public ExportTarget getExportTarget() {
+        return mExportTarget;
+    }
+
+    /**
+     * Set the target for the exported transactions
+     * @param mExportTarget Target for exported transactions
+     */
+    public void setExportTarget(ExportTarget mExportTarget) {
+        this.mExportTarget = mExportTarget;
+    }
+
+    /**
+     * Returns the internal target file path for the exported transactions.
+     * This file path is not accessible outside the context of the application
+     * @return String path to exported transactions
+     */
+    public String getTargetFilepath() {
+        return mTargetFilepath;
+    }
+
+    /**
+     * Sets target file path for transactions in private application storage
+     * @param mTargetFilepath String path to file
+     */
+    public void setTargetFilepath(String mTargetFilepath) {
+        this.mTargetFilepath = mTargetFilepath;
+    }
+
+}
diff --git a/app/src/org/gnucash/android/export/ExporterTask.java b/app/src/org/gnucash/android/export/ExporterTask.java
new file mode 100644
index 00000000..304ba494
--- /dev/null
+++ b/app/src/org/gnucash/android/export/ExporterTask.java
@@ -0,0 +1,323 @@
+/*
+ * Copyright (c) 2013 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.export;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.preference.PreferenceManager;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.util.Log;
+import android.widget.Toast;
+import org.gnucash.android.R;
+import org.gnucash.android.export.ofx.OfxExporter;
+import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.ui.accounts.AccountsActivity;
+import org.gnucash.android.ui.transactions.TransactionsDeleteConfirmationDialog;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.ProcessingInstruction;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.*;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.*;
+import java.nio.channels.FileChannel;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+/**
+ * Asynchronous task for exporting transactions.
+ *
+ * @author Ngewi Fet <ngewif@gmail.com>
+ */
+public class ExporterTask extends AsyncTask<ExportParams, Void, Boolean> {
+    /**
+     * App context
+     */
+    private final Context mContext;
+
+    private ProgressDialog mProgressDialog;
+
+    /**
+     * Log tag
+     */
+    public static final String TAG = "ExporterTask";
+
+    /**
+     * Export parameters
+     */
+    private ExportParams mExportParams;
+
+    public ExporterTask(Context context){
+        this.mContext = context;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+        mProgressDialog = new ProgressDialog(mContext);
+        mProgressDialog.setTitle(R.string.title_progress_exporting_transactions);
+        mProgressDialog.setIndeterminate(true);
+        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        mProgressDialog.show();
+    }
+
+    /**
+     * Generates the appropriate exported transactions file for the given parameters
+     * @param params Export parameters
+     * @return <code>true</code> if export was successful, <code>false</code> otherwise
+     */
+    @Override
+    protected Boolean doInBackground(ExportParams... params) {
+        mExportParams = params[0];
+        boolean exportAllTransactions = mExportParams.shouldExportAllTransactions();
+        try {
+            switch (mExportParams.getExportFormat()) {
+                case QIF: {
+                    QifExporter qifExporter = new QifExporter(mContext, exportAllTransactions);
+                    String qif = qifExporter.generateQIF();
+
+                    writeQifExternalStorage(qif);
+                }
+                return true;
+
+                case OFX: {
+                    Document document = exportOfx(exportAllTransactions);
+                    writeOfxToExternalStorage(document);
+                }
+                return true;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            Log.e(TAG, e.getMessage());
+            Toast.makeText(mContext, R.string.error_exporting,
+                    Toast.LENGTH_LONG).show();
+        };
+        return false;
+    }
+
+    /**
+     * Transmits the exported transactions to the designated location, either SD card or third-party application
+     * @param exportResult Result of background export execution
+     */
+    @Override
+    protected void onPostExecute(Boolean exportResult) {
+        mProgressDialog.dismiss();
+
+        if (!exportResult){
+            Toast.makeText(mContext,
+                    mContext.getString(R.string.toast_error_exporting),
+                    Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        switch (mExportParams.getExportTarget()) {
+            case SHARING:
+                shareFile(mExportParams.getTargetFilepath());
+                break;
+
+            case SD_CARD:
+                File src = new File(mExportParams.getTargetFilepath());
+                new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
+                File dst = new File(Environment.getExternalStorageDirectory()
+                        + "/gnucash/" + ExportDialogFragment.buildExportFilename(mExportParams.getExportFormat()));
+
+                try {
+                    copyFile(src, dst);
+                } catch (IOException e) {
+                    Toast.makeText(mContext,
+                            mContext.getString(R.string.toast_error_exporting_ofx) + dst.getAbsolutePath(),
+                            Toast.LENGTH_LONG).show();
+                    Log.e(TAG, e.getMessage());
+                    break;
+                }
+
+                //file already exists, just let the user know
+                Toast.makeText(mContext,
+                        mContext.getString(R.string.toast_ofx_exported_to) + dst.getAbsolutePath(),
+                        Toast.LENGTH_LONG).show();
+                break;
+
+            default:
+                break;
+        }
+
+        if (mExportParams.shouldDeleteTransactionsAfterExport()){
+            android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity)mContext).getSupportFragmentManager();
+            Fragment currentFragment = fragmentManager
+                    .findFragmentByTag(AccountsActivity.FRAGMENT_ACCOUNTS_LIST);
+            TransactionsDeleteConfirmationDialog alertFragment =
+                    TransactionsDeleteConfirmationDialog.newInstance(R.string.title_confirm_delete, 0);
+            alertFragment.setTargetFragment(currentFragment, 0);
+
+            alertFragment.show(fragmentManager, "transactions_delete_confirmation_dialog");
+        }
+
+    }
+
+
+    /**
+     * Exports transactions in the database to the OFX format.
+     * The accounts are written to a DOM document and returned
+     * @param exportAll Flag to export all transactions or only the new ones since last export
+     * @return DOM {@link Document} containing the OFX file information
+     * @throws javax.xml.parsers.ParserConfigurationException
+     */
+    protected Document exportOfx(boolean exportAll) throws ParserConfigurationException {
+        DocumentBuilderFactory docFactory = DocumentBuilderFactory
+                .newInstance();
+        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
+
+        Document document = docBuilder.newDocument();
+        Element root = document.createElement("OFX");
+
+        ProcessingInstruction pi = document.createProcessingInstruction("OFX", OfxExporter.OFX_HEADER);
+        document.appendChild(pi);
+        document.appendChild(root);
+
+        OfxExporter exporter = new OfxExporter(mContext, exportAll);
+        exporter.toOfx(document, root);
+
+        return document;
+    }
+
+    /**
+     * Writes out the String containing the exported transaction in QIF format to disk
+     * @param qif String containing exported transactions
+     * @throws IOException
+     */
+    private void writeQifExternalStorage(String qif) throws IOException {
+        File file = new File(mExportParams.getTargetFilepath());
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        writer.write(qif);
+
+        writer.flush();
+    }
+
+    /**
+     * Writes the OFX document <code>doc</code> to external storage
+     * @param doc Document containing OFX file data
+     * @throws IOException if file could not be saved
+     */
+    private void writeOfxToExternalStorage(Document doc) throws IOException{
+        File file = new File(mExportParams.getTargetFilepath());
+
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
+        boolean useXmlHeader = PreferenceManager.getDefaultSharedPreferences(mContext)
+                .getBoolean(mContext.getString(R.string.key_xml_ofx_header), false);
+
+        //if we want SGML OFX headers, write first to string and then prepend header
+        if (useXmlHeader){
+            write(doc, writer, false);
+        } else {
+            Node ofxNode = doc.getElementsByTagName("OFX").item(0);
+            StringWriter stringWriter = new StringWriter();
+            write(ofxNode, stringWriter, true);
+
+            StringBuffer stringBuffer = new StringBuffer(OfxExporter.OFX_SGML_HEADER);
+            stringBuffer.append('\n');
+            writer.write(stringBuffer.toString() + stringWriter.toString());
+        }
+
+        writer.flush();
+        writer.close();
+    }
+
+    /**
+     * Starts an intent chooser to allow the user to select an activity to receive
+     * the exported OFX file
+     * @param path String path to the file on disk
+     */
+    private void shareFile(String path){
+        String defaultEmail = PreferenceManager.getDefaultSharedPreferences(mContext)
+                .getString(mContext.getString(R.string.key_default_export_email), null);
+        Intent shareIntent = new Intent(Intent.ACTION_SEND);
+        shareIntent.setType("application/xml");
+        shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://" + path));
+        shareIntent.putExtra(Intent.EXTRA_SUBJECT, mContext.getString(R.string.title_export_email));
+        if (defaultEmail != null && defaultEmail.trim().length() > 0){
+            shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
+        }
+        SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
+
+        shareIntent.putExtra(Intent.EXTRA_TEXT, mContext.getString(R.string.description_export_email)
+                + " " + formatter.format(new Date(System.currentTimeMillis())));
+        mContext.startActivity(Intent.createChooser(shareIntent, mContext.getString(R.string.title_share_ofx_with)));
+    }
+
+    /**
+     * Copies a file from <code>src</code> to <code>dst</code>
+     * @param src Absolute path to the source file
+     * @param dst Absolute path to the destination file
+     * @throws IOException if the file could not be copied
+     */
+    public static void copyFile(File src, File dst) throws IOException
+    {
+        //TODO: Make this asynchronous at some time, t in the future.
+        FileChannel inChannel = new FileInputStream(src).getChannel();
+        FileChannel outChannel = new FileOutputStream(dst).getChannel();
+        try
+        {
+            inChannel.transferTo(0, inChannel.size(), outChannel);
+        }
+        finally
+        {
+            if (inChannel != null)
+                inChannel.close();
+            if (outChannel != null)
+                outChannel.close();
+        }
+    }
+
+    /**
+     * Writes out the document held in <code>node</code> to <code>outputWriter</code>
+     * @param node {@link Node} containing the OFX document structure. Usually the parent node
+     * @param outputWriter {@link Writer} to use in writing the file to stream
+     * @param omitXmlDeclaration Flag which causes the XML declaration to be omitted
+     */
+    public void write(Node node, Writer outputWriter, boolean omitXmlDeclaration){
+        try {
+            TransformerFactory transformerFactory = TransformerFactory
+                    .newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            DOMSource source = new DOMSource(node);
+            StreamResult result = new StreamResult(outputWriter);
+
+            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
+            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+            if (omitXmlDeclaration) {
+                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
+            }
+
+            transformer.transform(source, result);
+        } catch (TransformerConfigurationException txconfigException) {
+            txconfigException.printStackTrace();
+        } catch (TransformerException tfException) {
+            tfException.printStackTrace();
+        }
+    }
+}
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index e6cd8163..35f8c557 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -32,7 +32,7 @@ public String generateQIF(){
             if (account.getTransactionCount() == 0)
                 continue;
 
-            qifBuffer.append(account.toQIF(mExportAll, mContext) + "\n");
+            qifBuffer.append(account.toQIF(mExportAll) + "\n");
 
             //mark as exported
             transactionsDbAdapter.markAsExported(account.getUID());
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index e8fd1f99..0068a1e9 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -1,5 +1,7 @@
 package org.gnucash.android.export.qif;
 
+import org.gnucash.android.R;
+import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.data.Account;
 
 import java.text.SimpleDateFormat;
@@ -69,6 +71,6 @@ public static String getQifHeader(Account.AccountType accountType){
      */
     public static String getImbalanceAccountName(Currency currency){
         //TODO: localize this in the future
-        return "Imbalance-" + currency.getCurrencyCode();
+        return GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currency.getCurrencyCode();
     }
 }
