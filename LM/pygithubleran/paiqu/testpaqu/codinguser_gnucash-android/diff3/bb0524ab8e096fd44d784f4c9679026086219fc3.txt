From bb0524ab8e096fd44d784f4c9679026086219fc3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Tue, 17 Jan 2017 20:41:59 +0100
Subject: [PATCH] Use Commodity instead of Currency in
 getOrCreateImbalanceAccountUID

Commodity should be used in place of Currency, as it's a superset. This
is just a step in the migration process.
---
 .../org/gnucash/android/test/ui/ExportTransactionsTest.java   |  4 ++--
 .../java/org/gnucash/android/test/ui/OwnCloudExportTest.java  |  4 +---
 .../org/gnucash/android/db/adapter/AccountsDbAdapter.java     | 11 +++++------
 .../org/gnucash/android/db/adapter/TransactionsDbAdapter.java |  3 ++-
 .../android/ui/transaction/TransactionFormFragment.java       |  4 ++--
 .../gnucash/android/test/unit/db/AccountsDbAdapterTest.java   | 10 +++++-----
 6 files changed, 17 insertions(+), 19 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index c641bce1..cba7a8e4 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -61,7 +61,6 @@
 import org.junit.runners.MethodSorters;
 
 import java.io.File;
-import java.util.Currency;
 import java.util.List;
 
 import static android.support.test.espresso.Espresso.onView;
@@ -133,7 +132,8 @@ public void setUp() throws Exception {
         Split split = new Split(new Money("8.99", currencyCode), account.getUID());
 		split.setMemo("Hawaii is the best!");
 		transaction.addSplit(split);
-		transaction.addSplit(split.createPair(mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode))));
+		transaction.addSplit(split.createPair(
+				mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Commodity.DEFAULT_COMMODITY)));
 		account.addTransaction(transaction);
 
 		mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
index c40414e8..b37d6117 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/OwnCloudExportTest.java
@@ -49,8 +49,6 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.MethodSorters;
 
-import java.util.Currency;
-
 import static android.support.test.InstrumentationRegistry.getInstrumentation;
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.action.ViewActions.clearText;
@@ -132,7 +130,7 @@ public void setUp() throws Exception {
         Split split = new Split(new Money("11.11", currencyCode), account.getUID());
         transaction.addSplit(split);
         transaction.addSplit(split.createPair(
-                mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode))));
+                mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Commodity.DEFAULT_COMMODITY)));
         account.addTransaction(transaction);
 
         mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 0a33d1d9..cc27e47f 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -581,12 +581,11 @@ public AccountType getAccountType(long accountId){
     /**
      * Retrieves the unique ID of the imbalance account for a particular currency (creates the imbalance account
      * on demand if necessary)
-     * @param currency Currency for the imbalance account
+     * @param commodity Commodity for the imbalance account
      * @return String unique ID of the account
      */
-    public String getOrCreateImbalanceAccountUID(Currency currency){
-        String imbalanceAccountName = getImbalanceAccountName(currency);
-        Commodity commodity = mCommoditiesDbAdapter.getCommodity(currency.getCurrencyCode());
+    public String getOrCreateImbalanceAccountUID(Commodity commodity){
+        String imbalanceAccountName = getImbalanceAccountName(commodity);
         String uid = findAccountUidByFullName(imbalanceAccountName);
         if (uid == null){
             Account account = new Account(imbalanceAccountName, commodity);
@@ -605,7 +604,7 @@ public String getOrCreateImbalanceAccountUID(Currency currency){
      * <p>This method will not create the imbalance account if it doesn't exist</p>
      * @param currency Currency for the imbalance account
      * @return GUID of the account or null if the account doesn't exist yet
-     * @see #getOrCreateImbalanceAccountUID(java.util.Currency)
+     * @see #getOrCreateImbalanceAccountUID(Commodity)
      */
     public String getImbalanceAccountUID(Currency currency){
         String imbalanceAccountName = getImbalanceAccountName(currency);
@@ -619,7 +618,7 @@ public String getImbalanceAccountUID(Currency currency){
      *
      * @param commodity Commodity for the imbalance account
      * @return GUID of the account or null if the account doesn't exist yet
-     * @see #getOrCreateImbalanceAccountUID(java.util.Currency)
+     * @see #getOrCreateImbalanceAccountUID(Commodity)
      */
     public String getImbalanceAccountUID(Commodity commodity){
         String imbalanceAccountName = getImbalanceAccountName(commodity);
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
index 4facc734..e1cc41a8 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
@@ -105,7 +105,8 @@ public void addRecord(@NonNull Transaction transaction, UpdateMethod updateMetho
         try {
             Split imbalanceSplit = transaction.createAutoBalanceSplit();
             if (imbalanceSplit != null){
-                String imbalanceAccountUID = new AccountsDbAdapter(mDb, this).getOrCreateImbalanceAccountUID(transaction.getCurrency());
+                String imbalanceAccountUID = new AccountsDbAdapter(mDb, this)
+                        .getOrCreateImbalanceAccountUID(transaction.getCommodity());
                 imbalanceSplit.setAccountUID(imbalanceAccountUID);
             }
             super.addRecord(transaction, updateMethod);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index e2e2c7ba..3567658e 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -744,8 +744,8 @@ private void setSelectedTransferAccount(long accountId){
             long transferAcctId = mTransferAccountSpinner.getSelectedItemId();
             transferAcctUID = mAccountsDbAdapter.getUID(transferAcctId);
         } else {
-            String baseCurrencyCode = mTransactionsDbAdapter.getAccountCurrencyCode(mAccountUID);
-            transferAcctUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(baseCurrencyCode));
+            Commodity baseCommodity = mAccountsDbAdapter.getRecord(mAccountUID).getCommodity();
+            transferAcctUID = mAccountsDbAdapter.getOrCreateImbalanceAccountUID(baseCommodity);
         }
         return transferAcctUID;
     }
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index 243c3bd0..20ec3971 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -15,9 +15,7 @@
  */
 package org.gnucash.android.test.unit.db;
 
-import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.v7.preference.PreferenceManager;
 
 import org.assertj.core.data.Index;
 import org.gnucash.android.BuildConfig;
@@ -60,7 +58,6 @@
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.util.ArrayList;
-import java.util.Currency;
 import java.util.List;
 
 import javax.xml.parsers.ParserConfigurationException;
@@ -77,8 +74,9 @@
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
+    private CommoditiesDbAdapter mCommoditiesDbAdapter;
 
-	@Before
+    @Before
 	public void setUp() throws Exception {
         initAdapters(null);
 	}
@@ -93,12 +91,14 @@ private void initAdapters(String bookUID){
             mSplitsDbAdapter = SplitsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
+            mCommoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
         } else {
             DatabaseHelper databaseHelper = new DatabaseHelper(GnuCashApplication.getAppContext(), bookUID);
             SQLiteDatabase db = databaseHelper.getWritableDatabase();
             mSplitsDbAdapter = new SplitsDbAdapter(db);
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, mSplitsDbAdapter);
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
+            mCommoditiesDbAdapter = new CommoditiesDbAdapter(db);
             BooksDbAdapter.getInstance().setActive(bookUID);
         }
     }
@@ -423,7 +423,7 @@ public void shouldReassignDescendantAccounts(){
     public void shouldCreateImbalanceAccountOnDemand(){
         assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(1L);
 
-        Currency usd = Currency.getInstance("USD");
+        Commodity usd = mCommoditiesDbAdapter.getCommodity("USD");
         String imbalanceUID = mAccountsDbAdapter.getImbalanceAccountUID(usd);
         assertThat(imbalanceUID).isNull();
         assertThat(mAccountsDbAdapter.getRecordsCount()).isEqualTo(1L);
