From fa02d8ea9a16e97ae716dde03406be6727ce0b82 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Tue, 22 Dec 2015 16:48:37 +0100
Subject: [PATCH 1/4] Fix NullPointerException in AccountsActivityTest.

It seems test classes using ActivityInstrumentationTestCase2 get their
static members cleared on super.tearDown(). This was making some tests
fail with NullPointerException.

See http://stackoverflow.com/questions/6634360/activityinstrumentationtestcase2-and-use-of-static-finals-fields-become-null-af
---
 .../java/org/gnucash/android/test/ui/AccountsActivityTest.java       | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index b087fe24..ea7d66d1 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -84,8 +84,9 @@
 
 @RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
-	private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
-    private static final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
+    private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
+    // Don't add static here, otherwise it gets set to null by super.tearDown()
+    private final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
 	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
     public static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
     public static final String TEST_DB_NAME = "test_gnucash_db.sqlite";

From fc7f724f02a03d284969f9d674af9970f911a1bd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Tue, 22 Dec 2015 17:57:42 +0100
Subject: [PATCH 2/4] Add test to check the test fixture has been set up
 properly.

See https://developer.android.com/training/activity-testing/activity-basic-testing.html#preconditions
---
 .../java/org/gnucash/android/test/ui/AccountsActivityTest.java | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index ea7d66d1..5600ea90 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -129,6 +129,16 @@ public void setUp() throws Exception {
         refreshAccountsList();
 	}
 
+    @Test
+    public void testPreconditions() {
+        assertNotNull(mAcccountsActivity);
+        assertNotNull(mDbHelper);
+        assertNotNull(mDb);
+        assertNotNull(mSplitsDbAdapter);
+        assertNotNull(mTransactionsDbAdapter);
+        assertNotNull(DUMMY_ACCOUNT_CURRENCY);
+    }
+
     /**
      * Prevents the first-run dialogs (Whats new, Create accounts etc) from being displayed when testing
      * @param context Application context

From 3fd6a0f00fa872569dd3ea5eb6dcd283b23656e0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Tue, 22 Dec 2015 18:16:46 +0100
Subject: [PATCH 3/4] Apply code inspector suggestions.

---
 .../android/test/ui/AccountsActivityTest.java      | 41 ++++++++++++----------
 1 file changed, 22 insertions(+), 19 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 5600ea90..e69080cd 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -16,11 +16,13 @@
 
 package org.gnucash.android.test.ui;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences.Editor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
+import android.os.Build;
 import android.preference.PreferenceManager;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.espresso.Espresso;
@@ -57,7 +59,6 @@
 import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
-import java.util.Currency;
 import java.util.List;
 
 import static android.support.test.espresso.Espresso.onData;
@@ -82,13 +83,14 @@
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 
+
 @RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
     private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
     // Don't add static here, otherwise it gets set to null by super.tearDown()
     private final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
 	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
-    public static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
+    private static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
     public static final String TEST_DB_NAME = "test_gnucash_db.sqlite";
 
     private DatabaseHelper mDbHelper;
@@ -96,7 +98,7 @@
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
-    private AccountsActivity mAcccountsActivity;
+    private AccountsActivity mAccountsActivity;
 
     public AccountsActivityTest() {
 		super(AccountsActivity.class);
@@ -107,10 +109,10 @@ public void setUp() throws Exception {
         super.setUp();
         injectInstrumentation(InstrumentationRegistry.getInstrumentation());
         preventFirstRunDialogs(getInstrumentation().getTargetContext());
-        mAcccountsActivity = getActivity();
+        mAccountsActivity = getActivity();
 
         String activeBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
-        mDbHelper = new DatabaseHelper(mAcccountsActivity, activeBookUID);
+        mDbHelper = new DatabaseHelper(mAccountsActivity, activeBookUID);
         try {
             mDb = mDbHelper.getWritableDatabase();
         } catch (SQLException e) {
@@ -131,7 +133,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testPreconditions() {
-        assertNotNull(mAcccountsActivity);
+        assertNotNull(mAccountsActivity);
         assertNotNull(mDbHelper);
         assertNotNull(mDb);
         assertNotNull(mSplitsDbAdapter);
@@ -159,9 +161,10 @@ public static void preventFirstRunDialogs(Context context) {
     }
 
 
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public void testDisplayAccountsList(){
-        AccountsActivity.createDefaultAccounts("EUR", mAcccountsActivity);
-        mAcccountsActivity.recreate();
+        AccountsActivity.createDefaultAccounts("EUR", mAccountsActivity);
+        mAccountsActivity.recreate();
 
         refreshAccountsList();
         sleep(1000);
@@ -227,7 +230,7 @@ public void testChangeParentAccount() {
         refreshAccountsList();
 
         onView(withText(accountName)).perform(click());
-        openActionBarOverflowOrOptionsMenu(mAcccountsActivity);
+        openActionBarOverflowOrOptionsMenu(mAccountsActivity);
         onView(withText(R.string.title_edit_account)).perform(click());
         onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
         Espresso.closeSoftKeyboard();
@@ -303,7 +306,7 @@ public void editingAccountShouldNotDeleteTransactions(){
 
         Account account = new Account("Transfer Account");
         account.setCommodity(Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode()));
-        Transaction transaction = new Transaction("Simple trxn");
+        Transaction transaction = new Transaction("Simple transaction");
         transaction.setCurrencyCode(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode());
         Split split = new Split(new Money(BigDecimal.TEN, DUMMY_ACCOUNT_CURRENCY), account.getUID());
         transaction.addSplit(split);
@@ -350,7 +353,7 @@ public void testDeleteSimpleAccount() {
 //        onView(withId(R.id.btn_save)).perform(click());
 
         //should throw expected exception
-        mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);;
+        mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
     }
 
 	//TODO: Test import of account file
@@ -363,7 +366,7 @@ public void testIntentAccountCreation(){
         intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
         intent.setType(Account.MIME_TYPE);
 
-        new AccountCreator().onReceive(mAcccountsActivity, intent);
+        new AccountCreator().onReceive(mAccountsActivity, intent);
 
 		Account account = mAccountsDbAdapter.getRecord("intent-account");
 		assertThat(account).isNotNull();
@@ -375,28 +378,29 @@ public void testIntentAccountCreation(){
     /**
      * Tests that the setup wizard is displayed on first run
      */
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     @Test
     public void shouldShowWizardOnFirstRun() throws Throwable {
-        PreferenceManager.getDefaultSharedPreferences(mAcccountsActivity)
+        PreferenceManager.getDefaultSharedPreferences(mAccountsActivity)
                 .edit()
-                .remove(mAcccountsActivity.getString(R.string.key_first_run))
+                .remove(mAccountsActivity.getString(R.string.key_first_run))
                 .commit();
 
         runTestOnUiThread(new Runnable() {
             @Override
             public void run() {
-                mAcccountsActivity.recreate();
+                mAccountsActivity.recreate();
             }
         });
 
         //check that wizard is shown
-        onView(withText(mAcccountsActivity.getString(R.string.title_setup_gnucash)))
+        onView(withText(mAccountsActivity.getString(R.string.title_setup_gnucash)))
                 .check(matches(isDisplayed()));
     }
 
 	@After
 	public void tearDown() throws Exception {
-        mAcccountsActivity.finish();
+        mAccountsActivity.finish();
 		super.tearDown();
 	}
 
@@ -408,13 +412,12 @@ private void refreshAccountsList(){
             runTestOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    Fragment fragment = mAcccountsActivity.getCurrentAccountListFragment();
+                    Fragment fragment = mAccountsActivity.getCurrentAccountListFragment();
                     ((AccountsListFragment) fragment).refresh();
                 }
             });
         } catch (Throwable throwable) {
             System.err.println("Failed to refresh fragment");
         }
-
     }
 }

From 65782662b465a5ac2e63c7d35fa0b2b728cdd3d0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Tue, 22 Dec 2015 18:24:05 +0100
Subject: [PATCH 4/4] Fix mixed use of tabs and spaces for indenting.

---
 .../android/test/ui/AccountsActivityTest.java      | 58 +++++++++++-----------
 1 file changed, 29 insertions(+), 29 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index e69080cd..2b63b732 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -89,7 +89,7 @@
     private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
     // Don't add static here, otherwise it gets set to null by super.tearDown()
     private final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
-	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
+    private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
     private static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
     public static final String TEST_DB_NAME = "test_gnucash_db.sqlite";
 
@@ -101,11 +101,11 @@
     private AccountsActivity mAccountsActivity;
 
     public AccountsActivityTest() {
-		super(AccountsActivity.class);
-	}
+        super(AccountsActivity.class);
+    }
 
     @Before
-	public void setUp() throws Exception {
+    public void setUp() throws Exception {
         super.setUp();
         injectInstrumentation(InstrumentationRegistry.getInstrumentation());
         preventFirstRunDialogs(getInstrumentation().getTargetContext());
@@ -124,12 +124,12 @@ public void setUp() throws Exception {
         mAccountsDbAdapter      = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
         mAccountsDbAdapter.deleteAllRecords(); //clear the data
 
-		Account account = new Account(DUMMY_ACCOUNT_NAME, new CommoditiesDbAdapter(mDb).getCommodity(DUMMY_ACCOUNT_CURRENCY_CODE));
+        Account account = new Account(DUMMY_ACCOUNT_NAME, new CommoditiesDbAdapter(mDb).getCommodity(DUMMY_ACCOUNT_CURRENCY_CODE));
         account.setUID(DUMMY_ACCOUNT_UID);
-		mAccountsDbAdapter.addRecord(account);
+        mAccountsDbAdapter.addRecord(account);
 
         refreshAccountsList();
-	}
+    }
 
     @Test
     public void testPreconditions() {
@@ -195,7 +195,7 @@ public void testSearchAccounts(){
      * Tests that an account can be created successfully and that the account list is sorted alphabetically.
      */
     @Test
-	public void testCreateAccount(){
+    public void testCreateAccount(){
         onView(allOf(isDisplayed(), withId(R.id.fab_create_account))).perform(click());
 
         String NEW_ACCOUNT_NAME = "A New Account";
@@ -211,15 +211,15 @@ public void testCreateAccount(){
 
         onView(withId(R.id.menu_save)).perform(click());
 
-		List<Account> accounts = mAccountsDbAdapter.getAllRecords();
+        List<Account> accounts = mAccountsDbAdapter.getAllRecords();
         assertThat(accounts).isNotNull();
         assertThat(accounts).hasSize(2);
-		Account newestAccount = accounts.get(0); //because of alphabetical sorting
+        Account newestAccount = accounts.get(0); //because of alphabetical sorting
 
-		assertThat(newestAccount.getName()).isEqualTo(NEW_ACCOUNT_NAME);
-		assertThat(newestAccount.getCurrency().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
+        assertThat(newestAccount.getName()).isEqualTo(NEW_ACCOUNT_NAME);
+        assertThat(newestAccount.getCurrency().getCurrencyCode()).isEqualTo(Money.DEFAULT_CURRENCY_CODE);
         assertThat(newestAccount.isPlaceholderAccount()).isTrue();
-	}
+    }
 
     @Test
     public void testChangeParentAccount() {
@@ -280,8 +280,8 @@ public void shouldHideParentAccountViewWhenNoParentsExist(){
     }
 
     @Test
-	public void testEditAccount(){
-		String editedAccountName = "Edited Account";
+    public void testEditAccount(){
+        String editedAccountName = "Edited Account";
         sleep(2000);
         onView(withId(R.id.options_menu)).perform(click());
         onView(withText(R.string.title_edit_account)).perform(click());
@@ -292,12 +292,12 @@ public void testEditAccount(){
 
         onView(withId(R.id.menu_save)).perform(click());
 
-		List<Account> accounts = mAccountsDbAdapter.getAllRecords();
-		Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
+        List<Account> accounts = mAccountsDbAdapter.getAllRecords();
+        Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
 
         assertThat(latest.getName()).isEqualTo(editedAccountName);
         assertThat(latest.getCurrency().getCurrencyCode()).isEqualTo(DUMMY_ACCOUNT_CURRENCY_CODE);
-	}
+    }
 
     @Test
     public void editingAccountShouldNotDeleteTransactions(){
@@ -340,7 +340,7 @@ private void sleep(long millis) {
 
     //TODO: Add test for moving content of accounts before deleting it
     @Test(expected = IllegalArgumentException.class)
-	public void testDeleteSimpleAccount() {
+    public void testDeleteSimpleAccount() {
         sleep(2000);
         onView(withId(R.id.options_menu)).perform(click());
         onView(withText(R.string.menu_delete)).perform(click());
@@ -356,11 +356,11 @@ public void testDeleteSimpleAccount() {
         mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
     }
 
-	//TODO: Test import of account file
+    //TODO: Test import of account file
     //TODO: test settings activity
     @Test
-	public void testIntentAccountCreation(){
-		Intent intent = new Intent(Intent.ACTION_INSERT);
+    public void testIntentAccountCreation(){
+        Intent intent = new Intent(Intent.ACTION_INSERT);
         intent.putExtra(Intent.EXTRA_TITLE, "Intent Account");
         intent.putExtra(Intent.EXTRA_UID, "intent-account");
         intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
@@ -368,12 +368,12 @@ public void testIntentAccountCreation(){
 
         new AccountCreator().onReceive(mAccountsActivity, intent);
 
-		Account account = mAccountsDbAdapter.getRecord("intent-account");
-		assertThat(account).isNotNull();
+        Account account = mAccountsDbAdapter.getRecord("intent-account");
+        assertThat(account).isNotNull();
         assertThat(account.getName()).isEqualTo("Intent Account");
         assertThat(account.getUID()).isEqualTo("intent-account");
         assertThat(account.getCurrency().getCurrencyCode()).isEqualTo("EUR");
-	}
+    }
 
     /**
      * Tests that the setup wizard is displayed on first run
@@ -398,11 +398,11 @@ public void run() {
                 .check(matches(isDisplayed()));
     }
 
-	@After
-	public void tearDown() throws Exception {
+    @After
+    public void tearDown() throws Exception {
         mAccountsActivity.finish();
-		super.tearDown();
-	}
+        super.tearDown();
+    }
 
     /**
      * Refresh the account list fragment
