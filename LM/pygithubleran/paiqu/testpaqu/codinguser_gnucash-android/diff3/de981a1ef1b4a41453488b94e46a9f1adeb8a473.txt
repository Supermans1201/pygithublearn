From de981a1ef1b4a41453488b94e46a9f1adeb8a473 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 20 Dec 2013 13:03:55 +0100
Subject: [PATCH] Implemented setting account color from new account fragment
 Added color picker with a set of 28 colors to pick from Improved:
 Sub-accounts default to the same type as parent

---
 .../ic_colorpicker_swatch_selected.png             | Bin 0 -> 2414 bytes
 .../ic_colorpicker_swatch_selected.png             | Bin 0 -> 1662 bytes
 .../ic_colorpicker_swatch_selected.png             | Bin 0 -> 3241 bytes
 app/res/drawable/color_picker_swatch.xml           |  16 ++
 app/res/drawable/color_square.xml                  |  16 ++
 app/res/layout/color_picker_dialog.xml             |  45 +++++
 app/res/layout/color_picker_swatch.xml             |  28 ++++
 app/res/layout/fragment_new_account.xml            |  26 ++-
 app/res/values-de/strings.xml                      |   3 +
 app/res/values-el/strings.xml                      |   3 +
 app/res/values-es-rMX/strings.xml                  |   3 +
 app/res/values-es/strings.xml                      |   3 +
 app/res/values-fr/strings.xml                      |   3 +
 app/res/values-hu/strings.xml                      |   3 +
 app/res/values-it/strings.xml                      |   3 +
 app/res/values-nb/strings.xml                      |   3 +
 app/res/values-nl/strings.xml                      |   3 +
 app/res/values-pt-rBR/strings.xml                  |   3 +
 app/res/values-ru/strings.xml                      |   3 +
 app/res/values-zh/strings.xml                      |   3 +
 app/res/values/arrays.xml                          |  33 ++++
 app/res/values/dimens.xml                          |   4 +
 app/res/values/strings.xml                         |   9 +-
 app/src/org/gnucash/android/data/Account.java      |  31 +++-
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  17 +-
 .../android/ui/accounts/AddAccountFragment.java    | 117 ++++++++++++-
 .../android/ui/colorpicker/ColorPickerDialog.java  |  22 +--
 .../android/ui/colorpicker/ColorPickerPalette.java | 186 +++++++++++++++++++++
 .../android/ui/colorpicker/ColorPickerSwatch.java  |  85 ++++++++++
 .../android/ui/colorpicker/ColorSquare.java        |  44 +++++
 .../android/ui/colorpicker/ColorStateDrawable.java |  72 ++++++++
 .../android/ui/colorpicker/HsvColorComparator.java |  59 +++++++
 .../ui/transactions/NewTransactionFragment.java    |  20 ++-
 .../ui/transactions/TransactionsActivity.java      |  31 +++-
 34 files changed, 849 insertions(+), 48 deletions(-)
 create mode 100644 app/res/drawable-hdpi/ic_colorpicker_swatch_selected.png
 create mode 100644 app/res/drawable-mdpi/ic_colorpicker_swatch_selected.png
 create mode 100644 app/res/drawable-xhdpi/ic_colorpicker_swatch_selected.png
 create mode 100644 app/res/drawable/color_picker_swatch.xml
 create mode 100644 app/res/drawable/color_square.xml
 create mode 100644 app/res/layout/color_picker_dialog.xml
 create mode 100644 app/res/layout/color_picker_swatch.xml
 create mode 100644 app/res/values/arrays.xml
 create mode 100644 app/src/org/gnucash/android/ui/colorpicker/ColorPickerPalette.java
 create mode 100644 app/src/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java
 create mode 100644 app/src/org/gnucash/android/ui/colorpicker/ColorSquare.java
 create mode 100644 app/src/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java
 create mode 100644 app/src/org/gnucash/android/ui/colorpicker/HsvColorComparator.java

diff --git a/app/res/drawable-hdpi/ic_colorpicker_swatch_selected.png b/app/res/drawable-hdpi/ic_colorpicker_swatch_selected.png
new file mode 100644
index 0000000000000000000000000000000000000000..3cbfe1a840d085dc922421217f0fc590d4681b5c
GIT binary patch
literal 2414
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
G@_zuE;6>m7

literal 0
HcmV?d00001

diff --git a/app/res/drawable-mdpi/ic_colorpicker_swatch_selected.png b/app/res/drawable-mdpi/ic_colorpicker_swatch_selected.png
new file mode 100644
index 0000000000000000000000000000000000000000..acbdecac269ea57935434357d986e8b974c10351
GIT binary patch
literal 1662
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
D{YdwW

literal 0
HcmV?d00001

diff --git a/app/res/drawable-xhdpi/ic_colorpicker_swatch_selected.png b/app/res/drawable-xhdpi/ic_colorpicker_swatch_selected.png
new file mode 100644
index 0000000000000000000000000000000000000000..812ff2c39cef6c2cf6a1f9a240731138de7835f1
GIT binary patch
literal 3241
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

literal 0
HcmV?d00001

diff --git a/app/res/drawable/color_picker_swatch.xml b/app/res/drawable/color_picker_swatch.xml
new file mode 100644
index 00000000..db71091a
--- /dev/null
+++ b/app/res/drawable/color_picker_swatch.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"  />
\ No newline at end of file
diff --git a/app/res/drawable/color_square.xml b/app/res/drawable/color_square.xml
new file mode 100644
index 00000000..7be33333
--- /dev/null
+++ b/app/res/drawable/color_square.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle" />
\ No newline at end of file
diff --git a/app/res/layout/color_picker_dialog.xml b/app/res/layout/color_picker_dialog.xml
new file mode 100644
index 00000000..2453c0bf
--- /dev/null
+++ b/app/res/layout/color_picker_dialog.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:gravity="center" >
+
+    <FrameLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:gravity="center"
+            android:padding="28dp" >
+
+        <ProgressBar
+                android:id="@android:id/progress"
+                style="?android:attr/progressBarStyleLarge"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:gravity="center" />
+
+        <org.gnucash.android.ui.colorpicker.ColorPickerPalette
+                android:id="@+id/color_picker"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:gravity="center"
+                android:visibility="gone" />
+    </FrameLayout>
+</ScrollView>
\ No newline at end of file
diff --git a/app/res/layout/color_picker_swatch.xml b/app/res/layout/color_picker_swatch.xml
new file mode 100644
index 00000000..19400fa7
--- /dev/null
+++ b/app/res/layout/color_picker_swatch.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <ImageView
+            android:id="@+id/color_picker_swatch"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+    <ImageView
+            android:id="@+id/color_picker_checkmark"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:src="@drawable/ic_colorpicker_swatch_selected"
+            android:scaleType="fitXY"
+            android:visibility="gone" />
+</merge>
\ No newline at end of file
diff --git a/app/res/layout/fragment_new_account.xml b/app/res/layout/fragment_new_account.xml
index a4c71b12..452f27e1 100644
--- a/app/res/layout/fragment_new_account.xml
+++ b/app/res/layout/fragment_new_account.xml
@@ -51,16 +51,32 @@
                  android:layout_marginBottom="@dimen/form_row_bottom_margin" />
 
         <TextView
-                android:text="@string/label_account_type"
+                android:text="@string/label_account_color_and_type"
                 android:layout_height="wrap_content"
                 android:layout_width="wrap_content"
                 android:layout_marginBottom="-8dp"
                 style="@style/TextAppearance.EditTransaction_LabelSmall" />
 
-        <Spinner android:id="@+id/input_account_type_spinner"
-                 android:layout_width="match_parent"
-                 android:layout_height="wrap_content"
-                 android:layout_marginBottom="@dimen/form_row_bottom_margin" />
+        <LinearLayout android:id="@+id/layout_color_type"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="@dimen/form_row_bottom_margin">
+
+            <org.gnucash.android.ui.colorpicker.ColorSquare
+                    android:id="@+id/input_color_picker"
+                    android:layout_width="40dp"
+                    android:layout_height="40dp"
+                    android:layout_marginLeft="8dp"
+                    android:layout_gravity="center_vertical"
+                    style="?android:attr/quickContactBadgeStyleSmallWindowMedium"/>
+
+            <Spinner android:id="@+id/input_account_type_spinner"
+                     android:layout_width="wrap_content"
+                     android:layout_height="wrap_content"
+                     android:layout_weight="1"
+                     android:layout_marginLeft="@dimen/dialog_padding"
+                     android:layout_marginBottom="@dimen/form_row_bottom_margin" />
+        </LinearLayout>
 
         <CheckBox android:id="@+id/checkbox_placeholder_account"
                   android:layout_width="match_parent"
diff --git a/app/res/values-de/strings.xml b/app/res/values-de/strings.xml
index 82bd432f..28c0a0f2 100644
--- a/app/res/values-de/strings.xml
+++ b/app/res/values-de/strings.xml
@@ -351,6 +351,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d Unterkonto</item>
         <item quantity="other">%d Unterkonten</item>
@@ -374,4 +375,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-el/strings.xml b/app/res/values-el/strings.xml
index 27f13a6a..dd437efd 100644
--- a/app/res/values-el/strings.xml
+++ b/app/res/values-el/strings.xml
@@ -365,6 +365,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d -</item>
         <item quantity="other">%d -</item>
@@ -388,4 +389,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-es-rMX/strings.xml b/app/res/values-es-rMX/strings.xml
index f89d4cc8..a588b363 100644
--- a/app/res/values-es-rMX/strings.xml
+++ b/app/res/values-es-rMX/strings.xml
@@ -349,6 +349,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d subcuenta</item>
         <item quantity="other">%d subcuentas</item>
@@ -372,4 +373,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-es/strings.xml b/app/res/values-es/strings.xml
index e77336c8..b0a0e1ca 100644
--- a/app/res/values-es/strings.xml
+++ b/app/res/values-es/strings.xml
@@ -349,6 +349,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-cuenta</item>
         <item quantity="other">%d sub-cuentas</item>
@@ -372,4 +373,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-fr/strings.xml b/app/res/values-fr/strings.xml
index 3a0960df..736d935f 100644
--- a/app/res/values-fr/strings.xml
+++ b/app/res/values-fr/strings.xml
@@ -347,6 +347,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sous-compte</item>
         <item quantity="other">%d sous-comptes</item>
@@ -370,4 +371,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-hu/strings.xml b/app/res/values-hu/strings.xml
index b604bab6..f3050b73 100644
--- a/app/res/values-hu/strings.xml
+++ b/app/res/values-hu/strings.xml
@@ -350,6 +350,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
@@ -373,4 +374,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
\ No newline at end of file
diff --git a/app/res/values-it/strings.xml b/app/res/values-it/strings.xml
index 6a2585cf..3e8527be 100644
--- a/app/res/values-it/strings.xml
+++ b/app/res/values-it/strings.xml
@@ -350,6 +350,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sotto-conto</item>
         <item quantity="other">%d sotto-conti</item>
@@ -373,4 +374,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-nb/strings.xml b/app/res/values-nb/strings.xml
index bcdab39c..aa2f22b0 100644
--- a/app/res/values-nb/strings.xml
+++ b/app/res/values-nb/strings.xml
@@ -352,6 +352,7 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d under-konto</item>
         <item quantity="other">%d under-kontoer</item>
@@ -375,4 +376,6 @@ format og importeres i regnskapsprogrammet GnuCash for PC.</string>
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-nl/strings.xml b/app/res/values-nl/strings.xml
index ec173452..d9cf257f 100644
--- a/app/res/values-nl/strings.xml
+++ b/app/res/values-nl/strings.xml
@@ -351,6 +351,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-account</item>
         <item quantity="other">%d sub-accounts</item>
@@ -374,4 +375,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-pt-rBR/strings.xml b/app/res/values-pt-rBR/strings.xml
index 79e6c612..2fe84864 100644
--- a/app/res/values-pt-rBR/strings.xml
+++ b/app/res/values-pt-rBR/strings.xml
@@ -349,6 +349,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d sub-contas</item>
         <item quantity="other">%d sub-contas</item>
@@ -372,4 +373,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-ru/strings.xml b/app/res/values-ru/strings.xml
index 7954e682..0889faf3 100644
--- a/app/res/values-ru/strings.xml
+++ b/app/res/values-ru/strings.xml
@@ -347,6 +347,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d  </item>
         <item quantity="other">%d .  </item>
@@ -370,4 +371,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values-zh/strings.xml b/app/res/values-zh/strings.xml
index c1f31a64..22b6e71f 100644
--- a/app/res/values-zh/strings.xml
+++ b/app/res/values-zh/strings.xml
@@ -347,6 +347,7 @@
     <string name="toast_recurring_transaction_deleted">Successfully deleted recurring transaction</string>
     <string name="label_placeholder_account">Placeholder account</string>
     <string name="label_default_transfer_account">Default Transfer Account</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
     <plurals name="label_sub_accounts">
         <item quantity="one">%d </item>
         <item quantity="other">%d </item>
@@ -370,4 +371,6 @@
         <item>QIF</item>
         <item>OFX</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
 </resources>
diff --git a/app/res/values/arrays.xml b/app/res/values/arrays.xml
new file mode 100644
index 00000000..29fff55f
--- /dev/null
+++ b/app/res/values/arrays.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <array name="account_colors">
+        <item>#0B57A4</item> <!-- aqua -->
+        <item>#2A82D7</item> <!-- blue -->
+        <item>#3714A4</item> <!-- blue violet -->
+        <item>#964B00</item> <!-- brown -->
+        <item>#A50516</item> <!-- crimson -->
+        <item>#FB3C8F</item> <!-- deep pink -->
+        <item>#1B4F15</item> <!-- forest green -->
+        <item>#A51497</item> <!-- fuchsia -->
+        <item>#686868</item> <!-- gray -->
+        <item>#3AA03A</item> <!-- green -->
+        <item>#FF0080</item> <!-- hot pink -->
+        <item>#8BBDEB</item> <!-- light blue -->
+        <item>#FC6A6C</item> <!-- light red -->
+        <item>#FC1CAD</item> <!-- magenta -->
+        <item>#7F2B14</item> <!-- maroon -->
+        <item>#000066</item> <!-- midnight blue -->
+        <item>#2B4726</item> <!-- olive -->
+        <item>#FD7222</item> <!-- orange -->
+        <item>#FC331C</item> <!-- orange red -->
+        <item>#FC5AB8</item> <!-- pink -->
+        <item>#AF31F2</item> <!-- purple -->
+        <item>#FC0D1B</item> <!-- red -->
+        <item>#D7462C</item> <!-- red orange -->
+        <item>#F69E94</item> <!-- salmon -->
+        <item>#2B8A6D</item> <!-- teal -->
+        <item>#6B28CE</item> <!-- violet -->
+        <item>#6041FA</item> <!-- violet blue -->
+        <item>#FEC42E</item> <!-- yellow orange -->
+    </array>
+</resources>
\ No newline at end of file
diff --git a/app/res/values/dimens.xml b/app/res/values/dimens.xml
index 5c514f5e..b13f1e13 100644
--- a/app/res/values/dimens.xml
+++ b/app/res/values/dimens.xml
@@ -27,4 +27,8 @@
     <dimen name="section_header_height">20dp</dimen>
     <dimen name="form_row_bottom_margin">10dp</dimen>
     <dimen name="strip_width">5dp</dimen>
+    <dimen name="color_swatch_large">64dip</dimen>
+    <dimen name="color_swatch_small">48dip</dimen>
+    <dimen name="color_swatch_margins_large">8dip</dimen>
+    <dimen name="color_swatch_margins_small">4dip</dimen>
 </resources>
\ No newline at end of file
diff --git a/app/res/values/strings.xml b/app/res/values/strings.xml
index 71805a8f..34ed60bf 100644
--- a/app/res/values/strings.xml
+++ b/app/res/values/strings.xml
@@ -15,7 +15,7 @@
  limitations under the License.
 -->
 
-<resources>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="app_name">GnuCash</string>
     <string name="title_add_account">Create Account</string>
     <string name="title_edit_account">Edit Account</string>
@@ -603,4 +603,11 @@
         <item>604800000</item>
         <item>2630000000</item>
     </string-array>
+    <!-- Default title for color picker dialog [CHAR LIMIT=30] -->
+    <string name="color_picker_default_title">Select a Color</string>
+    <!-- Content description for a color square. -->
+    <string name="color_swatch_description">Color <xliff:g id="color_index" example="14">%1$d</xliff:g></string>
+    <!-- Content description for a selected color square. -->
+    <string name="color_swatch_description_selected">Color <xliff:g id="color_index" example="14">%1$d</xliff:g> selected</string>
+    <string name="label_account_color_and_type">Account Color &amp; Type</string>
 </resources>
diff --git a/app/src/org/gnucash/android/data/Account.java b/app/src/org/gnucash/android/data/Account.java
index a108b979..2920b05a 100644
--- a/app/src/org/gnucash/android/data/Account.java
+++ b/app/src/org/gnucash/android/data/Account.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.UUID;
+import java.util.regex.Pattern;
 
 import android.graphics.Color;
 import org.gnucash.android.app.GnuCashApplication;
@@ -326,20 +327,36 @@ public Money getBalance(){
      * Returns the color code of the account in the format #rrggbb
      * @return Color code of the account
      */
-    public String getColorCode() {
+    public String getColorHexCode() {
         return mColorCode;
     }
 
     /**
      * Sets the color code of the account.
-     * @param colorCode Color code to be set in the format #rrggbb
+     * @param colorCode Color code to be set in the format #rrggbb or #rgb
      * @throws java.lang.IllegalArgumentException if the color code is not properly formatted
      */
     public void setColorCode(String colorCode) {
-        //TODO: Proper regex validation
-        if (!colorCode.startsWith("#") || colorCode.length() < 4 || colorCode.length() > 9){
-            throw new IllegalArgumentException("Invalid color code for account");
-        }
+        if (colorCode == null)
+            return;
+
+        //TODO: Allow use of #aarrggbb format as well
+
+        /*
+            ^             anchor for start of string
+            #             the literal #
+            (             start of group
+            ?:            indicate a non-capturing group that doesn't generate backreferences
+            [0-9a-fA-F]   hexadecimal digit
+            {3}           three times
+            )             end of group
+            {1,2}         repeat either once or twice
+            $             anchor for end of string
+         */
+        String colorHexRegex = "^#(?:[0-9a-fA-F]{3}){1,2}$";
+        if (!Pattern.matches(colorHexRegex, colorCode))
+            throw new IllegalArgumentException("Invalid color hex code");
+
         this.mColorCode = colorCode;
     }
 
diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 1a6e4f98..6a0c6724 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -76,7 +76,7 @@ public long addAccount(Account account){
 		contentValues.put(DatabaseHelper.KEY_PARENT_ACCOUNT_UID, account.getParentUID());
         contentValues.put(DatabaseHelper.KEY_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
         contentValues.put(DatabaseHelper.KEY_PLACEHOLDER, account.isPlaceholderAccount() ? 1 : 0);
-        contentValues.put(DatabaseHelper.KEY_COLOR_CODE, account.getColorCode());
+        contentValues.put(DatabaseHelper.KEY_COLOR_CODE, account.getColorHexCode());
 
 		long rowId = -1;
 		if ((rowId = getAccountID(account.getUID())) > 0){
@@ -226,8 +226,19 @@ public String getParentAccountUID(String uid){
 			cursor.close();
 		}
 		return result;
-	}	
-	
+	}
+
+    /**
+     * Returns the  unique ID of the parent account of the account with database ID <code>id</code>
+     * If the account has no parent, null is returned.
+     * @param id DB record ID of account . Should not be null
+     * @return DB record UID of the parent account, null if the account has no parent
+     * @see #getParentAccountUID(String)
+     */
+    public String getParentAccountUID(long id){
+        return getParentAccountUID(getAccountUID(id));
+    }
+
 	/**
 	 * Retrieves an account object from a database with database ID <code>rowId</code>
 	 * @param rowId Identifier of the account record to be retrieved
diff --git a/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java b/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
index c2ca9b37..974660a7 100644
--- a/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
+++ b/app/src/org/gnucash/android/ui/accounts/AddAccountFragment.java
@@ -23,12 +23,19 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Color;
 import android.preference.PreferenceManager;
+import android.support.v4.app.FragmentManager;
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
 import org.gnucash.android.data.Money;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.ui.colorpicker.ColorPickerDialog;
+import org.gnucash.android.ui.colorpicker.ColorPickerSwatch;
+import org.gnucash.android.ui.colorpicker.ColorSquare;
 import org.gnucash.android.ui.transactions.TransactionsListFragment;
 
 import android.content.Context;
@@ -59,7 +66,12 @@
  */
 public class AddAccountFragment extends SherlockFragment {
 
-	/**
+    /**
+     * Tag for the color picker dialog fragment
+     */
+    public static final String COLOR_PICKER_DIALOG_TAG = "color_picker_dialog";
+
+    /**
 	 * EditText for the name of the account to be created/edited
 	 */
 	private EditText mNameEditText;
@@ -149,6 +161,23 @@
      */
     private boolean mUseDoubleEntry;
 
+    /**
+     * Default to transparent
+     */
+    private String mSelectedColor = null;
+
+    /**
+     * Trigger for color picker dialog
+     */
+    private ColorSquare mColorSquare;
+
+    private ColorPickerSwatch.OnColorSelectedListener mColorSelectedListener = new ColorPickerSwatch.OnColorSelectedListener() {
+        @Override
+        public void onColorSelected(int color) {
+            mColorSquare.setBackgroundColor(color);
+            mSelectedColor = String.format("#%06X", (0xFFFFFF & color));
+        }
+    };
 
     /**
 	 * Default constructor
@@ -219,6 +248,14 @@ public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
             }
         });
 
+        mColorSquare = (ColorSquare) view.findViewById(R.id.input_color_picker);
+        mColorSquare.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                showColorPickerDialog();
+            }
+        });
+
 		return view;
 	}
 	
@@ -278,10 +315,9 @@ private void initializeViewsWithAccount(Account account){
         }
 
         mPlaceholderCheckBox.setChecked(account.isPlaceholderAccount());
+        initializeColorSquarePreview(account.getColorHexCode());
 
-        String[] accountTypeEntries = getResources().getStringArray(R.array.account_type_entries);
-        int accountTypeIndex = Arrays.asList(accountTypeEntries).indexOf(account.getAccountType().name());
-        mAccountTypeSpinner.setSelection(accountTypeIndex);
+        setAccountTypeSelection(account.getAccountType());
     }
 
     /**
@@ -289,9 +325,41 @@ private void initializeViewsWithAccount(Account account){
      */
     private void initializeViews(){
         setSelectedCurrency(Money.DEFAULT_CURRENCY_CODE);
-
+        mColorSquare.setBackgroundColor(Color.LTGRAY);
         long parentAccountId = getArguments().getLong(AccountsListFragment.ARG_PARENT_ACCOUNT_ID);
         setParentAccountSelection(parentAccountId);
+
+        /* This snippet causes the child account to default to same color as parent. Not sure if we want that
+
+        if (parentAccountId > 0) {
+            //child accounts by default have same type as the parent
+            setAccountTypeSelection(mAccountsDbAdapter.getAccountType(parentAccountId));
+            String colorHex = mAccountsDbAdapter.getAccountColorCode(parentAccountId);
+            initializeColorSquarePreview(colorHex);
+            mSelectedColor = colorHex;
+        }
+        */
+    }
+
+    /**
+     * Initializes the preview of the color picker (color square) to the specified color
+     * @param colorHex Color of the format #rgb or #rrggbb
+     */
+    private void initializeColorSquarePreview(String colorHex){
+        if (colorHex != null)
+            mColorSquare.setBackgroundColor(Color.parseColor(colorHex));
+        else
+            mColorSquare.setBackgroundColor(Color.LTGRAY);
+    }
+
+    /**
+     * Selects the corresponding account type in the spinner
+     * @param accountType AccountType to be set
+     */
+    private void setAccountTypeSelection(Account.AccountType accountType){
+        String[] accountTypeEntries = getResources().getStringArray(R.array.account_type_entries);
+        int accountTypeIndex = Arrays.asList(accountTypeEntries).indexOf(accountType.name());
+        mAccountTypeSpinner.setSelection(accountTypeIndex);
     }
 
     /**
@@ -354,7 +422,43 @@ private void setDefaultTransferAccountSelection(long defaultTransferAccountId){
         }
     }
 
-	@Override
+    /**
+     * Returns an array of colors used for accounts.
+     * The array returned has the actual color values and not the resource ID.
+     * @return Integer array of colors used for accounts
+     */
+    private int[] getAccountColorOptions(){
+        Resources res = getResources();
+        TypedArray colorTypedArray = res.obtainTypedArray(R.array.account_colors);
+        int[] colorOptions = new int[colorTypedArray.length()];
+        for (int i = 0; i < colorTypedArray.length(); i++) {
+             int color = colorTypedArray.getColor(i, R.color.title_green);
+             colorOptions[i] = color;
+        }
+        return colorOptions;
+    }
+    /**
+     * Shows the color picker dialog
+     */
+    private void showColorPickerDialog(){
+        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
+        int currentColor = Color.LTGRAY;
+        if (mAccount != null){
+            String accountColor = mAccount.getColorHexCode();
+            if (accountColor != null){
+                currentColor = Color.parseColor(accountColor);
+            }
+        }
+
+        ColorPickerDialog colorPickerDialogFragment = ColorPickerDialog.newInstance(
+                R.string.color_picker_default_title,
+                getAccountColorOptions(),
+                currentColor, 4, 12);
+        colorPickerDialogFragment.setOnColorSelectedListener(mColorSelectedListener);
+        colorPickerDialogFragment.show(fragmentManager, COLOR_PICKER_DIALOG_TAG);
+    }
+
+    @Override
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {		
 		super.onCreateOptionsMenu(menu, inflater);
 		inflater.inflate(R.menu.default_save_actions, menu);
@@ -486,6 +590,7 @@ private void saveAccount() {
         mAccount.setAccountType(Account.AccountType.valueOf(accountTypeEntries[selectedAccountType]));
 
         mAccount.setPlaceHolderFlag(mPlaceholderCheckBox.isChecked());
+        mAccount.setColorCode(mSelectedColor);
 
 		if (mParentCheckBox.isChecked()){
 			long id = mParentAccountSpinner.getSelectedItemId();
diff --git a/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
index 6913faa7..add26068 100644
--- a/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
+++ b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerDialog.java
@@ -16,22 +16,22 @@
 
 package org.gnucash.android.ui.colorpicker;
 
-        import android.app.Activity;
-        import android.app.AlertDialog;
-        import android.app.Dialog;
-        import android.app.DialogFragment;
-        import android.os.Bundle;
-        import android.view.LayoutInflater;
-        import android.view.View;
-        import android.widget.ProgressBar;
-
-        import com.android.colorpicker.ColorPickerSwatch.OnColorSelectedListener;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ProgressBar;
+import com.actionbarsherlock.app.SherlockDialogFragment;
+import org.gnucash.android.R;
+import org.gnucash.android.ui.colorpicker.ColorPickerSwatch.OnColorSelectedListener;
 
 /**
  * A dialog which takes in as input an array of colors and creates a palette allowing the user to
  * select a specific color swatch, which invokes a listener.
  */
-public class ColorPickerDialog extends DialogFragment implements OnColorSelectedListener {
+public class ColorPickerDialog extends SherlockDialogFragment implements OnColorSelectedListener {
 
     public static final int SIZE_LARGE = 1;
     public static final int SIZE_SMALL = 2;
diff --git a/app/src/org/gnucash/android/ui/colorpicker/ColorPickerPalette.java b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerPalette.java
new file mode 100644
index 00000000..7a5c0572
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerPalette.java
@@ -0,0 +1,186 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.colorpicker;
+
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+
+import org.gnucash.android.R;
+import org.gnucash.android.ui.colorpicker.ColorPickerSwatch.OnColorSelectedListener;
+
+/**
+ * A color picker custom view which creates an grid of color squares.  The number of squares per
+ * row (and the padding between the squares) is determined by the user.
+ */
+public class ColorPickerPalette extends TableLayout {
+
+    public OnColorSelectedListener mOnColorSelectedListener;
+
+    private String mDescription;
+    private String mDescriptionSelected;
+
+    private int mSwatchLength;
+    private int mMarginSize;
+    private int mNumColumns;
+
+    public ColorPickerPalette(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public ColorPickerPalette(Context context) {
+        super(context);
+    }
+
+    /**
+     * Initialize the size, columns, and listener.  Size should be a pre-defined size (SIZE_LARGE
+     * or SIZE_SMALL) from ColorPickerDialogFragment.
+     */
+    public void init(int size, int columns, OnColorSelectedListener listener) {
+        mNumColumns = columns;
+        Resources res = getResources();
+        if (size == ColorPickerDialog.SIZE_LARGE) {
+            mSwatchLength = res.getDimensionPixelSize(R.dimen.color_swatch_large);
+            mMarginSize = res.getDimensionPixelSize(R.dimen.color_swatch_margins_large);
+        } else {
+            mSwatchLength = res.getDimensionPixelSize(R.dimen.color_swatch_small);
+            mMarginSize = res.getDimensionPixelSize(R.dimen.color_swatch_margins_small);
+        }
+        mOnColorSelectedListener = listener;
+
+        mDescription = res.getString(R.string.color_swatch_description);
+        mDescriptionSelected = res.getString(R.string.color_swatch_description_selected);
+    }
+
+    private TableRow createTableRow() {
+        TableRow row = new TableRow(getContext());
+        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT,
+                LayoutParams.WRAP_CONTENT);
+        row.setLayoutParams(params);
+        return row;
+    }
+
+    /**
+     * Adds swatches to table in a serpentine format.
+     */
+    public void drawPalette(int[] colors, int selectedColor) {
+        if (colors == null) {
+            return;
+        }
+
+        this.removeAllViews();
+        int tableElements = 0;
+        int rowElements = 0;
+        int rowNumber = 0;
+
+        // Fills the table with swatches based on the array of colors.
+        TableRow row = createTableRow();
+        for (int color : colors) {
+            tableElements++;
+
+            View colorSwatch = createColorSwatch(color, selectedColor);
+            setSwatchDescription(rowNumber, tableElements, rowElements, color == selectedColor,
+                    colorSwatch);
+            addSwatchToRow(row, colorSwatch, rowNumber);
+
+            rowElements++;
+            if (rowElements == mNumColumns) {
+                addView(row);
+                row = createTableRow();
+                rowElements = 0;
+                rowNumber++;
+            }
+        }
+
+        // Create blank views to fill the row if the last row has not been filled.
+        if (rowElements > 0) {
+            while (rowElements != mNumColumns) {
+                addSwatchToRow(row, createBlankSpace(), rowNumber);
+                rowElements++;
+            }
+            addView(row);
+        }
+    }
+
+    /**
+     * Appends a swatch to the end of the row for even-numbered rows (starting with row 0),
+     * to the beginning of a row for odd-numbered rows.
+     */
+    private void addSwatchToRow(TableRow row, View swatch, int rowNumber) {
+        if (rowNumber % 2 == 0) {
+            row.addView(swatch);
+        } else {
+            row.addView(swatch, 0);
+        }
+    }
+
+    /**
+     * Add a content description to the specified swatch view. Because the colors get added in a
+     * snaking form, every other row will need to compensate for the fact that the colors are added
+     * in an opposite direction from their left->right/top->bottom order, which is how the system
+     * will arrange them for accessibility purposes.
+     */
+    private void setSwatchDescription(int rowNumber, int index, int rowElements, boolean selected,
+                                      View swatch) {
+        int accessibilityIndex;
+        if (rowNumber % 2 == 0) {
+            // We're in a regular-ordered row
+            accessibilityIndex = index;
+        } else {
+            // We're in a backwards-ordered row.
+            int rowMax = ((rowNumber + 1) * mNumColumns);
+            accessibilityIndex = rowMax - rowElements;
+        }
+
+        String description;
+        if (selected) {
+            description = String.format(mDescriptionSelected, accessibilityIndex);
+        } else {
+            description = String.format(mDescription, accessibilityIndex);
+        }
+        swatch.setContentDescription(description);
+    }
+
+    /**
+     * Creates a blank space to fill the row.
+     */
+    private ImageView createBlankSpace() {
+        ImageView view = new ImageView(getContext());
+        TableRow.LayoutParams params = new TableRow.LayoutParams(mSwatchLength, mSwatchLength);
+        params.setMargins(mMarginSize, mMarginSize, mMarginSize, mMarginSize);
+        view.setLayoutParams(params);
+        return view;
+    }
+
+    /**
+     * Creates a color swatch.
+     */
+    private ColorPickerSwatch createColorSwatch(int color, int selectedColor) {
+        ColorPickerSwatch view = new ColorPickerSwatch(getContext(), color,
+                color == selectedColor, mOnColorSelectedListener);
+        TableRow.LayoutParams params = new TableRow.LayoutParams(mSwatchLength, mSwatchLength);
+        params.setMargins(mMarginSize, mMarginSize, mMarginSize, mMarginSize);
+        view.setLayoutParams(params);
+        return view;
+    }
+}
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java
new file mode 100644
index 00000000..8c0f768d
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/colorpicker/ColorPickerSwatch.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.colorpicker;
+
+
+import android.content.Context;
+import android.graphics.PorterDuff.Mode;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.LayerDrawable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import org.gnucash.android.R;
+
+/**
+ * Creates a circular swatch of a specified color.  Adds a checkmark if marked as checked.
+ */
+public class ColorPickerSwatch extends FrameLayout implements View.OnClickListener {
+    private int mColor;
+    private ImageView mSwatchImage;
+    private ImageView mCheckmarkImage;
+    private OnColorSelectedListener mOnColorSelectedListener;
+
+    /**
+     * Interface for a callback when a color square is selected.
+     */
+    public interface OnColorSelectedListener {
+
+        /**
+         * Called when a specific color square has been selected.
+         */
+        public void onColorSelected(int color);
+    }
+
+    public ColorPickerSwatch(Context context, int color, boolean checked,
+                             OnColorSelectedListener listener) {
+        super(context);
+        mColor = color;
+        mOnColorSelectedListener = listener;
+
+        LayoutInflater.from(context).inflate(R.layout.color_picker_swatch, this);
+        mSwatchImage = (ImageView) findViewById(R.id.color_picker_swatch);
+        mCheckmarkImage = (ImageView) findViewById(R.id.color_picker_checkmark);
+        setColor(color);
+        setChecked(checked);
+        setOnClickListener(this);
+    }
+
+    protected void setColor(int color) {
+        Drawable[] colorDrawable = new Drawable[]
+                {getContext().getResources().getDrawable(R.drawable.color_picker_swatch)};
+        mSwatchImage.setImageDrawable(new ColorStateDrawable(colorDrawable, color));
+    }
+
+    private void setChecked(boolean checked) {
+        if (checked) {
+            mCheckmarkImage.setVisibility(View.VISIBLE);
+        } else {
+            mCheckmarkImage.setVisibility(View.GONE);
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        if (mOnColorSelectedListener != null) {
+            mOnColorSelectedListener.onColorSelected(mColor);
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/ui/colorpicker/ColorSquare.java b/app/src/org/gnucash/android/ui/colorpicker/ColorSquare.java
new file mode 100644
index 00000000..c123988a
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/colorpicker/ColorSquare.java
@@ -0,0 +1,44 @@
+package org.gnucash.android.ui.colorpicker;
+
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.widget.QuickContactBadge;
+import org.gnucash.android.R;
+
+/**
+ * The color square used as an entry point to launching the {@link ColorPickerDialog}.
+ */
+public class ColorSquare extends QuickContactBadge {
+
+    public ColorSquare(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public ColorSquare(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    @Override
+    public void setBackgroundColor(int color) {
+        Drawable[] colorDrawable = new Drawable[] {
+                getContext().getResources().getDrawable(R.drawable.color_square) };
+        setImageDrawable(new ColorStateDrawable(colorDrawable, color));
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java b/app/src/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java
new file mode 100644
index 00000000..35fd180a
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/colorpicker/ColorStateDrawable.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.colorpicker;
+
+        import android.graphics.Color;
+        import android.graphics.PorterDuff;
+        import android.graphics.drawable.Drawable;
+        import android.graphics.drawable.LayerDrawable;
+
+/**
+ * A drawable which sets its color filter to a color specified by the user, and changes to a
+ * slightly darker color when pressed or focused.
+ */
+public class ColorStateDrawable extends LayerDrawable {
+
+    private static final float PRESSED_STATE_MULTIPLIER = 0.70f;
+
+    private int mColor;
+
+    public ColorStateDrawable(Drawable[] layers, int color) {
+        super(layers);
+        mColor = color;
+    }
+
+    @Override
+    protected boolean onStateChange(int[] states) {
+        boolean pressedOrFocused = false;
+        for (int state : states) {
+            if (state == android.R.attr.state_pressed || state == android.R.attr.state_focused) {
+                pressedOrFocused = true;
+                break;
+            }
+        }
+
+        if (pressedOrFocused) {
+            super.setColorFilter(getPressedColor(mColor), PorterDuff.Mode.SRC_ATOP);
+        } else {
+            super.setColorFilter(mColor, PorterDuff.Mode.SRC_ATOP);
+        }
+
+        return super.onStateChange(states);
+    }
+
+    /**
+     * Given a particular color, adjusts its value by a multiplier.
+     */
+    private int getPressedColor(int color) {
+        float[] hsv = new float[3];
+        Color.colorToHSV(color, hsv);
+        hsv[2] = hsv[2] * PRESSED_STATE_MULTIPLIER;
+        return Color.HSVToColor(hsv);
+    }
+
+    @Override
+    public boolean isStateful() {
+        return true;
+    }
+}
diff --git a/app/src/org/gnucash/android/ui/colorpicker/HsvColorComparator.java b/app/src/org/gnucash/android/ui/colorpicker/HsvColorComparator.java
new file mode 100644
index 00000000..17b3d408
--- /dev/null
+++ b/app/src/org/gnucash/android/ui/colorpicker/HsvColorComparator.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.ui.colorpicker;
+import android.graphics.Color;
+import java.util.Comparator;
+
+/**
+ * A color comparator which compares based on hue, saturation, and value.
+ */
+public class HsvColorComparator implements Comparator<Integer> {
+
+    @Override
+    public int compare(Integer lhs, Integer rhs) {
+        float[] hsv = new float[3];
+        Color.colorToHSV(lhs, hsv);
+        float hue1 = hsv[0];
+        float sat1 = hsv[1];
+        float val1 = hsv[2];
+
+        float[] hsv2 = new float[3];
+        Color.colorToHSV(rhs, hsv2);
+        float hue2 = hsv2[0];
+        float sat2 = hsv2[1];
+        float val2 = hsv2[2];
+
+        if (hue1 < hue2) {
+            return 1;
+        } else if (hue1 > hue2) {
+            return -1;
+        } else {
+            if (sat1 < sat2) {
+                return 1;
+            } else if (sat1 > sat2) {
+                return -1;
+            } else {
+                if (val1 < val2) {
+                    return 1;
+                } else if (val1 > val2) {
+                    return -1;
+                }
+            }
+        }
+        return 0;
+    }
+}
\ No newline at end of file
diff --git a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
index 5b653276..9dd43748 100644
--- a/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
+++ b/app/src/org/gnucash/android/ui/transactions/NewTransactionFragment.java
@@ -182,7 +182,9 @@
      */
     Account.AccountType mAccountType;
 
-
+    /**
+     * Spinner for marking the transaction as a recurring transaction
+     */
     Spinner mRecurringTransactionSpinner;
 
 	/**
@@ -193,14 +195,14 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 			Bundle savedInstanceState) {
 		View v = inflater.inflate(R.layout.fragment_new_transaction, container, false);
 		
-		mNameEditText = (AutoCompleteTextView) v.findViewById(R.id.input_transaction_name);
-		mDescriptionEditText = (EditText) v.findViewById(R.id.input_description);
-		mDateTextView = (TextView) v.findViewById(R.id.input_date);
-		mTimeTextView = (TextView) v.findViewById(R.id.input_time);
-		mAmountEditText = (EditText) v.findViewById(R.id.input_transaction_amount);		
-		mCurrencyTextView = (TextView) v.findViewById(R.id.currency_symbol);
-		mTransactionTypeButton = (ToggleButton) v.findViewById(R.id.input_transaction_type);
-		mDoubleAccountSpinner = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
+		mNameEditText           = (AutoCompleteTextView) v.findViewById(R.id.input_transaction_name);
+		mDescriptionEditText    = (EditText) v.findViewById(R.id.input_description);
+		mDateTextView           = (TextView) v.findViewById(R.id.input_date);
+		mTimeTextView           = (TextView) v.findViewById(R.id.input_time);
+		mAmountEditText         = (EditText) v.findViewById(R.id.input_transaction_amount);
+		mCurrencyTextView       = (TextView) v.findViewById(R.id.currency_symbol);
+		mTransactionTypeButton  = (ToggleButton) v.findViewById(R.id.input_transaction_type);
+		mDoubleAccountSpinner   = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
 
         mRecurringTransactionSpinner = (Spinner) v.findViewById(R.id.input_recurring_transaction_spinner);
 		return v;
diff --git a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index cd0b62c4..775c8eaa 100644
--- a/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/app/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -128,7 +128,7 @@
      * This is the last known color for the title indicator.
      * This is used to remember the color of the top level account if the child account doesn't have one.
      */
-    private static int sLastTitleColor = R.color.title_green;
+    private static int sLastTitleColor;
 
     private TextView mSectionHeaderTransactions;
     private TitlePageIndicator mTitlePageIndicator;
@@ -158,8 +158,9 @@ public boolean onNavigationItemSelected(int position, long itemId) {
 	};
 
 
-
-
+    /**
+     * Adapter for managing the sub-account and transaction fragment pages in the accounts view
+     */
     private class AccountViewPagerAdapter extends FragmentStatePagerAdapter {
 
         public AccountViewPagerAdapter(FragmentManager fm){
@@ -285,9 +286,8 @@ protected void onCreate(Bundle savedInstanceState) {
                 TransactionsListFragment.SELECTED_ACCOUNT_ID, -1);
 
         mAccountsDbAdapter = new AccountsDbAdapter(this);
-		setupActionBarNavigation();
 
-        setTitleIndicatorColor();
+        setupActionBarNavigation();
 
 		if (getIntent().getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {
             mPager.setVisibility(View.GONE);
@@ -308,7 +308,7 @@ protected void onCreate(Bundle savedInstanceState) {
 		mActivityRunning = true;
 	}
 
-   /**
+    /**
      * Loads the fragment for creating/editing transactions and initializes it to be displayed
      */
     private void initializeCreateOrEditTransaction() {
@@ -322,14 +322,32 @@ private void initializeCreateOrEditTransaction() {
             mSectionHeaderTransactions.setText(R.string.title_add_transaction);
             args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID, mAccountId);
         }
+        mSectionHeaderTransactions.setBackgroundColor(sLastTitleColor);
         showTransactionFormFragment(args);
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+        setTitleIndicatorColor();
+    }
+
     /**
      * Sets the color for the ViewPager title indicator to match the account color
      */
     private void setTitleIndicatorColor() {
+        //Basically, if we are in a top level account, use the default title color.
+        //but propagate a parent account's title color to children who don't have own color
+        String parentAccountUID = mAccountsDbAdapter.getParentAccountUID(mAccountId);
         String colorCode = mAccountsDbAdapter.getAccountColorCode(mAccountId);
+        if (parentAccountUID == null
+                || parentAccountUID.equals(mAccountsDbAdapter.getGnuCashRootAccountUID())) {
+            sLastTitleColor = getResources().getColor(R.color.title_green);
+        } else {
+            String parentColor = mAccountsDbAdapter.getAccountColorCode(mAccountsDbAdapter.getAccountID(parentAccountUID));
+            sLastTitleColor = parentColor != null ? Color.parseColor(parentColor) : sLastTitleColor;
+        }
+
         if (colorCode != null){
             sLastTitleColor = Color.parseColor(colorCode);
         }
@@ -337,6 +355,7 @@ private void setTitleIndicatorColor() {
         mTitlePageIndicator.setSelectedColor(sLastTitleColor);
         mTitlePageIndicator.setTextColor(sLastTitleColor);
         mTitlePageIndicator.setFooterColor(sLastTitleColor);
+        mSectionHeaderTransactions.setBackgroundColor(sLastTitleColor);
     }
 
     /**
