From b0b0bde9aa5d1b6b1ea0520c6d9c94967ea5acbd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 23 Oct 2015 10:27:56 +0200
Subject: [PATCH] Fix sharing of exports to external services

---
 .../gnucash/android/export/ExportAsyncTask.java    | 79 +++++-----------------
 .../org/gnucash/android/export/ExportParams.java   | 11 +--
 .../gnucash/android/export/qif/QifExporter.java    | 47 +++++++++++++
 3 files changed, 65 insertions(+), 72 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 2695bc9d..94391f82 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -23,7 +23,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 import android.os.AsyncTask;
@@ -53,7 +52,6 @@
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
-import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
@@ -61,13 +59,10 @@
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
 
-import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.FileReader;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
@@ -94,7 +89,7 @@
     /**
      * Log tag
      */
-    public static final String TAG = "ExporterAsyncTask";
+    public static final String TAG = "ExportAsyncTask";
 
     /**
      * Export parameters
@@ -151,6 +146,7 @@ protected Boolean doInBackground(ExportParams... params) {
             File file = new File(mExportParams.getTargetFilepath());
             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
             try {
+                // FIXME: detect if there aren't transactions to export and inform the user
                 mExporter.generateExport(writer);
                 writer.flush();
             }
@@ -178,7 +174,7 @@ public void run() {
 
         switch (mExportParams.getExportTarget()) {
             case SHARING:
-                File output = copyExportToSDCard();
+                File output = moveExportToSDCard();
                 shareFile(output.getAbsolutePath());
                 return true;
 
@@ -191,7 +187,7 @@ public void run() {
                 return true;
 
             case SD_CARD:
-                copyExportToSDCard();
+                moveExportToSDCard();
                 return true;
         }
 
@@ -371,7 +367,7 @@ private void copyExportToDropbox() {
         List<String> exportedFilePaths;
         if (mExportParams.getExportFormat() == ExportFormat.QIF) {
             String path = mExportParams.getTargetFilepath();
-            exportedFilePaths = splitQIF(new File(path), new File(path));
+            exportedFilePaths = QifExporter.splitQIF(new File(path));
         } else {
             exportedFilePaths = new ArrayList<>();
             exportedFilePaths.add(mExportParams.getTargetFilepath());
@@ -380,11 +376,11 @@ private void copyExportToDropbox() {
     }
 
     /**
-     * Copies the exported file from the internal storage where it is generated to external storage
-     * which is accessible to the user
-     * @return File to which the export was copied
+     * Moves the exported file from the internal storage where it is generated to external storage
+     * which is accessible to the user.
+     * @return File to which the export was moved.
      */
-    private File copyExportToSDCard() {
+    private File moveExportToSDCard() {
         Log.i(TAG, "Moving exported file to external storage");
         File src = new File(mExportParams.getTargetFilepath());
         File dst = Exporter.createExportFile(mExportParams.getExportFormat());
@@ -433,7 +429,7 @@ private void shareFile(String path) {
         ArrayList<Uri> exportFiles = new ArrayList<>();
         if (mExportParams.getExportFormat() == ExportFormat.QIF) {
             try {
-                List<String> splitFiles = splitQIF(new File(path), new File(path));
+                List<String> splitFiles = QifExporter.splitQIF(new File(path));
                 for (String file : splitFiles) {
                     exportFiles.add(Uri.parse("file://" + file));
                 }
@@ -477,58 +473,15 @@ private void shareFile(String path) {
      */
     public void copyFile(File src, File dst) throws IOException {
         //TODO: Make this asynchronous at some time, t in the future.
-        if (mExportParams.getExportFormat() == ExportFormat.QIF) {
-            splitQIF(src, dst);
-        } else {
-            FileChannel inChannel = new FileInputStream(src).getChannel();
-            FileChannel outChannel = new FileOutputStream(dst).getChannel();
-            try {
-                inChannel.transferTo(0, inChannel.size(), outChannel);
-            } finally {
-                if (inChannel != null)
-                    inChannel.close();
-                outChannel.close();
-            }
-        }
-    }
-
-    /**
-     * Copies a file from <code>src</code> to <code>dst</code>
-     * @param src Absolute path to the source file
-     * @param dst Absolute path to the destination file
-     * @throws IOException if the file could not be copied
-     */
-    private static List<String> splitQIF(File src, File dst) throws IOException {
-        // split only at the last dot
-        String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
-        ArrayList<String> splitFiles = new ArrayList<>();
-        String line;
-        BufferedReader in = new BufferedReader(new FileReader(src));
-        BufferedWriter out = null;
+        FileChannel inChannel = new FileInputStream(src).getChannel();
+        FileChannel outChannel = new FileOutputStream(dst).getChannel();
         try {
-            while ((line = in.readLine()) != null) {
-                if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
-                    String currencyCode = line.substring(1);
-                    if (out != null) {
-                        out.close();
-                    }
-                    String newFileName = pathParts[0] + "_" + currencyCode + pathParts[1];
-                    splitFiles.add(newFileName);
-                    out = new BufferedWriter(new FileWriter(newFileName));
-                } else {
-                    if (out == null) {
-                        throw new IllegalArgumentException(src.getPath() + " format is not correct");
-                    }
-                    out.append(line).append('\n');
-                }
-            }
+            inChannel.transferTo(0, inChannel.size(), outChannel);
         } finally {
-            in.close();
-            if (out != null) {
-                out.close();
-            }
+            if (inChannel != null)
+                inChannel.close();
+            outChannel.close();
         }
-        return splitFiles;
     }
 
 }
diff --git a/app/src/main/java/org/gnucash/android/export/ExportParams.java b/app/src/main/java/org/gnucash/android/export/ExportParams.java
index 715f9d89..6b23ede1 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportParams.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportParams.java
@@ -85,7 +85,8 @@ public ExportFormat getExportFormat() {
      */
     public void setExportFormat(ExportFormat exportFormat) {
         this.mExportFormat = exportFormat;
-        mTargetFilepath = GnuCashApplication.getAppContext().getFilesDir() + "/" + Exporter.buildExportFilename(mExportFormat);
+        this.mTargetFilepath = GnuCashApplication.getAppContext().getFilesDir() + "/"
+                            + Exporter.buildExportFilename(mExportFormat);
     }
 
     /**
@@ -145,14 +146,6 @@ public String getTargetFilepath() {
         return mTargetFilepath;
     }
 
-    /**
-     * Sets target file path for transactions in private application storage
-     * @param mTargetFilepath String path to file
-     */
-    public void setTargetFilepath(String mTargetFilepath) {
-        this.mTargetFilepath = mTargetFilepath;
-    }
-
     @Override
     public String toString() {
         return "Export " + mExportFormat.name() + " to " + mExportTarget.name() + " at "
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index 2de23b82..27f36271 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -27,11 +27,18 @@
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Transaction;
 
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.math.BigDecimal;
 import java.sql.Timestamp;
+import java.util.ArrayList;
 import java.util.Currency;
+import java.util.List;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 import static org.gnucash.android.db.DatabaseSchema.SplitEntry;
@@ -214,4 +221,44 @@ public void generateExport(Writer writer) throws ExporterException {
         String timeStamp = new Timestamp(System.currentTimeMillis()).toString();
         PreferenceManager.getDefaultSharedPreferences(mContext).edit().putString(Exporter.PREF_LAST_EXPORT_TIME, timeStamp).apply();
     }
+
+    /**
+     * Splits a Qif file into several ones for each currency.
+     *
+     * @param file File object of the Qif file to split.
+     * @return a list of paths of the newly created Qif files.
+     * @throws IOException if something went wrong while splitting the file.
+     */
+    public static List<String> splitQIF(File file) throws IOException {
+        // split only at the last dot
+        String[] pathParts = file.getPath().split("(?=\\.[^\\.]+$)");
+        ArrayList<String> splitFiles = new ArrayList<>();
+        String line;
+        BufferedReader in = new BufferedReader(new FileReader(file));
+        BufferedWriter out = null;
+        try {
+            while ((line = in.readLine()) != null) {
+                if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
+                    String currencyCode = line.substring(1);
+                    if (out != null) {
+                        out.close();
+                    }
+                    String newFileName = pathParts[0] + "_" + currencyCode + pathParts[1];
+                    splitFiles.add(newFileName);
+                    out = new BufferedWriter(new FileWriter(newFileName));
+                } else {
+                    if (out == null) {
+                        throw new IllegalArgumentException(file.getPath() + " format is not correct");
+                    }
+                    out.append(line).append('\n');
+                }
+            }
+        } finally {
+            in.close();
+            if (out != null) {
+                out.close();
+            }
+        }
+        return splitFiles;
+    }
 }
