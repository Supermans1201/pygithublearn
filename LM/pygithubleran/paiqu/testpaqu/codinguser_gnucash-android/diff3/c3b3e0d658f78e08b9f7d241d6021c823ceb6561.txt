From c3b3e0d658f78e08b9f7d241d6021c823ceb6561 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 13 Apr 2015 18:17:11 +0200
Subject: [PATCH] Fixed: editing the schedule of a scheduled transaction
 instead created a new one

Improved the repeat strings for scheduled actions
Added foreign key constraint to transactions table for scheduled action unique ID
Code refactoring
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 39 ++-----------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 25 ++++++++
 .../org/gnucash/android/db/DatabaseHelper.java     |  5 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |  2 +-
 .../android/db/ScheduledActionDbAdapter.java       | 42 +++++++++++---
 .../gnucash/android/db/TransactionsDbAdapter.java  | 17 +++---
 .../java/org/gnucash/android/model/PeriodType.java |  8 +--
 .../org/gnucash/android/model/ScheduledAction.java | 16 ++++--
 .../ScheduledTransactionsListFragment.java         |  8 +--
 .../ui/transaction/TransactionFormFragment.java    | 67 +++++++++++++++-------
 .../gnucash/android/ui/util/RecurrenceParser.java  |  5 +-
 11 files changed, 146 insertions(+), 88 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 55c5213f..d25e00eb 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -1116,17 +1116,8 @@ public String getFullyQualifiedAccountName(long accountId){
      * @return <code>true</code> if the account is a placeholder account, <code>false</code> otherwise
      */
     public boolean isPlaceholderAccount(String accountUID) {
-        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
-                new String[]{AccountEntry.COLUMN_PLACEHOLDER},
-                AccountEntry.COLUMN_UID + " = ?",
-                new String[]{accountUID}, null, null, null);
-
-        try {
-            return cursor.moveToFirst()
-                    && cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_PLACEHOLDER)) == 1;
-        } finally {
-            cursor.close();
-        }
+        String isPlaceholder = getAttribute(accountUID, AccountEntry.COLUMN_PLACEHOLDER);
+        return Integer.parseInt(isPlaceholder) == 1;
     }
 
     /**
@@ -1135,17 +1126,8 @@ public boolean isPlaceholderAccount(String accountUID) {
      * @return <code>true</code> if the account is hidden, <code>false</code> otherwise
      */
     public boolean isHiddenAccount(String accountUID){
-        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
-                new String[]{AccountEntry.COLUMN_HIDDEN},
-                AccountEntry.COLUMN_UID + " = ?",
-                new String[]{accountUID}, null, null, null);
-
-        try {
-            return cursor.moveToFirst()
-                    && cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_HIDDEN)) == 1;
-        } finally {
-            cursor.close();
-        }
+        String isHidden = getAttribute(accountUID, AccountEntry.COLUMN_HIDDEN);
+        return Integer.parseInt(isHidden) == 1;
     }
 
     /**
@@ -1154,17 +1136,8 @@ public boolean isHiddenAccount(String accountUID){
      * @return <code>true</code> if the account is a favorite account, <code>false</code> otherwise
      */
     public boolean isFavoriteAccount(String accountUID){
-        Cursor cursor = mDb.query(AccountEntry.TABLE_NAME,
-                new String[]{AccountEntry.COLUMN_FAVORITE},
-                AccountEntry.COLUMN_UID + " = ?", new String[]{accountUID},
-                null, null, null);
-
-        try {
-            return cursor.moveToFirst()
-                    && cursor.getInt(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_FAVORITE)) == 1;
-        } finally {
-            cursor.close();
-        }
+        String isFavorite = getAttribute(accountUID, AccountEntry.COLUMN_FAVORITE);
+        return Integer.parseInt(isFavorite) == 1;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 647a0196..0f976dda 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -400,6 +400,31 @@ public boolean deleteRecord(@NonNull String uid){
     }
 
     /**
+     * Returns an attribute from a specific column in the database for a specific record.
+     * <p>The attribute is returned as a string which can then be converted to another type if
+     * the caller was expecting something other type </p>
+     * @param recordUID GUID of the record
+     * @param columnName Name of the column to be retrieved
+     * @return String value of the column entry
+     * @throws IllegalArgumentException if either the {@code recordUID} or {@code columnName} do not exist in the database
+     */
+    protected String getAttribute(@NonNull String recordUID, @NonNull String columnName){
+        Cursor cursor = mDb.query(mTableName,
+                new String[]{columnName},
+                AccountEntry.COLUMN_UID + " = ?",
+                new String[]{recordUID}, null, null, null);
+
+        try {
+            if (cursor.moveToFirst())
+                return cursor.getString(cursor.getColumnIndexOrThrow(columnName));
+            else
+                throw new IllegalArgumentException("Column or GUID does not exist in the db");
+        } finally {
+            cursor.close();
+        }
+    }
+
+    /**
      * Expose mDb.beginTransaction()
      */
     public void beginTransaction() {
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index cf3bc009..37f9cd96 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -83,7 +83,8 @@
             + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
             + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " varchar(255), "
             + TransactionEntry.COLUMN_CREATED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
-            + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
+            + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+            + "FOREIGN KEY (" 	+ TransactionEntry.COLUMN_SCHEDX_ACTION_UID + ") REFERENCES " + ScheduledActionEntry.TABLE_NAME + " (" + ScheduledActionEntry.COLUMN_UID + ") ON DELETE SET NULL "
 			+ ");" + createUpdatedAtTrigger(TransactionEntry.TABLE_NAME);
 
     /**
@@ -107,7 +108,7 @@
     public static final String SCHEDULED_ACTIONS_TABLE_CREATE = "CREATE TABLE " + ScheduledActionEntry.TABLE_NAME + " ("
             + ScheduledActionEntry._ID                   + " integer primary key autoincrement, "
             + ScheduledActionEntry.COLUMN_UID            + " varchar(255) not null UNIQUE, "
-            + ScheduledActionEntry.COLUMN_ACTION_UID + " varchar(255) not null, "
+            + ScheduledActionEntry.COLUMN_ACTION_UID    + " varchar(255) not null, "
             + ScheduledActionEntry.COLUMN_TYPE           + " varchar(255) not null, "
             + ScheduledActionEntry.COLUMN_PERIOD         + " integer not null, "
             + ScheduledActionEntry.COLUMN_LAST_RUN       + " integer default 0, "
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index f658ca6d..9301449a 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -79,7 +79,7 @@ private DatabaseSchema(){}
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
         public static final String COLUMN_TEMPLATE              = "is_template";
-        public static final String COLUMN_SCHEDX_ACTION_UID     = "schedx_action_uid";
+        public static final String COLUMN_SCHEDX_ACTION_UID     = "scheduled_action_uid";
 
         public static final String INDEX_UID                    = "transaction_uid_index";
     }
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index d5c427cf..7bb909be 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -72,6 +72,29 @@ public long addScheduledAction(ScheduledAction scheduledAction){
     }
 
     /**
+     * Updates only the recurrence attributes of the scheduled action.
+     * The recurrence attributes are the period, start time, end time and/or total frequency.
+     * All other properties of a scheduled event are only used for interal database tracking and are
+     * not central to the recurrence schedule.
+     * <p><b>The GUID of the scheduled action should already exist in the database</b></p>
+     * @param scheduledAction Scheduled action
+     * @return Database record ID of the edited scheduled action
+     */
+    public long updateRecurrenceAttributes(ScheduledAction scheduledAction){
+        ContentValues contentValues = getContentValues(scheduledAction);
+        contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    scheduledAction.getPeriod());
+        contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
+        contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
+        contentValues.put(ScheduledActionEntry.COLUMN_TAG,       scheduledAction.getTag());
+        contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, scheduledAction.getTotalFrequency());
+
+        Log.d(TAG, "Updating scheduled event recurrence attributes");
+        String where = ScheduledActionEntry.COLUMN_UID + "=?";
+        String[] whereArgs = new String[]{scheduledAction.getUID()};
+        return mDb.update(ScheduledActionEntry.TABLE_NAME, contentValues, where, whereArgs);
+    }
+
+    /**
      * Adds a multiple scheduled actions to the database in one transaction.
      * @param scheduledActionList List of ScheduledActions
      * @return Returns the number of rows inserted
@@ -96,16 +119,19 @@ public int bulkAddScheduledActions(List<ScheduledAction> scheduledActionList){
                     + ScheduledActionEntry.COLUMN_EXECUTION_COUNT   + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )");
             for (ScheduledAction schedxAction:scheduledActionList) {
                 replaceStatement.clearBindings();
-                replaceStatement.bindString(1,  schedxAction.getUID());
-                replaceStatement.bindString(2,  schedxAction.getActionUID());
-                replaceStatement.bindString(3,  schedxAction.getActionType().name());
-                replaceStatement.bindLong(4,    schedxAction.getStartTime());
-                replaceStatement.bindLong(5,    schedxAction.getEndTime());
-                replaceStatement.bindLong(6,    schedxAction.getLastRun());
-                replaceStatement.bindLong(7,    schedxAction.getPeriod());
+                replaceStatement.bindString(1, schedxAction.getUID());
+                replaceStatement.bindString(2, schedxAction.getActionUID());
+                replaceStatement.bindString(3, schedxAction.getActionType().name());
+                replaceStatement.bindLong(4, schedxAction.getStartTime());
+                replaceStatement.bindLong(5, schedxAction.getEndTime());
+                replaceStatement.bindLong(6, schedxAction.getLastRun());
+                replaceStatement.bindLong(7, schedxAction.getPeriod());
                 replaceStatement.bindLong(8,    schedxAction.isEnabled() ? 1 : 0);
                 replaceStatement.bindString(9,  schedxAction.getCreatedTimestamp().toString());
-                replaceStatement.bindString(10, schedxAction.getTag());
+                if (schedxAction.getTag() == null)
+                    replaceStatement.bindNull(10);
+                else
+                    replaceStatement.bindString(10, schedxAction.getTag());
                 replaceStatement.bindString(11, Integer.toString(schedxAction.getTotalFrequency()));
                 replaceStatement.bindString(12, Integer.toString(schedxAction.getExecutionCount()));
 
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 9981f591..f8074679 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -156,14 +156,17 @@ public long bulkAddTransactions(List<Transaction> transactionList){
             for (Transaction transaction : transactionList) {
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
-                replaceStatement.bindString(1,  transaction.getUID());
-                replaceStatement.bindString(2,  transaction.getDescription());
-                replaceStatement.bindString(3,  transaction.getNote());
-                replaceStatement.bindLong(4,    transaction.getTimeMillis());
-                replaceStatement.bindLong(5,    transaction.isExported() ? 1 : 0);
+                replaceStatement.bindString(1, transaction.getUID());
+                replaceStatement.bindString(2, transaction.getDescription());
+                replaceStatement.bindString(3, transaction.getNote());
+                replaceStatement.bindLong(4, transaction.getTimeMillis());
+                replaceStatement.bindLong(5, transaction.isExported() ? 1 : 0);
                 replaceStatement.bindString(6,  transaction.getCurrencyCode());
                 replaceStatement.bindString(7,  transaction.getCreatedTimestamp().toString());
-                replaceStatement.bindString(8,  transaction.getScheduledActionUID());
+                if (transaction.getScheduledActionUID() == null)
+                    replaceStatement.bindNull(8);
+                else
+                    replaceStatement.bindString(8,  transaction.getScheduledActionUID());
                 replaceStatement.bindLong(9,    transaction.isTemplate() ? 1 : 0);
                 replaceStatement.execute();
                 rowInserted ++;
@@ -272,7 +275,7 @@ public Cursor fetchAllScheduledTransactions(){
                 + ScheduledActionEntry.TABLE_NAME + "." + ScheduledActionEntry.COLUMN_ACTION_UID);
 
         String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*",
-                ScheduledActionEntry.TABLE_NAME+"."+ScheduledActionEntry.COLUMN_UID};
+                ScheduledActionEntry.TABLE_NAME+"."+ScheduledActionEntry.COLUMN_UID + " AS " + "origin_scheduled_action_uid"};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
 //        queryBuilder.setDistinct(true);
 
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
index 81039747..dc3b2d25 100644
--- a/app/src/main/java/org/gnucash/android/model/PeriodType.java
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -82,13 +82,13 @@ public String getFrequencyRepeatString(){
 
         switch (this) {
             case DAY:
-                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_days, mMultiplier, mMultiplier);
             case WEEK:
-                return res.getQuantityString(R.plurals.label_every_x_weeks, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_weeks, mMultiplier, mMultiplier);
             case MONTH:
-                return res.getQuantityString(R.plurals.label_every_x_months, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_months, mMultiplier, mMultiplier);
             case YEAR:
-                return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier);
+                return res.getQuantityString(R.plurals.label_every_x_years, mMultiplier, mMultiplier);
             default:
                 return "";
         }
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index f84f983a..e0f5a02f 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -331,17 +331,21 @@ public void setExecutionCount(int executionCount){
      * @return String description of repeat schedule
      */
     public String getRepeatString(){
-        String dayOfWeek = new SimpleDateFormat("EE", Locale.US).format(new Date(mStartDate));
+        String dayOfWeek = new SimpleDateFormat("EEEE", Locale.US).format(new Date(mStartDate));
         PeriodType periodType = getPeriodType();
         StringBuilder ruleBuilder = new StringBuilder(periodType.getFrequencyRepeatString());
-        ruleBuilder.append(" on ").append(dayOfWeek);
-        ruleBuilder.append(";");
+
+        if (periodType == PeriodType.WEEK) {
+            ruleBuilder.append(" on ").append(dayOfWeek);
+        }
+
         if (mEndDate > 0){
+            ruleBuilder.append(", ");
             ruleBuilder.append(" until ")
-                    .append(SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(new Date(mEndDate)))
-                    .append(";");
+                    .append(SimpleDateFormat.getDateInstance(DateFormat.SHORT).format(new Date(mEndDate)));
         } else if (mTotalFrequency > 0){
-            ruleBuilder.append(" for ").append(mTotalFrequency).append(" times;");
+            ruleBuilder.append(", ");
+            ruleBuilder.append(" for ").append(mTotalFrequency).append(" times");
         }
         return ruleBuilder.toString();
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index f9cbb3fe..39ef8382 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -110,12 +110,12 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                         Log.i(TAG, "Cancelling scheduled transaction(s)");
                         String trnUID = mTransactionsDbAdapter.getUID(id);
                         ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-                        List<ScheduledAction> events = scheduledActionDbAdapter.getScheduledActionsWithUID(trnUID);
+                        List<ScheduledAction> actions = scheduledActionDbAdapter.getScheduledActionsWithUID(trnUID);
 
                         if (mTransactionsDbAdapter.deleteRecord(id)){
                             Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
-                            for (ScheduledAction event : events) {
-                                scheduledActionDbAdapter.deleteRecord(event.getUID());
+                            for (ScheduledAction action : actions) {
+                                scheduledActionDbAdapter.deleteRecord(action.getUID());
                             }
                         }
                     }
@@ -382,7 +382,7 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
-            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseSchema.ScheduledActionEntry.TABLE_NAME+"."+ DatabaseSchema.ScheduledActionEntry.COLUMN_UID));
+            String scheduledActionUID = cursor.getString(cursor.getColumnIndexOrThrow("origin_scheduled_action_uid"));
             view.setTag(scheduledActionUID);
             ScheduledAction scheduledAction = scheduledActionDbAdapter.getScheduledAction(scheduledActionUID);
             descriptionTextView.setText(scheduledAction.getRepeatString());
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 85996d7b..8d2b1342 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -59,7 +59,6 @@
 import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
 
 import org.gnucash.android.R;
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
@@ -191,7 +190,7 @@
     /**
      * Checkbox indicating if this transaction should be saved as a template or not
      */
-    private CheckBox mSaveTemplate;
+    private CheckBox mSaveTemplateCheckbox;
 
     /**
      * Flag to note if double entry accounting is in use or not
@@ -221,6 +220,8 @@
 
     private List<Split> mSplitsList = new ArrayList<Split>();
 
+    private boolean mEditMode = false;
+
     /**
 	 * Create the view and retrieve references to the UI elements
 	 */
@@ -239,7 +240,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		mDoubleAccountSpinner   = (Spinner) v.findViewById(R.id.input_double_entry_accounts_spinner);
         mOpenSplitsButton       = (Button) v.findViewById(R.id.btn_open_splits);
         mRecurrenceTextView     = (TextView) v.findViewById(R.id.input_recurrence);
-        mSaveTemplate           = (CheckBox) v.findViewById(R.id.checkbox_save_template);
+        mSaveTemplateCheckbox = (CheckBox) v.findViewById(R.id.checkbox_save_template);
         return v;
 	}
 
@@ -300,6 +301,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             initTransactionNameAutocomplete();
         } else {
 			initializeViewsWithTransaction();
+            mEditMode = true;
 		}
 
 
@@ -434,7 +436,7 @@ private void initializeViewsWithTransaction(){
             enableControls(false);
         }
 
-        mSaveTemplate.setChecked(mTransaction.isTemplate());
+        mSaveTemplateCheckbox.setChecked(mTransaction.isTemplate());
         String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
         if (scheduledActionUID != null && !scheduledActionUID.isEmpty()) {
             ScheduledAction scheduledAction = ScheduledActionDbAdapter.getInstance().getScheduledAction(scheduledActionUID);
@@ -734,19 +736,24 @@ private void saveNewTransaction() {
 
             // set as not exported.
             mTransaction.setExported(false);
-            //save the normal transaction first
+            mTransaction.setTemplate(mSaveTemplateCheckbox.isChecked());
             mTransactionsDbAdapter.addTransaction(mTransaction);
 
-            if (mSaveTemplate.isChecked()) {
-                Transaction templateTransaction;
-                //creating a new recurring transaction
-                templateTransaction = new Transaction(mTransaction, true);
-                templateTransaction.setTemplate(true);
-                mTransactionsDbAdapter.addTransaction(templateTransaction);
-
-                //inside the if statement because scheduling always creates a template
+            if (mSaveTemplateCheckbox.isChecked()) {
+                Transaction templateTransaction = mTransaction;
+                if (!mEditMode) { //means it was new transaction, so a new template
+                    templateTransaction = new Transaction(mTransaction, true);
+                    templateTransaction.setTemplate(true);
+                    mTransactionsDbAdapter.addTransaction(templateTransaction);
+                }
                 scheduleRecurringTransaction(templateTransaction.getUID());
+            } else {
+                String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
+                if (scheduledActionUID != null){ //we were editing a schedule and it was turned off
+                    ScheduledActionDbAdapter.getInstance().deleteRecord(scheduledActionUID);
+                }
             }
+
             mAccountsDbAdapter.setTransactionSuccessful();
         }
         finally {
@@ -764,13 +771,27 @@ private void saveNewTransaction() {
      * @see #saveNewTransaction()
      */
     private void scheduleRecurringTransaction(String transactionUID) {
+        ScheduledActionDbAdapter scheduledActionDbAdapter = ScheduledActionDbAdapter.getInstance();
+
         List<ScheduledAction> events = RecurrenceParser.parse(mEventRecurrence,
                 ScheduledAction.ActionType.TRANSACTION);
 
-        if (events.size() == 0) //there are no scheduled events detected
-            return;
+        String scheduledActionUID = getArguments().getString(UxArgument.SCHEDULED_ACTION_UID);
+
+        if (scheduledActionUID != null) { //if we are editing an existing schedule
+            if ( events.size() == 1) {
+                ScheduledAction scheduledAction = events.get(0);
+                scheduledAction.setUID(scheduledActionUID);
+                scheduledActionDbAdapter.updateRecurrenceAttributes(scheduledAction);
+                Toast.makeText(getActivity(), "Updated transaction schedule", Toast.LENGTH_SHORT).show();
+                return;
+            } else {
+                //if user changed scheduled action so that more than one new schedule would be saved,
+                // then remove the old one
+                ScheduledActionDbAdapter.getInstance().deleteRecord(scheduledActionUID);
+            }
+        }
 
-        ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
         for (ScheduledAction event : events) {
             event.setActionUID(transactionUID);
             event.setLastRun(System.currentTimeMillis());
@@ -778,8 +799,10 @@ private void scheduleRecurringTransaction(String transactionUID) {
 
             Log.i("TransactionFormFragment", event.toString());
         }
-        if (events.size() > 0) //TODO: localize this toast string for all supported locales
-            Toast.makeText(getActivity(), "Scheduled transaction", Toast.LENGTH_SHORT).show();
+        Toast.makeText(getActivity(), "Scheduled transaction", Toast.LENGTH_SHORT).show();
+
+        //TODO: localize this toast string for all supported locales
+
     }
 
 
@@ -937,11 +960,11 @@ public void onRecurrenceSet(String rrule) {
             repeatString = EventRecurrenceFormatter.getRepeatString(getActivity(), getResources(), mEventRecurrence, true);
 
             //when recurrence is set, we will definitely be saving a template
-            mSaveTemplate.setChecked(true);
-            mSaveTemplate.setEnabled(false);
+            mSaveTemplateCheckbox.setChecked(true);
+            mSaveTemplateCheckbox.setEnabled(false);
         } else {
-            mSaveTemplate.setEnabled(true);
-            mSaveTemplate.setChecked(false);
+            mSaveTemplateCheckbox.setEnabled(true);
+            mSaveTemplateCheckbox.setChecked(false);
         }
 
         mRecurrenceTextView.setText(repeatString);
diff --git a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
index fe5b993d..81a03141 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/RecurrenceParser.java
@@ -50,8 +50,11 @@
      * @return List of ScheduledEvents
      */
     public static List<ScheduledAction> parse(EventRecurrence eventRecurrence, ScheduledAction.ActionType actionType){
-        long period = 0;
+        long period;
         List<ScheduledAction> scheduledActionList = new ArrayList<ScheduledAction>();
+        if (eventRecurrence == null)
+            return scheduledActionList;
+
         switch(eventRecurrence.freq){
             case EventRecurrence.DAILY: {
                 if (eventRecurrence.interval == 0) //I assume this is a bug from the picker library
