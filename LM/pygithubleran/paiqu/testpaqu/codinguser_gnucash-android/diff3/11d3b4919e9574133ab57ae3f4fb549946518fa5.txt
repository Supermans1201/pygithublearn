From 11d3b4919e9574133ab57ae3f4fb549946518fa5 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 14 Mar 2015 11:58:40 +0100
Subject: [PATCH] Fixed: bug causing template transactions not to be created in
 the database

Added template flag for transactions to database
Removed unused code for exporting single Accounts/Transactions/Splits as XML

TODO: Properly export template transactions as XML
---
 app/build.gradle                                   |   4 +-
 app/src/main/AndroidManifest.xml                   |   2 +-
 .../gnucash/android/app/GnuCashApplication.java    |   4 +-
 .../org/gnucash/android/db/DatabaseAdapter.java    |  12 +--
 .../org/gnucash/android/db/DatabaseHelper.java     |  10 +-
 .../org/gnucash/android/db/DatabaseSchema.java     |   6 +-
 .../org/gnucash/android/db/MigrationHelper.java    |  32 ------
 .../android/db/ScheduledEventDbAdapter.java        |  14 +--
 .../org/gnucash/android/db/SplitsDbAdapter.java    |  35 +++----
 .../gnucash/android/db/TransactionsDbAdapter.java  |  57 +++--------
 .../gnucash/android/export/qif/QifExporter.java    |   2 +-
 .../gnucash/android/export/xml/GncXmlExporter.java | 110 ---------------------
 .../gnucash/android/export/xml/GncXmlHelper.java   |   1 +
 .../gnucash/android/importer/GncXmlHandler.java    |   7 +-
 .../java/org/gnucash/android/model/Account.java    |  69 -------------
 .../java/org/gnucash/android/model/BaseModel.java  |  47 ++++++++-
 .../main/java/org/gnucash/android/model/Split.java |  39 --------
 .../org/gnucash/android/model/Transaction.java     |  97 +++---------------
 .../gnucash/android/service/SchedulerService.java  |  22 ++++-
 .../android/ui/account/AccountsActivity.java       |  16 +--
 .../android/ui/settings/SettingsActivity.java      |   3 +-
 .../ScheduledTransactionsListFragment.java         |  15 ++-
 .../ui/transaction/TransactionFormFragment.java    |  17 ++--
 build.gradle                                       |   2 +-
 24 files changed, 172 insertions(+), 451 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 2e8b58bb..b6f217c1 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 18
+    compileSdkVersion 19
     buildToolsVersion "21.1.2"
 
     defaultConfig {
         applicationId "org.gnucash.android"
         minSdkVersion 9
-        targetSdkVersion 18
+        targetSdkVersion 19
         versionCode 48
         versionName "1.6.x"
     }
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index afa2331a..c1be1b1e 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -20,7 +20,7 @@
     android:versionCode="48"
     android:versionName="@string/app_version_name" >
 
-    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18"/>
+    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="19"/>
     
     <permission-group 
         android:name="org.gnucash.android.permission.group.GNUCASH"
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index e7ef50a2..09e86289 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -165,8 +165,8 @@ public static void startScheduledEventExecutionService(Context context){
 
         AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
         alarmManager.cancel(pendingIntent); //if it already exists
-        alarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,
-                SystemClock.elapsedRealtime() + AlarmManager.INTERVAL_DAY,
+        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,
+                System.currentTimeMillis() + AlarmManager.INTERVAL_DAY,
                 AlarmManager.INTERVAL_DAY, pendingIntent);
 
     }
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 8722173a..fb944a8b 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 - 2014 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -84,8 +84,8 @@ private void createTempView() {
                         + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TIMESTAMP + " , "
                         + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + " AS "
                         + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_EXPORTED + " , "
-                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " AS "
-                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " , "
+                        + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " AS "
+                        + TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " , "
                         + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_UID + " AS "
                         + SplitEntry.TABLE_NAME + "_" + SplitEntry.COLUMN_UID + " , "
                         + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " AS "
@@ -335,7 +335,7 @@ public AccountType getAccountType(@NonNull String accountUID){
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateRecord(String tableName, long recordId, String columnKey, String newValue) {
+    protected int updateRecord(String tableName, long recordId, String columnKey, String newValue) {
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
@@ -353,14 +353,14 @@ public int updateRecord(String tableName, long recordId, String columnKey, Strin
      * @param newValue  New value to be assigned to the columnKey
      * @return Number of records affected
      */
-    public int updateRecord(@NonNull String tableName, @NonNull String uid, String columnKey, String newValue) {
+    public int updateRecord(@NonNull String uid, @NonNull String columnKey, String newValue) {
         ContentValues contentValues = new ContentValues();
         if (newValue == null) {
             contentValues.putNull(columnKey);
         } else {
             contentValues.put(columnKey, newValue);
         }
-        return mDb.update(tableName, contentValues,
+        return mDb.update(mTableName, contentValues,
                 CommonColumns.COLUMN_UID + "= ?", new String[]{uid});
     }
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 2ff943e2..7b147b15 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -88,10 +88,10 @@
 			+ TransactionEntry.COLUMN_NOTES         + " text, "
 			+ TransactionEntry.COLUMN_TIMESTAMP     + " integer not null, "
 			+ TransactionEntry.COLUMN_EXPORTED      + " tinyint default 0, "
+			+ TransactionEntry.COLUMN_TEMPLATE      + " tinyint default 0, "
             + TransactionEntry.COLUMN_CURRENCY      + " varchar(255) not null, "
-            + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " integer default 0, "
-            + TransactionEntry.COLUMN_CREATED_AT       + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
-            + TransactionEntry.COLUMN_MODIFIED_AT      + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
+            + TransactionEntry.COLUMN_CREATED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+            + TransactionEntry.COLUMN_MODIFIED_AT   + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
 			+ ");" + createUpdatedAtTrigger(TransactionEntry.TABLE_NAME);
 
     /**
@@ -358,6 +358,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 Log.i(LOG_TAG, "Upgrading database to version 8");
                 //TODO: consider just backing up, recreating database and reimporting
                 //FIXME: We really need to do this because the ON DELETE CASCADE constraint does not exist on older db versions
+
                 //TODO: Also, we need to go through db and add second split with imbalance account wherever only one split exists.
 
                 Log.i(LOG_TAG, "Adding hidden flag to accounts table");
@@ -371,9 +372,10 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 MigrationHelper.createUpdatedAndModifiedColumns(db, SplitEntry.TABLE_NAME);
 
                 Log.i(LOG_TAG, "Creating scheduled events table");
-                db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE);
+                db.execSQL(SCHEDULED_EVENTS_TABLE_CREATE); //TODO: Use the actual SQL statements
                 //TODO: Migrate existing scheduled transactions (cancel pending intents)
 
+                //TODO: Migrate old scheduled events using only SQL, code had changed
                 GnuCashApplication.startScheduledEventExecutionService(GnuCashApplication.getAppContext());
 
 
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index 1641ad99..49177290 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -28,7 +28,7 @@
      * Database version.
      * With any change to the database schema, this number must increase
      */
-    static final int DATABASE_VERSION = 7;
+    static final int DATABASE_VERSION = 7; //TODO: Upgrade database version when migration code is complete
 
     /**
      * Database version where Splits were introduced
@@ -78,6 +78,10 @@ private DatabaseSchema(){}
         public static final String COLUMN_CURRENCY              = "currency_code";
         public static final String COLUMN_TIMESTAMP             = "timestamp";
         public static final String COLUMN_EXPORTED              = "is_exported";
+        public static final String COLUMN_TEMPLATE              = "is_template";
+
+        //TODO: find all recurrences and fix
+        @Deprecated
         public static final String COLUMN_RECURRENCE_PERIOD     = "recurrence_period";
 
         public static final String INDEX_UID                    = "transaction_uid_index";
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index fc67e358..87fa1f3b 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -109,38 +109,6 @@ private static String getGnuCashRootAccountUID(SQLiteDatabase db){
     }
 
     /**
-     * Exports the database to a GnuCash XML file and returns the path to the file
-     * @return String with exported GnuCash XML
-     */
-    static String exportGnucashXML(SQLiteDatabase db) throws IOException {
-        Log.i(LOG_TAG, "Exporting database to GnuCash XML");
-        ExportParams exportParams = new ExportParams(ExportFormat.GNC_XML);
-        exportParams.setExportAllTransactions(true);
-        exportParams.setExportTarget(ExportParams.ExportTarget.SD_CARD);
-        exportParams.setDeleteTransactionsAfterExport(false);
-
-        new File(Environment.getExternalStorageDirectory() + "/gnucash/").mkdirs();
-        exportParams.setTargetFilepath(Environment.getExternalStorageDirectory()
-                + "/gnucash/" + Exporter.buildExportFilename(ExportFormat.GNC_XML));
-
-        //we do not use the ExporterAsyncTask here because we want to use an already open db
-        GncXmlExporter exporter = new GncXmlExporter(exportParams, db);
-        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
-                new FileOutputStream(exportParams.getTargetFilepath()), "UTF-8"));
-        try {
-            String xml = exporter.generateXML();
-            writer.write(xml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } finally {
-            writer.flush();
-            writer.close();
-        }
-
-        return exportParams.getTargetFilepath();
-    }
-
-    /**
      * Imports GnuCash XML into the database from file
      * @param filepath Path to GnuCash XML file
      */
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
index acd73f93..eb8c7cd6 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledEventDbAdapter.java
@@ -112,24 +112,24 @@ public ScheduledEvent getScheduledEvent(String uid){
     }
 
     /**
-     * Returns an instance of {@link org.gnucash.android.model.ScheduledEvent} from the database record
+     * Returns all {@link org.gnucash.android.model.ScheduledEvent}s from the database with the specified event UID
      * @param eventUID GUID of the event itself
-     * @return ScheduledEvent object instance
+     * @return List of ScheduledEvents
      */
-    public ScheduledEvent getScheduledEventWithUID(@NonNull String eventUID){
+    public List<ScheduledEvent> getScheduledEventsWithUID(@NonNull String eventUID){
         Cursor cursor = mDb.query(ScheduledEventEntry.TABLE_NAME, null,
                 ScheduledEventEntry.COLUMN_EVENT_UID + "= ?",
                 new String[]{eventUID}, null, null, null);
 
-        ScheduledEvent scheduledEvent = null;
+        List<ScheduledEvent> scheduledEvents = new ArrayList<ScheduledEvent>();
         try {
-            if (cursor.moveToFirst()) {
-                scheduledEvent = buildScheduledEventInstance(cursor);
+            while (cursor.moveToNext()) {
+                scheduledEvents.add(buildScheduledEventInstance(cursor));
             }
         } finally {
             cursor.close();
         }
-        return scheduledEvent;
+        return scheduledEvents;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index 996b4ffd..0af0cb45 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -79,9 +79,14 @@ public long addSplit(Split split){
         Log.d(TAG, "Replace transaction split in db");
         long rowId = mDb.replace(SplitEntry.TABLE_NAME, null, contentValues);
 
+        long transactionId = getTransactionID(split.getTransactionUID());
         //when a split is updated, we want mark the transaction as not exported
-        updateRecord(TransactionEntry.TABLE_NAME, getTransactionID(split.getTransactionUID()),
+        updateRecord(TransactionEntry.TABLE_NAME, transactionId,
                 TransactionEntry.COLUMN_EXPORTED, String.valueOf(rowId > 0 ? 0 : 1));
+
+        //modifying a split means modifying the accompanying transaction as well
+        updateRecord(TransactionEntry.TABLE_NAME, transactionId,
+                TransactionEntry.COLUMN_MODIFIED_AT, Long.toString(System.currentTimeMillis()));
         return rowId;
     }
 
@@ -269,7 +274,7 @@ private Money calculateSplitBalance(List<String> accountUIDList, String currency
         String[] selectionArgs = null;
         String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " in ( '" + TextUtils.join("' , '", accountUIDList) + "' ) AND " +
                 SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID + " = " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AND " +
-                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+                TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
 
         if (startTimestamp != -1 && endTimestamp != -1) {
             selection += " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " BETWEEN ? AND ?";
@@ -396,7 +401,7 @@ public Cursor fetchSplitsForAccount(String accountUID){
         queryBuilder.setDistinct(true);
         String[] projectionIn = new String[]{SplitEntry.TABLE_NAME + ".*"};
         String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
-                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+                + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
         String[] selectionArgs = new String[]{accountUID};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
 
@@ -458,7 +463,9 @@ public boolean deleteRecord(long rowId) {
         Cursor cursor = fetchSplitsForTransaction(transactionUID);
         try {
             if (cursor.getCount() > 0) {
-                result = deleteTransaction(getTransactionID(transactionUID));
+                long transactionID = getTransactionID(transactionUID);
+                result = mDb.delete(TransactionEntry.TABLE_NAME,
+                        TransactionEntry._ID + "=" + transactionID, null) > 0;
             }
         } finally {
             cursor.close();
@@ -467,17 +474,6 @@ public boolean deleteRecord(long rowId) {
     }
 
     /**
-     * Deletes a split from the database.
-     * This is a convenience method which essentially calls {@link #deleteRecord(long)}
-     * @param uid String unique ID of split
-     * @return <code>true</code> if the split was deleted, <code>false</code> otherwise
-     */
-    public boolean deleteSplit(String uid) {
-        long id = getID(uid);
-        return deleteRecord(id);
-    }
-
-    /**
      * Returns the database record ID for the specified transaction UID
      * @param transactionUID Unique idendtifier of the transaction
      * @return Database record ID for the transaction
@@ -498,7 +494,7 @@ public long getTransactionID(String transactionUID) {
         }
     }
 
-    //TODO: After adding ON DELETE CASCADE to db, remove this method
+    //TODO: After adding ON DELETE CASCADE to db (and migration), remove this method
     /**
      * Deletes all splits for a particular transaction and the transaction itself
      * @param transactionId Database record ID of the transaction
@@ -518,11 +514,4 @@ public boolean deleteSplitsForTransaction(long transactionId) {
         }
     }
 
-    /**
-     * Deletes the transaction from the the database
-     * @param transactionId Database record ID of the transaction
-     */
-    private boolean deleteTransaction(long transactionId) {
-        return TransactionsDbAdapter.getInstance().deleteRecord(transactionId);
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 36b7de03..959fe6f5 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -82,8 +82,8 @@ public long addTransaction(Transaction transaction){
 		contentValues.put(TransactionEntry.COLUMN_TIMESTAMP,    transaction.getTimeMillis());
 		contentValues.put(TransactionEntry.COLUMN_NOTES,        transaction.getNote());
 		contentValues.put(TransactionEntry.COLUMN_EXPORTED,     transaction.isExported() ? 1 : 0);
+		contentValues.put(TransactionEntry.COLUMN_TEMPLATE,     transaction.isTemplate() ? 1 : 0);
         contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
-        contentValues.put(TransactionEntry.COLUMN_RECURRENCE_PERIOD, transaction.getRecurrencePeriod());
 
         Log.d(TAG, "Replacing transaction in db");
         long rowId = -1;
@@ -144,21 +144,21 @@ public long bulkAddTransactions(List<Transaction> transactionList){
                 + TransactionEntry.COLUMN_EXPORTED      + " , "
                 + TransactionEntry.COLUMN_CURRENCY      + " , "
                 + TransactionEntry.COLUMN_CREATED_AT    + " , "
-                + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?)");
+                + TransactionEntry.COLUMN_TEMPLATE + " ) VALUES ( ? , ? , ? , ?, ? , ? , ? , ?)");
             for (Transaction transaction : transactionList) {
-                if (transaction.getRecurrencePeriod() > 0) {
+                if (transaction.isTemplate()) { //TODO: Properly schedule transactions
                     scheduleTransaction(transaction);
                 }
                 //Log.d(TAG, "Replacing transaction in db");
                 replaceStatement.clearBindings();
-                replaceStatement.bindString(1, transaction.getUID());
+                replaceStatement.bindString(1,  transaction.getUID());
                 replaceStatement.bindString(2,  transaction.getDescription());
                 replaceStatement.bindString(3,  transaction.getNote());
-                replaceStatement.bindLong(4, transaction.getTimeMillis());
+                replaceStatement.bindLong(4,    transaction.getTimeMillis());
                 replaceStatement.bindLong(5,    transaction.isExported() ? 1 : 0);
-                replaceStatement.bindString(6, transaction.getCurrencyCode());
+                replaceStatement.bindString(6,  transaction.getCurrencyCode());
                 replaceStatement.bindString(7,  transaction.getCreatedTimestamp().toString());
-                replaceStatement.bindLong(8,    transaction.getRecurrencePeriod());
+                replaceStatement.bindLong(8,    transaction.isTemplate() ? 1 : 0);
                 replaceStatement.execute();
                 rowInserted ++;
                 splitList.addAll(transaction.getSplits());
@@ -185,28 +185,6 @@ public long bulkAddTransactions(List<Transaction> transactionList){
         return rowInserted;
     }
 
-    /**
-	 * Fetch a transaction from the database which has a unique ID <code>uid</code>
-	 * @param uid Unique Identifier of transaction to be retrieved
-	 * @return Database row ID of transaction with UID <code>uid</code>
-	 */
-	public long fetchTransactionWithUID(String uid){
-		Cursor cursor = mDb.query(TransactionEntry.TABLE_NAME,
-				new String[] {TransactionEntry._ID},
-                TransactionEntry.COLUMN_UID + " = ?",
-				new String[]{uid}, null, null, null);
-		long result = -1;
-		try {
-            if (cursor.moveToFirst()) {
-                Log.d(TAG, "Transaction already exists. Returning existing id");
-                result = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID)); //0 because only one row was requested
-            }
-        } finally {
-            cursor.close();
-        }
-		return result;
-	}
-
 	/**
 	 * Retrieves a transaction object from a database with database ID <code>rowId</code>
 	 * @param rowId Identifier of the transaction record to be retrieved
@@ -239,7 +217,7 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
             return mDb.query(TransactionEntry.TABLE_NAME, null,
                     "((" + SplitEntry.COLUMN_ACCOUNT_UID + " = '" + accountUID + "') "
                             + "OR (" + DatabaseHelper.KEY_DOUBLE_ENTRY_ACCOUNT_UID + " = '" + accountUID + "' ))"
-                            + " AND " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0",
+                            + " AND " + TransactionEntry.COLUMN_TEMPLATE + " = 0",
                     null, null, null, TransactionEntry.COLUMN_TIMESTAMP + " DESC");
         } else {
             SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
@@ -250,7 +228,7 @@ public Cursor fetchAllTransactionsForAccount(String accountUID){
             queryBuilder.setDistinct(true);
             String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
             String selection = SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + " = ?"
-                    + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " = 0";
+                    + " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " = 0";
             String[] selectionArgs = new String[]{accountUID};
             String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TIMESTAMP + " DESC";
 
@@ -271,6 +249,7 @@ public Cursor fetchAllScheduledTransactions(){
 
         String[] projectionIn = new String[]{TransactionEntry.TABLE_NAME + ".*"};
         String sortOrder = TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_DESCRIPTION + " ASC";
+        queryBuilder.setDistinct(true);
 
         return queryBuilder.query(mDb, projectionIn, null, null, null, null, sortOrder);
     }
@@ -354,7 +333,7 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
      */
     public int getTotalTransactionsCount() {
         String queryCount = "SELECT COUNT(*) FROM " + TransactionEntry.TABLE_NAME +
-                " WHERE " + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " =0";
+                " WHERE " + TransactionEntry.COLUMN_TEMPLATE + " =0";
         Cursor cursor = mDb.rawQuery(queryCount, null);
         try {
             cursor.moveToFirst();
@@ -378,9 +357,7 @@ public Transaction buildTransactionInstance(Cursor c){
 		transaction.setTime(c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
 		transaction.setNote(c.getString(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_NOTES)));
 		transaction.setExported(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_EXPORTED)) == 1);
-
-        long recurrencePeriod = c.getLong(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_RECURRENCE_PERIOD));
-        transaction.setRecurrencePeriod(recurrencePeriod);
+		transaction.setTemplate(c.getInt(c.getColumnIndexOrThrow(TransactionEntry.COLUMN_TEMPLATE)) == 1);
 
         if (mDb.getVersion() < SPLITS_DB_VERSION){ //legacy, will be used once, when migrating the database
             String accountUID = c.getString(c.getColumnIndexOrThrow(SplitEntry.COLUMN_ACCOUNT_UID));
@@ -433,6 +410,7 @@ public Money getBalance(String transactionUID, String accountUID){
         return Transaction.computeBalance(accountUID, splitList);
     }
 
+    //TODO: When "on delete cascade" is successfully migrated, we can remove this method and use the base implementation
 	/**
 	 * Deletes transaction record with id <code>rowId</code> and all it's splits
 	 * @param rowId Long database record id
@@ -538,15 +516,12 @@ public int updateTransaction(ContentValues contentValues, String whereClause, St
      * @param recurringTransaction Transaction which is to be recurring
      */
     public void scheduleTransaction(Transaction recurringTransaction) {
-        long recurrencePeriodMillis = recurringTransaction.getRecurrencePeriod();
+        long recurrencePeriodMillis = System.currentTimeMillis(); //recurringTransaction.getRecurrencePeriod();
         long firstRunMillis = System.currentTimeMillis() + recurrencePeriodMillis;
         long recurringTransactionId = addTransaction(recurringTransaction);
 
-        PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(GnuCashApplication.getAppContext(),
-                (int)recurringTransactionId, Transaction.createIntent(recurringTransaction), PendingIntent.FLAG_UPDATE_CURRENT);
-        AlarmManager alarmManager = (AlarmManager) GnuCashApplication.getAppContext().getSystemService(Context.ALARM_SERVICE);
-        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, firstRunMillis,
-                recurrencePeriodMillis, recurringPendingIntent);
+
+        //TODO: Properly create ScheduledEvent
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
index dd272aa5..bf122cf5 100644
--- a/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/qif/QifExporter.java
@@ -64,7 +64,7 @@ public void generateExport(Writer writer) throws ExporterException {
                             AccountEntry.TABLE_NAME + "_" + AccountEntry.COLUMN_FULL_NAME + " AS acct2_full_name"
                     },
                     // no recurrence transactions
-                    TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_RECURRENCE_PERIOD + " == 0 AND " +
+                    TransactionEntry.TABLE_NAME + "_" + TransactionEntry.COLUMN_TEMPLATE + " == 0 AND " +
                             // exclude transactions involving multiple currencies
                             "trans_extra_info.trans_currency_count = 1 AND " +
                             // in qif, split from the one account entry is not recorded (will be auto balanced)
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 28f1991b..19d667ff 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -393,114 +393,4 @@ public static void createBackup(){
             Log.e("GncXmlExporter", "Error creating backup", e);
         }
     }
-
-    /**
-     * Generate GnuCash XML by loading the accounts and transactions from the database and exporting each one.
-     * This method consumes a lot of memory and is slow, but exists for database migrations for backwards compatibility.
-     * <p>The normal exporter interface should be used to generate GncXML files</p>
-     * @return String with the generated XML
-     * @throws ParserConfigurationException if there was an error when generating the XML
-     * @deprecated Use the {@link #generateExport(java.io.Writer)} to generate XML
-     */
-    public String generateXML() throws ParserConfigurationException {
-        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
-        DocumentBuilder documentBuilder = docFactory.newDocumentBuilder();
-
-        Document document = documentBuilder.newDocument();
-        document.setXmlVersion("1.0");
-        document.setXmlStandalone(true);
-
-        Element rootElement = document.createElement(GncXmlHelper.TAG_ROOT);
-        rootElement.setAttribute("xmlns:gnc",    "http://www.gnucash.org/XML/gnc");
-        rootElement.setAttribute("xmlns:act",    "http://www.gnucash.org/XML/act");
-        rootElement.setAttribute("xmlns:book",   "http://www.gnucash.org/XML/book");
-        rootElement.setAttribute("xmlns:cd",     "http://www.gnucash.org/XML/cd");
-        rootElement.setAttribute("xmlns:cmdty",  "http://www.gnucash.org/XML/cmdty");
-        rootElement.setAttribute("xmlns:price",  "http://www.gnucash.org/XML/price");
-        rootElement.setAttribute("xmlns:slot",   "http://www.gnucash.org/XML/slot");
-        rootElement.setAttribute("xmlns:split",  "http://www.gnucash.org/XML/split");
-        rootElement.setAttribute("xmlns:trn",    "http://www.gnucash.org/XML/trn");
-        rootElement.setAttribute("xmlns:ts",     "http://www.gnucash.org/XML/ts");
-
-        Element bookCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        bookCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, GncXmlHelper.ATTR_VALUE_BOOK);
-        bookCountNode.appendChild(document.createTextNode("1"));
-        rootElement.appendChild(bookCountNode);
-
-        Element bookNode = document.createElement(GncXmlHelper.TAG_BOOK);
-        bookNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        rootElement.appendChild(bookNode);
-
-        Element bookIdNode = document.createElement(GncXmlHelper.TAG_BOOK_ID);
-        bookIdNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        bookIdNode.appendChild(document.createTextNode(UUID.randomUUID().toString().replaceAll("-", "")));
-        bookNode.appendChild(bookIdNode);
-
-        Element cmdtyCountData = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        cmdtyCountData.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "commodity");
-        cmdtyCountData.appendChild(document.createTextNode(String.valueOf(mAccountsDbAdapter.getCurrencies().size())));
-        bookNode.appendChild(cmdtyCountData);
-
-        Element accountCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        accountCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "account");
-        int accountCount = mAccountsDbAdapter.getTotalAccountCount();
-        accountCountNode.appendChild(document.createTextNode(String.valueOf(accountCount)));
-        bookNode.appendChild(accountCountNode);
-
-        Element transactionCountNode = document.createElement(GncXmlHelper.TAG_COUNT_DATA);
-        transactionCountNode.setAttribute(GncXmlHelper.ATTR_KEY_CD_TYPE, "transaction");
-        int transactionCount = mTransactionsDbAdapter.getTotalTransactionsCount();
-        transactionCountNode.appendChild(document.createTextNode(String.valueOf(transactionCount)));
-        bookNode.appendChild(transactionCountNode);
-
-        String rootAccountUID = mAccountsDbAdapter.getGnuCashRootAccountUID();
-        if (rootAccountUID != null) {
-            Account rootAccount = mAccountsDbAdapter.getAccount(rootAccountUID);
-            rootAccount.toGncXml(document, bookNode);
-        }
-        Cursor accountsCursor = mAccountsDbAdapter.fetchAllRecordsOrderedByFullName();
-
-        //create accounts hierarchically by ordering by full name
-        try {
-            while (accountsCursor.moveToNext()) {
-                long id = accountsCursor.getLong(accountsCursor.getColumnIndexOrThrow(DatabaseSchema.AccountEntry._ID));
-                Account account = mAccountsDbAdapter.getAccount(id);
-                account.toGncXml(document, bookNode);
-            }
-        } finally {
-            accountsCursor.close();
-        }
-
-        //more memory efficient approach than loading all transactions into memory first
-        Cursor transactionsCursor = mTransactionsDbAdapter.fetchAllRecords();
-        try {
-            while (transactionsCursor.moveToNext()) {
-                Transaction transaction = mTransactionsDbAdapter.buildTransactionInstance(transactionsCursor);
-                transaction.toGncXml(document, bookNode);
-            }
-        } finally {
-            transactionsCursor.close();
-        }
-
-        document.appendChild(rootElement);
-
-        StringWriter stringWriter = new StringWriter();
-        try {
-            TransformerFactory transformerFactory = TransformerFactory.newInstance();
-
-            Transformer transformer = transformerFactory.newTransformer();
-
-            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
-            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
-            DOMSource source = new DOMSource(document);
-            StreamResult result = new StreamResult(stringWriter);
-
-            transformer.transform(source, result);
-            stringWriter.flush();
-        } catch (Exception e) {
-            e.printStackTrace();
-            throw new ExporterException(mParameters, e);
-        }
-        return stringWriter.toString();
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 298fa085..299934e0 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -88,6 +88,7 @@
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
 
     //TODO: Remove this in the future when scheduled transactions are improved
+    @Deprecated
     public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
 
     public static final String BOOK_VERSION         = "2.0.0";
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index db0dfa7a..3b6ee9dd 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -292,7 +292,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRN_DESCRIPTION)){
             mTransaction.setDescription(characterString);
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
-            try {
+            try { //TODO: Use the created_at and modified_at dates in the xml
                 if (mIsDatePosted && mTransaction != null) {
                     mTransaction.setTime(GncXmlHelper.parseDate(characterString));
                     mIsDatePosted = false;
@@ -303,7 +303,8 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_DATE)){
             }
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_RECURRENCE_PERIOD)){
-            mTransaction.setRecurrencePeriod(Long.parseLong(characterString));
+            mTransaction.setTemplate(Long.parseLong(characterString) > 0);
+            //TODO: Remove this and properly parse recurrence events
         }
         else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_SPLIT_ID)){
             mSplit.setUID(characterString);
@@ -327,7 +328,7 @@ else if (qualifiedName.equalsIgnoreCase(GncXmlHelper.TAG_TRANSACTION)){
                 mTransactionList.add(mTransaction);
             }
             else {
-                if (mTransaction.getRecurrencePeriod() > 0) { //TODO: Fix this when scheduled actions are expanded
+                if (mTransaction.isTemplate()) { //TODO: Fix this when scheduled actions are expanded
                     mTransactionsDbAdapter.scheduleTransaction(mTransaction);
                     mTransactionsDbAdapter.addTransaction(mTransaction);
                 } else {
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 37489005..c35f09a5 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -18,7 +18,6 @@
 
 
 import org.gnucash.android.export.ofx.OfxHelper;
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -516,72 +515,4 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
 		parent.appendChild(statementTransactions);
 				
 	}
-
-    /**
-     * Method which generates the GnuCash XML DOM for this account
-     * @param doc {@link org.w3c.dom.Document} for creating nodes
-     * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
-     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
-     */
-    public void toGncXml(Document doc, Element rootNode) {
-        Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
-        nameNode.appendChild(doc.createTextNode(mName));
-
-        Element idNode = doc.createElement(GncXmlHelper.TAG_ACCT_ID);
-        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element typeNode = doc.createElement(GncXmlHelper.TAG_TYPE);
-        typeNode.appendChild(doc.createTextNode(mAccountType.name()));
-
-        Element commodityNode = doc.createElement(GncXmlHelper.TAG_COMMODITY);
-        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
-        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
-        commodityNode.appendChild(cmdtySpacenode);
-        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
-        cmdtyIdNode.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));
-        commodityNode.appendChild(cmdtyIdNode);
-
-        Element commodityScuNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SCU);
-        int fractionDigits = mCurrency.getDefaultFractionDigits();
-        commodityScuNode.appendChild(doc.createTextNode(Integer.toString((int) Math.pow(10, fractionDigits))));
-
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_ACCT_DESCRIPTION);
-        descriptionNode.appendChild(doc.createTextNode(mName));
-
-        Element acctSlotsNode = doc.createElement(GncXmlHelper.TAG_ACT_SLOTS);
-        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_PLACEHOLDER,
-                Boolean.toString(mIsPlaceholderAccount), GncXmlHelper.ATTR_VALUE_STRING));
-
-        if (mColorCode != null && mColorCode.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_COLOR, mColorCode, GncXmlHelper.ATTR_VALUE_STRING));
-        }
-
-        if (mDefaultTransferAccountUID != null && mDefaultTransferAccountUID.trim().length() > 0){
-            acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_DEFAULT_TRANSFER_ACCOUNT, mDefaultTransferAccountUID, "guid"));
-        }
-
-        acctSlotsNode.appendChild(GncXmlHelper.createSlot(doc,
-                GncXmlHelper.KEY_FAVORITE, Boolean.toString(mIsFavorite), GncXmlHelper.ATTR_VALUE_STRING));
-
-        Element accountNode = doc.createElement(GncXmlHelper.TAG_ACCOUNT);
-        accountNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        accountNode.appendChild(nameNode);
-        accountNode.appendChild(idNode);
-        accountNode.appendChild(typeNode);
-        accountNode.appendChild(commodityNode);
-        accountNode.appendChild(commodityScuNode);
-        accountNode.appendChild(descriptionNode);
-        accountNode.appendChild(acctSlotsNode);
-
-
-        if (mParentAccountUID != null && mParentAccountUID.trim().length() > 0){
-            Element parentAccountNode = doc.createElement(GncXmlHelper.TAG_PARENT_UID);
-            parentAccountNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-            parentAccountNode.appendChild(doc.createTextNode(mParentAccountUID));
-            accountNode.appendChild(parentAccountNode);
-        }
-
-        rootNode.appendChild(accountNode);
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index dc08a9c3..ad322f6c 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -1,11 +1,27 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.gnucash.android.model;
 
 import java.sql.Timestamp;
 import java.util.UUID;
 
 /**
- * Represents the base data model which is persisted to the database.
- * All other models should extend this base model and add entries.
+ * Abstract class representing the base data model which is persisted to the database.
+ * All other models should extend this base model.
  */
 public abstract class BaseModel {
     protected String mUID;
@@ -30,26 +46,53 @@ protected String generateUID(){
         return UUID.randomUUID().toString().replaceAll("-", "");
     }
 
+    /**
+     * Returns the GUID of the model
+     * @return String unique identifier for this model
+     */
     public String getUID() {
         return mUID;
     }
 
+    /**
+     * Sets the GUID of the model
+     * @param uid String unique ID
+     */
     public void setUID(String uid) {
         this.mUID = uid;
     }
 
+    /**
+     * Returns the timestamp when this model entry was created in the database
+     * @return Timestamp of creation of model
+     */
     public Timestamp getCreatedTimestamp() {
         return mCreatedTimestamp;
     }
 
+    /**
+     * Sets the timestamp when the model was created
+     * @param createdTimestamp Timestamp of model creation
+     */
     public void setCreatedTimestamp(Timestamp createdTimestamp) {
         this.mCreatedTimestamp = createdTimestamp;
     }
 
+    /**
+     * Returns the timestamp when the model record in the database was last modified.
+     * @return Timestamp of last modification
+     */
     public Timestamp getModifiedTimestamp() {
         return mModifiedTimestamp;
     }
 
+    /**
+     * Sets the timestamp when the model was last modified in the database
+     * <p>Although the database automatically has triggers for entering the timestamp,
+     * when SQL INSERT OR REPLACE syntax is used, it is possible to override the modified timestamp.
+     * <br/>In that case, it has to be explicitly set in the SQL statement.</p>
+     * @param modifiedTimestamp Timestamp of last modification
+     */
     public void setModifiedTimestamp(Timestamp modifiedTimestamp) {
         this.mModifiedTimestamp = modifiedTimestamp;
     }
diff --git a/app/src/main/java/org/gnucash/android/model/Split.java b/app/src/main/java/org/gnucash/android/model/Split.java
index 9160f71f..91a72e92 100644
--- a/app/src/main/java/org/gnucash/android/model/Split.java
+++ b/app/src/main/java/org/gnucash/android/model/Split.java
@@ -161,45 +161,6 @@ public String toCsv(){
     }
 
     /**
-     * Creates a GnuCash XML representation of this split
-     * @param doc XML {@link org.w3c.dom.Document} for creating the nodes
-     * @param rootNode Parent node to append the split XML to
-     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
-     */
-    public void toGncXml(Document doc, Element rootNode) {
-        Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
-        idNode.setAttribute("type", "guid");
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element memoNode = doc.createElement(GncXmlHelper.TAG_SPLIT_MEMO);
-        if (mMemo != null)
-            memoNode.appendChild(doc.createTextNode(mMemo));
-
-        Element stateNode = doc.createElement(GncXmlHelper.TAG_RECONCILED_STATE);
-        stateNode.appendChild(doc.createTextNode("n"));
-
-        Element valueNode = doc.createElement(GncXmlHelper.TAG_SPLIT_VALUE);
-        valueNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
-
-        Element quantityNode = doc.createElement(GncXmlHelper.TAG_SPLIT_QUANTITY);
-        quantityNode.appendChild(doc.createTextNode(GncXmlHelper.formatMoney(this)));
-
-        Element accountNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ACCOUNT);
-        accountNode.setAttribute("type", "guid");
-        accountNode.appendChild(doc.createTextNode(mAccountUID));
-
-        Element splitNode = doc.createElement(GncXmlHelper.TAG_TRN_SPLIT);
-        splitNode.appendChild(idNode);
-        splitNode.appendChild(memoNode);
-        splitNode.appendChild(stateNode);
-        splitNode.appendChild(valueNode);
-        splitNode.appendChild(quantityNode);
-        splitNode.appendChild(accountNode);
-
-        rootNode.appendChild(splitNode);
-    }
-
-    /**
      * Parses a split which is in the format "<amount>;<currency_code>;<account_uid>;<type>;<memo>".
      * The split input string is the same produced by the {@link Split#toCsv()} method
      *
diff --git a/app/src/main/java/org/gnucash/android/model/Transaction.java b/app/src/main/java/org/gnucash/android/model/Transaction.java
index a44cd4b2..302c192a 100644
--- a/app/src/main/java/org/gnucash/android/model/Transaction.java
+++ b/app/src/main/java/org/gnucash/android/model/Transaction.java
@@ -18,10 +18,8 @@
 
 import android.content.Intent;
 
-import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
-import org.gnucash.android.export.xml.GncXmlHelper;
 import org.gnucash.android.model.Account.OfxAccountType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -44,18 +42,21 @@
 
 	/**
 	 * Key for passing the account unique Identifier as an argument through an {@link Intent}
+     * @deprecated use {@link Split}s instead
 	 */
     @Deprecated
 	public static final String EXTRA_ACCOUNT_UID 	= "org.gnucash.android.extra.account_uid";
 
 	/**
 	 * Key for specifying the double entry account
+     * @deprecated use {@link Split}s instead
 	 */
     @Deprecated
 	public static final String EXTRA_DOUBLE_ACCOUNT_UID = "org.gnucash.android.extra.double_account_uid";
 
 	/**
 	 * Key for identifying the amount of the transaction through an Intent
+     * @deprecated use {@link Split}s instead
 	 */
     @Deprecated
 	public static final String EXTRA_AMOUNT 		= "org.gnucash.android.extra.amount";
@@ -63,6 +64,7 @@
     /**
      * Extra key for the transaction type.
      * This value should typically be set by calling {@link TransactionType#name()}
+     * @deprecated use {@link Split}s instead
      */
     @Deprecated
     public static final String EXTRA_TRANSACTION_TYPE = "org.gnucash.android.extra.transaction_type";
@@ -106,11 +108,9 @@
 	private long mTimestamp;
 
     /**
-     * Recurrence period of this transaction.
-     * <p>If this value is set then it means this transaction is a template which will be used to
-     * create a transaction every turn of the recurrence period</p>
+     * Flag indicating that this transaction is a template
      */
-    private long mRecurrencePeriod = 0;
+    private int mIsTemplate = 0;
 
 	/**
 	 * Overloaded constructor. Creates a new transaction instance with the
@@ -126,7 +126,8 @@ public Transaction(String name) {
      * Copy constructor.
      * Creates a new transaction object which is a clone of the parameter.
      * <p><b>Note:</b> The unique ID of the transaction is not cloned if the parameter <code>generateNewUID</code>,
-     * is set to false. Otherwise, a new one is generated.</p>
+     * is set to false. Otherwise, a new one is generated.<br/>
+     * The export flag and the template flag are not copied from the old transaction to the new.</p>
      * @param transaction Transaction to be cloned
      * @param generateNewUID Flag to determine if new UID should be assigned or not
      */
@@ -136,7 +137,6 @@ public Transaction(Transaction transaction, boolean generateNewUID){
         setNote(transaction.getNote());
         setTime(transaction.getTimeMillis());
         mCurrencyCode = transaction.mCurrencyCode;
-        mRecurrencePeriod = transaction.mRecurrencePeriod;
         //exported flag is left at default value of false
 
         for (Split split : transaction.mSplitList) {
@@ -396,19 +396,19 @@ public boolean isExported(){
 	}
 
     /**
-     * Returns the recurrence period for this transaction
-     * @return Recurrence period for this transaction in milliseconds
+     * Returns {@code true} if this transaction is a template, {@code false} otherwise
+     * @return {@code true} if this transaction is a template, {@code false} otherwise
      */
-    public long getRecurrencePeriod() {
-        return mRecurrencePeriod;
+    public boolean isTemplate(){
+        return mIsTemplate == 1;
     }
 
     /**
-     * Sets the recurrence period for this transaction
-     * @param recurrenceId Recurrence period in milliseconds
+     * Sets flag indicating whether this transaction is a template or not
+     * @param isTemplate Flag indicating if transaction is a template or not
      */
-    public void setRecurrencePeriod(long recurrenceId) {
-        this.mRecurrencePeriod = recurrenceId;
+    public void setTemplate(boolean isTemplate){
+        mIsExported = isTemplate ? 1 : 0;
     }
 
     /**
@@ -485,71 +485,6 @@ public Element toOFX(Document doc, String accountUID){
 	}
 
     /**
-     * Generate the GncXML for the transaction and append to the DOM document
-     * @param doc XML document to which transaction should be added
-     * @param rootElement Parent node for the XML
-     * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
-     */
-    public void toGncXml(Document doc, Element rootElement) {
-        Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
-        idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
-        idNode.appendChild(doc.createTextNode(mUID));
-
-        Element currencyNode = doc.createElement(GncXmlHelper.TAG_TRX_CURRENCY);
-        Element cmdtySpacenode = doc.createElement(GncXmlHelper.TAG_COMMODITY_SPACE);
-        cmdtySpacenode.appendChild(doc.createTextNode("ISO4217"));
-        currencyNode.appendChild(cmdtySpacenode);
-        Element cmdtyIdNode = doc.createElement(GncXmlHelper.TAG_COMMODITY_ID);
-        cmdtyIdNode.appendChild(doc.createTextNode(mCurrencyCode));
-        currencyNode.appendChild(cmdtyIdNode);
-
-        Element datePostedNode = doc.createElement(GncXmlHelper.TAG_DATE_POSTED);
-        Element datePNode = doc.createElement(GncXmlHelper.TAG_DATE);
-        datePNode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
-        datePostedNode.appendChild(datePNode);
-
-        Element dateEneteredNode = doc.createElement(GncXmlHelper.TAG_DATE_ENTERED);
-        Element dateENode = doc.createElement(GncXmlHelper.TAG_DATE);
-        dateENode.appendChild(doc.createTextNode(GncXmlHelper.formatDate(mTimestamp)));
-        dateEneteredNode.appendChild(dateENode);
-
-        Element descriptionNode = doc.createElement(GncXmlHelper.TAG_TRN_DESCRIPTION);
-        if (mDescription != null) {
-            descriptionNode.appendChild(doc.createTextNode(mDescription));
-        }
-
-        Element trnSlotsNode = doc.createElement(GncXmlHelper.TAG_TRN_SLOTS);
-        if (mNotes != null && mNotes.length() > 0) {
-            trnSlotsNode.appendChild(GncXmlHelper.createSlot(doc, GncXmlHelper.KEY_NOTES, mNotes, GncXmlHelper.ATTR_VALUE_STRING));
-            //TODO: Consider adding future transactions date as slot here too
-        }
-        Element trnSplits = doc.createElement(GncXmlHelper.TAG_TRN_SPLITS);
-        for (Split split : mSplitList) {
-            split.toGncXml(doc, trnSplits);
-        }
-
-        Element transactionNode = doc.createElement(GncXmlHelper.TAG_TRANSACTION);
-        transactionNode.setAttribute(GncXmlHelper.ATTR_KEY_VERSION, GncXmlHelper.BOOK_VERSION);
-        transactionNode.appendChild(idNode);
-        transactionNode.appendChild(currencyNode);
-        transactionNode.appendChild(datePostedNode);
-        transactionNode.appendChild(dateEneteredNode);
-        transactionNode.appendChild(descriptionNode);
-        if (mNotes != null && mNotes.length() > 0){
-            transactionNode.appendChild(trnSlotsNode);
-        }
-        //TODO: Improve xml compatibilty with desktop for scheduled actions
-        if (mRecurrencePeriod != 0) {
-            Element recurrenceNode = doc.createElement(GncXmlHelper.TAG_RECURRENCE_PERIOD);
-            recurrenceNode.appendChild(doc.createTextNode(String.valueOf(mRecurrencePeriod)));
-            transactionNode.appendChild(recurrenceNode);
-        }
-        transactionNode.appendChild(trnSplits);
-
-        rootElement.appendChild(transactionNode);
-    }
-
-    /**
      * Creates an Intent with arguments from the <code>transaction</code>.
      * This intent can be broadcast to create a new transaction
      * @param transaction Transaction used to create intent
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 9808071e..2b73c10a 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -23,6 +23,7 @@
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.ScheduledEventDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportParams;
@@ -30,11 +31,16 @@
 import org.gnucash.android.model.ScheduledEvent;
 import org.gnucash.android.model.Transaction;
 
+import java.text.SimpleDateFormat;
+import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
 /**
- * Service for running scheduled events
+ * Service for running scheduled events.
+ * <p>The service is started and goes through all scheduled event entries in the the database and executes them.
+ * Then it is stopped until the next time it is run. <br>
+ * Scheduled runs of the service should be achieved using an {@link android.app.AlarmManager}</p>
  * @author Ngewi Fet <ngewif@gmail.com>
  */
 public class SchedulerService extends IntentService {
@@ -46,7 +52,7 @@
      *
      */
     public SchedulerService() {
-        super("SchedulerService");
+        super(LOG_TAG);
     }
 
     @Override
@@ -65,8 +71,8 @@ protected void onHandleIntent(Intent intent) {
             long endTime    = scheduledEvent.getEndTime();
 
             long now = System.currentTimeMillis();
-            //if we did not exceed the endtime, and one execution period has passed since last run
-            if (endTime > 0 && now < endTime && (lastRun + period) < now ){
+            //if we did not exceed the endtime (if there is one), and one execution period has passed since last run
+            if (((endTime > 0 && now < endTime) || endTime == 0) && (lastRun + period) < now ){
                 executeScheduledEvent(scheduledEvent);
             }
         }
@@ -99,13 +105,21 @@ private void executeScheduledEvent(ScheduledEvent scheduledEvent){
                 } catch (InterruptedException e) {
                     //TODO: Create special log for scheduler service
                     Log.e(LOG_TAG, e.getMessage());
+                    return; //return immediately, do not update last run time of event
                 } catch (ExecutionException e) {
                     //TODO: Log to crashlytics
                     e.printStackTrace();
                     Log.e(LOG_TAG, e.getMessage());
+                    return; //return immediately, do not update last run time of event
                 }
                 break;
         }
 
+        //update last run time
+        ScheduledEventDbAdapter.getInstance().updateRecord(
+                scheduledEvent.getUID(),
+                DatabaseSchema.ScheduledEventEntry.COLUMN_LAST_RUN,
+                Long.toString(System.currentTimeMillis())
+        );
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index 1f071936..07076059 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -266,12 +266,17 @@ protected void onNewIntent(Intent intent) {
         setTab(index);
     }
 
+    /**
+     * Sets the current tab in the ViewPager
+     * @param index Index of fragment to be loaded
+     */
     public void setTab(int index){
         mPager.setCurrentItem(index);
     }
 
     /**
-     * Loads default setting for currency and performs app first-run initialization
+     * Loads default setting for currency and performs app first-run initialization.
+     * <p>Also handles displaying the What's New dialog</p>
      */
     private void init() {
         PreferenceManager.setDefaultValues(this, R.xml.fragment_transaction_preferences, false);
@@ -283,21 +288,20 @@ private void init() {
         if (firstRun){
             showFirstRunDialog();
             //default to using double entry and save the preference explicitly
-            prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).commit();
-
+            prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).apply();
         }
 
         if (hasNewFeatures()){
             showWhatsNewDialog(this);
+            GnuCashApplication.startScheduledEventExecutionService(this);
         }
-
     }
 
     @Override
     protected void onDestroy() {
         super.onDestroy();
         SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);
-        preferences.edit().putInt(LAST_OPEN_TAB_INDEX, mPager.getCurrentItem()).commit();
+        preferences.edit().putInt(LAST_OPEN_TAB_INDEX, mPager.getCurrentItem()).apply();
     }
 
     /**
@@ -315,7 +319,7 @@ private boolean hasNewFeatures(){
         if (currentMinor > previousMinor){
             Editor editor = prefs.edit();
             editor.putInt(getString(R.string.key_previous_minor_version), currentMinor);
-            editor.commit();
+            editor.apply();
             return true;
         }
         return false;
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
index 75bb8c8e..6025e3a3 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -226,8 +226,7 @@ public void setImbalanceAccountsHidden(boolean useDoubleEntry) {
         for (Currency currency : currencies) {
             String uid = accountsDbAdapter.getImbalanceAccountUID(currency);
             if (uid != null){
-                accountsDbAdapter.updateRecord(DatabaseSchema.AccountEntry.TABLE_NAME,
-                        uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
+                accountsDbAdapter.updateRecord(uid, DatabaseSchema.AccountEntry.COLUMN_HIDDEN, isHidden);
             }
         }
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
index ab7e356f..1fc68f83 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/ScheduledTransactionsListFragment.java
@@ -110,11 +110,13 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                         Log.i(TAG, "Cancelling scheduled transaction(s)");
                         String trnUID = mTransactionsDbAdapter.getUID(id);
                         ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-                        ScheduledEvent event = scheduledEventDbAdapter.getScheduledEventWithUID(trnUID);
+                        List<ScheduledEvent> events = scheduledEventDbAdapter.getScheduledEventsWithUID(trnUID);
 
                         if (mTransactionsDbAdapter.deleteRecord(id)){
                             Toast.makeText(getActivity(), R.string.toast_recurring_transaction_deleted, Toast.LENGTH_SHORT).show();
-                            scheduledEventDbAdapter.deleteRecord(event.getUID());
+                            for (ScheduledEvent event : events) {
+                                scheduledEventDbAdapter.deleteRecord(event.getUID());
+                            }
                         }
                     }
                     mode.finish();
@@ -409,11 +411,14 @@ public void bindView(View view, Context context, Cursor cursor) {
             TextView descriptionTextView = (TextView) view.findViewById(R.id.secondary_text);
 
             ScheduledEventDbAdapter scheduledEventDbAdapter = ScheduledEventDbAdapter.getInstance();
-            ScheduledEvent event = scheduledEventDbAdapter.getScheduledEventWithUID(transaction.getUID());
-            descriptionTextView.setText(event.getRepeatString());
+            List<ScheduledEvent> events = scheduledEventDbAdapter.getScheduledEventsWithUID(transaction.getUID());
+            StringBuilder repeatStringBuilder = new StringBuilder();
+            for (ScheduledEvent event : events) {
+                repeatStringBuilder.append(event.getRepeatString()).append("\n");
+            }
+            descriptionTextView.setText(repeatStringBuilder.toString());
 
         }
-
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 63bf27b0..5c7b0187 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -674,21 +674,20 @@ private void saveNewTransaction() {
      */
     private void scheduleRecurringTransaction() {
         List<ScheduledEvent> events = RecurrenceParser.parse(mEventRecurrence, ScheduledEvent.EventType.TRANSACTION);
+
+        if (events.size() == 0) //there are no scheduled events detected
+            return;
+
         Transaction recurringTransaction;
-        if (mTransaction.getRecurrencePeriod() > 0) //if we are editing the recurring transaction itself...
-            recurringTransaction = mTransaction;
-        else {
-            recurringTransaction = new Transaction(mTransaction, true);
-            mTransactionsDbAdapter.addTransaction(recurringTransaction);
-            //value does not matter, just should be > 0 to mark as a recurring transaction
-            recurringTransaction.setRecurrencePeriod(RecurrenceParser.DAY_MILLIS);
-        }
+        //creating a new recurring transaction
+        recurringTransaction = new Transaction(mTransaction, true);
+        recurringTransaction.setTemplate(true);
         mTransactionsDbAdapter.addTransaction(recurringTransaction);
 
         ScheduledEventDbAdapter scheduledEventDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
-
         for (ScheduledEvent event : events) {
             event.setEventUID(recurringTransaction.getUID());
+            event.setLastRun(System.currentTimeMillis());
             scheduledEventDbAdapter.addScheduledEvent(event);
 
             Log.i("TransactionFormFragment", event.toString());
diff --git a/build.gradle b/build.gradle
index 4f9e38cf..eae95265 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,7 +3,7 @@ buildscript {
 		jcenter()
 	}
 	dependencies {
-		classpath 'com.android.tools.build:gradle:1.0.1'
+		classpath 'com.android.tools.build:gradle:1.1.0'
 	}
 }
 
