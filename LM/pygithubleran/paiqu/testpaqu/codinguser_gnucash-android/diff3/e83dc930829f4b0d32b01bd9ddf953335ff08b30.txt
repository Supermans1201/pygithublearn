From e83dc930829f4b0d32b01bd9ddf953335ff08b30 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 16 Aug 2016 15:18:17 +0200
Subject: [PATCH] Code refactoring and cleanup

Renamed SchedulerService to ScheduledActionService
---
 app/src/main/AndroidManifest.xml                     |  2 +-
 .../org/gnucash/android/app/GnuCashApplication.java  |  7 ++-----
 .../java/org/gnucash/android/db/MigrationHelper.java |  4 ++--
 .../android/db/adapter/ScheduledActionDbAdapter.java |  6 +++---
 .../org/gnucash/android/export/ExportAsyncTask.java  |  1 -
 .../org/gnucash/android/export/ofx/OfxExporter.java  |  6 +++++-
 .../org/gnucash/android/importer/GncXmlHandler.java  |  4 ++--
 .../org/gnucash/android/model/ScheduledAction.java   | 10 +++++-----
 ...dulerService.java => ScheduledActionService.java} | 10 +++++-----
 .../test/unit/db/ScheduledActionDbAdapterTest.java   |  2 +-
 .../unit/service/ScheduledActionServiceTest.java     | 20 ++++++++++----------
 11 files changed, 36 insertions(+), 36 deletions(-)
 rename app/src/main/java/org/gnucash/android/service/{SchedulerService.java => ScheduledActionService.java} (97%)

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 18d3dead..45ec83f6 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -125,7 +125,7 @@
             android:enabled="true"
             android:exported="false"
             android:label="Dropbox Sync" />
-        <service android:name=".service.SchedulerService"
+        <service android:name=".service.ScheduledActionService"
             android:exported="false"
             android:label="GnuCash Android Scheduler Execution Service"/>
         <receiver android:name=".receivers.TransactionRecorder"
diff --git a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
index 219b8c36..325ceb04 100644
--- a/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
+++ b/app/src/main/java/org/gnucash/android/app/GnuCashApplication.java
@@ -52,7 +52,7 @@
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
-import org.gnucash.android.service.SchedulerService;
+import org.gnucash.android.service.ScheduledActionService;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.settings.PreferenceActivity;
 
@@ -127,9 +127,6 @@ public void onCreate(){
         mBooksDbAdapter = new BooksDbAdapter(bookDbHelper.getWritableDatabase());
 
         initDatabaseAdapters();
-
-        //TODO: migrate preferences from defaultShared to book
-
         setDefaultCurrencyCode(getDefaultCurrencyCode());
 
         if (BuildConfig.DEBUG && !isRoboUnitTest())
@@ -344,7 +341,7 @@ public static Locale getDefaultLocale() {
      * @param context Application context
      */
     public static void startScheduledActionExecutionService(Context context){
-        Intent alarmIntent = new Intent(context, SchedulerService.class);
+        Intent alarmIntent = new Intent(context, ScheduledActionService.class);
         PendingIntent pendingIntent = PendingIntent.getService(context, 0, alarmIntent, PendingIntent.FLAG_NO_CREATE);
 
         if (pendingIntent != null) //if service is already scheduled, just return
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 0aa1358a..9bbc01f6 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -46,7 +46,7 @@
 import org.gnucash.android.model.Recurrence;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.service.SchedulerService;
+import org.gnucash.android.service.ScheduledActionService;
 import org.gnucash.android.util.PreferencesHelper;
 import org.gnucash.android.util.TimestampHelper;
 import org.xml.sax.InputSource;
@@ -1465,7 +1465,7 @@ static int upgradeDbToVersion13(SQLiteDatabase db){
                 .apply();
 
         //cancel the existing pending intent so that the alarm can be rescheduled
-        Intent alarmIntent = new Intent(context, SchedulerService.class);
+        Intent alarmIntent = new Intent(context, ScheduledActionService.class);
         PendingIntent pendingIntent = PendingIntent.getService(context, 0, alarmIntent, PendingIntent.FLAG_NO_CREATE);
         AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
         alarmManager.cancel(pendingIntent);
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java
index 85daa8d2..9e6ddea9 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java
@@ -116,7 +116,7 @@ public long updateRecurrenceAttributes(ScheduledAction scheduledAction){
         contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
         contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
         contentValues.put(ScheduledActionEntry.COLUMN_TAG,       scheduledAction.getTag());
-        contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, scheduledAction.getTotalFrequency());
+        contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, scheduledAction.getTotalPlannedExecutionCount());
 
         Log.d(LOG_TAG, "Updating scheduled event recurrence attributes");
         String where = ScheduledActionEntry.COLUMN_UID + "=?";
@@ -138,7 +138,7 @@ public long updateRecurrenceAttributes(ScheduledAction scheduledAction){
             stmt.bindNull(8);
         else
             stmt.bindString(8, schedxAction.getTag());
-        stmt.bindString(9, Integer.toString(schedxAction.getTotalFrequency()));
+        stmt.bindString(9, Integer.toString(schedxAction.getTotalPlannedExecutionCount()));
         stmt.bindString(10, schedxAction.getRecurrence().getUID());
         stmt.bindLong(11,   schedxAction.shouldAutoCreate() ? 1 : 0);
         stmt.bindLong(12,   schedxAction.shouldAutoNotify() ? 1 : 0);
@@ -182,7 +182,7 @@ public ScheduledAction buildModelInstance(@NonNull final Cursor cursor){
         event.setLastRun(lastRun);
         event.setTag(tag);
         event.setEnabled(enabled);
-        event.setTotalFrequency(numOccurrences);
+        event.setTotalPlannedExecutionCount(numOccurrences);
         event.setExecutionCount(execCount);
         event.setAutoCreate(autoCreate == 1);
         event.setAutoNotify(autoNotify == 1);
diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index b701058c..c9d8f9ba 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -522,7 +522,6 @@ private void shareFiles(List<String> paths) {
      * @throws IOException if the file could not be moved.
      */
     public void moveFile(String src, String dst) throws IOException {
-        //TODO: Make this asynchronous at some time, t in the future.
         File srcFile = new File(src);
         File dstFile = new File(dst);
         FileChannel inChannel = new FileInputStream(srcFile).getChannel();
diff --git a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
index ef3dee92..367d0549 100644
--- a/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/ofx/OfxExporter.java
@@ -113,7 +113,11 @@ private void generateOfx(Document doc, Element parent){
 		}
 	}
 
-    // FIXME: Move code to generateExport()
+    /**
+     * Generate OFX export file from the transactions in the database
+     * @return String containing OFX export
+     * @throws ExporterException
+     */
     private String generateOfxExport() throws ExporterException {
         mAccountsList = mAccountsDbAdapter.getExportableAccounts(mExportParams.getExportStartTime());
 
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index f77eacf9..1d7938eb 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -729,7 +729,7 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 break;
             //todo: export auto_notify, advance_create, advance_notify
             case GncXmlHelper.TAG_SX_NUM_OCCUR:
-                mScheduledAction.setTotalFrequency(Integer.parseInt(characterString));
+                mScheduledAction.setTotalPlannedExecutionCount(Integer.parseInt(characterString));
                 break;
             case GncXmlHelper.TAG_RX_MULT:
                 mRecurrenceMultiplier = Integer.parseInt(characterString);
@@ -1078,7 +1078,7 @@ private int generateMissedScheduledTransactions(ScheduledAction scheduledAction)
         if (scheduledAction.getActionType() != ScheduledAction.ActionType.TRANSACTION
                 || !scheduledAction.isEnabled() || !scheduledAction.shouldAutoCreate()
                 || (scheduledAction.getEndTime() > 0 && scheduledAction.getEndTime() > System.currentTimeMillis())
-                || (scheduledAction.getTotalFrequency() > 0 && scheduledAction.getExecutionCount() >= scheduledAction.getTotalFrequency())){
+                || (scheduledAction.getTotalPlannedExecutionCount() > 0 && scheduledAction.getExecutionCount() >= scheduledAction.getTotalPlannedExecutionCount())){
             return 0;
         }
 
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 3fcbd03a..e44d89f9 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -71,7 +71,7 @@
     private ActionType mActionType;
 
     /**
-     * Number of times this event is to be executed
+     * Number of times this event is planned to be executed
      */
     private int mTotalFrequency = 0;
 
@@ -297,16 +297,16 @@ public void setEnabled(boolean enabled){
      * Returns the total number of planned occurrences of this scheduled action.
      * @return Total number of planned occurrences of this action
      */
-    public int getTotalFrequency(){
+    public int getTotalPlannedExecutionCount(){
         return mTotalFrequency;
     }
 
     /**
      * Sets the number of occurences of this action
-     * @param occurencesCount Number of occurences
+     * @param plannedExecutions Number of occurences
      */
-    public void setTotalFrequency(int occurencesCount){
-        this.mTotalFrequency = occurencesCount;
+    public void setTotalPlannedExecutionCount(int plannedExecutions){
+        this.mTotalFrequency = plannedExecutions;
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/ScheduledActionService.java
similarity index 97%
rename from app/src/main/java/org/gnucash/android/service/SchedulerService.java
rename to app/src/main/java/org/gnucash/android/service/ScheduledActionService.java
index 1d6e461e..0d55b9fa 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/ScheduledActionService.java
@@ -52,11 +52,11 @@
  * Scheduled runs of the service should be achieved using an {@link android.app.AlarmManager}</p>
  * @author Ngewi Fet <ngewif@gmail.com>
  */
-public class SchedulerService extends IntentService {
+public class ScheduledActionService extends IntentService {
 
-    public static final String LOG_TAG = "SchedulerService";
+    public static final String LOG_TAG = "ScheduledActionService";
 
-    public SchedulerService() {
+    public ScheduledActionService() {
         super(LOG_TAG);
     }
 
@@ -100,7 +100,7 @@ public static void processScheduledActions(List<ScheduledAction> scheduledAction
         for (ScheduledAction scheduledAction : scheduledActions) {
 
             long now        = System.currentTimeMillis();
-            int totalPlannedExecutions = scheduledAction.getTotalFrequency();
+            int totalPlannedExecutions = scheduledAction.getTotalPlannedExecutionCount();
             int executionCount = scheduledAction.getExecutionCount();
 
             if (scheduledAction.getStartTime() > now    //if schedule begins in the future
@@ -133,7 +133,7 @@ public static void executeScheduledEvent(ScheduledAction scheduledAction, SQLite
                 //if the end time is in the future, we execute all schedules until now (current time)
                 //if there is no end time, we execute all schedules until now
                 long endTime = scheduledAction.getEndTime() > 0 ? Math.min(scheduledAction.getEndTime(), now) : now;
-                int totalPlannedExecutions = scheduledAction.getTotalFrequency();
+                int totalPlannedExecutions = scheduledAction.getTotalPlannedExecutionCount();
                 List<Transaction> transactions = new ArrayList<>();
 
                 //we may be executing scheduled action significantly after scheduled time (depending on when Android fires the alarm)
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/ScheduledActionDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/ScheduledActionDbAdapterTest.java
index 39e702e9..51f5c7ff 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/ScheduledActionDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/ScheduledActionDbAdapterTest.java
@@ -63,7 +63,7 @@ public void testGenerateRepeatString(){
         PeriodType periodType = PeriodType.MONTH;
         periodType.setMultiplier(2);
         scheduledAction.setRecurrence(new Recurrence(periodType));
-        scheduledAction.setTotalFrequency(4);
+        scheduledAction.setTotalPlannedExecutionCount(4);
 
         String repeatString = "Every 2 months,  for 4 times";
         assertThat(scheduledAction.getRepeatString().trim()).isEqualTo(repeatString);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java b/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java
index 722fb26c..858934d2 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/service/ScheduledActionServiceTest.java
@@ -37,7 +37,7 @@
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.service.SchedulerService;
+import org.gnucash.android.service.ScheduledActionService;
 import org.gnucash.android.test.unit.testutil.GnucashTestRunner;
 import org.gnucash.android.test.unit.testutil.ShadowCrashlytics;
 import org.gnucash.android.test.unit.testutil.ShadowUserVoice;
@@ -134,7 +134,7 @@ public void disabledScheduledActions_shouldNotRun(){
         TransactionsDbAdapter trxnAdapter = TransactionsDbAdapter.getInstance();
 
         assertThat(trxnAdapter.getRecordsCount()).isZero();
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
         assertThat(trxnAdapter.getRecordsCount()).isZero();
     }
 
@@ -152,7 +152,7 @@ public void futureScheduledActions_shouldNotRun(){
         TransactionsDbAdapter trxnAdapter = TransactionsDbAdapter.getInstance();
 
         assertThat(trxnAdapter.getRecordsCount()).isZero();
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
         assertThat(trxnAdapter.getRecordsCount()).isZero();
     }
 
@@ -166,7 +166,7 @@ public void exceededExecutionCounts_shouldNotRun(){
         scheduledAction.setStartTime(new DateTime(2015, 5, 31, 14, 0).getMillis());
         scheduledAction.setEnabled(true);
         scheduledAction.setRecurrence(new Recurrence(PeriodType.WEEK));
-        scheduledAction.setTotalFrequency(4);
+        scheduledAction.setTotalPlannedExecutionCount(4);
         scheduledAction.setExecutionCount(4);
 
         List<ScheduledAction> actions = new ArrayList<>();
@@ -174,7 +174,7 @@ public void exceededExecutionCounts_shouldNotRun(){
 
         TransactionsDbAdapter trxnAdapter = TransactionsDbAdapter.getInstance();
         assertThat(trxnAdapter.getRecordsCount()).isZero();
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
         assertThat(trxnAdapter.getRecordsCount()).isZero();
     }
 
@@ -196,7 +196,7 @@ public void missedScheduledTransactions_shouldBeGenerated(){
 
         List<ScheduledAction> actions = new ArrayList<>();
         actions.add(scheduledAction);
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
 
         int weeks = Weeks.weeksBetween(startTime, new DateTime(2016, 8, 29, 10, 0)).getWeeks();
         int expectedTransactionCount = weeks/2;
@@ -219,7 +219,7 @@ public void endTimeInTheFuture_shouldExecuteOnlyUntilPresent(){
 
         List<ScheduledAction> actions = new ArrayList<>();
         actions.add(scheduledAction);
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
 
         int weeks = Weeks.weeksBetween(startTime, new DateTime(2016, 8, 29, 10, 0)).getWeeks();
         int expectedTransactionCount = weeks/2; //multiplier from the PeriodType
@@ -246,7 +246,7 @@ public void scheduledActionsWithEndTimeInPast_shouldBeExecuted(){
 
         List<ScheduledAction> actions = new ArrayList<>();
         actions.add(scheduledAction);
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
 
         int expectedCount = 5;
         assertThat(scheduledAction.getExecutionCount()).isEqualTo(expectedCount);
@@ -268,7 +268,7 @@ public void recurringTransactions_shouldHaveScheduledActionUID(){
 
         List<ScheduledAction> actions = new ArrayList<>();
         actions.add(scheduledAction);
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
     }
 
     //// FIXME: 16.08.2016 Cannot find the file after export. But the export task is called and run
@@ -288,7 +288,7 @@ public void scheduledBackups_shouldRunOnlyOnce(){
 
         List<ScheduledAction> actions = new ArrayList<>();
         actions.add(scheduledBackup);
-        SchedulerService.processScheduledActions(actions, mDb);
+        ScheduledActionService.processScheduledActions(actions, mDb);
 
         File[] backupFiles = backupFolder.listFiles();
         assertThat(backupFiles).hasSize(1);
