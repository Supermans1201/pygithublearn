From a9ebfc5a9aaeacc994fe34fbd15a221dcc1f40b8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 4 Sep 2015 19:22:18 +0200
Subject: [PATCH] Use a calculator keyboard for the amount edit text.

Implemented with an adapted CustomKeyboard taken from here:

http://www.fampennings.nl/maarten/android/09keyboard/index.htm
http://forum.xda-developers.com/showthread.php?t=2497237

Just the minimum implemented. It needs a lot of polishment.
---
 .../ui/transaction/TransactionFormFragment.java    |   5 +-
 .../gnucash/android/ui/util/CustomKeyboard.java    | 230 ++++++++++++++++++
 .../main/res/layout/fragment_new_transaction.xml   | 268 +++++++++++----------
 app/src/main/res/xml/calculator_keyboard.xml       |  31 +++
 4 files changed, 406 insertions(+), 128 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
 create mode 100644 app/src/main/res/xml/calculator_keyboard.xml

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 8b414720..3a6abf1d 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -73,6 +73,7 @@
 import org.gnucash.android.ui.util.AmountInputFormatter;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.TransactionTypeSwitch;
+import org.gnucash.android.ui.util.CustomKeyboard;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
@@ -218,6 +219,7 @@
     private List<Split> mSplitsList = new ArrayList<Split>();
 
     private boolean mEditMode = false;
+    private CustomKeyboard mCalculatorKeyboard;
 
     /**
 	 * Create the view and retrieve references to the UI elements
@@ -301,7 +303,8 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             mEditMode = true;
 		}
 
-
+        mCalculatorKeyboard = new CustomKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
+        mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
 	}
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
new file mode 100644
index 00000000..adc9fda3
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -0,0 +1,230 @@
+/**
+ * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * If you use this software in a product, an acknowledgment in the product
+ * documentation would be appreciated but is not required.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.inputmethodservice.Keyboard;
+import android.inputmethodservice.KeyboardView;
+import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Layout;
+import android.view.HapticFeedbackConstants;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnFocusChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+
+/**
+ * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
+ *
+ * @author Maarten Pennings, extended by SimplicityApks
+ * @date 2012 December 23
+ */
+public class CustomKeyboard {
+
+    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    private KeyboardView mKeyboardView;
+    /** A link to the activity that hosts the {@link #mKeyboardView}. */
+    private Activity mHostActivity;
+    private boolean hapticFeedback;
+
+    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
+        @Override
+        public void onKey(int primaryCode, int[] keyCodes) {
+            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+
+            /*
+            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
+                return;
+            */
+
+            EditText edittext = (EditText) focusCurrent;
+            Editable editable = edittext.getText();
+            int start = edittext.getSelectionStart();
+            // delete the selection, if chars are selected:
+            int end = edittext.getSelectionEnd();
+
+            if (end > start)
+                editable.delete(start, end);
+
+            switch (primaryCode) {
+                case 48:
+                case 49:
+                case 50:
+                case 51:
+                case 52:
+                case 53:
+                case 54:
+                case 55:
+                case 56:
+                case 57:
+                    editable.insert(start, Character.toString((char) primaryCode));
+                    break;
+                case KeyEvent.KEYCODE_BACK:
+                    hideCustomKeyboard();
+                    break;
+                case -5:
+                    editable.delete(start - 1, start);
+            }
+        }
+
+        @Override
+        public void onPress(int arg0) {
+            // vibrate if haptic feedback is enabled:
+            if (hapticFeedback && arg0 != 0)
+                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
+        }
+
+        @Override public void onRelease(int primaryCode) { }
+        @Override public void onText(CharSequence text) { }
+        @Override public void swipeLeft() { }
+        @Override public void swipeRight() { }
+        @Override public void swipeDown() { }
+        @Override public void swipeUp() { }
+    };
+
+    /**
+     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
+     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
+     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
+     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
+     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
+     *
+     * @param host The hosting activity.
+     * @param viewid The id of the KeyboardView.
+     * @param layoutid The id of the xml file containing the keyboard layout.
+     */
+    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+        mHostActivity = host;
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
+        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
+        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
+        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
+        // Hide the standard keyboard initially
+        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+    }
+
+    /** Returns whether the CustomKeyboard is visible. */
+    public boolean isCustomKeyboardVisible() {
+        return mKeyboardView.getVisibility() == View.VISIBLE;
+    }
+
+    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    public void showCustomKeyboard(View v) {
+        if (v != null)
+            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+        mKeyboardView.setVisibility(View.VISIBLE);
+        mKeyboardView.setEnabled(true);
+    }
+
+    /** Make the CustomKeyboard invisible. */
+    public void hideCustomKeyboard() {
+        mKeyboardView.setVisibility(View.GONE);
+        mKeyboardView.setEnabled(false);
+    }
+
+    /**
+     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
+     *
+     * @param resid The resource id of the EditText that registers to the custom keyboard.
+     */
+    public void registerEditText(int resid) {
+        // Find the EditText 'resid'
+        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
+        // Make the custom keyboard appear
+        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    showCustomKeyboard(v);
+                else
+                    hideCustomKeyboard();
+            }
+        });
+
+        edittext.setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        /**
+         * Try to show cursor the complicated way:
+         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
+         * fixes the cursor not movable bug
+         */
+        OnTouchListener otl = new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!isCustomKeyboardVisible())
+                    showCustomKeyboard(v);
+
+                /*
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_MOVE:
+                        Layout layout = ((EditText) v).getLayout();
+                        float x = event.getX() + edittext.getScrollX();
+                        int offset = layout.getOffsetForHorizontal(0, x);
+
+                        if (offset > 0)
+                            if (x > layout.getLineMax(0))
+                                edittext.setSelection(offset);     // touch was at the end of the text
+                            else
+                                edittext.setSelection(offset - 1);
+                        break;
+                }
+                */
+
+                edittext.onTouchEvent(event);               // Call native handler
+
+                return false;
+            }
+
+        };
+
+        edittext.setOnTouchListener(otl);
+    }
+
+    /**
+     * Enables or disables the Haptic feedback on keyboard touches
+     * @param goEnabled true if you want haptic feedback, falso otherwise
+     */
+    public void enableHapticFeedback(boolean goEnabled) {
+        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
+        hapticFeedback = goEnabled;
+    }
+}
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index c5c124ce..9945ef72 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -15,133 +15,147 @@
  limitations under the License.
 -->
 
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
 	android:layout_width="match_parent"
 	android:layout_height="match_parent">
 
-	<TableLayout android:id="@+id/fragment_transaction_form"
-		android:layout_width="match_parent"
-		android:layout_height="wrap_content"
-		android:padding="@dimen/dialog_padding"
-		android:orientation="vertical" >
-
-		<TableRow style="@style/FormRow">
-		<AutoCompleteTextView
-			android:id="@+id/input_transaction_name"
-			android:layout_width="match_parent"
-			android:layout_height="wrap_content"
-			android:hint="@string/label_transaction_name"
-			android:inputType="textCapSentences"
-			android:imeOptions="actionNext"
-			android:nextFocusDown="@+id/input_transaction_amount"
-			android:background="@android:color/transparent"
-			android:textSize="22sp" />
-		</TableRow>
-		<View style="@style/Divider" android:layout_marginLeft="0dp" />
-
-		<TableRow style="@style/FormRow">
-			<TextView
-				android:id="@+id/currency_symbol"
-				style="@style/FormIcon"
-				android:gravity="center"
-				android:textColor="@color/debit_red"
-				android:textSize="22dp"
-				android:text="$" />
-
-			<EditText
-				android:id="@+id/input_transaction_amount"
-				android:layout_width="0dp"
-				android:layout_weight="3"
-				android:layout_height="wrap_content"
-				android:hint="@string/label_transaction_amount"
-				android:inputType="text"
-				android:nextFocusDown="@+id/input_description"
-				android:drawableRight="@drawable/content_split_holo_light"
-				android:drawableEnd="@drawable/content_split_holo_light"
-				android:background="@android:color/transparent"
-				android:textColor="@color/debit_red"
-				android:textSize="20sp" />
-
-			<org.gnucash.android.ui.util.TransactionTypeSwitch
-				android:id="@+id/input_transaction_type"
-				android:layout_width="0dp"
-				android:layout_weight="2"
-				android:layout_height="wrap_content"
-				android:textOn="@string/label_debit"
-				android:textOff="@string/label_credit"
-				android:textAllCaps="true"
-				android:gravity="end|center_vertical"
-				android:textColor="@color/debit_red"
-				android:checked="true"/>
-
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow android:id="@+id/layout_double_entry"
-			style="@style/FormRow" >
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_forward"/>
-			<Spinner
-				android:id="@+id/input_double_entry_accounts_spinner"
-				android:layout_width="0dp"
-				android:layout_weight="5"
-				android:layout_height="wrap_content"  />
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow style="@style/FormRow" >
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_time"/>
-
-			<TextView android:id="@+id/input_date"
-				android:layout_width="0dp"
-				android:layout_weight="3"
-				android:layout_height="wrap_content"
-				android:gravity="center"      />
-
-			<TextView android:id="@+id/input_time"
-				android:layout_width="0dp"
-				android:layout_weight="2"
-				android:layout_height="wrap_content"
-				android:gravity="center"        />
-		</TableRow>
-		<View style="@style/Divider" />
-
-		<TableRow style="@style/FormRow">
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_sort_by_size"/>
-
-			<EditText android:id="@+id/input_description"
-				android:layout_width="0dp"
-				android:layout_weight="5"
-				android:layout_height="wrap_content"
-				android:singleLine="false"
-				android:background="@android:color/transparent"
-				android:hint="@string/label_transaction_description"
-				android:inputType="textMultiLine|textCapSentences" />
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow style="@style/FormRow">
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_rotate_right"/>
-
-			<TextView android:id="@+id/input_recurrence"
-				android:layout_width="0dp"
-				android:layout_height="wrap_content"
-				android:layout_weight="5"
-				android:gravity="center"
-				android:text="@string/label_tap_to_create_schedule"
-				style="@style/Dropdown.TextView" />
-
-		</TableRow>
-
-		<CheckBox android:id="@+id/checkbox_save_template"
-			android:layout_width="match_parent"
-			android:layout_height="wrap_content"
-			android:layout_marginBottom="@dimen/form_row_bottom_margin"
-			android:visibility="gone"
-			android:text="@string/label_save_template" />
-		<!-- Not exposing the transaction template checkbox to the UI at this time -->
-	</TableLayout>
-</ScrollView>
\ No newline at end of file
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <TableLayout android:id="@+id/fragment_transaction_form"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/dialog_padding"
+            android:orientation="vertical" >
+
+            <TableRow style="@style/FormRow">
+            <AutoCompleteTextView
+                android:id="@+id/input_transaction_name"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:hint="@string/label_transaction_name"
+                android:inputType="textCapSentences"
+                android:imeOptions="actionNext"
+                android:nextFocusDown="@+id/input_transaction_amount"
+                android:background="@android:color/transparent"
+                android:textSize="22sp" />
+            </TableRow>
+            <View style="@style/Divider" android:layout_marginLeft="0dp" />
+
+            <TableRow style="@style/FormRow">
+                <TextView
+                    android:id="@+id/currency_symbol"
+                    style="@style/FormIcon"
+                    android:gravity="center"
+                    android:textColor="@color/debit_red"
+                    android:textSize="22dp"
+                    android:text="$" />
+
+                <EditText
+                    android:id="@+id/input_transaction_amount"
+                    android:layout_width="0dp"
+                    android:layout_weight="3"
+                    android:layout_height="wrap_content"
+                    android:hint="@string/label_transaction_amount"
+                    android:inputType="none"
+                    android:nextFocusDown="@+id/input_description"
+                    android:drawableRight="@drawable/content_split_holo_light"
+                    android:drawableEnd="@drawable/content_split_holo_light"
+                    android:background="@android:color/transparent"
+                    android:textColor="@color/debit_red"
+                    android:textSize="20sp" />
+
+                <org.gnucash.android.ui.util.TransactionTypeSwitch
+                    android:id="@+id/input_transaction_type"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:textOn="@string/label_debit"
+                    android:textOff="@string/label_credit"
+                    android:textAllCaps="true"
+                    android:gravity="end|center_vertical"
+                    android:textColor="@color/debit_red"
+                    android:checked="true"/>
+
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow android:id="@+id/layout_double_entry"
+                style="@style/FormRow" >
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_forward"/>
+                <Spinner
+                    android:id="@+id/input_double_entry_accounts_spinner"
+                    android:layout_width="0dp"
+                    android:layout_weight="5"
+                    android:layout_height="wrap_content"  />
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow style="@style/FormRow" >
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_time"/>
+
+                <TextView android:id="@+id/input_date"
+                    android:layout_width="0dp"
+                    android:layout_weight="3"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"      />
+
+                <TextView android:id="@+id/input_time"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"        />
+            </TableRow>
+            <View style="@style/Divider" />
+
+            <TableRow style="@style/FormRow">
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_sort_by_size"/>
+
+                <EditText android:id="@+id/input_description"
+                    android:layout_width="0dp"
+                    android:layout_weight="5"
+                    android:layout_height="wrap_content"
+                    android:singleLine="false"
+                    android:background="@android:color/transparent"
+                    android:hint="@string/label_transaction_description"
+                    android:inputType="textMultiLine|textCapSentences" />
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow style="@style/FormRow">
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_rotate_right"/>
+
+                <TextView android:id="@+id/input_recurrence"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="5"
+                    android:gravity="center"
+                    android:text="@string/label_tap_to_create_schedule"
+                    style="@style/Dropdown.TextView" />
+
+            </TableRow>
+
+            <CheckBox android:id="@+id/checkbox_save_template"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="@dimen/form_row_bottom_margin"
+                android:visibility="gone"
+                android:text="@string/label_save_template" />
+            <!-- Not exposing the transaction template checkbox to the UI at this time -->
+        </TableLayout>
+    </ScrollView>
+    <android.inputmethodservice.KeyboardView android:id="@+id/calculator_keyboard"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:visibility="gone" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
new file mode 100644
index 00000000..dcddfc59
--- /dev/null
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- FIXME: make locale independent -->
+<Keyboard xmlns:android="http://schemas.android.com/apk/res/android"
+    android:keyWidth="20%p"
+    android:keyHeight="10%p">
+
+    <Row>
+        <Key android:codes="55" android:keyLabel="7" android:keyEdgeFlags="left" />
+        <Key android:codes="56" android:keyLabel="8" />
+        <Key android:codes="57" android:keyLabel="9" />
+        <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
+            android:isRepeatable="true" android:horizontalGap="6.25%p" />
+    </Row>
+    <Row>
+        <Key android:codes="52" android:keyLabel="4" android:keyEdgeFlags="left" />
+        <Key android:codes="53" android:keyLabel="5" />
+        <Key android:codes="54" android:keyLabel="6" />
+        <Key android:codes="55006" android:keyLabel="CLR"
+            android:horizontalGap="6.25%p" android:keyEdgeFlags="right" />
+    </Row>
+    <Row>
+        <Key android:codes="49" android:keyLabel="1" android:keyEdgeFlags="left" />
+        <Key android:codes="50" android:keyLabel="2" />
+        <Key android:codes="51" android:keyLabel="3" />
+    </Row>
+    <Row>
+        <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
+        <Key android:codes="5001" android:keyLabel="." />
+        <Key android:codes="5002" android:keyLabel="=" android:keyEdgeFlags="right" />
+    </Row>
+</Keyboard>
\ No newline at end of file
