From 710c2a95c813b4f4b14f3daac7dafe9864597e78 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 23 May 2015 23:55:17 +0800
Subject: [PATCH 1/4] remove static, diffenrent adapter should have different
 tag

---
 app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index f10c315d..e63ccb95 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -42,7 +42,7 @@
 	/**
 	 * Tag for logging
 	 */
-	protected static String LOG_TAG = "DatabaseAdapter";
+	protected String LOG_TAG = "DatabaseAdapter";
 
 	/**
 	 * SQLite database

From ba4438ce24bd34171029b364986129bca81715c9 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 May 2015 00:01:21 +0800
Subject: [PATCH 2/4] ROOT account's parent should be null

---
 app/src/main/java/org/gnucash/android/db/DatabaseHelper.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 412f0486..d7ed8750 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -451,7 +451,7 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
             //assign a root account to all accounts which had null as parent (top-level accounts)
             String rootAccountUID = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
             contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, rootAccountUID);
-            db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL", null);
+            db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL AND " + AccountEntry.COLUMN_TYPE + " != ?", new String[]{"ROOT"});
 
             Log.i(LOG_TAG, "Migrating existing recurring transactions");
             Cursor cursor = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);

From 2fc46fa31c34efccd40aeb7d13619c5785917e31 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 May 2015 00:02:21 +0800
Subject: [PATCH 3/4] rewrite autobalancing in migration

---
 .../org/gnucash/android/db/DatabaseHelper.java     | 67 +++++++++++++++++-----
 1 file changed, 52 insertions(+), 15 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index d7ed8750..39e2e6de 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -28,15 +28,15 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
-import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 
 import java.io.File;
+import java.math.BigDecimal;
 import java.sql.Timestamp;
+import java.util.Currency;
+import java.util.UUID;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
@@ -485,20 +485,57 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 
             //auto-balance existing splits
             Log.i(LOG_TAG, "Auto-balancing existing transaction splits");
-            cursor = transactionsDbAdapter.fetchAllRecords();
-            while (cursor.moveToNext()){
-                Transaction transaction = transactionsDbAdapter.buildTransactionInstance(cursor);
-                if (transaction.isTemplate())
-                    continue;
-                Money imbalance = transaction.getImbalance();
-                if (!imbalance.isAmountZero()){
-                    Split split = new Split(imbalance.negate(),
-                            accountsDbAdapter.getOrCreateImbalanceAccountUID(imbalance.getCurrency()));
-                    split.setTransactionUID(transaction.getUID());
-                    splitsDbAdapter.addSplit(split);
+//            cursor = transactionsDbAdapter.fetchAllRecords();
+//            while (cursor.moveToNext()){
+//                Transaction transaction = transactionsDbAdapter.buildTransactionInstance(cursor);
+//                if (transaction.isTemplate())
+//                    continue;
+//                Money imbalance = transaction.getImbalance();
+//                if (!imbalance.isAmountZero()){
+//                    Split split = new Split(imbalance.negate(),
+//                            accountsDbAdapter.getOrCreateImbalanceAccountUID(imbalance.getCurrency()));
+//                    split.setTransactionUID(transaction.getUID());
+//                    splitsDbAdapter.addSplit(split);
+//                }
+//            }
+//            cursor.close();
+            cursor = db.query(
+                    "trans_extra_info , " + TransactionEntry.TABLE_NAME + " ON "
+                            + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                            " = trans_extra_info.trans_acct_t_uid",
+                    new String[]{
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
+                            "trans_extra_info.trans_acct_balance AS trans_acct_balance",
+                            "trans_extra_info.trans_currency_count AS trans_currency_count",
+                    }, "trans_acct_balance != 0 AND trans_currency_count = 1 AND " +
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " == 0", null, null, null, null);
+            try {
+                String timestamp = (new Timestamp(System.currentTimeMillis())).toString();
+                while (cursor.moveToNext()){
+                    double imbalance = cursor.getDouble(cursor.getColumnIndexOrThrow("trans_acct_balance"));
+                    BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
+                    if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
+                        String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                        String TransactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+                        contentValues.clear();
+                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, UUID.randomUUID().toString().replaceAll("-", ""));
+                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                        contentValues.put(SplitEntry.COLUMN_AMOUNT,     decimalImbalance.abs().toPlainString());
+                        contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) > 0 ? "DEBIT" : "CREDIT");
+                        contentValues.put(SplitEntry.COLUMN_MEMO,       "");
+                        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, accountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode)));
+                        contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, TransactionUID);
+                        db.insert(SplitEntry.TABLE_NAME, null, contentValues);
+                        contentValues.clear();
+                        contentValues.put(TransactionEntry.COLUMN_MODIFIED_AT, timestamp);
+                        db.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry.COLUMN_UID + " == ?",
+                                new String[]{TransactionUID});
+                    }
                 }
+            } finally {
+                cursor.close();
             }
-            cursor.close();
 
             Log.i(LOG_TAG, "Dropping temporary migration tables");
             db.execSQL("DROP TABLE " + SplitEntry.TABLE_NAME + "_bak");

From aba96cb4d8acb998bb0ccbca72aac3b6cbfb0c5b Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 May 2015 14:05:55 +0800
Subject: [PATCH 4/4] remove use of adapters

---
 .../org/gnucash/android/db/DatabaseHelper.java     | 147 ++++++++++++++++-----
 .../org/gnucash/android/db/MigrationHelper.java    |   6 +
 2 files changed, 122 insertions(+), 31 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 39e2e6de..a4648673 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -26,17 +26,16 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
+import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.ScheduledAction;
+import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Transaction;
 
 import java.io.File;
 import java.math.BigDecimal;
 import java.sql.Timestamp;
-import java.util.Currency;
-import java.util.UUID;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
@@ -439,36 +438,84 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 
             //================================ END TABLE MIGRATIONS ================================
 
+            // String timestamp to be used for all new created entities in migration
+            String timestamp = (new Timestamp(System.currentTimeMillis())).toString();
 
-
-            ScheduledActionDbAdapter scheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
-            SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(db);
-            TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(db, splitsDbAdapter);
-            AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db,transactionsDbAdapter);
+            //ScheduledActionDbAdapter scheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
+            //SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(db);
+            //TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(db, splitsDbAdapter);
+            //AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db,transactionsDbAdapter);
 
             Log.i(LOG_TAG, "Creating default root account if none exists");
             ContentValues contentValues = new ContentValues();
-            //assign a root account to all accounts which had null as parent (top-level accounts)
-            String rootAccountUID = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
+            //assign a root account to all accounts which had null as parent except ROOT (top-level accounts)
+            String rootAccountUID;
+            Cursor cursor = db.query(AccountEntry.TABLE_NAME,
+                    new String[]{AccountEntry.COLUMN_UID},
+                    AccountEntry.COLUMN_TYPE + "= ?",
+                    new String[]{AccountType.ROOT.name()}, null, null, null);
+            try {
+                if (cursor.moveToFirst()) {
+                    rootAccountUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+                }
+                else
+                {
+                    rootAccountUID = MigrationHelper.generateUUID();
+                    contentValues.clear();
+                    contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, rootAccountUID);
+                    contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                    contentValues.put(AccountEntry.COLUMN_NAME,         "ROOT");
+                    contentValues.put(AccountEntry.COLUMN_TYPE,         "ROOT");
+                    contentValues.put(AccountEntry.COLUMN_CURRENCY,     Money.DEFAULT_CURRENCY_CODE);
+                    contentValues.put(AccountEntry.COLUMN_PLACEHOLDER,  0);
+                    contentValues.put(AccountEntry.COLUMN_HIDDEN,       1);
+                    contentValues.putNull(AccountEntry.COLUMN_COLOR_CODE);
+                    contentValues.put(AccountEntry.COLUMN_FAVORITE, 0);
+                    contentValues.put(AccountEntry.COLUMN_FULL_NAME,    " ");
+                    contentValues.putNull(AccountEntry.COLUMN_PARENT_ACCOUNT_UID);
+                    contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
+                    db.insert(AccountEntry.TABLE_NAME, null, contentValues);
+                }
+            } finally {
+                cursor.close();
+            }
+            //String rootAccountUID = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
+            contentValues.clear();
             contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, rootAccountUID);
             db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL AND " + AccountEntry.COLUMN_TYPE + " != ?", new String[]{"ROOT"});
 
             Log.i(LOG_TAG, "Migrating existing recurring transactions");
-            Cursor cursor = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);
+            cursor = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);
+            long lastRun = System.currentTimeMillis();
             while (cursor.moveToNext()){
                 contentValues.clear();
-                Timestamp timestamp = new Timestamp(cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
-                contentValues.put(TransactionEntry.COLUMN_CREATED_AT, timestamp.toString());
+                Timestamp timestampT = new Timestamp(cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
+                contentValues.put(TransactionEntry.COLUMN_CREATED_AT, timestampT.toString());
                 long transactionId = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID));
                 db.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry._ID + "=" + transactionId, null);
 
-                ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
-                scheduledAction.setActionUID(cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
-                long period = cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period"));
-                scheduledAction.setPeriod(period);
-                scheduledAction.setStartTime(timestamp.getTime()); //the start time is when the transaction was created
-                scheduledAction.setLastRun(System.currentTimeMillis()); //prevent this from being executed at the end of migration
-                scheduledActionDbAdapter.addScheduledAction(scheduledAction);
+                //ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
+                //scheduledAction.setActionUID(cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
+                //long period = cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period"));
+                //scheduledAction.setPeriod(period);
+                //scheduledAction.setStartTime(timestampT.getTime()); //the start time is when the transaction was created
+                //scheduledAction.setLastRun(System.currentTimeMillis()); //prevent this from being executed at the end of migration
+
+                contentValues.clear();
+                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, MigrationHelper.generateUUID());
+                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
+                contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period")));
+                contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, timestampT.getTime());
+                contentValues.put(ScheduledActionEntry.COLUMN_END_TIME, 0);
+                contentValues.put(ScheduledActionEntry.COLUMN_LAST_RUN, lastRun);
+                contentValues.put(ScheduledActionEntry.COLUMN_TYPE, "TRANSACTION");
+                contentValues.put(ScheduledActionEntry.COLUMN_TAG, "");
+                contentValues.put(ScheduledActionEntry.COLUMN_ENABLED, 1);
+                contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, 0);
+                contentValues.put(ScheduledActionEntry.COLUMN_EXECUTION_COUNT, 0);
+                //scheduledActionDbAdapter.addScheduledAction(scheduledAction);
+                db.insert(ScheduledActionEntry.TABLE_NAME, null, contentValues);
 
                 //build intent for recurring transactions in the database
                 Intent intent = new Intent(Intent.ACTION_INSERT);
@@ -500,31 +547,69 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 //            }
 //            cursor.close();
             cursor = db.query(
-                    "trans_extra_info , " + TransactionEntry.TABLE_NAME + " ON "
-                            + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                            " = trans_extra_info.trans_acct_t_uid",
+                    TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON "
+                            + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + "=" + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+                            + " , " + AccountEntry.TABLE_NAME + " ON "
+                            + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
                     new String[]{
                             TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
                             TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
-                            "trans_extra_info.trans_acct_balance AS trans_acct_balance",
-                            "trans_extra_info.trans_currency_count AS trans_currency_count",
-                    }, "trans_acct_balance != 0 AND trans_currency_count = 1 AND " +
-                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " == 0", null, null, null, null);
+                            "TOTAL ( CASE WHEN " +
+                                    SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN " +
+                                    SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " ELSE - " +
+                                    SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance",
+                            "COUNT ( DISTINCT " +
+                                    AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY +
+                                    " ) AS trans_currency_count"
+                    },
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " == 0",
+                    null,
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID,
+                    "trans_acct_balance != 0 AND trans_currency_count = 1",
+                    null);
             try {
-                String timestamp = (new Timestamp(System.currentTimeMillis())).toString();
                 while (cursor.moveToNext()){
                     double imbalance = cursor.getDouble(cursor.getColumnIndexOrThrow("trans_acct_balance"));
                     BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
                     if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
                         String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                        String imbalanceAccountName = GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currencyCode;
+                        String imbalanceAccountUID;
+                        Cursor c = db.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
+                                AccountEntry.COLUMN_FULL_NAME + "= ?", new String[]{imbalanceAccountName},
+                                null, null, null);
+                        try {
+                            if (c.moveToFirst()) {
+                                imbalanceAccountUID = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+                            }
+                            else {
+                                imbalanceAccountUID = MigrationHelper.generateUUID();
+                                contentValues.clear();
+                                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, imbalanceAccountUID);
+                                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                                contentValues.put(AccountEntry.COLUMN_NAME,         imbalanceAccountName);
+                                contentValues.put(AccountEntry.COLUMN_TYPE,         "BANK");
+                                contentValues.put(AccountEntry.COLUMN_CURRENCY,     currencyCode);
+                                contentValues.put(AccountEntry.COLUMN_PLACEHOLDER,  0);
+                                contentValues.put(AccountEntry.COLUMN_HIDDEN,       GnuCashApplication.isDoubleEntryEnabled() ? 0 : 1);
+                                contentValues.putNull(AccountEntry.COLUMN_COLOR_CODE);
+                                contentValues.put(AccountEntry.COLUMN_FAVORITE, 0);
+                                contentValues.put(AccountEntry.COLUMN_FULL_NAME,    imbalanceAccountName);
+                                contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, rootAccountUID);
+                                contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
+                                db.insert(AccountEntry.TABLE_NAME, null, contentValues);
+                            }
+                        } finally {
+                            c.close();
+                        }
                         String TransactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
                         contentValues.clear();
-                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, UUID.randomUUID().toString().replaceAll("-", ""));
+                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, MigrationHelper.generateUUID());
                         contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
                         contentValues.put(SplitEntry.COLUMN_AMOUNT,     decimalImbalance.abs().toPlainString());
-                        contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) > 0 ? "DEBIT" : "CREDIT");
+                        contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) < 0 ? "DEBIT" : "CREDIT");
                         contentValues.put(SplitEntry.COLUMN_MEMO,       "");
-                        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, accountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode)));
+                        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, imbalanceAccountUID);
                         contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, TransactionUID);
                         db.insert(SplitEntry.TABLE_NAME, null, contentValues);
                         contentValues.clear();
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 60cabf63..5b90ebca 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -33,6 +33,7 @@
 import java.io.IOError;
 import java.io.IOException;
 import java.nio.channels.FileChannel;
+import java.util.UUID;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
@@ -187,4 +188,9 @@ public void run() {
                 oldExportFolder.delete();
         }
     };
+
+    public static String generateUUID()
+    {
+        return UUID.randomUUID().toString().replaceAll("-", "");
+    }
 }
