From 4761eae374f6f0650cffc258ae850cee2c6fcf93 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 9 Dec 2016 11:53:52 +0100
Subject: [PATCH 01/10] Extract the creation of the Exporter into a new method

---
 .../gnucash/android/export/ExportAsyncTask.java    | 30 +++++++++++-----------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index c098131c..fd784158 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -142,21 +142,7 @@ protected void onPreExecute() {
     @Override
     protected Boolean doInBackground(ExportParams... params) {
         mExportParams = params[0];
-
-        switch (mExportParams.getExportFormat()) {
-                case QIF:
-                    mExporter = new QifExporter(mExportParams, mDb);
-                    break;
-
-                case OFX:
-                    mExporter = new OfxExporter(mExportParams, mDb);
-                    break;
-
-                case XML:
-                default:
-                    mExporter = new GncXmlExporter(mExportParams, mDb);
-                    break;
-        }
+        mExporter = getExporter();
 
         try {
             // FIXME: detect if there aren't transactions to export and inform the user
@@ -274,6 +260,20 @@ protected void onPostExecute(Boolean exportResult) {
         }
     }
 
+    private Exporter getExporter() {
+        switch (mExportParams.getExportFormat()) {
+            case QIF:
+                return new QifExporter(mExportParams, mDb);
+
+            case OFX:
+                return new OfxExporter(mExportParams, mDb);
+
+            case XML:
+            default:
+                return new GncXmlExporter(mExportParams, mDb);
+        }
+    }
+
     private void moveExportToGoogleDrive(){
         Log.i(TAG, "Moving exported file to Google Drive");
         final GoogleApiClient googleApiClient = BackupPreferenceFragment.getGoogleApiClient(GnuCashApplication.getAppContext());

From ebff23413f342505b471353d8840d384d6766b5a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Thu, 29 Dec 2016 10:08:55 +0100
Subject: [PATCH 02/10] Extract code to move to the export target into a new
 method

---
 .../gnucash/android/export/ExportAsyncTask.java    | 48 ++++++++++++----------
 1 file changed, 26 insertions(+), 22 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index fd784158..086104c5 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -165,28 +165,7 @@ public void run() {
             return false;
         }
 
-        switch (mExportParams.getExportTarget()) {
-            case SHARING:
-                List<String> sdCardExportedFiles = moveExportToSDCard();
-                shareFiles(sdCardExportedFiles);
-                return true;
-
-            case DROPBOX:
-                moveExportToDropbox();
-                return true;
-
-            case GOOGLE_DRIVE:
-                moveExportToGoogleDrive();
-                return true;
-
-            case OWNCLOUD:
-                moveExportToOwnCloud();
-                return true;
-
-            case SD_CARD:
-                moveExportToSDCard();
-                return true;
-        }
+        moveToTarget();
 
         return false;
     }
@@ -274,6 +253,31 @@ private Exporter getExporter() {
         }
     }
 
+    private void moveToTarget() {
+        switch (mExportParams.getExportTarget()) {
+            case SHARING:
+                List<String> sdCardExportedFiles = moveExportToSDCard();
+                shareFiles(sdCardExportedFiles);
+                break;
+
+            case DROPBOX:
+                moveExportToDropbox();
+                break;
+
+            case GOOGLE_DRIVE:
+                moveExportToGoogleDrive();
+                break;
+
+            case OWNCLOUD:
+                moveExportToOwnCloud();
+                break;
+
+            case SD_CARD:
+                moveExportToSDCard();
+                break;
+        }
+    }
+
     private void moveExportToGoogleDrive(){
         Log.i(TAG, "Moving exported file to Google Drive");
         final GoogleApiClient googleApiClient = BackupPreferenceFragment.getGoogleApiClient(GnuCashApplication.getAppContext());

From e344246f6f77ad8067300719ef1cad2f6c46f26f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Thu, 29 Dec 2016 17:24:28 +0100
Subject: [PATCH 03/10] Always inform the user if sending to the export target
 fails

Errors were logged to Logcat, but the process always ended as succesful.

Also fixes https://github.com/codinguser/gnucash-android/issues/616
(There were some cases that 1a76361 didn't fix)
---
 .../gnucash/android/export/ExportAsyncTask.java    | 77 +++++++++-------------
 .../java/org/gnucash/android/export/Exporter.java  |  2 +-
 .../android/test/unit/export/BackupTest.java       |  2 +-
 3 files changed, 32 insertions(+), 49 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 086104c5..fc809afb 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -35,7 +35,6 @@
 
 import com.crashlytics.android.Crashlytics;
 import com.dropbox.sync.android.DbxAccountManager;
-import com.dropbox.sync.android.DbxException;
 import com.dropbox.sync.android.DbxFile;
 import com.dropbox.sync.android.DbxFileSystem;
 import com.dropbox.sync.android.DbxPath;
@@ -165,9 +164,13 @@ public void run() {
             return false;
         }
 
-        moveToTarget();
-
-        return false;
+        try {
+            moveToTarget();
+        } catch (Exporter.ExporterException e) {
+            Crashlytics.log(Log.ERROR, TAG, "Error sending exported files to target: " + e.getMessage());
+            return false;
+        }
+        return true;
     }
 
     /**
@@ -253,7 +256,7 @@ private Exporter getExporter() {
         }
     }
 
-    private void moveToTarget() {
+    private void moveToTarget() throws Exporter.ExporterException {
         switch (mExportParams.getExportTarget()) {
             case SHARING:
                 List<String> sdCardExportedFiles = moveExportToSDCard();
@@ -275,10 +278,13 @@ private void moveToTarget() {
             case SD_CARD:
                 moveExportToSDCard();
                 break;
+
+            default:
+                throw new Exporter.ExporterException(mExportParams, "Invalid target");
         }
     }
 
-    private void moveExportToGoogleDrive(){
+    private void moveExportToGoogleDrive() throws Exporter.ExporterException {
         Log.i(TAG, "Moving exported file to Google Drive");
         final GoogleApiClient googleApiClient = BackupPreferenceFragment.getGoogleApiClient(GnuCashApplication.getAppContext());
         googleApiClient.blockingConnect();
@@ -286,8 +292,8 @@ private void moveExportToGoogleDrive(){
         DriveApi.DriveContentsResult driveContentsResult =
                 Drive.DriveApi.newDriveContents(googleApiClient).await(1, TimeUnit.MINUTES);
         if (!driveContentsResult.getStatus().isSuccess()) {
-            Log.e(TAG, "Error while trying to create new file contents");
-            return;
+            throw new Exporter.ExporterException(mExportParams,
+                    "Error while trying to create new file contents");
         }
         final DriveContents driveContents = driveContentsResult.getDriveContents();
         DriveFolder.DriveFileResult driveFileResult = null;
@@ -320,22 +326,19 @@ private void moveExportToGoogleDrive(){
                                                 .await(1, TimeUnit.MINUTES);
             }
         } catch (IOException e) {
-            Crashlytics.logException(e);
-            Log.e(TAG, e.getMessage());
+            throw new Exporter.ExporterException(mExportParams, e);
         }
 
         if (driveFileResult == null)
-            return;
+            throw new Exporter.ExporterException(mExportParams, "No result received");
 
-        if (!driveFileResult.getStatus().isSuccess()) {
-            Log.e(TAG, "Error creating file in Google Drive");
-            showToastFromNonUiThread("Couldn't create the file in Google Drive", Toast.LENGTH_LONG);
-        } else {
-            Log.i(TAG, "Created file with id: " + driveFileResult.getDriveFile().getDriveId());
-        }
+        if (!driveFileResult.getStatus().isSuccess())
+            throw new Exporter.ExporterException(mExportParams, "Error creating file in Google Drive");
+
+        Log.i(TAG, "Created file with id: " + driveFileResult.getDriveFile().getDriveId());
     }
 
-    private void moveExportToDropbox() {
+    private void moveExportToDropbox() throws Exporter.ExporterException {
         Log.i(TAG, "Copying exported file to DropBox");
         String dropboxAppKey = mContext.getString(R.string.dropbox_app_key, BackupPreferenceFragment.DROPBOX_APP_KEY);
         String dropboxAppSecret = mContext.getString(R.string.dropbox_app_secret, BackupPreferenceFragment.DROPBOX_APP_SECRET);
@@ -350,13 +353,8 @@ private void moveExportToDropbox() {
                 dbExportFile.writeFromExistingFile(exportedFile, false);
                 exportedFile.delete();
             }
-        } catch (DbxException.Unauthorized unauthorized) {
-            Crashlytics.logException(unauthorized);
-            Log.e(TAG, unauthorized.getMessage());
-            throw new Exporter.ExporterException(mExportParams);
         } catch (IOException e) {
-            Crashlytics.logException(e);
-            Log.e(TAG, e.getMessage());
+            throw new Exporter.ExporterException(mExportParams);
         } finally {
             if (dbExportFile != null) {
                 dbExportFile.close();
@@ -364,16 +362,15 @@ private void moveExportToDropbox() {
         }
     }
 
-    private void moveExportToOwnCloud() {
+    private void moveExportToOwnCloud() throws Exporter.ExporterException {
         Log.i(TAG, "Copying exported file to ownCloud");
 
         SharedPreferences mPrefs = mContext.getSharedPreferences(mContext.getString(R.string.owncloud_pref), Context.MODE_PRIVATE);
 
         Boolean mOC_sync = mPrefs.getBoolean(mContext.getString(R.string.owncloud_sync), false);
 
-        if(!mOC_sync){
-            Log.e(TAG, "ownCloud not enabled.");
-            return;
+        if (!mOC_sync) {
+            throw new Exporter.ExporterException(mExportParams, "ownCloud not enabled.");
         }
 
         String mOC_server = mPrefs.getString(mContext.getString(R.string.key_owncloud_server), null);
@@ -391,7 +388,7 @@ private void moveExportToOwnCloud() {
             RemoteOperationResult dirResult = new CreateRemoteFolderOperation(
                     mOC_dir, true).execute(mClient);
             if (!dirResult.isSuccess())
-                Log.e(TAG, dirResult.getLogMessage(), dirResult.getException());
+                throw new Exporter.ExporterException(mExportParams, dirResult.getLogMessage());
         }
         for (String exportedFilePath : mExportedFiles) {
             String remotePath = mOC_dir + FileUtils.PATH_SEPARATOR + stripPathPart(exportedFilePath);
@@ -401,10 +398,9 @@ private void moveExportToOwnCloud() {
                     exportedFilePath, remotePath, mimeType).execute(mClient);
 
             if (!result.isSuccess())
-                Log.e(TAG, result.getLogMessage(), result.getException());
-            else {
-                new File(exportedFilePath).delete();
-            }
+                throw new Exporter.ExporterException(mExportParams, result.getLogMessage());
+
+            new File(exportedFilePath).delete();
         }
     }
 
@@ -413,7 +409,7 @@ private void moveExportToOwnCloud() {
      * external storage, which is accessible to the user.
      * @return The list of files moved to the SD card.
      */
-    private List<String> moveExportToSDCard() {
+    private List<String> moveExportToSDCard() throws Exporter.ExporterException {
         Log.i(TAG, "Moving exported file to external storage");
         new File(Exporter.getExportFolderPath(mExporter.mBookUID));
         List<String> dstFiles = new ArrayList<>();
@@ -424,8 +420,6 @@ private void moveExportToOwnCloud() {
                 moveFile(src, dst);
                 dstFiles.add(dst);
             } catch (IOException e) {
-                Crashlytics.logException(e);
-                Log.e(TAG, e.getMessage());
                 throw new Exporter.ExporterException(mExportParams, e);
             }
         }
@@ -536,15 +530,4 @@ public void moveFile(String src, String dst) throws IOException {
         }
         srcFile.delete();
     }
-
-    private void showToastFromNonUiThread(final String message, final int duration) {
-        if (mContext instanceof Activity) {
-            ((Activity) mContext).runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    Toast.makeText(mContext, message, duration).show();
-                }
-            });
-        }
-    }
 }
diff --git a/app/src/main/java/org/gnucash/android/export/Exporter.java b/app/src/main/java/org/gnucash/android/export/Exporter.java
index 88afbaba..c79c9b42 100644
--- a/app/src/main/java/org/gnucash/android/export/Exporter.java
+++ b/app/src/main/java/org/gnucash/android/export/Exporter.java
@@ -254,7 +254,7 @@ public String getExportMimeType(){
         return "text/plain";
     }
 
-    public static class ExporterException extends RuntimeException{
+    public static class ExporterException extends Exception {
 
         public ExporterException(ExportParams params){
             super("Failed to generate export with parameters:  " + params.toString());
diff --git a/app/src/test/java/org/gnucash/android/test/unit/export/BackupTest.java b/app/src/test/java/org/gnucash/android/test/unit/export/BackupTest.java
index 712d515c..7c837a40 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/export/BackupTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/export/BackupTest.java
@@ -62,7 +62,7 @@ public void shouldCreateBackup(){
     }
 
     @Test
-    public void shouldCreateBackupFileName(){
+    public void shouldCreateBackupFileName() throws Exporter.ExporterException {
         Exporter exporter = new GncXmlExporter(new ExportParams(ExportFormat.XML));
         List<String> xmlFiles = exporter.generateExport();
 

From 9d04947479f7f9c74a6079a80ad9600003d1fddb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 19:27:22 +0100
Subject: [PATCH 04/10] Continue uploading the files to OwnCloud if the folder
 creation fails

OwnCloud seems to report an error, if we try to create a folder that
already exists. We don't care, so we just go ahead uploading the files
instead of throwing an exception.
---
 app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index fc809afb..17b3498c 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -387,8 +387,10 @@ private void moveExportToOwnCloud() throws Exporter.ExporterException {
         if (mOC_dir.length() != 0) {
             RemoteOperationResult dirResult = new CreateRemoteFolderOperation(
                     mOC_dir, true).execute(mClient);
-            if (!dirResult.isSuccess())
-                throw new Exporter.ExporterException(mExportParams, dirResult.getLogMessage());
+            if (!dirResult.isSuccess()) {
+                Log.w(TAG, "Error creating folder (it may happen if it already exists): "
+                           + dirResult.getLogMessage());
+            }
         }
         for (String exportedFilePath : mExportedFiles) {
             String remotePath = mOC_dir + FileUtils.PATH_SEPARATOR + stripPathPart(exportedFilePath);

From ebf273885d8567c3fe4fc8375174c5b9e6efc920 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 09:19:47 +0100
Subject: [PATCH 05/10] Extract code to report success to the user into a new
 method

---
 .../gnucash/android/export/ExportAsyncTask.java    | 64 ++++++++++++----------
 1 file changed, 34 insertions(+), 30 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 17b3498c..5f0cd919 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -187,36 +187,7 @@ protected void onPostExecute(Boolean exportResult) {
                         Toast.LENGTH_LONG).show();
                 return;
             } else {
-                String targetLocation;
-                switch (mExportParams.getExportTarget()){
-                    case SD_CARD:
-                        targetLocation = "SD card";
-                        break;
-                    case DROPBOX:
-                        targetLocation = "DropBox -> Apps -> GnuCash";
-                        break;
-                    case GOOGLE_DRIVE:
-                        targetLocation = "Google Drive -> " + mContext.getString(R.string.app_name);
-                        break;
-                    case OWNCLOUD:
-                        targetLocation = mContext.getSharedPreferences(
-                                mContext.getString(R.string.owncloud_pref),
-                                Context.MODE_PRIVATE).getBoolean(
-                                mContext.getString(R.string.owncloud_sync), false) ?
-
-                                "ownCloud -> " +
-                                mContext.getSharedPreferences(
-                                        mContext.getString(R.string.owncloud_pref),
-                                        Context.MODE_PRIVATE).getString(
-                                        mContext.getString(R.string.key_owncloud_dir), null) :
-                                "ownCloud sync not enabled";
-                        break;
-                    default:
-                        targetLocation = mContext.getString(R.string.label_export_target_external_service);
-                }
-                Toast.makeText(mContext,
-                        String.format(mContext.getString(R.string.toast_exported_to), targetLocation),
-                        Toast.LENGTH_LONG).show();
+                reportSuccess();
             }
         }
 
@@ -532,4 +503,37 @@ public void moveFile(String src, String dst) throws IOException {
         }
         srcFile.delete();
     }
+
+    private void reportSuccess() {
+        String targetLocation;
+        switch (mExportParams.getExportTarget()){
+            case SD_CARD:
+                targetLocation = "SD card";
+                break;
+            case DROPBOX:
+                targetLocation = "DropBox -> Apps -> GnuCash";
+                break;
+            case GOOGLE_DRIVE:
+                targetLocation = "Google Drive -> " + mContext.getString(R.string.app_name);
+                break;
+            case OWNCLOUD:
+                targetLocation = mContext.getSharedPreferences(
+                        mContext.getString(R.string.owncloud_pref),
+                        Context.MODE_PRIVATE).getBoolean(
+                        mContext.getString(R.string.owncloud_sync), false) ?
+
+                        "ownCloud -> " +
+                                mContext.getSharedPreferences(
+                                        mContext.getString(R.string.owncloud_pref),
+                                        Context.MODE_PRIVATE).getString(
+                                        mContext.getString(R.string.key_owncloud_dir), null) :
+                        "ownCloud sync not enabled";
+                break;
+            default:
+                targetLocation = mContext.getString(R.string.label_export_target_external_service);
+        }
+        Toast.makeText(mContext,
+                String.format(mContext.getString(R.string.toast_exported_to), targetLocation),
+                Toast.LENGTH_LONG).show();
+    }
 }

From 66a48e6ad0492c415af36ea0943888ccee361602 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 10:02:47 +0100
Subject: [PATCH 06/10] Ensure the progress dialog is dismissed when the export
 fails

After the last commits, the dialog remained visible.
---
 .../gnucash/android/export/ExportAsyncTask.java    | 35 +++++++++++-----------
 1 file changed, 18 insertions(+), 17 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 5f0cd919..e0a8ee72 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -180,29 +180,30 @@ public void run() {
      */
     @Override
     protected void onPostExecute(Boolean exportResult) {
-        if (mContext instanceof Activity) {
-            if (!exportResult) {
+        if (!exportResult) {
+            if (mContext instanceof Activity) {
                 Toast.makeText(mContext,
                         mContext.getString(R.string.toast_export_error, mExportParams.getExportFormat().name()),
                         Toast.LENGTH_LONG).show();
-                return;
-            } else {
-                reportSuccess();
             }
-        }
+        } else {
+            if (mContext instanceof Activity)
+                reportSuccess();
 
-        if (mExportParams.shouldDeleteTransactionsAfterExport()) {
-            Log.i(TAG, "Backup and deleting transactions after export");
-            backupAndDeleteTransactions();
+            if (mExportParams.shouldDeleteTransactionsAfterExport()) {
+                Log.i(TAG, "Backup and deleting transactions after export");
+                backupAndDeleteTransactions();
 
-            //now refresh the respective views
-            if (mContext instanceof AccountsActivity){
-                AccountsListFragment fragment = ((AccountsActivity) mContext).getCurrentAccountListFragment();
-                if (fragment != null)
-                    fragment.refresh();
-            }
-            if (mContext instanceof TransactionsActivity){
-                ((TransactionsActivity) mContext).refresh();
+                //now refresh the respective views
+                if (mContext instanceof AccountsActivity){
+                    AccountsListFragment fragment =
+                            ((AccountsActivity) mContext).getCurrentAccountListFragment();
+                    if (fragment != null)
+                        fragment.refresh();
+                }
+                if (mContext instanceof TransactionsActivity){
+                    ((TransactionsActivity) mContext).refresh();
+                }
             }
         }
 

From 0a1dbceb1e0839f12aeb680726e053e78a4e344c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 10:05:36 +0100
Subject: [PATCH 07/10] Extract code to refresh views into a new method

---
 .../gnucash/android/export/ExportAsyncTask.java    | 24 ++++++++++++----------
 1 file changed, 13 insertions(+), 11 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index e0a8ee72..b241a80f 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -193,17 +193,7 @@ protected void onPostExecute(Boolean exportResult) {
             if (mExportParams.shouldDeleteTransactionsAfterExport()) {
                 Log.i(TAG, "Backup and deleting transactions after export");
                 backupAndDeleteTransactions();
-
-                //now refresh the respective views
-                if (mContext instanceof AccountsActivity){
-                    AccountsListFragment fragment =
-                            ((AccountsActivity) mContext).getCurrentAccountListFragment();
-                    if (fragment != null)
-                        fragment.refresh();
-                }
-                if (mContext instanceof TransactionsActivity){
-                    ((TransactionsActivity) mContext).refresh();
-                }
+                refreshViews();
             }
         }
 
@@ -537,4 +527,16 @@ private void reportSuccess() {
                 String.format(mContext.getString(R.string.toast_exported_to), targetLocation),
                 Toast.LENGTH_LONG).show();
     }
+
+    private void refreshViews() {
+        if (mContext instanceof AccountsActivity){
+            AccountsListFragment fragment =
+                    ((AccountsActivity) mContext).getCurrentAccountListFragment();
+            if (fragment != null)
+                fragment.refresh();
+        }
+        if (mContext instanceof TransactionsActivity){
+            ((TransactionsActivity) mContext).refresh();
+        }
+    }
 }

From da1e53a0dc1d6e7c25c910c62616f711974de91f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 10:07:41 +0100
Subject: [PATCH 08/10] Invert conditional to avoid negation

---
 .../java/org/gnucash/android/export/ExportAsyncTask.java   | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index b241a80f..ad9bc911 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -180,13 +180,7 @@ public void run() {
      */
     @Override
     protected void onPostExecute(Boolean exportResult) {
-        if (!exportResult) {
-            if (mContext instanceof Activity) {
-                Toast.makeText(mContext,
-                        mContext.getString(R.string.toast_export_error, mExportParams.getExportFormat().name()),
-                        Toast.LENGTH_LONG).show();
-            }
-        } else {
+        if (exportResult) {
             if (mContext instanceof Activity)
                 reportSuccess();
 
@@ -195,6 +189,12 @@ protected void onPostExecute(Boolean exportResult) {
                 backupAndDeleteTransactions();
                 refreshViews();
             }
+        } else {
+            if (mContext instanceof Activity) {
+                Toast.makeText(mContext,
+                        mContext.getString(R.string.toast_export_error, mExportParams.getExportFormat().name()),
+                        Toast.LENGTH_LONG).show();
+            }
         }
 
         if (mContext instanceof Activity) {

From 6271e80004bbddcb0cc2c2fbc3f2d8278e055236 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 10:09:06 +0100
Subject: [PATCH 09/10] Rename parameter to make more clear its meaning

---
 app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index ad9bc911..921b0b3b 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -176,11 +176,11 @@ public void run() {
     /**
      * Transmits the exported transactions to the designated location, either SD card or third-party application
      * Finishes the activity if the export was starting  in the context of an activity
-     * @param exportResult Result of background export execution
+     * @param exportSuccessful Result of background export execution
      */
     @Override
-    protected void onPostExecute(Boolean exportResult) {
-        if (exportResult) {
+    protected void onPostExecute(Boolean exportSuccessful) {
+        if (exportSuccessful) {
             if (mContext instanceof Activity)
                 reportSuccess();
 

From cdba3cbdcf3ca2c223111f173b352b2b382948fd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <alexandre.magaz@gmail.com>
Date: Fri, 30 Dec 2016 10:10:32 +0100
Subject: [PATCH 10/10] Move log call to the method it refers

---
 app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 921b0b3b..f1c0ffb3 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -185,7 +185,6 @@ protected void onPostExecute(Boolean exportSuccessful) {
                 reportSuccess();
 
             if (mExportParams.shouldDeleteTransactionsAfterExport()) {
-                Log.i(TAG, "Backup and deleting transactions after export");
                 backupAndDeleteTransactions();
                 refreshViews();
             }
@@ -401,6 +400,7 @@ private String stripPathPart(String fullPathName) {
      * and deletes all non-template transactions in the database.
      */
     private void backupAndDeleteTransactions(){
+        Log.i(TAG, "Backup and deleting transactions after export");
         GncXmlExporter.createBackup(); //create backup before deleting everything
         List<Transaction> openingBalances = new ArrayList<>();
         boolean preserveOpeningBalances = GnuCashApplication.shouldSaveOpeningBalances(false);
