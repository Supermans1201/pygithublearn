From ad1fe31c181590d0616eb6b1d809bffafa4396fe Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 6 Jun 2016 10:35:18 +0200
Subject: [PATCH] Fix errors during database migration

Properly migrate double-entry flags to book-specific format
fixes #508
---
 .../java/org/gnucash/android/db/BookDbHelper.java  |  35 +++++++-
 .../org/gnucash/android/db/MigrationHelper.java    |  76 ++--------------
 .../gnucash/android/db/adapter/BooksDbAdapter.java |   8 +-
 .../gnucash/android/util/RecursiveMoveFiles.java   | 100 +++++++++++++++++++++
 4 files changed, 143 insertions(+), 76 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/util/RecursiveMoveFiles.java

diff --git a/app/src/main/java/org/gnucash/android/db/BookDbHelper.java b/app/src/main/java/org/gnucash/android/db/BookDbHelper.java
index 12c417a8..9d12f376 100644
--- a/app/src/main/java/org/gnucash/android/db/BookDbHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/BookDbHelper.java
@@ -31,7 +31,9 @@
 import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
+import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.Book;
+import org.gnucash.android.util.RecursiveMoveFiles;
 
 import java.io.File;
 import java.io.IOException;
@@ -82,7 +84,7 @@ public void onOpen(SQLiteDatabase db) {
         String sql = "SELECT COUNT(*) FROM " + BookEntry.TABLE_NAME;
         SQLiteStatement statement = db.compileStatement(sql);
         long count = statement.simpleQueryForLong();
-        if (count == 0) { //there is currently no book in the database
+        if (count == 0) { //there is currently no book in the database, should only be true once, during migration
             DatabaseHelper helper = new DatabaseHelper(GnuCashApplication.getAppContext(),
                     DatabaseSchema.LEGACY_DATABASE_NAME);
             SQLiteDatabase mainDb = helper.getWritableDatabase();
@@ -113,6 +115,37 @@ public void onOpen(SQLiteDatabase db) {
                 Crashlytics.log(err_msg);
                 Log.e(LOG_TAG, err_msg, e);
             }
+
+            migrateBackupFiles(book.getUID());
+        }
+    }
+
+    /**
+     * Move the backup and export files from the old location (single-book) to the new multi-book
+     * backup folder structure. Each book has its own directory as well as backups and exports.
+     * <p>This method should be called only once during the initial migration to multi-book support</p>
+     * @param activeBookUID GUID of the book for which to migrate the files
+     */
+    private void migrateBackupFiles(String activeBookUID){
+
+        Log.d(LOG_TAG, "Moving export and backup files to book-specific folders");
+        File newBasePath = new File(Exporter.BASE_FOLDER_PATH + "/" + activeBookUID);
+        newBasePath.mkdirs();
+
+        File src = new File(Exporter.BASE_FOLDER_PATH + "/backups/");
+        File dst = new File(Exporter.BASE_FOLDER_PATH + "/" + activeBookUID + "/backups/");
+        new Thread(new RecursiveMoveFiles(src, dst)).start();
+
+        src = new File(Exporter.BASE_FOLDER_PATH + "/exports/");
+        dst = new File(Exporter.BASE_FOLDER_PATH + "/" + activeBookUID + "/exports/");
+        new Thread(new RecursiveMoveFiles(src, dst)).start();
+
+        File nameFile = new File(newBasePath, "Book 1");
+        try {
+            nameFile.createNewFile();
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Error creating name file for the database: " + nameFile.getName());
+            e.printStackTrace();
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 35c774d2..f32c5145 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -34,7 +34,6 @@
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
-import org.gnucash.android.db.adapter.BooksDbAdapter;
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.export.Exporter;
@@ -47,7 +46,6 @@
 import org.gnucash.android.model.Recurrence;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Transaction;
-import org.gnucash.android.ui.settings.PreferenceActivity;
 import org.gnucash.android.util.PreferencesHelper;
 import org.gnucash.android.util.TimestampHelper;
 import org.xml.sax.InputSource;
@@ -228,49 +226,6 @@ public void run() {
     };
 
     /**
-     * Moves all files from one directory  into another.
-     * The destination directory is assumed to already exist
-     */
-    static class RecursiveMoveFiles implements Runnable {
-        File mSource;
-        File mDestination;
-
-        /**
-         * Constructor, specify origin and target directories
-         * @param src Source directory/file. If directory, all files within it will be moved
-         * @param dst Destination directory/file. If directory, it should already exist
-         */
-        RecursiveMoveFiles(File src, File dst){
-            mSource = src;
-            mDestination = dst;
-        }
-
-        private boolean copy(File src, File dst){
-            boolean results = true;
-            if (src.isDirectory()){
-                dst.mkdirs(); //we assume it works everytime. Great, right?
-                for (File file : src.listFiles()) {
-                    File target = new File(dst, file.getName());
-                    results &= copy(file, target);
-                }
-            } else {
-                try {
-                    moveFile(src, dst);
-                } catch (IOException e) {
-                    results = false;
-                    Log.d(LOG_TAG, "Error moving file: " + src.getAbsolutePath());
-                }
-            }
-            return results;
-        }
-
-        @Override
-        public void run() {
-            copy(mSource, mDestination);
-        }
-    }
-
-    /**
      * Imports commodities into the database from XML resource file
      */
     static void importCommodities(SQLiteDatabase db) throws SAXException, ParserConfigurationException, IOException {
@@ -1495,9 +1450,12 @@ static int upgradeDbToVersion13(SQLiteDatabase db){
         String lastExportTime = sharedPrefs.getString(keyLastExportTime, TimestampHelper.getTimestampFromEpochZero().toString());
         boolean useDoubleEntry = sharedPrefs.getBoolean(keyUseDoubleEntry, true);
         boolean saveOpeningBalance = sharedPrefs.getBoolean(keySaveOpeningBalance, false);
-        boolean useCompactTrnView = !GnuCashApplication.isDoubleEntryEnabled();
+        boolean useCompactTrnView = PreferenceManager.getDefaultSharedPreferences(context)
+                .getBoolean(context.getString(R.string.key_use_double_entry), !useDoubleEntry);
+
+        String rootAccountUID = getGnuCashRootAccountUID(db);
+        SharedPreferences bookPrefs = context.getSharedPreferences(rootAccountUID, Context.MODE_PRIVATE);
 
-        SharedPreferences bookPrefs = PreferenceActivity.getActiveBookSharedPreferences(context);
         bookPrefs.edit()
                 .putString(keyLastExportTime, lastExportTime)
                 .putBoolean(keyUseDoubleEntry, useDoubleEntry)
@@ -1505,30 +1463,6 @@ static int upgradeDbToVersion13(SQLiteDatabase db){
                 .putBoolean(keyUseCompactView, useCompactTrnView)
                 .apply();
 
-        String activeBookUID = BooksDbAdapter.getInstance().getActiveBookUID();
-
-
-        Log.d(LOG_TAG, "Moving export and backup files to book-specific folders");
-        File newBasePath = new File(Exporter.BASE_FOLDER_PATH + "/" + activeBookUID);
-        newBasePath.mkdirs();
-
-        File src = new File(Exporter.BASE_FOLDER_PATH + "/backups/");
-        File dst = new File(Exporter.BASE_FOLDER_PATH + "/" + activeBookUID + "/backups/");
-        new Thread(new RecursiveMoveFiles(src, dst)).start();
-
-        src = new File(Exporter.BASE_FOLDER_PATH + "/exports/");
-        dst = new File(Exporter.BASE_FOLDER_PATH + "/" + activeBookUID + "/exports/");
-        new Thread(new RecursiveMoveFiles(src, dst)).start();
-
-        String activeBookName = BooksDbAdapter.getInstance().getActiveBookDisplayName();
-        File nameFile = new File(newBasePath, activeBookName.replaceAll("[^a-zA-Z0-9.-]", "_"));
-        try {
-            nameFile.createNewFile();
-        } catch (IOException e) {
-            Log.e(LOG_TAG, "Error creating name file for the database: " + nameFile.getName());
-            e.printStackTrace();
-        }
-
         return oldVersion;
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java
index 7993a919..4306dc17 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/BooksDbAdapter.java
@@ -141,13 +141,13 @@ public boolean isActive(String bookUID){
         Cursor cursor = mDb.query(mTableName, new String[]{BookEntry.COLUMN_UID},
                 BookEntry.COLUMN_ACTIVE + "= 1", null, null, null, null, "1");
         try{
-            if (cursor.moveToFirst()){
-                return cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_UID));
-            }
+            if (cursor.getCount() == 0)
+                throw new RuntimeException("There is no active book in the app. This should NEVER happen!");
+            cursor.moveToFirst();
+            return cursor.getString(cursor.getColumnIndexOrThrow(BookEntry.COLUMN_UID));
         } finally {
             cursor.close();
         }
-        return null;
     }
 
 
diff --git a/app/src/main/java/org/gnucash/android/util/RecursiveMoveFiles.java b/app/src/main/java/org/gnucash/android/util/RecursiveMoveFiles.java
new file mode 100644
index 00000000..04ece4f8
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/util/RecursiveMoveFiles.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2016 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gnucash.android.util;
+
+import android.util.Log;
+
+import org.gnucash.android.db.MigrationHelper;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.channels.FileChannel;
+
+/**
+ * Moves all files from one directory  into another.
+ * The destination directory is assumed to already exist
+ */
+public class RecursiveMoveFiles implements Runnable {
+    File mSource;
+    File mDestination;
+
+    /**
+     * Constructor, specify origin and target directories
+     * @param src Source directory/file. If directory, all files within it will be moved
+     * @param dst Destination directory/file. If directory, it should already exist
+     */
+    public RecursiveMoveFiles(File src, File dst){
+        mSource = src;
+        mDestination = dst;
+    }
+
+    /**
+     * Copy file from one location to another.
+     * Does not support copying of directories
+     * @param src Source file
+     * @param dst Destination of the file
+     * @return {@code true} if the file was successfully copied, {@code false} otherwise
+     * @throws IOException
+     */
+    private boolean copy(File src, File dst) throws IOException {
+        FileChannel inChannel = new FileInputStream(src).getChannel();
+        FileChannel outChannel = new FileOutputStream(dst).getChannel();
+        try {
+            long bytesCopied = inChannel.transferTo(0, inChannel.size(), outChannel);
+            return bytesCopied >= src.length();
+        } finally {
+            if (inChannel != null)
+                inChannel.close();
+            outChannel.close();
+        }
+    }
+
+    /**
+     * Recursively copy files from one location to another and deletes the origin files after copy.
+     * If the source file is a directory, all of the files in it will be moved.
+     * This method will create the destination directory if the {@code src} is also a directory
+     * @param src origin file
+     * @param dst destination file or directory
+     * @return number of files copied (excluding parent directory)
+     */
+    private int recursiveMove(File src, File dst){
+        int copyCount = 0;
+        if (src.isDirectory()){
+            dst.mkdirs(); //we assume it works everytime. Great, right?
+            for (File file : src.listFiles()) {
+                File target = new File(dst, file.getName());
+                 copyCount += recursiveMove(file, target);
+            }
+            src.delete();
+        } else {
+            try {
+                if(copy(src, dst))
+                    src.delete();
+            } catch (IOException e) {
+                Log.d(MigrationHelper.LOG_TAG, "Error moving file: " + src.getAbsolutePath());
+            }
+        }
+        Log.d("RecursiveMoveFiles", String.format("Moved %d files from %s to %s", copyCount, src.getPath(), dst.getPath()));
+        return copyCount;
+    }
+
+    @Override
+    public void run() {
+        recursiveMove(mSource, mDestination);
+    }
+}
