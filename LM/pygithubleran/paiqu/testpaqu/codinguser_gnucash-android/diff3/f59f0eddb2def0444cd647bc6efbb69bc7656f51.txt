From f59f0eddb2def0444cd647bc6efbb69bc7656f51 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 27 Sep 2014 21:40:34 +0800
Subject: [PATCH] Nullable/NonNull annotation on
 Account/Transaction/Split/Money

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  7 +-
 app/src/org/gnucash/android/model/Account.java     | 58 ++++++++-----
 app/src/org/gnucash/android/model/Money.java       | 94 +++++++++++++---------
 app/src/org/gnucash/android/model/Split.java       | 56 ++++++++-----
 app/src/org/gnucash/android/model/Transaction.java | 58 ++++++++-----
 5 files changed, 177 insertions(+), 96 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index 3024da5a..64418529 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -241,7 +241,7 @@ public boolean destructiveDeleteAccount(long rowId){
                 ContentValues contentValues = new ContentValues();
                 for (String acctUID : descendantAccountUIDs) {
                     Account acct = mapAccounts.get(acctUID);
-                    if (acct.getParentUID().equals(accountUID)) {
+                    if (accountUID.equals(acct.getParentUID())) {
                         // direct descendant
                         acct.setParentUID(parentAccountUID);
                         if (parentAccountFullName == null || parentAccountFullName.length() == 0) {
@@ -647,6 +647,9 @@ public String getOrCreateImbalanceAccountUID(@NonNull Currency currency){
      */
     @NonNull
     public String createAccountHierarchy(@NonNull String fullName, @NonNull AccountType accountType) {
+        if ("".equals(fullName)) {
+            throw new IllegalArgumentException("fullName cannot be empty");
+        }
         String[] tokens = fullName.trim().split(ACCOUNT_NAME_SEPARATOR);
         String uid = getGnuCashRootAccountUID();
         String parentName = "";
@@ -669,6 +672,8 @@ public String createAccountHierarchy(@NonNull String fullName, @NonNull AccountT
         if (accountsList.size() > 0) {
             bulkAddAccounts(accountsList);
         }
+        // if fullName is not empty, loop will be entered and then uid will never be null
+        //noinspection ConstantConditions
         return uid;
     }
 
diff --git a/app/src/org/gnucash/android/model/Account.java b/app/src/org/gnucash/android/model/Account.java
index 32244e8a..4bd57510 100644
--- a/app/src/org/gnucash/android/model/Account.java
+++ b/app/src/org/gnucash/android/model/Account.java
@@ -16,6 +16,9 @@
 
 package org.gnucash.android.model;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import org.gnucash.android.export.ofx.OfxHelper;
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
@@ -70,17 +73,20 @@
 	 * Unique Identifier of the account
 	 * It is generated when the account is created and can be set a posteriori as well
 	 */
+    @NonNull
 	private String mUID;
 	
 	/**
 	 * Name of this account
 	 */
+    @NonNull
 	private String mName;
 
     /**
      * Fully qualified name of this account including the parent hierarchy.
      * On instantiation of an account, the full name is set to the name by default
      */
+    @NonNull
     private String mFullName;
 
 	/**
@@ -92,22 +98,26 @@
 	 * Type of account
 	 * Defaults to {@link AccountType#CASH}
 	 */
+    @NonNull
 	private AccountType mAccountType = AccountType.CASH;
 	
 	/**
 	 * List of transactions in this account
 	 */
+    @NonNull
 	private List<Transaction> mTransactionsList = new ArrayList<Transaction>();
 
 	/**
 	 * Account UID of the parent account. Can be null
 	 */
+    @Nullable
 	private String mParentAccountUID;
 
     /**
      * Save UID of a default account for transfers.
      * All transactions in this account will by default be transfers to the other account
      */
+    @Nullable
     private String mDefaultTransferAccountUID;
 
     /**
@@ -119,6 +129,7 @@
     /**
      * Account color field in hex format #rrggbb
      */
+    @Nullable
     private String mColorCode;
 
     /**
@@ -142,7 +153,7 @@
 	 * Creates a new account with the default currency and a generated unique ID
 	 * @param name Name of the account
 	 */
-	public Account(String name) {
+	public Account(@NonNull String name) {
 		setName(name);
         this.mFullName  = mName;
 		this.mUID       = generateUID();
@@ -154,7 +165,7 @@ public Account(String name) {
 	 * @param name Name of the account
 	 * @param currency {@link Currency} to be used by transactions in this account
 	 */
-	public Account(String name, Currency currency){
+	public Account(@NonNull String name, @NonNull Currency currency){
 		setName(name);
         this.mFullName  = mName;
 		this.mUID       = generateUID();
@@ -165,7 +176,7 @@ public Account(String name, Currency currency){
 	 * Sets the name of the account
 	 * @param name String name of the account
 	 */
-	public void setName(String name) {
+	public void setName(@NonNull String name) {
 		this.mName = name.trim();
 	}
 
@@ -173,6 +184,7 @@ public void setName(String name) {
 	 * Returns the name of the account
 	 * @return String containing name of the account
 	 */
+    @NonNull
 	public String getName() {
 		return mName;
 	}
@@ -182,6 +194,7 @@ public String getName() {
      * The full name is the full account hierarchy name
      * @return Fully qualified name of the account
      */
+    @NonNull
     public String getFullName() {
         return mFullName;
     }
@@ -190,7 +203,7 @@ public String getFullName() {
      * Sets the fully qualified name of the account
      * @param fullName Fully qualified account name
      */
-    public void setFullName(String fullName) {
+    public void setFullName(@NonNull String fullName) {
         this.mFullName = fullName;
     }
 
@@ -199,10 +212,11 @@ public void setFullName(String fullName) {
 	 * This represents the ACCTID in the exported OFX and should have a maximum of 22 alphanumeric characters
 	 * @return Generated Unique ID string
 	 */
+    @NonNull
 	protected String generateUID(){
 		String uuid = UUID.randomUUID().toString();
 		
-		if (mName == null || mName.length() == 0){
+		if (mName.length() == 0){
 			//if we do not have a name, return pure random
 			return uuid.substring(0, 22);
 		}
@@ -219,6 +233,7 @@ protected String generateUID(){
 	 * Returns the unique ID of this account
 	 * @return String containing unique ID for the account
 	 */
+    @NonNull
 	public String getUID(){
 		return mUID;
 	}
@@ -227,7 +242,7 @@ public String getUID(){
 	 * Sets the unique identifier of this acocunt
 	 * @param uid Unique identifier to be set
 	 */
-	public void setUID(String uid){
+	public void setUID(@NonNull String uid){
 		this.mUID = uid;
 	}
 	
@@ -235,6 +250,7 @@ public void setUID(String uid){
 	 * Get the type of account
 	 * @return {@link AccountType} type of account
 	 */
+    @NonNull
 	public AccountType getAccountType() {
 		return mAccountType;
 	}
@@ -244,7 +260,7 @@ public AccountType getAccountType() {
 	 * @param mAccountType Type of account
 	 * @see AccountType
 	 */
-	public void setAccountType(AccountType mAccountType) {
+	public void setAccountType(@NonNull AccountType mAccountType) {
 		this.mAccountType = mAccountType;
 	}
 
@@ -252,7 +268,7 @@ public void setAccountType(AccountType mAccountType) {
 	 * Adds a transaction to this account
 	 * @param transaction {@link Transaction} to be added to the account
 	 */
-	public void addTransaction(Transaction transaction){
+	public void addTransaction(@NonNull Transaction transaction){
 		transaction.setCurrencyCode(mCurrency.getCurrencyCode());
 		mTransactionsList.add(transaction);
 	}
@@ -264,7 +280,7 @@ public void addTransaction(Transaction transaction){
 	 * and currency of the account respectively
 	 * @param transactionsList List of {@link Transaction}s to be set.
 	 */
-	public void setTransactions(List<Transaction> transactionsList){
+	public void setTransactions(@NonNull List<Transaction> transactionsList){
 		this.mTransactionsList = transactionsList;
 	}
 		
@@ -272,7 +288,7 @@ public void setTransactions(List<Transaction> transactionsList){
 	 * Removes <code>transaction</code> from this account
 	 * @param transaction {@link Transaction} to be removed from account
 	 */
-	public void removeTransaction(Transaction transaction){
+	public void removeTransaction(@NonNull Transaction transaction){
 		mTransactionsList.remove(transaction);
 	}
 	
@@ -280,6 +296,7 @@ public void removeTransaction(Transaction transaction){
 	 * Returns a list of transactions for this account
 	 * @return Array list of transactions for the account
 	 */
+    @NonNull
 	public List<Transaction> getTransactions(){
 		return mTransactionsList;
 	}
@@ -310,6 +327,7 @@ public boolean hasUnexportedTransactions(){
 	 * It takes into account debit and credit amounts, it does not however consider sub-accounts
 	 * @return {@link Money} aggregate amount of all transactions in account.
 	 */
+    @NonNull
 	public Money getBalance(){
 		Money balance = Money.createZeroInstance(mCurrency.getCurrencyCode());
         for (Transaction transaction : mTransactionsList) {
@@ -322,6 +340,7 @@ public Money getBalance(){
      * Returns the color code of the account in the format #rrggbb
      * @return Color code of the account
      */
+    @Nullable
     public String getColorHexCode() {
         return mColorCode;
     }
@@ -331,7 +350,7 @@ public String getColorHexCode() {
      * @param colorCode Color code to be set in the format #rrggbb or #rgb
      * @throws java.lang.IllegalArgumentException if the color code is not properly formatted
      */
-    public void setColorCode(String colorCode) {
+    public void setColorCode(@Nullable String colorCode) {
         if (colorCode == null)
             return;
 
@@ -360,6 +379,7 @@ public void setFavorite(boolean isFavorite) {
     /**
 	 * @return the mCurrency
 	 */
+    @NonNull
 	public Currency getCurrency() {
 		return mCurrency;
 	}
@@ -368,7 +388,7 @@ public Currency getCurrency() {
 	 * Sets the currency to be used by this account
 	 * @param mCurrency the mCurrency to set
 	 */
-	public void setCurrency(Currency mCurrency) {		
+	public void setCurrency(@NonNull Currency mCurrency) {
 		this.mCurrency = mCurrency;
 		//TODO: Maybe at some time t, this method should convert all 
 		//transaction values to the corresponding value in the new currency
@@ -378,7 +398,7 @@ public void setCurrency(Currency mCurrency) {
 	 * Sets the Unique Account Identifier of the parent account
 	 * @param parentUID String Unique ID of parent account
 	 */
-	public void setParentUID(String parentUID){
+	public void setParentUID(@Nullable String parentUID){
 		mParentAccountUID = parentUID;
 	}
 	
@@ -386,9 +406,9 @@ public void setParentUID(String parentUID){
 	 * Returns the Unique Account Identifier of the parent account
 	 * @return String Unique ID of parent account
 	 */
+    @Nullable
 	public String getParentUID() {
 		return mParentAccountUID;
-		
 	}
 
     /**
@@ -412,6 +432,7 @@ public void setPlaceHolderFlag(boolean isPlaceholder){
      * Return the unique ID of accounts to which to default transfer transactions to
      * @return Unique ID string of default transfer account
      */
+    @Nullable
     public String getDefaultTransferAccountUID() {
         return mDefaultTransferAccountUID;
     }
@@ -420,7 +441,7 @@ public String getDefaultTransferAccountUID() {
      * Set the unique ID of account which is the default transfer target
      * @param defaultTransferAccountUID Unique ID string of default transfer account
      */
-    public void setDefaultTransferAccountUID(String defaultTransferAccountUID) {
+    public void setDefaultTransferAccountUID(@Nullable String defaultTransferAccountUID) {
         this.mDefaultTransferAccountUID = defaultTransferAccountUID;
     }
 
@@ -433,7 +454,8 @@ public void setDefaultTransferAccountUID(String defaultTransferAccountUID) {
 	 * @see AccountType
 	 * @see OfxAccountType
 	 */
-	public static OfxAccountType convertToOfxAccountType(AccountType accountType){
+	@NonNull
+    public static OfxAccountType convertToOfxAccountType(@NonNull AccountType accountType){
 		switch (accountType) {
 		case CREDIT:
 		case LIABILITY:
@@ -466,7 +488,7 @@ public static OfxAccountType convertToOfxAccountType(AccountType accountType){
 	 * @param doc XML DOM document for the OFX data
 	 * @param parent Parent node to which to add this account's transactions in XML
 	 */
-	public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
+	public void toOfx(@NonNull Document doc, @NonNull Element parent, boolean exportAllTransactions){
 		Element currency = doc.createElement(OfxHelper.TAG_CURRENCY_DEF);
 		currency.appendChild(doc.createTextNode(mCurrency.getCurrencyCode()));						
 		
@@ -545,7 +567,7 @@ public void toOfx(Document doc, Element parent, boolean exportAllTransactions){
      * @param rootNode {@link org.w3c.dom.Element} node to which to attach the XML
      * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
      */
-    public void toGncXml(Document doc, Element rootNode) {
+    public void toGncXml(@NonNull Document doc, @NonNull Element rootNode) {
         Element nameNode = doc.createElement(GncXmlHelper.TAG_NAME);
         nameNode.appendChild(doc.createTextNode(mName));
 
diff --git a/app/src/org/gnucash/android/model/Money.java b/app/src/org/gnucash/android/model/Money.java
index bbf760c8..acc2068e 100644
--- a/app/src/org/gnucash/android/model/Money.java
+++ b/app/src/org/gnucash/android/model/Money.java
@@ -16,6 +16,9 @@
 
 package org.gnucash.android.model;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import java.math.BigDecimal;
 import java.math.MathContext;
 import java.math.RoundingMode;
@@ -43,11 +46,13 @@
 	/**
 	 * Currency of the account
 	 */
+    @NonNull
 	private Currency mCurrency;
 	
 	/**
 	 * Amount value held by this object
 	 */
+    @NonNull
 	private BigDecimal mAmount;
 	
 	/**
@@ -66,6 +71,7 @@
 	 * Rounding mode to be applied when performing operations
 	 * Defaults to {@link #DEFAULT_ROUNDING_MODE}
 	 */
+    @NonNull
 	protected RoundingMode ROUNDING_MODE = DEFAULT_ROUNDING_MODE;
 	
 	/**
@@ -91,6 +97,7 @@
      * Returns a Money instance initialized to the local currency and value 0
      * @return Money instance of value 0 in locale currency
      */
+    @NonNull
     public static Money getZeroInstance(){
         return sDefaultZero;
     }
@@ -108,7 +115,7 @@ public Money() {
 	 * @param amount {@link BigDecimal} value of the money instance
 	 * @param currency {@link Currency} associated with the <code>amount</code>
 	 */
-	public Money(BigDecimal amount, Currency currency){		
+	public Money(@NonNull BigDecimal amount, @NonNull Currency currency){
 		this.mAmount = amount;
 		this.mCurrency = currency;
 	}
@@ -119,7 +126,7 @@ public Money(BigDecimal amount, Currency currency){
 	 * @param amount Numrical value of the Money
 	 * @param currencyCode Currency code as specified by ISO 4217
 	 */
-	public Money(String amount, String currencyCode){
+	public Money(@NonNull String amount, @NonNull String currencyCode){
 		setAmount(amount);
 		setCurrency(Currency.getInstance(currencyCode));
 	}
@@ -131,7 +138,7 @@ public Money(String amount, String currencyCode){
 	 * @param currency {@link Currency} associated with the <code>amount</code>
 	 * @param context {@link MathContext} specifying rounding mode during operations
 	 */
-	public Money(BigDecimal amount, Currency currency, MathContext context){
+	public Money(@NonNull BigDecimal amount, @NonNull Currency currency, @NonNull MathContext context){
 		setAmount(amount);
 		setCurrency(currency);
 		ROUNDING_MODE = context.getRoundingMode();
@@ -143,7 +150,7 @@ public Money(BigDecimal amount, Currency currency, MathContext context){
 	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
 	 * @param amount Value associated with this Money object
 	 */
-	public Money(String amount){
+	public Money(@NonNull String amount){
 		init();
 		setAmount(parseToDecimal(amount));
 	}
@@ -153,7 +160,7 @@ public Money(String amount){
 	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
 	 * @param amount Value associated with this Money object
 	 */
-	public Money(BigDecimal amount){
+	public Money(@NonNull BigDecimal amount){
 		init();
 		setAmount(amount);
 	}
@@ -163,7 +170,7 @@ public Money(BigDecimal amount){
      * Creates a new Money object which is a clone of <code>money</code>
      * @param money Money instance to be cloned
      */
-    public Money(Money money){
+    public Money(@NonNull Money money){
         setAmount(money.asBigDecimal());
         setCurrency(money.getCurrency());
     }
@@ -173,7 +180,8 @@ public Money(Money money){
      * @param currencyCode Currency to use for this money instance
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
-    public static Money createZeroInstance(String currencyCode){
+    @NonNull
+    public static Money createZeroInstance(@NonNull String currencyCode){
         return new Money("0", currencyCode);
     }
 
@@ -181,7 +189,7 @@ public static Money createZeroInstance(String currencyCode){
 	 * Initializes the amount and currency to their default values
 	 * @see {@link Money#DEFAULT_CURRENCY_CODE}, {@link #DEFAULT_ROUNDING_MODE}, {@link #DEFAULT_DECIMAL_PLACES}
 	 */
-	private void init(){
+	private void init() {
 		mCurrency = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
 		mAmount = new BigDecimal(0).setScale(DEFAULT_DECIMAL_PLACES, DEFAULT_ROUNDING_MODE);
 	}
@@ -190,6 +198,7 @@ private void init(){
 	 * Returns the currency of the money object
 	 * @return {@link Currency} of the money value
 	 */
+    @NonNull
 	public Currency getCurrency() {
 		return mCurrency;
 	}
@@ -200,7 +209,8 @@ public Currency getCurrency() {
 	 * @param currency {@link Currency} to assign to new <code>Money</code> object
 	 * @return {@link Money} object with same value as current object, but with new <code>currency</code>
 	 */
-	public Money withCurrency(Currency currency){
+	@NonNull
+    public Money withCurrency(@NonNull Currency currency){
 		return new Money(mAmount, currency);
 	}
 	
@@ -211,7 +221,7 @@ public Money withCurrency(Currency currency){
 	 * Money objects are immutable and hence this method should not be called out of a constructor
 	 * @param currency {@link Currency} to assign to the Money object  
 	 */
-	private void setCurrency(Currency currency) {
+	private void setCurrency(@NonNull Currency currency) {
 		//TODO: Consider doing a conversion of the value as well in the future
 		this.mCurrency = currency;
 	}
@@ -220,6 +230,7 @@ private void setCurrency(Currency currency) {
 	 * Returns the amount represented by this Money object
 	 * @return {@link BigDecimal} valure of amount in object
 	 */
+    @NonNull
 	public BigDecimal asBigDecimal() {
 		return mAmount;
 	}
@@ -247,7 +258,8 @@ public String asString(){
 	 * @param locale Locale to use when formatting the object
 	 * @return String containing formatted Money representation
 	 */
-	public String formattedString(Locale locale){
+	@NonNull
+    public String formattedString(@NonNull Locale locale){
 		NumberFormat formatter = NumberFormat.getInstance(locale);
 		formatter.setMinimumFractionDigits(DECIMAL_PLACES);
 		formatter.setMaximumFractionDigits(DECIMAL_PLACES);
@@ -258,6 +270,7 @@ public String formattedString(Locale locale){
      * Equivalent to calling formattedString(Locale.getDefault())
      * @return String formatted Money representation in default locale
      */
+    @NonNull
     public String formattedString(){
         return formattedString(Locale.getDefault());
     }
@@ -267,7 +280,8 @@ public String formattedString(){
 	 * The original <code>Money</code> object remains unchanged.
 	 * @return Negated <code>Money</code> object
 	 */
-	public Money negate(){
+	@NonNull
+    public Money negate(){
 		return new Money(mAmount.negate(), mCurrency);
 	}
 	
@@ -275,7 +289,7 @@ public Money negate(){
 	 * Sets the amount value of this <code>Money</code> object
 	 * @param amount {@link BigDecimal} amount to be set
 	 */
-	private void setAmount(BigDecimal amount) {	
+	private void setAmount(@NonNull BigDecimal amount) {
 		mAmount = amount.setScale(DECIMAL_PLACES, ROUNDING_MODE);
 	}
 	
@@ -284,7 +298,7 @@ private void setAmount(BigDecimal amount) {
 	 * The <code>amount</code> is parsed by the {@link BigDecimal} constructor
 	 * @param amount {@link String} amount to be set
 	 */
-	private void setAmount(String amount){
+	private void setAmount(@NonNull String amount){
 		setAmount(parseToDecimal(amount));
 	}	
 	
@@ -296,7 +310,8 @@ private void setAmount(String amount){
 	 * @return Money object whose value is the sum of this object and <code>money</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	public Money add(Money addend){
+	@NonNull
+    public Money add(@NonNull Money addend){
 		if (!mCurrency.equals(addend.mCurrency))
 			throw new IllegalArgumentException("Only Money with same currency can be added");
 		
@@ -312,7 +327,8 @@ public Money add(Money addend){
 	 * @return Money object whose value is the difference of this object and <code>subtrahend</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	public Money subtract(Money subtrahend){
+	@NonNull
+    public Money subtract(@NonNull Money subtrahend){
 		if (!mCurrency.equals(subtrahend.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
@@ -328,7 +344,8 @@ public Money subtract(Money subtrahend){
 	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	public Money divide(Money divisor){
+	@NonNull
+    public Money divide(@NonNull Money divisor){
 		if (!mCurrency.equals(divisor.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
@@ -342,7 +359,8 @@ public Money divide(Money divisor){
 	 * @param divisor Second operand in the addition.
 	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
 	 */
-	public Money divide(int divisor){
+	@NonNull
+    public Money divide(int divisor){
 		Money moneyDiv = new Money(new BigDecimal(divisor), mCurrency);
 		return divide(moneyDiv);
 	}
@@ -355,7 +373,8 @@ public Money divide(int divisor){
 	 * @return Money object whose value is the product of this object and <code>money</code>
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
-	public Money multiply(Money money){
+	@NonNull
+    public Money multiply(@NonNull Money money){
 		if (!mCurrency.equals(money.mCurrency))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
@@ -369,7 +388,8 @@ public Money multiply(Money money){
 	 * @param multiplier Factor to multiply the amount by.
 	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
 	 */
-	public Money multiply(int multiplier){
+	@NonNull
+    public Money multiply(int multiplier){
 		Money moneyFactor = new Money(new BigDecimal(multiplier), mCurrency);
 		return multiply(moneyFactor);
 	}
@@ -386,6 +406,7 @@ public boolean isNegative(){
 	 * Returns the string representation of the amount (without currency) of the Money object
 	 * @return String representation of the amount (without currency) of the Money object
 	 */
+    @NonNull
 	public String toPlainString(){
 		return mAmount.setScale(DECIMAL_PLACES, ROUNDING_MODE).toPlainString();
 	}
@@ -395,7 +416,8 @@ public String toPlainString(){
 	 * to the default locale
 	 * @return String representation of the amount formatted with default locale
 	 */
-	@Override
+	@NonNull
+    @Override
 	public String toString() {
 		return formattedString(Locale.getDefault());
 	}
@@ -404,9 +426,8 @@ public String toString() {
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
-		result = prime * result + ((mAmount == null) ? 0 : mAmount.hashCode());
-		result = prime * result
-				+ ((mCurrency == null) ? 0 : mCurrency.hashCode());
+		result = prime * result + (mAmount.hashCode());
+		result = prime * result + (mCurrency.hashCode());
 		return result;
 	}
 
@@ -416,7 +437,7 @@ public int hashCode() {
 	 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise
 	 */
 	@Override
-	public boolean equals(Object obj) {
+	public boolean equals(@Nullable Object obj) {
 		if (this == obj)
 			return true;
 		if (obj == null)
@@ -424,21 +445,15 @@ public boolean equals(Object obj) {
 		if (getClass() != obj.getClass())
 			return false;
 		Money other = (Money) obj;
-		if (mAmount == null) {
-			if (other.mAmount != null)
-				return false;
-		} else if (!mAmount.equals(other.mAmount))
+		if (!mAmount.equals(other.mAmount))
 			return false;
-		if (mCurrency == null) {
-			if (other.mCurrency != null)
-				return false;
-		} else if (!mCurrency.equals(other.mCurrency))
+		if (!mCurrency.equals(other.mCurrency))
 			return false;
 		return true;
 	}
 
 	@Override
-	public int compareTo(Money another) {
+	public int compareTo(@NonNull Money another) {
 		if (!mCurrency.equals(another.mCurrency))
 			throw new IllegalArgumentException("Cannot compare different currencies yet");
 		return mAmount.compareTo(another.mAmount);
@@ -449,27 +464,28 @@ public int compareTo(Money another) {
 	 * @param amountString Formatted String amount
 	 * @return String amount formatted in the default locale
 	 */
-	public static BigDecimal parseToDecimal(String amountString){	
+	@NonNull
+    public static BigDecimal parseToDecimal(@NonNull String amountString){
 		char separator = new DecimalFormatSymbols(Locale.US).getGroupingSeparator();
 		amountString = amountString.replace(Character.toString(separator), "");
 		NumberFormat formatter = NumberFormat.getInstance(Locale.US);		
 		if (formatter instanceof DecimalFormat) {
 		     ((DecimalFormat)formatter).setParseBigDecimal(true);		     
-		 }
-		BigDecimal result = null; //new BigDecimal(0);
+		}
+		BigDecimal result = new BigDecimal(0);
 		try {
 			result = (BigDecimal) formatter.parse(amountString);
-			
 		} catch (ParseException e) {
 			e.printStackTrace();		
 		}
-		return result;		
+        return result;
 	}
 
     /**
      * Returns a new instance of {@link Money} object with the absolute value of the current object
      * @return Money object with absolute value of this instance
      */
+    @NonNull
     public Money absolute() {
         return new Money(mAmount.abs(), mCurrency);
     }
diff --git a/app/src/org/gnucash/android/model/Split.java b/app/src/org/gnucash/android/model/Split.java
index 9c99fb8e..666deaa5 100644
--- a/app/src/org/gnucash/android/model/Split.java
+++ b/app/src/org/gnucash/android/model/Split.java
@@ -1,5 +1,8 @@
 package org.gnucash.android.model;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import org.gnucash.android.export.xml.GncXmlHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -20,31 +23,37 @@
     /**
      * Amount value of this split
      */
+    @NonNull
     private Money mAmount;
 
     /**
      * Unique ID of this split
      */
+    @NonNull
     private String mUID;
 
     /**
      * Transaction UID which this split belongs to
      */
-    private String mTransactionUID;
+    @NonNull
+    private String mTransactionUID = "";
 
     /**
      * Account UID which this split belongs to
      */
+    @NonNull
     private String mAccountUID;
 
     /**
      * The type of this transaction, credit or debit
      */
-    private TransactionType mSplitType;
+    @NonNull
+    private TransactionType mSplitType = TransactionType.CREDIT;
 
     /**
      * Memo associated with this split
      */
+    @Nullable
     private String mMemo;
 
     /**
@@ -52,7 +61,7 @@
      * @param amount Money amount of this split
      * @param accountUID String UID of transfer account
      */
-    public Split(Money amount, String accountUID){
+    public Split(@NonNull Money amount, @NonNull String accountUID){
         setAmount(amount);
         setAccountUID(accountUID);
         mUID = UUID.randomUUID().toString().replaceAll("-","");
@@ -63,7 +72,7 @@ public Split(Money amount, String accountUID){
      * @param sourceSplit Split to be cloned
      * @param generateUID Determines if the clone should have a new UID or should maintain the one from source
      */
-    public Split(Split sourceSplit, boolean generateUID){
+    public Split(@NonNull Split sourceSplit, boolean generateUID){
         this.mMemo          = sourceSplit.mMemo;
         this.mAccountUID    = sourceSplit.mAccountUID;
         this.mSplitType     = sourceSplit.mSplitType;
@@ -77,55 +86,62 @@ public Split(Split sourceSplit, boolean generateUID){
         }
     }
 
+    @NonNull
     public Money getAmount() {
         return mAmount;
     }
 
-    public void setAmount(Money amount) {
+    public void setAmount(@NonNull Money amount) {
         this.mAmount = amount;
     }
 
+    @NonNull
     public String getUID() {
         return mUID;
     }
 
-    public void setUID(String uid) {
+    public void setUID(@NonNull String uid) {
         this.mUID = uid;
     }
 
+    @NonNull
     public String getTransactionUID() {
         return mTransactionUID;
     }
 
-    public void setTransactionUID(String transactionUID) {
+    public void setTransactionUID(@NonNull String transactionUID) {
         this.mTransactionUID = transactionUID;
     }
 
+    @NonNull
     public String getAccountUID() {
         return mAccountUID;
     }
 
-    public void setAccountUID(String accountUID) {
+    public void setAccountUID(@NonNull String accountUID) {
         this.mAccountUID = accountUID;
     }
 
+    @NonNull
     public TransactionType getType() {
         return mSplitType;
     }
 
-    public void setType(TransactionType transactionType) {
+    public void setType(@NonNull TransactionType transactionType) {
         this.mSplitType = transactionType;
     }
 
+    @Nullable
     public String getMemo() {
         return mMemo;
     }
 
-    public void setMemo(String memo) {
+    public void setMemo(@Nullable String memo) {
         this.mMemo = memo;
     }
 
-    public Split createPair(String accountUID){
+    @NonNull
+    public Split createPair(@NonNull String accountUID){
         Split pair = new Split(mAmount.absolute(), accountUID);
         pair.setType(mSplitType.invert());
         pair.setMemo(mMemo);
@@ -133,7 +149,8 @@ public Split createPair(String accountUID){
         return pair;
     }
 
-    protected Split clone(){
+    @NonNull
+    protected Split clone() {
         Split split = new Split(mAmount, mAccountUID);
         split.mUID = mUID;
         split.setType(mSplitType);
@@ -145,14 +162,15 @@ protected Split clone(){
     /**
      * Checks is this <code>other</code> is a pair split of this.
      * <p>Two splits are considered a pair if they have the same amount and opposite split types</p>
-     * @param other
-     * @return
+     * @param other the other split of the pair to be tested
+     * @return whether the two splits are a pair
      */
-    public boolean isPairOf(Split other) {
+    public boolean isPairOf(@NonNull Split other) {
         return mAmount.absolute().equals(other.mAmount.absolute())
                 && mSplitType.invert().equals(other.mSplitType);
     }
 
+    @NonNull
     @Override
     public String toString() {
         return mSplitType.name() + " of " + mAmount.toString() + " in account: " + mAccountUID;
@@ -160,8 +178,9 @@ public String toString() {
 
     /**
      * Returns a string representation of the split which can be parsed again using {@link org.gnucash.android.model.Split#parseSplit(String)}
-     * @return
+     * @return the converted CSV string of this split
      */
+    @NonNull
     public String toCsv(){
         String splitString = mAmount.toString() + ";" + mAmount.getCurrency().getCurrencyCode() + ";"
                 + mAccountUID + ";" + mSplitType.name();
@@ -177,7 +196,7 @@ public String toCsv(){
      * @param rootNode Parent node to append the split XML to
      * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
      */
-    public void toGncXml(Document doc, Element rootNode) {
+    public void toGncXml(@NonNull Document doc, @NonNull Element rootNode) {
         Element idNode = doc.createElement(GncXmlHelper.TAG_SPLIT_ID);
         idNode.setAttribute("type", "guid");
         idNode.appendChild(doc.createTextNode(mUID));
@@ -217,7 +236,8 @@ public void toGncXml(Document doc, Element rootNode) {
      * @param splitString String containing formatted split
      * @return Split instance parsed from the string
      */
-    public static Split parseSplit(String splitString) {
+    @NonNull
+    public static Split parseSplit(@NonNull String splitString) {
         String[] tokens = splitString.split(";");
         Money amount = new Money(tokens[0], tokens[1]);
         Split split = new Split(amount, tokens[2]);
diff --git a/app/src/org/gnucash/android/model/Transaction.java b/app/src/org/gnucash/android/model/Transaction.java
index 8de70df6..bb2ba321 100644
--- a/app/src/org/gnucash/android/model/Transaction.java
+++ b/app/src/org/gnucash/android/model/Transaction.java
@@ -17,6 +17,8 @@
 package org.gnucash.android.model;
 
 import android.content.Intent;
+import android.support.annotation.NonNull;
+
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.export.ofx.OfxHelper;
@@ -76,27 +78,32 @@
     /**
      * Currency used by splits in this transaction
      */
+    @NonNull
     private String mCurrencyCode = Money.DEFAULT_CURRENCY_CODE;
 
     /**
      * The splits making up this transaction
      */
+    @NonNull
     private List<Split> mSplitList = new ArrayList<Split>();
 
 	/**
 	 * Unique identifier of the transaction.
 	 * This is automatically generated when the transaction is created.
 	 */
+    @NonNull
 	private String mUID;
 
 	/**
 	 * Name describing the transaction
 	 */
+    @NonNull
 	private String mDescription;
 
 	/**
 	 * An extra note giving details about the transaction
 	 */
+    @NonNull
 	private String mNotes = "";
 
 	/**
@@ -122,7 +129,7 @@
 	 * provided data and initializes the rest to default values.
 	 * @param name Name of the transaction
 	 */
-	public Transaction(String name) {
+	public Transaction(@NonNull String name) {
 		initDefaults();
 		setDescription(name);
 	}
@@ -135,7 +142,7 @@ public Transaction(String name) {
      * @param transaction Transaction to be cloned
      * @param generateNewUID Flag to determine if new UID should be assigned or not
      */
-    public Transaction(Transaction transaction, boolean generateNewUID){
+    public Transaction(@NonNull Transaction transaction, boolean generateNewUID){
         initDefaults();
         setDescription(transaction.getDescription());
         setNote(transaction.getNote());
@@ -160,6 +167,7 @@ private void initDefaults(){
      * Returns list of splits for this transaction
      * @return {@link java.util.List} of splits in the transaction
      */
+    @NonNull
     public List<Split> getSplits(){
         return mSplitList;
     }
@@ -169,6 +177,7 @@ private void initDefaults(){
      * @param accountUID Unique Identifier of the account
      * @return List of {@link org.gnucash.android.model.Split}s
      */
+    @NonNull
     public List<Split> getSplits(String accountUID){
         List<Split> splits = new ArrayList<Split>();
         for (Split split : mSplitList) {
@@ -184,7 +193,7 @@ private void initDefaults(){
      * <p>All the splits in the list will have their transaction UID set to this transaction</p>
      * @param splitList List of splits for this transaction
      */
-    public void setSplits(List<Split> splitList){
+    public void setSplits(@NonNull List<Split> splitList){
         mSplitList = splitList;
     }
 
@@ -193,7 +202,7 @@ public void setSplits(List<Split> splitList){
      * <p>Sets the split UID and currency to that of this transaction</p>
      * @param split Split for this transaction
      */
-    public void addSplit(Split split){
+    public void addSplit(@NonNull Split split){
         //sets the currency of the split to the currency of the transaction
         split.setAmount(split.getAmount().withCurrency(Currency.getInstance(mCurrencyCode)));
         split.setTransactionUID(mUID);
@@ -207,7 +216,7 @@ public void addSplit(Split split){
      * @return Money balance of the transaction for the specified account
      * @see #computeBalance(String, java.util.List)
      */
-    public Money getBalance(String accountUID){
+    public Money getBalance(@NonNull String accountUID){
         return computeBalance(accountUID, mSplitList);
     }
 
@@ -217,6 +226,7 @@ public Money getBalance(String accountUID){
      * means there is an extra amount which is unresolved.
      * @return Money imbalance of the transaction
      */
+    @NonNull
     public Money getImbalance(){
         Money imbalance = Money.createZeroInstance(mCurrencyCode);
         for (Split split : mSplitList) {
@@ -236,7 +246,8 @@ public Money getImbalance(){
      * @param splitList List of splits
      * @return Money list of splits
      */
-    public static Money computeBalance(String accountUID, List<Split> splitList){
+    @NonNull
+    public static Money computeBalance(@NonNull String accountUID, @NonNull List<Split> splitList) {
         AccountsDbAdapter accountsDbAdapter = GnuCashApplication.getAccountsDbAdapter();
         AccountType accountType = accountsDbAdapter.getAccountType(accountUID);
         String currencyCode = accountsDbAdapter.getCurrencyCode(accountUID);
@@ -269,6 +280,7 @@ public static Money computeBalance(String accountUID, List<Split> splitList){
      * Returns the currency code of this transaction.
      * @return ISO 4217 currency code string
      */
+    @NonNull
     public String getCurrencyCode() {
         return mCurrencyCode;
     }
@@ -279,7 +291,7 @@ public String getCurrencyCode() {
      * Transactions always use the currency of their accounts. </p>
      * @param currencyCode String with ISO 4217 currency code
      */
-    public void setCurrencyCode(String currencyCode) {
+    public void setCurrencyCode(@NonNull String currencyCode) {
         this.mCurrencyCode = currencyCode;
     }
 
@@ -288,6 +300,7 @@ public void setCurrencyCode(String currencyCode) {
      * @return Currency of the transaction
      * @see #getCurrencyCode()
      */
+    @NonNull
     public Currency getCurrency(){
         return Currency.getInstance(this.mCurrencyCode);
     }
@@ -296,7 +309,8 @@ public Currency getCurrency(){
 	 * Returns the description of the transaction
 	 * @return Transaction description
 	 */
-	public String getDescription() {
+	@NonNull
+    public String getDescription() {
 		return mDescription;
 	}
 
@@ -304,7 +318,7 @@ public String getDescription() {
 	 * Sets the transaction description
 	 * @param description String description
 	 */
-	public void setDescription(String description) {
+	public void setDescription(@NonNull String description) {
 		this.mDescription = description.trim();
 	}
 
@@ -312,7 +326,7 @@ public void setDescription(String description) {
 	 * Add notes to the transaction
 	 * @param notes String containing notes for the transaction
 	 */
-	public void setNote(String notes) {
+	public void setNote(@NonNull String notes) {
 		this.mNotes = notes;
 	}
 
@@ -320,7 +334,8 @@ public void setNote(String notes) {
 	 * Returns the transaction notes
 	 * @return String notes of transaction
 	 */
-	public String getNote() {
+	@NonNull
+    public String getNote() {
 		return mNotes;
 	}
 
@@ -328,7 +343,7 @@ public String getNote() {
 	 * Set the time of the transaction
 	 * @param timestamp Time when transaction occurred as {@link Date}
 	 */
-	public void setTime(Date timestamp){
+	public void setTime(@NonNull Date timestamp){
 		this.mTimestamp = timestamp.getTime();
 	}
 
@@ -355,7 +370,7 @@ public long getTimeMillis(){
 	 * @param transactionUID Unique ID string
      * @see #resetUID()
 	 */
-	public void setUID(String transactionUID) {
+	public void setUID(@NonNull String transactionUID) {
 		this.mUID = transactionUID;
 	}
 
@@ -369,7 +384,8 @@ public void resetUID(){
 	 * Returns unique ID string for transaction
 	 * @return String with Unique ID of transaction
 	 */
-	public String getUID() {
+	@NonNull
+    public String getUID() {
 		return mUID;
 	}
 
@@ -380,7 +396,8 @@ public String getUID() {
      * @param shouldReduceBalance <code>true</code> if type should reduce balance, <code>false</code> otherwise
      * @return TransactionType for the account
      */
-    public static TransactionType getTypeForBalance(AccountType accountType, boolean shouldReduceBalance){
+    @NonNull
+    public static TransactionType getTypeForBalance(@NonNull AccountType accountType, boolean shouldReduceBalance){
         TransactionType type;
         if (accountType.hasDebitNormalBalance()) {
             type = shouldReduceBalance ? TransactionType.CREDIT : TransactionType.DEBIT;
@@ -395,8 +412,8 @@ public static TransactionType getTypeForBalance(AccountType accountType, boolean
      * @return true if the amount represents a decrease in the account balance, false otherwise
      * @see #getTypeForBalance(AccountType, boolean)
      */
-    public static boolean shouldDecreaseBalance(AccountType accountType, TransactionType transactionType){
-        if (accountType.hasDebitNormalBalance()){
+    public static boolean shouldDecreaseBalance(@NonNull AccountType accountType, @NonNull TransactionType transactionType) {
+        if (accountType.hasDebitNormalBalance()) {
             return transactionType == TransactionType.CREDIT;
         } else
             return transactionType == TransactionType.DEBIT;
@@ -441,7 +458,7 @@ public void setRecurrencePeriod(long recurrenceId) {
      * @param doc XML document to which transaction should be added
      * @param accountUID Unique Identifier of the account which called the method.  @return Element in DOM corresponding to transaction
      */
-	public Element toOFX(Document doc, String accountUID){
+	public Element toOFX(@NonNull Document doc, @NonNull String accountUID){
         Money balance = getBalance(accountUID);
         TransactionType transactionType = balance.isNegative() ? TransactionType.DEBIT : TransactionType.CREDIT;
 
@@ -513,7 +530,7 @@ public Element toOFX(Document doc, String accountUID){
      * @param rootElement Parent node for the XML
      * @deprecated Use the {@link org.gnucash.android.export.xml.GncXmlExporter} to generate XML
      */
-    public void toGncXml(Document doc, Element rootElement) {
+    public void toGncXml(@NonNull Document doc, @NonNull Element rootElement) {
         Element idNode = doc.createElement(GncXmlHelper.TAG_TRX_ID);
         idNode.setAttribute(GncXmlHelper.ATTR_KEY_TYPE, GncXmlHelper.ATTR_VALUE_GUID);
         idNode.appendChild(doc.createTextNode(mUID));
@@ -578,7 +595,8 @@ public void toGncXml(Document doc, Element rootElement) {
      * @param transaction Transaction used to create intent
      * @return Intent with transaction details as extras
      */
-    public static Intent createIntent(Transaction transaction){
+    @NonNull
+    public static Intent createIntent(@NonNull Transaction transaction){
         Intent intent = new Intent(Intent.ACTION_INSERT);
         intent.setType(Transaction.MIME_TYPE);
         intent.putExtra(Intent.EXTRA_TITLE, transaction.getDescription());
