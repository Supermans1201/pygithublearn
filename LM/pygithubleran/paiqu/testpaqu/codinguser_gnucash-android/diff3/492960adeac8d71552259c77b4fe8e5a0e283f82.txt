From 492960adeac8d71552259c77b4fe8e5a0e283f82 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Mon, 20 Apr 2015 23:02:14 +0800
Subject: [PATCH] ensure ROOT account when importing.

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  7 ++++
 .../gnucash/android/importer/GncXmlHandler.java    | 39 ++++++++++++++++------
 .../main/java/org/gnucash/android/model/Money.java |  2 +-
 3 files changed, 36 insertions(+), 12 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index c2119380..4c754761 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -60,6 +60,13 @@
      */
     public static final String ACCOUNT_NAME_SEPARATOR = ":";
 
+    /**
+     * ROOT account full name.
+     * should ensure the ROOT account's full name will always sort before any other
+     * account's full name.
+     */
+    public static final String ROOT_ACCOUNT_FULL_NAME = " ";
+
 	/**
 	 * Transactions database adapter for manipulating transactions associated with accounts
 	 */
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 84eb4949..28db1316 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -95,6 +95,11 @@
     HashMap<String, Account> mAccountMap;
 
     /**
+     * ROOT account of the imported book
+     */
+    Account mRootAccount;
+
+    /**
      * Transaction instance which will be built for each transaction found
      */
     Transaction mTransaction;
@@ -185,6 +190,7 @@ private void init(@Nullable SQLiteDatabase db) {
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
             mScheduledActionsDbAdapter = new ScheduledActionDbAdapter(db);
         }
+
         mContent = new StringBuilder();
 
         mAccountList = new ArrayList<>();
@@ -281,6 +287,15 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 if (!mInTemplates) { //we ignore template accounts, we have no use for them
                     mAccountList.add(mAccount);
                     mAccountMap.put(mAccount.getUID(), mAccount);
+                    // check ROOT account
+                    if (mAccount.getAccountType() == AccountType.ROOT) {
+                        if (mRootAccount == null) {
+                            mRootAccount = mAccount;
+                        } else {
+                            throw new SAXException("multiple ROOT accounts exist in book");
+                        }
+                    }
+                    // prepare for next input
                     mAccount = null;
                     //reset ISO 4217 flag for next account
                     mISO4217Currency = false;
@@ -507,18 +522,20 @@ public void characters(char[] chars, int start, int length) throws SAXException
     @Override
     public void endDocument() throws SAXException {
         super.endDocument();
-        HashMap<String, Account> map = new HashMap<>(mAccountList.size());
         HashMap<String, String> mapFullName = new HashMap<>(mAccountList.size());
-        Account rootAccount = null;
+
+        // The XML has no ROOT, create one
+        if (mRootAccount == null) {
+            mRootAccount = new Account("ROOT");
+            mRootAccount.setAccountType(AccountType.ROOT);
+            mAccountList.add(mRootAccount);
+            mAccountMap.put(mRootAccount.getUID(), mRootAccount);
+        }
+
         for(Account account:mAccountList) {
-            map.put(account.getUID(), account);
             mapFullName.put(account.getUID(), null);
-            if (account.getAccountType() == AccountType.ROOT) {
-                if (rootAccount == null) {
-                    rootAccount = account;
-                } else {
-                    throw new SAXException("Multiple ROOT accounts exists in the import file");
-                }
+            if (account.getParentUID() == null && account.getAccountType() != AccountType.ROOT) {
+                account.setParentUID(mRootAccount.getUID());
             }
         }
         java.util.Stack<Account> stack = new Stack<>();
@@ -532,12 +549,12 @@ public void endDocument() throws SAXException {
                 Account acc = stack.peek();
                 if (acc.getAccountType() == AccountType.ROOT) {
                     // append blank to Root Account, ensure it always sorts first
-                    mapFullName.put(acc.getUID(), " " + acc.getName());
+                    mapFullName.put(acc.getUID(), AccountsDbAdapter.ROOT_ACCOUNT_FULL_NAME);
                     stack.pop();
                     continue;
                 }
                 String parentUID = acc.getParentUID();
-                Account parentAccount = map.get(parentUID);
+                Account parentAccount = mAccountMap.get(parentUID);
                 // In accounts tree that are not imported, top level ROOT account
                 // does not exist, which will make all top level accounts have a
                 // null parent
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 7c9a3a02..e012b151 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -463,7 +463,7 @@ public Money absolute() {
 	 */
     public boolean isAmountZero() {
 		try {
-			return mAmount.intValueExact() == 0;
+			return mAmount.compareTo(BigDecimal.ZERO) == 0;
 		} catch (ArithmeticException e){
 			e.printStackTrace();
 			return false;
