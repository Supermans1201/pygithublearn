From 6bdbc502955c895e5dafd6df750935748ce0f993 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 19 May 2015 18:25:12 +0200
Subject: [PATCH 01/10] Added Google Espresso testing framework

Migrate export tests to espresso
Added custom test runner for espresso tests
Disable animation when running test with debug builds
---
 app/build.gradle                                   |  28 +++++-
 .../android/test/ui/AccountsActivityTest.java      |   2 +-
 .../android/test/ui/ExportTransactionsTest.java    | 101 ++++++++++---------
 .../android/test/ui/GnucashAndroidTestRunner.java  | 111 +++++++++++++++++++++
 .../android/test/ui/TransactionsActivityTest.java  |   2 +-
 app/src/debug/AndroidManifest.xml                  |  22 ++++
 6 files changed, 216 insertions(+), 50 deletions(-)
 create mode 100644 app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
 create mode 100644 app/src/debug/AndroidManifest.xml

diff --git a/app/build.gradle b/app/build.gradle
index 60160b8a..5e3cb2ae 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -41,6 +41,17 @@ android {
             resValue "string", "dropbox_app_secret", "h2t9fphj3nr4wkw"
             resValue "string", "manifest_dropbox_app_key", "db-dhjh8ke9wf05948"
         }
+        testInstrumentationRunner "org.gnucash.android.test.ui.GnucashAndroidTestRunner"
+
+    }
+
+    packagingOptions {
+        exclude 'META-INF/DEPENDENCIES'
+        exclude 'META-INF/NOTICE'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'LICENSE.txt'
+        exclude 'META-INF/NOTICE.txt'
     }
 
     applicationVariants.all { variant ->
@@ -114,6 +125,18 @@ android {
     }
 }
 
+
+task grantAnimationPermission(type: Exec, dependsOn: ['installDevelopmentDebug', 'installBetaDebug', 'installProductionDebug']) { // or install{productFlavour}{buildType}
+    // commandLine "adb shell pm grant $android.defaultConfig.packageName android.permission.SET_ANIMATION_SCALE".split(' ')
+    commandLine "adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+}
+tasks.whenTaskAdded { task ->
+    if (task.name.startsWith('connectedAndroidTest')) {
+        task.dependsOn grantAnimationPermission
+    }
+}
+
+
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile('com.android.support:support-v4:22.1.1',
@@ -132,8 +155,11 @@ dependencies {
             'org.assertj:assertj-core:1.7.1'
     )
     androidTestCompile('com.jayway.android.robotium:robotium-solo:5.3.1')
-
+    androidTestCompile 'com.android.support.test:runner:0.2'
+    androidTestCompile 'com.android.support.test:rules:0.2'
     androidTestCompile('com.squareup.assertj:assertj-android:1.0.0'){
         exclude group: 'com.android.support', module:'support-annotations'
     }
+    androidTestCompile ('com.android.support.test.espresso:espresso-core:2.1')
+    androidTestCompile 'com.android.support:support-annotations:22.1.1'
 }
\ No newline at end of file
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 81bd8da1..5d1afcee 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 953e9e0e..09829260 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,10 +19,11 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-
-import com.robotium.solo.Solo;
+import android.widget.CompoundButton;
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -39,31 +40,48 @@
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 import org.gnucash.android.ui.account.AccountsActivity;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.io.File;
 import java.util.Currency;
 import java.util.List;
 
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.matcher.ViewMatchers.isAssignableFrom;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isEnabled;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.allOf;
 
+@RunWith(AndroidJUnit4.class)
 public class ExportTransactionsTest extends
 		ActivityInstrumentationTestCase2<AccountsActivity> {
 
-	private Solo mSolo;
     private DatabaseHelper mDbHelper;
     private SQLiteDatabase mDb;
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
 
+	private AccountsActivity mAcccountsActivity;
+
     public ExportTransactionsTest() {
 		super(AccountsActivity.class);
 	}
 	
 	@Override
-	protected void setUp() throws Exception {
+	@Before
+	public void setUp() throws Exception {
+		super.setUp();
+		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+		mAcccountsActivity = getActivity();
 		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
-		mSolo = new Solo(getInstrumentation(), getActivity());
 
         mDbHelper = new DatabaseHelper(getActivity());
         try {
@@ -75,6 +93,7 @@ protected void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+		mAccountsDbAdapter.deleteAllRecords();
 
 		Account account = new Account("Exportable");		
 		Transaction transaction = new Transaction("Pizza");
@@ -82,11 +101,12 @@ protected void setUp() throws Exception {
 		transaction.setTime(System.currentTimeMillis());
         Split split = new Split(new Money("8.99", "USD"), account.getUID());
 		split.setMemo("Hawaii is the best!");
-        transaction.addSplit(split);
+		transaction.addSplit(split);
 		transaction.addSplit(split.createPair(mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance("USD"))));
 		account.addTransaction(transaction);
-		
+
 		mAccountsDbAdapter.addAccount(account);
+
 	}
 	
 	/**
@@ -95,6 +115,7 @@ protected void setUp() throws Exception {
 	 * If this test fails, it may be due to the file being created and tested in different minutes of the clock
 	 * Just try rerunning it again.
 	 */
+	@Test
 	public void testOfxExport(){
         testExport(ExportFormat.OFX);
 	}
@@ -102,10 +123,12 @@ public void testOfxExport(){
 	/**
 	 * Test the export of transactions in the QIF format
 	 */
+	@Test
 	public void testQifExport(){
 		testExport(ExportFormat.QIF);
 	}
 
+	@Test
 	public void testXmlExport(){
 		testExport(ExportFormat.XML);
 	}
@@ -117,67 +140,55 @@ public void testXmlExport(){
     public void testExport(ExportFormat format){
 		File folder = new File(Exporter.EXPORT_FOLDER_PATH);
 		folder.mkdirs();
-		mSolo.sleep(5000);
 		assertThat(folder).exists();
 
 		for (File file : folder.listFiles()) {
 			file.delete();
 		}
+		//legacy menu will be removed in the future
+		//onView(withId(R.id.menu_export)).perform(click());
+		onView(withId(android.R.id.home)).perform(click());
+		onView(withText(R.string.nav_menu_export)).perform(click());
+		onView(withText(format.name())).perform(click());
 
-		mSolo.clickOnActionBarItem(R.id.menu_export);
-		mSolo.waitForDialogToOpen(5000);
-
-        mSolo.waitForText(getActivity().getString(R.string.title_export_dialog));
-
-		mSolo.clickOnText(format.name());
-		mSolo.clickOnView(mSolo.getView(R.id.btn_save));
-
-        mSolo.waitForDialogToClose(10000);
-		mSolo.sleep(5000); //sleep so that emulators can save the file
+		onView(withId(R.id.btn_save)).perform(click());
 
 		assertThat(folder.listFiles().length).isEqualTo(1);
 		File exportFile = folder.listFiles()[0];
 		assertThat(exportFile.getName()).endsWith(format.getExtension());
     }
 
+	@Test
 	public void testDeleteTransactionsAfterExport(){
 		assertThat(mTransactionsDbAdapter.getAllTransactionsCount()).isGreaterThan(0);
 
 		PreferenceManager.getDefaultSharedPreferences(getActivity()).edit()
-				.putBoolean(mSolo.getString(R.string.key_delete_transactions_after_export), true).commit();
+				.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), true).commit();
 
 		testExport(ExportFormat.QIF);
 
 		assertThat(mTransactionsDbAdapter.getAllTransactionsCount()).isEqualTo(0);
 		PreferenceManager.getDefaultSharedPreferences(getActivity()).edit()
-				.putBoolean(mSolo.getString(R.string.key_delete_transactions_after_export), false).commit();
+				.putBoolean(mAcccountsActivity.getString(R.string.key_delete_transactions_after_export), false).commit();
 	}
 
 	/**
 	 * Test creating a scheduled export
 	 * Does not work on Travis yet
 	 */
-	public void atestCreateExportSchedule(){
-//		mSolo.setNavigationDrawer(Solo.OPENED);
-//		mSolo.clickOnText(mSolo.getString(R.string.nav_menu_export));
-		mSolo.clickOnActionBarItem(R.id.menu_export);
-		mSolo.waitForDialogToOpen(5000);
-
-		mSolo.clickOnText(ExportFormat.XML.name());
-		mSolo.clickOnView(mSolo.getView(R.id.input_recurrence));
-		mSolo.waitForDialogToOpen();
-		mSolo.sleep(3000);
-		mSolo.clickOnButton(0); //switch on the recurrence dialog
-		mSolo.sleep(2000);
-		mSolo.pressSpinnerItem(0, -1);
-		mSolo.sleep(2000);
-		mSolo.clickOnButton(1);
-		mSolo.sleep(3000);
-		mSolo.clickOnButton(5); //the export button is the second
-		mSolo.waitForDialogToClose();
-
-		mSolo.sleep(5000); //wait for database save
+	@Test
+	public void shouldCreateExportSchedule(){
+		onView(withId(android.R.id.home)).perform(click());
+		onView(withText(R.string.nav_menu_export)).perform(click());
+
+		onView(withText(ExportFormat.XML.name())).perform(click());
+		onView(withId(R.id.input_recurrence)).perform(click());
 
+		//switch on recurrence dialog
+		onView(allOf(isAssignableFrom(CompoundButton.class), isDisplayed(), isEnabled())).perform(click());
+		onView(withText("Done")).perform(click());
+
+		onView(withId(R.id.btn_save)).perform(click());
 		ScheduledActionDbAdapter scheduledactionDbAdapter = new ScheduledActionDbAdapter(mDb);
 		List<ScheduledAction> scheduledActions = scheduledactionDbAdapter.getAllEnabledScheduledActions();
 		assertThat(scheduledActions)
@@ -185,18 +196,14 @@ public void atestCreateExportSchedule(){
 				.extracting("mActionType").contains(ScheduledAction.ActionType.BACKUP);
 
 		ScheduledAction action = scheduledActions.get(0);
-		assertThat(action.getPeriodType()).isEqualTo(PeriodType.DAY);
+		assertThat(action.getPeriodType()).isEqualTo(PeriodType.WEEK);
 		assertThat(action.getEndTime()).isEqualTo(0);
 	}
 
 	//todo: add testing of export flag to unit test
 	//todo: add test of ignore exported transactions to unit tests
 	@Override
-	protected void tearDown() throws Exception {
-		mSolo.finishOpenedActivities();
-		mSolo.waitForEmptyActivityStack(20000);
-		mSolo.sleep(5000);
-		mAccountsDbAdapter.deleteAllRecords();
+	@After public void tearDown() throws Exception {
         mDbHelper.close();
         mDb.close();
 		super.tearDown();
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java b/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
new file mode 100644
index 00000000..4e45f66c
--- /dev/null
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2015 Ngewi Fet <ngewif@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gnucash.android.test.ui;
+
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.support.test.runner.AndroidJUnitRunner;
+import android.util.Log;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * Custom test runner
+ */
+public class GnucashAndroidTestRunner extends AndroidJUnitRunner{
+    private static final String TAG = "Primer";
+    private static final String ANIMATION_PERMISSION = "android.permission.SET_ANIMATION_SCALE";
+    private static final float DISABLED = 0.0f;
+    private static final float DEFAULT = 1.0f;
+
+    @Override
+    public void onCreate(Bundle args) {
+        super.onCreate(args);
+        // as time goes on we may actually need to process our arguments.
+        disableAnimation();
+
+    }
+
+    @Override
+    public void onDestroy() {
+        enableAnimation();
+        super.onDestroy();
+    }
+
+    private void disableAnimation() {
+        int permStatus = getContext().checkCallingOrSelfPermission(ANIMATION_PERMISSION);
+        if (permStatus == PackageManager.PERMISSION_GRANTED) {
+            if (reflectivelyDisableAnimation(DISABLED)) {
+                Log.i(TAG, "All animations disabled.");
+            } else {
+                Log.i(TAG, "Could not disable animations.");
+            }
+        } else {
+            Log.i(TAG, "Cannot disable animations due to lack of permission.");
+        }
+    }
+
+    private void enableAnimation(){
+        int permStatus = getContext().checkCallingOrSelfPermission(ANIMATION_PERMISSION);
+        if (permStatus == PackageManager.PERMISSION_GRANTED) {
+            if (reflectivelyDisableAnimation(DEFAULT)) {
+                Log.i(TAG, "All animations disabled.");
+            } else {
+                Log.i(TAG, "Could not disable animations.");
+            }
+        } else {
+            Log.i(TAG, "Cannot disable animations due to lack of permission.");
+        }
+    }
+
+    private boolean reflectivelyDisableAnimation(float animationScale) {
+        try {
+            Class<?> windowManagerStubClazz = Class.forName("android.view.IWindowManager$Stub");
+            Method asInterface = windowManagerStubClazz.getDeclaredMethod("asInterface", IBinder.class);
+            Class<?> serviceManagerClazz = Class.forName("android.os.ServiceManager");
+            Method getService = serviceManagerClazz.getDeclaredMethod("getService", String.class);
+            Class<?> windowManagerClazz = Class.forName("android.view.IWindowManager");
+            Method setAnimationScales = windowManagerClazz.getDeclaredMethod("setAnimationScales",
+                    float[].class);
+            Method getAnimationScales = windowManagerClazz.getDeclaredMethod("getAnimationScales");
+
+            IBinder windowManagerBinder = (IBinder) getService.invoke(null, "window");
+            Object windowManagerObj = asInterface.invoke(null, windowManagerBinder);
+            float[] currentScales = (float[]) getAnimationScales.invoke(windowManagerObj);
+            for (int i = 0; i < currentScales.length; i++) {
+                currentScales[i] = animationScale;
+            }
+            setAnimationScales.invoke(windowManagerObj, currentScales);
+            return true;
+        } catch (ClassNotFoundException cnfe) {
+            Log.w(TAG, "Cannot disable animations reflectively.", cnfe);
+        } catch (NoSuchMethodException mnfe) {
+            Log.w(TAG, "Cannot disable animations reflectively.", mnfe);
+        } catch (SecurityException se) {
+            Log.w(TAG, "Cannot disable animations reflectively.", se);
+        } catch (InvocationTargetException ite) {
+            Log.w(TAG, "Cannot disable animations reflectively.", ite);
+        } catch (IllegalAccessException iae) {
+            Log.w(TAG, "Cannot disable animations reflectively.", iae);
+        } catch (RuntimeException re) {
+            Log.w(TAG, "Cannot disable animations reflectively.", re);
+        }
+        return false;
+    }
+}
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 3754382f..22e888bd 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ * Copyright (c) 2012 - 2015 Ngewi Fet <ngewif@gmail.com>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/app/src/debug/AndroidManifest.xml b/app/src/debug/AndroidManifest.xml
new file mode 100644
index 00000000..a51540cb
--- /dev/null
+++ b/app/src/debug/AndroidManifest.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ Copyright (c) 2012 Ngewi Fet <ngewif@gmail.com>
+ 
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.gnucash.android">
+
+    <uses-permission android:name="android.permission.SET_ANIMATION_SCALE" />
+</manifest>
\ No newline at end of file

From 1bd18d2945f1d31fc7c9efb0626d2291fd75172d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 20 May 2015 18:14:57 +0200
Subject: [PATCH 02/10] Finished migrating all test to espresso framework

Removed Robotium dependency
---
 app/build.gradle                                   |  27 +-
 .../android/test/ui/AccountsActivityTest.java      | 241 +++++-----
 .../android/test/ui/ExportTransactionsTest.java    |   2 +-
 .../android/test/ui/GnucashAndroidTestRunner.java  |   6 +-
 .../android/test/ui/TransactionsActivityTest.java  | 499 +++++++++------------
 app/src/debug/AndroidManifest.xml                  |   7 +-
 .../android/ui/account/AccountFormFragment.java    |   4 +-
 .../ui/transaction/TransactionsListFragment.java   |   7 +-
 app/src/main/res/layout/fragment_accounts_list.xml |   1 +
 app/src/main/res/layout/fragment_new_account.xml   |   6 +-
 .../main/res/layout/fragment_new_transaction.xml   |   2 +-
 .../main/res/layout/fragment_transactions_list.xml |   1 +
 app/src/main/res/layout/list_item_transaction.xml  |   2 +-
 13 files changed, 374 insertions(+), 431 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 5e3cb2ae..d4dec1f4 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -125,14 +125,26 @@ android {
     }
 }
 
+def adb = android.getAdbExe().toString()
 
-task grantAnimationPermission(type: Exec, dependsOn: ['installDevelopmentDebug', 'installBetaDebug', 'installProductionDebug']) { // or install{productFlavour}{buildType}
-    // commandLine "adb shell pm grant $android.defaultConfig.packageName android.permission.SET_ANIMATION_SCALE".split(' ')
-    commandLine "adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
-}
-tasks.whenTaskAdded { task ->
-    if (task.name.startsWith('connectedAndroidTest')) {
-        task.dependsOn grantAnimationPermission
+afterEvaluate {
+    task grantAnimationPermissionDevel(type: Exec, dependsOn: 'installDevelopmentDebug') { // or install{productFlavour}{buildType}
+        commandLine "$adb shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+    }
+
+    task grantAnimationPermissionProduction(type: Exec, dependsOn: ['installBetaDebug', 'installProductionDebug']){
+        commandLine "$adb shell pm grant $android.productFlavors.production.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+    }
+    // When launching individual tests from Android Studio, it seems that only the assemble tasks
+    // get called directly, not the install* versions
+    tasks.each { task ->
+        if (task.name.startsWith('assembleDevelopmentDebugAndroidTest')){
+            task.dependsOn grantAnimationPermissionDevel
+        } else if (task.name.startsWith('assembleBetaDebugAndroidTest')){
+            task.dependsOn grantAnimationPermissionProduction
+        } else if (task.name.startsWith('assembleProductionDebugAndroidTest')){
+            task.dependsOn grantAnimationPermissionProduction
+        }
     }
 }
 
@@ -154,7 +166,6 @@ dependencies {
             'junit:junit:4.12',
             'org.assertj:assertj-core:1.7.1'
     )
-    androidTestCompile('com.jayway.android.robotium:robotium-solo:5.3.1')
     androidTestCompile 'com.android.support.test:runner:0.2'
     androidTestCompile 'com.android.support.test:rules:0.2'
     androidTestCompile('com.squareup.assertj:assertj-android:1.0.0'){
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 5d1afcee..605afa80 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -22,13 +22,11 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
 import android.support.v4.app.Fragment;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-import android.view.View;
-import android.widget.EditText;
-
-import com.robotium.solo.Solo;
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -39,35 +37,56 @@
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
+import org.gnucash.android.receivers.AccountCreator;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.account.AccountsListFragment;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.util.Currency;
 import java.util.List;
 
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.longClick;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isNotChecked;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.android.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.not;
 
+@RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
 	private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
 	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
     public static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
-	private Solo mSolo;
     private DatabaseHelper mDbHelper;
     private SQLiteDatabase mDb;
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
+    private AccountsActivity mAcccountsActivity;
 
     public AccountsActivityTest() {
 		super(AccountsActivity.class);
 	}
 
-	protected void setUp() throws Exception {
-		Context context = getInstrumentation().getTargetContext();
-        preventFirstRunDialogs(context);
+    @Before
+	public void setUp() throws Exception {
+        super.setUp();
+        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+        preventFirstRunDialogs(getInstrumentation().getTargetContext());
+        mAcccountsActivity = getActivity();
 
-        mDbHelper = new DatabaseHelper(context);
+        mDbHelper = new DatabaseHelper(mAcccountsActivity);
         try {
             mDb = mDbHelper.getWritableDatabase();
         } catch (SQLException e) {
@@ -77,15 +96,18 @@ protected void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-
-		mSolo = new Solo(getInstrumentation(), getActivity());
 		
 		Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
 		account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
 		mAccountsDbAdapter.addAccount(account);
+        refreshAccountsList();
 	}
 
+    /**
+     * Prevents the first-run dialogs (Whats new, Create accounts etc) from being displayed when testing
+     * @param context Application context
+     */
     public static void preventFirstRunDialogs(Context context) {
         Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
 
@@ -118,6 +140,7 @@ public void testDisplayAccountsList(){
             assertEquals(NUMBER_OF_ACCOUNTS + 1, accountsListView.getCount());
         }
     */
+    @Test
     public void testSearchAccounts(){
         String SEARCH_ACCOUNT_NAME = "Search Account";
 
@@ -125,45 +148,36 @@ public void testSearchAccounts(){
         account.setParentUID(DUMMY_ACCOUNT_UID);
         mAccountsDbAdapter.addAccount(account);
 
-        refreshAccountsList();
-
         //enter search query
 //        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_search);
-        mSolo.clickOnActionBarItem(R.id.menu_search);
-        mSolo.sleep(2000);
-        mSolo.enterText(0, "Se");
-        mSolo.sleep(3000);
-        boolean accountFound = mSolo.waitForText(SEARCH_ACCOUNT_NAME, 1, 2000);
-        assertTrue(accountFound);
-
-        mSolo.clearEditText(0);
-
-        mSolo.sleep(2000);
-        //the child account should be hidden again
-        accountFound = mSolo.waitForText(SEARCH_ACCOUNT_NAME, 1, 2000);
-        assertFalse(accountFound);
+        onView(withId(R.id.menu_search)).perform(click());
+        onView(withId(R.id.abs__search_src_text)).perform(typeText("Se"));
+        onView(withText(SEARCH_ACCOUNT_NAME)).check(matches(isDisplayed()));
+
+        onView(withId(R.id.abs__search_src_text)).perform(clearText());
+        onView(withId(R.id.primary_text)).check(matches(not(withText(SEARCH_ACCOUNT_NAME))));
     }
 
     /**
      * Tests that an account can be created successfully and that the account list is sorted alphabetically.
      */
+    @Test
 	public void testCreateAccount(){
-        mSolo.clickOnActionBarItem(R.id.menu_add_account);
-		mSolo.waitForText(getActivity().getString(R.string.title_add_account));
-
-        View checkbox = mSolo.getCurrentActivity().findViewById(R.id.checkbox_parent_account);
-        //there already exists one eligible parent account in the system
-        assertThat(checkbox).isVisible();
+        onView(withId(R.id.menu_add_account)).check(matches(isDisplayed())).perform(click());
 
-        mSolo.clickOnCheckBox(0);
+        onView(withId(R.id.checkbox_transaction))
+//                .check(matches(allOf(isDisplayed(), isNotChecked())))
+                .perform(click());
 
-        EditText inputAccountName = (EditText) mSolo.getCurrentActivity().findViewById(R.id.edit_text_account_name);
         String NEW_ACCOUNT_NAME = "A New Account";
-        mSolo.enterText(inputAccountName, NEW_ACCOUNT_NAME);
-        mSolo.clickOnActionBarItem(R.id.menu_save);
+        onView(withId(R.id.input_account_name)).perform(typeText(NEW_ACCOUNT_NAME));
+        onView(withId(R.id.checkbox_placeholder_account))
+                .check(matches(isNotChecked()))
+                .perform(click());
+        onView(withId(R.id.menu_save)).perform(click());
 
-        mSolo.waitForText(NEW_ACCOUNT_NAME);
-        mSolo.sleep(3000);
+        //check displayed
+//        onView(withId(android.R.id.list)).check(matches(hasDescendant(withText(NEW_ACCOUNT_NAME))));
 
 		List<Account> accounts = mAccountsDbAdapter.getAllAccounts();
         assertThat(accounts).isNotNull();
@@ -175,24 +189,25 @@ public void testCreateAccount(){
         assertThat(newestAccount.isPlaceholderAccount()).isTrue();
 	}
 
-    public void testChangeParentAccount(){
+    @Test
+    public void testChangeParentAccount() {
         final String accountName = "Euro Account";
         Account account = new Account(accountName, Currency.getInstance("EUR"));
         mAccountsDbAdapter.addAccount(account);
 
         refreshAccountsList();
-        mSolo.waitForText(accountName);
+//        onView(withId(android.R.id.list))
+//                .check(matches(allOf(isDisplayed(), hasDescendant(withText(accountName)))));
 
-        mSolo.clickLongOnText(accountName);
-        mSolo.clickOnView(mSolo.getView(R.id.context_menu_edit_accounts));
-        mSolo.waitForView(EditText.class);
+        onView(withText(accountName)).perform(longClick());
+        onView(withId(R.id.context_menu_edit_accounts)).perform(click());
+        onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
+        onView(withId(R.id.checkbox_transaction))
+                .check(matches(isNotChecked()))
+                .perform(click());
 
-        mSolo.clickOnCheckBox(1);
-        mSolo.sleep(2000);
+        onView(withId(R.id.menu_save)).perform(click());
 
-        mSolo.clickOnActionBarItem(R.id.menu_save);
-        mSolo.sleep(1000);
-        mSolo.waitForText(getActivity().getString(R.string.title_accounts));
         Account editedAccount = mAccountsDbAdapter.getAccount(account.getUID());
         String parentUID = editedAccount.getParentUID();
 
@@ -200,95 +215,62 @@ public void testChangeParentAccount(){
         assertThat(DUMMY_ACCOUNT_UID).isEqualTo(parentUID);
     }
 
+    @Test
 	public void testEditAccount(){
-        refreshAccountsList();
-        mSolo.sleep(2000);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
 		String editedAccountName = "Edited Account";
-				
-		mSolo.clickLongOnText(DUMMY_ACCOUNT_NAME);
-
-        clickSherlockActionBarItem(R.id.context_menu_edit_accounts);
+//		onView(withText(DUMMY_ACCOUNT_NAME)).perform(longClick());
+		onView(withId(R.id.primary_text)).perform(longClick());
+        onView(withId(R.id.context_menu_edit_accounts)).perform(click());
 
-        mSolo.waitForView(EditText.class);
+        onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
 
-		mSolo.clearEditText(0);
-		mSolo.enterText(0, editedAccountName);
+        onView(withId(R.id.input_account_name)).perform(clearText()).perform(typeText(editedAccountName));
 
-        clickSherlockActionBarItem(R.id.menu_save);
+        onView(withId(R.id.menu_save)).perform(click());
 
-		mSolo.waitForDialogToClose();
-        mSolo.waitForText("Accounts");
+        //test refresh
+//        onView(withId(android.R.id.empty))
+//                .check(matches(not(isDisplayed())));
 
 		List<Account> accounts = mAccountsDbAdapter.getAllAccounts();
 		Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
-		
-		assertEquals("Edited Account", latest.getName());
-		assertEquals(DUMMY_ACCOUNT_CURRENCY_CODE, latest.getCurrency().getCurrencyCode());	
+
+        assertThat(latest.getName()).isEqualTo(editedAccountName);
+        assertThat(latest.getCurrency().getCurrencyCode()).isEqualTo(DUMMY_ACCOUNT_CURRENCY_CODE);
 	}
 
     //TODO: Add test for moving content of accounts before deleting it
-	public void testDeleteAccount(){
-        final String accountNameToDelete = "TO BE DELETED";
-        final String accountUidToDelete = "to-be-deleted";
-
-        Account acc = new Account(accountNameToDelete);
-        acc.setUID(accountUidToDelete);
-
+    @Test(expected = IllegalArgumentException.class)
+	public void testDeleteAccount() {
         Transaction transaction = new Transaction("hats");
-        transaction.addSplit(new Split(Money.getZeroInstance(), accountUidToDelete));
-        acc.addTransaction(transaction);
-        mAccountsDbAdapter.addAccount(acc);
-
-        Fragment fragment = getActivity().getCurrentAccountListFragment();
-        assertNotNull(fragment);
-
-        ((AccountsListFragment) fragment).refresh();
+        transaction.addSplit(new Split(Money.getZeroInstance(), DUMMY_ACCOUNT_UID));
+        mTransactionsDbAdapter.addTransaction(transaction);
 
-        mSolo.clickLongOnText(accountNameToDelete);
+        onView(withId(R.id.primary_text)).perform(longClick());
+        onView(withId(R.id.context_menu_delete)).perform(click());
+        onView(withText(R.string.label_delete_sub_accounts)).perform(click());
+        onView(withId(R.id.btn_save)).perform(click());
 
-        clickSherlockActionBarItem(R.id.context_menu_delete);
+        //should throw expected exception
+        mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
 
-        mSolo.waitForDialogToOpen();
-        mSolo.clickOnRadioButton(0);
-        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
-
-        mSolo.waitForDialogToClose();
-        mSolo.waitForText("Accounts");
-
-        Exception expectedException = null;
-        try {
-            mAccountsDbAdapter.getID(accountUidToDelete);
-        } catch (IllegalArgumentException e){
-            expectedException = e;
-        }
-        assertNotNull(expectedException);
-
-        List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(accountUidToDelete);
-        assertEquals(0, transactions.size());
+        List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+        assertThat(transactions).hasSize(0);
     }
 
 	//TODO: Test import of account file
     //TODO: test settings activity
-
+    @Test
 	public void testIntentAccountCreation(){
 		Intent intent = new Intent(Intent.ACTION_INSERT);
 		intent.putExtra(Intent.EXTRA_TITLE, "Intent Account");
 		intent.putExtra(Intent.EXTRA_UID, "intent-account");
-		intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
-		intent.setType(Account.MIME_TYPE);
-		getActivity().sendBroadcast(intent);
-		
-		//give time for the account to be created
-		synchronized (mSolo) {
-			try {
-				mSolo.wait(2000);
-			} catch (InterruptedException e) {
-				e.printStackTrace();
-			}
-		}
-				
+        intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
+        intent.setType(Account.MIME_TYPE);
+
+        AccountCreator accountCreator = new AccountCreator();
+        accountCreator.onReceive(mAcccountsActivity, intent);
+
 		Account account = mAccountsDbAdapter.getAccount("intent-account");
 		assertNotNull(account);
 		assertEquals("Intent Account", account.getName());
@@ -296,30 +278,29 @@ public void testIntentAccountCreation(){
 		assertEquals("EUR", account.getCurrency().getCurrencyCode());
 	}
 	
-	
-	protected void tearDown() throws Exception {
-        mSolo.finishOpenedActivities();
-        mSolo.waitForEmptyActivityStack(20000);
-        mSolo.sleep(5000);
+	@After
+	public void tearDown() throws Exception {
+        mAcccountsActivity.finish();
+        Thread.sleep(1000);
         mAccountsDbAdapter.deleteAllRecords();
-
 		super.tearDown();
 	}
 
     /**
-     * Finds a view in the action bar and clicks it, since the native methods are not supported by ActionBarSherlock
-     * @param id
-     */
-    private void clickSherlockActionBarItem(int id){
-        View view = mSolo.getView(id);
-        mSolo.clickOnView(view);
-    }
-
-    /**
      * Refresh the account list fragment
      */
     private void refreshAccountsList(){
-        Fragment fragment = getActivity().getCurrentAccountListFragment();
-        ((AccountsListFragment)fragment).refresh();
+        try {
+            runTestOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    Fragment fragment = mAcccountsActivity.getCurrentAccountListFragment();
+                    ((AccountsListFragment) fragment).refresh();
+                }
+            });
+        } catch (Throwable throwable) {
+            System.err.println("Failed to refresh fragment");
+        }
+
     }
 }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 09829260..a176ecbc 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -80,8 +80,8 @@ public ExportTransactionsTest() {
 	public void setUp() throws Exception {
 		super.setUp();
 		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
-		mAcccountsActivity = getActivity();
 		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
+		mAcccountsActivity = getActivity();
 
         mDbHelper = new DatabaseHelper(getActivity());
         try {
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java b/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
index 4e45f66c..3418f879 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
@@ -29,7 +29,7 @@
  * Custom test runner
  */
 public class GnucashAndroidTestRunner extends AndroidJUnitRunner{
-    private static final String TAG = "Primer";
+    private static final String TAG = "GncAndroidTestRunner";
     private static final String ANIMATION_PERMISSION = "android.permission.SET_ANIMATION_SCALE";
     private static final float DISABLED = 0.0f;
     private static final float DEFAULT = 1.0f;
@@ -65,9 +65,9 @@ private void enableAnimation(){
         int permStatus = getContext().checkCallingOrSelfPermission(ANIMATION_PERMISSION);
         if (permStatus == PackageManager.PERMISSION_GRANTED) {
             if (reflectivelyDisableAnimation(DEFAULT)) {
-                Log.i(TAG, "All animations disabled.");
+                Log.i(TAG, "All animations enabled.");
             } else {
-                Log.i(TAG, "Could not disable animations.");
+                Log.i(TAG, "Could not enable animations.");
             }
         } else {
             Log.i(TAG, "Cannot disable animations due to lack of permission.");
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 22e888bd..09bfbf0b 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -16,6 +16,7 @@
 
 package org.gnucash.android.test.ui;
 
+import android.app.Fragment;
 import android.content.ContentValues;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -23,40 +24,64 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
-import android.support.v4.app.Fragment;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-import android.view.View;
-import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.ToggleButton;
-import com.robotium.solo.Solo;
+
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.model.*;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
+import org.gnucash.android.receivers.TransactionRecorder;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
-import org.gnucash.android.ui.util.TransactionTypeToggleButton;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
 import java.text.NumberFormat;
-import java.text.ParseException;
 import java.util.Currency;
 import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 
+import static android.support.test.espresso.Espresso.onData;
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.longClick;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
+import static android.support.test.espresso.matcher.ViewMatchers.hasDescendant;
+import static android.support.test.espresso.matcher.ViewMatchers.isChecked;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isNotChecked;
+import static android.support.test.espresso.matcher.ViewMatchers.withChild;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withSpinnerText;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.android.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.not;
 
-
+@RunWith(AndroidJUnit4.class)
 public class TransactionsActivityTest extends
 		ActivityInstrumentationTestCase2<TransactionsActivity> {
     private static final String TRANSACTION_AMOUNT = "9.99";
@@ -68,7 +93,6 @@
     private static final String TRANSFER_ACCOUNT_UID    = "transfer_account";
     public static final String CURRENCY_CODE = "USD";
 
-    private Solo mSolo;
 	private Transaction mTransaction;
 	private long mTransactionTimeMillis;
 
@@ -77,13 +101,20 @@
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
-	
+	private TransactionsActivity mTransactionsActivity;
+
 	public TransactionsActivityTest() {
 		super(TransactionsActivity.class);
 	}
 	
 	@Override
-	protected void setUp() throws Exception {
+	@Before
+	public void setUp() throws Exception {
+		super.setUp();
+		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
+
+
         mDbHelper = new DatabaseHelper(getInstrumentation().getTargetContext());
         try {
             mDb = mDbHelper.getWritableDatabase();
@@ -94,8 +125,9 @@ protected void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+		mAccountsDbAdapter.deleteAllRecords();
 
-        mTransactionTimeMillis = System.currentTimeMillis();
+		mTransactionTimeMillis = System.currentTimeMillis();
         Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
         account.setCurrency(Currency.getInstance(CURRENCY_CODE));
@@ -124,187 +156,142 @@ protected void setUp() throws Exception {
         Intent intent = new Intent(Intent.ACTION_VIEW);
         intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
         setActivityIntent(intent);
-
-        mSolo = new Solo(getInstrumentation(), getActivity());
+		mTransactionsActivity = getActivity();
 	}
 
-    /**
-     * Finds a view in the action bar and clicks it, since the native methods are not supported by ActionBarSherlock
-     * @param id
-     */
-    private void clickSherlockActionBarItem(int id){
-        View view = mSolo.getView(id);
-        mSolo.clickOnView(view);
-    }
 
 	private void validateTransactionListDisplayed(){
-		Fragment fragment = getActivity().getCurrentPagerFragment();
-		assertNotNull(fragment);
+		onView(withId(R.id.fragment_transaction_list)).check(matches(isDisplayed()));
+//		Fragment fragment = getActivity().getCurrentPagerFragment();
+//		assertThat(fragment).isNotNull();
+//		assertThat(fragment).isInstanceOf(TransactionsListFragment.class);
 	}
 	
 	private int getTransactionCount(){
         return mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID).size();
 	}
 	
-	private void validateNewTransactionFields(){
-		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(new Date(mTransactionTimeMillis));
-		TextView dateView = (TextView) mSolo.getView(R.id.input_date);
-		String actualValue = dateView.getText().toString();
-		assertEquals(expectedValue, actualValue);
-		
-		expectedValue = TransactionFormFragment.TIME_FORMATTER.format(new Date(mTransactionTimeMillis));
-		TextView timeView = (TextView) mSolo.getView(R.id.input_time);
-		actualValue = timeView.getText().toString();
-		assertEquals(expectedValue, actualValue);
+	private void validateTimeInput(long timeMillis){
+		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(new Date(timeMillis));
+		onView(withId(R.id.input_date)).check(matches(withText(expectedValue)));
 		
+		expectedValue = TransactionFormFragment.TIME_FORMATTER.format(new Date(timeMillis));
+		onView(withId(R.id.input_time)).check(matches(withText(expectedValue)));
 	}
-	
+
+	@Test
 	public void testAddTransactionShouldRequireAmount(){
-		mSolo.waitForText(TRANSACTION_NAME);
 		validateTransactionListDisplayed();
 		
 		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText("Description");
-		mSolo.enterText(0, "Lunch");
+        onView(withId(R.id.menu_add_transaction)).perform(click());
+
+		onView(withId(R.id.input_transaction_name))
+				.check(matches(isDisplayed()))
+				.perform(typeText("Lunch"));
 
-        clickSherlockActionBarItem(R.id.menu_save);
-        String toastAmountRequired = getActivity().getString(R.string.toast_transanction_amount_required);
-		boolean toastFound = mSolo.waitForText(toastAmountRequired);
-        assertTrue(toastFound);
+		onView(withId(R.id.menu_save)).perform(click());
+
+		assertToastDisplayed(R.string.toast_transanction_amount_required);
 
 		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
-		assertEquals(beforeCount, afterCount);
+		assertThat(afterCount).isEqualTo(beforeCount);
 
-        mSolo.goBack();
 	}
-	
+
+	/**
+	 * Checks that a specific toast message is displayed
+	 * @param toastString
+	 */
+	private void assertToastDisplayed(int toastString) {
+		onView(withText(toastString))
+				.inRoot(withDecorView(not(is(getActivity().getWindow().getDecorView()))))
+				.check(matches(isDisplayed()));
+	}
+
+
 	private void validateEditTransactionFields(Transaction transaction){
-		
-		String name = ((EditText)mSolo.getView(R.id.input_transaction_name)).getText().toString();
-		assertEquals(transaction.getDescription(), name);
-
-        EditText amountEdittext = (EditText) mSolo.getView(R.id.input_transaction_amount);
-		String amountString = amountEdittext.getText().toString();
-		NumberFormat formatter = NumberFormat.getInstance();
-		try {
-			amountString = formatter.parse(amountString).toString();
-		} catch (ParseException e) {
-			e.printStackTrace();
-		}
-		Money amount = new Money(amountString, Currency.getInstance(Locale.getDefault()).getCurrencyCode());
-		assertEquals(transaction.getBalance(DUMMY_ACCOUNT_UID), amount);
 
-        EditText notesEditText = (EditText) mSolo.getView(R.id.input_description);
-		String transactionNotes = notesEditText.getText().toString();
-		assertEquals(transaction.getNote(), transactionNotes);
-		
-		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
-		TextView dateView = (TextView) mSolo.getView(R.id.input_date);
-		String actualValue = dateView.getText().toString(); //mSolo.getText(6).getText().toString();
-		assertEquals(expectedValue, actualValue);
-		
-		expectedValue = TransactionFormFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
-		TextView timeView = (TextView) mSolo.getView(R.id.input_time);
-		actualValue = timeView.getText().toString();// mSolo.getText(7).getText().toString();
-		assertEquals(expectedValue, actualValue);
+		onView(withId(R.id.input_transaction_name)).check(matches(withText(transaction.getDescription())));
+
+		Money balance = transaction.getBalance(DUMMY_ACCOUNT_UID);
+		NumberFormat formatter = NumberFormat.getInstance(Locale.getDefault());
+		formatter.setMinimumFractionDigits(2);
+		formatter.setMaximumFractionDigits(2);
+		onView(withId(R.id.input_transaction_amount)).check(matches(withText(formatter.format(balance.asDouble()))));
+
+		onView(withId(R.id.input_description)).check(matches(withText(transaction.getNote())));
+
+		validateTimeInput(transaction.getTimeMillis());
 	}
 
     //TODO: Add test for only one account but with double-entry enabled
-
+	@Test
 	public void testAddTransaction(){
         setDoubleEntryEnabled(true);
-        mSolo.waitForText(TRANSACTION_NAME);
-
+		setDefaultTransactionType(TransactionType.DEBIT);
         validateTransactionListDisplayed();
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-
-        mSolo.waitForText("New transaction");
-
-        //validate creation of transaction
-        mSolo.enterText(0, "Lunch");
-        mSolo.enterText(1, "899");
-		mSolo.sleep(2000);
-        TransactionTypeToggleButton typeToggleButton = (TransactionTypeToggleButton) mSolo.getView(R.id.input_transaction_type);
-		assertThat(typeToggleButton).isVisible();
-		if (!typeToggleButton.isChecked()){
-			mSolo.clickOnButton(0);
-		}
-		mSolo.sleep(1000);
-        //check that the amount is correctly converted in the input field
-        String value = mSolo.getEditText(1).getText().toString();
-        String expectedValue = NumberFormat.getInstance().format(-8.99);
-        assertThat(value).isEqualTo(expectedValue);
 
-        int transactionsCount = getTransactionCount();
+		onView(withId(R.id.menu_add_transaction)).perform(click());
 
-        mSolo.clickOnActionBarItem(R.id.menu_save);
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Lunch"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("899"));
+		onView(withId(R.id.input_transaction_type))
+				.check(matches(allOf(isDisplayed(), withText(R.string.label_receive))))
+				.perform(click())
+				.check(matches(withText(R.string.label_spend)));
 
-        mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-        validateTransactionListDisplayed();
+		String expectedValue = NumberFormat.getInstance().format(-8.99);
+		onView(withId(R.id.input_transaction_amount)).check(matches(withText(expectedValue)));
 
-        mSolo.sleep(1000);
+        int transactionsCount = getTransactionCount();
+		onView(withId(R.id.menu_save)).perform(click());
+
+        validateTransactionListDisplayed();
 
         List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
         assertThat(transactions).hasSize(2);
         Transaction transaction = transactions.get(0);
 		assertThat(transaction.getSplits()).hasSize(2);
 
-        Split split = transaction.getSplits(TRANSFER_ACCOUNT_UID).get(0);
-        //the main account is a CASH account which has debit normal type, so a negative value means actually CREDIT
-        //so the other side of the split has to be a debit
-        assertEquals(TransactionType.DEBIT, split.getType());
-        assertEquals(transactionsCount + 1, getTransactionCount());
-
+        assertThat(getTransactionCount()).isEqualTo(transactionsCount + 1);
     }
 
-	public void testEditTransaction(){		
-		//open transactions
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
+	@Test
+	public void testEditTransaction(){
 		validateTransactionListDisplayed();
-		
-		mSolo.clickOnText(TRANSACTION_NAME);
-		mSolo.waitForText("Note");
+
+		onView(withText(TRANSACTION_NAME)).perform(click());
 		
 		validateEditTransactionFields(mTransaction);
-				
-		mSolo.enterText(0, "Pasta");
-		clickSherlockActionBarItem(R.id.menu_save);
 
-		//if we see the text, then it was successfully created
-		mSolo.waitForText("Pasta");
+		onView(withId(R.id.input_transaction_name)).perform(clearText(), typeText("Pasta"));
+		onView(withId(R.id.menu_save)).perform(click());
 	}
 
 	/**
 	 * Tests that transactions splits are automatically balanced and an imbalance account will be created
 	 * This test case assumes that single entry is used
 	 */
+	@Test
 	public void testAutoBalanceTransactions(){
 		setDoubleEntryEnabled(false);
 		mTransactionsDbAdapter.deleteAllRecords();
-		mSolo.sleep(1000);
+
 		assertThat(mTransactionsDbAdapter.getTotalTransactionsCount()).isEqualTo(0);
 		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNull();
 
-		mSolo.waitForText(TRANSACTION_NAME);
-
 		validateTransactionListDisplayed();
-		clickSherlockActionBarItem(R.id.menu_add_transaction);
-
-		mSolo.waitForText("New transaction");
-
-		//validate creation of transaction
-		mSolo.enterText(0, "Autobalance");
-		mSolo.enterText(1, "499");
-
-		View typeToogleButton = mSolo.getView(R.id.btn_open_splits);
-		assertThat(typeToogleButton).isNotVisible(); //no double entry so no split editor
+		onView(withId(R.id.menu_add_transaction)).perform(click());
+		onView(withId(R.id.fragment_transaction_form)).check(matches(isDisplayed()));
 
-		mSolo.clickOnActionBarItem(R.id.menu_save);
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Autobalance"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("499"));
 
-		mSolo.sleep(2000);
+		//no double entry so no split editor
+		onView(withId(R.id.btn_open_splits)).check(matches(not(isDisplayed())));
+		onView(withId(R.id.menu_save)).perform(click());
 
 		assertThat(mTransactionsDbAdapter.getTotalTransactionsCount()).isEqualTo(1);
 		Transaction transaction = mTransactionsDbAdapter.getAllTransactions().get(0);
@@ -322,52 +309,38 @@ public void testAutoBalanceTransactions(){
 	 * Tests input of transaction splits using the split editor.
 	 * Also validates that the imbalance from the split editor will be automatically added as a split
 	 */
+	@Test
 	public void testSplitEditor(){
 		setDoubleEntryEnabled(true);
+		setDefaultTransactionType(TransactionType.DEBIT);
 		mTransactionsDbAdapter.deleteAllRecords();
-		mSolo.sleep(1000);
+
 		//when we start there should be no imbalance account in the system
 		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNull();
 
-		mSolo.waitForText(TRANSACTION_NAME);
-
 		validateTransactionListDisplayed();
-		clickSherlockActionBarItem(R.id.menu_add_transaction);
-
-		mSolo.waitForText("New transaction");
+		onView(withId(R.id.menu_add_transaction)).perform(click());
 
-		//validate creation of transaction
-		mSolo.enterText(0, "Autobalance");
-		mSolo.enterText(1, "4499");
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Autobalance"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("499"));
 
-		mSolo.clickOnButton(1);
-		mSolo.waitForDialogToOpen();
+		onView(withId(R.id.btn_open_splits)).perform(click());
 
-		LinearLayout splitListView = (LinearLayout) mSolo.getView(R.id.split_list_layout);
-		assertThat(splitListView).hasChildCount(1);
+		onView(withId(R.id.split_list_layout)).check(matches(allOf(isDisplayed(), hasDescendant(withId(R.id.input_split_amount)))));
 
 		//TODO: enable this assert when we fix the sign of amounts in split editor
-		//assertThat(mSolo.getEditText(0).getText().toString()).isEqualTo("44.99");
-		View addSplit = mSolo.getView(R.id.btn_add_split);
-		mSolo.clickOnView(addSplit);
-		mSolo.sleep(5000);
-		assertThat(splitListView).hasChildCount(2);
 
-		mSolo.enterText(0, "4000");
+		onView(withId(R.id.btn_add_split)).perform(click());
 
-		TextView imbalanceTextView = (TextView) mSolo.getView(R.id.imbalance_textview);
-		assertThat(imbalanceTextView).hasText("-4.99 $");
+		onView(allOf(withId(R.id.input_split_amount), withText(""))).perform(typeText("400"));
+		onView(withId(R.id.imbalance_textview)).check(matches(withText("-0.99 $")));
 
-		mSolo.clickOnView(mSolo.getView(R.id.btn_save));
-		mSolo.waitForDialogToClose();
-		mSolo.sleep(3000);
+		onView(withId(R.id.btn_save)).perform(click());
 		//after we use split editor, we should not be able to toggle the transaction type
-		assertThat(mSolo.getView(R.id.input_transaction_type)).isNotVisible();
+		onView(withId(R.id.input_transaction_type)).check(matches(not(isDisplayed())));
 
-		mSolo.clickOnActionBarItem(R.id.menu_save);
-
-		mSolo.sleep(3000);
+		onView(withId(R.id.menu_save)).perform(click());
 
 		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactions();
 		assertThat(transactions).hasSize(1);
@@ -387,9 +360,8 @@ public void testSplitEditor(){
 		assertThat(imbalanceSplits).hasSize(1);
 
 		Split split = imbalanceSplits.get(0);
-		assertThat(split.getAmount().toPlainString()).isEqualTo("4.99");
+		assertThat(split.getAmount().toPlainString()).isEqualTo("0.99");
 		assertThat(split.getType()).isEqualTo(TransactionType.CREDIT);
-
 	}
 
 
@@ -400,37 +372,35 @@ private void setDoubleEntryEnabled(boolean enabled){
         editor.commit();
     }
 
+	@Test
 	public void testDefaultTransactionType(){
-		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
-		Editor editor = prefs.edit();
-		editor.putString(getActivity().getString(R.string.key_default_transaction_type), "CREDIT");
-		editor.commit();
+		setDefaultTransactionType(TransactionType.CREDIT);
 
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText(getActivity().getString(R.string.label_transaction_name));
-		
-		ToggleButton transactionTypeButton = (ToggleButton) mSolo.getButton(0);
-		assertThat(transactionTypeButton).isChecked();
+		onView(withId(R.id.menu_add_transaction)).perform(click());
+		onView(withId(R.id.input_transaction_type)).check(matches(allOf(isChecked(), withText(R.string.label_spend))));
+		onView(withId(R.id.menu_cancel)).perform(click());
+
+		//now validate the other case
 
-		clickSherlockActionBarItem(R.id.menu_cancel);
+		setDefaultTransactionType(TransactionType.DEBIT);
 
-		//now validate the other case 
-		editor = prefs.edit();
-		editor.putString(getActivity().getString(R.string.key_default_transaction_type), "DEBIT");
+		onView(withId(R.id.menu_add_transaction)).perform(click());
+		onView(withId(R.id.input_transaction_type)).check(matches(allOf(not(isChecked()), withText(R.string.label_receive))));
+		onView(withId(R.id.menu_cancel)).perform(click());
+	}
+
+	private void setDefaultTransactionType(TransactionType type) {
+		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		Editor editor = prefs.edit();
+		editor.putString(getActivity().getString(R.string.key_default_transaction_type), type.name());
 		editor.commit();
-		
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText(getActivity().getString(R.string.label_transaction_name));
-		
-		transactionTypeButton = (ToggleButton) mSolo.getButton(0);
-		assertThat(transactionTypeButton).isNotChecked();
-        clickSherlockActionBarItem(R.id.menu_cancel);
-        mSolo.goBack();
 	}
 
-	public void testChildAccountsShouldUseParentTransferAccountSetting(){
+	//FIXME: Improve on this test
+	public void childAccountsShouldUseParentTransferAccountSetting(){
 		Account transferAccount = new Account("New Transfer Acct");
 		mAccountsDbAdapter.addAccount(transferAccount);
+		mAccountsDbAdapter.addAccount(new Account("Higher account"));
 
 		Account childAccount = new Account("Child Account");
 		childAccount.setParentUID(DUMMY_ACCOUNT_UID);
@@ -439,43 +409,35 @@ public void testChildAccountsShouldUseParentTransferAccountSetting(){
 		contentValues.put(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, transferAccount.getUID());
 		mAccountsDbAdapter.updateRecord(DUMMY_ACCOUNT_UID, contentValues);
 
-
-		Intent intent = new Intent(mSolo.getCurrentActivity(), TransactionsActivity.class);
+		Intent intent = new Intent(mTransactionsActivity, TransactionsActivity.class);
+		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 		intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
 		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, childAccount.getUID());
-		getActivity().startActivity(intent);
-		mSolo.waitForActivity(TransactionsActivity.class);
-		mSolo.sleep(3000);
-		Spinner spinner = (Spinner) mSolo.getView(R.id.input_double_entry_accounts_spinner);
-		long transferAccountID = mAccountsDbAdapter.getID(transferAccount.getUID());
-		assertThat(transferAccountID).isEqualTo(spinner.getSelectedItemId());
+
+		mTransactionsActivity.startActivity(intent);
+
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("1299"));
+		clickOnView(R.id.menu_save);
+
+		//if our transfer account has a transaction then the right transfer account was used
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(transferAccount.getUID());
+		assertThat(transactions).hasSize(1);
 	}
 
+	@Test
 	public void testToggleTransactionType(){
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
 		validateTransactionListDisplayed();
-		mSolo.clickOnText(TRANSACTION_NAME);
-		mSolo.waitForText(getActivity().getString(R.string.title_edit_transaction));
-		
-		validateEditTransactionFields(mTransaction);
+		onView(withText(TRANSACTION_NAME)).perform(click());
 
-        TransactionTypeToggleButton toggleButton = (TransactionTypeToggleButton) mSolo.getView(R.id.input_transaction_type);
-        assertThat(toggleButton).isNotNull();
-		assertThat(toggleButton).isVisible();
-		assertThat(toggleButton).hasText(R.string.label_receive);
+		validateEditTransactionFields(mTransaction);
 
-        mSolo.clickOnView(toggleButton);
-		mSolo.sleep(2000);
+		onView(withId(R.id.input_transaction_type)).check(matches(
+				allOf(isDisplayed(), withText(R.string.label_receive))
+		)).perform(click()).check(matches(withText(R.string.label_spend)));
 
-		assertThat(toggleButton).hasText(R.string.label_spend);
-		EditText amountView = (EditText) mSolo.getView(R.id.input_transaction_amount);
-		String amountString = amountView.getText().toString();
-		assertThat(amountString).startsWith("-");
-		assertThat("-9.99").isEqualTo(amountString);
+		onView(withId(R.id.input_transaction_amount)).check(matches(withText("-9.99")));
 
-		mSolo.clickOnActionBarItem(R.id.menu_save);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		onView(withId(R.id.menu_save)).perform(click());
 		
 		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
 		assertThat(transactions).hasSize(1);
@@ -483,46 +445,40 @@ public void testToggleTransactionType(){
 		assertThat(trx.getSplits()).hasSize(2); //auto-balancing of splits
 		assertTrue(trx.getBalance(DUMMY_ACCOUNT_UID).isNegative());
 	}
-	
+
+	@Test
 	public void testOpenTransactionEditShouldNotModifyTransaction(){
-			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-			
-			validateTransactionListDisplayed();
-			
-			mSolo.clickOnText(TRANSACTION_NAME);
-			mSolo.waitForText("Edit transaction");
-			
-			validateNewTransactionFields();
-			
-			clickSherlockActionBarItem(R.id.menu_save);
-
-			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-			
-			List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
-			
-			assertEquals(1, transactions.size());
-			Transaction trx = transactions.get(0);
-			assertEquals(TRANSACTION_NAME, trx.getDescription());
-			Date expectedDate = new Date(mTransactionTimeMillis);
-			Date trxDate = new Date(trx.getTimeMillis());
-			assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
-					TransactionFormFragment.DATE_FORMATTER.format(trxDate));
-			assertEquals(TransactionFormFragment.TIME_FORMATTER.format(expectedDate),
-					TransactionFormFragment.TIME_FORMATTER.format(trxDate));
-		}
+		validateTransactionListDisplayed();
 
-	public void testDeleteTransaction(){
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		mSolo.clickOnCheckBox(0);		
-		clickSherlockActionBarItem(R.id.context_menu_delete);
+		onView(withText(TRANSACTION_NAME)).perform(click());
+
+		validateTimeInput(mTransactionTimeMillis);
 
-		mSolo.sleep(500);
+		clickOnView(R.id.menu_save);
+
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+
+		assertThat(transactions).hasSize(1);
+		Transaction trx = transactions.get(0);
+		assertEquals(TRANSACTION_NAME, trx.getDescription());
+		Date expectedDate = new Date(mTransactionTimeMillis);
+		Date trxDate = new Date(trx.getTimeMillis());
+		assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
+				TransactionFormFragment.DATE_FORMATTER.format(trxDate));
+		assertEquals(TransactionFormFragment.TIME_FORMATTER.format(expectedDate),
+				TransactionFormFragment.TIME_FORMATTER.format(trxDate));
+	}
+
+	@Test
+	public void testDeleteTransaction(){
+		onView(withId(R.id.primary_text)).perform(longClick());
+		clickOnView(R.id.context_menu_delete);
 
 		long id = mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
 		assertEquals(0, mTransactionsDbAdapter.getTransactionsCount(id));
 	}
-	
+
+	@Test
 	public void testBulkMoveTransactions(){
         String targetAccountName = "Target";
         Account account = new Account(targetAccountName);
@@ -531,34 +487,22 @@ public void testBulkMoveTransactions(){
 		
 		int beforeOriginCount = mAccountsDbAdapter.getAccount(DUMMY_ACCOUNT_UID).getTransactionCount();
 		
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
 		validateTransactionListDisplayed();
-		
-		mSolo.clickOnCheckBox(0);
-		mSolo.waitForText(getActivity().getString(R.string.title_selected, 1));
-		//initiate bulk move
-		clickSherlockActionBarItem(R.id.context_menu_move_transactions);
-		
-		mSolo.waitForDialogToClose();
-		
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-        mSolo.sleep(500);
-		mSolo.clickOnText(targetAccountName);
-		mSolo.clickOnButton(1);
-//		mSolo.clickOnText(getActivity().getString(R.string.btn_move));
-		
-		mSolo.waitForDialogToClose();
-		
+
+		clickOnView(R.id.checkbox_transaction);
+		clickOnView(R.id.context_menu_move_transactions);
+
+		clickOnView(R.id.btn_save);
+
 		int targetCount = mAccountsDbAdapter.getAccount(account.getUID()).getTransactionCount();
-		assertEquals(1, targetCount);
+		assertThat(targetCount).isEqualTo(1);
 		
 		int afterOriginCount = mAccountsDbAdapter.getAccount(DUMMY_ACCOUNT_UID).getTransactionCount();
-		assertEquals(beforeOriginCount-1, afterOriginCount);
+		assertThat(afterOriginCount).isEqualTo(beforeOriginCount-1);
 	}
 
 	//TODO: add normal transaction recording
+	@Test
 	public void testLegacyIntentTransactionRecording(){
 		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
 		Intent transactionIntent = new Intent(Intent.ACTION_INSERT);
@@ -569,9 +513,7 @@ public void testLegacyIntentTransactionRecording(){
 		transactionIntent.putExtra(Transaction.EXTRA_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
 		transactionIntent.putExtra(Transaction.EXTRA_TRANSACTION_TYPE, TransactionType.DEBIT.name());
 
-		getActivity().sendBroadcast(transactionIntent);
-
-        mSolo.sleep(2000);
+		new TransactionRecorder().onReceive(mTransactionsActivity, transactionIntent);
 
 		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
 		
@@ -587,12 +529,19 @@ public void testLegacyIntentTransactionRecording(){
 		}
 	}
 
+	/**
+	 * Simple wrapper for clicking on views with espresso
+	 * @param viewId View resource ID
+	 */
+	private void clickOnView(int viewId){
+		onView(withId(viewId)).perform(click());
+	}
+
 	@Override
-	protected void tearDown() throws Exception {
-		mSolo.finishOpenedActivities();
-		mSolo.waitForEmptyActivityStack(20000);
-		mSolo.sleep(5000);
-		mAccountsDbAdapter.deleteAllRecords();
+	@After
+	public void tearDown() throws Exception {
+		mTransactionsActivity.finish();
+		Thread.sleep(1000);
 		super.tearDown();
 	}
 }
diff --git a/app/src/debug/AndroidManifest.xml b/app/src/debug/AndroidManifest.xml
index a51540cb..1400ea47 100644
--- a/app/src/debug/AndroidManifest.xml
+++ b/app/src/debug/AndroidManifest.xml
@@ -15,8 +15,9 @@
  limitations under the License.
 -->
 
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.gnucash.android">
-
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+   <!-- Disable animations on debug builds so that the animations do not interfere with Espresso
+         tests.  Adding this permission to the manifest is not sufficient - you must also grant the
+         permission over adb! -->
     <uses-permission android:name="android.permission.SET_ANIMATION_SCALE" />
 </manifest>
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 466e6d75..180bb3ea 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -241,7 +241,7 @@ public void onCreate(Bundle savedInstanceState) {
 		View view = inflater.inflate(R.layout.fragment_new_account, container, false);
 		getSherlockActivity().getSupportActionBar().setTitle(R.string.title_add_account);
 		mCurrencySpinner = (Spinner) view.findViewById(R.id.input_currency_spinner);
-		mNameEditText = (EditText) view.findViewById(R.id.edit_text_account_name);
+		mNameEditText = (EditText) view.findViewById(R.id.input_account_name);
 		//mNameEditText.requestFocus();
 
         mAccountTypeSpinner = (Spinner) view.findViewById(R.id.input_account_type_spinner);
@@ -264,7 +264,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
 
-		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 			
 			@Override
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 3f36d318..015cdaa5 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -29,7 +29,6 @@
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
 import android.support.v4.content.Loader;
 import android.support.v4.widget.SimpleCursorAdapter;
-import android.text.format.DateFormat;
 import android.text.format.DateUtils;
 import android.util.Log;
 import android.util.SparseBooleanArray;
@@ -218,7 +217,7 @@ public void onResume() {
 	public void onListItemClick(ListView l, View v, int position, long id) {
 		super.onListItemClick(l, v, position, id);
 		if (mInEditMode){
-			CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox_parent_account);
+			CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox_transaction);
 			checkbox.setChecked(!checkbox.isChecked());
 			return;
 		}
@@ -228,7 +227,7 @@ public void onListItemClick(ListView l, View v, int position, long id) {
 	@Override
 	public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long id) {
 		getListView().setItemChecked(position, true);
-		CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+		CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
 		checkbox.setChecked(true);
 		startActionMode();
 		return true;
@@ -365,7 +364,7 @@ public TransactionsCursorAdapter(Context context, int layout, Cursor c,
 		public View getView(int position, View convertView, ViewGroup parent) {
 			final View view = super.getView(position, convertView, parent);
 			final int itemPosition = position;
-			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
             final TextView secondaryText = (TextView) view.findViewById(R.id.secondary_text);
 
             //TODO: Revisit this if we ever change the application theme
diff --git a/app/src/main/res/layout/fragment_accounts_list.xml b/app/src/main/res/layout/fragment_accounts_list.xml
index 6fe184ec..05c73ab9 100644
--- a/app/src/main/res/layout/fragment_accounts_list.xml
+++ b/app/src/main/res/layout/fragment_accounts_list.xml
@@ -16,6 +16,7 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/fragment_account_list"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical" >
diff --git a/app/src/main/res/layout/fragment_new_account.xml b/app/src/main/res/layout/fragment_new_account.xml
index ca13889f..4d228761 100644
--- a/app/src/main/res/layout/fragment_new_account.xml
+++ b/app/src/main/res/layout/fragment_new_account.xml
@@ -18,14 +18,14 @@
 <ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
             android:layout_width="match_parent"
             android:layout_height="match_parent">
-    <LinearLayout
+    <LinearLayout android:id="@+id/fragment_account_form"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:padding="@dimen/dialog_padding"
             android:orientation="vertical" >
 
         <EditText
-                android:id="@+id/edit_text_account_name"
+                android:id="@+id/input_account_name"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
                 android:layout_marginBottom="@dimen/form_row_bottom_margin"
@@ -97,7 +97,7 @@
                       android:layout_marginBottom="@dimen/form_row_bottom_margin"
                       android:orientation="horizontal" >
 
-            <CheckBox android:id="@+id/checkbox_parent_account"
+            <CheckBox android:id="@+id/checkbox_transaction"
                       android:layout_width="wrap_content"
                       android:layout_height="wrap_content"
                       android:focusable="false"        />
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index 07f1842b..9c191c99 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -19,7 +19,7 @@
     android:layout_width="match_parent"
 	android:layout_height="match_parent">
 	
-	<LinearLayout 
+	<LinearLayout android:id="@+id/fragment_transaction_form"
 	    android:layout_width="match_parent"
 	    android:layout_height="wrap_content"
 	    android:padding="@dimen/dialog_padding"
diff --git a/app/src/main/res/layout/fragment_transactions_list.xml b/app/src/main/res/layout/fragment_transactions_list.xml
index ab57f318..e5f6677f 100644
--- a/app/src/main/res/layout/fragment_transactions_list.xml
+++ b/app/src/main/res/layout/fragment_transactions_list.xml
@@ -16,6 +16,7 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/fragment_transaction_list"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical" >
diff --git a/app/src/main/res/layout/list_item_transaction.xml b/app/src/main/res/layout/list_item_transaction.xml
index 0c944694..d21cbc6c 100644
--- a/app/src/main/res/layout/list_item_transaction.xml
+++ b/app/src/main/res/layout/list_item_transaction.xml
@@ -37,7 +37,7 @@
             android:orientation="horizontal">
 
         <CheckBox
-                android:id="@+id/checkbox_parent_account"
+                android:id="@+id/checkbox_transaction"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:focusable="false"

From d83a7949d6154081c8e7114f738681724fea7866 Mon Sep 17 00:00:00 2001
From: lxb <leixb@agilean.cn>
Date: Thu, 21 May 2015 14:03:36 +0800
Subject: [PATCH 03/10] Keep zh_CN translated(report,side bar,perference).

---
 app/src/main/res/values-zh/strings.xml | 140 ++++++++++++++++-----------------
 1 file changed, 70 insertions(+), 70 deletions(-)

diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index 7ccfacb6..f627ad52 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -15,6 +15,7 @@
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
+
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="title_add_account"></string>
     <string name="title_edit_account"></string>
@@ -28,6 +29,7 @@
     <string name="label_passcode"></string>
     <string name="toast_wrong_passcode"></string>
     <string name="toast_passcode_set"></string>
+    <string name="label_confirm_passcode"></string>
     <string name="toast_invalid_passcode_confirmation"></string>
     <string name="label_transaction_name"></string>
     <string name="label_transaction_amount"></string>
@@ -79,8 +81,8 @@
     <string name="label_permission_create_accounts"></string>
     <string name="label_permission_group">GnuCash</string>
     <string name="description_permission_group">GnuCash</string>
-    <string name="label_permission_record_transaction">Record transactions in GnuCash</string>
-    <string name="label_permission_create_account">Create accounts in GnuCash</string>
+    <string name="label_permission_record_transaction"></string>
+    <string name="label_permission_create_account"></string>
     <string name="label_display_account"></string>
     <string name="btn_create_accounts"></string>
     <string name="title_default_accounts"></string>
@@ -228,8 +230,8 @@
         <item>Sucre</item>
         <item>Sudanese Pound</item>
         <item>Surinam Dollar</item>
-        <item>Swedish Krona</item>
-        <item>Swiss Franc</item>
+        <item></item>
+        <item></item>
         <item>Syrian Pound</item>
         <item>Taka</item>
         <item>Tala</item>
@@ -265,7 +267,7 @@
     <string name="title_build_version"></string>
     <string name="title_license"></string>
     <string name="summary_licence_details">Apache License v2.0</string>
-    <string name="title_general_prefs"></string>
+    <string name="title_general_prefs"></string>
     <string name="label_widget_configuration"></string>
     <string name="toast_no_transactions_to_export"></string>
     <string name="header_passcode_settings"></string>
@@ -306,15 +308,16 @@
     <string name="summary_xml_ofx_header">GnuCash</string>
     <string name="title_whats_new"></string>
     <string name="whats_new">
-        - Visual reports (Bar/Pie/line charts) \n
-        - Scheduled backups of (QIF, OFX, and XML)\n
-        - Backup/Export to DropBox and Google Drive\n
-        - Better recurrence options for scheduled transactions\n
-        - Navigation drawer for easier access to options\n
-        - Multiple bug fixes and improvements\n
-	</string>
+        -  () \n
+        -  (QIF, OFX, and XML)\n
+        - DropBoxGoogle Drive\n
+        - \n
+        - \n
+        - \n
+    </string>
     <string name="label_dismiss"></string>
     <string name="toast_transanction_amount_required"></string>
+    <string name="toast_error_edit_multi_currency_transaction"></string>
     <string name="menu_import_accounts">GnuCash</string>
     <string name="btn_import_accounts"></string>
     <string name="toast_error_importing_accounts">  GnuCash </string>
@@ -384,7 +387,7 @@
     <string name="title_all_accounts"></string>
     <string name="summary_create_default_accounts"></string>
     <string name="title_create_default_accounts"></string>
-    <string name="msg_confirm_create_default_accounts_setting">All existing accounts and transactions on the device will be deleted.\n\nAre you sure you want to proceed?</string>
+    <string name="msg_confirm_create_default_accounts_setting">\n\n</string>
     <string name="menu_scheduled_transactions"></string>
     <string name="msg_confirm_create_default_accounts_first_run">GnuCash Android \n12\
     </string>
@@ -413,92 +416,89 @@
     <string name="summary_save_opening_balances"></string>
     <string name="title_save_opening_balances"></string>
     <string name="export_warning_ofx">OFX </string>
-    <string name="export_warning_qif">Generates separate QIF files per currency</string>
+    <string name="export_warning_qif">QIF</string>
     <string name="title_transaction_splits"></string>
-    <string name="label_imbalance">Imbalance:</string>
+    <string name="label_imbalance"></string>
     <string name="btn_add_split"></string>
     <string name="menu_title_favorite"></string>
     <string name="drawer_open">Navigation drawer opened</string>
     <string name="drawer_close">Navigation drawer closed</string>
     <string name="title_reports"></string>
     <string name="title_pie_chart"></string>
-    <string name="title_line_chart">Line Chart</string>
-    <string name="title_bar_chart">Bar Chart</string>
+    <string name="title_line_chart"></string>
+    <string name="title_bar_chart"></string>
+    <string name="title_report_prefs"></string>
+    <string name="label_report_currency"></string>
+    <string name="title_use_account_color"></string>
+    <string name="summary_use_account_color"></string>
+    <string name="header_report_settings"></string>
     <string name="menu_order_by_size"></string>
     <string name="menu_toggle_legend"></string>
     <string name="menu_toggle_labels"></string>
-    <string name="menu_toggle_percentage_mode">Toggle percentage</string>
-    <string name="menu_toggle_average_lines">Toggle average lines</string>
-    <string name="menu_group_smaller_slices">Group Smaller Slices</string>
+    <string name="menu_toggle_percentage_mode"></string>
+    <string name="menu_toggle_average_lines"></string>
+    <string name="menu_group_smaller_slices"></string>
     <string name="label_chart_no_data"></string>
-    <string name="label_chart_overall"></string>
+    <string name="label_chart_overall"></string>
     <string name="label_chart_total"></string>
-    <string name="label_other_slice">Other</string>
+    <string name="label_other_slice"></string>
     <string name="toast_chart_percentage_mode_total">The percentage of selected value calculated from the total amount</string>
     <string name="toast_chart_percentage_mode_current_bar">The percentage of selected value calculated from the current stacked bar amount</string>
     <string name="label_save_template"></string>
     <string name="label_delete_account_transactions_description"> \n</string>
     <string name="label_delete_account_subaccounts_description"> \n</string>
     <string name="label_delete_transactions"></string>
-    <string name="toast_disable_double_entry_to_save_transaction">Create and specify a transfer account OR disable double-entry in settings to save the transaction</string>
+    <string name="toast_disable_double_entry_to_save_transaction"></string>
     <string name="label_tap_to_create_schedule"></string>
-    <string name="title_restore_backup">Restore Backup</string>
-    <string name="header_backup_and_export_settings">Backup &amp; export</string>
+    <string name="title_restore_backup"></string>
+    <string name="header_backup_and_export_settings"></string>
     <string name="title_dropbox_sync_preference">DropBox Sync</string>
-    <string name="title_backup_preference_category">Backup</string>
-    <string name="summary_dropbox_sync">Enable to sync to DropBox</string>
+    <string name="title_backup_preference_category"></string>
+    <string name="summary_dropbox_sync">DropBox</string>
     <string name="title_select_gnucash_xml_file">Select GnuCash XML file</string>
-    <string name="title_backup_prefs">Backup Preferences</string>
-    <string name="title_create_backup_pref">Create Backup</string>
-    <string name="summary_create_backup_pref">By default backups are saved to the SDCARD</string>
-    <string name="summary_restore_backup_pref">Select a specific backup to restore</string>
-    <string name="toast_backup_successful">Backup successful</string>
-    <string name="toast_backup_failed">Backup failed</string>
-    <string name="export_warning_xml">Exports all accounts and transactions</string>
+    <string name="title_backup_prefs"></string>
+    <string name="title_create_backup_pref"></string>
+    <string name="summary_create_backup_pref">SD</string>
+    <string name="summary_restore_backup_pref"></string>
+    <string name="toast_backup_successful"></string>
+    <string name="toast_backup_failed"></string>
+    <string name="export_warning_xml"></string>
     <string name="title_google_drive_sync_pref">Google Drive Sync</string>
-    <string name="summary_google_drive_sync">Enable to sync to Google Drive</string>
-    <string name="toast_install_file_manager">Install a file manager to select files</string>
-    <string name="title_select_backup_to_restore">Select backup to restore</string>
-    <string name="title_report_prefs">Report Preferences</string>
-    <string name="nav_menu_favorites">Favorites</string>
-    <string name="nav_menu_open">Open...</string>
-    <string name="nav_menu_reports">Reports</string>
-    <string name="nav_menu_scheduled_transactions">Scheduled Transactions</string>
-    <string name="nav_menu_export">Export...</string>
-    <string name="nav_menu_settings">Settings</string>
+    <string name="summary_google_drive_sync">Google Drive</string>
+    <string name="toast_install_file_manager"></string>
+    <string name="title_select_backup_to_restore"></string>
+    <string name="nav_menu_favorites"></string>
+    <string name="nav_menu_open">...</string>
+    <string name="nav_menu_reports"></string>
+    <string name="nav_menu_scheduled_transactions"></string>
+    <string name="nav_menu_export">...</string>
+    <string name="nav_menu_settings"></string>
     <plurals name="label_every_x_days">
-        <item quantity="one">Daily</item>
-        <item quantity="other">Every %d days</item>
+        <item quantity="one"></item>
+        <item quantity="other"> %d </item>
     </plurals>
     <plurals name="label_every_x_weeks">
-        <item quantity="one">Weekly</item>
-        <item quantity="other">Every %d weeks</item>
+        <item quantity="one"></item>
+        <item quantity="other"> %d </item>
     </plurals>
     <plurals name="label_every_x_months">
-        <item quantity="one">Monthly</item>
-        <item quantity="other">Every %d months</item>
+        <item quantity="one"></item>
+        <item quantity="other"> %d </item>
     </plurals>
     <plurals name="label_every_x_years">
-        <item quantity="one">Yearly</item>
-        <item quantity="other">Every %d years</item>
+        <item quantity="one"></item>
+        <item quantity="other"> %d </item>
     </plurals>
-    <string name="toast_error_edit_multi_currency_transaction">Multi-currency transactions cannot be modified</string>
-    <string name="title_enable_crashlytics">Enable Crash Logging</string>
+    <string name="title_enable_crashlytics"></string>
     <string name="msg_enable_crashlytics">Enable to send information about malfunctions to the developers for improvement (recommended).
-No user-identifiable information will be collected as part of this process!
-    </string>
-    <string name="label_export_format">Export Format</string>
-    <string name="toast_backup_folder_not_found">Backup folder cannot be found. Make sure the SD Card is mounted!</string>
-    <string name="header_report_settings">Reports</string>
-    <string name="label_report_currency">Select currency</string>
-    <string name="title_use_account_color">Account color in reports</string>
-    <string name="summary_use_account_color">Use account color in the pie chart</string>
-    <string name="label_confirm_passcode"></string>
-    <string name="label_new_passcode">Enter your new passcode</string>
-    <string name="label_old_passcode">Enter your old passcode</string>
-    <string name="nav_menu_scheduled_backups">Scheduled Exports</string>
-    <string name="title_scheduled_exports">Scheduled Exports</string>
-    <string name="label_no_scheduled_exports_to_display">No scheduled exports to display</string>
-    <string name="title_create_export_schedule">Create export schedule</string>
-    <string name="toast_exported_to">Exported to: %1$s</string>
+No user-identifiable information will be collected as part of this process!</string>
+    <string name="label_export_format"></string>
+    <string name="toast_backup_folder_not_found">SD</string>
+    <string name="label_old_passcode"></string>
+    <string name="label_new_passcode"></string>
+    <string name="nav_menu_scheduled_backups"></string>
+    <string name="title_scheduled_exports"></string>
+    <string name="label_no_scheduled_exports_to_display"></string>
+    <string name="title_create_export_schedule"></string>
+    <string name="toast_exported_to">%1$s</string>
 </resources>

From 1adbfe3f02d6e03c15e871527c0734d116babece Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 21 May 2015 12:07:13 +0200
Subject: [PATCH 04/10] Fixed: disabling of animations during testing for beta
 and production builds

Added waiting time between tests
---
 app/build.gradle                                   |  4 +--
 .../android/test/ui/AccountsActivityTest.java      | 32 ++++++++++++----------
 .../android/test/ui/TransactionsActivityTest.java  |  4 +--
 app/src/debug/AndroidManifest.xml                  |  3 +-
 .../gnucash/android/db/TransactionsDbAdapter.java  |  2 +-
 5 files changed, 25 insertions(+), 20 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index d4dec1f4..28a49465 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -132,8 +132,8 @@ afterEvaluate {
         commandLine "$adb shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
     }
 
-    task grantAnimationPermissionProduction(type: Exec, dependsOn: ['installBetaDebug', 'installProductionDebug']){
-        commandLine "$adb shell pm grant $android.productFlavors.production.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+    task grantAnimationPermissionProduction(type: Exec, dependsOn: 'installProductionDebug'){
+        commandLine "$adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
     }
     // When launching individual tests from Android Studio, it seems that only the assemble tasks
     // get called directly, not the install* versions
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 605afa80..1757be19 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -96,7 +96,7 @@ public void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-		
+
 		Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
 		account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
@@ -246,16 +246,21 @@ public void testDeleteAccount() {
         transaction.addSplit(new Split(Money.getZeroInstance(), DUMMY_ACCOUNT_UID));
         mTransactionsDbAdapter.addTransaction(transaction);
 
-        onView(withId(R.id.primary_text)).perform(longClick());
+        onView(withText(DUMMY_ACCOUNT_NAME)).perform(longClick());
         onView(withId(R.id.context_menu_delete)).perform(click());
-        onView(withText(R.string.label_delete_sub_accounts)).perform(click());
+
+        //the account has no sub-accounts
+        onView(withId(R.id.accounts_options)).check(matches(not(isDisplayed())));
+        onView(withId(R.id.transactions_options)).check(matches(isDisplayed()));
+
+        onView(withText(R.string.label_delete_transactions)).perform(click());
         onView(withId(R.id.btn_save)).perform(click());
 
         //should throw expected exception
         mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
 
         List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
-        assertThat(transactions).hasSize(0);
+        assertThat(transactions).isEmpty();
     }
 
 	//TODO: Test import of account file
@@ -263,26 +268,25 @@ public void testDeleteAccount() {
     @Test
 	public void testIntentAccountCreation(){
 		Intent intent = new Intent(Intent.ACTION_INSERT);
-		intent.putExtra(Intent.EXTRA_TITLE, "Intent Account");
-		intent.putExtra(Intent.EXTRA_UID, "intent-account");
+        intent.putExtra(Intent.EXTRA_TITLE, "Intent Account");
+        intent.putExtra(Intent.EXTRA_UID, "intent-account");
         intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
         intent.setType(Account.MIME_TYPE);
 
-        AccountCreator accountCreator = new AccountCreator();
-        accountCreator.onReceive(mAcccountsActivity, intent);
+        new AccountCreator().onReceive(mAcccountsActivity, intent);
 
 		Account account = mAccountsDbAdapter.getAccount("intent-account");
-		assertNotNull(account);
-		assertEquals("Intent Account", account.getName());
-		assertEquals("intent-account", account.getUID());
-		assertEquals("EUR", account.getCurrency().getCurrencyCode());
+		assertThat(account).isNotNull();
+        assertThat(account.getName()).isEqualTo("Intent Account");
+        assertThat(account.getUID()).isEqualTo("intent-account");
+        assertThat(account.getCurrency().getCurrencyCode()).isEqualTo("EUR");
 	}
 	
 	@After
 	public void tearDown() throws Exception {
         mAcccountsActivity.finish();
-        Thread.sleep(1000);
-        mAccountsDbAdapter.deleteAllRecords();
+        Thread.sleep(2000);
+        mAccountsDbAdapter.deleteAllRecords(); //clear the data
 		super.tearDown();
 	}
 
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 09bfbf0b..5b467776 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -125,7 +125,6 @@ public void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-		mAccountsDbAdapter.deleteAllRecords();
 
 		mTransactionTimeMillis = System.currentTimeMillis();
         Account account = new Account(DUMMY_ACCOUNT_NAME);
@@ -541,7 +540,8 @@ private void clickOnView(int viewId){
 	@After
 	public void tearDown() throws Exception {
 		mTransactionsActivity.finish();
-		Thread.sleep(1000);
+		Thread.sleep(2000);
+		mAccountsDbAdapter.deleteAllRecords();
 		super.tearDown();
 	}
 }
diff --git a/app/src/debug/AndroidManifest.xml b/app/src/debug/AndroidManifest.xml
index 1400ea47..33c40643 100644
--- a/app/src/debug/AndroidManifest.xml
+++ b/app/src/debug/AndroidManifest.xml
@@ -15,7 +15,8 @@
  limitations under the License.
 -->
 
-<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.gnucash.android">
    <!-- Disable animations on debug builds so that the animations do not interfere with Espresso
          tests.  Adding this permission to the manifest is not sufficient - you must also grant the
          permission over adb! -->
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 81aedaed..af7381a8 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -301,7 +301,7 @@ public Cursor fetchAllTransactionsForAccount(long accountID){
 	 */
     public List<Transaction> getAllTransactionsForAccount(String accountUID){
 		Cursor c = fetchAllTransactionsForAccount(accountUID);
-		ArrayList<Transaction> transactionsList = new ArrayList<Transaction>();
+		ArrayList<Transaction> transactionsList = new ArrayList<>();
         try {
             while (c.moveToNext()) {
                 transactionsList.add(buildTransactionInstance(c));

From da27b31c568bed31f7b6e10eb6db2b50326df929 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 21 May 2015 13:36:37 +0200
Subject: [PATCH 05/10] UI test optimizations

Tests currently pass on actual devices but some fail on emulators
---
 .../android/test/ui/AccountsActivityTest.java      | 26 +++++++++-------------
 .../android/test/ui/TransactionsActivityTest.java  |  2 +-
 .../android/ui/account/AccountFormFragment.java    |  2 +-
 app/src/main/res/layout/fragment_new_account.xml   |  2 +-
 4 files changed, 14 insertions(+), 18 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 1757be19..13d2cfcf 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -23,6 +23,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
 import android.support.test.InstrumentationRegistry;
+import android.support.test.espresso.Espresso;
 import android.support.test.runner.AndroidJUnit4;
 import android.support.v4.app.Fragment;
 import android.test.ActivityInstrumentationTestCase2;
@@ -52,6 +53,7 @@
 import static android.support.test.espresso.action.ViewActions.clearText;
 import static android.support.test.espresso.action.ViewActions.click;
 import static android.support.test.espresso.action.ViewActions.longClick;
+import static android.support.test.espresso.action.ViewActions.scrollTo;
 import static android.support.test.espresso.action.ViewActions.typeText;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
@@ -165,19 +167,18 @@ public void testSearchAccounts(){
 	public void testCreateAccount(){
         onView(withId(R.id.menu_add_account)).check(matches(isDisplayed())).perform(click());
 
-        onView(withId(R.id.checkbox_transaction))
-//                .check(matches(allOf(isDisplayed(), isNotChecked())))
-                .perform(click());
-
         String NEW_ACCOUNT_NAME = "A New Account";
         onView(withId(R.id.input_account_name)).perform(typeText(NEW_ACCOUNT_NAME));
+        Espresso.closeSoftKeyboard();
         onView(withId(R.id.checkbox_placeholder_account))
                 .check(matches(isNotChecked()))
                 .perform(click());
-        onView(withId(R.id.menu_save)).perform(click());
 
-        //check displayed
-//        onView(withId(android.R.id.list)).check(matches(hasDescendant(withText(NEW_ACCOUNT_NAME))));
+        onView(withId(R.id.checkbox_parent_account)).perform(scrollTo())
+                .check(matches(allOf(isDisplayed(), isNotChecked())))
+                .perform(click());
+
+        onView(withId(R.id.menu_save)).perform(click());
 
 		List<Account> accounts = mAccountsDbAdapter.getAllAccounts();
         assertThat(accounts).isNotNull();
@@ -196,13 +197,12 @@ public void testChangeParentAccount() {
         mAccountsDbAdapter.addAccount(account);
 
         refreshAccountsList();
-//        onView(withId(android.R.id.list))
-//                .check(matches(allOf(isDisplayed(), hasDescendant(withText(accountName)))));
 
         onView(withText(accountName)).perform(longClick());
         onView(withId(R.id.context_menu_edit_accounts)).perform(click());
         onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
-        onView(withId(R.id.checkbox_transaction))
+        Espresso.closeSoftKeyboard();
+        onView(withId(R.id.checkbox_parent_account)).perform(scrollTo())
                 .check(matches(isNotChecked()))
                 .perform(click());
 
@@ -228,10 +228,6 @@ public void testEditAccount(){
 
         onView(withId(R.id.menu_save)).perform(click());
 
-        //test refresh
-//        onView(withId(android.R.id.empty))
-//                .check(matches(not(isDisplayed())));
-
 		List<Account> accounts = mAccountsDbAdapter.getAllAccounts();
 		Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
 
@@ -285,7 +281,7 @@ public void testIntentAccountCreation(){
 	@After
 	public void tearDown() throws Exception {
         mAcccountsActivity.finish();
-        Thread.sleep(2000);
+        Thread.sleep(1000);
         mAccountsDbAdapter.deleteAllRecords(); //clear the data
 		super.tearDown();
 	}
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 5b467776..b3368436 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -540,7 +540,7 @@ private void clickOnView(int viewId){
 	@After
 	public void tearDown() throws Exception {
 		mTransactionsActivity.finish();
-		Thread.sleep(2000);
+		Thread.sleep(1000);
 		mAccountsDbAdapter.deleteAllRecords();
 		super.tearDown();
 	}
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 180bb3ea..31494c5f 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -264,7 +264,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
 
-		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
+		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 			
 			@Override
diff --git a/app/src/main/res/layout/fragment_new_account.xml b/app/src/main/res/layout/fragment_new_account.xml
index 4d228761..9de2f923 100644
--- a/app/src/main/res/layout/fragment_new_account.xml
+++ b/app/src/main/res/layout/fragment_new_account.xml
@@ -97,7 +97,7 @@
                       android:layout_marginBottom="@dimen/form_row_bottom_margin"
                       android:orientation="horizontal" >
 
-            <CheckBox android:id="@+id/checkbox_transaction"
+            <CheckBox android:id="@+id/checkbox_parent_account"
                       android:layout_width="wrap_content"
                       android:layout_height="wrap_content"
                       android:focusable="false"        />

From 710c2a95c813b4f4b14f3daac7dafe9864597e78 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sat, 23 May 2015 23:55:17 +0800
Subject: [PATCH 06/10] remove static, diffenrent adapter should have different
 tag

---
 app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index f10c315d..e63ccb95 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -42,7 +42,7 @@
 	/**
 	 * Tag for logging
 	 */
-	protected static String LOG_TAG = "DatabaseAdapter";
+	protected String LOG_TAG = "DatabaseAdapter";
 
 	/**
 	 * SQLite database

From ba4438ce24bd34171029b364986129bca81715c9 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 May 2015 00:01:21 +0800
Subject: [PATCH 07/10] ROOT account's parent should be null

---
 app/src/main/java/org/gnucash/android/db/DatabaseHelper.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 412f0486..d7ed8750 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -451,7 +451,7 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
             //assign a root account to all accounts which had null as parent (top-level accounts)
             String rootAccountUID = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
             contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, rootAccountUID);
-            db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL", null);
+            db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL AND " + AccountEntry.COLUMN_TYPE + " != ?", new String[]{"ROOT"});
 
             Log.i(LOG_TAG, "Migrating existing recurring transactions");
             Cursor cursor = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);

From 2fc46fa31c34efccd40aeb7d13619c5785917e31 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 May 2015 00:02:21 +0800
Subject: [PATCH 08/10] rewrite autobalancing in migration

---
 .../org/gnucash/android/db/DatabaseHelper.java     | 67 +++++++++++++++++-----
 1 file changed, 52 insertions(+), 15 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index d7ed8750..39e2e6de 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -28,15 +28,15 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
-import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
-import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 
 import java.io.File;
+import java.math.BigDecimal;
 import java.sql.Timestamp;
+import java.util.Currency;
+import java.util.UUID;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
@@ -485,20 +485,57 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 
             //auto-balance existing splits
             Log.i(LOG_TAG, "Auto-balancing existing transaction splits");
-            cursor = transactionsDbAdapter.fetchAllRecords();
-            while (cursor.moveToNext()){
-                Transaction transaction = transactionsDbAdapter.buildTransactionInstance(cursor);
-                if (transaction.isTemplate())
-                    continue;
-                Money imbalance = transaction.getImbalance();
-                if (!imbalance.isAmountZero()){
-                    Split split = new Split(imbalance.negate(),
-                            accountsDbAdapter.getOrCreateImbalanceAccountUID(imbalance.getCurrency()));
-                    split.setTransactionUID(transaction.getUID());
-                    splitsDbAdapter.addSplit(split);
+//            cursor = transactionsDbAdapter.fetchAllRecords();
+//            while (cursor.moveToNext()){
+//                Transaction transaction = transactionsDbAdapter.buildTransactionInstance(cursor);
+//                if (transaction.isTemplate())
+//                    continue;
+//                Money imbalance = transaction.getImbalance();
+//                if (!imbalance.isAmountZero()){
+//                    Split split = new Split(imbalance.negate(),
+//                            accountsDbAdapter.getOrCreateImbalanceAccountUID(imbalance.getCurrency()));
+//                    split.setTransactionUID(transaction.getUID());
+//                    splitsDbAdapter.addSplit(split);
+//                }
+//            }
+//            cursor.close();
+            cursor = db.query(
+                    "trans_extra_info , " + TransactionEntry.TABLE_NAME + " ON "
+                            + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
+                            " = trans_extra_info.trans_acct_t_uid",
+                    new String[]{
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
+                            TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
+                            "trans_extra_info.trans_acct_balance AS trans_acct_balance",
+                            "trans_extra_info.trans_currency_count AS trans_currency_count",
+                    }, "trans_acct_balance != 0 AND trans_currency_count = 1 AND " +
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " == 0", null, null, null, null);
+            try {
+                String timestamp = (new Timestamp(System.currentTimeMillis())).toString();
+                while (cursor.moveToNext()){
+                    double imbalance = cursor.getDouble(cursor.getColumnIndexOrThrow("trans_acct_balance"));
+                    BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
+                    if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
+                        String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                        String TransactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
+                        contentValues.clear();
+                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, UUID.randomUUID().toString().replaceAll("-", ""));
+                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                        contentValues.put(SplitEntry.COLUMN_AMOUNT,     decimalImbalance.abs().toPlainString());
+                        contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) > 0 ? "DEBIT" : "CREDIT");
+                        contentValues.put(SplitEntry.COLUMN_MEMO,       "");
+                        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, accountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode)));
+                        contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, TransactionUID);
+                        db.insert(SplitEntry.TABLE_NAME, null, contentValues);
+                        contentValues.clear();
+                        contentValues.put(TransactionEntry.COLUMN_MODIFIED_AT, timestamp);
+                        db.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry.COLUMN_UID + " == ?",
+                                new String[]{TransactionUID});
+                    }
                 }
+            } finally {
+                cursor.close();
             }
-            cursor.close();
 
             Log.i(LOG_TAG, "Dropping temporary migration tables");
             db.execSQL("DROP TABLE " + SplitEntry.TABLE_NAME + "_bak");

From aba96cb4d8acb998bb0ccbca72aac3b6cbfb0c5b Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 May 2015 14:05:55 +0800
Subject: [PATCH 09/10] remove use of adapters

---
 .../org/gnucash/android/db/DatabaseHelper.java     | 147 ++++++++++++++++-----
 .../org/gnucash/android/db/MigrationHelper.java    |   6 +
 2 files changed, 122 insertions(+), 31 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 39e2e6de..a4648673 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -26,17 +26,16 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
+import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.model.AccountType;
-import org.gnucash.android.model.ScheduledAction;
+import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Transaction;
 
 import java.io.File;
 import java.math.BigDecimal;
 import java.sql.Timestamp;
-import java.util.Currency;
-import java.util.UUID;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 import static org.gnucash.android.db.DatabaseSchema.ScheduledActionEntry;
@@ -439,36 +438,84 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 
             //================================ END TABLE MIGRATIONS ================================
 
+            // String timestamp to be used for all new created entities in migration
+            String timestamp = (new Timestamp(System.currentTimeMillis())).toString();
 
-
-            ScheduledActionDbAdapter scheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
-            SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(db);
-            TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(db, splitsDbAdapter);
-            AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db,transactionsDbAdapter);
+            //ScheduledActionDbAdapter scheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
+            //SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(db);
+            //TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(db, splitsDbAdapter);
+            //AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(db,transactionsDbAdapter);
 
             Log.i(LOG_TAG, "Creating default root account if none exists");
             ContentValues contentValues = new ContentValues();
-            //assign a root account to all accounts which had null as parent (top-level accounts)
-            String rootAccountUID = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
+            //assign a root account to all accounts which had null as parent except ROOT (top-level accounts)
+            String rootAccountUID;
+            Cursor cursor = db.query(AccountEntry.TABLE_NAME,
+                    new String[]{AccountEntry.COLUMN_UID},
+                    AccountEntry.COLUMN_TYPE + "= ?",
+                    new String[]{AccountType.ROOT.name()}, null, null, null);
+            try {
+                if (cursor.moveToFirst()) {
+                    rootAccountUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+                }
+                else
+                {
+                    rootAccountUID = MigrationHelper.generateUUID();
+                    contentValues.clear();
+                    contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, rootAccountUID);
+                    contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                    contentValues.put(AccountEntry.COLUMN_NAME,         "ROOT");
+                    contentValues.put(AccountEntry.COLUMN_TYPE,         "ROOT");
+                    contentValues.put(AccountEntry.COLUMN_CURRENCY,     Money.DEFAULT_CURRENCY_CODE);
+                    contentValues.put(AccountEntry.COLUMN_PLACEHOLDER,  0);
+                    contentValues.put(AccountEntry.COLUMN_HIDDEN,       1);
+                    contentValues.putNull(AccountEntry.COLUMN_COLOR_CODE);
+                    contentValues.put(AccountEntry.COLUMN_FAVORITE, 0);
+                    contentValues.put(AccountEntry.COLUMN_FULL_NAME,    " ");
+                    contentValues.putNull(AccountEntry.COLUMN_PARENT_ACCOUNT_UID);
+                    contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
+                    db.insert(AccountEntry.TABLE_NAME, null, contentValues);
+                }
+            } finally {
+                cursor.close();
+            }
+            //String rootAccountUID = accountsDbAdapter.getOrCreateGnuCashRootAccountUID();
+            contentValues.clear();
             contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, rootAccountUID);
             db.update(AccountEntry.TABLE_NAME, contentValues, AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " IS NULL AND " + AccountEntry.COLUMN_TYPE + " != ?", new String[]{"ROOT"});
 
             Log.i(LOG_TAG, "Migrating existing recurring transactions");
-            Cursor cursor = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);
+            cursor = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);
+            long lastRun = System.currentTimeMillis();
             while (cursor.moveToNext()){
                 contentValues.clear();
-                Timestamp timestamp = new Timestamp(cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
-                contentValues.put(TransactionEntry.COLUMN_CREATED_AT, timestamp.toString());
+                Timestamp timestampT = new Timestamp(cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_TIMESTAMP)));
+                contentValues.put(TransactionEntry.COLUMN_CREATED_AT, timestampT.toString());
                 long transactionId = cursor.getLong(cursor.getColumnIndexOrThrow(TransactionEntry._ID));
                 db.update(TransactionEntry.TABLE_NAME, contentValues, TransactionEntry._ID + "=" + transactionId, null);
 
-                ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
-                scheduledAction.setActionUID(cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
-                long period = cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period"));
-                scheduledAction.setPeriod(period);
-                scheduledAction.setStartTime(timestamp.getTime()); //the start time is when the transaction was created
-                scheduledAction.setLastRun(System.currentTimeMillis()); //prevent this from being executed at the end of migration
-                scheduledActionDbAdapter.addScheduledAction(scheduledAction);
+                //ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.TRANSACTION);
+                //scheduledAction.setActionUID(cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
+                //long period = cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period"));
+                //scheduledAction.setPeriod(period);
+                //scheduledAction.setStartTime(timestampT.getTime()); //the start time is when the transaction was created
+                //scheduledAction.setLastRun(System.currentTimeMillis()); //prevent this from being executed at the end of migration
+
+                contentValues.clear();
+                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, MigrationHelper.generateUUID());
+                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID)));
+                contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    cursor.getLong(cursor.getColumnIndexOrThrow("recurrence_period")));
+                contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, timestampT.getTime());
+                contentValues.put(ScheduledActionEntry.COLUMN_END_TIME, 0);
+                contentValues.put(ScheduledActionEntry.COLUMN_LAST_RUN, lastRun);
+                contentValues.put(ScheduledActionEntry.COLUMN_TYPE, "TRANSACTION");
+                contentValues.put(ScheduledActionEntry.COLUMN_TAG, "");
+                contentValues.put(ScheduledActionEntry.COLUMN_ENABLED, 1);
+                contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, 0);
+                contentValues.put(ScheduledActionEntry.COLUMN_EXECUTION_COUNT, 0);
+                //scheduledActionDbAdapter.addScheduledAction(scheduledAction);
+                db.insert(ScheduledActionEntry.TABLE_NAME, null, contentValues);
 
                 //build intent for recurring transactions in the database
                 Intent intent = new Intent(Intent.ACTION_INSERT);
@@ -500,31 +547,69 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 //            }
 //            cursor.close();
             cursor = db.query(
-                    "trans_extra_info , " + TransactionEntry.TABLE_NAME + " ON "
-                            + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID +
-                            " = trans_extra_info.trans_acct_t_uid",
+                    TransactionEntry.TABLE_NAME + " , " + SplitEntry.TABLE_NAME + " ON "
+                            + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + "=" + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TRANSACTION_UID
+                            + " , " + AccountEntry.TABLE_NAME + " ON "
+                            + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID + "=" + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID,
                     new String[]{
                             TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID + " AS trans_uid",
                             TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_CURRENCY + " AS trans_currency",
-                            "trans_extra_info.trans_acct_balance AS trans_acct_balance",
-                            "trans_extra_info.trans_currency_count AS trans_currency_count",
-                    }, "trans_acct_balance != 0 AND trans_currency_count = 1 AND " +
-                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " == 0", null, null, null, null);
+                            "TOTAL ( CASE WHEN " +
+                                    SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_TYPE + " = 'DEBIT' THEN " +
+                                    SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " ELSE - " +
+                                    SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_AMOUNT + " END ) AS trans_acct_balance",
+                            "COUNT ( DISTINCT " +
+                                    AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_CURRENCY +
+                                    " ) AS trans_currency_count"
+                    },
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_TEMPLATE + " == 0",
+                    null,
+                    TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_UID,
+                    "trans_acct_balance != 0 AND trans_currency_count = 1",
+                    null);
             try {
-                String timestamp = (new Timestamp(System.currentTimeMillis())).toString();
                 while (cursor.moveToNext()){
                     double imbalance = cursor.getDouble(cursor.getColumnIndexOrThrow("trans_acct_balance"));
                     BigDecimal decimalImbalance = BigDecimal.valueOf(imbalance).setScale(2, BigDecimal.ROUND_HALF_UP);
                     if (decimalImbalance.compareTo(BigDecimal.ZERO) != 0) {
                         String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("trans_currency"));
+                        String imbalanceAccountName = GnuCashApplication.getAppContext().getString(R.string.imbalance_account_name) + "-" + currencyCode;
+                        String imbalanceAccountUID;
+                        Cursor c = db.query(AccountEntry.TABLE_NAME, new String[]{AccountEntry.COLUMN_UID},
+                                AccountEntry.COLUMN_FULL_NAME + "= ?", new String[]{imbalanceAccountName},
+                                null, null, null);
+                        try {
+                            if (c.moveToFirst()) {
+                                imbalanceAccountUID = c.getString(c.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+                            }
+                            else {
+                                imbalanceAccountUID = MigrationHelper.generateUUID();
+                                contentValues.clear();
+                                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, imbalanceAccountUID);
+                                contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
+                                contentValues.put(AccountEntry.COLUMN_NAME,         imbalanceAccountName);
+                                contentValues.put(AccountEntry.COLUMN_TYPE,         "BANK");
+                                contentValues.put(AccountEntry.COLUMN_CURRENCY,     currencyCode);
+                                contentValues.put(AccountEntry.COLUMN_PLACEHOLDER,  0);
+                                contentValues.put(AccountEntry.COLUMN_HIDDEN,       GnuCashApplication.isDoubleEntryEnabled() ? 0 : 1);
+                                contentValues.putNull(AccountEntry.COLUMN_COLOR_CODE);
+                                contentValues.put(AccountEntry.COLUMN_FAVORITE, 0);
+                                contentValues.put(AccountEntry.COLUMN_FULL_NAME,    imbalanceAccountName);
+                                contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, rootAccountUID);
+                                contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
+                                db.insert(AccountEntry.TABLE_NAME, null, contentValues);
+                            }
+                        } finally {
+                            c.close();
+                        }
                         String TransactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
                         contentValues.clear();
-                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, UUID.randomUUID().toString().replaceAll("-", ""));
+                        contentValues.put(DatabaseSchema.CommonColumns.COLUMN_UID, MigrationHelper.generateUUID());
                         contentValues.put(DatabaseSchema.CommonColumns.COLUMN_CREATED_AT, timestamp);
                         contentValues.put(SplitEntry.COLUMN_AMOUNT,     decimalImbalance.abs().toPlainString());
-                        contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) > 0 ? "DEBIT" : "CREDIT");
+                        contentValues.put(SplitEntry.COLUMN_TYPE,       decimalImbalance.compareTo(BigDecimal.ZERO) < 0 ? "DEBIT" : "CREDIT");
                         contentValues.put(SplitEntry.COLUMN_MEMO,       "");
-                        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, accountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode)));
+                        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, imbalanceAccountUID);
                         contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, TransactionUID);
                         db.insert(SplitEntry.TABLE_NAME, null, contentValues);
                         contentValues.clear();
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 60cabf63..5b90ebca 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -33,6 +33,7 @@
 import java.io.IOError;
 import java.io.IOException;
 import java.nio.channels.FileChannel;
+import java.util.UUID;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
 
@@ -187,4 +188,9 @@ public void run() {
                 oldExportFolder.delete();
         }
     };
+
+    public static String generateUUID()
+    {
+        return UUID.randomUUID().toString().replaceAll("-", "");
+    }
 }

From b6643e8af1c5a5b89531e3085225e37768c5c04c Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sun, 24 May 2015 23:10:27 +0200
Subject: [PATCH 10/10] Updated version for beta 5 release

---
 app/build.gradle | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/build.gradle b/app/build.gradle
index 28a49465..a59dddab 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -6,7 +6,7 @@ apply plugin: 'crashlytics'
 def versionMajor = 1
 def versionMinor = 6
 def versionPatch = 0
-def versionBuild = 4
+def versionBuild = 5
 
 def buildTime() {
     def df = new SimpleDateFormat("yyyyMMdd")
