From 0415d936683f416a2bb778a949961defd0fbc12b Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 9 Aug 2016 10:37:12 +0200
Subject: [PATCH] Fixes #536 - bug where a new scheduled export is
 automatically created with every export

Ensure that wakelock gets released when scheduler service is destroyed, regardless of export outcome - #535
---
 .../org/gnucash/android/model/ScheduledAction.java |  4 +++-
 .../gnucash/android/service/SchedulerService.java  | 26 +++++++++++++++-------
 .../android/ui/export/ExportFormFragment.java      | 17 +++++++++-----
 3 files changed, 32 insertions(+), 15 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index e3a9a15d..55dc5656 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -15,6 +15,8 @@
  */
 package org.gnucash.android.model;
 
+import android.support.annotation.NonNull;
+
 import org.joda.time.LocalDate;
 
 import java.sql.Timestamp;
@@ -430,7 +432,7 @@ public Recurrence getRecurrence() {
      * <p>This also sets the start period of the recurrence object, if there is one</p>
      * @param recurrence {@link Recurrence} object
      */
-    public void setRecurrence(Recurrence recurrence) {
+    public void setRecurrence(@NonNull Recurrence recurrence) {
         this.mRecurrence = recurrence;
         //if we were parsing XML and parsed the start and end date from the scheduled action first,
         //then use those over the values which might be gotten from the recurrence
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index dd4802c3..39172109 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -51,20 +51,32 @@
     public static final String LOG_TAG = "SchedulerService";
 
     /**
-     * Creates an IntentService
-     *
+     * Wake lock for keeping the CPU on while export is in progress
      */
+    PowerManager.WakeLock mWakeLock;
+
     public SchedulerService() {
         super(LOG_TAG);
     }
 
     @Override
+    public void onCreate() {
+        super.onCreate();
+        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
+        mWakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, LOG_TAG);
+        mWakeLock.acquire();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (mWakeLock.isHeld())
+            mWakeLock.release(); //whenever this service is destroyed, release the lock
+    }
+
+    @Override
     protected void onHandleIntent(Intent intent) {
         Log.i(LOG_TAG, "Starting scheduled action service");
-        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
-        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
-                LOG_TAG);
-        wakeLock.acquire();
 
         ScheduledActionDbAdapter scheduledActionDbAdapter = GnuCashApplication.getScheduledEventDbAdapter();
         List<ScheduledAction> scheduledActions = scheduledActionDbAdapter.getAllEnabledScheduledActions();
@@ -87,8 +99,6 @@ protected void onHandleIntent(Intent intent) {
         }
 
         Log.i(LOG_TAG, "Completed service @ " + SystemClock.elapsedRealtime());
-
-        wakeLock.release();
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index ea09b0e8..5ff63942 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -273,15 +273,17 @@ private void startExport(){
 		exportParameters.setExportTarget(mExportTarget);
 		exportParameters.setDeleteTransactionsAfterExport(mDeleteAllCheckBox.isChecked());
 
-		ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.BACKUP);
-		scheduledAction.setRecurrence(RecurrenceParser.parse(mEventRecurrence));
-		scheduledAction.setTag(exportParameters.toCsv());
-		scheduledAction.setActionUID(BaseModel.generateUID());
-		ScheduledActionDbAdapter.getInstance().addRecord(scheduledAction, DatabaseAdapter.UpdateMethod.insert);
-
 		Log.i(TAG, "Commencing async export of transactions");
 		new ExportAsyncTask(getActivity()).execute(exportParameters);
 
+		if (mRecurrenceRule != null) {
+			ScheduledAction scheduledAction = new ScheduledAction(ScheduledAction.ActionType.BACKUP);
+			scheduledAction.setRecurrence(RecurrenceParser.parse(mEventRecurrence));
+			scheduledAction.setTag(exportParameters.toCsv());
+			scheduledAction.setActionUID(BaseModel.generateUID());
+			ScheduledActionDbAdapter.getInstance().addRecord(scheduledAction, DatabaseAdapter.UpdateMethod.insert);
+		}
+
 		int position = mDestinationSpinner.getSelectedItemPosition();
 		PreferenceManager.getDefaultSharedPreferences(getActivity())
 				.edit().putInt(getString(R.string.key_last_export_destination), position)
@@ -292,6 +294,9 @@ private void startExport(){
 		//getActivity().finish();
 	}
 
+	/**
+	 * Bind views to actions when initializing the export form
+	 */
 	private void bindViewListeners(){
 		// export destination bindings
 		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
