From 772861ba067a13b6ce42d08e79d49bb62c8f49b9 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Fri, 14 Aug 2015 16:10:18 +0200
Subject: [PATCH] Removed redundancies in code for adding models to the
 database

---
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 64 ++++++----------------
 .../gnucash/android/db/CommoditiesDbAdapter.java   | 31 +++--------
 .../org/gnucash/android/db/DatabaseAdapter.java    | 18 +-----
 .../org/gnucash/android/db/DatabaseHelper.java     |  2 +-
 .../org/gnucash/android/db/PricesDbAdapter.java    | 27 ++-------
 .../android/db/ScheduledActionDbAdapter.java       | 19 -------
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 24 ++------
 .../gnucash/android/db/TransactionsDbAdapter.java  | 25 ++-------
 .../android/ui/account/AccountsListFragment.java   |  3 +-
 .../ui/transaction/TransactionsListFragment.java   |  2 +-
 .../{db => ui/util}/CursorRecyclerAdapter.java     |  4 +-
 .../test/unit/db/AccountsDbAdapterTest.java        | 20 +++----
 .../android/test/unit/db/SplitsDbAdapterTest.java  |  4 +-
 .../test/unit/db/TransactionsDbAdapterTest.java    |  7 +--
 14 files changed, 58 insertions(+), 192 deletions(-)
 rename app/src/main/java/org/gnucash/android/{db => ui/util}/CursorRecyclerAdapter.java (99%)

diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 6e87d7cc..3a97e8ae 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -98,19 +98,18 @@ public static AccountsDbAdapter getInstance(){
 	 * @return Database row ID of the inserted account
 	 */
     @Override
-	public long addRecord(@NonNull Account account){
+	public void addRecord(@NonNull Account account){
         Log.d(LOG_TAG, "Replace account to db");
-        long rowId =  super.addRecord(account);
-
+        super.addRecord(account);
+        String accountUID = account.getUID();
 		//now add transactions if there are any
-		if (rowId > 0 && account.getAccountType() != AccountType.ROOT){
+		if (account.getAccountType() != AccountType.ROOT){
             //update the fully qualified account name
-            updateAccount(rowId, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(rowId));
+            updateRecord(accountUID, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(accountUID));
 			for (Transaction t : account.getTransactions()) {
 		        mTransactionsAdapter.addRecord(t);
 			}
 		}
-		return rowId;
 	}
 
     /**
@@ -143,6 +142,7 @@ protected SQLiteStatement compileReplaceStatement(Account account) {
             mReplaceStatement = mDb.compileStatement("REPLACE INTO " + AccountEntry.TABLE_NAME + " ( "
                     + AccountEntry.COLUMN_UID + " , "
                     + AccountEntry.COLUMN_NAME + " , "
+                    + AccountEntry.COLUMN_DESCRIPTION + " , "
                     + AccountEntry.COLUMN_TYPE + " , "
                     + AccountEntry.COLUMN_CURRENCY + " , "
                     + AccountEntry.COLUMN_COLOR_CODE + " , "
@@ -158,57 +158,27 @@ protected SQLiteStatement compileReplaceStatement(Account account) {
         mReplaceStatement.clearBindings();
         mReplaceStatement.bindString(1, account.getUID());
         mReplaceStatement.bindString(2, account.getName());
-        mReplaceStatement.bindString(3, account.getAccountType().name());
-        mReplaceStatement.bindString(4, account.getCurrency().getCurrencyCode());
+        mReplaceStatement.bindString(3, account.getDescription());
+        mReplaceStatement.bindString(4, account.getAccountType().name());
+        mReplaceStatement.bindString(5, account.getCurrency().getCurrencyCode());
         if (account.getColorHexCode() != null) {
-            mReplaceStatement.bindString(5, account.getColorHexCode());
+            mReplaceStatement.bindString(6, account.getColorHexCode());
         }
-        mReplaceStatement.bindLong(6, account.isFavorite() ? 1 : 0);
-        mReplaceStatement.bindString(7, account.getFullName());
-        mReplaceStatement.bindLong(8, account.isPlaceholderAccount() ? 1 : 0);
-        mReplaceStatement.bindString(9, account.getCreatedTimestamp().toString());
-        mReplaceStatement.bindLong(10, account.isHidden() ? 1 : 0);
+        mReplaceStatement.bindLong(7, account.isFavorite() ? 1 : 0);
+        mReplaceStatement.bindString(8, account.getFullName());
+        mReplaceStatement.bindLong(9, account.isPlaceholderAccount() ? 1 : 0);
+        mReplaceStatement.bindString(10, account.getCreatedTimestamp().toString());
+        mReplaceStatement.bindLong(11, account.isHidden() ? 1 : 0);
         if (account.getParentUID() != null) {
-            mReplaceStatement.bindString(11, account.getParentUID());
+            mReplaceStatement.bindString(12, account.getParentUID());
         }
         if (account.getDefaultTransferAccountUID() != null) {
-            mReplaceStatement.bindString(12, account.getDefaultTransferAccountUID());
+            mReplaceStatement.bindString(13, account.getDefaultTransferAccountUID());
         }
 
         return mReplaceStatement;
     }
 
-    @Override
-    protected ContentValues buildContentValues(@NonNull Account account) {
-        ContentValues contentValues = new ContentValues();
-        populateBaseModelAttributes(contentValues, account);
-        contentValues.put(AccountEntry.COLUMN_NAME,         account.getName());
-        contentValues.put(AccountEntry.COLUMN_TYPE,         account.getAccountType().name());
-        contentValues.put(AccountEntry.COLUMN_CURRENCY,     account.getCurrency().getCurrencyCode());
-        contentValues.put(AccountEntry.COLUMN_PLACEHOLDER,  account.isPlaceholderAccount() ? 1 : 0);
-        contentValues.put(AccountEntry.COLUMN_HIDDEN,       account.isHidden() ? 1 : 0);
-        if (account.getColorHexCode() != null) {
-            contentValues.put(AccountEntry.COLUMN_COLOR_CODE, account.getColorHexCode());
-        } else {
-            contentValues.putNull(AccountEntry.COLUMN_COLOR_CODE);
-        }
-        contentValues.put(AccountEntry.COLUMN_FAVORITE,     account.isFavorite() ? 1 : 0);
-        contentValues.put(AccountEntry.COLUMN_FULL_NAME,    account.getFullName());
-        String parentAccountUID = account.getParentUID();
-        if (parentAccountUID == null && account.getAccountType() != AccountType.ROOT) {
-            parentAccountUID = getOrCreateGnuCashRootAccountUID();
-        }
-        contentValues.put(AccountEntry.COLUMN_PARENT_ACCOUNT_UID, parentAccountUID);
-
-        if (account.getDefaultTransferAccountUID() != null) {
-            contentValues.put(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, account.getDefaultTransferAccountUID());
-        } else {
-            contentValues.putNull(AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID);
-        }
-
-        return contentValues;
-    }
-
     /**
      * Marks all transactions for a given account as exported
      * @param accountUID Unique ID of the record to be marked as exported
diff --git a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
index 9d1fbec9..57535a6d 100644
--- a/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/CommoditiesDbAdapter.java
@@ -29,32 +29,17 @@ public static CommoditiesDbAdapter getInstance(){
     }
 
     @Override
-    protected ContentValues buildContentValues(@NonNull Commodity commodity) {
-        ContentValues contentValues = new ContentValues();
-        populateBaseModelAttributes(contentValues, commodity);
-        contentValues.put(CommodityEntry.COLUMN_NAMESPACE, commodity.getNamespace().name());
-        contentValues.put(CommodityEntry.COLUMN_MNEMONIC,   commodity.getMnemonic());
-        contentValues.put(CommodityEntry.COLUMN_FULLNAME,   commodity.getFullname());
-        contentValues.put(CommodityEntry.COLUMN_LOCAL_SYMBOL, commodity.getLocalSymbol());
-        contentValues.put(CommodityEntry.COLUMN_CUSIP,      commodity.getCusip());
-        contentValues.put(CommodityEntry.COLUMN_FRACTION,   commodity.getFraction());
-        contentValues.put(CommodityEntry.COLUMN_QUOTE_FLAG, commodity.getQuoteFlag());
-
-        return contentValues;
-    }
-
-    @Override
     protected SQLiteStatement compileReplaceStatement(Commodity commodity) {
         if (mReplaceStatement == null) {
             mReplaceStatement = mDb.compileStatement("REPLACE INTO " + CommodityEntry.TABLE_NAME + " ( "
-                    + CommodityEntry.COLUMN_UID + " , "
-                    + CommodityEntry.COLUMN_FULLNAME + " , "
-                    + CommodityEntry.COLUMN_NAMESPACE + " , "
-                    + CommodityEntry.COLUMN_MNEMONIC + " , "
-                    + CommodityEntry.COLUMN_LOCAL_SYMBOL + " , "
-                    + CommodityEntry.COLUMN_CUSIP + " , "
-                    + CommodityEntry.COLUMN_FRACTION + " , "
-                    + CommodityEntry.COLUMN_QUOTE_FLAG + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? ) ");
+                    + CommodityEntry.COLUMN_UID             + " , "
+                    + CommodityEntry.COLUMN_FULLNAME        + " , "
+                    + CommodityEntry.COLUMN_NAMESPACE       + " , "
+                    + CommodityEntry.COLUMN_MNEMONIC        + " , "
+                    + CommodityEntry.COLUMN_LOCAL_SYMBOL    + " , "
+                    + CommodityEntry.COLUMN_CUSIP           + " , "
+                    + CommodityEntry.COLUMN_FRACTION        + " , "
+                    + CommodityEntry.COLUMN_QUOTE_FLAG      + " ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? ) ");
         }
 
         mReplaceStatement.clearBindings();
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
index 16cb7a70..62ecdae4 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseAdapter.java
@@ -176,12 +176,11 @@ public boolean isOpen(){
      * Adds a record to the database with the data contained in the model.
      * <p>This method uses the SQL REPLACE instructions to replace any record with a matching GUID.
      * So beware of any foreign keys with cascade dependencies which might need to be re-added</p>
-     * @param model
-     * @return
+     * @param model Model to be saved to the database
      */
-    public long addRecord(@NonNull final Model model){
+    public void addRecord(@NonNull final Model model){
         Log.d(LOG_TAG, String.format("Adding %s record to database: ", model.getClass().getName()));
-        return mDb.replace(mTableName, null, buildContentValues(model));
+        compileReplaceStatement(model).execute();
     }
 
     /**
@@ -196,12 +195,10 @@ public long bulkAddRecords(@NonNull List<Model> modelList) {
         long nRow = 0;
         try {
             mDb.beginTransaction();
-
             for (Model split : modelList) {
                 compileReplaceStatement(split).execute();
                 nRow++;
             }
-
             mDb.setTransactionSuccessful();
         }
         finally {
@@ -212,15 +209,6 @@ public long bulkAddRecords(@NonNull List<Model> modelList) {
     }
 
     /**
-     * Builds the ContentValues object used for modifying the records in the database.
-     * <p>Classes implementing this method should call {@link #populateBaseModelAttributes(ContentValues, BaseModel)} (BaseModel)} in
-     * order to populate the base model fields</p>
-     * @return {@link ContentValues} filled with the model values
-     * @see #populateBaseModelAttributes(ContentValues, BaseModel)
-     */
-    protected abstract ContentValues buildContentValues(@NonNull final Model model);
-
-    /**
      * Builds an instance of the model from the database record entry
      * <p>This method should not modify the cursor in any way</p>
      * @param cursor Cursor pointing to the record
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 4d53de67..819944b0 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -651,7 +651,7 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 //                    Split split = new Split(imbalance.negate(),
 //                            accountsDbAdapter.getOrCreateImbalanceAccountUID(imbalance.getCurrency()));
 //                    split.setTransactionUID(transaction.getUID());
-//                    splitsDbAdapter.addSplit(split);
+//                    splitsDbAdapter.addRecord(split);
 //                }
 //            }
 //            cursor.close();
diff --git a/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java b/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
index 3b6526cd..35b54cab 100644
--- a/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/PricesDbAdapter.java
@@ -30,22 +30,6 @@ public static PricesDbAdapter getInstance(){
     }
 
     @Override
-    protected ContentValues buildContentValues(@NonNull Price price) {
-        ContentValues contentValues = new ContentValues();
-        populateBaseModelAttributes(contentValues, price);
-
-        contentValues.put(PriceEntry.COLUMN_COMMODITY_UID,  price.getCommodityUID());
-        contentValues.put(PriceEntry.COLUMN_CURRENCY_UID,   price.getCurrencyUID());
-        contentValues.put(PriceEntry.COLUMN_DATE,           price.getDate().toString());
-        contentValues.put(PriceEntry.COLUMN_SOURCE,         price.getSource());
-        contentValues.put(PriceEntry.COLUMN_TYPE,           price.getType());
-        contentValues.put(PriceEntry.COLUMN_VALUE_NUM,      price.getValueNum());
-        contentValues.put(PriceEntry.COLUMN_VALUE_DENOM,    price.getValueDenom());
-
-        return contentValues;
-    }
-
-    @Override
     protected SQLiteStatement compileReplaceStatement(Price price) {
         if (mReplaceStatement == null) {
             mReplaceStatement = mDb.compileStatement("REPLACE INTO " + PriceEntry.TABLE_NAME + " ( "
@@ -64,15 +48,12 @@ protected SQLiteStatement compileReplaceStatement(Price price) {
         mReplaceStatement.bindString(2, price.getCommodityUID());
         mReplaceStatement.bindString(3, price.getCurrencyUID());
         mReplaceStatement.bindString(4, price.getDate().toString());
-        if (price.getSource() == null)
-            mReplaceStatement.bindNull(5);
-        else
+        if (price.getSource() != null) {
             mReplaceStatement.bindString(5, price.getSource());
-
-        if (price.getType() == null)
-            mReplaceStatement.bindNull(6);
-        else
+        }
+        if (price.getType() != null) {
             mReplaceStatement.bindString(6, price.getType());
+        }
         mReplaceStatement.bindLong(7,   price.getValueNum());
         mReplaceStatement.bindLong(8,   price.getValueDenom());
 
diff --git a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
index 2d4333f8..b051811f 100644
--- a/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/ScheduledActionDbAdapter.java
@@ -50,25 +50,6 @@ public static ScheduledActionDbAdapter getInstance(){
         return GnuCashApplication.getScheduledEventDbAdapter();
     }
 
-
-    @Override
-    protected ContentValues buildContentValues(@NonNull ScheduledAction scheduledAction) {
-        ContentValues contentValues = new ContentValues();
-        populateBaseModelAttributes(contentValues, scheduledAction);
-        contentValues.put(ScheduledActionEntry.COLUMN_ACTION_UID, scheduledAction.getActionUID());
-        contentValues.put(ScheduledActionEntry.COLUMN_PERIOD,    scheduledAction.getPeriod());
-        contentValues.put(ScheduledActionEntry.COLUMN_START_TIME, scheduledAction.getStartTime());
-        contentValues.put(ScheduledActionEntry.COLUMN_END_TIME,  scheduledAction.getEndTime());
-        contentValues.put(ScheduledActionEntry.COLUMN_LAST_RUN,  scheduledAction.getLastRun());
-        contentValues.put(ScheduledActionEntry.COLUMN_TYPE, scheduledAction.getActionType().name());
-        contentValues.put(ScheduledActionEntry.COLUMN_TAG,       scheduledAction.getTag());
-        contentValues.put(ScheduledActionEntry.COLUMN_ENABLED,   scheduledAction.isEnabled() ? "1":"0");
-        contentValues.put(ScheduledActionEntry.COLUMN_TOTAL_FREQUENCY, scheduledAction.getTotalFrequency());
-        contentValues.put(ScheduledActionEntry.COLUMN_EXECUTION_COUNT, scheduledAction.getExecutionCount());
-
-        return contentValues;
-    }
-
     /**
      * Updates only the recurrence attributes of the scheduled action.
      * The recurrence attributes are the period, start time, end time and/or total frequency.
diff --git a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
index c09a471c..7e21f3dc 100644
--- a/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/SplitsDbAdapter.java
@@ -64,37 +64,21 @@ public static SplitsDbAdapter getInstance(){
 
     /**
      * Adds a split to the database.
-     * If the split (with same unique ID) already exists, then it is simply updated
+     * The transactions belonging to the split are marked as exported
      * @param split {@link org.gnucash.android.model.Split} to be recorded in DB
-     * @return Record ID of the newly saved split
      */
-    public long addSplit(Split split){
-
+    public void addRecord(@NonNull final Split split){
         Log.d(LOG_TAG, "Replace transaction split in db");
-        long rowId = super.addRecord(split);
+        super.addRecord(split);
 
         long transactionId = getTransactionID(split.getTransactionUID());
         //when a split is updated, we want mark the transaction as not exported
         updateRecord(TransactionEntry.TABLE_NAME, transactionId,
-                TransactionEntry.COLUMN_EXPORTED, String.valueOf(rowId > 0 ? 0 : 1));
+                TransactionEntry.COLUMN_EXPORTED, String.valueOf(0));
 
         //modifying a split means modifying the accompanying transaction as well
         updateRecord(TransactionEntry.TABLE_NAME, transactionId,
                 TransactionEntry.COLUMN_MODIFIED_AT, Long.toString(System.currentTimeMillis()));
-        return rowId;
-    }
-
-    @Override
-    protected ContentValues buildContentValues(@NonNull Split split) {
-        ContentValues contentValues = new ContentValues();
-        populateBaseModelAttributes(contentValues, split);
-        contentValues.put(SplitEntry.COLUMN_AMOUNT,     split.getAmount().absolute().toPlainString());
-        contentValues.put(SplitEntry.COLUMN_TYPE,       split.getType().name());
-        contentValues.put(SplitEntry.COLUMN_MEMO,       split.getMemo());
-        contentValues.put(SplitEntry.COLUMN_ACCOUNT_UID, split.getAccountUID());
-        contentValues.put(SplitEntry.COLUMN_TRANSACTION_UID, split.getTransactionUID());
-
-        return contentValues;
     }
 
     @Override
diff --git a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
index 777e6e6b..47cdd826 100644
--- a/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -85,20 +85,18 @@ public SplitsDbAdapter getSplitDbAdapter() {
 	 * @return Database row ID of the inserted transaction
 	 */
     @Override
-	public long addRecord(@NonNull Transaction transaction){
+	public void addRecord(@NonNull Transaction transaction){
 
         Log.d(LOG_TAG, "Replacing transaction in db");
-        long rowId = -1;
         mDb.beginTransaction();
         try {
-            rowId = super.addRecord(transaction);
+            super.addRecord(transaction);
 
             Log.d(LOG_TAG, "Adding splits for transaction");
-            SplitsDbAdapter splitsDbAdapter = SplitsDbAdapter.getInstance();
             ArrayList<String> splitUIDs = new ArrayList<>(transaction.getSplits().size());
             for (Split split : transaction.getSplits()) {
                 Log.d(LOG_TAG, "Replace transaction split in db");
-                splitsDbAdapter.addRecord(split);
+                mSplitsDbAdapter.addRecord(split);
                 splitUIDs.add(split.getUID());
             }
             Log.d(LOG_TAG, transaction.getSplits().size() + " splits added");
@@ -108,6 +106,7 @@ public long addRecord(@NonNull Transaction transaction){
                             + SplitEntry.COLUMN_UID + " NOT IN ('" + TextUtils.join("' , '", splitUIDs) + "')",
                     new String[]{transaction.getUID()});
             Log.d(LOG_TAG, deleted + " splits deleted");
+
             mDb.setTransactionSuccessful();
         } catch (SQLException sqlEx) {
             Log.e(LOG_TAG, sqlEx.getMessage());
@@ -115,7 +114,6 @@ public long addRecord(@NonNull Transaction transaction){
         } finally {
             mDb.endTransaction();
         }
-        return rowId;
 	}
 
     /**
@@ -184,21 +182,6 @@ protected SQLiteStatement compileReplaceStatement(Transaction transaction) {
         return mReplaceStatement;
     }
 
-    @Override
-    protected ContentValues buildContentValues(@NonNull Transaction transaction) {
-        ContentValues contentValues = new ContentValues();
-        contentValues.put(TransactionEntry.COLUMN_DESCRIPTION, transaction.getDescription());
-        contentValues.put(TransactionEntry.COLUMN_TIMESTAMP, transaction.getTimeMillis());
-        contentValues.put(TransactionEntry.COLUMN_NOTES,        transaction.getNote());
-        contentValues.put(TransactionEntry.COLUMN_EXPORTED,     transaction.isExported() ? 1 : 0);
-        contentValues.put(TransactionEntry.COLUMN_TEMPLATE,     transaction.isTemplate() ? 1 : 0);
-        contentValues.put(TransactionEntry.COLUMN_CURRENCY,     transaction.getCurrencyCode());
-        contentValues.put(TransactionEntry.COLUMN_SCHEDX_ACTION_UID, transaction.getScheduledActionUID());
-        populateBaseModelAttributes(contentValues, transaction);
-
-        return contentValues;
-    }
-
     /**
 	 * Returns a cursor to a set of all transactions which have a split belonging to the accound with unique ID
 	 * <code>accountUID</code>.
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
index 817663d1..2d2f71a1 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsListFragment.java
@@ -52,6 +52,7 @@
 import org.gnucash.android.ui.FormActivity;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.util.AccountBalanceTask;
+import org.gnucash.android.ui.util.CursorRecyclerAdapter;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
 
@@ -411,7 +412,7 @@ public Cursor loadInBackground() {
     }
 
 
-    private class AccountRecyclerAdapter extends org.gnucash.android.db.CursorRecyclerAdapter<AccountRecyclerAdapter.ViewHolder>{
+    private class AccountRecyclerAdapter extends CursorRecyclerAdapter<AccountRecyclerAdapter.ViewHolder> {
 
         public AccountRecyclerAdapter(Cursor cursor){
            super(cursor);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 974ec26e..84136038 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -40,7 +40,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
-import org.gnucash.android.db.CursorRecyclerAdapter;
+import org.gnucash.android.ui.util.CursorRecyclerAdapter;
 import org.gnucash.android.db.DatabaseCursorLoader;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.SplitsDbAdapter;
diff --git a/app/src/main/java/org/gnucash/android/db/CursorRecyclerAdapter.java b/app/src/main/java/org/gnucash/android/ui/util/CursorRecyclerAdapter.java
similarity index 99%
rename from app/src/main/java/org/gnucash/android/db/CursorRecyclerAdapter.java
rename to app/src/main/java/org/gnucash/android/ui/util/CursorRecyclerAdapter.java
index e912d1a4..d71a7f79 100644
--- a/app/src/main/java/org/gnucash/android/db/CursorRecyclerAdapter.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CursorRecyclerAdapter.java
@@ -22,7 +22,7 @@
  * SOFTWARE.
  */
 
-package org.gnucash.android.db;
+package org.gnucash.android.ui.util;
 
 import android.database.ContentObserver;
 import android.database.Cursor;
@@ -49,7 +49,7 @@
  * @see android.support.v7.widget.RecyclerView.Adapter
  * @see android.widget.CursorAdapter
  * @see android.widget.Filterable
- * @see org.gnucash.android.db.CursorFilter.CursorFilterClient
+ * @see CursorFilter.CursorFilterClient
  */
 public abstract class CursorRecyclerAdapter<VH
         extends android.support.v7.widget.RecyclerView.ViewHolder> extends RecyclerView.Adapter<VH>
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index e177d5f0..edeabe78 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -100,11 +100,8 @@ public void shouldAddAccountsToDatabase(){
         account1.addTransaction(transaction);
         account2.addTransaction(transaction);
 
-        long id1 = mAccountsDbAdapter.addRecord(account1);
-        long id2 = mAccountsDbAdapter.addRecord(account2);
-
-        assertThat(id1).isGreaterThan(0);
-        assertThat(id2).isGreaterThan(0);
+        mAccountsDbAdapter.addRecord(account1);
+        mAccountsDbAdapter.addRecord(account2);
 
         assertThat(mTransactionsDbAdapter.getRecordsCount()).isEqualTo(1);
     }
@@ -127,8 +124,7 @@ public void shouldDeleteSplitsWhenAccountDeleted(){
         transaction.addSplit(split);
         transaction.addSplit(split.createPair(BRAVO_ACCOUNT_NAME));
 
-        long id = mTransactionsDbAdapter.addRecord(transaction);
-        assertThat(id).isGreaterThan(0);
+        mTransactionsDbAdapter.addRecord(transaction);
 
         mAccountsDbAdapter.deleteRecord(ALPHA_ACCOUNT_NAME);
 
@@ -251,26 +247,26 @@ public void shouldComputeAccountBalanceCorrectly(){
         Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("USD")), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.DEBIT);
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         split = new Split(new Money("4.99", "USD"), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.DEBIT);
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         split = new Split(new Money("1.19", "USD"), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.CREDIT);
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         split = new Split(new Money("3.49", "EUR"), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.DEBIT);
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         split = new Split(new Money("8.39", "USD"), transferAcct.getUID());
         split.setTransactionUID(transaction.getUID());
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         //balance computation ignores the currency of the split
         Money balance = mAccountsDbAdapter.getAccountBalance(account.getUID());
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java
index 88af6c7a..cba5cb54 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java
@@ -50,7 +50,7 @@ public void shouldHaveAccountInDatabase(){
 
         Split split = new Split(Money.getZeroInstance(), "non-existent");
         split.setTransactionUID(transaction.getUID());
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         List<Split> splits = mSplitsDbAdapter.getSplitsForTransaction(transaction.getUID());
         assertThat(splits).isEmpty();
@@ -69,7 +69,7 @@ public void addingSplitShouldUnsetExportedFlagOfTransaction(){
 
         Split split = new Split(Money.getZeroInstance(), mAccount.getUID());
         split.setTransactionUID(transaction.getUID());
-        mSplitsDbAdapter.addSplit(split);
+        mSplitsDbAdapter.addRecord(split);
 
         String isExported = mTransactionsDbAdapter.getAttribute(transaction.getUID(),
                 DatabaseSchema.TransactionEntry.COLUMN_EXPORTED);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index 3ff151d2..6de30fc0 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -48,11 +48,8 @@ public void setUp() throws Exception {
 		alphaAccount = new Account(ALPHA_ACCOUNT_NAME);
 		bravoAccount = new Account(BRAVO_ACCOUNT_NAME);
 
-		long id1 = mAccountsDbAdapter.addRecord(bravoAccount);
-		long id2 = mAccountsDbAdapter.addRecord(alphaAccount);
-
-		assertThat(id1).isGreaterThan(0);
-		assertThat(id2).isGreaterThan(0);
+		mAccountsDbAdapter.addRecord(bravoAccount);
+		mAccountsDbAdapter.addRecord(alphaAccount);
 
 		mTestSplit = new Split(new Money(BigDecimal.TEN, DEFAULT_CURRENCY), alphaAccount.getUID());
 	}
