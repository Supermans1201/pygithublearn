From 3784e029c18d98d36563a1bb9fa53955cc3b9fda Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 1 Dec 2016 18:21:32 +0100
Subject: [PATCH] Fix code inspector issues in AccountFormFragment.

---
 .../android/ui/account/AccountFormFragment.java    | 40 ++++++++++++----------
 1 file changed, 21 insertions(+), 19 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 8fd13bb3..44c7746e 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -87,7 +87,7 @@
     /**
      * Tag for the color picker dialog fragment
      */
-    public static final String COLOR_PICKER_DIALOG_TAG = "color_picker_dialog";
+    private static final String COLOR_PICKER_DIALOG_TAG = "color_picker_dialog";
 
     /**
 	 * EditText for the name of the account to be created/edited
@@ -176,7 +176,7 @@
     /**
      * Spinner for selecting the default transfer account
      */
-    @Bind(R.id.input_default_transfer_account) Spinner mDefaulTransferAccountSpinner;
+    @Bind(R.id.input_default_transfer_account) Spinner mDefaultTransferAccountSpinner;
 
     /**
      * Account description input text view
@@ -205,13 +205,14 @@
      */
     @Bind(R.id.input_color_picker) ColorSquare mColorSquare;
 
-    private ColorPickerSwatch.OnColorSelectedListener mColorSelectedListener = new ColorPickerSwatch.OnColorSelectedListener() {
-        @Override
-        public void onColorSelected(int color) {
-            mColorSquare.setBackgroundColor(color);
-            mSelectedColor = color;
-        }
-    };
+    private final ColorPickerSwatch.OnColorSelectedListener mColorSelectedListener =
+            new ColorPickerSwatch.OnColorSelectedListener() {
+                @Override
+                public void onColorSelected(int color) {
+                    mColorSquare.setBackgroundColor(color);
+                    mSelectedColor = color;
+                }
+            };
 
 
     /**
@@ -294,11 +295,11 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
             }
         });
 
-        mDefaulTransferAccountSpinner.setEnabled(false);
+        mDefaultTransferAccountSpinner.setEnabled(false);
         mDefaultTransferAccountCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
-                mDefaulTransferAccountSpinner.setEnabled(isChecked);
+                mDefaultTransferAccountSpinner.setEnabled(isChecked);
             }
         });
 
@@ -496,13 +497,13 @@ private void setParentAccountSelection(long parentAccountId){
     private void setDefaultTransferAccountSelection(long defaultTransferAccountId, boolean enableTransferAccount) {
         if (defaultTransferAccountId > 0) {
             mDefaultTransferAccountCheckBox.setChecked(enableTransferAccount);
-            mDefaulTransferAccountSpinner.setEnabled(enableTransferAccount);
+            mDefaultTransferAccountSpinner.setEnabled(enableTransferAccount);
         } else
             return;
 
         for (int pos = 0; pos < mDefaultTransferAccountCursorAdapter.getCount(); pos++) {
             if (mDefaultTransferAccountCursorAdapter.getItemId(pos) == defaultTransferAccountId) {
-                mDefaulTransferAccountSpinner.setSelection(pos);
+                mDefaultTransferAccountSpinner.setSelection(pos);
                 break;
             }
         }
@@ -521,6 +522,7 @@ private void setDefaultTransferAccountSelection(long defaultTransferAccountId, b
              int color = colorTypedArray.getColor(i, getResources().getColor(R.color.title_green));
              colorOptions[i] = color;
         }
+        colorTypedArray.recycle();
         return colorOptions;
     }
     /**
@@ -574,13 +576,13 @@ private void loadDefaultTransferAccountList(){
         Cursor defaultTransferAccountCursor = mAccountsDbAdapter.fetchAccountsOrderedByFullName(condition,
                 new String[]{AccountType.ROOT.name()});
 
-        if (mDefaulTransferAccountSpinner.getCount() <= 0) {
+        if (mDefaultTransferAccountSpinner.getCount() <= 0) {
             setDefaultTransferAccountInputsVisible(false);
         }
 
         mDefaultTransferAccountCursorAdapter = new QualifiedAccountNameCursorAdapter(getActivity(),
                 defaultTransferAccountCursor);
-        mDefaulTransferAccountSpinner.setAdapter(mDefaultTransferAccountCursorAdapter);
+        mDefaultTransferAccountSpinner.setAdapter(mDefaultTransferAccountCursorAdapter);
     }
 
     /**
@@ -733,7 +735,7 @@ private void saveAccount() {
         boolean nameChanged = false;
 		if (mAccount == null){
 			String name = getEnteredName();
-			if (name == null || name.length() == 0){
+			if (name.length() == 0){
                 mTextInputLayout.setErrorEnabled(true);
                 mTextInputLayout.setError(getString(R.string.toast_no_account_name_entered));
 				return;				
@@ -771,8 +773,8 @@ private void saveAccount() {
         mAccount.setParentUID(newParentAccountUID);
 
         if (mDefaultTransferAccountCheckBox.isChecked()
-                && mDefaulTransferAccountSpinner.getSelectedItemId() != Spinner.INVALID_ROW_ID){
-            long id = mDefaulTransferAccountSpinner.getSelectedItemId();
+                && mDefaultTransferAccountSpinner.getSelectedItemId() != Spinner.INVALID_ROW_ID){
+            long id = mDefaultTransferAccountSpinner.getSelectedItemId();
             mAccount.setDefaultTransferAccountUID(mAccountsDbAdapter.getUID(id));
         } else {
             //explicitly set in case of removal of default account
@@ -842,7 +844,7 @@ private AccountType getSelectedAccountType() {
 	 * Retrieves the name of the account which has been entered in the EditText
 	 * @return Name of the account which has been entered in the EditText
 	 */
-	public String getEnteredName(){
+    private String getEnteredName(){
 		return mNameEditText.getText().toString().trim();
 	}
 
