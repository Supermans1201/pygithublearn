From 46859ae6e64f39a6207c1074ba309db85ff8fe30 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 17 Apr 2017 22:17:35 +0200
Subject: [PATCH] Fixes #661 - Remove WRITE_EXTERNAL_STORAGE permission for
 Android 4.4 (KitKat) and above

Earlier Android versions would still require this permission
---
 CHANGELOG.md                                       |  1 +
 app/src/main/AndroidManifest.xml                   |  3 +-
 .../android/ui/account/AccountsActivity.java       | 47 ----------------------
 .../android/ui/export/ExportFormFragment.java      | 15 -------
 .../android/ui/wizard/FirstRunWizardActivity.java  | 25 +-----------
 5 files changed, 4 insertions(+), 87 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index ff4b3338..0e738a97 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,6 +9,7 @@ Version 2.2.0 *(2017-05-xx)*
 * Fixed #625: Hourly backups were being executed on a monthly basis
 * Fixed #607: Widgets stop functioning after switching books
 * Improved #635: Improved support for BYN currency 
+* Improved #661: Removed need for WRITE_EXTERNAL_STORAGE permission for Android 4.4 (KitKat) and above
 
 Version 2.1.6 *(2017-04-15)*
 ----------------------------
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 45e5a6ab..22b5ccc7 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -37,7 +37,8 @@
     <uses-permission android:label="@string/label_permission_create_accounts"
         android:name="org.gnucash.android.permission.CREATE_ACCOUNT" />
     <uses-permission android:label="@string/permission_access_sdcard"
-        android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+                     android:name="android.permission.WRITE_EXTERNAL_STORAGE"
+                     android:maxSdkVersion="18"/>
     <uses-permission android:name="android.permission.VIBRATE"
                      android:label="Allow device to vibrate with notifications" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index e5a3bd66..0dd96065 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -127,7 +127,6 @@
      * Key for putting argument for tab into bundle arguments
      */
     public static final String EXTRA_TAB_INDEX = "org.gnucash.android.extra.TAB_INDEX";
-    public static final int REQUEST_PERMISSION_WRITE_SD_CARD = 0xAB;
 
     /**
      * Map containing fragments for the different tabs
@@ -300,50 +299,6 @@ private void handleOpenFileIntent(Intent intent) {
         }
     }
 
-    /**
-     * Get permission for WRITING SD card
-     */
-    @TargetApi(23)
-    private void getSDWritePermission(){
-        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
-                    != PackageManager.PERMISSION_GRANTED) {
-//                if (shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)){
-                    Snackbar.make(mCoordinatorLayout,
-                            "GnuCash requires permission to access the SD card for backup and restore",
-                            Snackbar.LENGTH_INDEFINITE).setAction("GRANT",
-                            new View.OnClickListener() {
-                                @Override
-                                public void onClick(View view) {
-                                    requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
-                                            Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_WRITE_SD_CARD);
-                                }
-                            })
-                            .setActionTextColor(getResources().getColor(R.color.theme_accent))
-                            .show();
-//                }
-            }
-        }
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
-        switch (requestCode){
-            case REQUEST_PERMISSION_WRITE_SD_CARD:{
-                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-
-                    //TODO: permission was granted, yay! do the
-                    // calendar task you need to do.
-
-                } else {
-
-                    // TODO: permission denied, boo! Disable the
-                    // functionality that depends on this permission.
-                }
-            } return;
-        }
-    }
-
     @Override
     protected void onNewIntent(Intent intent) {
         super.onNewIntent(intent);
@@ -388,8 +343,6 @@ private void init() {
             return;
         }
 
-        getSDWritePermission();
-
         if (hasNewFeatures()){
             showWhatsNewDialog(this);
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 7ebcb695..e937a854 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -232,8 +232,6 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		assert supportActionBar != null;
 		supportActionBar.setTitle(R.string.title_export_dialog);
 		setHasOptionsMenu(true);
-
-		getSDWritePermission();
 	}
 
 	@Override
@@ -253,19 +251,6 @@ public void onPause() {
     }
 
 	/**
-	 * Get permission for WRITING SD card for Android Marshmallow and above
-	 */
-	private void getSDWritePermission(){
-		if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-			if (getActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
-					!= PackageManager.PERMISSION_GRANTED) {
-				getActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
-						Manifest.permission.READ_EXTERNAL_STORAGE}, AccountsActivity.REQUEST_PERMISSION_WRITE_SD_CARD);
-			}
-		}
-	}
-
-	/**
 	 * Starts the export of transactions with the specified parameters
 	 */
 	private void startExport(){
diff --git a/app/src/main/java/org/gnucash/android/ui/wizard/FirstRunWizardActivity.java b/app/src/main/java/org/gnucash/android/ui/wizard/FirstRunWizardActivity.java
index 9efa3c81..39a80307 100644
--- a/app/src/main/java/org/gnucash/android/ui/wizard/FirstRunWizardActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/wizard/FirstRunWizardActivity.java
@@ -160,13 +160,7 @@ public void onClick(View view) {
                     }
                     preferenceEditor.apply();
 
-
-                    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                        requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
-                                Manifest.permission.READ_EXTERNAL_STORAGE}, AccountsActivity.REQUEST_PERMISSION_WRITE_SD_CARD);
-                    } else { //on other version of Android, just proceed with processing. On Android M, we import when permission grant returns
-                        createAccountsAndFinish();
-                    }
+                    createAccountsAndFinish();
                 } else {
                     if (mEditingAfterReview) {
                         mPager.setCurrentItem(mPagerAdapter.getCount() - 1);
@@ -283,23 +277,6 @@ public void onTaskComplete() {
     }
 
     @Override
-    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
-        switch (requestCode){
-            case AccountsActivity.REQUEST_PERMISSION_WRITE_SD_CARD:{
-                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-                    createAccountsAndFinish();
-                } else {
-                    // permission denied, boo!
-                    // nothing to see here, move along
-                    finish();
-                    AccountsActivity.removeFirstRunFlag();
-                }
-            }
-        }
-
-    }
-
-    @Override
     protected void onDestroy() {
         super.onDestroy();
         mWizardModel.unregisterListener(this);
