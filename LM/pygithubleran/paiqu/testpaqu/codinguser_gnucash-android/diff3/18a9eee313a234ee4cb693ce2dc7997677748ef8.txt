From 18a9eee313a234ee4cb693ce2dc7997677748ef8 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Thu, 23 Apr 2015 20:16:43 +0200
Subject: [PATCH] Fixed: migration code was broken

Added description to account table
String cleanup
---
 app/build.gradle                                   |   8 +
 .../org/gnucash/android/db/DatabaseHelper.java     | 198 +++++++++++++++++----
 .../org/gnucash/android/db/DatabaseSchema.java     |   1 +
 .../org/gnucash/android/db/MigrationHelper.java    |  23 +--
 app/src/main/res/values-nl/strings.xml             |   6 -
 app/src/main/res/values-zh/strings.xml             |   1 +
 6 files changed, 172 insertions(+), 65 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 21126b41..ecdd766b 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -27,6 +27,14 @@ android {
         versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
         versionName "${versionMajor}.${versionMinor}.${versionPatch}"
     }
+
+    applicationVariants.all { variant ->
+        variant.outputs.each { output ->
+            output.outputFile = new File(
+                    output.outputFile.parent, "GnucashAndroid_v${variant.versionName}.apk".replaceAll(":","-"))
+        }
+    }
+
     buildTypes {
         release {
             minifyEnabled false
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 329ea4f4..48990015 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -20,18 +20,22 @@
 import android.app.PendingIntent;
 import android.content.ContentValues;
 import android.content.Context;
+import android.content.Intent;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.export.Exporter;
+import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
 
+import java.io.File;
 import java.sql.Timestamp;
 
 import static org.gnucash.android.db.DatabaseSchema.AccountEntry;
@@ -66,6 +70,7 @@
 			+ AccountEntry.COLUMN_NAME 	            + " varchar(255) not null, "
 			+ AccountEntry.COLUMN_TYPE              + " varchar(255) not null, "
 			+ AccountEntry.COLUMN_CURRENCY          + " varchar(255) not null, "
+			+ AccountEntry.COLUMN_DESCRIPTION       + " varchar(255), "
             + AccountEntry.COLUMN_COLOR_CODE        + " varchar(255), "
             + AccountEntry.COLUMN_FAVORITE 		    + " tinyint default 0, "
             + AccountEntry.COLUMN_HIDDEN 		    + " tinyint default 0, "
@@ -271,30 +276,16 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
     private int upgradeDbToVersion8(SQLiteDatabase db) {
         Log.i(LOG_TAG, "Upgrading database to version 8");
         int oldVersion = 7;
+        new File(Exporter.BACKUP_FOLDER_PATH).mkdirs();
+        new File(Exporter.EXPORT_FOLDER_PATH).mkdirs();
         //start moving the files in background thread before we do the database stuff
         new Thread(MigrationHelper.moveExportedFilesToNewDefaultLocation).start();
 
         db.beginTransaction();
         try {
-            Log.i(LOG_TAG, "Adding hidden flag to accounts table");
-            String addHiddenFlagSqlToAccounts = "ALTER TABLE " + AccountEntry.TABLE_NAME +
-                    " ADD COLUMN " + AccountEntry.COLUMN_HIDDEN + " tinyint default 0";
-            db.execSQL(addHiddenFlagSqlToAccounts);
-
-            String addTemplatesToTransactions = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
-                    " ADD COLUMN " + TransactionEntry.COLUMN_TEMPLATE + " tinyint default 0";
-            String addSchedxActionToTrns = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
-                    " ADD COLUMN " + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " varchar(255)";
-            db.execSQL(addTemplatesToTransactions);
-            db.execSQL(addSchedxActionToTrns);
-
-            Log.i(LOG_TAG, "Adding created_at and modified_at columns to database tables");
-            MigrationHelper.createUpdatedAndModifiedColumns(db, AccountEntry.TABLE_NAME);
-            MigrationHelper.createUpdatedAndModifiedColumns(db, TransactionEntry.TABLE_NAME);
-            MigrationHelper.createUpdatedAndModifiedColumns(db, SplitEntry.TABLE_NAME);
-
-            Log.i(LOG_TAG, "Creating scheduled events table");
-            String createScheduledActions = "CREATE TABLE " + ScheduledActionEntry.TABLE_NAME + " ("
+
+            Log.i(LOG_TAG, "Creating scheduled actions table");
+            db.execSQL("CREATE TABLE " + ScheduledActionEntry.TABLE_NAME + " ("
                     + ScheduledActionEntry._ID                   + " integer primary key autoincrement, "
                     + ScheduledActionEntry.COLUMN_UID            + " varchar(255) not null UNIQUE, "
                     + ScheduledActionEntry.COLUMN_ACTION_UID    + " varchar(255) not null, "
@@ -309,15 +300,145 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
                     + ScheduledActionEntry.COLUMN_EXECUTION_COUNT+ " integer default 0, "
                     + ScheduledActionEntry.COLUMN_CREATED_AT     + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
                     + ScheduledActionEntry.COLUMN_MODIFIED_AT    + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
-                    + ");" + createUpdatedAtTrigger(ScheduledActionEntry.TABLE_NAME);
-            db.execSQL(createScheduledActions);
+                    + ");" + createUpdatedAtTrigger(ScheduledActionEntry.TABLE_NAME));
+
+
+            //==============================BEGIN TABLE MIGRATIONS ========================================
+            Log.i(LOG_TAG, "Migrating accounts table");
+            // backup transaction table
+            db.execSQL("ALTER TABLE " + AccountEntry.TABLE_NAME + " RENAME TO " + AccountEntry.TABLE_NAME + "_bak");
+            // create new transaction table
+            db.execSQL("CREATE TABLE " + AccountEntry.TABLE_NAME + " ("
+                    + AccountEntry._ID + " integer primary key autoincrement, "
+                    + AccountEntry.COLUMN_UID + " varchar(255) not null UNIQUE, "
+                    + AccountEntry.COLUMN_NAME + " varchar(255) not null, "
+                    + AccountEntry.COLUMN_TYPE + " varchar(255) not null, "
+                    + AccountEntry.COLUMN_CURRENCY + " varchar(255) not null, "
+                    + AccountEntry.COLUMN_DESCRIPTION + " varchar(255), "
+                    + AccountEntry.COLUMN_COLOR_CODE + " varchar(255), "
+                    + AccountEntry.COLUMN_FAVORITE + " tinyint default 0, "
+                    + AccountEntry.COLUMN_HIDDEN + " tinyint default 0, "
+                    + AccountEntry.COLUMN_FULL_NAME + " varchar(255), "
+                    + AccountEntry.COLUMN_PLACEHOLDER + " tinyint default 0, "
+                    + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " varchar(255), "
+                    + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID + " varchar(255), "
+                    + AccountEntry.COLUMN_CREATED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+                    + AccountEntry.COLUMN_MODIFIED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP "
+                    + ");" + createUpdatedAtTrigger(AccountEntry.TABLE_NAME));
+
+            // initialize new account table with data from old table
+            db.execSQL("INSERT INTO " + AccountEntry.TABLE_NAME + " ( "
+                            + AccountEntry._ID + ","
+                            + AccountEntry.COLUMN_UID + " , "
+                            + AccountEntry.COLUMN_NAME + " , "
+                            + AccountEntry.COLUMN_TYPE + " , "
+                            + AccountEntry.COLUMN_CURRENCY + " , "
+                            + AccountEntry.COLUMN_COLOR_CODE + " , "
+                            + AccountEntry.COLUMN_FAVORITE + " , "
+                            + AccountEntry.COLUMN_FULL_NAME + " , "
+                            + AccountEntry.COLUMN_PLACEHOLDER + " , "
+                            + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " , "
+                            + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
+                            + ") SELECT "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry._ID + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_UID + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_NAME + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_TYPE + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_CURRENCY + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_COLOR_CODE + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_FAVORITE + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_FULL_NAME + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_PLACEHOLDER + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_PARENT_ACCOUNT_UID + " , "
+                            + AccountEntry.TABLE_NAME + "_bak." + AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID
+                            + " FROM " + AccountEntry.TABLE_NAME + "_bak;"
+            );
+
+            Log.i(LOG_TAG, "Migrating transactions table");
+            // backup transaction table
+            db.execSQL("ALTER TABLE " + TransactionEntry.TABLE_NAME + " RENAME TO " + TransactionEntry.TABLE_NAME + "_bak");
+            // create new transaction table
+            db.execSQL("CREATE TABLE " + TransactionEntry.TABLE_NAME + " ("
+                    + TransactionEntry._ID + " integer primary key autoincrement, "
+                    + TransactionEntry.COLUMN_UID + " varchar(255) not null UNIQUE, "
+                    + TransactionEntry.COLUMN_DESCRIPTION + " varchar(255), "
+                    + TransactionEntry.COLUMN_NOTES + " text, "
+                    + TransactionEntry.COLUMN_TIMESTAMP + " integer not null, "
+                    + TransactionEntry.COLUMN_EXPORTED + " tinyint default 0, "
+                    + TransactionEntry.COLUMN_TEMPLATE + " tinyint default 0, "
+                    + TransactionEntry.COLUMN_CURRENCY + " varchar(255) not null, "
+                    + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + " varchar(255), "
+                    + TransactionEntry.COLUMN_CREATED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+                    + TransactionEntry.COLUMN_MODIFIED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+                    + "FOREIGN KEY (" + TransactionEntry.COLUMN_SCHEDX_ACTION_UID + ") REFERENCES " + ScheduledActionEntry.TABLE_NAME + " (" + ScheduledActionEntry.COLUMN_UID + ") ON DELETE SET NULL "
+                    + ");" + createUpdatedAtTrigger(TransactionEntry.TABLE_NAME));
+
+            // initialize new transaction table with data from old table
+            db.execSQL("INSERT INTO " + TransactionEntry.TABLE_NAME + " ( "
+                            + TransactionEntry._ID + " , "
+                            + TransactionEntry.COLUMN_UID + " , "
+                            + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                            + TransactionEntry.COLUMN_NOTES + " , "
+                            + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                            + TransactionEntry.COLUMN_EXPORTED + " , "
+                            + TransactionEntry.COLUMN_CURRENCY + " , "
+                            + TransactionEntry.COLUMN_TEMPLATE
+                            + ")  SELECT "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry._ID + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_UID + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_DESCRIPTION + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_NOTES + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_TIMESTAMP + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_EXPORTED + " , "
+                            + TransactionEntry.TABLE_NAME + "_bak." + TransactionEntry.COLUMN_CURRENCY + " , "
+                            + " CASE WHEN " + TransactionEntry.TABLE_NAME + "_bak.recurrence_period > 0 THEN 1 ELSE 0 END "
+                            + " FROM " + TransactionEntry.TABLE_NAME + "_bak;"
+            );
+
+            Log.i(LOG_TAG, "Migrating splits table");
+            // backup transaction table
+            db.execSQL("ALTER TABLE " + SplitEntry.TABLE_NAME + " RENAME TO " + SplitEntry.TABLE_NAME + "_bak");
+            // create new split table
+            db.execSQL("CREATE TABLE " + SplitEntry.TABLE_NAME + " ("
+                    + SplitEntry._ID + " integer primary key autoincrement, "
+                    + SplitEntry.COLUMN_UID + " varchar(255) not null UNIQUE, "
+                    + SplitEntry.COLUMN_MEMO + " text, "
+                    + SplitEntry.COLUMN_TYPE + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_AMOUNT + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_ACCOUNT_UID + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_TRANSACTION_UID + " varchar(255) not null, "
+                    + SplitEntry.COLUMN_CREATED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+                    + SplitEntry.COLUMN_MODIFIED_AT + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
+                    + "FOREIGN KEY (" + SplitEntry.COLUMN_ACCOUNT_UID + ") REFERENCES " + AccountEntry.TABLE_NAME + " (" + AccountEntry.COLUMN_UID + ") ON DELETE CASCADE, "
+                    + "FOREIGN KEY (" + SplitEntry.COLUMN_TRANSACTION_UID + ") REFERENCES " + TransactionEntry.TABLE_NAME + " (" + TransactionEntry.COLUMN_UID + ") ON DELETE CASCADE "
+                    + ");" + createUpdatedAtTrigger(SplitEntry.TABLE_NAME));
+
+            // initialize new split table with data from old table
+            db.execSQL("INSERT INTO " + SplitEntry.TABLE_NAME + " ( "
+                            + SplitEntry._ID + " , "
+                            + SplitEntry.COLUMN_UID + " , "
+                            + SplitEntry.COLUMN_MEMO + " , "
+                            + SplitEntry.COLUMN_TYPE + " , "
+                            + SplitEntry.COLUMN_AMOUNT + " , "
+                            + SplitEntry.COLUMN_ACCOUNT_UID + " , "
+                            + SplitEntry.COLUMN_TRANSACTION_UID
+                            + ")  SELECT "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry._ID + " , "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry.COLUMN_UID + " , "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry.COLUMN_MEMO + " , "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry.COLUMN_TYPE + " , "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry.COLUMN_AMOUNT + " , "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry.COLUMN_ACCOUNT_UID + " , "
+                            + SplitEntry.TABLE_NAME + "_bak." + SplitEntry.COLUMN_TRANSACTION_UID
+                            + " FROM " + SplitEntry.TABLE_NAME + "_bak;"
+            );
+
+            //================================ END TABLE MIGRATIONS ================================
 
             Log.i(LOG_TAG, "Migrating existing recurring transactions");
             ContentValues contentValues = new ContentValues();
-            contentValues.put(TransactionEntry.COLUMN_TEMPLATE, true);
-            db.update(TransactionEntry.TABLE_NAME, contentValues, "recurrence_period > 0", null);
 
-            Cursor c = db.query(TransactionEntry.TABLE_NAME, null, "recurrence_period > 0", null, null, null, null);
+            Cursor c = db.query(TransactionEntry.TABLE_NAME + "_bak", null, "recurrence_period > 0", null, null, null, null);
             ScheduledActionDbAdapter scheduledActionDbAdapter = new ScheduledActionDbAdapter(db);
             SplitsDbAdapter splitsDbAdapter = new SplitsDbAdapter(db);
             TransactionsDbAdapter transactionsDbAdapter = new TransactionsDbAdapter(db, splitsDbAdapter);
@@ -334,11 +455,14 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
                 scheduledAction.setPeriod(period);
                 scheduledActionDbAdapter.addScheduledAction(scheduledAction);
 
+                //build intent for recurring transactions in the database
+                Intent intent = new Intent(Intent.ACTION_INSERT);
+                intent.setType(Transaction.MIME_TYPE);
+
                 //cancel existing pending intent
                 Context context = GnuCashApplication.getAppContext();
                 PendingIntent recurringPendingIntent = PendingIntent.getBroadcast(context,
-                        (int)transactionId, Transaction.createIntent(transactionsDbAdapter.buildTransactionInstance(c)),
-                        PendingIntent.FLAG_CANCEL_CURRENT);
+                        (int)transactionId, intent, PendingIntent.FLAG_CANCEL_CURRENT);
                 AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
                 alarmManager.cancel(recurringPendingIntent);
             }
@@ -351,15 +475,23 @@ private int upgradeDbToVersion8(SQLiteDatabase db) {
 
             while (c.moveToNext()){
                 Transaction transaction = transactionsDbAdapter.buildTransactionInstance(c);
+                if (transaction.isTemplate())
+                    continue;
                 Money imbalance = transaction.getImbalance();
-                if (imbalance.isAmountZero()){
+                if (!imbalance.isAmountZero()){
                     Split split = new Split(imbalance.negate(),
                             accountsDbAdapter.getOrCreateImbalanceAccountUID(imbalance.getCurrency()));
+                    split.setTransactionUID(transaction.getUID());
                     splitsDbAdapter.addSplit(split);
                 }
             }
             c.close();
 
+            Log.i(LOG_TAG, "Dropping temporary migration tables");
+            db.execSQL("DROP TABLE " + SplitEntry.TABLE_NAME + "_bak");
+            db.execSQL("DROP TABLE " + AccountEntry.TABLE_NAME + "_bak");
+            db.execSQL("DROP TABLE " + TransactionEntry.TABLE_NAME + "_bak");
+
             db.setTransactionSuccessful();
             oldVersion = 8;
         } finally {
@@ -542,17 +674,5 @@ private void createDatabaseTables(SQLiteDatabase db) {
         db.execSQL(createScheduledEventUidIndex);
     }
 
-    /**
-     * Drops all tables in the database
-     * @param db Database instance
-     */
-    private void dropAllDatabaseTables(SQLiteDatabase db) {
-        Log.i(LOG_TAG, "Dropping all database tables");
-        db.execSQL("DROP TABLE IF EXISTS " + AccountEntry.TABLE_NAME);
-        db.execSQL("DROP TABLE IF EXISTS " + TransactionEntry.TABLE_NAME);
-        db.execSQL("DROP TABLE IF EXISTS " + SplitEntry.TABLE_NAME);
-        db.execSQL("DROP TABLE IF EXISTS " + ScheduledActionEntry.TABLE_NAME);
-    }
-
 
 }
diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
index a76c5047..08073819 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseSchema.java
@@ -53,6 +53,7 @@ private DatabaseSchema(){}
 
         public static final String COLUMN_NAME                  = "name";
         public static final String COLUMN_CURRENCY              = "currency_code";
+        public static final String COLUMN_DESCRIPTION           = "description"; //TODO: Use me. Just added it because we are migrating the whole table anyway
         public static final String COLUMN_PARENT_ACCOUNT_UID    = "parent_account_uid";
         public static final String COLUMN_PLACEHOLDER           = "is_placeholder";
         public static final String COLUMN_COLOR_CODE            = "color_code";
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index ebf0a069..372d0a18 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -121,26 +121,6 @@ static void importGnucashXML(SQLiteDatabase db, String filepath) throws Exceptio
     }
 
     /**
-     * Add created_at and modified_at columns to a table in the database and create a trigger
-     * for updating the modified_at columns
-     * @param db SQLite database
-     * @param tableName Name of the table
-     */
-    static void createUpdatedAndModifiedColumns(SQLiteDatabase db, String tableName){
-        String addCreatedColumn = "ALTER TABLE " + tableName
-                + " ADD COLUMN " + DatabaseSchema.CommonColumns.COLUMN_CREATED_AT
-                + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP";
-
-        String addModifiedColumn = "ALTER TABLE " + tableName
-                + " ADD COLUMN " + DatabaseSchema.CommonColumns.COLUMN_MODIFIED_AT
-                + " TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP";
-
-        db.execSQL(addCreatedColumn);
-        db.execSQL(addModifiedColumn);
-        db.execSQL(DatabaseHelper.createUpdatedAtTrigger(tableName));
-    }
-
-    /**
      * Copies the contents of the file in {@code src} to {@code dst} and then deletes the {@code src} if copy was successful.
      * If the file copy was unsuccessful, the src file will not be deleted.
      * @param src Source file
@@ -183,6 +163,9 @@ public void run() {
                         e.printStackTrace();
                     }
                 }
+            } else {
+                //if the base folder does not exist, no point going one level deeper
+                return;
             }
 
             File oldBackupFolder = new File(oldExportFolder, "backup");
diff --git a/app/src/main/res/values-nl/strings.xml b/app/src/main/res/values-nl/strings.xml
index 0246c048..96581365 100644
--- a/app/src/main/res/values-nl/strings.xml
+++ b/app/src/main/res/values-nl/strings.xml
@@ -380,12 +380,6 @@
         veel gebruikte rekeningen creren, of je eigen GnuCash rekeningstructuur importeren. \n\nBeide opties zijn ook
         beschikbaar in app Instellingen zodat je later kan beslissen.
     </string>
-    <string-array name="recurrence_period_strings">
-        <item>GEEN</item>
-        <item>DAGELIJKS</item>
-        <item>WEKELIJKSE</item>
-        <item>MAANDELIJKS</item>
-    </string-array>
     <string name="menu_scheduled_transactions">Vaste journaalposten</string>
     <string name="title_scheduled_transactions">Vaste journaalposten</string>
     <string name="title_select_export_destination">Select destination for export</string>
diff --git a/app/src/main/res/values-zh/strings.xml b/app/src/main/res/values-zh/strings.xml
index 70cc8ad5..ebc191ce 100644
--- a/app/src/main/res/values-zh/strings.xml
+++ b/app/src/main/res/values-zh/strings.xml
@@ -482,4 +482,5 @@
         <item quantity="one">Yearly</item>
         <item quantity="other">Every %d years</item>
     </plurals>
+    <string name="toast_error_edit_multi_currency_transaction">Multi-currency transactions cannot be modified</string>
 </resources>
