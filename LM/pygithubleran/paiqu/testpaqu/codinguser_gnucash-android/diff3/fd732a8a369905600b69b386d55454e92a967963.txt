From fd732a8a369905600b69b386d55454e92a967963 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Mon, 29 Oct 2012 01:02:55 +0100
Subject: [PATCH] Added list navigation of accounts to transactions activity
 Removed start of emulator from pom Upgraded actionbarsherlock to 4.2.0

---
 GnucashMobile/pom.xml                              |    2 +-
 .../ui/transactions/TransactionsActivity.java      |   74 +-
 .../ui/transactions/TransactionsListFragment.java  |   14 +-
 GnucashMobileTest/pom.xml                          |   15 -
 com_actionbarsherlock/AndroidManifest.xml          |    4 +-
 com_actionbarsherlock/pom.xml                      |   15 +-
 .../abs__ab_share_pack_holo_dark.9.png             |  Bin 2866 -> 2863 bytes
 .../abs__ab_share_pack_holo_light.9.png            |  Bin 2862 -> 2859 bytes
 .../res/drawable-hdpi/abs__ic_clear_disabled.png   |  Bin 0 -> 1774 bytes
 .../res/drawable-hdpi/abs__ic_clear_normal.png     |  Bin 0 -> 1945 bytes
 ...bs__ic_clear_search_api_disabled_holo_light.png |  Bin 0 -> 1504 bytes
 .../abs__ic_clear_search_api_holo_light.png        |  Bin 0 -> 1540 bytes
 .../res/drawable-hdpi/abs__ic_go.png               |  Bin 0 -> 1415 bytes
 .../abs__ic_go_search_api_holo_light.png           |  Bin 0 -> 1252 bytes
 .../res/drawable-hdpi/abs__ic_search.png           |  Bin 0 -> 2280 bytes
 .../abs__ic_search_api_holo_light.png              |  Bin 0 -> 2271 bytes
 .../res/drawable-hdpi/abs__ic_voice_search.png     |  Bin 0 -> 2070 bytes
 .../abs__ic_voice_search_api_holo_light.png        |  Bin 0 -> 1833 bytes
 .../abs__textfield_search_default_holo_dark.9.png  |  Bin 0 -> 110 bytes
 .../abs__textfield_search_default_holo_light.9.png |  Bin 0 -> 105 bytes
 ..._textfield_search_right_default_holo_dark.9.png |  Bin 0 -> 108 bytes
 ...textfield_search_right_default_holo_light.9.png |  Bin 0 -> 103 bytes
 ...textfield_search_right_selected_holo_dark.9.png |  Bin 0 -> 114 bytes
 ...extfield_search_right_selected_holo_light.9.png |  Bin 0 -> 111 bytes
 .../abs__textfield_search_selected_holo_dark.9.png |  Bin 0 -> 114 bytes
 ...abs__textfield_search_selected_holo_light.9.png |  Bin 0 -> 112 bytes
 .../abs__ab_share_pack_holo_dark.9.png             |  Bin 2851 -> 2849 bytes
 .../abs__ab_share_pack_holo_light.9.png            |  Bin 122 -> 191 bytes
 .../res/drawable-mdpi/abs__ic_clear_disabled.png   |  Bin 0 -> 1775 bytes
 .../res/drawable-mdpi/abs__ic_clear_normal.png     |  Bin 0 -> 1869 bytes
 ...bs__ic_clear_search_api_disabled_holo_light.png |  Bin 0 -> 740 bytes
 .../abs__ic_clear_search_api_holo_light.png        |  Bin 0 -> 743 bytes
 .../res/drawable-mdpi/abs__ic_go.png               |  Bin 0 -> 1538 bytes
 .../abs__ic_go_search_api_holo_light.png           |  Bin 0 -> 570 bytes
 .../res/drawable-mdpi/abs__ic_search.png           |  Bin 0 -> 2280 bytes
 .../abs__ic_search_api_holo_light.png              |  Bin 0 -> 1541 bytes
 .../res/drawable-mdpi/abs__ic_voice_search.png     |  Bin 0 -> 1937 bytes
 .../abs__ic_voice_search_api_holo_light.png        |  Bin 0 -> 794 bytes
 .../abs__textfield_search_default_holo_dark.9.png  |  Bin 0 -> 106 bytes
 .../abs__textfield_search_default_holo_light.9.png |  Bin 0 -> 100 bytes
 ..._textfield_search_right_default_holo_dark.9.png |  Bin 0 -> 105 bytes
 ...textfield_search_right_default_holo_light.9.png |  Bin 0 -> 98 bytes
 ...textfield_search_right_selected_holo_dark.9.png |  Bin 0 -> 107 bytes
 ...extfield_search_right_selected_holo_light.9.png |  Bin 0 -> 107 bytes
 .../abs__textfield_search_selected_holo_dark.9.png |  Bin 0 -> 109 bytes
 ...abs__textfield_search_selected_holo_light.9.png |  Bin 0 -> 109 bytes
 .../abs__ab_share_pack_holo_dark.9.png             |  Bin 2875 -> 2878 bytes
 .../abs__ab_share_pack_holo_light.9.png            |  Bin 2869 -> 2873 bytes
 .../res/drawable-xhdpi/abs__ic_clear_disabled.png  |  Bin 0 -> 2531 bytes
 ...bs__ic_clear_search_api_disabled_holo_light.png |  Bin 0 -> 1315 bytes
 .../abs__ic_clear_search_api_holo_light.png        |  Bin 0 -> 1447 bytes
 .../res/drawable-xhdpi/abs__ic_go.png              |  Bin 0 -> 1983 bytes
 .../abs__ic_go_search_api_holo_light.png           |  Bin 0 -> 836 bytes
 .../res/drawable-xhdpi/abs__ic_search.png          |  Bin 0 -> 3784 bytes
 .../abs__ic_search_api_holo_light.png              |  Bin 0 -> 3037 bytes
 .../res/drawable-xhdpi/abs__ic_voice_search.png    |  Bin 0 -> 3053 bytes
 .../abs__ic_voice_search_api_holo_light.png        |  Bin 0 -> 1414 bytes
 .../abs__textfield_search_default_holo_dark.9.png  |  Bin 0 -> 126 bytes
 .../abs__textfield_search_default_holo_light.9.png |  Bin 0 -> 126 bytes
 ..._textfield_search_right_default_holo_dark.9.png |  Bin 0 -> 125 bytes
 ...textfield_search_right_default_holo_light.9.png |  Bin 0 -> 127 bytes
 ...textfield_search_right_selected_holo_dark.9.png |  Bin 0 -> 128 bytes
 ...extfield_search_right_selected_holo_light.9.png |  Bin 0 -> 128 bytes
 .../abs__textfield_search_selected_holo_dark.9.png |  Bin 0 -> 114 bytes
 ...abs__textfield_search_selected_holo_light.9.png |  Bin 0 -> 126 bytes
 .../res/drawable/abs__ic_clear.xml                 |   22 +
 .../res/drawable/abs__ic_clear_holo_light.xml      |   22 +
 .../res/drawable/abs__search_dropdown_dark.xml     |   22 +
 .../res/drawable/abs__search_dropdown_light.xml    |   22 +
 .../abs__textfield_searchview_holo_dark.xml        |   22 +
 .../abs__textfield_searchview_holo_light.xml       |   22 +
 .../abs__textfield_searchview_right_holo_dark.xml  |   22 +
 .../abs__textfield_searchview_right_holo_light.xml |   22 +
 .../res/layout/abs__activity_chooser_view.xml      |    2 +-
 .../res/layout/abs__dialog_title_holo.xml          |    2 +-
 .../abs__search_dropdown_item_icons_2line.xml      |   89 +
 .../res/layout/abs__search_view.xml                |  159 ++
 .../res/layout/abs__simple_dropdown_hint.xml       |   29 +
 .../res/values-v14/abs__styles.xml                 |    5 +
 .../res/values-v14/abs__themes.xml                 |    4 +-
 com_actionbarsherlock/res/values/abs__attrs.xml    |   58 +-
 com_actionbarsherlock/res/values/abs__dimens.xml   |   23 +-
 com_actionbarsherlock/res/values/abs__strings.xml  |   11 +
 com_actionbarsherlock/res/values/abs__styles.xml   |   28 +
 com_actionbarsherlock/res/values/abs__themes.xml   |  107 +-
 ...tionBarSherlockTrojanHorse.java => Watson.java} |   12 +-
 .../com/actionbarsherlock/ActionBarSherlock.java   |    5 +-
 .../src/com/actionbarsherlock/app/ActionBar.java   |    9 +
 .../actionbarsherlock/app/SherlockActivity.java    |   11 +
 .../app/SherlockFragmentActivity.java              |   17 +-
 .../app/SherlockListActivity.java                  |   11 +
 .../app/SherlockPreferenceActivity.java            |   11 +
 .../internal/ActionBarSherlockCompat.java          |   44 +-
 .../internal/ActionBarSherlockNative.java          |   10 +-
 .../internal/app/ActionBarImpl.java                |    6 +-
 .../internal/app/ActionBarWrapper.java             |   14 +-
 .../nineoldandroids/widget/NineFrameLayout.java    |    8 -
 .../nineoldandroids/widget/NineLinearLayout.java   |    8 -
 .../internal/view/menu/ActionMenuPresenter.java    |   11 +-
 .../internal/view/menu/ActionMenuView.java         |    3 +
 .../internal/view/menu/MenuItemWrapper.java        |   22 +-
 .../internal/view/menu/MenuWrapper.java            |   13 +-
 .../internal/widget/ActionBarContainer.java        |   13 +
 .../internal/widget/CapitalizingTextView.java      |   10 +-
 .../widget/CollapsibleActionViewWrapper.java       |   30 +
 .../internal/widget/IcsColorDrawable.java          |   41 +
 .../internal/widget/IcsLinearLayout.java           |  154 +-
 .../internal/widget/ScrollingTabContainerView.java |    1 +
 .../com/actionbarsherlock/view/MenuInflater.java   |   41 +-
 .../widget/ActivityChooserModel.java               |   31 +-
 .../widget/ActivityChooserView.java                |   13 +-
 .../com/actionbarsherlock/widget/SearchView.java   | 1811 ++++++++++++++++++++
 .../widget/SuggestionsAdapter.java                 |  733 ++++++++
 .../internal/ManifestParsingTest.java              |    8 +-
 114 files changed, 3693 insertions(+), 225 deletions(-)
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_disabled.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_normal.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_search_api_disabled_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_go.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_go_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_search.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_voice_search.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__ic_voice_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_default_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_default_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_default_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_default_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_selected_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_selected_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_selected_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_selected_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_disabled.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_normal.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_search_api_disabled_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_go.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_go_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_search.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_voice_search.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__ic_voice_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_default_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_default_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_default_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_default_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_selected_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_selected_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_disabled.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_search_api_disabled_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_go.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_go_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_search.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_voice_search.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__ic_voice_search_api_holo_light.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_default_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_default_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_default_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_default_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_selected_holo_dark.9.png
 create mode 100755 com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_selected_holo_light.9.png
 create mode 100755 com_actionbarsherlock/res/drawable/abs__ic_clear.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__ic_clear_holo_light.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__search_dropdown_dark.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__search_dropdown_light.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_dark.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_light.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_dark.xml
 create mode 100755 com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_light.xml
 create mode 100755 com_actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml
 create mode 100755 com_actionbarsherlock/res/layout/abs__search_view.xml
 create mode 100755 com_actionbarsherlock/res/layout/abs__simple_dropdown_hint.xml
 rename com_actionbarsherlock/src/android/support/v4/app/{_ActionBarSherlockTrojanHorse.java => Watson.java} (92%)
 create mode 100755 com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java
 create mode 100755 com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsColorDrawable.java
 create mode 100755 com_actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java
 create mode 100755 com_actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java

diff --git a/GnucashMobile/pom.xml b/GnucashMobile/pom.xml
index 89ba7c7f..a137b113 100644
--- a/GnucashMobile/pom.xml
+++ b/GnucashMobile/pom.xml
@@ -29,7 +29,7 @@
   </parent>
   
   <properties>
-    <abs.version>4.1.0</abs.version>
+    <abs.version>4.2.0</abs.version>
   </properties>
   
   <dependencies>
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
index 71bde5c4..49d3d38a 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsActivity.java
@@ -18,18 +18,27 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Account;
+import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.DatabaseAdapter;
+import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.ui.accounts.AccountsActivity;
 import org.gnucash.android.util.OnTransactionClickedListener;
 
 import android.content.Context;
 import android.content.Intent;
+import android.database.Cursor;
 import android.os.Bundle;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
+import android.support.v4.widget.ResourceCursorAdapter;
+import android.support.v4.widget.SimpleCursorAdapter;
 import android.util.Log;
 import android.view.View;
 import android.view.inputmethod.InputMethodManager;
+import android.widget.SpinnerAdapter;
 
+import com.actionbarsherlock.app.ActionBar;
+import com.actionbarsherlock.app.ActionBar.OnNavigationListener;
 import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.view.MenuItem;
 
@@ -60,17 +69,74 @@
 	 * Database ID of {@link Account} whose transactions are displayed 
 	 */
 	private long mAccountId 	= 0;
-	
+		
+	private OnNavigationListener mOnNavigationListener = new OnNavigationListener() {
+
+		  @Override
+		  public boolean onNavigationItemSelected(int position, long itemId) {
+		    //only when the transaction activity is opened for the 1st time
+		    long accountId = mAccountId == 0 ? itemId : mAccountId;
+		    mAccountId = 0;
+		    
+		    FragmentManager fragmentManager = getSupportFragmentManager();
+
+			TransactionsListFragment transactionsListFragment = (TransactionsListFragment) fragmentManager
+					.findFragmentByTag(FRAGMENT_TRANSACTIONS_LIST);
+
+			if (transactionsListFragment == null) {
+				FragmentTransaction fragmentTransaction = fragmentManager
+						.beginTransaction();
+				transactionsListFragment = new TransactionsListFragment();
+				Bundle args = new Bundle();
+				args.putLong(TransactionsListFragment.SELECTED_ACCOUNT_ID,
+						accountId);
+				transactionsListFragment.setArguments(args);
+				Log.i(TAG, "Opening transactions for account id " +  accountId);
+
+				fragmentTransaction.add(R.id.fragment_container,
+						transactionsListFragment, FRAGMENT_TRANSACTIONS_LIST);
+							
+				fragmentTransaction.commit();
+			} else
+				transactionsListFragment.refreshList(accountId);
+		    return true;
+		  }
+	};
+		
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_transactions);
-
+		
 		final Intent intent = getIntent();
 		mAccountId = intent.getLongExtra(
 				TransactionsListFragment.SELECTED_ACCOUNT_ID, -1);	
 		
-		showTransactionsList();
+		AccountsDbAdapter accountsDbAdapter = new AccountsDbAdapter(this);
+		Cursor accountsCursor = accountsDbAdapter.fetchAllAccounts();
+		SpinnerAdapter mSpinnerAdapter = new SimpleCursorAdapter(
+				getSupportActionBar().getThemedContext(),
+				R.layout.sherlock_spinner_item,
+				accountsCursor,
+				new String[]{DatabaseHelper.KEY_NAME},
+				new int[]{android.R.id.text1},
+				0);
+		((ResourceCursorAdapter) mSpinnerAdapter).setDropDownViewResource(R.layout.sherlock_spinner_dropdown_item);
+		
+		ActionBar actionBar = getSupportActionBar();
+		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
+		actionBar.setListNavigationCallbacks(mSpinnerAdapter, mOnNavigationListener);
+		
+		int i = 0;
+		while(accountsCursor.moveToNext()){
+			long id = accountsCursor.getLong(DatabaseAdapter.COLUMN_ROW_ID);
+			if (mAccountId == id){
+				actionBar.setSelectedNavigationItem(i);				
+				break;
+			}
+			++i;
+		}
+		
 		
 		if (intent.getAction().equals(Intent.ACTION_INSERT_OR_EDIT)) {			
 			long transactionId = intent.getLongExtra(
@@ -106,7 +172,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
 			return false;
 		}
 	}
-	
+		
 	/**
 	 * Opens a fragment to create a new transaction. 
 	 * Is called from the XML views
diff --git a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
index fe8ae972..8c43a37e 100644
--- a/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
+++ b/GnucashMobile/src/org/gnucash/android/ui/transactions/TransactionsListFragment.java
@@ -23,7 +23,6 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.data.Money;
-import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseAdapter;
 import org.gnucash.android.db.DatabaseCursorLoader;
 import org.gnucash.android.db.DatabaseHelper;
@@ -202,19 +201,20 @@ public void onSaveInstanceState(Bundle outState) {
 	public void onActivityCreated(Bundle savedInstanceState) {		
 		super.onActivityCreated(savedInstanceState);
 		
-		//we have already a database open which is cached, so little overhead
-		AccountsDbAdapter accAdapter = new AccountsDbAdapter(getActivity());
-		String name = accAdapter.getName(mAccountID);
-		accAdapter.close();
-		
 		ActionBar aBar = getSherlockActivity().getSupportActionBar();
-		aBar.setTitle(name);
+//		aBar.setTitle(name);
+		aBar.setDisplayShowTitleEnabled(false);
 		aBar.setDisplayHomeAsUpEnabled(true);
 
 		setHasOptionsMenu(true);		
 		refreshList();
 		
 	}
+	
+	public void refreshList(long accountId){
+		mAccountID = accountId;
+		refreshList();
+	}
 		
 	public void refreshList(){
 		getLoaderManager().restartLoader(0, null, this);
diff --git a/GnucashMobileTest/pom.xml b/GnucashMobileTest/pom.xml
index 1294830e..4b53aebf 100644
--- a/GnucashMobileTest/pom.xml
+++ b/GnucashMobileTest/pom.xml
@@ -79,21 +79,6 @@
                 <groupId>com.jayway.maven.plugins.android.generation2</groupId>
                 <artifactId>android-maven-plugin</artifactId>
                 <extensions>true</extensions>                
-                <executions>
-				    <execution>
-				        <id>startEmulator</id>
-				        <phase>initialize</phase>				        
-				        <goals>
-				            <goal>emulator-start</goal>
-				        </goals>
-				    </execution>
-				</executions>                
-				<configuration>
-                    <emulator>
-			            <avd>Nexus</avd>
-			            <wait>90000</wait>
-			        </emulator>
-                </configuration>
             </plugin>
         </plugins>
     </build>
diff --git a/com_actionbarsherlock/AndroidManifest.xml b/com_actionbarsherlock/AndroidManifest.xml
index c4a75f32..7b8a8482 100755
--- a/com_actionbarsherlock/AndroidManifest.xml
+++ b/com_actionbarsherlock/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="90" android:versionName="4.1.0" package="com.actionbarsherlock">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="100" android:versionName="4.2.0" package="com.actionbarsherlock">
 
-    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="15"/>
+    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="16"/>
 
 </manifest>
diff --git a/com_actionbarsherlock/pom.xml b/com_actionbarsherlock/pom.xml
index 5373fb01..3b6ce40c 100755
--- a/com_actionbarsherlock/pom.xml
+++ b/com_actionbarsherlock/pom.xml
@@ -3,15 +3,14 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
-	<groupId>com.actionbarsherlock</groupId>
-	<artifactId>library</artifactId>
+	<artifactId>actionbarsherlock</artifactId>
 	<name>ActionBarSherlock</name>
 	<packaging>apklib</packaging>
 
 	<parent>
 		<groupId>com.actionbarsherlock</groupId>
 		<artifactId>parent</artifactId>
-		<version>4.1.0</version>
+		<version>4.2.0</version>
 		<relativePath>../pom.xml</relativePath>
 	</parent>
 
@@ -27,11 +26,6 @@
 		</dependency>
 
 		<dependency>
-			<groupId>com.pivotallabs</groupId>
-			<artifactId>robolectric</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
 			<groupId>junit</groupId>
 			<artifactId>junit</artifactId>
 			<scope>test</scope>
@@ -47,6 +41,9 @@
 				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
 				<artifactId>android-maven-plugin</artifactId>
 				<extensions>true</extensions>
+				<configuration>
+					<nativeLibrariesDirectory>ignored</nativeLibrariesDirectory>
+				</configuration>
 			</plugin>
 
 			<plugin>
@@ -132,7 +129,7 @@
 									<pluginExecutionFilter>
 										<groupId>com.google.code.maven-replacer-plugin</groupId>
 										<artifactId>maven-replacer-plugin</artifactId>
-										<versionRange>[1.4.1,)</versionRange>
+										<versionRange>[1.4.0,)</versionRange>
 										<goals>
 											<goal>replace</goal>
 										</goals>
diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ab_share_pack_holo_dark.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ab_share_pack_holo_dark.9.png
index 6c1415772d03a71c0677f6e2461521bfae829ce9..81b87b86c959a98c478177270c979763831ebf66 100755
GIT binary patch
delta 201
zcmdlawq8uJGr-TCmrII^fq{Y7)59eQNUH&{4hI{M<Xm>@#746?E`GKoZ+91l{~)+v
z@AAnL6~*fr*h@TpUD@xjF|%k3>Wf7F1*%W<ba4!cIQ;hdL(T>Tfrdc+Tg(2sXU;2b
znlwRs;rBZA@0|)aZxu)Wv1OS0=-a7tHeT)SbHW#Y?>rjpHv3+ftykiq7Ea+XiD|3b
yS{I9``OMfL-^v^BdDY*7A<pdA{qyUem4D(Chzfb<+Q+~Rw9eDj&t;ucLK6T;Zc5_-

delta 206
zcmZ24wn<E}Gr-TCmrII^fq{Y7)59eQNK1h*2OE%F>E&~7avzuYM&%f;dWB?<AYTTC
zDpdxChGqtapZ|gMO9qBg0|tgy2@DKYGZ+}e^C!h0bpvXQ^>lFzskrs#+C?@71)kQ2
z|7)xMKaUm{^*oxPdhV#F$v!u=Gd+<Fn{>|Y{hB*ji8+G5*Zj!Mi>vDRWqTAHoAx!I
zy0U}0Q1lZ|fGwM2(>>>p_t(l>DJeMv9rgb|GlTi&f-*motEYiBF?hQAxvX<aXaWE*
C{6?n$

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ab_share_pack_holo_light.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ab_share_pack_holo_light.9.png
index f4ff16be7323486b7fcd49b3e9bb07816a75b53c..8fc83e22efde5509c563c97a836d869d05ff5dc6 100755
GIT binary patch
delta 197
zcmZ1{wpvWFGr-TCmrII^fq{Y7)59eQNUH&{4hI{M<Xm>@#746?E`GKoZ+91l{~)+v
z@AAnL6~*fr*h@TpUD@xjF|+7!7F&kr0M*BOx;TbJ9DaNKAa8?$0K>t<5fV#pONK4T
zIKjHeINoH<PIjS>ao%-u4L(aZ$4&ljzs|3__QBJ@?ecrqT6rZNYT*=~CUGr{SKCd~
uXNEzdJy&&+_bSE%<zN1NzrE(K|4jq-qR9+z<A4@1c(S|txvX<aXaWGjD@Bn2

delta 202
zcmZ22woXj3Gr-TCmrII^fq{Y7)59eQNK1h*2OE%F>E&~7avzuYM&%f;dWB?<AYTTC
zDpdxChGqtapZ|gMO9qBg0|tgy2@DKYGZ+}e^C!h0bpvXQ^mK6yskoK&<NtqqX0tN~
z4lpPdoS3{yZrO>(V-oMA*md+$6fU|)TovBZ5mj+zQDC>5u2h$pBj>J&BM#x+9-0pB
x!iQJ5E*9h6;QA#i@9%QMGzMv)vH$-wGpxu<WjDDrMG(kk@O1TaS?83{1ORVBL9_q>

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_disabled.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_disabled.png
new file mode 100755
index 0000000000000000000000000000000000000000..d97c342d53690e6d286efbe5f37562747a49b96d
GIT binary patch
literal 1774
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
QjQ{`u07*qoM6N<$g6k0wDF6Tf

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_normal.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_normal.png
new file mode 100755
index 0000000000000000000000000000000000000000..33ad8d4b891b14d934e470b2222571ea859c77a6
GIT binary patch
literal 1945
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_search_api_disabled_holo_light.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_search_api_disabled_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..3edbd740858acce452a65675b594d87cd85c4cde
GIT binary patch
literal 1504
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdz$r9IylHmNblJdl&R0hYC{G?O`
z&)mfH)S%SFl*+=BsWuD@%xRe+5hW46K32*3xq68pHF_1f1wh>l3^w)^1&PVosU-?Y
zsp*+{wo31J?^jaDOtDo8H}y5}EpSfF$n>ZxN)4{^3rViZPPR-@vbR&PsjvbXkegbP
zs8ErclUHn2VXFi-*9yo63F|8<fR&VF+bTgE72zA8;GAESs$i;Tpqp%9W}skZsAp(w
zVs37(qhMrUXrOOkq;F`XYiMp|Y-D9%pa2C*K--E^(yW49+@N*=dA3R!B_#z``ugSN
z<$C4Ddih1^`i7R4mLM~XjC6r2bc-wVN)jt{^NN*WCb*;)Cl_TFlw{`TDS%8&Ov*1U
zu~h=P6yk;40$*Ra!Fk2dfC2`Yennz|zM-Cher_(vUtrb6B|)hOXJA!b98y`3svneE
zoL^d$42+L7Wte7Q*x|Pbq!8#DEB~TQV5B7Gxa237=BDPAc)Hjs0cG@3GE=M!3@r={
z4b4pq%#94pEDV9(H*t1xb+I&caW-@@H8O>nflaTYtD^x(vzwc<o1vkLo1>wbv89=@
zo12R>knQRQ)9aa6T#}fVoC>oy6KF3~uNhvwR?bDKi6!|(A^G_^uoMuGkzbNuoRMFk
z;2dnK;G3A7nFr#7q6gwzm(-%nveXo}qWoM1aQIqfVzJ-F(A>z`+0Dqw5#euVHw$9}
zR|{85phuLTdQ->=Gku_A^g)RODY3wWfGH5fgeQF<2cCIS^ME;~2$(fE*e!Y)7?=b+
zT^vIyZoLURops1T#P^YM)`G6?uC=+kf7_B4{*@J9^x)duU6<$Tu^imLQtVB+#DuWI
zKp&sr#e2ikRF+h_7hGg<I`rh6t@`&l*2Zt@_NSk#EIc!F{R9UOg{-d&@8%hwO`F_$
z-J<jMp&Q$0FEQv}Ui{!+W2Lo(ac^qwErEmjJfT5~GoLWbYhqt7?bM*ZqdZRafXbZ=
zlU+?q{8wM)N`Cx7&!REkOnTeZtf_5>6C3|<yg$y&UYWM}=3W&~^SyEBr?trKx%|>*
z?e*8ufg<vAmTXgQ_+>cND|MEKid{<NzHLg0EbNC^=RFs{npL{!{L_=nM_M?9=AVB)
z@nFJ-H5y)i0xTQj*6&Z>9C;-~RZ9Bc^sP~EP3ND_zG5Dxwk6j&$wE~4;Qc*`ssan{
zzn`9=dZ&RsirvSfCP;`whUHEmQ}f9$MSB`#rfaa*Eq?H{s4_-JY<t>+eJUGP9%1oq
zJCJw4f2WB2si`MZ$~H#$*nP`3S@opI(pSE?i0N0@>$2Vb7oL|#u)gB_!dQ1$La5q`
zDeOVQ4#QJ|EiB?JGJhRxA5Ld^&RpYp@TAicHpRs4(vR3C88QC9{5(weR))#4lPN-s
z1=7=NbKU$Nr0Hgbao(RTxaH2IZ#(aDrMoH3_0umA{h;I6BI6;^&o0#XM(`ImzsjuT
zTnrQ3)U=jJb<Gy-J0kNufp603V%9^+l^zf31%8MoFi8D9pK<b-qZ6pi^>p=fS?83{
F1OTcH9Pt1E

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_clear_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..90db01b5bcf1246d6a94e83930cac63c93a6cf83
GIT binary patch
literal 1540
zcmbVMeM}Q)7(Y=F%P>l6wi%|!l_|z@AEl-3t(BF#o>nN3LV!6Gj`m7V?OnYdwt!49
znSha?!(a?-ZbQt1aiUJQshMnS5#lskP=esLYSf@naft@zobD}B-5<t3cFEoQyzl$`
ze$V$c=4P*mQ!G$G5EN%yNjty_hu@fJ@by<!Jpjv_vb9Lg6Wwxvl{m=a63aN)=4Hz{
z2gkZ9H}-QT2%7HZ^NZvndlu;wy(k;jL4#f&KtqrzJ?LYd>p2-N<H~u#jEtQ+gTTDY
zj1=nZxZOu_9)4w&#N}0G=R2#`JB=<ReK~9jl7PU=$t)c7ZV>!r(2Pv-l0Xh0V+cH{
zBCj_i&zvf<=fadIaj*`>Q=E7j4yO?)k*d|}^=epy6F7!zFhY|;=*d(KiR19pg8*xi
z%S}3HX37@WnGugH`$!B61OjLv6&0m&j4&FFVGfNZ1!$!BD+QSirU-sjgn{P#PKo!)
zyePn7Mz&0>kj)72^jQdApWXhPSny9J3Zx7RvObJJam?!t$2F<#mmS;-H(sjk&#&}x
zn1l0+6_OLw!>x*dLGE5{D69y)A#)@i6ouVDi_Qu!C&)J1jDQ=|#k)wHFyI8C*W!8&
zo@O9G_*#m#(ncLk5wuRDi*URQYq45zkaC7$D25<t#zLf}8q-o4hNggQWg=Lc;Fnp!
z$wln)!0r^*`bsQGNgOMSQobl|h;%@%N0ddsNA$r|o({INPF@J_!{vDvEzL>%CeFo3
zq8FabFUh~eK27K~6vb#VEHC1w7(*&<HCT-x5M&DL`ae0tfHPRQIsVfukt5K7VextE
zgU$2d;RG--5*Uq=?ZIIPiqhI>OMY<pPC-s)lto$cRDG~AcN`hCj#Bj5n4|`D&7&EP
z1EJ2oHiZSP$nBf^cyUc#%n#15vsYKI%*rV2D67tKmkn<!f0``!)v<f_){KphjDIk8
zenMXJ`V(p5!}Nu*QL#~$gH5YCk=?60q0<bDet)s_(AbYlhx#u@-&{6Sv-4reACC-N
zL+BuGb>E%YZoXWL^{OtY6DOvBgsXZor;+pCKQtKq#@Yve*CfR+fr{_{8B9ptb8gkK
z%ULbS=hkX#6P4u07w&nq!(Erw700WC$5)#d&8Z*xO$anUywM8X%;|F<Tk%=$C^PVt
zeOWx?gWFq^ZlQb5y>;}vpSN{JH^dZ%bO*Y+E_$@+l9v9er1)=9rDDlZ^_h;vo|CVI
z?rvVb&$hTl?AAji%>~Hy)<h!VQ`JP9iHVwa`{Bt9)m7yc{~|nbW2OzhuMVA9iZ|@A
zpPj$o88=W@tu(dtC+v4DJ+HV@p)l++(7O`5^X^w3zs7%4c4VkNdHe0aJ8{v~jr6sq
zf86(G3_0?YH<Y(G&+2$rS4Z}kPq}Y2*3LJ?2#W@Y*x66jp)Y22%|4v;cwx_oGGXRf
z#X#)r^jRih+LMk8O_#2=&KNU%GH7mJS6&dxencNBGR>*)-Pauu3ldM%&)Z$xHfTKD
zyVr^=X!?Dg@AQgMK?U!MZESw;m{+5X-^QKZnN?hof%lxLslBZFb<}vvcfGCr&M()E
oGsi!#`|0>*OK8j7iTF}z;g*rN|9V1g4gZ&I)@=IAjMA<D0_4Ci6#xJL

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_go.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_go.png
new file mode 100755
index 0000000000000000000000000000000000000000..97b825e83173c3c8efc593f11e3c7df839631291
GIT binary patch
literal 1415
zcmV;21$g?2P)<h;3K|Lk000e1NJLTq001xm001xu1ONa4{R=S+00009a7bBm000XU
z000XU0RWnu7ytkR7->U8P*7-ZbZ>KLZ*U+<Lqi~Na&Km7Y-Iodc-muNV4mRU;^fLC
zz`#&YR8r&~<QN$d8KuB}o`H>lnSp_Ufq@}0xwybFAi#%#fq@|}KQEO56)-X|e7nZL
z$iTqBa9P*U#mSX{G{Bl%P*lRez;J+pfx##xwK$o9f#C}S14DXwNkIt%17i#W1A|CX
zc0maP17iUL1A|C*NRTrF17iyV0~1e4YDEbH0|SF|enDkXW_m`6f}y3QrGjHhep0GJ
zaAk2xYHqQDXI^rCQ9*uDVo7QW0|Nup4h9AW240u^5(W3f%sd4n162kpgNVo|1qcff
zJ_s=cNG>fZg9jx8g8+j9g8_pBLjXe}Lp{R+hNBE`7{wV~7)u#fFy3PlV+vxLz;uCG
zm^qSpA@ds+OO_6nTdaDlt*rOhEZL^9ePa)2-_4=K(Z%tFGm-NGmm}8}ZcXk5JW@PU
zd4+f<@d@)y<Co!IETAK>L(o<5icqT158+-B6_LH7;i6x}CW#w~Uy-Pgl#@Irl`kzV
zeL|*8R$ca%T%Wv){2zs_iiJvgN^h0dsuZZ2sQy$tsNSU!s;Q*;LF<6_B%M@UD?LHI
zSNcZ`78uqV#TeU~$eS{ozBIdFzSClf<pirb>s*^S+dw;4dus<{M;#|MXC)T}S9v!D
zcV!QCPhBq)ZyO(X-(bH4|NMaZz==UigLj2o41F2S6d@OB6%`R(5i>J(Puzn9wnW{e
zu;hl6HK{k#IWjCVGqdJqU(99Cv(K+6*i`tgSi2;vbXD1#3jNBGs$DgVwO(~o>mN4i
zHPtkqZIx>)Y(Ls5-Br|mx>vQYvH$Kwn@O`L|D75??eGkZnf<fA&q<hjdcOIBrHe!s
zw=Vg%EOYt2l_9H6uW?zsZ@uM)ZJSIsZ`o?HZTk+Zo%?sY?m4?JZ2yCUIfs58X+I`@
ze8oxYQ|HbkpZ#@y(nak{N3SGa{daxNO`BVH@6_K@zJKCj-ea*R`=4dL5P5m<b^crV
zcNac1eKP(0>g$5<;Xeg_o%+-I&+-3%01W^SH2RkDT>t<8AY({UO#lFTB>(_`g8%^e
z{{R4h=>PzAFaQARU;qF*m;eA5Z<1fdMgRZ-=}AOERCwC#m(Om~KoEz&**Zc+6`&vl
zFF_IqZcvrdOZj);#DN<R#%my?0);E8?KXLhD5O+v9Ge{uPH2mQ?cD^ahj`_K<<;-=
zZ)RsbE6V@93@gA2aOD9(`D+3B^H5SU>I*<H2nNNXYUh5!A`UPFtkdKNDVgN+5R2u&
z(BN+LmV4Y{oj}a;0oT|Fw~{y9q3MG#l{sht+TKZC)AT`91J(c~Z9k1)`5>wR0w_6Y
z#|u$Cu>cf^?f9iDqTV!%#gZ}ZJc(YoA?g8iI&#v`5#i#XaFK>v(ewHUHwTLTji^!x
zYC5=hO|ao+q}>lFa7K<@rh}P_&FC3TZqO*-?_6^*8xzLiqk~;;(!i7<d;yjTY4`E_
z4jbhTf|?<kSAco{`@2I<&}AoiTHpQX{zpb+*fNBl1A$)D+GE6sZ21lZdU5L$Lk5h?
z7pV_GpqI2hGi1OS8Fm?krWfUplJ=LGyxK*7`j-I$NfPd#%P-s)T?&yveAxZ!B3}of
z)4P!W#*hK0)NWu*ja_IOqWH*Nz7F6QVA04+zB)uo1`zch>~ricUk$KKI63G)+~b&^
z?(!hzr%YKR;5xS%aY{B%UMjllDu7@x2#R9=-Cg?w3I#b|ORnbwSslbzfU6JqJpeVc
V0Ob<l1swnY002ovPDHLkV1mKvZP@?-

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_go_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_go_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..7e1ba2adc6277b31972ba5202892490a6cd5e8b8
GIT binary patch
literal 1252
zcmbVMTTC2P7#<KUmsTo@=~fdbv&6)d-MK7#nF$LHGdpFC1GsEqjWpe1<^Uti#hC*;
zY!h8k+t3<fz+fL5n>ID6Y4Hs&X|)=C;XxB)B3d=E8WR$m5RIw$=9y)e`at^NBs1qf
z=ltLI-)DZH@9@6HgN+!5?MwHH8MNa5TYn$=y2avOXbHen4h~vlu%I{q<27p(;Auk{
z2N|GfvoEZHP7J$eOwZ<EPJWtGEhDV>I$_VS5gNlfyFFV`CjrDq!MJWFiOs9m30&8b
z#BfxmWLp3edT-GIgT=nATAWl_jp**eJ3S5&7yv4`XH1zc=Ou|UFNb9Rm?ZGB3Y<(5
z+fL==0bH;gfJehrNTp&F9;3r_q$3`Wx8n>&QzXTZG!vrZT!i5$3a>l_vgT-GTt<{C
zw$Ls~Oh9OJBv~jF!i7lKa>hxTWm%ttVM0hF<j$H<@j|8>tTKqeRUO@ix@F=%qcUnu
z!z6(`-44O9WqF6#bSsHMDI-0_Ch0Im8ipTNS=)sfaL0{ZwcYHj4af{|t!YO^^%x6Q
z!6<ikH{>fKZ@7L(M@3PlL`$7EfC<xLl0Y|MP1iVzPEa%*@1Wug6-&@4{0>1(iELC9
zXfet}s~o#w`4k_CNkUAL1c|0aiKk-`HWra2Q9yD^s$$co3l&oZRl7Q}Tfs)}isb|c
zDA01UmNixFfPo1MTJD5p<HBGRmlahv{k>nF?Px{d=rcf*9LvDV`Q`Lo?2B}q5d?|p
z;qSyPNQnrQN~Bm62vNam|0ic8a)$Jq<3G((JwhGmi#x54Hao)uOf)eL8jZy_64x=T
z=ApF6XT2M@-un3dIck6DG<QC{cVXl6z=J)bXP>Qa>V9RuIseP$z|e~i2M^tDIdS5h
zk<E)uGCq>o>U!$<@Yzo`U;Fa?mgOIa{Ly@5Rb6Z&7Jgm127mi{ZR_&Y!?)MF*7+;7
zrE_m?tt_1(O8?aDNwlUO*!xGicE<gx=0Ne8BS$XvKKgEpw6wqN&(3DH?e$^)=z7h`
zIz2EaE`#Ayb!>Bo>;}@e#{0!!!(+kEmK%6N{^pUPxoGPL#_^%Hk>^(P#>#=&xBotM
zVWaESpRUvfy(fPE;^gYV=YQ^RcqxCgJ^19yOZQ%~7qLA*=1NTqts5WS{4Nx@ICN}&
v)&4g0J$C4PqkHY6wfgq%$4`HH>_&g723t25mW?wr<^N7P)hE8!lb`z+0I{Ba

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_search.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_search.png
new file mode 100755
index 0000000000000000000000000000000000000000..4be72f108ba1a4f36da5c3a59b1ed08ddcf7cb8b
GIT binary patch
literal 2280
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..72e207bc5dc80ca782abd4c4bf7a601d3109d5a2
GIT binary patch
literal 2271
zcmbVOX;c&E8Xk(uqLftOs#S0ZQM4t=Ocp{SNH9ZK6A+Na%VJ0-BtRCENJ0bzSG-7}
zK&w<y6k01$L9Nh=5kalHs8p{AQX}Ge6)-3$3U{Jn?+;IZ+&O3Fd%y2{pXc4rnN1P=
zKnMFT?EwIA2o6Fbu@$tuwv({0TCX3(mYJG>I8Bs7tkDWoDBv$rq@ZB1OpuC3q5@IY
zigTzB09cEq(Q%qMUKmTLkdXuy9g<F_#LxiX<EK*!gz2aTOhHqna$kI3Q!^fvihS|0
zbRNW0a!`phNUuVp^!#X{K3&KZ;r$kYJ~|dgAVW0*P$$cft64f<{5xJ2CR>ilc<`Ny
zCfyhR-l;fV1jtdSP>@c7h(gE<0=-}oOr<dx3{Q{(!4MgukYNfDX0WIf76gGG9z14E
zB@(kD5$*?D*v=O((P)$`GFhwDlC)HkLX}E}nM|gIgF+!<8bo!LTqDpC<!bkF1_V_L
zRZ^u!s*r;gMnQ^VrN$SJdHOyCnUcr*NGw->NEDVbvQD5R!z73-lUd?=r>)jRqJO#Z
zNo{p>mJ%gLqH4uTl@P0k*nJ#~<?indSrjpESm7!uRun-7q7bf>p>j<y;)};_NFu3-
z1;O4B3^QmDg93SZ!&vw<4ibPc=?Di#=oI=m$EUDdDi=Wz3X{vF1;8-E^@qKvOfM>z
zi*PVGfIE&2ma8=axey(<E5+=7z<U2Jmc>z_0*yiytx#l)cR++hp;4$M3MI&iqJunv
zP%5|VE#-M1ErP0~nW%`XQpmt}`DIBzVIP4R6b^?=S?vE;+#Ieq6$<bUU}AybKVU`w
zPtM4gGh|D1{7<utA7LG65kIy*w)r?bs2rOZ6*d}Mg=0YgFwrp>@sHNsIu*M*s62Ic
z^Pl>EKUz_j)LZ`iwIF5n)&{{W3is;w?X#zF`QO;q?p^QZF7i4h%7AAU`B&YO+`m_X
z+ZQoiuxuXeTe(lx!D>qmlU;Uh9J&4Ix3-~|$9kS-o-v*-aveV2HsaG~&TiiMV8opD
zqrqS(o!;Rz_;X!d@vl_}4)BZlldttZi8tqUfi^Fjb_9Cs{7yrI)mDl4`HNbo(yIyk
zR_-3NW_Pvyn2&3rZ8^^;!rMC4`(rwrNL#-4!`TwdPolrN9?nX<%U*J|^ZwJ$!;+9f
zW3g4rXgm;f&PF#4GR=A@%E@6wjf^O6=zY4gO_M6Z#5TCw%~NV38(WrpC&$MR6fN7I
z)KV_NnZo*~+Vwqrc=1cu23i?to3JLYaG~~o!k@;GB4(~2^g?4DKfKLpVddqwg@uJn
zQ!mp*u}dq5OL_+NP^Q(ow-vNJUhs^%IWuO2J$n53w+SZwcFCQ76UU>yonbEv-BWH}
z+u&uspzRxdGqECYPkTjrditW1gVRbJvaPSuz-gP$nFvN>&YXeP@XFc)qSmp`c=;xB
z)rfA6&9^_~%!_&ylslRpD6rpiTTV7AP56qiiOW20+2s@RTlXC{hy2v}w40MjT98#Y
zuawtu&Q&<asxu-XL3E^JUi0>C+v<)i^QeUwXIs6}dg!>p;emnVp(TzBOH(`JHwS9w
zXS?T39!yHg{e?r?LVo>r^r9iQsUdRsv*pL)0RLY;-{}5uptAw(T5c}h4Fk4h)<S8h
z;rh#KU8mMPb#_aJfwSV$-d@!GMN?)k?_k!!O>=+c8xn=p-A`WZN6jGzfto=!a%BTM
z<h*{4Lv_}{s{Ny7?)P#Zn@$ZZKAr-U5a-sLre2EobT1#Msoxbz$g7&<>#7auzZuf&
zZlOQsX^bog-mo$7`Ar{>sesunRk^dJBs)B!9<j2GIb1_Hu=Dk+SL>~P0Exfz+=_^o
zf0R5J$v*B<?r3k{eW>7tn`_=$R~yG4NGGREUS7WHSwc_l%iFeY2{T$KIA@~qOwYHD
z4)KeAdg0W1apUZi?4YgxYKLyn>GbAJ5Ua3kxFMq>Au%TN-UfChk{h#ouahCdkwzr$
zU&-HNC^-=uo!$TWg&oxL(w31;H>2N_;J>izWt~}(Y#lfI(5=`#;j5p&x_Pr$Kd(f%
z;QQKLwMUK+>kbZNd)PVZyUw3Kx?@Lr9W{5B|3BRbE>0c|vpwono>GbTstHS<P1x&v
ztN-NTKEw5ap}TkQPFFI{uB$jy!dR2;Y=4@z&SUL#^bdfhrND50?Za!`##Q2YS_E-m
zecGJ`z%KA;Q*-C$f}itF<Oo~}zDp~6lw*F{xpwA1E=Z`>Esc3sw<f9I=(4olIDu8Y
zqf<=zr5jg<TdWNY&0{gH+lx->E4bD1A)%p_Bu~$JyP+eE$>&{NT+#)0#IFhpfC+4G
zabFNKr(*rBole9W7%)y1C&uBHSgq@tM*j~UkFLpCQ+8z&^;y@eTw;iRx-JdL+gdaK
zi;3)eZ@)Q~6uKo2;YAT}+q`BPie0{L+Mqoe+;%o)xY&Pal0qsy=g4Gs^lIWA9yCTp
zwePfV*IoqJh2>S^>U{R0*NJ!hO5@VlQwrEIF=Asq|CAG(fD4K~Jm_Awt*Hn1_!5o@
zQ7Z^y{*2!jeCN4qefQ+OgJZvM+;w;C^^>_g_6fpB$JP2PYT>A9by`bd#_GusaHwe`
U7<XqV#q!G$9Kc5oEMC6mzb)ga<p2Nx

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_voice_search.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_voice_search.png
new file mode 100755
index 0000000000000000000000000000000000000000..66d14aec0cce812798db447d173a8fdc1506feaf
GIT binary patch
literal 2070
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
AsQ>@~

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__ic_voice_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-hdpi/abs__ic_voice_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..3481c982862cd524654e200187445a774446567f
GIT binary patch
literal 1833
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_default_holo_dark.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_default_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..70c0e7396edf0237e8830748f2ee74dd505fc0ca
GIT binary patch
literal 110
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DN|1u#}JM4$v^)8w`Z37Am6po
z+v)2g(?*6L{Kh9|q|6ntUCgFX+;C&MOHPl_^o);w9EZO$F?5z?&pxrv{5Q}522WQ%
Jmvv4FO#o+NBeVbj

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_default_holo_light.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_default_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..36e71d85d08310865a37a38a5876dc78d4372af9
GIT binary patch
literal 105
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DFaUz#}JM4$v^)8w`Z37Am6po
z+v)2g(?*7d*QRRDn?J5#Tv6p96EC#Ua9@Rb%R>f+&Xuw+O+F;e0P1D%boFyt=akR{
E0I7Z;-v9sr

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_default_holo_dark.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_default_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..4be4af5fab3a09cce65144c747f24c6ade600359
GIT binary patch
literal 108
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DPvC;#}JM4$v^)8w`Z37Am6po
z+v)2g(?$k`c>N1yj{}(xupO|Bb9m#eWaid)`oBujjyMLj^RWk-B)8T8wKI6S`njxg
HN@xNA1NtG-

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_default_holo_light.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_default_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..e72193f5921ec091dcbdb7a6da540c6ae62a0abf
GIT binary patch
literal 103
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DLqdY#}JM4$v^)8w`Z37Am6po
z+v)2g(?*5`F8a+MS1=|pKR7U*C#OeuU+2*R28QEj<(b@LKCA=kWbkzLb6Mw<&;$Tx
C%ODE?

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_selected_holo_dark.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_selected_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..8f20b9d2673d84e22fe4f92da5c6fba5524bd7c9
GIT binary patch
literal 114
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DN9cm#}JM4$v^)8w`Z37Am6po
z+v)2g(?$k`;P+>Y&mX9;kTm#w#$Mr{KU16J0f(K87k2#dS899B%AjFfa`@;vsXm|~
N44$rjF6*2UngAGyC2#-$

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_selected_holo_light.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_right_selected_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..04f657e1db10e9694c00a2d0240c4dd96a062c37
GIT binary patch
literal 111
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DKk$O#}JM4$q6$m+Zg$O@E^Uw
z81lZJ?Gxk7s`Po4Y{w3tY?zt;Z*oT>n?b-q29KD3>Vk*AGBMnIke8aaIU*2f0)wZk
KpUXO@geCxD+9O{8

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_selected_holo_dark.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_selected_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..99309ef6d3e32a2d3303400aa061e0508a70f758
GIT binary patch
literal 114
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DN9cm#}JM4$v^)8w`Z37Am6po
z+v)2g(?*7dS92?$NlFNF3%qKd&uD!9kGjy}NRLj&jF%7WCrYdnXQ&Wp*=?oVF$ZV}
NgQu&X%Q~loCII6IBdP!Z

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_selected_holo_light.9.png b/com_actionbarsherlock/res/drawable-hdpi/abs__textfield_search_selected_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..9bde7fbdce15a1c2873eb0779ffc0617fd9b15c4
GIT binary patch
literal 112
zcmeAS@N?(olHy`uVBq!ia0vp^0zk~k!3HF)wbmE`DRWO3#}JM4$q6$m+Zg$O@E^Uw
z81lZJ?bE^f8J_14%!p_Ru>Zp|qw<;kM2WLbT|5rH?EgED6zpZtm|hnx*$^-bXas|&
LtDnm{r-UW|n`<Ms

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ab_share_pack_holo_dark.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ab_share_pack_holo_dark.9.png
index ed4ba34ecd9f8ab8c557924fafeae6a89307bd7c..738cb38d072137cb68723c576a801e3f3471bd3e 100755
GIT binary patch
delta 186
zcmZ21wopv5Gr-TCmrII^fq{Y7)59eQNJ{~+90wbaG`h`qW20Fd7e8B)x4R3&e-K=-
zclqRrisCg4>?NMQuIzW%m|4^W-tHAw1F8@9ba4#vIG&uK!1qTzI8UUfiIJrz;_~bN
z|8I#%o;pz>de=itNJM!0!vc#*opFxlSr=EhYKZ+^KHarvaiK|;V61ME;#Ltk*2M`O
h+nZJdEJ~ii&9HKdfLCDclW3sv44$rjF6*2UngAA~J(B<c

delta 191
zcmZ1|wpdKDGr-TCmrII^fq{Y7)59eQNDF~52OE$KJJ%OJxsOYHqjC&ay+X1_kS_y6
zl_~>6Lo)-z&;LOBB?CjL0RzLU1O^7H84L{K`IF+0x&bx%dAc};RNPAX@&CU)vsGF`
zLW6+HiGvcirX;Yjwf#TArg-~Q!*SOaMLT$v1pB32%9|AoJ!P9E*rq!!zUV*6af-O|
kg%^uijDaRG{Qu9);CiX>x`6(Z*<~OBPgg&ebxsLQ04vEn$^ZZW

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ab_share_pack_holo_light.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ab_share_pack_holo_light.9.png
index 8f10bd5222239e82e49c5120888fc9a07a324b42..2ed75a767a87ac573cb7306686035f2100459fb5 100755
GIT binary patch
literal 191
zcmeAS@N?(olHy`uVBq!ia0vp^Qa~)n!3HFaZu8v$Qfx`y?k)`fL2$v|<&%LToCO|{
z#S9GG!XV7ZFl&wkP>{XE)7O>#4jVIz7XKNB(EC6kA5Ry@5Rc=@2?~6F)PwUxdYTwn
zdMu8}YM6Xys1i$1bTr(^uv&TM3(=CrV!cr<Nf+y@B9B-|xi1#GcvVR($opZS0asg{
f_6z&1XIU8>U$Q6V-%Qg7n#<tn>gTe~DWM4fl0G)#

literal 122
zcmeAS@N?(olHy`uVBq!ia0vp^LLkh+1|-AI^@Rf|M^6{W5R22vKmPx>XSQNv;&5z|
z@wwFK#IyY<<JmAa8$G9qhqDDVE3PbPG~n<GII7TgF!e&l7vX$?tz8rUizKlzxM>~E
UNZ9H+7ibuRr>mdKI;Vst0LZr`*8l(j

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_disabled.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_disabled.png
new file mode 100755
index 0000000000000000000000000000000000000000..79228baed020ea1f69c5fbf3043146c74a59d03b
GIT binary patch
literal 1775
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_normal.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_normal.png
new file mode 100755
index 0000000000000000000000000000000000000000..86944a879b986d941e6567d78fbac16c87ae9244
GIT binary patch
literal 1869
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
X97n%sd^_qcZu!B<@kngHG<n58E5F7{

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_search_api_disabled_holo_light.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_search_api_disabled_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..c0bdf0641a192d7f1a648f8b44ca0586299f2d2c
GIT binary patch
literal 740
zcmeAS@N?(olHy`uVBq!ia0vp^q9Dw{0wkH`a%F)OQ<As43&a2R{xkc5JkA1-$YLPv
z0mg18v+Y2FWd)AuKpL!<p|IwJDFXxJ8&4O<5RLOwC!O~b4iq_7Up`}JrgtxQ%OZni
z(=xkviCo@w;mG$7oIReJYf>-nz1YH|+GW>beOJO<&x4C?Y3_ohAr4Hb&I{K{y07O>
zYq)siMdY38b0^FH-T7Vnp?+Dwy~?6uy>H4FYTQ}9{^zjW>fFu1k;Wnu$QYKv+~3MD
zkL9@kLKD%Thtmq5^yY3(U$KE}<vz=N-u0`sC+JTu`!(s#)DN;ZCOW$repPC<5&5y3
ziKqFRsnqsd?M#!U&ar*3U02V0>2<_4f7b{3i<6p<ZT|9Y?U6@^zwVOwZ8`nUiM}bH
zrq+IM{46Gr9*}V&`&iB{OTqY>kgb<{dv;FI&fmd#{QXNuR<0GE-t|?<-_xFWf6rQD
zvp1?(m;K#mK7kAc23PhCb9_I|Uwpe=_~P7`{<9<aWU3Doi+o{zZPYjSRm{!}mv-9B
z?ptlj8JN~2BEuXy^UC~wQ=^Sp5C0Y{ojKEg*_W;srpEJH7mSX5O-j<W-et2j>h<aA
zXM=Q;qpyFhZC2P4&-3c@$zO9XK0Wzqn)K_OojbcCvr^t(33$;f)=<aLYWAscQ%tF^
zddtg@yD?W|grw~E&0Bf=a>KeqT15)CmrGep&{}lJt6uiX0l6LDtGM?vvS&HSN)*I>
zeOGt*EnBDP@;N{6y`LG()$~n&=KfpyvX&R-FPte;1xy60C9V-ADTyViR>?)FK#IZ0
zz|c_Fz)aW3GQ`l_%D~9V#8}q=$S`=EA9fW*LvDUbW?Cg~4U>%CWdb!wf@}!RPb(=;
nEJ|f?Ovz75Rq)JBOiv9;O-!jQJeg_(RK(!v>gTe~DWM4f-EB1!

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_clear_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..15b86cbb21eb3bfb82d36aa9ce750906297a9225
GIT binary patch
literal 743
zcmeAS@N?(olHy`uVBq!ia0vp^q9Dw{0wkH`a%F)OQ<As43&a2R{xkc5JkA1-$YLPv
z0mg18v+Y2FWd)AuKpL!<p|IwJDFXxJdrud~5RLOwgM71v14V4}Gp5Ws<D*hCtCD$=
z?@I4*J=gjM`vn}+b_qK=tJmq~Ob+_MoU<tNlAG6dy_g*ZPfzt~Z{NkClKb|M*Kv)~
zM_V#3$%ucRxTNVt>-Tee`#-<id#AYZzj4#Sx5{jf449@|czEHu{ba_j_jXJQ6T%zJ
z?lJ#h5O;_ZWRT;TKA*kc@aUGs+Z-JOcH9V^nbvjuw4=1+wP_98>|*CiUbcIg;ND=p
zYvDSd^|6iLOdqf$Xmz|*HxtvIt|l!1HU7>O^~bA&&;Fj*b;Hx}3d6&UEnVN=_&rrS
zyUca-tl4jMo@$nFEpTFXzIjD+{<)ibKgss#-rp9f6_EGh??g@(2S&3=!i$ftp1=NR
ze5Ls1tv8DvCnWJd(z*Zhh{1dQ0D<U9ZVxM`wThc;Q*pf5cgkJp2<r`>w1}N=Vgur<
zo}V(7G@F#*B=UQaz!7tS(%x&E*VO)~n0V|`)7|K^f!Elpcvl1$gq+H{_D)QEMqY%8
z_vf<hlNOh3QNFV0(8sCK-x4=E?3`P&aqbeGvp4rX-F;?H=g%vG^Z!kIp_FEO=Gv=!
zFW<`+X01Obo$c@D!ed`v<t!A#?r!OK^U|FR_9!V|DVvYKPVh0XKc8Ew{*=l0m-^Fd
zbByCRyl2(?E#$&4bLfI_fRZfRoA|hYS^F7tZCLXZd;GQn(}8M<YeY#(Vo9o1a#1Rf
zVlXl=G}JXP(>1aTF*LU_FtRc+)-?b!3?Ao)T}9E5o1c=IR*74~B%^nkKn;>08-nxG
qO3D+9QW+dm@{>{(JaZG%Q-e|yQz{EjrrH1%F?hQAxvX<aXaWEQSTGC#

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_go.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_go.png
new file mode 100755
index 0000000000000000000000000000000000000000..bf19833f2e1e2384f9bbd0dc39cd95c98a18dc39
GIT binary patch
literal 1538
zcmZ`&dpOg39R4!pPN9rY%8D#z$+bjA+i}dWG*m9LLPRbRhD{FE!I9HBCb@J>q8M>Z
zk&z^%<TB>c%@bRQ#)+nOe){kHaX!!Ue%|-<KJWYA_nSq)A6Hh;RsaAf<FFVHh<9y3
zP6paz(e)_+z~n+49SI?1G63;>vcG@vo7s2MJqBDZfk5<_)|-ZFZPj9NlZ$EDG$w6h
z^v#+%T(e!=j16si)bzU4HWV6_^stND&E;|<y?Fyqo?WMza|=%qh#ioTN~5(KA{wor
z_FF|5%rW6I&OsgqBP+pRX;_a-KeW__zJ&elAml?CbvIn76O@6aMJGE@+|MRBXVJ@8
zEEb*oQ?f_Zu}I2AT<C>5`nfYv$?gux?t!>a1t>hEvKg8)f3B--`qJ5Vc+(!(3AIVr
zEf|cmkv%DM(IHdcJ}Sgr>#(5~Tn4TISAy%nrQvE?Laps69ZLLT!~WS0QV)l|q?Zr(
z+%hOrq1e~am)EDre9b1+$FL^?hsoiT)~9EmS!B=eNVF1PP(kFF<d_y^6=`yGn*WYG
zA7%O`?;W$pxYIVvtsp|XO-T|crAyPL*U(R1@kmdW`@*QqoZF_X`E9oaZUVc`z@(QK
zO`F|G3JDRYqbc>m`ljix)2F8;hG8d=#8;jP)h%8u`(ez=ZN9^bNjAY1@m$qMwqc*3
zT<9Z^7q-4S8p!6dM-010M=(>rk1eytHi>R-cR}tW4SUb<JI6NjoB6)Ba9g3(9c$xe
zLr%{_BaU%mWuh>F89%<t5pNbFR%c{~WbsNq+AYS@fwR4l6>`nk>dMSnMgg-f@tvLl
z8zJ1Aj<77hi)&@}=LO_3nTIUJfhLK?)MTgjijKG^e1tcvx@U?wd-4zBd{w~Rm8u&)
z61IEoor<-v>QlY};sLy%=GMYsYZW#7TiibW&xJ?UJ`JsgWSk4`n=4tN;yWe=Mb9;n
zrw!^kvCo<)%-&D;l)PgTvU~Z|j|VKn#)IlF_j=`rkH?YbC)&niUyM-$#5;BRtd~Vt
zvDwmlW4up^P2AqKxmr=aNvNMq0%A$n_A&Ybf8s&n?eE2(zp1N=^sXKmlORRu-MwkG
zqSrlb4;RY>`GT2~ews<D5~IbBLnR|AIT8sBC<9gV(e*g<jSoV`dbk3RfB+yh4S+QX
z!~y_fQ2+@20kA0mKr`Z+-xFsjD;?-^90Md7xqWTWB_E0Pjs`$ceFIXUun4|kUW#-$
z2l1{S$oN`x69B1CIE(`k`*c3f<-Di6Mmo=q7adVW4Q9|`4s-Sd4BP*G8YA~BJhpUq
zW&8dDjUjx|Dy(y7X@7Zi*{v9Yf?Y5}V;yD}tgX<<$Y!zXK3M3_AZ6us8!VU3w0ra7
z=Ob!cE!breeQB&brD=<<M2_%sF^5C2_l@Ctas^W&j^_NNuZ_mmTm_QMM89M2o-|(F
z{c0_R;P5w78geg1VNv;(SO1wB^~SGRkLRQ>riQ0>5-Cr@@n4LZ4_+db%Z)RR$pECx
zV&kKm<~rTWsF|5CovUxbAuX%rMqUY#bK_3MXl`zRlnnCM)JOk#@Q|`yZle2b!xrs+
z?}@SMBoaxAn*F`n4c~I!tWN%NL;nce-(Ln9T2XV@wz0+fUe{x3EWBVphWolE&ZMpy
zk=t+u)*ULX*vshr>?xS>+y1VFi$&0ZQQaET*YU40s&SgZh;!v@8ZAA*DJJ>D=a=0<
zFKXQ=k&~NZZGoK2o`n~+R8w?*R>uuBc#s$EF{m0(={u8TU3kQEm9SfChYCn7J#=g4
z(PaFJU1FFZJS#?cN?VCdd62LmX1(Q&iCokv9@0&`0c7bz75vdTSAVg)Dte++U_U8a
z)M|^@vmd{xiq;M1c-`XC1_k!;*hJ-2+0wh;$&M)lJC}axPr((&K~D-GVw^}ZK>;xo
z8*&r{B7jDjnH@k`96(zW%`9zDXdCl`2T+hey^ru3{!bx1A}HkS<^L~SLob9t1%PwH
KV``51)Bgpr>#?r@

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_go_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_go_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..8518498eb6c93e3d4f9f5c806362bf3117b17852
GIT binary patch
literal 570
zcmeAS@N?(olHy`uVBq!ia0vp^q9Dw{0wkH`a%F)OQ<As43&a2R{xkc5JkA1-$YLPv
z0mg18v+Y2FWd)AuKpL!<p|IwJDFXwelc$Sgh{pNk1O+LBLlXZ3S^g`lJZRvY{qJ%{
z)JE;62@md`+|u&UTI}cwuSogKI|c>f4-y`wRCHWT>4=v6Z~W)^Ex~}&Cks#3Ph?YL
zYs=^PA1JbT)~OR;KkxqfX5VYCuTH8yF+BVMK5jv$P8>M!p?~7X|K_(-ZNE?1#j0+Y
zX}rfdsOO!o8=KoP`};Z1zsHB36rFKS#YJJm49Wj>o1-q)hN%bb=nB|jWMKUFU(#;%
zzNww<Gbdcy|39L#&r1K_-}kTMTNJp>TK`8{^tVraaWCe_M$vxef5w0QpFdP-veDuD
zxhegZ|L;vckoBsbjg4*D|NoLZ`&-4e?`K!s|My<3S%8^2?NH;<u&153)Bd|=Z8##f
z=`7Fx$oJB*+y3icIdJB{2LWfrRom;dW6~3B|FwR-FV2>i6Q(?qt2KRNl&_PX0wV*1
z5qGtn%`^R9z@Swvag8WRNi0dVN-jzTQVd20hK9NZX1Yd}A%^Bw21ZsU#<~VThQZ_f
zu&XE<a`RI%(<*Umm}K-W6R1HFWJ7R%T1k0gQ7VIDN`6wRf@f}GdTLN=VoGJ<$y6Jl
OA_h-aKbLh*2~7a{+u_du

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_search.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_search.png
new file mode 100755
index 0000000000000000000000000000000000000000..4be72f108ba1a4f36da5c3a59b1ed08ddcf7cb8b
GIT binary patch
literal 2280
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..f2e26f8838bdfecec34b81948535b27b9144744e
GIT binary patch
literal 1541
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_voice_search.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_voice_search.png
new file mode 100755
index 0000000000000000000000000000000000000000..73c6be654aa8c73b3e5ba5d9d7280c771c6989d8
GIT binary patch
literal 1937
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__ic_voice_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-mdpi/abs__ic_voice_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..71d838e736f248a067e4e7f4b222563b42a2c5e9
GIT binary patch
literal 794
zcmeAS@N?(olHy`uVBq!ia0vp^q9Dw{0wkH`a%F)OQ<As43&a2R{xkc5JkA1-$YLPv
z0mg18v+Y2FWd)AuKpL!<p|IwJDNvh|r;B5V#`)Yyd$UCXMUI}Y-Mo4CX8Cm&Qw$}2
zMTCS{U75|qk`^Z@Mrkbh$j`yaa>a`~*L4G@(AuMJikd+kjU0|5u1B2$w*?sN5ZY|0
zJ^OE+@%xB3$9*o`zIT83obq#wx10s)9qxpb%vewyD(EWkhG7B&Ymr2c)$Ucb_LrKM
zRxAwrb5Dj_QLsf#tg!02|K8op+!xR9zrS~bP;7hq{}|B?v;LGlc_{o=D|yP?{WTvC
z98Y0Y%H`FnF>UO<J8w15lux$hi_InDwq3Zk*-9bFfrEjytMQ898_`|$IZQ1js+=re
zoag6pTkw8Z9lFi=9)r$pd)<Op^6Zz6Z@O@cWr^9!GamAF3%AIMx;$4qb?)a;hP&~5
zY^SdAJ@0gog^#1-*14ME{>SC27e1EM*YkzWnD%emHPr(*=1IgWDDZGx^a@qB+f$vm
znc+Y|e%$vjra|6rfs#|>a<tZ$YvfyT9$?C2WQbcSyp=y$JN@|cRjQil^ZL%|pHI0z
zCpvD0jLF)7rH^lEZF;$*I(<`#$tUZmj2*{b)|>s@5fibRCqG{_kRkA7!HcIqzHT?(
z^U<oj<9Ar_k!RbKm=uf>di2~aKKwZ&`uCqoEMIZMMFroNUrsH$|M|tG<(bR=>IiR2
zT^oJ$@OO2wl*w=NN-rBRxh^~_!DEu_Q*os%BJH^rOON8}%SR*b=G_pqzj<Tf<LHRV
zY|Oh_?HE2f8Tz$zE}OCB@DFj<Gi6)<u?lYf_(VqOjVdtdsFt`!l%yn<q*^5xr2;7i
zBLhQ2T>~>+Bg+s&b1MTQD-&Z~10ciTaemlU6b-rgDVb@NxHU{NdY1{*APKS|I6tkV
oJh3R1!7(L2DOJHUH!(dmC^a#qvhZZ84Nwt-r>mdKI;Vst0G?(%xBvhE

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_default_holo_dark.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_default_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..081657ee7b828a74287d65d2f4644af9c7b55816
GIT binary patch
literal 106
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQih%`jv*44lYjjGZ_jMS*7QH1
z$Cu9~IqOiSz?8?{Eo||(vKg$oJDqvb4v1Q5NJR27d@z6V;avVV1E6LGPgg&ebxsLQ
E0ED?8Qvd(}

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_default_holo_light.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_default_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..3f312b465189caa47a7f8e4bc53c3222521e0bb1
GIT binary patch
literal 100
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQrey_jv*44lYjjGZ_jMS*7QH1
y$CppZQKez^S5>Et`mrVp3OWu(*tYT>W@HfhtG!C@Uj!>q8-u5-pUXO@geCyVL>!s`

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_default_holo_dark.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_default_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..b086fae8738227fc0b4f05171ded25ec1503e49d
GIT binary patch
literal 105
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQU;zbjv*44lYjjGZ_jMS*7QH1
z$Cu9~IqOiSz{ak|8`Hl@9XRLoNT6Brf-|eO+cr*y`8p4HWnZ4T3DnEr>FVdQ&MBb@
E0JhyB4*&oF

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_default_holo_light.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_default_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..73c336a77a9c908532b5b39098c22a878e0e87bf
GIT binary patch
literal 98
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQktGFjv*44lYjjGZ_jMS*7QH1
w$CppZQANR3w^={dWI;j4L5+C_+aEG8Z2O~g(C$e@C{PoFr>mdKI;Vst0EP1$iU0rr

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_selected_holo_dark.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_selected_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..726e0ff427cd175c9c3607e25352bd696a3152c1
GIT binary patch
literal 107
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQbwLGjv*44lYjjGZ_jMS*7QH1
z$CppT@G}o{phONwVb}j=LshAN!kv;Qt~79nzL7Xt$zT{YC1>l7eH(zf89ZJ6T-G@y
GGywpjU?4sK

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_selected_holo_light.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_right_selected_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..726e0ff427cd175c9c3607e25352bd696a3152c1
GIT binary patch
literal 107
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQbwLGjv*44lYjjGZ_jMS*7QH1
z$CppT@G}o{phONwVb}j=LshAN!kv;Qt~79nzL7Xt$zT{YC1>l7eH(zf89ZJ6T-G@y
GGywpjU?4sK

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_dark.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..1767c169eef03f3370b0f8e40f531dd481a9b82d
GIT binary patch
literal 109
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQYM}*jv*44lYjjGZ_jMS*7QH1
z$CppT@G}o{phONw%V+tnLd~`l!OqNzXB@V%srV-z^vGhE?K{(iZ(fQrP(OpGtDnm{
Hr-UW|vZo$&

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_light.9.png b/com_actionbarsherlock/res/drawable-mdpi/abs__textfield_search_selected_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..1767c169eef03f3370b0f8e40f531dd481a9b82d
GIT binary patch
literal 109
zcmeAS@N?(olHy`uVBq!ia0vp^JV4CO!3HF4Hmy+sQYM}*jv*44lYjjGZ_jMS*7QH1
z$CppT@G}o{phONw%V+tnLd~`l!OqNzXB@V%srV-z^vGhE?K{(iZ(fQrP(OpGtDnm{
Hr-UW|vZo$&

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ab_share_pack_holo_dark.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ab_share_pack_holo_dark.9.png
index 55099d49db309d03035101e55e64396b62af3054..9a70a5d1e3ad43f632287aff78d86289259099db 100755
GIT binary patch
delta 216
zcmdljwogp4Gr-TCmrII^fq{Y7)59eQNE-pM6$cxT{FK9WXQNph7e8B)x4R3&e-K=-
zclqRrisJPQ>?NMQuIzW%m|1j;4jJw90IDzWba4#HxcBzvMa}~XJPwY*yL`XPFa3N(
zP%6W9<9D_RbABk^y7jwgqN$4KB$E{ycV8H-U+L_2$6tA#yq?*TS88&*Wpo8#V1kfJ
zd1K3BRwgL;#O?9ZwC>yWCZOhLp;EPaXRkhg)72-Cb@!uf3(#@~Pgg&ebxsLQ0A;;P
AOaK4?

delta 215
zcmdldwp&cGGr-TCmrII^fq{Y7)59eQNGpLb2OE&Ia_2rYxsOYHqjC&ay+X1_kS_y6
zl_~>6Lo)-z&;LOBB?CjL0RzLU1fbd(3=HD=lj4uM0X3$1x;TbZ+<J4vk?Vj059`I9
z{on25cLf~u-FhLZ<=mrgZqD-xEGkMfSXZ2Wbmz8IZLksZ5ssa^dF4w|!X8VeIJa;J
zD!Ft_nD6+i#E!X1Kz_A=qJ~oohiB81dhacUb0qbEcKrX(%&^4%^SnG^les`HgQu&X
J%Q~loCIEj!MV<fv

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ab_share_pack_holo_light.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ab_share_pack_holo_light.9.png
index 3c4701fc21a7b70310c0fb65f82c96406bf676c9..14fbee101d983bf7a7e38a8f26907c303e4e0d96 100755
GIT binary patch
delta 211
zcmdlgwo^>8Gr-TCmrII^fq{Y7)59eQNE-pM6$cxT{FK9WXQNph7e8B)x4R3&e-K=-
zclqRrisJPQ>?NMQuIzW%m|1kio@-^_0IJXSba4#HxcBx(AXkHefP-T%-?NLmZ&tOK
zc?r$^uDeOOu4CyQeYKm;lT<vLSDh?<``mK<ZujRuAEqt#l6|!C)Kw-%81QsV67?wE
u>Hq`V8f<>{=DPwlMo;^z*L(B1=$l>4>`mq335-B{89ZJ6T-G@yGywo;<w`jK

delta 209
zcmdlfwpC2AGr-TCmrII^fq{Y7)59eQNGpLb2OE&Ia_2rYxsOYHqjC&ay+X1_kS_y6
zl_~>6Lo)-z&;LOBB?CjL0RzLU1fbd(3=HD=lj4uM0W~Igx;TbZ+<J4vnvX$&!{wmu
ztnd3p#Okary6~#)OIpbx*)i3~xN>61sU`X4ZrMHuUp{)0vzS?2@?1pQ9X<gChXw}5
zPx4EqsVguYN@itZ;Sf*|RGJXJPgTd_6wvhl|Ct%O)VuX}$-k8Yav3~b{an^LB{Ts5
Dx0*j@

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_disabled.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_disabled.png
new file mode 100755
index 0000000000000000000000000000000000000000..e35c5f05efdaecd358f87fbaae543f8e5d5d0331
GIT binary patch
literal 2531
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
WVgEmns=9(>1^{ytE8}V-6#hTCp0D=+

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_search_api_disabled_holo_light.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_search_api_disabled_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..7fd7aeb2a63980f5c7459b96ae175b875f27add3
GIT binary patch
literal 1315
zcmeAS@N?(olHy`uVBq!ia0vp^+91rq0wlddc6tLTrX+877l!}s{b%+Ad7K3vk;OpT
z1B~5HX4`=T%L*LRfizez1K-K5QyCaov^`xMLp+YZo#ve{ohs5cKmXZmZ>G$w-JO@O
z_$Dncy|l#DX=;KaYmSzf&V&g+I5)gx(wb5qs1h)7!mfsR25uD<F;R{c3HO(&Zo3?F
z_lWOhtE}3Yug!JTR_gT6Ejg_B{?t6ns%K}a&;5LMU}GPv!ldbo4(IO=n({(ghwop<
zKaYz)HwSMzZ!Ph{g@vW|@>CBNMaEYi!b%Lx%#0Z>6%}_Ke;bM=$-hufo^&&725<G%
z8yh~Ki;?c`Q0Q_|4_T1BP?y(kOHtfGd7+jTnMPBA)yLv*M&+%Y6>YD$vGBuUKV?<1
zW5r*8XXtL<v^Fc>O5$#WZeo|;mb85TEyq_Keb3$U;>HYFK{YX}hy1N)ld|`iZ8c+f
zaW}0jS<%V*aZgC<W&54MKg|9|Fo`|$_V;y(tux;m{2{0+J4N~WyEpCsRE;-WxVX=1
zd-Ml?iR#PW?^hNbbbctXC~@)M?0?3aY~C+TQQo{Mz)kScqi*F*Uq1$XNUdC>Bwd%4
z`mTTDHix9d<m4?!=O>^392b?Js?F`)aOklAwYhQ$?F@yb$ytH>J_Jb{Z~vrG;$w0s
zy7g<M{#tYO_p!0;OmkGW-2cF(Viv+yCwqSuZ`+xwb$>pFZTnjBVEM<ai@v9iRlIC|
z<s)6d(a|S!Z~B8BkE9;Ceat*4Z}j@;(aB%;hWuPKeNyk4SBHcIxy&s&+7qk~2z@>K
z<y+2&U3-(a{AElJ$?u!GPG6bhmoxwIW389O&syL7`m?~`Qp=^=!u;#5=<RIT!Ll)a
z?~;qpGntf_L>?u*UK{&)=cU7rs=ddas!yNA5%MN;fAeO3GpiZ3y(^OR`LtKE&RYG`
z%T6M0Q((r64h>88-;=&fKXORn&)Y9<7j0ADM4op#Evb9DEVE3OxuAOMwTp8T79Bpj
z^46Bw7ia(6t$e=h^6Gq+^)tU-Y>!_fu&_#YcJ0QCjvJ3m`|4emd(8LrvxuLIduy^w
zKRn;Ob&-9_RrP6hYo5j|+EK9n+eN__H(s3nbj~C7+}RUuX{m{we<y!D=5y!x^LOz#
zHQ8D$T2A)82sP^Lbu9T^l6uZ|>GosZ*S#`Yezas<KlNDk=9f#SKW{%TkeKj&RsS{S
ztc8p7o|$*&x#j!atKM!UA^70ZF;$6<d(|eT{=n$!?~3<deBn{@XAR+;p54v${dx1s
zFK?Q;wr113Vug7ck4`Sm`fm|vEzcwQHRk8rxu<iTW+_?eL^nEwzFoUHFKV0d>g(E;
z?-{fhY+_DS&eu;5`_fikR9#fupz-tEU2!F+6F=1F&8oh6DP7e><XqjdjW#kOx0X-6
zoVwa>i}j<0lm5=$VtqvCS7PaJ&waLQ0xVeA<2r9FV_>h2sIGsVSbJsf1ID=TJ5=|I
z&X8~@c`+{`NhyHi(R<JE_ut+{=hm<O`0=-%_s2;>j}}j=t-itc?USbMMp?m=EB<FD
z+g#h2^p}0j+H+plKFr$<EJIXFTq8<S5=&C8l8aJ-6oZk0p`osUnXZv#h@rWafsvJo
zv91A-VemLV>?(?e-29Zxv`X9>CK<iU1Zt23*$|wcR#Ki=l*-_klAn~S;F+74o*I;z
Wm{M7IGSvpCh{4m<&t;ucLK6VAZDKC~

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_clear_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..53cfbd311551eca5b37ddd9541d12d698ab05ab0
GIT binary patch
literal 1447
zcmZ{kX*3%M5Xa-_7ELV`N2sH;njT0{S9O(5NScVV>eyCDB6UQN6rr@v)_sLiS3~Qp
ztEzq2)O|!<>xiRNElR1gi&m6P`)xn$hne5Zy#N2rd-GvpEU{+CMPx+)0Kjn+5^l}o
zg&!d#$jfNkdNdFGu4pqj;P63GZxgQ*_CY#Oc|`sUQ?}=CKZgE3#v~qpdI6&Bx^w_Q
zunGk?wncWWW;l7-UI#@tQM0)~HL81;)HPu;pVQ0pgJQPrfpMpp=aU0}M<~a{2nw%n
zU`-fLR8Od%K$J#9U{=UTI40i8@}fD@+Oa6N|E1RI6sbQ)pL!RfOePt0E*?-w>vc`F
zFLoR~H8O{D0Fhbf&d=`-+1DWWi~EgA3{w%CBurf@x<MJ=6^@O@I0RITCwHe9m&*tW
zG)GB@3xIR=P(YW4g!^gq?%P5jlz7$Wig2w3IUityoXXoa<PssFz(?1%z2`3DmUC0F
zx2tc@x#Tkg&+Yk+4w-i)$urL$?H|qe&AKn--UgV>&z#)AS%CTjBJ;NXfE<h{bg;iN
zF2i$XD~{lsFTXg&?H=T)WOw5`BUUOyq!oJS6Io(`YPISk`b&imi9t}3>z(-q*!r&D
zRZs9Vt%N#~h`fZ2d<UyA&8!X`2fxp8Rz1R+;Y3*t7Vn7+jSR5(ahr>F&WAUxzdNEE
zLcQ7z)<&U)d{TxG*7ZfZU%dui_e8AOG#Zu1*(e!@&OEmtgjVAmsh>Px!}hna+U*4u
z-(P@*kBOd~_&ckM8!+$m47a*D-IZ(wJ}aDF{e;O>YW!u636JA2%GNI#9Kc(nk+Ttf
zZ5oR_VO!WXDMZ#m`6;XjkCv`_D6eahzuUOoqFaafSiYTac<;TmC>LuaHD30rCoEXh
zD5R1Oih#JsO2+Mq%9NFu7{5RCprvtcFS~~}?Jc*n#%9<Wk0|v`lT;b`1euzlhnlQ;
z|GN4bChIkk;KXd%iaWva@GE~hJE_u$RZexwf$KMW*^6ILz)WA49s|Cq7?TahA!nl$
zD_G+?*gPSJ*ad(x@j&%z%1Qb>=R+B~=%4@*03!EPJP0MrnJ8N%7FfRW&1jKLlO`E6
z2Nzeo&ri0;XG#nsf-QzGDH@1K!SO+oQz;nwgfHIg%HhTbyKTOO$NB{~co(lFCB3>E
zA&~-M`<cBZwHlULiHUjx$yV!Wrn0-iRq#pgH%|7rwVm9_iKwv7_TCJ=bET(gnv@RQ
z=wgy6tDrJj;Gl5epxUijLJ{jGx7Fv-mq0KdPj52`YrTb^0h*TTsJnK=ebZR!NDrZu
zu5PIXjODe-AeV%=&Pm=JsjQ%kla5>}RVuy48f;Y-C?8l|c;|{QHGA&~=s7pAt2h>u
zaS=yuntEie>)yAC_-npL!3zTFzOgLKZ}$=3sW+~_Ul7!!J>-L1jXDCh?L;zNtpz<H
z;u!VO48s1jiJ30HRQxr0Omoyi?BPERAJEGp^pc&gR8qFeQhb_e@%_Yl)j7puPiv2T
zF|VIoaX9z!Mhfb4`Gx@!6m8f-8quM*e_yDS*hT?ePeTQvNU^pOi#5YfYpDX?p0ykg
zlcg~}1!!wgsE{?riXW51-IjC4DVsA!ZgPETQ{%7m^)lq9m-hQ4%v8*3tW`5N%|~_`
z!t*+qJ4&+RnwWcZa-ikG#!N|Rj9OfuB9W1U>rIp_ZRL}JEMXYA5@jiafE19#aIkmj
zpOVnI=5TB*VZwzSHn(G2*x&nZOKW`I9?Av!cNOvbi#$Fwg7v#&)Ar=Xmc9st_ZL_3
z{@58B!k$KOp%D%6encJsnot-_4XUH2sc#F@HGpawXltoKc?EQiVmJC91DQf_cccHm
zAysqDoo4|5*kD6(qXoG55dp>oiYrkGMRp+(t%)uKx-Xk($P)oj2rRtP1Q-4<4m6z)

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_go.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_go.png
new file mode 100755
index 0000000000000000000000000000000000000000..1e2dcfa02057f16f9f89e31fada93991c4eb9ab6
GIT binary patch
literal 1983
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

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_go_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_go_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..f12eafcdcfe1afce28c61e09d1340b067344eb9d
GIT binary patch
literal 836
zcmeAS@N?(olHy`uVBq!ia0vp^+91rq0wlddc6tLTrX+877l!}s{b%+Ad7K3vk;OpT
z1B~5HX4`=T%L*LRfizez1K-K5Q-RuiJY5_^JdVGe=9?`XDB^H__Dmlm&$SvBogJY*
zu8-WVTnj3VFL<o36uG1DV*QgtuG1H(ga&L05O7`Nu~52DdFwPKpUGRgugqHSmo~3k
zqQuxZU&_4o-rL&Z9dpW`@8kZx@wiiq>e5>qD<U`-EL8qD;p2se5pzw%<aB3!%rbK-
zvO0XD#PG(!g~IMlVv{yYyi%JV6KT<?;w`24f8*ZYS;0%nBKAG2+5Sp=+e@VkrKOX&
zluefJesulnv8AoYUQVBRcvhc3cgTULD~uNl`>nsH=UHe9J@Mdux2^r_l81d^?``Kt
zS#=!=E6#CAbZoe$8Io5&<<r?2i;`J$`0v`iUt%{SeSTzni{M*}phNK+tfO@8c5R*J
zrrs`Emwzf^0;hTW-rq@CA0-M@?rdDtvhVR+r>E!Czx?dxwOP<=Z?LWX-JEFuedgS$
zuNN4sxF{9jB>(1F_R;pEs?zgACOo_WG~j#4<1^b@<^PoWa55b7{d1y5I%_fO%)6{%
zN$YMseYreLytgbs`^XWmN%2KbPZwwQ>%KZ@Y{3?$wB)C0v|PP)*x}`V#uX+<UPha5
zOq;%LzunHxgl03NAMU}&yv~U3Hi_M4V`J9z%Tz6F(w{ln{^yqO&Iw%3%VTv=<&gRG
z&6|baA6tE5-{lYDN<!MD4^_k7UOKyTqA$zUg5|HS&T5-n`zOKd@#Bq>PeWL5A2nXG
zbw=dOIo1z8O|Ig%dU5*pvdLRMt#_N#SsGA$tA9i4$pi^$aoOozvw}r+BvLkf$T+sr
zM2h>@{N9WI^Q9jv{C->aX6Fyy4<Bw=2`TPh3ru9HC9V-ADTyViR>?)FK#IZ0z|c_F
zz)aW3GQ`l_%D~9V#8}q=$S`=EA9fW*LvDUbW?Cg~4U>%CWdb!wf@}!RPb(=;EJ|f?
jOvz75Rq)JBOiv9;O-!jQJeg_(RK(!v>gTe~DWM4fHbrI7

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_search.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_search.png
new file mode 100755
index 0000000000000000000000000000000000000000..998f91be9c4dff50a3ac354a3810a2afe39fe32b
GIT binary patch
literal 3784
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
Z$DPpsU&xgE;c;3340Mc9_1aGO{{Rgi%2xmY

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..a4cdf1c7927896d70e6b9f6af2eaa64b1bb41707
GIT binary patch
literal 3037
zcmZ`*cTm&K7X4AAmk5HPi4^H2iS#an-a~mHASHx=bO=pD6@(~=f+FyN^b)!tRjLRP
zA|Qg&q!}S%1Vof7@Z$I1`{T{d-LrFN&+N?Zx#up<#>$wTg`Wig0CrOoID(3@e}jpE
zI<LBg_EUku%iI_aoc$feJyqG%40DKyb2t@E{tcrMf1SU{$dGGjD*np{I7V8Z007IX
zDg2tf)8LTvaqtC#(AnGZt)<PvZJaPVoSts@Ziik!gT9ohAXieNQYk(D2|pfDduk)C
z+upa%Sv|c+R&vNMWsqinSX{}RNe|bjW!`Qt0%sqDqL=HpgZB5JQ^JudI_~VV;-X?1
z<58NLyLl7X-bUzvpa2=$V1QQAe`C<2N^#w#ucomvd`e@&GXVx%Fy@&3RC;X+o5N)u
z8jEuvu6QEgJ9G?Bh@jUqPEdYbwQG>@Y{!SkL^RhNV4{0xR)Nr)iRg5a8)*wPPk+8K
zkbD`$)G^@kaLCJ6Qjp`=V;5ja3O$Vli2E_T^fs*9UxkKU4@sGsZNGl~3j7!mTNt>I
z89HtNFp&kb#Pe!u_U;arP~_!_R$Fr|$ECS_m-N{5IQqXBOx+Up5%Wp}0f(FI`w<+R
z%ZmuPoH(zA$QDYM^e|YBQN}b&ocZy4sNo|<gOVR>7>$#|rJk1)e)*O6MVtXUV0N(S
zcu{~yPZ?kZ;0z25V#b-5mLXbN-7WU8XQ=dZ(iPmz7RKVZbtVzsiWjfJWd$uwqz+cs
znZOV?RZ}L<5}N}jjYZ4>PSUYxp~>?^N=rMFR_eUI8X0>dt2&2<N3V5YVBryopzF3U
zGjqnc&^DC}a<P4U8m)D@yuLnE)fO;^^<RBeSuopVC&ycs${}>)s*=*L@&;>dq_d+x
z-X2@h7hgOCNpHV?{rZxn1UI}Oe^6a9Uf2f(*hXtq1b6T3H!Lmn>S{b_NduW?!f)y<
zz3?L~^U9l%`T4&Qaqw4(WExi}XJKxxjj@r@+Oua%zcK_=U&8Xf2lF8ZJRl(=Ps}#s
zH(QtcIE&e=`<y-EhK*#!i)qv79`0?&N5#gU^<Nr<Xh>Ha!bKyC>+63PKD{wNXXoNl
z>z}W3ZelbdI_C!9;hXO>{ow<jtmBI{i>bHkySK)b#@5;b6`SQWzpIU}b#-08N|k_D
z_8z6NPY2!9YbOcVk9X#bcuyxL4vY<X?MUmV32>xl);qTx_4M4{FStm0%i<%k;(Q>U
zkUpEh+>bpyBp*d?ep?deNYxQbcB=H#3ElZzQ6C#i$9xSz|0?_K#X4HO7CG~mA*+b+
z=T1&*U2+P<pY4T(l%@I3mSbM6iHD33j$$UyNgl$Rq3trStC6>lNrzX=^Eq$k?<phY
z3dXGdbT>9C4ymI*i<3WKn`nTa)6*AvA~%hy0yX`dbAC?xelZE({mj-aRnEHiN&T%0
zNI=ZZZ6b~j2OsCwUs1EVg~0^uynYQwfXYA9h@9PcJ38crTMz5}&_GeKkwNnd2v}Dk
z*ed~-ABm38qxj|3lo>7{e6sY#rA)#x%6WtCGNr5c`{)yYX{bV4-r-O||0qz6a(>~e
zpomQO%M!P2xc(tdmJ6rxL%%|uwVJQ~Tc^CYh$PqZ9qKy@0i$a_Up;#C=(>nNgpNn7
zt~rg#0}^N^!r$;fNkda}c*r|03|3{tM6)kPparGFMGXxfT?INQ&HPg@l4t`^FeS7P
zb22Jy+(EIqKatFx_my)B47_Rn&L!#$^s94rG}PMHX_D9PtN|V3rk9h!m#!A4=!>ib
ze-Rl#08&qhEXW{}rXX9H!z!i5^d&|j05Ox!M&*knhYUL%yssc;v;`g?*2?9^uatYS
zC03c{Oi*lz&G`VxIY;u<>W|0KTgC%1iLEppH8n6p+f;GWX4e_Z8@<@pSgclAe|X@k
z45THgE?R<yDU9PwSm)iaxtnwe9*}4>wSdwA3Nc{GqtM1A9Qk~f$7~~w(#1*@e32~g
z{Wu5Ez$bZCCPfhz9~g<*ZRV-kgKXM<(vH)_=o8uA^Wk}%bZu<?IJjt#%finI2Zs%0
zI{vOF2D>wq$Ad(YY@-p?DHlhu$bw13sTGHdBEa6j9bv6{ik&s>LwkpwTr=fQ83g2&
zqT){4dY_Lh40jx(_V2fsPJUH4+bAcgZBR8XBxzL;FtHZq8I7}|)nl)`Z**^ie~gh|
zf%kq1x1^OqPdNGjor9{+LB-Vd_U@ff&4H9Orr(Oa<jvVzwD#HL9+0%TnOUSXw#%NK
zo!$7Y>vZ%tMYW`+X6GkSaWVNn*OG_)oV>~|JZqryvWolp1wVuyFE}am1Y6S<-z)vq
zcksFGtiiQYpMbekQe3KX+osl{m-wT(y7D(g^GHH6+_=GAQBj4Bw1Jn7J<hx8F2A|4
zaajKH_Hp9g9w8Mfl=vq(nMTUJ=T`kzS>^)_8a7wh7T6v(K3EX0_P{QF>r+Y&Mk5x=
zg)ag4SNQVS8>c6=v$ox|?Vl=hb<<i42zI+geV?uJXJllI_XH374Cj{Ce6z8%92?2c
z|Dgu~7gXb!$%Cu;Nq+hH4HV`nCGHe`&y8t&&+Nbj`O{KSQC?+B&BghyKSll@>$><@
zQcPlF-PE~o7gikx45RT9bUxOjXjw2_u8R24`afsUM|+zKFWCp3h~V0_0z1>J0JDvU
zrBYEmhL@rQRecurya=K1)1eulS5g(r)iv{!uAon$1q7<#X!Vr%wLzH#1%!-qqFzW1
z)$-QoTm6ScADJ-sgJrlXZ@$~F3332Tfz}+<j(}>=uyxUCb9nT@R?w7^Ds*`ISX{{w
z0@nJ+tU~AO*3#a{yLW{Lc)Ow#ji<yjME9VKa=wMc()ISB&D#s@!Iblo6!IXp!Q<pB
z_xa%q-?oL*7CS;);;`6mg?|ctRoKKfyX5FYsEw>dYP7u4kM!K>dk`!S?B3gb<)xRQ
z%LC}eRL=O>TWh1Og@1Jc8>W5YZ<h5KXCy|@(D>NXgCy+fSdho(ZuWC_>13Uog=i7a
z0iEsbjlI-pb5&pjBgH{XPB?gJ2WBJ7)xh9{UhB;CbtnV1i;wljZU=Nm)RL_W!dq|2
zn{7Bzujc(+=axIw_SnwRCQ5r^)a}2#Ygu}ec7fAtvKx}XUxMtcK+Q#)6PqWGzb;2v
zo&%_5Z#S;KT0s2p(TXXN()Ifgd-`OTtjG%p#(l$E(oOopc_{H!tH*A_WA8*NSq+w}
zj;=7DU-?5+6POaQXV5F1tS+m$i31_l1?RQjFnhPmEn`o9$ME#`wFfUpvg(N?oWBO{
zL)Y!MoYo}0V|3u^dJk<8S7hatA<QQ~{8{6$*^`lh*CoP)I;};;$-9Sc=!v-BwVb+t
zd^<gJWx8Lc^LsqNjmWLB5iq}3_P6W0Z{E>JKo}Fc-hQliJ2REw-j==xQxotI!FA#B
zufoX_?z7orJ}1RxV|?EO0+t*96KIo)ma9<qcg)<LZ$-Mp^3>qcV~hUm)`Le@ZZolE
zmAeeb+WGOzD{ZZ<RsoCi5yg1?j$$$hsbUDy*OL~?M&*^2*4?uAP}eHV9BmH3VCn=G
zsC^t~U$ffSY|&T$m>$X2EXS#&T(M*-k)3le7bET=`-@VQqLJ`<I77hbMzkk|5eNTM
zTq<?q6`&4ca&>FE9OFyODSDPhK%Q>KFh?Kghn!B2Yi)zO&GdUQ8(}AtWrQdn*qqzr
z_pWw!q=9;uqLaGTR%O<SG~<;;@~N-Km1vsEflxvDe+rqt?8c-ZM!9hvLidM8A0u?1
zLsyn-wPl)G5^`2L%hkFs(^(v&>7Fq{Z9^;0-V8X>FlgO1`0*+GY#Yzj4UiK5KnIrS
zex<9pupH^q@yi)Io+(qPKi?}DLnn;4CkCZ~3`0=?fI*;8d5DTUOx+%;ssVv%C|#9@
zP!|wVu;YjSAp{0{`}xHDe?k^)%a2On`+I_2un#86GYkb>^A7exT{aE$M57QWPw$w}
S5tJ5n6JTm+1#i&zNcu0<46<PW

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_voice_search.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_voice_search.png
new file mode 100755
index 0000000000000000000000000000000000000000..c625a3602bcb3b85cb3b5614a008078ffe40b089
GIT binary patch
literal 3053
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
R-$OVB0Ap!~t}^!}{TD@<is=9V

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_voice_search_api_holo_light.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__ic_voice_search_api_holo_light.png
new file mode 100755
index 0000000000000000000000000000000000000000..c332ba08c21f3821ad162027bcd92c43faf82fc5
GIT binary patch
literal 1414
zcmZ{kX*3%M5XV#1U5V24aIcjnDP0;3MIGH%h$D-j(uk@yi3EuwXlPYW>pn{nt%h~P
z9qOo-I>NTqP)FYr&AN-ais-6EsBGGA`(Z!)=QlHN{%=0adz0XTwNn78g8%@40>&PF
zUP`@hl9QE22V9eb6f$H7J2XHNm-e<@S^<OYJ+4Y=|6R6x|Fhqk;lU_hDZhIGiu|Wp
z0Dx>N293hmcL}n48Mq6oarsyKM$;ZzeAVY<f)i}dJC?%<N8u^4ss=>JiRek0X<L<`
zOV2|&8WNz2?X*>)M!}?A0Hkn_k`h=B5ubU)&$^Vu?%xheO~O_(SKi{n^8~%EqKFky
zn@H3;r)1<+GMnnxTuMSK<v^`L@(J4TV#mP%|B3~F%{mIW7_4fwUvb|~bQ(c(=q`^l
zLP_dN*0e_yhfJ*utYJ=BzseEcu(7V{HD4mnZt{dE32>R;V$rs>cFUa&I_oBz78~Yw
zYHWjD6j^#%aXTy*1({o_9Zz?6W^O{eT2?<TXDJ+-nTny${8hg9<8pJLD{9nrI7Gy&
zEjS(%=Xu8;764Lv<5{!0S0W39?`G%5-Ao9;v0f86!0qH#s9CtM6!ohv9-=@1I-l5E
z=jx?Ss+__{h|ZC<XkXi(00l<IDq-0kpfc_lXvq*Wup`j{CwV$L1!ru)X%|C+<25Y3
zhd-CyFC}QWCtYZG7sWGjiqh^ZIh^}r(w#{$;hwca^;~EdbI#jsL`U7Ss9r-y-0Yj*
z$K8|P`6ralCLX@xf9{2Zb)bK#KnU<OtrzW-&M975fOlTrdZPRZCKhd^B_=ldJ#T>h
z*8kJ3MMY4%+7Ou7yyLWiZffd4Z@o&$GknzDExh>DK-~kIUU5U4?;~TWniKAV)|1EA
z^fVk+^Bl3?W4_P?*axkcW5EL)2Y-Ikl1|C0T}dRy4Due~d`d<Lbo@PSW#jw?89gxg
zAeHQUhHhpuztyU<tRYdZs_lB8a-H+QBC78T)j@{?@d&h}<W_4<HR_%GDhQn!Nv)}}
zC~U#O{p;3V`WMZKgO=YdjJs89!=*RZdGm6+UHQY#3M1BGk(;(XakanavD{$t_S)>m
z#MX>$&o#!8xW{~05iP};gLTrnY&-cbNgOaQ9-qQS2K1J%Psa?UnvoJ|6N2&uguDea
z@;%GCsDBJjepH97?1(C4r&{??R);%?*7T0%+>7=T4_xQ>u{(zS6hi*l_~31!Gca=;
zoFpjYM!nB?-6jkZ$BZ@-A)|g^Ri5S=_T25+)fzwOEZ-OzF4I_H8s0-MK$_qD0ILvk
zYec(k#-HekZ|k0zmT{{o4ommzbg6UOQC_UPn-<39wLu43wsvCjguQOX8I-D7%sj8U
z4S$f-8rgE@e%oe;e!wN=7d>EP9M%f%tbHhLrD-XX{VXLO&Aa)cPcHeiIb4^<X)xrX
zoCol{(#*keKHY1mpiLNl%RL0F^lVX|ZJ>V$(H)BK?J4Z`JsBttk!VFbCdf``S6(Ro
zW!LPn1zOpq$L^28yw6h#P^fO8U}$$@)dh1`JpIt+n6WRCMn0PSbm=+*DqDM8FTXkN
zwxLN$eEs?t!Org;W%9J8GEZL>FYmEz8y9&l%R~~L#atZf=R$hLi7XaX2?*PtPSAbM
zJqB^orVD}+_{Bq91`;E$h+j_zmwhC`Isvgc@gRBr50w*CqPI7!QpkxgLD!qYHf7hF
ztNJVlnRf$aHZ}eRk3>3Eq?4s@>KN08z@(6vRCDi8suTc2q=5kfX@W2`!x@}5M;e+N
zokAd`338f&7yQQ%$e_@CBL3fyVYot*8q~gRaAWu|uaQEj02GBmra~}*Bwy-zDv1&i
S!l#~*4goMWSah`&G3sAAl9aOm

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_default_holo_dark.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_default_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..8fdbbf3ad77a974f797c9b496f98d296495a45d7
GIT binary patch
literal 126
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq+C5+978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUV+M1MLNs<t(qRk#(PWOyhbr7_TXWugZ2u7x7Wvn06unpleXH%c7k
ZVQ7rV&DiVy`5(|g22WQ%mvv4FO#q^)CyM|8

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_default_holo_light.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_default_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..4e9ae43c250a365c3894e04aace0602a506b199b
GIT binary patch
literal 126
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq+C5+978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUV+8udAXlQhooEaFu)>JVsC;_i|1;&qn1z`CMwWxmD@8>XG@5j{z4
Z4Ch(42+t_Fa};PGgQu&X%Q~loCICWDCD8x?

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_default_holo_dark.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_default_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..98f4871bb52aa7c60414b62dc102a63025d14b86
GIT binary patch
literal 125
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq+C2*978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUVm(v1b%el;0fY!m7fYzsPhAkg_?o6!P}0Ord_0t$qVOiDg+P{Wat
YL8LkPQkkjERiJqcp00i_>zopr0H|OnC;$Ke

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_default_holo_light.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_default_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..733373ed38d92906a3f639124b60d39cfe3ea469
GIT binary patch
literal 127
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq})7R978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUVm(v20J8xM$gbsA4Oq2MIp#mnr@>uNTIF}6W!#;>-fvxg@opE#)D
b$jGop@Lc3+&hjll6B#^R{an^LB{Ts5lN~2O

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..0c6bb036dbff7c452df0032fac9daaaf3ed36cff
GIT binary patch
literal 128
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq})AS978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUVm(v9t$CDZ2p<Uf8y%IiW<iL<6@frLbtl80uS>!k(eA~|x?WSsfj
bIFlKwHfSC=yJ^W9ppguou6{1-oD!M<v$ZDi

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_right_selected_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..0c6bb036dbff7c452df0032fac9daaaf3ed36cff
GIT binary patch
literal 128
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq})AS978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUVm(v9t$CDZ2p<Uf8y%IiW<iL<6@frLbtl80uS>!k(eA~|x?WSsfj
bIFlKwHfSC=yJ^W9ppguou6{1-oD!M<v$ZDi

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_selected_holo_dark.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_selected_holo_dark.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..e5bfd8ad33219ed3f11be0db150288ec5fe1f7d6
GIT binary patch
literal 114
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq%1vM978nDC;#~W-=0~Khvol7
z1H)I1T<P-?7f7*1^E~|He&~rr+Xee9jk`QcMT~iDoi7UMcS@Y)VOX?bWvXM*Pg|fN
N44$rjF6*2Ung9v#BkTYG

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_selected_holo_light.9.png b/com_actionbarsherlock/res/drawable-xhdpi/abs__textfield_search_selected_holo_light.9.png
new file mode 100755
index 0000000000000000000000000000000000000000..1743da6b4e1fde0f22e32216039e718a0cb1c7b5
GIT binary patch
literal 126
zcmeAS@N?(olHy`uVBq!ia0vp^qCm{e!3HEJoIX|yq+C5+978nDC;#~W-=0~Khvol7
z1H)I2CW)>m8aUV)4xTaopEyItdE!^$Tn)$h3#7aBEDrH5l{lPKbU~WStl#0CqS)dY
aj0`i|)DAxoJGT#LAcLo?pUXO@geCyp{V3}I

literal 0
HcmV?d00001

diff --git a/com_actionbarsherlock/res/drawable/abs__ic_clear.xml b/com_actionbarsherlock/res/drawable/abs__ic_clear.xml
new file mode 100755
index 00000000..a16f4b22
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__ic_clear.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false"
+        android:drawable="@drawable/abs__ic_clear_disabled" />
+    <item
+         android:drawable="@drawable/abs__ic_clear_normal" />
+</selector>
diff --git a/com_actionbarsherlock/res/drawable/abs__ic_clear_holo_light.xml b/com_actionbarsherlock/res/drawable/abs__ic_clear_holo_light.xml
new file mode 100755
index 00000000..256de80f
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__ic_clear_holo_light.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false"
+        android:drawable="@drawable/abs__ic_clear_search_api_disabled_holo_light" />
+    <item
+         android:drawable="@drawable/abs__ic_clear_search_api_holo_light" />
+</selector>
diff --git a/com_actionbarsherlock/res/drawable/abs__search_dropdown_dark.xml b/com_actionbarsherlock/res/drawable/abs__search_dropdown_dark.xml
new file mode 100755
index 00000000..26284187
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__search_dropdown_dark.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="#F0A0A0A0"/>
+    <stroke android:width="2dp" color="#A00080FF"/>
+    <padding android:left="5dp" android:top="0dp"
+        android:right="5dp" android:bottom="1dp" />
+</shape>
diff --git a/com_actionbarsherlock/res/drawable/abs__search_dropdown_light.xml b/com_actionbarsherlock/res/drawable/abs__search_dropdown_light.xml
new file mode 100755
index 00000000..0d00c587
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__search_dropdown_light.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="#F0FFFFFF"/>
+    <stroke android:width="1dp" color="#A00080FF"/>
+    <padding android:left="5dp" android:top="0dp"
+        android:right="5dp" android:bottom="1dp" />
+</shape>
diff --git a/com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_dark.xml b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_dark.xml
new file mode 100755
index 00000000..b6d58c04
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_dark.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_focused="true"
+        android:drawable="@drawable/abs__textfield_search_selected_holo_dark" />
+    <item android:drawable="@drawable/abs__textfield_search_default_holo_dark" />
+</selector>
+
diff --git a/com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_light.xml b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_light.xml
new file mode 100755
index 00000000..3d6acf80
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_holo_light.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_focused="true"
+        android:drawable="@drawable/abs__textfield_search_selected_holo_light" />
+    <item android:drawable="@drawable/abs__textfield_search_default_holo_light" />
+</selector>
+
diff --git a/com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_dark.xml b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_dark.xml
new file mode 100755
index 00000000..05ff4eda
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_dark.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_focused="true"
+        android:drawable="@drawable/abs__textfield_search_right_selected_holo_dark" />
+    <item android:drawable="@drawable/abs__textfield_search_right_default_holo_dark" />
+</selector>
+
diff --git a/com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_light.xml b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_light.xml
new file mode 100755
index 00000000..f6d61e57
--- /dev/null
+++ b/com_actionbarsherlock/res/drawable/abs__textfield_searchview_right_holo_light.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_focused="true"
+        android:drawable="@drawable/abs__textfield_search_right_selected_holo_light" />
+    <item android:drawable="@drawable/abs__textfield_search_right_default_holo_light" />
+</selector>
+
diff --git a/com_actionbarsherlock/res/layout/abs__activity_chooser_view.xml b/com_actionbarsherlock/res/layout/abs__activity_chooser_view.xml
index 019d14ef..6a0ac9ec 100755
--- a/com_actionbarsherlock/res/layout/abs__activity_chooser_view.xml
+++ b/com_actionbarsherlock/res/layout/abs__activity_chooser_view.xml
@@ -19,7 +19,7 @@
 <com.actionbarsherlock.internal.widget.IcsLinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/abs__activity_chooser_view_content"
     android:layout_width="wrap_content"
-    android:layout_height="fill_parent"
+    android:layout_height="wrap_content"
     android:layout_gravity="center"
     style="?attr/activityChooserViewStyle">
 
diff --git a/com_actionbarsherlock/res/layout/abs__dialog_title_holo.xml b/com_actionbarsherlock/res/layout/abs__dialog_title_holo.xml
index 6402f28b..ab2b0ee6 100755
--- a/com_actionbarsherlock/res/layout/abs__dialog_title_holo.xml
+++ b/com_actionbarsherlock/res/layout/abs__dialog_title_holo.xml
@@ -35,7 +35,7 @@ enabled.
             android:layout_height="2dip"
             android:background="@color/abs__holo_blue_light" />
     <FrameLayout
-        android:layout_width="wrap_content" android:layout_height="0dp"
+        android:layout_width="match_parent" android:layout_height="0dp"
         android:layout_weight="1"
         android:orientation="vertical"
         android:foreground="?attr/windowContentOverlay">
diff --git a/com_actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml b/com_actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml
new file mode 100755
index 00000000..e1d3dc49
--- /dev/null
+++ b/com_actionbarsherlock/res/layout/abs__search_dropdown_item_icons_2line.xml
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+**
+** Copyright 2008, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:paddingLeft="@dimen/abs__dropdownitem_text_padding_left"
+                android:paddingRight="4dip"
+                android:layout_width="match_parent"
+                android:layout_height="?attr/searchResultListItemHeight" >
+
+    <!-- Icons come first in the layout, since their placement doesn't depend on
+         the placement of the text views. -->
+    <ImageView android:id="@android:id/icon1"
+               android:layout_width="@dimen/abs__dropdownitem_icon_width"
+               android:layout_height="48dip"
+               android:scaleType="centerInside"
+               android:layout_alignParentLeft="true"
+               android:layout_alignParentTop="true"
+               android:layout_alignParentBottom="true"
+               android:visibility="invisible" />
+
+    <ImageView android:id="@+id/edit_query"
+               android:layout_width="48dip"
+               android:layout_height="48dip"
+               android:scaleType="centerInside"
+               android:layout_alignParentRight="true"
+               android:layout_alignParentTop="true"
+               android:layout_alignParentBottom="true"
+               android:src="?attr/searchViewEditQuery"
+               android:background="?attr/searchViewEditQueryBackground"
+               android:visibility="gone" />
+
+    <ImageView android:id="@android:id/icon2"
+               android:layout_width="48dip"
+               android:layout_height="48dip"
+               android:scaleType="centerInside"
+               android:layout_alignWithParentIfMissing="true"
+               android:layout_toLeftOf="@id/edit_query"
+               android:layout_alignParentTop="true"
+               android:layout_alignParentBottom="true"
+               android:visibility="gone" />
+
+
+    <!-- The subtitle comes before the title, since the height of the title depends on whether the
+         subtitle is visible or gone. -->
+    <TextView android:id="@android:id/text2"
+              style="?android:attr/dropDownItemStyle"
+              android:textAppearance="?attr/textAppearanceSearchResultSubtitle"
+              android:singleLine="true"
+              android:layout_width="match_parent"
+              android:layout_height="29dip"
+              android:paddingBottom="4dip"
+              android:gravity="top"
+              android:layout_toRightOf="@android:id/icon1"
+              android:layout_toLeftOf="@android:id/icon2"
+              android:layout_alignWithParentIfMissing="true"
+              android:layout_alignParentBottom="true"
+              android:visibility="gone" />
+
+    <!-- The title is placed above the subtitle, if there is one. If there is no
+         subtitle, it fills the parent. -->
+    <TextView android:id="@android:id/text1"
+              style="?android:attr/dropDownItemStyle"
+              android:textAppearance="?attr/textAppearanceSearchResultTitle"
+              android:singleLine="true"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:layout_centerVertical="true"
+              android:layout_toRightOf="@android:id/icon1"
+              android:layout_toLeftOf="@android:id/icon2"
+              android:layout_above="@android:id/text2" />
+
+</RelativeLayout>
diff --git a/com_actionbarsherlock/res/layout/abs__search_view.xml b/com_actionbarsherlock/res/layout/abs__search_view.xml
new file mode 100755
index 00000000..6ba31912
--- /dev/null
+++ b/com_actionbarsherlock/res/layout/abs__search_view.xml
@@ -0,0 +1,159 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+-->
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/abs__search_bar"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="horizontal"
+        >
+
+    <!-- This is actually used for the badge icon *or* the badge label (or neither) -->
+    <TextView
+            android:id="@+id/abs__search_badge"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:gravity="center_vertical"
+            android:layout_marginBottom="2dip"
+            android:drawablePadding="0dip"
+            android:textAppearance="?android:attr/textAppearanceMedium"
+            android:textColor="?attr/textColorPrimary"
+            android:visibility="gone"
+            />
+
+    <ImageView
+            android:id="@+id/abs__search_button"
+            style="?android:attr/actionButtonStyle"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:layout_gravity="center_vertical"
+            android:src="?attr/searchViewSearchIcon"
+            android:contentDescription="@string/abs__searchview_description_search"
+            />
+
+    <LinearLayout
+            android:id="@+id/abs__search_edit_frame"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:layout_gravity="center_vertical"
+            android:layout_marginTop="4dip"
+            android:layout_marginBottom="4dip"
+            android:layout_marginLeft="8dip"
+            android:layout_marginRight="8dip"
+            android:orientation="horizontal">
+
+        <ImageView
+                android:id="@+id/abs__search_mag_icon"
+                android:layout_width="@dimen/abs__dropdownitem_icon_width"
+                android:layout_height="wrap_content"
+                android:scaleType="centerInside"
+                android:layout_marginLeft="@dimen/abs__dropdownitem_text_padding_left"
+                android:layout_gravity="center_vertical"
+                android:src="?attr/searchViewSearchIcon"
+                android:visibility="gone"
+                />
+
+        <!-- Inner layout contains the app icon, button(s) and EditText -->
+        <LinearLayout
+                android:id="@+id/abs__search_plate"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:layout_gravity="center_vertical"
+                android:orientation="horizontal"
+                android:background="?attr/searchViewTextField">
+
+            <view class="com.actionbarsherlock.widget.SearchView$SearchAutoComplete"
+                  style="?attr/searchAutoCompleteTextView"
+                  android:id="@+id/abs__search_src_text"
+                  android:layout_height="36dip"
+                  android:layout_width="0dp"
+                  android:layout_weight="1"
+                  android:minWidth="@dimen/abs__search_view_text_min_width"
+                  android:layout_gravity="bottom"
+                  android:paddingLeft="@dimen/abs__dropdownitem_text_padding_left"
+                  android:paddingRight="@dimen/abs__dropdownitem_text_padding_right"
+                  android:singleLine="true"
+                  android:ellipsize="end"
+                  android:background="@null"
+                  android:inputType="text|textAutoComplete|textNoSuggestions"
+                  android:imeOptions="actionSearch"
+                  android:dropDownHeight="wrap_content"
+                  android:dropDownAnchor="@id/abs__search_edit_frame"
+                  android:dropDownVerticalOffset="0dip"
+                  android:dropDownHorizontalOffset="0dip"
+                  android:contentDescription="@string/abs__searchview_description_query"
+                  />
+
+            <ImageView
+                    android:id="@+id/abs__search_close_btn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:paddingLeft="8dip"
+                    android:paddingRight="8dip"
+                    android:layout_gravity="center_vertical"
+                    android:background="?attr/selectableItemBackground"
+                    android:src="?attr/searchViewCloseIcon"
+                    android:focusable="true"
+                    android:contentDescription="@string/abs__searchview_description_clear"
+                    />
+
+        </LinearLayout>
+
+        <LinearLayout
+                android:id="@+id/abs__submit_area"
+                android:orientation="horizontal"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:background="?attr/searchViewTextFieldRight">
+
+            <ImageView
+                    android:id="@+id/abs__search_go_btn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:layout_gravity="center_vertical"
+                    android:paddingLeft="16dip"
+                    android:paddingRight="16dip"
+                    android:background="?attr/selectableItemBackground"
+                    android:src="?attr/searchViewGoIcon"
+                    android:visibility="gone"
+                    android:focusable="true"
+                    android:contentDescription="@string/abs__searchview_description_submit"
+                    />
+
+            <ImageView
+                    android:id="@+id/abs__search_voice_btn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:layout_gravity="center_vertical"
+                    android:paddingLeft="16dip"
+                    android:paddingRight="16dip"
+                    android:src="?attr/searchViewVoiceIcon"
+                    android:background="?attr/selectableItemBackground"
+                    android:visibility="gone"
+                    android:focusable="true"
+                    android:contentDescription="@string/abs__searchview_description_voice"
+                    />
+
+        </LinearLayout>
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/com_actionbarsherlock/res/layout/abs__simple_dropdown_hint.xml b/com_actionbarsherlock/res/layout/abs__simple_dropdown_hint.xml
new file mode 100755
index 00000000..8fc0eb12
--- /dev/null
+++ b/com_actionbarsherlock/res/layout/abs__simple_dropdown_hint.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+**
+** Copyright 2008, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+          android:id="@android:id/text1"
+          android:textAppearance="?android:attr/dropDownHintAppearance"
+          android:singleLine="true"
+          android:layout_marginLeft="3dip"
+          android:layout_marginTop="3dip"
+          android:layout_marginRight="3dip"
+          android:layout_marginBottom="3dip"
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content" />
diff --git a/com_actionbarsherlock/res/values-v14/abs__styles.xml b/com_actionbarsherlock/res/values-v14/abs__styles.xml
index f2aa64d2..88a60dd9 100755
--- a/com_actionbarsherlock/res/values-v14/abs__styles.xml
+++ b/com_actionbarsherlock/res/values-v14/abs__styles.xml
@@ -85,6 +85,11 @@
     <style name="Widget.Sherlock.Light.ProgressBar.Horizontal" parent="android:Widget.Holo.Light.ProgressBar.Horizontal">
     </style>
 
+    <style name="Widget.Sherlock.SearchAutoCompleteTextView" parent="android:Widget.Holo.AutoCompleteTextView">
+    </style>
+    <style name="Widget.Sherlock.Light.SearchAutoCompleteTextView" parent="android:Widget.Holo.Light.AutoCompleteTextView">
+    </style>
+
     <style name="TextAppearance.Sherlock.Widget.ActionBar.Menu" parent="android:TextAppearance.Holo.Widget.ActionBar.Menu">
     </style>
 
diff --git a/com_actionbarsherlock/res/values-v14/abs__themes.xml b/com_actionbarsherlock/res/values-v14/abs__themes.xml
index ceb96073..5fac1ab5 100755
--- a/com_actionbarsherlock/res/values-v14/abs__themes.xml
+++ b/com_actionbarsherlock/res/values-v14/abs__themes.xml
@@ -10,10 +10,12 @@
         <item name="actionBarSize">?android:attr/actionBarSize</item>
         <!-- Needed for our bug-fix dropdown list navigation layout. :( -->
         <item name="dropdownListPreferredItemHeight">48dp</item>
-        <!-- Needed for our ShareActionProvider implementation. -->
+        <!-- Needed for our ShareActionProvider and SearchView implementation. -->
         <item name="android:actionBarWidgetTheme">@style/Theme.Sherlock</item>
         <!-- For crazy people who use IcsSpinner. -->
         <item name="dropDownListViewStyle">?android:attr/dropDownListViewStyle</item>
+        <!-- Needed for our SearchView implementation. -->
+        <item name="selectableItemBackground">?android:attr/selectableItemBackground</item>
     </style>
 
     <style name="Theme.Sherlock.NoActionBar">
diff --git a/com_actionbarsherlock/res/values/abs__attrs.xml b/com_actionbarsherlock/res/values/abs__attrs.xml
index 81c34710..32631ca8 100755
--- a/com_actionbarsherlock/res/values/abs__attrs.xml
+++ b/com_actionbarsherlock/res/values/abs__attrs.xml
@@ -74,6 +74,9 @@
         <!-- Small Button style. -->
         <attr name="buttonStyleSmall" format="reference" />
 
+        <!-- Background drawable for standalone items that need focus/pressed states. -->
+        <attr name="selectableItemBackground" format="reference" />
+
 
 
         <!-- This Drawable is overlaid over the foreground of the Window's content area, usually
@@ -97,6 +100,40 @@
         <attr name="spinnerItemStyle" format="reference" />
         <attr name="spinnerDropDownItemStyle" format="reference" />
 
+        <!-- ============================ -->
+        <!-- SearchView styles and assets -->
+        <!-- ============================ -->
+        <eat-comment />
+        <!-- SearchView AutoCompleteTextView style -->
+        <attr name="searchAutoCompleteTextView" format="reference" />
+        <!-- SearchView dropdown background -->
+        <attr name="searchDropdownBackground" format="reference" />
+        <!-- SearchView close button icon -->
+        <attr name="searchViewCloseIcon" format="reference" />
+        <!-- SearchView Go button icon -->
+        <attr name="searchViewGoIcon" format="reference" />
+        <!-- SearchView Search icon -->
+        <attr name="searchViewSearchIcon" format="reference" />
+        <!-- SearchView Voice button icon -->
+        <attr name="searchViewVoiceIcon" format="reference" />
+        <!-- SearchView query refinement icon -->
+        <attr name="searchViewEditQuery" format="reference" />
+        <!-- SearchView query refinement icon background -->
+        <attr name="searchViewEditQueryBackground" format="reference" />
+        <!-- SearchView text field background for the left section -->
+        <attr name="searchViewTextField" format="reference" />
+        <!-- SearchView text field background for the right section -->
+        <attr name="searchViewTextFieldRight" format="reference" />
+        <!-- Text color for urls in search suggestions, used by things like global search and the browser. @hide -->
+        <attr name="textColorSearchUrl" format="reference|color" />
+        <!-- The list item height for search results. @hide -->
+        <attr name="searchResultListItemHeight" format="dimension" />
+        <!-- Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color. -->
+        <attr name="textAppearanceSearchResultTitle" format="reference" />
+        <!-- Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color. -->
+        <attr name="textAppearanceSearchResultSubtitle" format="reference" />
+
+
         <!-- =========== -->
         <!-- List styles -->
         <!-- =========== -->
@@ -144,9 +181,6 @@
         <!-- Drawable used as a background for activated items. -->
         <attr name="activatedBackgroundIndicator" format="reference" />
 
-        <!-- Specified if we are forcing an action item overflow menu. -->
-        <attr name="absForceOverflow" format="boolean" />
-
         <attr name="android:windowIsFloating" />
     </declare-styleable>
 
@@ -377,4 +411,22 @@
         <!-- Gravity setting for positioning the currently selected item. -->
         <attr name="android:gravity" />
     </declare-styleable>
+
+    <declare-styleable name="SherlockSearchView">
+        <!-- The default state of the SearchView. If true, it will be iconified when not in
+             use and expanded when clicked. -->
+        <attr name="iconifiedByDefault" format="boolean"/>
+        <!-- An optional maximum width of the SearchView. -->
+        <attr name="android:maxWidth" />
+        <!-- An optional query hint string to be displayed in the empty query field. -->
+        <attr name="queryHint" format="string" />
+        <!-- The IME options to set on the query text field. -->
+        <attr name="android:imeOptions" />
+        <!-- The input type to set on the query text field. -->
+        <attr name="android:inputType" />
+    </declare-styleable>
+
+    <declare-styleable name="SherlockView">
+        <attr name="android:focusable"/>
+    </declare-styleable>
 </resources>
diff --git a/com_actionbarsherlock/res/values/abs__dimens.xml b/com_actionbarsherlock/res/values/abs__dimens.xml
index 0a409756..831289e0 100755
--- a/com_actionbarsherlock/res/values/abs__dimens.xml
+++ b/com_actionbarsherlock/res/values/abs__dimens.xml
@@ -30,15 +30,15 @@
     <dimen name="abs__action_bar_subtitle_top_margin">-3dp</dimen>
     <!-- Bottom margin for action bar subtitles -->
     <dimen name="abs__action_bar_subtitle_bottom_margin">5dip</dimen>
-    
+
     <integer name="abs__max_action_buttons">2</integer>
 
     <!-- Minimum width for an action button in the menu area of an action bar -->
     <dimen name="abs__action_button_min_width">56dip</dimen>
-    
+
     <!-- Dialog title height -->
     <dimen name="abs__alert_dialog_title_height">64dip</dimen>
-    
+
     <!-- The platform's desired minimum size for a dialog's width when it
          is along the major axis (that is the screen is landscape).  This may
          be either a fraction or a dimension. -->
@@ -47,4 +47,21 @@
          is along the minor axis (that is the screen is portrait).  This may
          be either a fraction or a dimension. -->
     <item type="dimen" name="abs__dialog_min_width_minor">95%</item>
+
+
+    <!-- Text padding for dropdown items -->
+    <dimen name="abs__dropdownitem_text_padding_left">8dip</dimen>
+
+    <!-- Text padding for dropdown items -->
+    <dimen name="abs__dropdownitem_text_padding_right">8dip</dimen>
+
+    <!-- Width of the icon in a dropdown list -->
+    <dimen name="abs__dropdownitem_icon_width">32dip</dimen>
+
+
+    <!-- Minimum width of the search view text entry area. -->
+    <dimen name="abs__search_view_text_min_width">160dip</dimen>
+
+    <!-- Preferred width of the search view. -->
+    <dimen name="abs__search_view_preferred_width">320dip</dimen>
 </resources>
diff --git a/com_actionbarsherlock/res/values/abs__strings.xml b/com_actionbarsherlock/res/values/abs__strings.xml
index 1e1c7022..06a2a2af 100755
--- a/com_actionbarsherlock/res/values/abs__strings.xml
+++ b/com_actionbarsherlock/res/values/abs__strings.xml
@@ -39,4 +39,15 @@
     <string name="abs__shareactionprovider_share_with">Share with</string>
     <!-- Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI). [CHAR LIMIT=NONE] -->
     <string name="abs__shareactionprovider_share_with_application">Share with <xliff:g id="application_name" example="Bluetooth">%s</xliff:g></string>
+
+    <!-- SearchView accessibility description for search button [CHAR LIMIT=NONE] -->
+    <string name="abs__searchview_description_search">Search</string>
+    <!-- SearchView accessibility description for search text field [CHAR LIMIT=NONE] -->
+    <string name="abs__searchview_description_query">Search query</string>
+    <!-- SearchView accessibility description for clear button [CHAR LIMIT=NONE] -->
+    <string name="abs__searchview_description_clear">Clear query</string>
+    <!-- SearchView accessibility description for submit button [CHAR LIMIT=NONE] -->
+    <string name="abs__searchview_description_submit">Submit query</string>
+    <!-- SearchView accessibility description for voice button [CHAR LIMIT=NONE] -->
+    <string name="abs__searchview_description_voice">Voice search</string>
 </resources>
diff --git a/com_actionbarsherlock/res/values/abs__styles.xml b/com_actionbarsherlock/res/values/abs__styles.xml
index 8cbd3648..45a18c18 100755
--- a/com_actionbarsherlock/res/values/abs__styles.xml
+++ b/com_actionbarsherlock/res/values/abs__styles.xml
@@ -182,6 +182,7 @@
         <item name="android:divider">?attr/dividerVertical</item>
         <item name="android:showDividers">middle</item>
         <item name="android:dividerPadding">6dip</item>
+        <item name="android:minHeight">?attr/actionBarSize</item>
     </style>
     <style name="Widget.Sherlock.ActivityChooserView" parent="Sherlock.__Widget.ActivityChooserView">
     </style>
@@ -279,6 +280,28 @@
 
 
 
+    <style name="Sherlock.__Widget.SearchAutoCompleteTextView" parent="Widget">
+        <item name="android:focusable">true</item>
+        <item name="android:focusableInTouchMode">true</item>
+        <item name="android:clickable">true</item>
+        <item name="android:textAppearance">?android:attr/textAppearanceMediumInverse</item>
+        <item name="android:textColor">?attr/textColorPrimary</item>
+        <item name="android:gravity">center_vertical</item>
+        <item name="android:completionHintView">@layout/abs__simple_dropdown_hint</item>
+        <item name="android:completionThreshold">2</item>
+        <item name="android:dropDownWidth">wrap_content</item>
+    </style>
+    <style name="Widget.Sherlock.SearchAutoCompleteTextView" parent="Sherlock.__Widget.SearchAutoCompleteTextView">
+        <item name="android:dropDownSelector">@drawable/abs__list_selector_holo_dark</item>
+        <item name="android:popupBackground">@drawable/abs__menu_dropdown_panel_holo_dark</item>
+    </style>
+    <style name="Widget.Sherlock.Light.SearchAutoCompleteTextView" parent="Sherlock.__Widget.SearchAutoCompleteTextView">
+        <item name="android:dropDownSelector">@drawable/abs__list_selector_holo_light</item>
+        <item name="android:popupBackground">@drawable/abs__menu_dropdown_panel_holo_light</item>
+    </style>
+
+
+
     <style name="DialogWindowTitle.Sherlock" parent="Widget">
         <item name="android:maxLines">1</item>
         <item name="android:scrollHorizontally">true</item>
@@ -381,4 +404,9 @@
     </style>
     <style name="TextAppearance.Sherlock.Light.Small" parent="TextAppearance.Sherlock.Small">
     </style>
+
+    <style name="TextAppearance.Sherlock.Widget.DropDownHint" parent="Widget">
+        <item name="android:textColor">?textColorPrimary</item>
+        <item name="android:textSize">14sp</item>
+    </style>
 </resources>
diff --git a/com_actionbarsherlock/res/values/abs__themes.xml b/com_actionbarsherlock/res/values/abs__themes.xml
index 5300dedd..634fa798 100755
--- a/com_actionbarsherlock/res/values/abs__themes.xml
+++ b/com_actionbarsherlock/res/values/abs__themes.xml
@@ -11,7 +11,7 @@
     </style>
     <style name="Sherlock.__Theme.Dialog" parent="android:Theme.Dialog">
     </style>
-    
+
     <style name="Theme.Sherlock" parent="Sherlock.__Theme">
         <!-- Action bar styles (from Theme.Holo) -->
         <item name="actionDropDownStyle">@style/Widget.Sherlock.Spinner.DropDown.ActionBar</item>
@@ -29,41 +29,53 @@
         <item name="actionBarSize">@dimen/abs__action_bar_default_height</item>
         <!-- Internal --><item name="actionModePopupWindowStyle">@style/Widget.Sherlock.PopupWindow.ActionMode</item>
         <item name="actionBarWidgetTheme">@null</item>
-        
+
         <!-- Action bar styles (defaults from Theme) -->
         <item name="actionBarSplitStyle">?attr/actionBarStyle</item>
         <item name="actionMenuTextAppearance">@style/TextAppearance.Sherlock.Widget.ActionBar.Menu</item>
         <item name="actionMenuTextColor">?attr/textColorPrimary</item>
         <item name="actionBarDivider">?attr/dividerVertical</item>
-        <item name="actionBarItemBackground">@drawable/abs__item_background_holo_dark</item>
+        <item name="actionBarItemBackground">?attr/selectableItemBackground</item>
 
         <item name="buttonStyleSmall">@style/Widget.Sherlock.Button.Small</item>
-        
+
+        <item name="selectableItemBackground">@drawable/abs__item_background_holo_dark</item>
+
         <item name="activatedBackgroundIndicator">@drawable/abs__activated_background_holo_dark</item>
         <item name="actionModeShareDrawable">@drawable/abs__ic_menu_share_holo_dark</item>
         <item name="activityChooserViewStyle">@style/Widget.Sherlock.ActivityChooserView</item>
-        
+
         <item name="homeAsUpIndicator">@drawable/abs__ic_ab_back_holo_dark</item>
-        
+
         <item name="dividerVertical">@drawable/abs__list_divider_holo_dark</item>
-        
+
         <item name="spinnerDropDownItemStyle">@style/Widget.Sherlock.DropDownItem.Spinner</item>
         <item name="spinnerItemStyle">@style/Widget.Sherlock.TextView.SpinnerItem</item>
-        
+
         <item name="textColorPrimary">@color/abs__primary_text_holo_dark</item>
         <item name="textColorPrimaryDisableOnly">@color/abs__primary_text_disable_only_holo_dark</item>
         <item name="textColorPrimaryInverse">@color/abs__primary_text_holo_light</item>
-        
+
         <!-- Internal --><item name="dropdownListPreferredItemHeight">48dip</item>
         <item name="dropDownListViewStyle">@style/Widget.Sherlock.ListView.DropDown</item>
 
         <item name="textAppearanceSmall">@style/TextAppearance.Sherlock.Small</item>
         <item name="textAppearanceLargePopupMenu">@style/TextAppearance.Sherlock.Widget.PopupMenu.Large</item>
         <item name="textAppearanceSmallPopupMenu">@style/TextAppearance.Sherlock.Widget.PopupMenu.Small</item>
-        
+
         <item name="popupMenuStyle">@style/Widget.Sherlock.PopupMenu</item>
         <!-- Internal --><item name="listPopupWindowStyle">@style/Widget.Sherlock.ListPopupWindow</item>
-        
+
+        <item name="searchDropdownBackground">@drawable/abs__search_dropdown_dark</item>
+        <item name="searchViewTextField">@drawable/abs__textfield_searchview_holo_dark</item>
+        <item name="searchViewTextFieldRight">@drawable/abs__textfield_searchview_right_holo_dark</item>
+        <item name="searchViewCloseIcon">@drawable/abs__ic_clear</item>
+        <item name="searchViewSearchIcon">@drawable/abs__ic_search</item>
+        <item name="searchViewGoIcon">@drawable/abs__ic_go</item>
+        <item name="searchViewVoiceIcon">@drawable/abs__ic_voice_search</item>
+        <item name="searchAutoCompleteTextView">@style/Widget.Sherlock.SearchAutoCompleteTextView</item>
+        <item name="android:dropDownHintAppearance">@style/TextAppearance.Sherlock.Widget.DropDownHint</item>
+
         <item name="windowActionBar">true</item>
         <item name="windowActionModeOverlay">false</item>
         <item name="windowContentOverlay">@null</item>
@@ -85,41 +97,53 @@
         <item name="actionBarSize">@dimen/abs__action_bar_default_height</item>
         <!-- Internal --><item name="actionModePopupWindowStyle">@style/Widget.Sherlock.Light.PopupWindow.ActionMode</item>
         <item name="actionBarWidgetTheme">@null</item>
-        
+
         <!-- Action bar styles (defaults from Theme) -->
         <item name="actionBarSplitStyle">?attr/actionBarStyle</item>
         <item name="actionMenuTextAppearance">@style/TextAppearance.Sherlock.Widget.ActionBar.Menu</item>
         <item name="actionMenuTextColor">?attr/textColorPrimary</item>
         <item name="actionBarDivider">?attr/dividerVertical</item>
-        <item name="actionBarItemBackground">@drawable/abs__item_background_holo_light</item>
+        <item name="actionBarItemBackground">?attr/selectableItemBackground</item>
 
         <item name="buttonStyleSmall">@style/Widget.Sherlock.Light.Button.Small</item>
-        
+
+        <item name="selectableItemBackground">@drawable/abs__item_background_holo_light</item>
+
         <item name="activatedBackgroundIndicator">@drawable/abs__activated_background_holo_light</item>
         <item name="actionModeShareDrawable">@drawable/abs__ic_menu_share_holo_light</item>
         <item name="activityChooserViewStyle">@style/Widget.Sherlock.Light.ActivityChooserView</item>
-        
+
         <item name="homeAsUpIndicator">@drawable/abs__ic_ab_back_holo_light</item>
-        
+
         <item name="dividerVertical">@drawable/abs__list_divider_holo_light</item>
-        
+
         <item name="spinnerDropDownItemStyle">@style/Widget.Sherlock.Light.DropDownItem.Spinner</item>
         <item name="spinnerItemStyle">@style/Widget.Sherlock.TextView.SpinnerItem</item>
-        
+
         <item name="textColorPrimary">@color/abs__primary_text_holo_light</item>
         <item name="textColorPrimaryDisableOnly">@color/abs__primary_text_disable_only_holo_light</item>
         <item name="textColorPrimaryInverse">@color/abs__primary_text_holo_dark</item>
-        
+
         <!-- Internal --><item name="dropdownListPreferredItemHeight">48dip</item>
         <item name="dropDownListViewStyle">@style/Widget.Sherlock.Light.ListView.DropDown</item>
 
         <item name="textAppearanceSmall">@style/TextAppearance.Sherlock.Light.Small</item>
         <item name="textAppearanceLargePopupMenu">@style/TextAppearance.Sherlock.Light.Widget.PopupMenu.Large</item>
         <item name="textAppearanceSmallPopupMenu">@style/TextAppearance.Sherlock.Light.Widget.PopupMenu.Small</item>
-        
+
         <item name="popupMenuStyle">@style/Widget.Sherlock.Light.PopupMenu</item>
         <!-- Internal --><item name="listPopupWindowStyle">@style/Widget.Sherlock.Light.ListPopupWindow</item>
-        
+
+        <item name="searchDropdownBackground">@drawable/abs__search_dropdown_light</item>
+        <item name="searchViewTextField">@drawable/abs__textfield_searchview_holo_light</item>
+        <item name="searchViewTextFieldRight">@drawable/abs__textfield_searchview_right_holo_light</item>
+        <item name="searchViewCloseIcon">@drawable/abs__ic_clear_holo_light</item>
+        <item name="searchViewSearchIcon">@drawable/abs__ic_search_api_holo_light</item>
+        <item name="searchViewGoIcon">@drawable/abs__ic_go_search_api_holo_light</item>
+        <item name="searchViewVoiceIcon">@drawable/abs__ic_voice_search_api_holo_light</item>
+        <item name="searchAutoCompleteTextView">@style/Widget.Sherlock.Light.SearchAutoCompleteTextView</item>
+        <item name="android:dropDownHintAppearance">@style/TextAppearance.Sherlock.Widget.DropDownHint</item>
+
         <item name="windowActionBar">true</item>
         <item name="windowActionModeOverlay">false</item>
         <item name="windowContentOverlay">@null</item>
@@ -145,11 +169,11 @@
         <item name="actionModeStyle">@style/Widget.Sherlock.Light.ActionMode.Inverse</item>
         <item name="actionModeCloseButtonStyle">@style/Widget.Sherlock.ActionButton.CloseMode</item>
         <item name="actionModePopupWindowStyle">@style/Widget.Sherlock.PopupWindow.ActionMode</item>
-        
+
         <item name="actionModeShareDrawable">@drawable/abs__ic_menu_share_holo_dark</item>
     </style>
-    
-    
+
+
     <style name="Theme.Sherlock.NoActionBar">
         <item name="windowActionBar">false</item>
         <item name="windowNoTitle">true</item>
@@ -158,19 +182,8 @@
         <item name="windowActionBar">false</item>
         <item name="windowNoTitle">true</item>
     </style>
-    
-    
-    <style name="Theme.Sherlock.ForceOverflow">
-        <item name="absForceOverflow">true</item>
-    </style>
-    <style name="Theme.Sherlock.Light.ForceOverflow">
-        <item name="absForceOverflow">true</item>
-    </style>
-    <style name="Theme.Sherlock.Light.DarkActionBar.ForceOverflow">
-        <item name="absForceOverflow">true</item>
-    </style>
-    
-    
+
+
     <style name="Theme.Sherlock.Dialog" parent="android:Theme">
         <item name="android:windowFrame">@null</item>
         <item name="android:windowTitleStyle">@style/DialogWindowTitle.Sherlock</item>
@@ -179,21 +192,21 @@
         <item name="android:windowContentOverlay">@null</item>
         <item name="android:windowAnimationStyle">@android:style/Animation.Dialog</item>
         <item name="android:windowSoftInputMode">stateUnspecified|adjustPan</item>
-        
+
         <item name="android:windowActionBar">false</item>
         <item name="android:windowActionModeOverlay">true</item>
         <item name="android:windowCloseOnTouchOutside">true</item>
         <item name="android:windowNoTitle">true</item>
         <item name="android:backgroundDimAmount">0.6</item>
-        
+
         <item name="android:colorBackgroundCacheHint">@null</item>
-        
+
         <item name="android:textColorPrimary">@color/abs__primary_text_holo_dark</item>
         <item name="android:textColorPrimaryInverse">@color/abs__primary_text_holo_light</item>
-        
+
         <item name="windowMinWidthMajor">@dimen/abs__dialog_min_width_major</item>
         <item name="windowMinWidthMinor">@dimen/abs__dialog_min_width_minor</item>
-        
+
         <item name="windowActionBar">false</item>
         <item name="windowContentOverlay">@null</item>
     </style>
@@ -205,21 +218,21 @@
         <item name="android:windowContentOverlay">@null</item>
         <item name="android:windowAnimationStyle">@android:style/Animation.Dialog</item>
         <item name="android:windowSoftInputMode">stateUnspecified|adjustPan</item>
-        
+
         <item name="android:windowActionBar">false</item>
         <item name="android:windowActionModeOverlay">true</item>
         <item name="android:windowCloseOnTouchOutside">true</item>
         <item name="android:windowNoTitle">true</item>
         <item name="android:backgroundDimAmount">0.6</item>
-        
+
         <item name="android:colorBackgroundCacheHint">@null</item>
-        
+
         <item name="android:textColorPrimary">@color/abs__primary_text_holo_light</item>
         <item name="android:textColorPrimaryInverse">@color/abs__primary_text_holo_dark</item>
-        
+
         <item name="windowMinWidthMajor">@dimen/abs__dialog_min_width_major</item>
         <item name="windowMinWidthMinor">@dimen/abs__dialog_min_width_minor</item>
-        
+
         <item name="windowActionBar">false</item>
         <item name="windowContentOverlay">@null</item>
     </style>
diff --git a/com_actionbarsherlock/src/android/support/v4/app/_ActionBarSherlockTrojanHorse.java b/com_actionbarsherlock/src/android/support/v4/app/Watson.java
similarity index 92%
rename from com_actionbarsherlock/src/android/support/v4/app/_ActionBarSherlockTrojanHorse.java
rename to com_actionbarsherlock/src/android/support/v4/app/Watson.java
index 3e3db62b..d93de4c6 100755
--- a/com_actionbarsherlock/src/android/support/v4/app/_ActionBarSherlockTrojanHorse.java
+++ b/com_actionbarsherlock/src/android/support/v4/app/Watson.java
@@ -13,9 +13,9 @@
 import java.util.ArrayList;
 
 /** I'm in ur package. Stealing ur variables. */
-public abstract class _ActionBarSherlockTrojanHorse extends FragmentActivity implements OnCreatePanelMenuListener, OnPreparePanelListener, OnMenuItemSelectedListener {
+public abstract class Watson extends FragmentActivity implements OnCreatePanelMenuListener, OnPreparePanelListener, OnMenuItemSelectedListener {
     private static final boolean DEBUG = false;
-    private static final String TAG = "_ActionBarSherlockTrojanHorse";
+    private static final String TAG = "Watson";
 
     /** Fragment interface for menu creation callback. */
     public interface OnCreateOptionsMenuListener {
@@ -27,7 +27,7 @@
     }
     /** Fragment interface for menu item selection callback. */
     public interface OnOptionsItemSelectedListener {
-      public boolean onOptionsItemSelected(MenuItem item);
+        public boolean onOptionsItemSelected(MenuItem item);
     }
 
     private ArrayList<Fragment> mCreatedMenus;
@@ -48,7 +48,7 @@ public boolean onCreatePanelMenu(int featureId, Menu menu) {
             MenuInflater inflater = getSupportMenuInflater();
             boolean show = false;
             ArrayList<Fragment> newMenus = null;
-            if (mFragments.mActive != null) {
+            if (mFragments.mAdded != null) {
                 for (int i = 0; i < mFragments.mAdded.size(); i++) {
                     Fragment f = mFragments.mAdded.get(i);
                     if (f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible && f instanceof OnCreateOptionsMenuListener) {
@@ -91,7 +91,7 @@ public boolean onPreparePanel(int featureId, View view, Menu menu) {
             if (DEBUG) Log.d(TAG, "[onPreparePanel] activity prepare result: " + result);
 
             boolean show = false;
-            if (mFragments.mActive != null) {
+            if (mFragments.mAdded != null) {
                 for (int i = 0; i < mFragments.mAdded.size(); i++) {
                     Fragment f = mFragments.mAdded.get(i);
                     if (f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible && f instanceof OnPrepareOptionsMenuListener) {
@@ -120,7 +120,7 @@ public boolean onMenuItemSelected(int featureId, MenuItem item) {
                 return true;
             }
 
-            if (mFragments.mActive != null) {
+            if (mFragments.mAdded != null) {
                 for (int i = 0; i < mFragments.mAdded.size(); i++) {
                     Fragment f = mFragments.mAdded.get(i);
                     if (f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible && f instanceof OnOptionsItemSelectedListener) {
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/ActionBarSherlock.java b/com_actionbarsherlock/src/com/actionbarsherlock/ActionBarSherlock.java
index 8340fb59..ab160f83 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/ActionBarSherlock.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/ActionBarSherlock.java
@@ -537,6 +537,9 @@ public void dispatchPanelClosed(int featureId, android.view.Menu menu) {}
      */
     public void dispatchDestroy() {}
 
+    public void dispatchSaveInstanceState(Bundle outState) {}
+
+    public void dispatchRestoreInstanceState(Bundle savedInstanceState) {}
 
     ///////////////////////////////////////////////////////////////////////////
     ///////////////////////////////////////////////////////////////////////////
@@ -769,7 +772,7 @@ public MenuInflater getMenuInflater() {
         // Make sure that action views can get an appropriate theme.
         if (mMenuInflater == null) {
             if (getActionBar() != null) {
-                mMenuInflater = new MenuInflater(getThemedContext());
+                mMenuInflater = new MenuInflater(getThemedContext(), mActivity);
             } else {
                 mMenuInflater = new MenuInflater(mActivity);
             }
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java b/com_actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java
index 2497d24f..03755be2 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/app/ActionBar.java
@@ -17,6 +17,7 @@
 package com.actionbarsherlock.app;
 
 import android.content.Context;
+import android.content.res.TypedArray;
 import android.graphics.drawable.Drawable;
 import android.support.v4.app.FragmentTransaction;
 import android.util.AttributeSet;
@@ -895,6 +896,10 @@ public void setHomeButtonEnabled(boolean enabled) { }
      * @attr ref android.R.styleable#ActionBar_LayoutParams_layout_gravity
      */
     public static class LayoutParams extends MarginLayoutParams {
+        private static final int[] ATTRS = new int[] {
+                android.R.attr.layout_gravity
+        };
+
         /**
          * Gravity for the view associated with these LayoutParams.
          *
@@ -918,6 +923,10 @@ public void setHomeButtonEnabled(boolean enabled) { }
 
         public LayoutParams(Context c, AttributeSet attrs) {
             super(c, attrs);
+
+            TypedArray a = c.obtainStyledAttributes(attrs, ATTRS);
+            gravity = a.getInt(0, -1);
+            a.recycle();
         }
 
         public LayoutParams(int width, int height) {
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockActivity.java b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockActivity.java
index 9cb57e95..7b454364 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockActivity.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockActivity.java
@@ -116,6 +116,17 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         return super.dispatchKeyEvent(event);
     }
 
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        getSherlock().dispatchSaveInstanceState(outState);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+        super.onRestoreInstanceState(savedInstanceState);
+        getSherlock().dispatchRestoreInstanceState(savedInstanceState);
+    }
 
     ///////////////////////////////////////////////////////////////////////////
     // Native menu handling
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
index 5cd13ba7..3d092f03 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
@@ -2,7 +2,7 @@
 
 import android.content.res.Configuration;
 import android.os.Bundle;
-import android.support.v4.app._ActionBarSherlockTrojanHorse;
+import android.support.v4.app.Watson;
 import android.util.Log;
 import android.view.KeyEvent;
 import android.view.View;
@@ -17,8 +17,8 @@
 import static com.actionbarsherlock.ActionBarSherlock.OnActionModeFinishedListener;
 import static com.actionbarsherlock.ActionBarSherlock.OnActionModeStartedListener;
 
-/** @see {@link _ActionBarSherlockTrojanHorse} */
-public class SherlockFragmentActivity extends _ActionBarSherlockTrojanHorse implements OnActionModeStartedListener, OnActionModeFinishedListener {
+/** @see {@link android.support.v4.app.Watson} */
+public class SherlockFragmentActivity extends Watson implements OnActionModeStartedListener, OnActionModeFinishedListener {
     private static final boolean DEBUG = false;
     private static final String TAG = "SherlockFragmentActivity";
 
@@ -122,6 +122,17 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         return super.dispatchKeyEvent(event);
     }
 
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        getSherlock().dispatchSaveInstanceState(outState);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+        super.onRestoreInstanceState(savedInstanceState);
+        getSherlock().dispatchRestoreInstanceState(savedInstanceState);
+    }
 
     ///////////////////////////////////////////////////////////////////////////
     // Native menu handling
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockListActivity.java b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockListActivity.java
index 00c00fee..aba6d85e 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockListActivity.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockListActivity.java
@@ -116,6 +116,17 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         return super.dispatchKeyEvent(event);
     }
 
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        getSherlock().dispatchSaveInstanceState(outState);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+        super.onRestoreInstanceState(savedInstanceState);
+        getSherlock().dispatchRestoreInstanceState(savedInstanceState);
+    }
 
     ///////////////////////////////////////////////////////////////////////////
     // Native menu handling
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockPreferenceActivity.java b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockPreferenceActivity.java
index 4f80be51..bee72cb2 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockPreferenceActivity.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/app/SherlockPreferenceActivity.java
@@ -116,6 +116,17 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         return super.dispatchKeyEvent(event);
     }
 
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        getSherlock().dispatchSaveInstanceState(outState);
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+        super.onRestoreInstanceState(savedInstanceState);
+        getSherlock().dispatchRestoreInstanceState(savedInstanceState);
+    }
 
     ///////////////////////////////////////////////////////////////////////////
     // Native menu handling
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
index 05353d28..5e69275c 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
@@ -52,6 +52,7 @@
     /** Window features which are enabled by default. */
     protected static final int DEFAULT_FEATURES = 0;
 
+    static private final String PANELS_TAG = "sherlock:Panels";
 
     public ActionBarSherlockCompat(Activity activity, int flags) {
         super(activity, flags);
@@ -71,8 +72,6 @@ public ActionBarSherlockCompat(Activity activity, int flags) {
     private MenuBuilder mMenu;
     /** Map between native options items and sherlock items. */
     protected HashMap<android.view.MenuItem, MenuItemImpl> mNativeItemMap;
-    /** Indication of a long-press on the hardware menu key. */
-    private boolean mMenuKeyIsLongPress = false;
 
     /** Parent view of the window decoration (action bar, mode, etc.). */
     private ViewGroup mDecor;
@@ -293,7 +292,10 @@ public boolean dispatchCloseOptionsMenu() {
             return false;
         }
 
-        return wActionBar.hideOverflowMenu();
+        if (wActionBar != null) {
+            return wActionBar.hideOverflowMenu();
+        }
+        return false;
     }
 
     @Override
@@ -424,27 +426,8 @@ public boolean dispatchKeyEvent(KeyEvent event) {
             }
         }
 
-        boolean result = false;
-        if (keyCode == KeyEvent.KEYCODE_MENU && isReservingOverflow()) {
-            if (event.getAction() == KeyEvent.ACTION_DOWN && event.isLongPress()) {
-                mMenuKeyIsLongPress = true;
-            } else if (event.getAction() == KeyEvent.ACTION_UP) {
-                if (!mMenuKeyIsLongPress) {
-                    if (mActionMode == null && wActionBar != null) {
-                        if (wActionBar.isOverflowMenuShowing()) {
-                            wActionBar.hideOverflowMenu();
-                        } else {
-                            wActionBar.showOverflowMenu();
-                        }
-                    }
-                    result = true;
-                }
-                mMenuKeyIsLongPress = false;
-            }
-        }
-
-        if (DEBUG) Log.d(TAG, "[dispatchKeyEvent] returning " + result);
-        return result;
+        if (DEBUG) Log.d(TAG, "[dispatchKeyEvent] returning false");
+        return false;
     }
 
     @Override
@@ -452,6 +435,19 @@ public void dispatchDestroy() {
         mIsDestroyed = true;
     }
 
+    @Override
+    public void dispatchSaveInstanceState(Bundle outState) {
+        if (mMenu != null) {
+            mMenuFrozenActionViewState = new Bundle();
+            mMenu.saveActionViewStates(mMenuFrozenActionViewState);
+        }
+        outState.putParcelable(PANELS_TAG, mMenuFrozenActionViewState);
+    }
+
+    @Override
+    public void dispatchRestoreInstanceState(Bundle savedInstanceState) {
+        mMenuFrozenActionViewState = savedInstanceState.getParcelable(PANELS_TAG);
+    }
 
     ///////////////////////////////////////////////////////////////////////////
     // Menu callback lifecycle and creation
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
index 9afca185..0824d384 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
@@ -208,7 +208,12 @@ public ActionMode startActionMode(com.actionbarsherlock.view.ActionMode.Callback
         //is where we will set the new instance to mActionMode since we need
         //to pass it through to the sherlock callbacks and the call below
         //will not have returned yet to store its value.
-        mActivity.startActionMode(wrapped);
+        if (mActivity.startActionMode(wrapped) == null) {
+            mActionMode = null;
+        }
+        if (mActivity instanceof OnActionModeStartedListener && mActionMode != null) {
+            ((OnActionModeStartedListener)mActivity).onActionModeStarted(mActionMode);
+        }
 
         return mActionMode;
     }
@@ -241,6 +246,9 @@ public boolean onActionItemClicked(android.view.ActionMode mode, android.view.Me
         @Override
         public void onDestroyActionMode(android.view.ActionMode mode) {
             mCallback.onDestroyActionMode(mActionMode);
+            if (mActivity instanceof OnActionModeFinishedListener) {
+                ((OnActionModeFinishedListener)mActivity).onActionModeFinished(mActionMode);
+            }
         }
     }
 
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java
index 6ae0402c..d022a246 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarImpl.java
@@ -26,6 +26,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Handler;
+import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentTransaction;
 import android.util.TypedValue;
 import android.view.ContextThemeWrapper;
@@ -36,7 +37,6 @@
 import android.widget.SpinnerAdapter;
 import com.actionbarsherlock.R;
 import com.actionbarsherlock.app.ActionBar;
-import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.internal.nineoldandroids.animation.Animator;
 import com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorListenerAdapter;
 import com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet;
@@ -506,8 +506,8 @@ public void selectTab(Tab tab) {
         }
 
         FragmentTransaction trans = null;
-        if (mActivity instanceof SherlockFragmentActivity) {
-            trans = ((SherlockFragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
+        if (mActivity instanceof FragmentActivity) {
+            trans = ((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
                     .disallowAddToBackStack();
         }
 
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java
index e390ea42..840cb3d2 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java
@@ -6,12 +6,12 @@
 import android.app.Activity;
 import android.content.Context;
 import android.graphics.drawable.Drawable;
+import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentTransaction;
 import android.view.View;
 import android.widget.SpinnerAdapter;
 
 import com.actionbarsherlock.app.ActionBar;
-import com.actionbarsherlock.app.SherlockFragmentActivity;
 
 public class ActionBarWrapper extends ActionBar implements android.app.ActionBar.OnNavigationListener, android.app.ActionBar.OnMenuVisibilityListener {
     private final Activity mActivity;
@@ -319,8 +319,8 @@ public CharSequence getContentDescription() {
         public void onTabReselected(android.app.ActionBar.Tab tab, android.app.FragmentTransaction ft) {
             if (mListener != null) {
                 FragmentTransaction trans = null;
-                if (mActivity instanceof SherlockFragmentActivity) {
-                    trans = ((SherlockFragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
+                if (mActivity instanceof FragmentActivity) {
+                    trans = ((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
                             .disallowAddToBackStack();
                 }
 
@@ -336,8 +336,8 @@ public void onTabReselected(android.app.ActionBar.Tab tab, android.app.FragmentT
         public void onTabSelected(android.app.ActionBar.Tab tab, android.app.FragmentTransaction ft) {
             if (mListener != null) {
 
-                if (mFragmentTransaction == null && mActivity instanceof SherlockFragmentActivity) {
-                    mFragmentTransaction = ((SherlockFragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
+                if (mFragmentTransaction == null && mActivity instanceof FragmentActivity) {
+                    mFragmentTransaction = ((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
                             .disallowAddToBackStack();
                 }
 
@@ -356,8 +356,8 @@ public void onTabSelected(android.app.ActionBar.Tab tab, android.app.FragmentTra
         public void onTabUnselected(android.app.ActionBar.Tab tab, android.app.FragmentTransaction ft) {
             if (mListener != null) {
                 FragmentTransaction trans = null;
-                if (mActivity instanceof SherlockFragmentActivity) {
-                    trans = ((SherlockFragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
+                if (mActivity instanceof FragmentActivity) {
+                    trans = ((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
                             .disallowAddToBackStack();
                     mFragmentTransaction = trans;
                 }
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java
index 2c428e90..953e3e84 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineFrameLayout.java
@@ -9,18 +9,10 @@
 public class NineFrameLayout extends FrameLayout {
     private final AnimatorProxy mProxy;
 
-    public NineFrameLayout(Context context) {
-        super(context);
-        mProxy = AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : null;
-    }
     public NineFrameLayout(Context context, AttributeSet attrs) {
         super(context, attrs);
         mProxy = AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : null;
     }
-    public NineFrameLayout(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        mProxy = AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : null;
-    }
 
     @Override
     public void setVisibility(int visibility) {
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java
index a670b1f6..1f381013 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/nineoldandroids/widget/NineLinearLayout.java
@@ -9,18 +9,10 @@
 public class NineLinearLayout extends LinearLayout {
     private final AnimatorProxy mProxy;
 
-    public NineLinearLayout(Context context) {
-        super(context);
-        mProxy = AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : null;
-    }
     public NineLinearLayout(Context context, AttributeSet attrs) {
         super(context, attrs);
         mProxy = AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : null;
     }
-    public NineLinearLayout(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        mProxy = AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : null;
-    }
 
     @Override
     public void setVisibility(int visibility) {
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java
index 6f568c69..876a22c5 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java
@@ -23,7 +23,6 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.content.res.Resources;
-import android.content.res.TypedArray;
 import android.os.Build;
 import android.os.Parcel;
 import android.os.Parcelable;
@@ -119,14 +118,6 @@ public void initForMenu(Context context, MenuBuilder menu) {
     }
 
     public static boolean reserveOverflow(Context context) {
-        //Check for theme-forced overflow action item
-        TypedArray a = context.getTheme().obtainStyledAttributes(R.styleable.SherlockTheme);
-        boolean result = a.getBoolean(R.styleable.SherlockTheme_absForceOverflow, false);
-        a.recycle();
-        if (result) {
-            return true;
-        }
-
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
             return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB);
         } else {
@@ -621,6 +612,8 @@ protected void onDetachedFromWindow() {
             for (View_OnAttachStateChangeListener listener : mListeners) {
                 listener.onViewDetachedFromWindow(this);
             }
+
+            if (mOverflowPopup != null) mOverflowPopup.dismiss();
         }
 
         @Override
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuView.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuView.java
index e090677a..0e3b1ae0 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuView.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuView.java
@@ -520,6 +520,9 @@ public void initialize(MenuBuilder menu) {
 
     //@Override
     protected boolean hasDividerBeforeChildAt(int childIndex) {
+        if (childIndex == 0) {
+            return false;
+        }
         final View childBefore = getChildAt(childIndex - 1);
         final View child = getChildAt(childIndex);
         boolean result = false;
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java
index 907a7aa0..aaf2997b 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuItemWrapper.java
@@ -2,10 +2,12 @@
 
 import android.content.Intent;
 import android.graphics.drawable.Drawable;
-import android.view.View;
 import android.view.ContextMenu.ContextMenuInfo;
+import android.view.View;
 import com.actionbarsherlock.internal.view.ActionProviderWrapper;
+import com.actionbarsherlock.internal.widget.CollapsibleActionViewWrapper;
 import com.actionbarsherlock.view.ActionProvider;
+import com.actionbarsherlock.view.CollapsibleActionView;
 import com.actionbarsherlock.view.MenuItem;
 import com.actionbarsherlock.view.SubMenu;
 
@@ -215,19 +217,35 @@ public MenuItem setShowAsActionFlags(int actionEnum) {
 
     @Override
     public MenuItem setActionView(View view) {
+        if (view != null && view instanceof CollapsibleActionView) {
+            view = new CollapsibleActionViewWrapper(view);
+        }
         mNativeItem.setActionView(view);
         return this;
     }
 
     @Override
     public MenuItem setActionView(int resId) {
+        //Allow the native menu to inflate the resource
         mNativeItem.setActionView(resId);
+        if (resId != 0) {
+            //Get newly created view
+            View view = mNativeItem.getActionView();
+            if (view instanceof CollapsibleActionView) {
+                //Wrap it and re-set it
+                mNativeItem.setActionView(new CollapsibleActionViewWrapper(view));
+            }
+        }
         return this;
     }
 
     @Override
     public View getActionView() {
-        return mNativeItem.getActionView();
+        View actionView = mNativeItem.getActionView();
+        if (actionView instanceof CollapsibleActionViewWrapper) {
+            return ((CollapsibleActionViewWrapper)actionView).unwrap();
+        }
+        return actionView;
     }
 
     @Override
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuWrapper.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuWrapper.java
index 64fc4aea..3d4dd42f 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuWrapper.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/MenuWrapper.java
@@ -79,10 +79,15 @@ public SubMenu addSubMenu(int groupId, int itemId, int order, int titleRes) {
 
     @Override
     public int addIntentOptions(int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems) {
-        android.view.MenuItem[] nativeOutItems = new android.view.MenuItem[outSpecificItems.length];
-        int result = mNativeMenu.addIntentOptions(groupId, itemId, order, caller, specifics, intent, flags, nativeOutItems);
-        for (int i = 0, length = outSpecificItems.length; i < length; i++) {
-            outSpecificItems[i] = new MenuItemWrapper(nativeOutItems[i]);
+        int result;
+        if (outSpecificItems != null) {
+            android.view.MenuItem[] nativeOutItems = new android.view.MenuItem[outSpecificItems.length];
+            result = mNativeMenu.addIntentOptions(groupId, itemId, order, caller, specifics, intent, flags, nativeOutItems);
+            for (int i = 0, length = outSpecificItems.length; i < length; i++) {
+                outSpecificItems[i] = new MenuItemWrapper(nativeOutItems[i]);
+            }
+        } else {
+            result = mNativeMenu.addIntentOptions(groupId, itemId, order, caller, specifics, intent, flags, null);
         }
         return result;
     }
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContainer.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContainer.java
index 5e5aa286..1d9c68b3 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContainer.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContainer.java
@@ -18,8 +18,11 @@
 
 import android.content.Context;
 import android.content.res.TypedArray;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
@@ -60,6 +63,16 @@ public ActionBarContainer(Context context, AttributeSet attrs) {
         mStackedBackground = a.getDrawable(
                 R.styleable.SherlockActionBar_backgroundStacked);
 
+        //Fix for issue #379
+        if (mStackedBackground instanceof ColorDrawable && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
+            Bitmap bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
+            Canvas c = new Canvas(bitmap);
+            mStackedBackground.draw(c);
+            int color = bitmap.getPixel(0, 0);
+            bitmap.recycle();
+            mStackedBackground = new IcsColorDrawable(color);
+        }
+
         if (getId() == R.id.abs__split_action_bar) {
             mIsSplit = true;
             mSplitBackground = a.getDrawable(
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java
index 673ec554..cae8b8ae 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingTextView.java
@@ -1,12 +1,13 @@
 package com.actionbarsherlock.internal.widget;
 
-import java.util.Locale;
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.os.Build;
 import android.util.AttributeSet;
 import android.widget.TextView;
 
+import java.util.Locale;
+
 public class CapitalizingTextView extends TextView {
     private static final boolean SANS_ICE_CREAM = Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH;
     private static final boolean IS_GINGERBREAD = Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD;
@@ -33,7 +34,12 @@ public CapitalizingTextView(Context context, AttributeSet attrs, int defStyle) {
     public void setTextCompat(CharSequence text) {
         if (SANS_ICE_CREAM && mAllCaps && text != null) {
             if (IS_GINGERBREAD) {
-                setText(text.toString().toUpperCase(Locale.ROOT));
+                try {
+                    setText(text.toString().toUpperCase(Locale.ROOT));
+                } catch (NoSuchFieldError e) {
+                    //Some manufacturer broke Locale.ROOT. See #572.
+                    setText(text.toString().toUpperCase());
+                }
             } else {
                 setText(text.toString().toUpperCase());
             }
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java
new file mode 100755
index 00000000..14f092c8
--- /dev/null
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/CollapsibleActionViewWrapper.java
@@ -0,0 +1,30 @@
+package com.actionbarsherlock.internal.widget;
+
+import android.view.View;
+import android.widget.FrameLayout;
+import com.actionbarsherlock.view.CollapsibleActionView;
+
+/**
+ * Wraps an ABS collapsible action view in a native container that delegates the calls.
+ */
+public class CollapsibleActionViewWrapper extends FrameLayout implements android.view.CollapsibleActionView {
+    private final CollapsibleActionView child;
+
+    public CollapsibleActionViewWrapper(View child) {
+        super(child.getContext());
+        this.child = (CollapsibleActionView) child;
+        addView(child);
+    }
+
+    @Override public void onActionViewExpanded() {
+        child.onActionViewExpanded();
+    }
+
+    @Override public void onActionViewCollapsed() {
+        child.onActionViewCollapsed();
+    }
+
+    public View unwrap() {
+        return getChildAt(0);
+    }
+}
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsColorDrawable.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsColorDrawable.java
new file mode 100755
index 00000000..a78b3f71
--- /dev/null
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsColorDrawable.java
@@ -0,0 +1,41 @@
+package com.actionbarsherlock.internal.widget;
+
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+
+/**
+ * A version of {@link android.graphics.drawable.ColorDrawable} that respects bounds.
+ */
+public class IcsColorDrawable extends Drawable {
+    private int color;
+    private final Paint paint = new Paint();
+
+    public IcsColorDrawable(int color) {
+        this.color = color;
+    }
+
+    @Override public void draw(Canvas canvas) {
+        if ((color >>> 24) != 0) {
+            paint.setColor(color);
+            canvas.drawRect(getBounds(), paint);
+        }
+    }
+
+    @Override
+    public void setAlpha(int alpha) {
+        if (alpha != (color >>> 24)) {
+            color = (color & 0x00FFFFFF) & (alpha << 24);
+            invalidateSelf();
+        }
+    }
+
+    @Override public void setColorFilter(ColorFilter colorFilter) {
+        //Ignored
+    }
+
+    @Override public int getOpacity() {
+        return color >>> 24;
+    }
+}
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java
index 1b4463a5..4947c41d 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java
@@ -6,6 +6,8 @@
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.view.View;
+import android.widget.LinearLayout;
+
 import com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout;
 
 /**
@@ -16,14 +18,16 @@
  * {@link android.widget.FrameLayout} so it can receive the margin.
  */
 public class IcsLinearLayout extends NineLinearLayout {
-    private static final int[] LinearLayout = new int[] {
+    private static final int[] R_styleable_LinearLayout = new int[] {
         /* 0 */ android.R.attr.divider,
-        /* 1 */ android.R.attr.showDividers,
-        /* 2 */ android.R.attr.dividerPadding,
+        /* 1 */ android.R.attr.measureWithLargestChild,
+        /* 2 */ android.R.attr.showDividers,
+        /* 3 */ android.R.attr.dividerPadding,
     };
     private static final int LinearLayout_divider = 0;
-    private static final int LinearLayout_showDividers = 1;
-    private static final int LinearLayout_dividerPadding = 2;
+    private static final int LinearLayout_measureWithLargestChild = 1;
+    private static final int LinearLayout_showDividers = 2;
+    private static final int LinearLayout_dividerPadding = 3;
 
     /**
      * Don't show any dividers.
@@ -49,15 +53,17 @@
     private int mShowDividers;
     private int mDividerPadding;
 
+    private boolean mUseLargestChild;
 
     public IcsLinearLayout(Context context, AttributeSet attrs) {
         super(context, attrs);
 
-        TypedArray a = context.obtainStyledAttributes(attrs, /*com.android.internal.R.styleable.*/LinearLayout);
+        TypedArray a = context.obtainStyledAttributes(attrs, /*com.android.internal.R.styleable.*/R_styleable_LinearLayout);
 
         setDividerDrawable(a.getDrawable(/*com.android.internal.R.styleable.*/LinearLayout_divider));
         mShowDividers = a.getInt(/*com.android.internal.R.styleable.*/LinearLayout_showDividers, SHOW_DIVIDER_NONE);
         mDividerPadding = a.getDimensionPixelSize(/*com.android.internal.R.styleable.*/LinearLayout_dividerPadding, 0);
+        mUseLargestChild = a.getBoolean(/*com.android.internal.R.styleable.*/LinearLayout_measureWithLargestChild, false);
 
         a.recycle();
     }
@@ -199,7 +205,7 @@ void drawDividersVertical(Canvas canvas) {
             if (child == null) {
                 bottom = getHeight() - getPaddingBottom() - mDividerHeight;
             } else {
-                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+                //final LayoutParams lp = (LayoutParams) child.getLayoutParams();
                 bottom = child.getBottom()/* + lp.bottomMargin*/;
             }
             drawHorizontalDivider(canvas, bottom);
@@ -226,7 +232,7 @@ void drawDividersHorizontal(Canvas canvas) {
             if (child == null) {
                 right = getWidth() - getPaddingRight() - mDividerWidth;
             } else {
-                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
+                //final LayoutParams lp = (LayoutParams) child.getLayoutParams();
                 right = child.getRight()/* + lp.rightMargin*/;
             }
             drawVerticalDivider(canvas, right);
@@ -269,4 +275,136 @@ protected boolean hasDividerBeforeChildAt(int childIndex) {
         }
         return false;
     }
+
+    /**
+     * When true, all children with a weight will be considered having
+     * the minimum size of the largest child. If false, all children are
+     * measured normally.
+     *
+     * @return True to measure children with a weight using the minimum
+     *         size of the largest child, false otherwise.
+     *
+     * @attr ref android.R.styleable#LinearLayout_measureWithLargestChild
+     */
+    public boolean isMeasureWithLargestChildEnabled() {
+        return mUseLargestChild;
+    }
+
+    /**
+     * When set to true, all children with a weight will be considered having
+     * the minimum size of the largest child. If false, all children are
+     * measured normally.
+     *
+     * Disabled by default.
+     *
+     * @param enabled True to measure children with a weight using the
+     *        minimum size of the largest child, false otherwise.
+     *
+     * @attr ref android.R.styleable#LinearLayout_measureWithLargestChild
+     */
+    public void setMeasureWithLargestChildEnabled(boolean enabled) {
+        mUseLargestChild = enabled;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        if (mUseLargestChild) {
+            final int orientation = getOrientation();
+            switch (orientation) {
+                case HORIZONTAL:
+                    useLargestChildHorizontal();
+                    break;
+
+                case VERTICAL:
+                    useLargestChildVertical();
+                    break;
+            }
+        }
+    }
+
+    private void useLargestChildHorizontal() {
+        final int childCount = getChildCount();
+
+        // Find largest child width
+        int largestChildWidth = 0;
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+            largestChildWidth = Math.max(child.getMeasuredWidth(), largestChildWidth);
+        }
+
+        int totalWidth = 0;
+        // Re-measure childs
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+
+            if (child == null || child.getVisibility() == View.GONE) {
+                continue;
+            }
+
+            final LinearLayout.LayoutParams lp =
+                    (LinearLayout.LayoutParams) child.getLayoutParams();
+
+            float childExtra = lp.weight;
+            if (childExtra > 0) {
+                child.measure(
+                        MeasureSpec.makeMeasureSpec(largestChildWidth,
+                                MeasureSpec.EXACTLY),
+                        MeasureSpec.makeMeasureSpec(child.getMeasuredHeight(),
+                                MeasureSpec.EXACTLY));
+                totalWidth += largestChildWidth;
+
+            } else {
+                totalWidth += child.getMeasuredWidth();
+            }
+
+            totalWidth += lp.leftMargin + lp.rightMargin;
+        }
+
+        totalWidth += getPaddingLeft() + getPaddingRight();
+        setMeasuredDimension(totalWidth, getMeasuredHeight());
+    }
+
+    private void useLargestChildVertical() {
+        final int childCount = getChildCount();
+
+        // Find largest child width
+        int largestChildHeight = 0;
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+            largestChildHeight = Math.max(child.getMeasuredHeight(), largestChildHeight);
+        }
+
+        int totalHeight = 0;
+        // Re-measure childs
+        for (int i = 0; i < childCount; i++) {
+            final View child = getChildAt(i);
+
+            if (child == null || child.getVisibility() == View.GONE) {
+                continue;
+            }
+
+            final LinearLayout.LayoutParams lp =
+                    (LinearLayout.LayoutParams) child.getLayoutParams();
+
+            float childExtra = lp.weight;
+            if (childExtra > 0) {
+                child.measure(
+                        MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),
+                                MeasureSpec.EXACTLY),
+                        MeasureSpec.makeMeasureSpec(largestChildHeight,
+                                MeasureSpec.EXACTLY));
+                totalHeight += largestChildHeight;
+
+            } else {
+                totalHeight += child.getMeasuredHeight();
+            }
+
+            totalHeight += lp.leftMargin + lp.rightMargin;
+        }
+
+        totalHeight += getPaddingLeft() + getPaddingRight();
+        setMeasuredDimension(getMeasuredWidth(), totalHeight);
+    }
 }
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java
index 1a532e06..48fb5d8b 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java
@@ -188,6 +188,7 @@ public void setContentHeight(int contentHeight) {
     private IcsLinearLayout createTabLayout() {
         final IcsLinearLayout tabLayout = (IcsLinearLayout) LayoutInflater.from(getContext())
                 .inflate(R.layout.abs__action_bar_tab_bar_view, null);
+        tabLayout.setMeasureWithLargestChildEnabled(true);
         tabLayout.setLayoutParams(new LinearLayout.LayoutParams(
                 LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));
         return tabLayout;
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java b/com_actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java
index 96945974..5a0f4085 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java
@@ -67,6 +67,7 @@
     private final Object[] mActionProviderConstructorArguments;
 
     private Context mContext;
+    private Object mRealOwner;
 
     /**
      * Constructs a menu inflater.
@@ -75,6 +76,20 @@
      */
     public MenuInflater(Context context) {
         mContext = context;
+        mRealOwner = context;
+        mActionViewConstructorArguments = new Object[] {context};
+        mActionProviderConstructorArguments = mActionViewConstructorArguments;
+    }
+
+    /**
+     * Constructs a menu inflater.
+     *
+     * @see Activity#getMenuInflater()
+     * @hide
+     */
+    public MenuInflater(Context context, Object realOwner) {
+        mContext = context;
+        mRealOwner = realOwner;
         mActionViewConstructorArguments = new Object[] {context};
         mActionProviderConstructorArguments = mActionViewConstructorArguments;
     }
@@ -192,12 +207,12 @@ private void parseMenu(XmlPullParser parser, AttributeSet attrs, Menu menu)
             implements MenuItem.OnMenuItemClickListener {
         private static final Class<?>[] PARAM_TYPES = new Class[] { MenuItem.class };
 
-        private Context mContext;
+        private Object mRealOwner;
         private Method mMethod;
 
-        public InflatedOnMenuItemClickListener(Context context, String methodName) {
-            mContext = context;
-            Class<?> c = context.getClass();
+        public InflatedOnMenuItemClickListener(Object realOwner, String methodName) {
+            mRealOwner = realOwner;
+            Class<?> c = realOwner.getClass();
             try {
                 mMethod = c.getMethod(methodName, PARAM_TYPES);
             } catch (Exception e) {
@@ -212,9 +227,9 @@ public InflatedOnMenuItemClickListener(Context context, String methodName) {
         public boolean onMenuItemClick(MenuItem item) {
             try {
                 if (mMethod.getReturnType() == Boolean.TYPE) {
-                    return (Boolean) mMethod.invoke(mContext, item);
+                    return (Boolean) mMethod.invoke(mRealOwner, item);
                 } else {
-                    mMethod.invoke(mContext, item);
+                    mMethod.invoke(mRealOwner, item);
                     return true;
                 }
             } catch (Exception e) {
@@ -358,8 +373,16 @@ public void readItem(AttributeSet attrs) {
 
             itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);
             itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);
-            itemActionViewClassName = a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);
-            itemActionProviderClassName = a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);
+
+            // itemActionViewClassName = a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);
+            value = new TypedValue();
+            a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);
+            itemActionViewClassName = value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;
+
+            // itemActionProviderClassName = a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);
+            value = new TypedValue();
+            a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);
+            itemActionProviderClassName = value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;
 
             final boolean hasActionProvider = itemActionProviderClassName != null;
             if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {
@@ -407,7 +430,7 @@ private void setItem(MenuItem item) {
                             + "be used within a restricted context");
                 }
                 item.setOnMenuItemClickListener(
-                        new InflatedOnMenuItemClickListener(mContext, itemListenerMethodName));
+                        new InflatedOnMenuItemClickListener(mRealOwner, itemListenerMethodName));
             }
 
             if (itemCheckable >= 2) {
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserModel.java b/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserModel.java
index 37920747..d7f110fc 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserModel.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserModel.java
@@ -25,7 +25,6 @@
 import android.text.TextUtils;
 import android.util.Log;
 import android.util.Xml;
-
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlSerializer;
@@ -39,11 +38,11 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedHashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
 
 /**
  * <p>
@@ -562,33 +561,7 @@ private void readHistoricalData() {
         }
     }
 
-    private static final SerialExecutor SERIAL_EXECUTOR = new SerialExecutor();
-
-    private static class SerialExecutor implements Executor {
-        final LinkedList<Runnable> mTasks = new LinkedList<Runnable>();
-        Runnable mActive;
-
-        public synchronized void execute(final Runnable r) {
-            mTasks.offer(new Runnable() {
-                public void run() {
-                    try {
-                        r.run();
-                    } finally {
-                        scheduleNext();
-                    }
-                }
-            });
-            if (mActive == null) {
-                scheduleNext();
-            }
-        }
-
-        protected synchronized void scheduleNext() {
-            if ((mActive = mTasks.poll()) != null) {
-                mActive.run();
-            }
-        }
-    }
+    private static final Executor SERIAL_EXECUTOR = Executors.newSingleThreadExecutor();
 
     /**
      * Persists the history data to the backing file if the latter
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserView.java b/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserView.java
index da13bc99..e19ea9e9 100755
--- a/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserView.java
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/widget/ActivityChooserView.java
@@ -405,7 +405,11 @@ protected void onDetachedFromWindow() {
         super.onDetachedFromWindow();
         ActivityChooserModel dataModel = mAdapter.getDataModel();
         if (dataModel != null) {
-            dataModel.unregisterObserver(mModelDataSetOberver);
+            try {
+                dataModel.unregisterObserver(mModelDataSetOberver);
+            } catch (IllegalStateException e) {
+                //Oh, well... fixes issue #557
+            }
         }
         ViewTreeObserver viewTreeObserver = getViewTreeObserver();
         if (viewTreeObserver.isAlive()) {
@@ -526,6 +530,7 @@ private void updateAppearance() {
             mActivityChooserContent.setBackgroundDrawable(mActivityChooserContentBackground);
         } else {
             mActivityChooserContent.setBackgroundDrawable(null);
+            mActivityChooserContent.setPadding(0, 0, 0, 0);
         }
     }
 
@@ -648,7 +653,11 @@ public static void invoke(View view, boolean activated) {
         public void setDataModel(ActivityChooserModel dataModel) {
             ActivityChooserModel oldDataModel = mAdapter.getDataModel();
             if (oldDataModel != null && isShown()) {
-                oldDataModel.unregisterObserver(mModelDataSetOberver);
+                try {
+                    oldDataModel.unregisterObserver(mModelDataSetOberver);
+                } catch (IllegalStateException e) {
+                    //Oh, well... fixes issue #557
+                }
             }
             mDataModel = dataModel;
             if (dataModel != null && isShown()) {
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java b/com_actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java
new file mode 100755
index 00000000..c9e7897d
--- /dev/null
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/widget/SearchView.java
@@ -0,0 +1,1811 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.actionbarsherlock.widget;
+
+import android.app.PendingIntent;
+import android.app.SearchManager;
+import android.app.SearchableInfo;
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.database.Cursor;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.ResultReceiver;
+import android.speech.RecognizerIntent;
+import android.support.v4.view.KeyEventCompat;
+import android.support.v4.widget.CursorAdapter;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Spannable;
+import android.text.SpannableStringBuilder;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.text.style.ImageSpan;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewTreeObserver;
+import android.view.accessibility.AccessibilityEvent;
+import android.view.accessibility.AccessibilityNodeInfo;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.AdapterView.OnItemSelectedListener;
+import android.widget.AutoCompleteTextView;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.TextView.OnEditorActionListener;
+import com.actionbarsherlock.R;
+import com.actionbarsherlock.view.CollapsibleActionView;
+
+import java.lang.reflect.Method;
+import java.util.WeakHashMap;
+
+import static com.actionbarsherlock.widget.SuggestionsAdapter.getColumnString;
+
+/**
+ * A widget that provides a user interface for the user to enter a search query and submit a request
+ * to a search provider. Shows a list of query suggestions or results, if available, and allows the
+ * user to pick a suggestion or result to launch into.
+ *
+ * <p>
+ * When the SearchView is used in an ActionBar as an action view for a collapsible menu item, it
+ * needs to be set to iconified by default using {@link #setIconifiedByDefault(boolean)
+ * setIconifiedByDefault(true)}. This is the default, so nothing needs to be done.
+ * </p>
+ * <p>
+ * If you want the search field to always be visible, then call setIconifiedByDefault(false).
+ * </p>
+ *
+ * <div class="special reference">
+ * <h3>Developer Guides</h3>
+ * <p>For information about using {@code SearchView}, read the
+ * <a href="{@docRoot}guide/topics/search/index.html">Search</a> developer guide.</p>
+ * </div>
+ *
+ * @see android.view.MenuItem#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
+ * @attr ref android.R.styleable#SearchView_iconifiedByDefault
+ * @attr ref android.R.styleable#SearchView_imeOptions
+ * @attr ref android.R.styleable#SearchView_inputType
+ * @attr ref android.R.styleable#SearchView_maxWidth
+ * @attr ref android.R.styleable#SearchView_queryHint
+ */
+public class SearchView extends LinearLayout implements CollapsibleActionView {
+
+    private static final boolean DBG = false;
+    private static final String LOG_TAG = "SearchView";
+
+    /**
+     * Private constant for removing the microphone in the keyboard.
+     */
+    private static final String IME_OPTION_NO_MICROPHONE = "nm";
+
+    private OnQueryTextListener mOnQueryChangeListener;
+    private OnCloseListener mOnCloseListener;
+    private OnFocusChangeListener mOnQueryTextFocusChangeListener;
+    private OnSuggestionListener mOnSuggestionListener;
+    private OnClickListener mOnSearchClickListener;
+
+    private boolean mIconifiedByDefault;
+    private boolean mIconified;
+    private CursorAdapter mSuggestionsAdapter;
+    private View mSearchButton;
+    private View mSubmitButton;
+    private View mSearchPlate;
+    private View mSubmitArea;
+    private ImageView mCloseButton;
+    private View mSearchEditFrame;
+    private View mVoiceButton;
+    private SearchAutoComplete mQueryTextView;
+    private View mDropDownAnchor;
+    private ImageView mSearchHintIcon;
+    private boolean mSubmitButtonEnabled;
+    private CharSequence mQueryHint;
+    private boolean mQueryRefinement;
+    private boolean mClearingFocus;
+    private int mMaxWidth;
+    private boolean mVoiceButtonEnabled;
+    private CharSequence mOldQueryText;
+    private CharSequence mUserQuery;
+    private boolean mExpandedInActionView;
+    private int mCollapsedImeOptions;
+
+    private SearchableInfo mSearchable;
+    private Bundle mAppSearchData;
+
+    /*
+    * SearchView can be set expanded before the IME is ready to be shown during
+    * initial UI setup. The show operation is asynchronous to account for this.
+    */
+    private Runnable mShowImeRunnable = new Runnable() {
+        public void run() {
+            InputMethodManager imm = (InputMethodManager)
+                    getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+
+            if (imm != null) {
+                showSoftInputUnchecked(SearchView.this, imm, 0);
+            }
+        }
+    };
+
+    private Runnable mUpdateDrawableStateRunnable = new Runnable() {
+        public void run() {
+            updateFocusedState();
+        }
+    };
+
+    private Runnable mReleaseCursorRunnable = new Runnable() {
+        public void run() {
+            if (mSuggestionsAdapter != null && mSuggestionsAdapter instanceof SuggestionsAdapter) {
+                mSuggestionsAdapter.changeCursor(null);
+            }
+        }
+    };
+
+    // For voice searching
+    private final Intent mVoiceWebSearchIntent;
+    private final Intent mVoiceAppSearchIntent;
+
+    // A weak map of drawables we've gotten from other packages, so we don't load them
+    // more than once.
+    private final WeakHashMap<String, Drawable.ConstantState> mOutsideDrawablesCache =
+            new WeakHashMap<String, Drawable.ConstantState>();
+
+    /**
+     * Callbacks for changes to the query text.
+     */
+    public interface OnQueryTextListener {
+
+        /**
+         * Called when the user submits the query. This could be due to a key press on the
+         * keyboard or due to pressing a submit button.
+         * The listener can override the standard behavior by returning true
+         * to indicate that it has handled the submit request. Otherwise return false to
+         * let the SearchView handle the submission by launching any associated intent.
+         *
+         * @param query the query text that is to be submitted
+         *
+         * @return true if the query has been handled by the listener, false to let the
+         * SearchView perform the default action.
+         */
+        boolean onQueryTextSubmit(String query);
+
+        /**
+         * Called when the query text is changed by the user.
+         *
+         * @param newText the new content of the query text field.
+         *
+         * @return false if the SearchView should perform the default action of showing any
+         * suggestions if available, true if the action was handled by the listener.
+         */
+        boolean onQueryTextChange(String newText);
+    }
+
+    public interface OnCloseListener {
+
+        /**
+         * The user is attempting to close the SearchView.
+         *
+         * @return true if the listener wants to override the default behavior of clearing the
+         * text field and dismissing it, false otherwise.
+         */
+        boolean onClose();
+    }
+
+    /**
+     * Callback interface for selection events on suggestions. These callbacks
+     * are only relevant when a SearchableInfo has been specified by {@link #setSearchableInfo}.
+     */
+    public interface OnSuggestionListener {
+
+        /**
+         * Called when a suggestion was selected by navigating to it.
+         * @param position the absolute position in the list of suggestions.
+         *
+         * @return true if the listener handles the event and wants to override the default
+         * behavior of possibly rewriting the query based on the selected item, false otherwise.
+         */
+        boolean onSuggestionSelect(int position);
+
+        /**
+         * Called when a suggestion was clicked.
+         * @param position the absolute position of the clicked item in the list of suggestions.
+         *
+         * @return true if the listener handles the event and wants to override the default
+         * behavior of launching any intent or submitting a search query specified on that item.
+         * Return false otherwise.
+         */
+        boolean onSuggestionClick(int position);
+    }
+
+    public SearchView(Context context) {
+        this(context, null);
+    }
+
+    public SearchView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {
+            throw new IllegalStateException("SearchView is API 8+ only.");
+        }
+
+        LayoutInflater inflater = (LayoutInflater) context
+                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        inflater.inflate(R.layout.abs__search_view, this, true);
+
+        mSearchButton = findViewById(R.id.abs__search_button);
+        mQueryTextView = (SearchAutoComplete) findViewById(R.id.abs__search_src_text);
+        mQueryTextView.setSearchView(this);
+
+        mSearchEditFrame = findViewById(R.id.abs__search_edit_frame);
+        mSearchPlate = findViewById(R.id.abs__search_plate);
+        mSubmitArea = findViewById(R.id.abs__submit_area);
+        mSubmitButton = findViewById(R.id.abs__search_go_btn);
+        mCloseButton = (ImageView) findViewById(R.id.abs__search_close_btn);
+        mVoiceButton = findViewById(R.id.abs__search_voice_btn);
+        mSearchHintIcon = (ImageView) findViewById(R.id.abs__search_mag_icon);
+
+        mSearchButton.setOnClickListener(mOnClickListener);
+        mCloseButton.setOnClickListener(mOnClickListener);
+        mSubmitButton.setOnClickListener(mOnClickListener);
+        mVoiceButton.setOnClickListener(mOnClickListener);
+        mQueryTextView.setOnClickListener(mOnClickListener);
+
+        mQueryTextView.addTextChangedListener(mTextWatcher);
+        mQueryTextView.setOnEditorActionListener(mOnEditorActionListener);
+        mQueryTextView.setOnItemClickListener(mOnItemClickListener);
+        mQueryTextView.setOnItemSelectedListener(mOnItemSelectedListener);
+        mQueryTextView.setOnKeyListener(mTextKeyListener);
+        // Inform any listener of focus changes
+        mQueryTextView.setOnFocusChangeListener(new OnFocusChangeListener() {
+
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (mOnQueryTextFocusChangeListener != null) {
+                    mOnQueryTextFocusChangeListener.onFocusChange(SearchView.this, hasFocus);
+                }
+            }
+        });
+
+        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.SherlockSearchView, 0, 0);
+        setIconifiedByDefault(a.getBoolean(R.styleable.SherlockSearchView_iconifiedByDefault, true));
+        int maxWidth = a.getDimensionPixelSize(R.styleable.SherlockSearchView_android_maxWidth, -1);
+        if (maxWidth != -1) {
+            setMaxWidth(maxWidth);
+        }
+        CharSequence queryHint = a.getText(R.styleable.SherlockSearchView_queryHint);
+        if (!TextUtils.isEmpty(queryHint)) {
+            setQueryHint(queryHint);
+        }
+        int imeOptions = a.getInt(R.styleable.SherlockSearchView_android_imeOptions, -1);
+        if (imeOptions != -1) {
+            setImeOptions(imeOptions);
+        }
+        int inputType = a.getInt(R.styleable.SherlockSearchView_android_inputType, -1);
+        if (inputType != -1) {
+            setInputType(inputType);
+        }
+
+        a.recycle();
+
+        boolean focusable = true;
+
+        a = context.obtainStyledAttributes(attrs, R.styleable.SherlockView, 0, 0);
+        focusable = a.getBoolean(R.styleable.SherlockView_android_focusable, focusable);
+        a.recycle();
+        setFocusable(focusable);
+
+        // Save voice intent for later queries/launching
+        mVoiceWebSearchIntent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
+        mVoiceWebSearchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mVoiceWebSearchIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
+            RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);
+
+        mVoiceAppSearchIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
+        mVoiceAppSearchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+        mDropDownAnchor = findViewById(mQueryTextView.getDropDownAnchor());
+        if (mDropDownAnchor != null) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+                mDropDownAnchor.addOnLayoutChangeListener(new OnLayoutChangeListener() {
+                    @Override
+                    public void onLayoutChange(View v, int left, int top, int right, int bottom,
+                                                                         int oldLeft, int oldTop, int oldRight, int oldBottom) {
+                        adjustDropDownSizeAndPosition();
+                    }
+                });
+            } else {
+                mDropDownAnchor.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                    @Override public void onGlobalLayout() {
+                        adjustDropDownSizeAndPosition();
+                    }
+                });
+            }
+        }
+
+        updateViewsVisibility(mIconifiedByDefault);
+        updateQueryHint();
+    }
+
+    /**
+     * Sets the SearchableInfo for this SearchView. Properties in the SearchableInfo are used
+     * to display labels, hints, suggestions, create intents for launching search results screens
+     * and controlling other affordances such as a voice button.
+     *
+     * @param searchable a SearchableInfo can be retrieved from the SearchManager, for a specific
+     * activity or a global search provider.
+     */
+    public void setSearchableInfo(SearchableInfo searchable) {
+        mSearchable = searchable;
+        if (mSearchable != null) {
+            updateSearchAutoComplete();
+            updateQueryHint();
+        }
+        // Cache the voice search capability
+        mVoiceButtonEnabled = hasVoiceSearch();
+
+        if (mVoiceButtonEnabled) {
+            // Disable the microphone on the keyboard, as a mic is displayed near the text box
+            // TODO: use imeOptions to disable voice input when the new API will be available
+            mQueryTextView.setPrivateImeOptions(IME_OPTION_NO_MICROPHONE);
+        }
+        updateViewsVisibility(isIconified());
+    }
+
+    /**
+     * Sets the APP_DATA for legacy SearchDialog use.
+     * @param appSearchData bundle provided by the app when launching the search dialog
+     * @hide
+     */
+    public void setAppSearchData(Bundle appSearchData) {
+        mAppSearchData = appSearchData;
+    }
+
+    /**
+     * Sets the IME options on the query text field.
+     *
+     * @see TextView#setImeOptions(int)
+     * @param imeOptions the options to set on the query text field
+     *
+     * @attr ref android.R.styleable#SearchView_imeOptions
+     */
+    public void setImeOptions(int imeOptions) {
+        mQueryTextView.setImeOptions(imeOptions);
+    }
+
+    /**
+     * Returns the IME options set on the query text field.
+     * @return the ime options
+     * @see TextView#setImeOptions(int)
+     *
+     * @attr ref android.R.styleable#SearchView_imeOptions
+     */
+    public int getImeOptions() {
+        return mQueryTextView.getImeOptions();
+    }
+
+    /**
+     * Sets the input type on the query text field.
+     *
+     * @see TextView#setInputType(int)
+     * @param inputType the input type to set on the query text field
+     *
+     * @attr ref android.R.styleable#SearchView_inputType
+     */
+    public void setInputType(int inputType) {
+        mQueryTextView.setInputType(inputType);
+    }
+
+    /**
+     * Returns the input type set on the query text field.
+     * @return the input type
+     *
+     * @attr ref android.R.styleable#SearchView_inputType
+     */
+    public int getInputType() {
+        return mQueryTextView.getInputType();
+    }
+
+    /** @hide */
+    @Override
+    public boolean requestFocus(int direction, Rect previouslyFocusedRect) {
+        // Don't accept focus if in the middle of clearing focus
+        if (mClearingFocus) return false;
+        // Check if SearchView is focusable.
+        if (!isFocusable()) return false;
+        // If it is not iconified, then give the focus to the text field
+        if (!isIconified()) {
+            boolean result = mQueryTextView.requestFocus(direction, previouslyFocusedRect);
+            if (result) {
+                updateViewsVisibility(false);
+            }
+            return result;
+        } else {
+            return super.requestFocus(direction, previouslyFocusedRect);
+        }
+    }
+
+    /** @hide */
+    @Override
+    public void clearFocus() {
+        mClearingFocus = true;
+        setImeVisibility(false);
+        super.clearFocus();
+        mQueryTextView.clearFocus();
+        mClearingFocus = false;
+    }
+
+    /**
+     * Sets a listener for user actions within the SearchView.
+     *
+     * @param listener the listener object that receives callbacks when the user performs
+     * actions in the SearchView such as clicking on buttons or typing a query.
+     */
+    public void setOnQueryTextListener(OnQueryTextListener listener) {
+        mOnQueryChangeListener = listener;
+    }
+
+    /**
+     * Sets a listener to inform when the user closes the SearchView.
+     *
+     * @param listener the listener to call when the user closes the SearchView.
+     */
+    public void setOnCloseListener(OnCloseListener listener) {
+        mOnCloseListener = listener;
+    }
+
+    /**
+     * Sets a listener to inform when the focus of the query text field changes.
+     *
+     * @param listener the listener to inform of focus changes.
+     */
+    public void setOnQueryTextFocusChangeListener(OnFocusChangeListener listener) {
+        mOnQueryTextFocusChangeListener = listener;
+    }
+
+    /**
+     * Sets a listener to inform when a suggestion is focused or clicked.
+     *
+     * @param listener the listener to inform of suggestion selection events.
+     */
+    public void setOnSuggestionListener(OnSuggestionListener listener) {
+        mOnSuggestionListener = listener;
+    }
+
+    /**
+     * Sets a listener to inform when the search button is pressed. This is only
+     * relevant when the text field is not visible by default. Calling {@link #setIconified
+     * setIconified(false)} can also cause this listener to be informed.
+     *
+     * @param listener the listener to inform when the search button is clicked or
+     * the text field is programmatically de-iconified.
+     */
+    public void setOnSearchClickListener(OnClickListener listener) {
+        mOnSearchClickListener = listener;
+    }
+
+    /**
+     * Returns the query string currently in the text field.
+     *
+     * @return the query string
+     */
+    public CharSequence getQuery() {
+        return mQueryTextView.getText();
+    }
+
+    /**
+     * Sets a query string in the text field and optionally submits the query as well.
+     *
+     * @param query the query string. This replaces any query text already present in the
+     * text field.
+     * @param submit whether to submit the query right now or only update the contents of
+     * text field.
+     */
+    public void setQuery(CharSequence query, boolean submit) {
+        mQueryTextView.setText(query);
+        if (query != null) {
+            mQueryTextView.setSelection(mQueryTextView.length());
+            mUserQuery = query;
+        }
+
+        // If the query is not empty and submit is requested, submit the query
+        if (submit && !TextUtils.isEmpty(query)) {
+            onSubmitQuery();
+        }
+    }
+
+    /**
+     * Sets the hint text to display in the query text field. This overrides any hint specified
+     * in the SearchableInfo.
+     *
+     * @param hint the hint text to display
+     *
+     * @attr ref android.R.styleable#SearchView_queryHint
+     */
+    public void setQueryHint(CharSequence hint) {
+        mQueryHint = hint;
+        updateQueryHint();
+    }
+
+    /**
+     * Gets the hint text to display in the query text field.
+     * @return the query hint text, if specified, null otherwise.
+     *
+     * @attr ref android.R.styleable#SearchView_queryHint
+     */
+    public CharSequence getQueryHint() {
+        if (mQueryHint != null) {
+            return mQueryHint;
+        } else if (mSearchable != null) {
+            CharSequence hint = null;
+            int hintId = mSearchable.getHintId();
+            if (hintId != 0) {
+                hint = getContext().getString(hintId);
+            }
+            return hint;
+        }
+        return null;
+    }
+
+    /**
+     * Sets the default or resting state of the search field. If true, a single search icon is
+     * shown by default and expands to show the text field and other buttons when pressed. Also,
+     * if the default state is iconified, then it collapses to that state when the close button
+     * is pressed. Changes to this property will take effect immediately.
+     *
+     * <p>The default value is true.</p>
+     *
+     * @param iconified whether the search field should be iconified by default
+     *
+     * @attr ref android.R.styleable#SearchView_iconifiedByDefault
+     */
+    public void setIconifiedByDefault(boolean iconified) {
+        if (mIconifiedByDefault == iconified) return;
+        mIconifiedByDefault = iconified;
+        updateViewsVisibility(iconified);
+        updateQueryHint();
+    }
+
+    /**
+     * Returns the default iconified state of the search field.
+     * @return
+     *
+     * @attr ref android.R.styleable#SearchView_iconifiedByDefault
+     */
+    public boolean isIconfiedByDefault() {
+        return mIconifiedByDefault;
+    }
+
+    /**
+     * Iconifies or expands the SearchView. Any query text is cleared when iconified. This is
+     * a temporary state and does not override the default iconified state set by
+     * {@link #setIconifiedByDefault(boolean)}. If the default state is iconified, then
+     * a false here will only be valid until the user closes the field. And if the default
+     * state is expanded, then a true here will only clear the text field and not close it.
+     *
+     * @param iconify a true value will collapse the SearchView to an icon, while a false will
+     * expand it.
+     */
+    public void setIconified(boolean iconify) {
+        if (iconify) {
+            onCloseClicked();
+        } else {
+            onSearchClicked();
+        }
+    }
+
+    /**
+     * Returns the current iconified state of the SearchView.
+     *
+     * @return true if the SearchView is currently iconified, false if the search field is
+     * fully visible.
+     */
+    public boolean isIconified() {
+        return mIconified;
+    }
+
+    /**
+     * Enables showing a submit button when the query is non-empty. In cases where the SearchView
+     * is being used to filter the contents of the current activity and doesn't launch a separate
+     * results activity, then the submit button should be disabled.
+     *
+     * @param enabled true to show a submit button for submitting queries, false if a submit
+     * button is not required.
+     */
+    public void setSubmitButtonEnabled(boolean enabled) {
+        mSubmitButtonEnabled = enabled;
+        updateViewsVisibility(isIconified());
+    }
+
+    /**
+     * Returns whether the submit button is enabled when necessary or never displayed.
+     *
+     * @return whether the submit button is enabled automatically when necessary
+     */
+    public boolean isSubmitButtonEnabled() {
+        return mSubmitButtonEnabled;
+    }
+
+    /**
+     * Specifies if a query refinement button should be displayed alongside each suggestion
+     * or if it should depend on the flags set in the individual items retrieved from the
+     * suggestions provider. Clicking on the query refinement button will replace the text
+     * in the query text field with the text from the suggestion. This flag only takes effect
+     * if a SearchableInfo has been specified with {@link #setSearchableInfo(SearchableInfo)}
+     * and not when using a custom adapter.
+     *
+     * @param enable true if all items should have a query refinement button, false if only
+     * those items that have a query refinement flag set should have the button.
+     *
+     * @see SearchManager#SUGGEST_COLUMN_FLAGS
+     * @see SearchManager#FLAG_QUERY_REFINEMENT
+     */
+    public void setQueryRefinementEnabled(boolean enable) {
+        mQueryRefinement = enable;
+        if (mSuggestionsAdapter instanceof SuggestionsAdapter) {
+            ((SuggestionsAdapter) mSuggestionsAdapter).setQueryRefinement(
+                    enable ? SuggestionsAdapter.REFINE_ALL : SuggestionsAdapter.REFINE_BY_ENTRY);
+        }
+    }
+
+    /**
+     * Returns whether query refinement is enabled for all items or only specific ones.
+     * @return true if enabled for all items, false otherwise.
+     */
+    public boolean isQueryRefinementEnabled() {
+        return mQueryRefinement;
+    }
+
+    /**
+     * You can set a custom adapter if you wish. Otherwise the default adapter is used to
+     * display the suggestions from the suggestions provider associated with the SearchableInfo.
+     *
+     * @see #setSearchableInfo(SearchableInfo)
+     */
+    public void setSuggestionsAdapter(CursorAdapter adapter) {
+        mSuggestionsAdapter = adapter;
+
+        mQueryTextView.setAdapter(mSuggestionsAdapter);
+    }
+
+    /**
+     * Returns the adapter used for suggestions, if any.
+     * @return the suggestions adapter
+     */
+    public CursorAdapter getSuggestionsAdapter() {
+        return mSuggestionsAdapter;
+    }
+
+    /**
+     * Makes the view at most this many pixels wide
+     *
+     * @attr ref android.R.styleable#SearchView_maxWidth
+     */
+    public void setMaxWidth(int maxpixels) {
+        mMaxWidth = maxpixels;
+
+        requestLayout();
+    }
+
+    /**
+     * Gets the specified maximum width in pixels, if set. Returns zero if
+     * no maximum width was specified.
+     * @return the maximum width of the view
+     *
+     * @attr ref android.R.styleable#SearchView_maxWidth
+     */
+    public int getMaxWidth() {
+        return mMaxWidth;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        // Let the standard measurements take effect in iconified state.
+        if (isIconified()) {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+            return;
+        }
+
+        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+
+        switch (widthMode) {
+            case MeasureSpec.AT_MOST:
+                // If there is an upper limit, don't exceed maximum width (explicit or implicit)
+                if (mMaxWidth > 0) {
+                    width = Math.min(mMaxWidth, width);
+                } else {
+                    width = Math.min(getPreferredWidth(), width);
+                }
+                break;
+            case MeasureSpec.EXACTLY:
+                // If an exact width is specified, still don't exceed any specified maximum width
+                if (mMaxWidth > 0) {
+                    width = Math.min(mMaxWidth, width);
+                }
+                break;
+            case MeasureSpec.UNSPECIFIED:
+                // Use maximum width, if specified, else preferred width
+                width = mMaxWidth > 0 ? mMaxWidth : getPreferredWidth();
+                break;
+        }
+        widthMode = MeasureSpec.EXACTLY;
+        super.onMeasure(MeasureSpec.makeMeasureSpec(width, widthMode), heightMeasureSpec);
+    }
+
+    private int getPreferredWidth() {
+        return getContext().getResources()
+                .getDimensionPixelSize(R.dimen.abs__search_view_preferred_width);
+    }
+
+    private void updateViewsVisibility(final boolean collapsed) {
+        mIconified = collapsed;
+        // Visibility of views that are visible when collapsed
+        final int visCollapsed = collapsed ? VISIBLE : GONE;
+        // Is there text in the query
+        final boolean hasText = !TextUtils.isEmpty(mQueryTextView.getText());
+
+        mSearchButton.setVisibility(visCollapsed);
+        updateSubmitButton(hasText);
+        mSearchEditFrame.setVisibility(collapsed ? GONE : VISIBLE);
+        mSearchHintIcon.setVisibility(mIconifiedByDefault ? GONE : VISIBLE);
+        updateCloseButton();
+        updateVoiceButton(!hasText);
+        updateSubmitArea();
+    }
+
+    private boolean hasVoiceSearch() {
+        if (mSearchable != null && mSearchable.getVoiceSearchEnabled()) {
+            Intent testIntent = null;
+            if (mSearchable.getVoiceSearchLaunchWebSearch()) {
+                testIntent = mVoiceWebSearchIntent;
+            } else if (mSearchable.getVoiceSearchLaunchRecognizer()) {
+                testIntent = mVoiceAppSearchIntent;
+            }
+            if (testIntent != null) {
+                ResolveInfo ri = getContext().getPackageManager().resolveActivity(testIntent,
+                        PackageManager.MATCH_DEFAULT_ONLY);
+                return ri != null;
+            }
+        }
+        return false;
+    }
+
+    private boolean isSubmitAreaEnabled() {
+        return (mSubmitButtonEnabled || mVoiceButtonEnabled) && !isIconified();
+    }
+
+    private void updateSubmitButton(boolean hasText) {
+        int visibility = GONE;
+        if (mSubmitButtonEnabled && isSubmitAreaEnabled() && hasFocus()
+                && (hasText || !mVoiceButtonEnabled)) {
+            visibility = VISIBLE;
+        }
+        mSubmitButton.setVisibility(visibility);
+    }
+
+    private void updateSubmitArea() {
+        int visibility = GONE;
+        if (isSubmitAreaEnabled()
+                && (mSubmitButton.getVisibility() == VISIBLE
+                        || mVoiceButton.getVisibility() == VISIBLE)) {
+            visibility = VISIBLE;
+        }
+        mSubmitArea.setVisibility(visibility);
+    }
+
+    private void updateCloseButton() {
+        final boolean hasText = !TextUtils.isEmpty(mQueryTextView.getText());
+        // Should we show the close button? It is not shown if there's no focus,
+        // field is not iconified by default and there is no text in it.
+        final boolean showClose = hasText || (mIconifiedByDefault && !mExpandedInActionView);
+        mCloseButton.setVisibility(showClose ? VISIBLE : GONE);
+        mCloseButton.getDrawable().setState(hasText ? ENABLED_STATE_SET : EMPTY_STATE_SET);
+    }
+
+    private void postUpdateFocusedState() {
+        post(mUpdateDrawableStateRunnable);
+    }
+
+    private void updateFocusedState() {
+        boolean focused = mQueryTextView.hasFocus();
+        mSearchPlate.getBackground().setState(focused ? FOCUSED_STATE_SET : EMPTY_STATE_SET);
+        mSubmitArea.getBackground().setState(focused ? FOCUSED_STATE_SET : EMPTY_STATE_SET);
+        invalidate();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        removeCallbacks(mUpdateDrawableStateRunnable);
+        post(mReleaseCursorRunnable);
+        super.onDetachedFromWindow();
+    }
+
+    private void setImeVisibility(final boolean visible) {
+        if (visible) {
+            post(mShowImeRunnable);
+        } else {
+            removeCallbacks(mShowImeRunnable);
+            InputMethodManager imm = (InputMethodManager)
+                    getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
+
+            if (imm != null) {
+                imm.hideSoftInputFromWindow(getWindowToken(), 0);
+            }
+        }
+    }
+
+    /**
+     * Called by the SuggestionsAdapter
+     * @hide
+     */
+    /* package */void onQueryRefine(CharSequence queryText) {
+        setQuery(queryText);
+    }
+
+    private final OnClickListener mOnClickListener = new OnClickListener() {
+
+        public void onClick(View v) {
+            if (v == mSearchButton) {
+                onSearchClicked();
+            } else if (v == mCloseButton) {
+                onCloseClicked();
+            } else if (v == mSubmitButton) {
+                onSubmitQuery();
+            } else if (v == mVoiceButton) {
+                onVoiceClicked();
+            } else if (v == mQueryTextView) {
+                forceSuggestionQuery();
+            }
+        }
+    };
+
+    /**
+     * Handles the key down event for dealing with action keys.
+     *
+     * @param keyCode This is the keycode of the typed key, and is the same value as
+     *        found in the KeyEvent parameter.
+     * @param event The complete event record for the typed key
+     *
+     * @return true if the event was handled here, or false if not.
+     */
+    @Override
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
+        if (mSearchable == null) {
+            return false;
+        }
+
+        // if it's an action specified by the searchable activity, launch the
+        // entered query with the action key
+        // TODO SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);
+        // TODO if ((actionKey != null) && (actionKey.getQueryActionMsg() != null)) {
+        // TODO     launchQuerySearch(keyCode, actionKey.getQueryActionMsg(), mQueryTextView.getText()
+        // TODO             .toString());
+        // TODO     return true;
+        // TODO }
+
+        return super.onKeyDown(keyCode, event);
+    }
+
+    /**
+     * React to the user typing "enter" or other hardwired keys while typing in
+     * the search box. This handles these special keys while the edit box has
+     * focus.
+     */
+    View.OnKeyListener mTextKeyListener = new View.OnKeyListener() {
+        public boolean onKey(View v, int keyCode, KeyEvent event) {
+            // guard against possible race conditions
+            if (mSearchable == null) {
+                return false;
+            }
+
+            if (DBG) {
+                Log.d(LOG_TAG, "mTextListener.onKey(" + keyCode + "," + event + "), selection: "
+                        + mQueryTextView.getListSelection());
+            }
+
+            // If a suggestion is selected, handle enter, search key, and action keys
+            // as presses on the selected suggestion
+            if (mQueryTextView.isPopupShowing()
+                    && mQueryTextView.getListSelection() != ListView.INVALID_POSITION) {
+                return onSuggestionsKey(v, keyCode, event);
+            }
+
+            // If there is text in the query box, handle enter, and action keys
+            // The search key is handled by the dialog's onKeyDown().
+            if (!mQueryTextView.isEmpty() && KeyEventCompat.hasNoModifiers(event)) {
+                if (event.getAction() == KeyEvent.ACTION_UP) {
+                    if (keyCode == KeyEvent.KEYCODE_ENTER) {
+                        v.cancelLongPress();
+
+                        // Launch as a regular search.
+                        launchQuerySearch(KeyEvent.KEYCODE_UNKNOWN, null, mQueryTextView.getText()
+                                .toString());
+                        return true;
+                    }
+                }
+                if (event.getAction() == KeyEvent.ACTION_DOWN) {
+                    // TODO SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);
+                    // TODO if ((actionKey != null) && (actionKey.getQueryActionMsg() != null)) {
+                    // TODO     launchQuerySearch(keyCode, actionKey.getQueryActionMsg(), mQueryTextView
+                    // TODO             .getText().toString());
+                    // TODO     return true;
+                    // TODO }
+                }
+            }
+            return false;
+        }
+    };
+
+    /**
+     * React to the user typing while in the suggestions list. First, check for
+     * action keys. If not handled, try refocusing regular characters into the
+     * EditText.
+     */
+    private boolean onSuggestionsKey(View v, int keyCode, KeyEvent event) {
+        // guard against possible race conditions (late arrival after dismiss)
+        if (mSearchable == null) {
+            return false;
+        }
+        if (mSuggestionsAdapter == null) {
+            return false;
+        }
+        if (event.getAction() == KeyEvent.ACTION_DOWN && KeyEventCompat.hasNoModifiers(event)) {
+            // First, check for enter or search (both of which we'll treat as a
+            // "click")
+            if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_SEARCH
+                    || keyCode == KeyEvent.KEYCODE_TAB) {
+                int position = mQueryTextView.getListSelection();
+                return onItemClicked(position, KeyEvent.KEYCODE_UNKNOWN, null);
+            }
+
+            // Next, check for left/right moves, which we use to "return" the
+            // user to the edit view
+            if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
+                // give "focus" to text editor, with cursor at the beginning if
+                // left key, at end if right key
+                // TODO: Reverse left/right for right-to-left languages, e.g.
+                // Arabic
+                int selPoint = (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) ? 0 : mQueryTextView
+                        .length();
+                mQueryTextView.setSelection(selPoint);
+                mQueryTextView.setListSelection(0);
+                mQueryTextView.clearListSelection();
+                ensureImeVisible(mQueryTextView, true);
+
+                return true;
+            }
+
+            // Next, check for an "up and out" move
+            if (keyCode == KeyEvent.KEYCODE_DPAD_UP && 0 == mQueryTextView.getListSelection()) {
+                // TODO: restoreUserQuery();
+                // let ACTV complete the move
+                return false;
+            }
+
+            // Next, check for an "action key"
+            // TODO SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);
+            // TODO if ((actionKey != null)
+            // TODO         && ((actionKey.getSuggestActionMsg() != null) || (actionKey
+            // TODO                 .getSuggestActionMsgColumn() != null))) {
+            // TODO     // launch suggestion using action key column
+            // TODO     int position = mQueryTextView.getListSelection();
+            // TODO     if (position != ListView.INVALID_POSITION) {
+            // TODO         Cursor c = mSuggestionsAdapter.getCursor();
+            // TODO         if (c.moveToPosition(position)) {
+            // TODO             final String actionMsg = getActionKeyMessage(c, actionKey);
+            // TODO             if (actionMsg != null && (actionMsg.length() > 0)) {
+            // TODO                 return onItemClicked(position, keyCode, actionMsg);
+            // TODO             }
+            // TODO         }
+            // TODO     }
+            // TODO }
+        }
+        return false;
+    }
+
+    /**
+     * For a given suggestion and a given cursor row, get the action message. If
+     * not provided by the specific row/column, also check for a single
+     * definition (for the action key).
+     *
+     * @param c The cursor providing suggestions
+     * @param actionKey The actionkey record being examined
+     *
+     * @return Returns a string, or null if no action key message for this
+     *         suggestion
+     */
+    // TODO private static String getActionKeyMessage(Cursor c, SearchableInfo.ActionKeyInfo actionKey) {
+    // TODO     String result = null;
+    // TODO     // check first in the cursor data, for a suggestion-specific message
+    // TODO     final String column = actionKey.getSuggestActionMsgColumn();
+    // TODO     if (column != null) {
+    // TODO         result = SuggestionsAdapter.getColumnString(c, column);
+    // TODO     }
+    // TODO     // If the cursor didn't give us a message, see if there's a single
+    // TODO     // message defined
+    // TODO     // for the actionkey (for all suggestions)
+    // TODO     if (result == null) {
+    // TODO         result = actionKey.getSuggestActionMsg();
+    // TODO     }
+    // TODO     return result;
+    // TODO }
+
+    private int getSearchIconId() {
+        TypedValue outValue = new TypedValue();
+        getContext().getTheme().resolveAttribute(R.attr.searchViewSearchIcon,
+                outValue, true);
+        return outValue.resourceId;
+    }
+
+    private CharSequence getDecoratedHint(CharSequence hintText) {
+        // If the field is always expanded, then don't add the search icon to the hint
+        if (!mIconifiedByDefault) return hintText;
+
+        SpannableStringBuilder ssb = new SpannableStringBuilder("   "); // for the icon
+        ssb.append(hintText);
+        Drawable searchIcon = getContext().getResources().getDrawable(getSearchIconId());
+        int textSize = (int) (mQueryTextView.getTextSize() * 1.25);
+        searchIcon.setBounds(0, 0, textSize, textSize);
+        ssb.setSpan(new ImageSpan(searchIcon), 1, 2, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+        return ssb;
+    }
+
+    private void updateQueryHint() {
+        if (mQueryHint != null) {
+            mQueryTextView.setHint(getDecoratedHint(mQueryHint));
+        } else if (mSearchable != null) {
+            CharSequence hint = null;
+            int hintId = mSearchable.getHintId();
+            if (hintId != 0) {
+                hint = getContext().getString(hintId);
+            }
+            if (hint != null) {
+                mQueryTextView.setHint(getDecoratedHint(hint));
+            }
+        } else {
+            mQueryTextView.setHint(getDecoratedHint(""));
+        }
+    }
+
+    /**
+     * Updates the auto-complete text view.
+     */
+    private void updateSearchAutoComplete() {
+        // TODO mQueryTextView.setDropDownAnimationStyle(0); // no animation
+        mQueryTextView.setThreshold(mSearchable.getSuggestThreshold());
+        mQueryTextView.setImeOptions(mSearchable.getImeOptions());
+        int inputType = mSearchable.getInputType();
+        // We only touch this if the input type is set up for text (which it almost certainly
+        // should be, in the case of search!)
+        if ((inputType & InputType.TYPE_MASK_CLASS) == InputType.TYPE_CLASS_TEXT) {
+            // The existence of a suggestions authority is the proxy for "suggestions
+            // are available here"
+            inputType &= ~InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
+            if (mSearchable.getSuggestAuthority() != null) {
+                inputType |= InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
+                // TYPE_TEXT_FLAG_AUTO_COMPLETE means that the text editor is performing
+                // auto-completion based on its own semantics, which it will present to the user
+                // as they type. This generally means that the input method should not show its
+                // own candidates, and the spell checker should not be in action. The text editor
+                // supplies its candidates by calling InputMethodManager.displayCompletions(),
+                // which in turn will call InputMethodSession.displayCompletions().
+                inputType |= InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
+            }
+        }
+        mQueryTextView.setInputType(inputType);
+        if (mSuggestionsAdapter != null) {
+            mSuggestionsAdapter.changeCursor(null);
+        }
+        // attach the suggestions adapter, if suggestions are available
+        // The existence of a suggestions authority is the proxy for "suggestions available here"
+        if (mSearchable.getSuggestAuthority() != null) {
+            mSuggestionsAdapter = new SuggestionsAdapter(getContext(),
+                    this, mSearchable, mOutsideDrawablesCache);
+            mQueryTextView.setAdapter(mSuggestionsAdapter);
+            ((SuggestionsAdapter) mSuggestionsAdapter).setQueryRefinement(
+                    mQueryRefinement ? SuggestionsAdapter.REFINE_ALL
+                    : SuggestionsAdapter.REFINE_BY_ENTRY);
+        }
+    }
+
+    /**
+     * Update the visibility of the voice button.  There are actually two voice search modes,
+     * either of which will activate the button.
+     * @param empty whether the search query text field is empty. If it is, then the other
+     * criteria apply to make the voice button visible.
+     */
+    private void updateVoiceButton(boolean empty) {
+        int visibility = GONE;
+        if (mVoiceButtonEnabled && !isIconified() && empty) {
+            visibility = VISIBLE;
+            mSubmitButton.setVisibility(GONE);
+        }
+        mVoiceButton.setVisibility(visibility);
+    }
+
+    private final OnEditorActionListener mOnEditorActionListener = new OnEditorActionListener() {
+
+        /**
+         * Called when the input method default action key is pressed.
+         */
+        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+            onSubmitQuery();
+            return true;
+        }
+    };
+
+    private void onTextChanged(CharSequence newText) {
+        CharSequence text = mQueryTextView.getText();
+        mUserQuery = text;
+        boolean hasText = !TextUtils.isEmpty(text);
+        updateSubmitButton(hasText);
+        updateVoiceButton(!hasText);
+        updateCloseButton();
+        updateSubmitArea();
+        if (mOnQueryChangeListener != null && !TextUtils.equals(newText, mOldQueryText)) {
+            mOnQueryChangeListener.onQueryTextChange(newText.toString());
+        }
+        mOldQueryText = newText.toString();
+    }
+
+    private void onSubmitQuery() {
+        CharSequence query = mQueryTextView.getText();
+        if (query != null && TextUtils.getTrimmedLength(query) > 0) {
+            if (mOnQueryChangeListener == null
+                    || !mOnQueryChangeListener.onQueryTextSubmit(query.toString())) {
+                if (mSearchable != null) {
+                    launchQuerySearch(KeyEvent.KEYCODE_UNKNOWN, null, query.toString());
+                    setImeVisibility(false);
+                }
+                dismissSuggestions();
+            }
+        }
+    }
+
+    private void dismissSuggestions() {
+        mQueryTextView.dismissDropDown();
+    }
+
+    private void onCloseClicked() {
+        CharSequence text = mQueryTextView.getText();
+        if (TextUtils.isEmpty(text)) {
+            if (mIconifiedByDefault) {
+                // If the app doesn't override the close behavior
+                if (mOnCloseListener == null || !mOnCloseListener.onClose()) {
+                    // hide the keyboard and remove focus
+                    clearFocus();
+                    // collapse the search field
+                    updateViewsVisibility(true);
+                }
+            }
+        } else {
+            mQueryTextView.setText("");
+            mQueryTextView.requestFocus();
+            setImeVisibility(true);
+        }
+
+    }
+
+    private void onSearchClicked() {
+        updateViewsVisibility(false);
+        mQueryTextView.requestFocus();
+        setImeVisibility(true);
+        if (mOnSearchClickListener != null) {
+            mOnSearchClickListener.onClick(this);
+        }
+    }
+
+    private void onVoiceClicked() {
+        // guard against possible race conditions
+        if (mSearchable == null) {
+            return;
+        }
+        SearchableInfo searchable = mSearchable;
+        try {
+            if (searchable.getVoiceSearchLaunchWebSearch()) {
+                Intent webSearchIntent = createVoiceWebSearchIntent(mVoiceWebSearchIntent,
+                        searchable);
+                getContext().startActivity(webSearchIntent);
+            } else if (searchable.getVoiceSearchLaunchRecognizer()) {
+                Intent appSearchIntent = createVoiceAppSearchIntent(mVoiceAppSearchIntent,
+                        searchable);
+                getContext().startActivity(appSearchIntent);
+            }
+        } catch (ActivityNotFoundException e) {
+            // Should not happen, since we check the availability of
+            // voice search before showing the button. But just in case...
+            Log.w(LOG_TAG, "Could not find voice search activity");
+        }
+    }
+
+    void onTextFocusChanged() {
+        updateViewsVisibility(isIconified());
+        // Delayed update to make sure that the focus has settled down and window focus changes
+        // don't affect it. A synchronous update was not working.
+        postUpdateFocusedState();
+        if (mQueryTextView.hasFocus()) {
+            forceSuggestionQuery();
+        }
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasWindowFocus) {
+        super.onWindowFocusChanged(hasWindowFocus);
+
+        postUpdateFocusedState();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void onActionViewCollapsed() {
+        clearFocus();
+        updateViewsVisibility(true);
+        mQueryTextView.setImeOptions(mCollapsedImeOptions);
+        mExpandedInActionView = false;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void onActionViewExpanded() {
+        if (mExpandedInActionView) return;
+
+        mExpandedInActionView = true;
+        mCollapsedImeOptions = mQueryTextView.getImeOptions();
+        mQueryTextView.setImeOptions(mCollapsedImeOptions | EditorInfo.IME_FLAG_NO_FULLSCREEN);
+        mQueryTextView.setText("");
+        setIconified(false);
+    }
+
+    @Override
+    public void onInitializeAccessibilityEvent(AccessibilityEvent event) {
+        super.onInitializeAccessibilityEvent(event);
+        event.setClassName(SearchView.class.getName());
+    }
+
+    @Override
+    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
+        super.onInitializeAccessibilityNodeInfo(info);
+        info.setClassName(SearchView.class.getName());
+    }
+
+    private void adjustDropDownSizeAndPosition() {
+        if (mDropDownAnchor.getWidth() > 1) {
+            Resources res = getContext().getResources();
+            int anchorPadding = mSearchPlate.getPaddingLeft();
+            Rect dropDownPadding = new Rect();
+            int iconOffset = mIconifiedByDefault
+                    ? res.getDimensionPixelSize(R.dimen.abs__dropdownitem_icon_width)
+                    + res.getDimensionPixelSize(R.dimen.abs__dropdownitem_text_padding_left)
+                    : 0;
+            mQueryTextView.getDropDownBackground().getPadding(dropDownPadding);
+            mQueryTextView.setDropDownHorizontalOffset(-(dropDownPadding.left + iconOffset)
+                    + anchorPadding);
+            mQueryTextView.setDropDownWidth(mDropDownAnchor.getWidth() + dropDownPadding.left
+                    + dropDownPadding.right + iconOffset - (anchorPadding));
+        }
+    }
+
+    private boolean onItemClicked(int position, int actionKey, String actionMsg) {
+        if (mOnSuggestionListener == null
+                || !mOnSuggestionListener.onSuggestionClick(position)) {
+            launchSuggestion(position, KeyEvent.KEYCODE_UNKNOWN, null);
+            setImeVisibility(false);
+            dismissSuggestions();
+            return true;
+        }
+        return false;
+    }
+
+    private boolean onItemSelected(int position) {
+        if (mOnSuggestionListener == null
+                || !mOnSuggestionListener.onSuggestionSelect(position)) {
+            rewriteQueryFromSuggestion(position);
+            return true;
+        }
+        return false;
+    }
+
+    private final OnItemClickListener mOnItemClickListener = new OnItemClickListener() {
+
+        /**
+         * Implements OnItemClickListener
+         */
+        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+            if (DBG) Log.d(LOG_TAG, "onItemClick() position " + position);
+            onItemClicked(position, KeyEvent.KEYCODE_UNKNOWN, null);
+        }
+    };
+
+    private final OnItemSelectedListener mOnItemSelectedListener = new OnItemSelectedListener() {
+
+        /**
+         * Implements OnItemSelectedListener
+         */
+        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+            if (DBG) Log.d(LOG_TAG, "onItemSelected() position " + position);
+            SearchView.this.onItemSelected(position);
+        }
+
+        /**
+         * Implements OnItemSelectedListener
+         */
+        public void onNothingSelected(AdapterView<?> parent) {
+            if (DBG)
+                Log.d(LOG_TAG, "onNothingSelected()");
+        }
+    };
+
+    /**
+     * Query rewriting.
+     */
+    private void rewriteQueryFromSuggestion(int position) {
+        CharSequence oldQuery = mQueryTextView.getText();
+        Cursor c = mSuggestionsAdapter.getCursor();
+        if (c == null) {
+            return;
+        }
+        if (c.moveToPosition(position)) {
+            // Get the new query from the suggestion.
+            CharSequence newQuery = mSuggestionsAdapter.convertToString(c);
+            if (newQuery != null) {
+                // The suggestion rewrites the query.
+                // Update the text field, without getting new suggestions.
+                setQuery(newQuery);
+            } else {
+                // The suggestion does not rewrite the query, restore the user's query.
+                setQuery(oldQuery);
+            }
+        } else {
+            // We got a bad position, restore the user's query.
+            setQuery(oldQuery);
+        }
+    }
+
+    /**
+     * Launches an intent based on a suggestion.
+     *
+     * @param position The index of the suggestion to create the intent from.
+     * @param actionKey The key code of the action key that was pressed,
+     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.
+     * @param actionMsg The message for the action key that was pressed,
+     *        or <code>null</code> if none.
+     * @return true if a successful launch, false if could not (e.g. bad position).
+     */
+    private boolean launchSuggestion(int position, int actionKey, String actionMsg) {
+        Cursor c = mSuggestionsAdapter.getCursor();
+        if ((c != null) && c.moveToPosition(position)) {
+
+            Intent intent = createIntentFromSuggestion(c, actionKey, actionMsg);
+
+            // launch the intent
+            launchIntent(intent);
+
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Launches an intent, including any special intent handling.
+     */
+    private void launchIntent(Intent intent) {
+        if (intent == null) {
+            return;
+        }
+        try {
+            // If the intent was created from a suggestion, it will always have an explicit
+            // component here.
+            getContext().startActivity(intent);
+        } catch (RuntimeException ex) {
+            Log.e(LOG_TAG, "Failed launch activity: " + intent, ex);
+        }
+    }
+
+    /**
+     * Sets the text in the query box, without updating the suggestions.
+     */
+    private void setQuery(CharSequence query) {
+        setText(mQueryTextView, query, true);
+        // Move the cursor to the end
+        mQueryTextView.setSelection(TextUtils.isEmpty(query) ? 0 : query.length());
+    }
+
+    private void launchQuerySearch(int actionKey, String actionMsg, String query) {
+        String action = Intent.ACTION_SEARCH;
+        Intent intent = createIntent(action, null, null, query, actionKey, actionMsg);
+        getContext().startActivity(intent);
+    }
+
+    /**
+     * Constructs an intent from the given information and the search dialog state.
+     *
+     * @param action Intent action.
+     * @param data Intent data, or <code>null</code>.
+     * @param extraData Data for {@link SearchManager#EXTRA_DATA_KEY} or <code>null</code>.
+     * @param query Intent query, or <code>null</code>.
+     * @param actionKey The key code of the action key that was pressed,
+     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.
+     * @param actionMsg The message for the action key that was pressed,
+     *        or <code>null</code> if none.
+     * @return The intent.
+     */
+    private Intent createIntent(String action, Uri data, String extraData, String query,
+                                                            int actionKey, String actionMsg) {
+        // Now build the Intent
+        Intent intent = new Intent(action);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        // We need CLEAR_TOP to avoid reusing an old task that has other activities
+        // on top of the one we want. We don't want to do this in in-app search though,
+        // as it can be destructive to the activity stack.
+        if (data != null) {
+            intent.setData(data);
+        }
+        intent.putExtra(SearchManager.USER_QUERY, mUserQuery);
+        if (query != null) {
+            intent.putExtra(SearchManager.QUERY, query);
+        }
+        if (extraData != null) {
+            intent.putExtra(SearchManager.EXTRA_DATA_KEY, extraData);
+        }
+        if (mAppSearchData != null) {
+            intent.putExtra(SearchManager.APP_DATA, mAppSearchData);
+        }
+        if (actionKey != KeyEvent.KEYCODE_UNKNOWN) {
+            intent.putExtra(SearchManager.ACTION_KEY, actionKey);
+            intent.putExtra(SearchManager.ACTION_MSG, actionMsg);
+        }
+        intent.setComponent(mSearchable.getSearchActivity());
+        return intent;
+    }
+
+    /**
+     * Create and return an Intent that can launch the voice search activity for web search.
+     */
+    private Intent createVoiceWebSearchIntent(Intent baseIntent, SearchableInfo searchable) {
+        Intent voiceIntent = new Intent(baseIntent);
+        ComponentName searchActivity = searchable.getSearchActivity();
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null
+                : searchActivity.flattenToShortString());
+        return voiceIntent;
+    }
+
+    /**
+     * Create and return an Intent that can launch the voice search activity, perform a specific
+     * voice transcription, and forward the results to the searchable activity.
+     *
+     * @param baseIntent The voice app search intent to start from
+     * @return A completely-configured intent ready to send to the voice search activity
+     */
+    private Intent createVoiceAppSearchIntent(Intent baseIntent, SearchableInfo searchable) {
+        ComponentName searchActivity = searchable.getSearchActivity();
+
+        // create the necessary intent to set up a search-and-forward operation
+        // in the voice search system.   We have to keep the bundle separate,
+        // because it becomes immutable once it enters the PendingIntent
+        Intent queryIntent = new Intent(Intent.ACTION_SEARCH);
+        queryIntent.setComponent(searchActivity);
+        PendingIntent pending = PendingIntent.getActivity(getContext(), 0, queryIntent,
+                PendingIntent.FLAG_ONE_SHOT);
+
+        // Now set up the bundle that will be inserted into the pending intent
+        // when it's time to do the search.  We always build it here (even if empty)
+        // because the voice search activity will always need to insert "QUERY" into
+        // it anyway.
+        Bundle queryExtras = new Bundle();
+
+        // Now build the intent to launch the voice search.  Add all necessary
+        // extras to launch the voice recognizer, and then all the necessary extras
+        // to forward the results to the searchable activity
+        Intent voiceIntent = new Intent(baseIntent);
+
+        // Add all of the configuration options supplied by the searchable's metadata
+        String languageModel = RecognizerIntent.LANGUAGE_MODEL_FREE_FORM;
+        String prompt = null;
+        String language = null;
+        int maxResults = 1;
+
+        Resources resources = getResources();
+        if (searchable.getVoiceLanguageModeId() != 0) {
+            languageModel = resources.getString(searchable.getVoiceLanguageModeId());
+        }
+        if (searchable.getVoicePromptTextId() != 0) {
+            prompt = resources.getString(searchable.getVoicePromptTextId());
+        }
+        if (searchable.getVoiceLanguageId() != 0) {
+            language = resources.getString(searchable.getVoiceLanguageId());
+        }
+        if (searchable.getVoiceMaxResults() != 0) {
+            maxResults = searchable.getVoiceMaxResults();
+        }
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, languageModel);
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, prompt);
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, language);
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, maxResults);
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null
+                : searchActivity.flattenToShortString());
+
+        // Add the values that configure forwarding the results
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT, pending);
+        voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT_BUNDLE, queryExtras);
+
+        return voiceIntent;
+    }
+
+    /**
+     * When a particular suggestion has been selected, perform the various lookups required
+     * to use the suggestion.  This includes checking the cursor for suggestion-specific data,
+     * and/or falling back to the XML for defaults;  It also creates REST style Uri data when
+     * the suggestion includes a data id.
+     *
+     * @param c The suggestions cursor, moved to the row of the user's selection
+     * @param actionKey The key code of the action key that was pressed,
+     *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.
+     * @param actionMsg The message for the action key that was pressed,
+     *        or <code>null</code> if none.
+     * @return An intent for the suggestion at the cursor's position.
+     */
+    private Intent createIntentFromSuggestion(Cursor c, int actionKey, String actionMsg) {
+        try {
+            // use specific action if supplied, or default action if supplied, or fixed default
+            String action = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_ACTION);
+
+            if (action == null) {
+                action = mSearchable.getSuggestIntentAction();
+            }
+            if (action == null) {
+                action = Intent.ACTION_SEARCH;
+            }
+
+            // use specific data if supplied, or default data if supplied
+            String data = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_DATA);
+            if (data == null) {
+                data = mSearchable.getSuggestIntentData();
+            }
+            // then, if an ID was provided, append it.
+            if (data != null) {
+                String id = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID);
+                if (id != null) {
+                    data = data + "/" + Uri.encode(id);
+                }
+            }
+            Uri dataUri = (data == null) ? null : Uri.parse(data);
+
+            String query = getColumnString(c, SearchManager.SUGGEST_COLUMN_QUERY);
+            String extraData = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
+
+            return createIntent(action, dataUri, extraData, query, actionKey, actionMsg);
+        } catch (RuntimeException e ) {
+            int rowNum;
+            try {                       // be really paranoid now
+                rowNum = c.getPosition();
+            } catch (RuntimeException e2 ) {
+                rowNum = -1;
+            }
+            Log.w(LOG_TAG, "Search suggestions cursor at row " + rowNum +
+                            " returned exception.", e);
+            return null;
+        }
+    }
+
+    private void forceSuggestionQuery() {
+        try {
+            Method before = SearchAutoComplete.class.getMethod("doBeforeTextChanged");
+            Method after = SearchAutoComplete.class.getMethod("doAfterTextChanged");
+            before.setAccessible(true);
+            after.setAccessible(true);
+            before.invoke(mQueryTextView);
+            after.invoke(mQueryTextView);
+        } catch (Exception e) {
+            // Oh well...
+        }
+    }
+
+    static boolean isLandscapeMode(Context context) {
+        return context.getResources().getConfiguration().orientation
+                == Configuration.ORIENTATION_LANDSCAPE;
+    }
+
+    /**
+     * Callback to watch the text field for empty/non-empty
+     */
+    private TextWatcher mTextWatcher = new TextWatcher() {
+
+        public void beforeTextChanged(CharSequence s, int start, int before, int after) { }
+
+        public void onTextChanged(CharSequence s, int start,
+                                                            int before, int after) {
+            SearchView.this.onTextChanged(s);
+        }
+
+        public void afterTextChanged(Editable s) {
+        }
+    };
+
+    /**
+     * Local subclass for AutoCompleteTextView.
+     * @hide
+     */
+    public static class SearchAutoComplete extends AutoCompleteTextView {
+
+        private int mThreshold;
+        private SearchView mSearchView;
+
+        public SearchAutoComplete(Context context) {
+            super(context);
+            mThreshold = getThreshold();
+        }
+
+        public SearchAutoComplete(Context context, AttributeSet attrs) {
+            super(context, attrs);
+            mThreshold = getThreshold();
+        }
+
+        public SearchAutoComplete(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+            mThreshold = getThreshold();
+        }
+
+        void setSearchView(SearchView searchView) {
+            mSearchView = searchView;
+        }
+
+        @Override
+        public void setThreshold(int threshold) {
+            super.setThreshold(threshold);
+            mThreshold = threshold;
+        }
+
+        /**
+         * Returns true if the text field is empty, or contains only whitespace.
+         */
+        private boolean isEmpty() {
+            return TextUtils.getTrimmedLength(getText()) == 0;
+        }
+
+        /**
+         * We override this method to avoid replacing the query box text when a
+         * suggestion is clicked.
+         */
+        @Override
+        protected void replaceText(CharSequence text) {
+        }
+
+        /**
+         * We override this method to avoid an extra onItemClick being called on
+         * the drop-down's OnItemClickListener by
+         * {@link AutoCompleteTextView#onKeyUp(int, KeyEvent)} when an item is
+         * clicked with the trackball.
+         */
+        @Override
+        public void performCompletion() {
+        }
+
+        /**
+         * We override this method to be sure and show the soft keyboard if
+         * appropriate when the TextView has focus.
+         */
+        @Override
+        public void onWindowFocusChanged(boolean hasWindowFocus) {
+            super.onWindowFocusChanged(hasWindowFocus);
+
+            if (hasWindowFocus && mSearchView.hasFocus() && getVisibility() == VISIBLE) {
+                InputMethodManager inputManager = (InputMethodManager) getContext()
+                        .getSystemService(Context.INPUT_METHOD_SERVICE);
+                inputManager.showSoftInput(this, 0);
+                // If in landscape mode, then make sure that
+                // the ime is in front of the dropdown.
+                if (isLandscapeMode(getContext())) {
+                    ensureImeVisible(this, true);
+                }
+            }
+        }
+
+        @Override
+        protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {
+            super.onFocusChanged(focused, direction, previouslyFocusedRect);
+            mSearchView.onTextFocusChanged();
+        }
+
+        /**
+         * We override this method so that we can allow a threshold of zero,
+         * which ACTV does not.
+         */
+        @Override
+        public boolean enoughToFilter() {
+            return mThreshold <= 0 || super.enoughToFilter();
+        }
+
+        @Override
+        public boolean onKeyPreIme(int keyCode, KeyEvent event) {
+            if (keyCode == KeyEvent.KEYCODE_BACK) {
+                // special case for the back key, we do not even try to send it
+                // to the drop down list but instead, consume it immediately
+                if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
+                    KeyEvent.DispatcherState state = getKeyDispatcherState();
+                    if (state != null) {
+                        state.startTracking(event, this);
+                    }
+                    return true;
+                } else if (event.getAction() == KeyEvent.ACTION_UP) {
+                    KeyEvent.DispatcherState state = getKeyDispatcherState();
+                    if (state != null) {
+                        state.handleUpEvent(event);
+                    }
+                    if (event.isTracking() && !event.isCanceled()) {
+                        mSearchView.clearFocus();
+                        mSearchView.setImeVisibility(false);
+                        return true;
+                    }
+                }
+            }
+            return super.onKeyPreIme(keyCode, event);
+        }
+
+    }
+
+    private static void ensureImeVisible(AutoCompleteTextView view, boolean visible) {
+        try {
+            Method method = AutoCompleteTextView.class.getMethod("ensureImeVisible", boolean.class);
+            method.setAccessible(true);
+            method.invoke(view, visible);
+        } catch (Exception e) {
+            //Oh well...
+        }
+    }
+
+    private static void showSoftInputUnchecked(View view, InputMethodManager imm, int flags) {
+        try {
+            Method method = imm.getClass().getMethod("showSoftInputUnchecked", int.class, ResultReceiver.class);
+            method.setAccessible(true);
+            method.invoke(imm, flags, null);
+        } catch (Exception e) {
+            //Fallback to public API which hopefully does mostly the same thing
+            imm.showSoftInput(view, flags);
+        }
+    }
+
+    private static void setText(AutoCompleteTextView view, CharSequence text, boolean filter) {
+        try {
+            Method method = AutoCompleteTextView.class.getMethod("setText", CharSequence.class, boolean.class);
+            method.setAccessible(true);
+            method.invoke(view, text, filter);
+        } catch (Exception e) {
+            //Fallback to public API which hopefully does mostly the same thing
+            view.setText(text);
+        }
+    }
+}
diff --git a/com_actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java b/com_actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java
new file mode 100755
index 00000000..bd5cbd71
--- /dev/null
+++ b/com_actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java
@@ -0,0 +1,733 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.actionbarsherlock.widget;
+
+import android.app.SearchManager;
+import android.app.SearchableInfo;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.res.ColorStateList;
+import android.content.res.Resources;
+import android.database.Cursor;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.widget.ResourceCursorAdapter;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.TextUtils;
+import android.text.style.TextAppearanceSpan;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.actionbarsherlock.R;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+import java.util.WeakHashMap;
+
+/**
+ * Provides the contents for the suggestion drop-down list.
+ *
+ * @hide
+ */
+class SuggestionsAdapter extends ResourceCursorAdapter implements OnClickListener {
+
+    private static final boolean DBG = false;
+    private static final String LOG_TAG = "SuggestionsAdapter";
+    private static final int QUERY_LIMIT = 50;
+
+    static final int REFINE_NONE = 0;
+    static final int REFINE_BY_ENTRY = 1;
+    static final int REFINE_ALL = 2;
+
+    private SearchManager mSearchManager;
+    private SearchView mSearchView;
+    private Context mProviderContext;
+    private WeakHashMap<String, Drawable.ConstantState> mOutsideDrawablesCache;
+    private boolean mClosed = false;
+    private int mQueryRefinement = REFINE_BY_ENTRY;
+
+    // URL color
+    private ColorStateList mUrlColor;
+
+    static final int INVALID_INDEX = -1;
+
+    // Cached column indexes, updated when the cursor changes.
+    private int mText1Col = INVALID_INDEX;
+    private int mText2Col = INVALID_INDEX;
+    private int mText2UrlCol = INVALID_INDEX;
+    private int mIconName1Col = INVALID_INDEX;
+    private int mIconName2Col = INVALID_INDEX;
+    private int mFlagsCol = INVALID_INDEX;
+
+    // private final Runnable mStartSpinnerRunnable;
+    // private final Runnable mStopSpinnerRunnable;
+
+    /**
+     * The amount of time we delay in the filter when the user presses the delete key.
+     */
+    //private static final long DELETE_KEY_POST_DELAY = 500L;
+
+    public SuggestionsAdapter(Context context, SearchView searchView,
+                SearchableInfo mSearchable, WeakHashMap<String, Drawable.ConstantState> outsideDrawablesCache) {
+        super(context,
+            R.layout.abs__search_dropdown_item_icons_2line,
+            null,   // no initial cursor
+            true);  // auto-requery
+        mSearchManager = (SearchManager) mContext.getSystemService(Context.SEARCH_SERVICE);
+        mProviderContext = mContext;
+        mSearchView = searchView;
+
+        mOutsideDrawablesCache = outsideDrawablesCache;
+
+        // mStartSpinnerRunnable = new Runnable() {
+        // public void run() {
+        // // mSearchView.setWorking(true); // TODO:
+        // }
+        // };
+        //
+        // mStopSpinnerRunnable = new Runnable() {
+        // public void run() {
+        // // mSearchView.setWorking(false); // TODO:
+        // }
+        // };
+
+        // delay 500ms when deleting
+//  TODO  getFilter().setDelayer(new Filter.Delayer() {
+//
+//      private int mPreviousLength = 0;
+//
+//      public long getPostingDelay(CharSequence constraint) {
+//        if (constraint == null) return 0;
+//
+//        long delay = constraint.length() < mPreviousLength ? DELETE_KEY_POST_DELAY : 0;
+//        mPreviousLength = constraint.length();
+//        return delay;
+//      }
+//    });
+    }
+
+    /**
+     * Enables query refinement for all suggestions. This means that an additional icon
+     * will be shown for each entry. When clicked, the suggested text on that line will be
+     * copied to the query text field.
+     * <p>
+     *
+     * @param refineWhat which queries to refine. Possible values are {@link #REFINE_NONE},
+     * {@link #REFINE_BY_ENTRY}, and {@link #REFINE_ALL}.
+     */
+    public void setQueryRefinement(int refineWhat) {
+        mQueryRefinement = refineWhat;
+    }
+
+    /**
+     * Returns the current query refinement preference.
+     * @return value of query refinement preference
+     */
+    public int getQueryRefinement() {
+        return mQueryRefinement;
+    }
+
+    /**
+     * Overridden to always return <code>false</code>, since we cannot be sure that
+     * suggestion sources return stable IDs.
+     */
+    @Override
+    public boolean hasStableIds() {
+        return false;
+    }
+
+    /**
+     * Use the search suggestions provider to obtain a live cursor.  This will be called
+     * in a worker thread, so it's OK if the query is slow (e.g. round trip for suggestions).
+     * The results will be processed in the UI thread and changeCursor() will be called.
+     */
+    @Override
+    public Cursor runQueryOnBackgroundThread(CharSequence constraint) {
+        if (DBG) Log.d(LOG_TAG, "runQueryOnBackgroundThread(" + constraint + ")");
+        String query = (constraint == null) ? "" : constraint.toString();
+        /**
+         * for in app search we show the progress spinner until the cursor is returned with
+         * the results.
+         */
+        Cursor cursor = null;
+        if (mSearchView.getVisibility() != View.VISIBLE
+                || mSearchView.getWindowVisibility() != View.VISIBLE) {
+            return null;
+        }
+        //mSearchView.getWindow().getDecorView().post(mStartSpinnerRunnable); // TODO:
+        try {
+            cursor = getSuggestions(query, QUERY_LIMIT);
+            // trigger fill window so the spinner stays up until the results are copied over and
+            // closer to being ready
+            if (cursor != null) {
+                cursor.getCount();
+                return cursor;
+            }
+        } catch (RuntimeException e) {
+            Log.w(LOG_TAG, "Search suggestions query threw an exception.", e);
+        }
+        // If cursor is null or an exception was thrown, stop the spinner and return null.
+        // changeCursor doesn't get called if cursor is null
+        // mSearchView.getWindow().getDecorView().post(mStopSpinnerRunnable); // TODO:
+        return null;
+    }
+
+    public Cursor getSuggestions(String query, int limit) {
+        Uri.Builder uriBuilder = new Uri.Builder()
+                .scheme(ContentResolver.SCHEME_CONTENT)
+                .query("")  // TODO: Remove, workaround for a bug in Uri.writeToParcel()
+                .fragment("");  // TODO: Remove, workaround for a bug in Uri.writeToParcel()
+
+        // append standard suggestion query path
+        uriBuilder.appendPath(SearchManager.SUGGEST_URI_PATH_QUERY);
+
+        // inject query, either as selection args or inline
+        uriBuilder.appendPath(query);
+
+        if (limit > 0) {
+            uriBuilder.appendQueryParameter(SearchManager.SUGGEST_PARAMETER_LIMIT, String.valueOf(limit));
+        }
+
+        Uri uri = uriBuilder.build();
+
+        // finally, make the query
+        return mContext.getContentResolver().query(uri, null, null, null, null);
+    }
+
+    public void close() {
+        if (DBG) Log.d(LOG_TAG, "close()");
+        changeCursor(null);
+        mClosed = true;
+    }
+
+    @Override
+    public void notifyDataSetChanged() {
+        if (DBG) Log.d(LOG_TAG, "notifyDataSetChanged");
+        super.notifyDataSetChanged();
+
+        // mSearchView.onDataSetChanged(); // TODO:
+
+        updateSpinnerState(getCursor());
+    }
+
+    @Override
+    public void notifyDataSetInvalidated() {
+        if (DBG) Log.d(LOG_TAG, "notifyDataSetInvalidated");
+        super.notifyDataSetInvalidated();
+
+        updateSpinnerState(getCursor());
+    }
+
+    private void updateSpinnerState(Cursor cursor) {
+        Bundle extras = cursor != null ? cursor.getExtras() : null;
+        if (DBG) {
+            Log.d(LOG_TAG, "updateSpinnerState - extra = "
+                    + (extras != null
+                    ? extras.getBoolean(SearchManager.CURSOR_EXTRA_KEY_IN_PROGRESS)
+                    : null));
+        }
+        // Check if the Cursor indicates that the query is not complete and show the spinner
+        if (extras != null
+                && extras.getBoolean(SearchManager.CURSOR_EXTRA_KEY_IN_PROGRESS)) {
+            // mSearchView.getWindow().getDecorView().post(mStartSpinnerRunnable); // TODO:
+            return;
+        }
+        // If cursor is null or is done, stop the spinner
+        // mSearchView.getWindow().getDecorView().post(mStopSpinnerRunnable); // TODO:
+    }
+
+    /**
+     * Cache columns.
+     */
+    @Override
+    public void changeCursor(Cursor c) {
+        if (DBG) Log.d(LOG_TAG, "changeCursor(" + c + ")");
+
+        if (mClosed) {
+            Log.w(LOG_TAG, "Tried to change cursor after adapter was closed.");
+            if (c != null) c.close();
+            return;
+        }
+
+        try {
+            super.changeCursor(c);
+
+            if (c != null) {
+                mText1Col = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);
+                mText2Col = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);
+                mText2UrlCol = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);
+                mIconName1Col = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);
+                mIconName2Col = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);
+                mFlagsCol = c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);
+            }
+        } catch (Exception e) {
+            Log.e(LOG_TAG, "error changing cursor and caching columns", e);
+        }
+    }
+
+    /**
+     * Tags the view with cached child view look-ups.
+     */
+    @Override
+    public View newView(Context context, Cursor cursor, ViewGroup parent) {
+        View v = super.newView(context, cursor, parent);
+        v.setTag(new ChildViewCache(v));
+        return v;
+    }
+
+    /**
+     * Cache of the child views of drop-drown list items, to avoid looking up the children
+     * each time the contents of a list item are changed.
+     */
+    private final static class ChildViewCache {
+        public final TextView mText1;
+        public final TextView mText2;
+        public final ImageView mIcon1;
+        public final ImageView mIcon2;
+        public final ImageView mIconRefine;
+
+        public ChildViewCache(View v) {
+            mText1 = (TextView) v.findViewById(android.R.id.text1);
+            mText2 = (TextView) v.findViewById(android.R.id.text2);
+            mIcon1 = (ImageView) v.findViewById(android.R.id.icon1);
+            mIcon2 = (ImageView) v.findViewById(android.R.id.icon2);
+            mIconRefine = (ImageView) v.findViewById(R.id.edit_query);
+        }
+    }
+
+    @Override
+    public void bindView(View view, Context context, Cursor cursor) {
+        ChildViewCache views = (ChildViewCache) view.getTag();
+
+        int flags = 0;
+        if (mFlagsCol != INVALID_INDEX) {
+            flags = cursor.getInt(mFlagsCol);
+        }
+        if (views.mText1 != null) {
+            String text1 = getStringOrNull(cursor, mText1Col);
+            setViewText(views.mText1, text1);
+        }
+        if (views.mText2 != null) {
+            // First check TEXT_2_URL
+            CharSequence text2 = getStringOrNull(cursor, mText2UrlCol);
+            if (text2 != null) {
+                text2 = formatUrl(text2);
+            } else {
+                text2 = getStringOrNull(cursor, mText2Col);
+            }
+
+            // If no second line of text is indicated, allow the first line of text
+            // to be up to two lines if it wants to be.
+            if (TextUtils.isEmpty(text2)) {
+                if (views.mText1 != null) {
+                    views.mText1.setSingleLine(false);
+                    views.mText1.setMaxLines(2);
+                }
+            } else {
+                if (views.mText1 != null) {
+                    views.mText1.setSingleLine(true);
+                    views.mText1.setMaxLines(1);
+                }
+            }
+            setViewText(views.mText2, text2);
+        }
+
+        if (views.mIcon1 != null) {
+            setViewDrawable(views.mIcon1, getIcon1(cursor), View.INVISIBLE);
+        }
+        if (views.mIcon2 != null) {
+            setViewDrawable(views.mIcon2, getIcon2(cursor), View.GONE);
+        }
+        if (mQueryRefinement == REFINE_ALL
+                || (mQueryRefinement == REFINE_BY_ENTRY
+                && (flags & SearchManager.FLAG_QUERY_REFINEMENT) != 0)) {
+            views.mIconRefine.setVisibility(View.VISIBLE);
+            views.mIconRefine.setTag(views.mText1.getText());
+            views.mIconRefine.setOnClickListener(this);
+        } else {
+            views.mIconRefine.setVisibility(View.GONE);
+        }
+    }
+
+    public void onClick(View v) {
+        Object tag = v.getTag();
+        if (tag instanceof CharSequence) {
+            mSearchView.onQueryRefine((CharSequence) tag);
+        }
+    }
+
+    private CharSequence formatUrl(CharSequence url) {
+        if (mUrlColor == null) {
+            // Lazily get the URL color from the current theme.
+            TypedValue colorValue = new TypedValue();
+            mContext.getTheme().resolveAttribute(R.attr.textColorSearchUrl, colorValue, true);
+            mUrlColor = mContext.getResources().getColorStateList(colorValue.resourceId);
+        }
+
+        SpannableString text = new SpannableString(url);
+        text.setSpan(new TextAppearanceSpan(null, 0, 0, mUrlColor, null),
+                0, url.length(),
+                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+        return text;
+    }
+
+    private void setViewText(TextView v, CharSequence text) {
+        // Set the text even if it's null, since we need to clear any previous text.
+        v.setText(text);
+
+        if (TextUtils.isEmpty(text)) {
+            v.setVisibility(View.GONE);
+        } else {
+            v.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private Drawable getIcon1(Cursor cursor) {
+        if (mIconName1Col == INVALID_INDEX) {
+            return null;
+        }
+        String value = cursor.getString(mIconName1Col);
+        Drawable drawable = getDrawableFromResourceValue(value);
+        if (drawable != null) {
+            return drawable;
+        }
+        return getDefaultIcon1(cursor);
+    }
+
+    private Drawable getIcon2(Cursor cursor) {
+        if (mIconName2Col == INVALID_INDEX) {
+            return null;
+        }
+        String value = cursor.getString(mIconName2Col);
+        return getDrawableFromResourceValue(value);
+    }
+
+    /**
+     * Sets the drawable in an image view, makes sure the view is only visible if there
+     * is a drawable.
+     */
+    private void setViewDrawable(ImageView v, Drawable drawable, int nullVisibility) {
+        // Set the icon even if the drawable is null, since we need to clear any
+        // previous icon.
+        v.setImageDrawable(drawable);
+
+        if (drawable == null) {
+            v.setVisibility(nullVisibility);
+        } else {
+            v.setVisibility(View.VISIBLE);
+
+            // This is a hack to get any animated drawables (like a 'working' spinner)
+            // to animate. You have to setVisible true on an AnimationDrawable to get
+            // it to start animating, but it must first have been false or else the
+            // call to setVisible will be ineffective. We need to clear up the story
+            // about animated drawables in the future, see http://b/1878430.
+            drawable.setVisible(false, false);
+            drawable.setVisible(true, false);
+        }
+    }
+
+    /**
+     * Gets the text to show in the query field when a suggestion is selected.
+     *
+     * @param cursor The Cursor to read the suggestion data from. The Cursor should already
+     *        be moved to the suggestion that is to be read from.
+     * @return The text to show, or <code>null</code> if the query should not be
+     *         changed when selecting this suggestion.
+     */
+    @Override
+    public CharSequence convertToString(Cursor cursor) {
+        if (cursor == null) {
+            return null;
+        }
+
+        String query = getColumnString(cursor, SearchManager.SUGGEST_COLUMN_QUERY);
+        if (query != null) {
+            return query;
+        }
+
+        return null;
+    }
+
+    /**
+     * This method is overridden purely to provide a bit of protection against
+     * flaky content providers.
+     *
+     * @see android.widget.ListAdapter#getView(int, View, ViewGroup)
+     */
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        try {
+            return super.getView(position, convertView, parent);
+        } catch (RuntimeException e) {
+            Log.w(LOG_TAG, "Search suggestions cursor threw exception.", e);
+            // Put exception string in item title
+            View v = newView(mContext, mCursor, parent);
+            if (v != null) {
+                ChildViewCache views = (ChildViewCache) v.getTag();
+                TextView tv = views.mText1;
+                tv.setText(e.toString());
+            }
+            return v;
+        }
+    }
+
+    /**
+     * Gets a drawable given a value provided by a suggestion provider.
+     *
+     * This value could be just the string value of a resource id
+     * (e.g., "2130837524"), in which case we will try to retrieve a drawable from
+     * the provider's resources. If the value is not an integer, it is
+     * treated as a Uri and opened with
+     * {@link ContentResolver#openOutputStream(android.net.Uri, String)}.
+     *
+     * All resources and URIs are read using the suggestion provider's context.
+     *
+     * If the string is not formatted as expected, or no drawable can be found for
+     * the provided value, this method returns null.
+     *
+     * @param drawableId a string like "2130837524",
+     *        "android.resource://com.android.alarmclock/2130837524",
+     *        or "content://contacts/photos/253".
+     * @return a Drawable, or null if none found
+     */
+    private Drawable getDrawableFromResourceValue(String drawableId) {
+        if (drawableId == null || drawableId.length() == 0 || "0".equals(drawableId)) {
+            return null;
+        }
+        try {
+            // First, see if it's just an integer
+            int resourceId = Integer.parseInt(drawableId);
+            // It's an int, look for it in the cache
+            String drawableUri = ContentResolver.SCHEME_ANDROID_RESOURCE
+                    + "://" + mProviderContext.getPackageName() + "/" + resourceId;
+            // Must use URI as cache key, since ints are app-specific
+            Drawable drawable = checkIconCache(drawableUri);
+            if (drawable != null) {
+                return drawable;
+            }
+            // Not cached, find it by resource ID
+            drawable = mProviderContext.getResources().getDrawable(resourceId);
+            // Stick it in the cache, using the URI as key
+            storeInIconCache(drawableUri, drawable);
+            return drawable;
+        } catch (NumberFormatException nfe) {
+            // It's not an integer, use it as a URI
+            Drawable drawable = checkIconCache(drawableId);
+            if (drawable != null) {
+                return drawable;
+            }
+            Uri uri = Uri.parse(drawableId);
+            drawable = getDrawable(uri);
+            storeInIconCache(drawableId, drawable);
+            return drawable;
+        } catch (Resources.NotFoundException nfe) {
+            // It was an integer, but it couldn't be found, bail out
+            Log.w(LOG_TAG, "Icon resource not found: " + drawableId);
+            return null;
+        }
+    }
+
+    /**
+     * Gets a drawable by URI, without using the cache.
+     *
+     * @return A drawable, or {@code null} if the drawable could not be loaded.
+     */
+    private Drawable getDrawable(Uri uri) {
+        try {
+            String scheme = uri.getScheme();
+            if (ContentResolver.SCHEME_ANDROID_RESOURCE.equals(scheme)) {
+                // Load drawables through Resources, to get the source density information
+                try {
+                    return getTheDrawable(uri);
+                } catch (Resources.NotFoundException ex) {
+                    throw new FileNotFoundException("Resource does not exist: " + uri);
+                }
+            } else {
+                // Let the ContentResolver handle content and file URIs.
+                InputStream stream = mProviderContext.getContentResolver().openInputStream(uri);
+                if (stream == null) {
+                    throw new FileNotFoundException("Failed to open " + uri);
+                }
+                try {
+                    return Drawable.createFromStream(stream, null);
+                } finally {
+                    try {
+                        stream.close();
+                    } catch (IOException ex) {
+                        Log.e(LOG_TAG, "Error closing icon stream for " + uri, ex);
+                    }
+                }
+            }
+        } catch (FileNotFoundException fnfe) {
+            Log.w(LOG_TAG, "Icon not found: " + uri + ", " + fnfe.getMessage());
+            return null;
+        }
+    }
+
+    public Drawable getTheDrawable(Uri uri) throws FileNotFoundException {
+        String authority = uri.getAuthority();
+        Resources r;
+        if (TextUtils.isEmpty(authority)) {
+            throw new FileNotFoundException("No authority: " + uri);
+        } else {
+            try {
+                r = mContext.getPackageManager().getResourcesForApplication(authority);
+            } catch (NameNotFoundException ex) {
+                throw new FileNotFoundException("No package found for authority: " + uri);
+            }
+        }
+        List<String> path = uri.getPathSegments();
+        if (path == null) {
+            throw new FileNotFoundException("No path: " + uri);
+        }
+        int len = path.size();
+        int id;
+        if (len == 1) {
+            try {
+                id = Integer.parseInt(path.get(0));
+            } catch (NumberFormatException e) {
+                throw new FileNotFoundException("Single path segment is not a resource ID: " + uri);
+            }
+        } else if (len == 2) {
+            id = r.getIdentifier(path.get(1), path.get(0), authority);
+        } else {
+            throw new FileNotFoundException("More than two path segments: " + uri);
+        }
+        if (id == 0) {
+            throw new FileNotFoundException("No resource found for: " + uri);
+        }
+        return r.getDrawable(id);
+    }
+
+    private Drawable checkIconCache(String resourceUri) {
+        Drawable.ConstantState cached = mOutsideDrawablesCache.get(resourceUri);
+        if (cached == null) {
+            return null;
+        }
+        if (DBG) Log.d(LOG_TAG, "Found icon in cache: " + resourceUri);
+        return cached.newDrawable();
+    }
+
+    private void storeInIconCache(String resourceUri, Drawable drawable) {
+        if (drawable != null) {
+            mOutsideDrawablesCache.put(resourceUri, drawable.getConstantState());
+        }
+    }
+
+    /**
+     * Gets the left-hand side icon that will be used for the current suggestion
+     * if the suggestion contains an icon column but no icon or a broken icon.
+     *
+     * @param cursor A cursor positioned at the current suggestion.
+     * @return A non-null drawable.
+     */
+    private Drawable getDefaultIcon1(Cursor cursor) {
+        // Fall back to a default icon
+        return mContext.getPackageManager().getDefaultActivityIcon();
+    }
+
+    /**
+     * Gets the activity or application icon for an activity.
+     * Uses the local icon cache for fast repeated lookups.
+     *
+     * @param component Name of an activity.
+     * @return A drawable, or {@code null} if neither the activity nor the application
+     *         has an icon set.
+     */
+    private Drawable getActivityIconWithCache(ComponentName component) {
+        // First check the icon cache
+        String componentIconKey = component.flattenToShortString();
+        // Using containsKey() since we also store null values.
+        if (mOutsideDrawablesCache.containsKey(componentIconKey)) {
+            Drawable.ConstantState cached = mOutsideDrawablesCache.get(componentIconKey);
+            return cached == null ? null : cached.newDrawable(mProviderContext.getResources());
+        }
+        // Then try the activity or application icon
+        Drawable drawable = getActivityIcon(component);
+        // Stick it in the cache so we don't do this lookup again.
+        Drawable.ConstantState toCache = drawable == null ? null : drawable.getConstantState();
+        mOutsideDrawablesCache.put(componentIconKey, toCache);
+        return drawable;
+    }
+
+    /**
+     * Gets the activity or application icon for an activity.
+     *
+     * @param component Name of an activity.
+     * @return A drawable, or {@code null} if neither the acitivy or the application
+     *         have an icon set.
+     */
+    private Drawable getActivityIcon(ComponentName component) {
+        PackageManager pm = mContext.getPackageManager();
+        final ActivityInfo activityInfo;
+        try {
+            activityInfo = pm.getActivityInfo(component, PackageManager.GET_META_DATA);
+        } catch (NameNotFoundException ex) {
+            Log.w(LOG_TAG, ex.toString());
+            return null;
+        }
+        int iconId = activityInfo.getIconResource();
+        if (iconId == 0) return null;
+        String pkg = component.getPackageName();
+        Drawable drawable = pm.getDrawable(pkg, iconId, activityInfo.applicationInfo);
+        if (drawable == null) {
+            Log.w(LOG_TAG, "Invalid icon resource " + iconId + " for "
+                    + component.flattenToShortString());
+            return null;
+        }
+        return drawable;
+    }
+
+    /**
+     * Gets the value of a string column by name.
+     *
+     * @param cursor Cursor to read the value from.
+     * @param columnName The name of the column to read.
+     * @return The value of the given column, or <code>null</null>
+     *         if the cursor does not contain the given column.
+     */
+    public static String getColumnString(Cursor cursor, String columnName) {
+        int col = cursor.getColumnIndex(columnName);
+        return getStringOrNull(cursor, col);
+    }
+
+    private static String getStringOrNull(Cursor cursor, int col) {
+        if (col == INVALID_INDEX) {
+            return null;
+        }
+        try {
+            return cursor.getString(col);
+        } catch (Exception e) {
+            Log.e(LOG_TAG,
+                    "unexpected error retrieving valid column from cursor, "
+                            + "did the remote process die?", e);
+            return null;
+        }
+    }
+}
diff --git a/com_actionbarsherlock/test/com/actionbarsherlock/internal/ManifestParsingTest.java b/com_actionbarsherlock/test/com/actionbarsherlock/internal/ManifestParsingTest.java
index 1314248a..47475c57 100755
--- a/com_actionbarsherlock/test/com/actionbarsherlock/internal/ManifestParsingTest.java
+++ b/com_actionbarsherlock/test/com/actionbarsherlock/internal/ManifestParsingTest.java
@@ -1,13 +1,11 @@
 package com.actionbarsherlock.internal;
 
+import org.junit.Test;
+
+import static com.actionbarsherlock.internal.ActionBarSherlockCompat.cleanActivityName;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
-import static com.actionbarsherlock.internal.ActionBarSherlockCompat.cleanActivityName;
-import com.xtremelabs.robolectric.RobolectricTestRunner;
-import org.junit.Test;
-import org.junit.runner.RunWith;
 
-@RunWith(RobolectricTestRunner.class)
 public class ManifestParsingTest {
     @Test
     public void testFullyQualifiedClassName() {
