From aff430382532a030cad7c483787eba2a51e7e469 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 18 Sep 2014 20:31:44 +0800
Subject: [PATCH 1/4] Separate QIF export by currency

---
 .../gnucash/android/db/TransactionsDbAdapter.java  |  4 +-
 .../gnucash/android/export/ExporterAsyncTask.java  | 54 +++++++++++++++++-----
 .../gnucash/android/export/qif/QifExporter.java    | 11 ++++-
 .../org/gnucash/android/export/qif/QifHelper.java  |  1 +
 4 files changed, 55 insertions(+), 15 deletions(-)

diff --git a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
index bed881d0..d871ef3e 100644
--- a/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/TransactionsDbAdapter.java
@@ -305,7 +305,7 @@ public Cursor fetchTransactionsWithSplits(String [] columns, String condition, S
 
     }
 
-    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String condition, String orderBy) {
+    public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] columns, String where, String[] whereArgs, String orderBy) {
         // table is :
         // transactions, splits ON transactions.uid = splits.transaction_uid ,
         // ( SELECT transactions.uid AS trans_acct_t_uid ,
@@ -361,7 +361,7 @@ public Cursor fetchTransactionsWithSplitsWithTransactionAccount(String [] column
                 AccountEntry.TABLE_NAME + " AS account1 ON account1." + AccountEntry.COLUMN_UID +
                 " = trans_acct.trans_acct_a_uid , " + AccountEntry.TABLE_NAME + " AS account2 ON account2." +
                 AccountEntry.COLUMN_UID + " = " + SplitEntry.TABLE_NAME + "." + SplitEntry.COLUMN_ACCOUNT_UID,
-                columns, condition, null, null, null , orderBy);
+                columns, where, whereArgs, null, null , orderBy);
     }
 
     /**
diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index 796e1b58..d72aa6a6 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -32,6 +32,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
+import org.gnucash.android.export.qif.QifHelper;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.transaction.dialog.TransactionsDeleteConfirmationDialogFragment;
@@ -223,21 +224,50 @@ private void shareFile(String path){
      * @param dst Absolute path to the destination file
      * @throws IOException if the file could not be copied
      */
-    public static void copyFile(File src, File dst) throws IOException
+    public void copyFile(File src, File dst) throws IOException
     {
         //TODO: Make this asynchronous at some time, t in the future.
-        FileChannel inChannel = new FileInputStream(src).getChannel();
-        FileChannel outChannel = new FileOutputStream(dst).getChannel();
-        try
-        {
-            inChannel.transferTo(0, inChannel.size(), outChannel);
+        if (mExportParams.getExportFormat() == ExportFormat.QIF) {
+            // split only at the last dot
+            String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
+            String line;
+            BufferedReader in = new BufferedReader(new FileReader(src));
+            BufferedWriter out = null;
+            try {
+                while ((line = in.readLine()) != null) {
+                    if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
+                        String currencyCode = line.substring(1);
+                        if (out != null) {
+                            out.close();
+                        }
+                        out = new BufferedWriter(new FileWriter(pathParts[0] + "_" + currencyCode + pathParts[1]));
+                    }
+                    else {
+                        if (out == null) {
+                            out = new BufferedWriter(new FileWriter(pathParts[0] + pathParts[1]));
+                        }
+                        out.append(line).append('\n');
+                    }
+                }
+            }
+            finally {
+                in.close();
+                if (out != null) {
+                    out.close();
+                }
+            }
         }
-        finally
-        {
-            if (inChannel != null)
-                inChannel.close();
-            if (outChannel != null)
-                outChannel.close();
+        else {
+            FileChannel inChannel = new FileInputStream(src).getChannel();
+            FileChannel outChannel = new FileOutputStream(dst).getChannel();
+            try {
+                inChannel.transferTo(0, inChannel.size(), outChannel);
+            } finally {
+                if (inChannel != null)
+                    inChannel.close();
+                if (outChannel != null)
+                    outChannel.close();
+            }
         }
     }
 
diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index a6049f3d..92d271c3 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -73,14 +73,18 @@ public void generateExport(Writer writer) throws ExporterException {
                             mParameters.shouldExportAllTransactions() ?
                                     "" : " AND " + TransactionEntry.TABLE_NAME + "." + TransactionEntry.COLUMN_EXPORTED + "== 0"
                             ),
+                    null,
+                    // acct1_currency : group transaction with the same currency together
                     // trans_time ASC : put transactions in time order
                     // trans_uid ASC  : put splits from the same transaction together
-                   "trans_time ASC, trans_uid ASC"
+                   "acct1_currency ASC, trans_time ASC, trans_uid ASC"
                     );
             try {
+                String currentCurrencyCode = "";
                 String currentAccountUID = "";
                 String currentTransactionUID = "";
                 while (cursor.moveToNext()) {
+                    String currencyCode = cursor.getString(cursor.getColumnIndexOrThrow("acct1_currency"));
                     String accountUID = cursor.getString(cursor.getColumnIndexOrThrow("acct1_uid"));
                     String transactionUID = cursor.getString(cursor.getColumnIndexOrThrow("trans_uid"));
                     if (!transactionUID.equals(currentTransactionUID)) {
@@ -93,6 +97,11 @@ public void generateExport(Writer writer) throws ExporterException {
                             //if (!currentAccountUID.equals("")) {
                             //    // end last account
                             //}
+                            if (!currencyCode.equals(currentCurrencyCode)) {
+                                currentCurrencyCode = currencyCode;
+                                writer.append(QifHelper.INTERNAL_CURRENCY_PREFIX)
+                                        .append(currencyCode);
+                            }
                             // start new account
                             currentAccountUID = accountUID;
                             writer.append(QifHelper.ACCOUNT_HEADER).append(newLine);
diff --git a/app/src/org/gnucash/android/export/qif/QifHelper.java b/app/src/org/gnucash/android/export/qif/QifHelper.java
index 3a5e3d08..13374ded 100644
--- a/app/src/org/gnucash/android/export/qif/QifHelper.java
+++ b/app/src/org/gnucash/android/export/qif/QifHelper.java
@@ -43,6 +43,7 @@
     public static final String ACCOUNT_HEADER           = "!Account";
     public static final String ACCOUNT_NAME_PREFIX      = "N";
 
+    public static final String INTERNAL_CURRENCY_PREFIX = "*";
 
     public static final String ENTRY_TERMINATOR = "^";
     private static final SimpleDateFormat QIF_DATE_FORMATTER = new SimpleDateFormat("yyyy/M/d");

From 913120dff3e3197d7514225db3c2b9bfc416a9af Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Thu, 18 Sep 2014 21:01:29 +0800
Subject: [PATCH 2/4] QIF export fixup

---
 app/src/org/gnucash/android/export/qif/QifExporter.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/app/src/org/gnucash/android/export/qif/QifExporter.java b/app/src/org/gnucash/android/export/qif/QifExporter.java
index 92d271c3..bf00221a 100644
--- a/app/src/org/gnucash/android/export/qif/QifExporter.java
+++ b/app/src/org/gnucash/android/export/qif/QifExporter.java
@@ -100,7 +100,8 @@ public void generateExport(Writer writer) throws ExporterException {
                             if (!currencyCode.equals(currentCurrencyCode)) {
                                 currentCurrencyCode = currencyCode;
                                 writer.append(QifHelper.INTERNAL_CURRENCY_PREFIX)
-                                        .append(currencyCode);
+                                        .append(currencyCode)
+                                        .append(newLine);
                             }
                             // start new account
                             currentAccountUID = accountUID;

From 6ac205856b923d8597568385901368e86d8ddf10 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 19 Sep 2014 20:53:24 +0800
Subject: [PATCH 3/4] handling of export by file sharing

---
 .../gnucash/android/export/ExporterAsyncTask.java  | 102 +++++++++++++--------
 1 file changed, 65 insertions(+), 37 deletions(-)

diff --git a/app/src/org/gnucash/android/export/ExporterAsyncTask.java b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
index d72aa6a6..9b9ed163 100644
--- a/app/src/org/gnucash/android/export/ExporterAsyncTask.java
+++ b/app/src/org/gnucash/android/export/ExporterAsyncTask.java
@@ -40,7 +40,9 @@
 import java.io.*;
 import java.nio.channels.FileChannel;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Date;
+import java.util.List;
 
 /**
  * Asynchronous task for exporting transactions.
@@ -199,21 +201,38 @@ protected void onPostExecute(Boolean exportResult) {
      * the exported OFX file
      * @param path String path to the file on disk
      */
-    private void shareFile(String path){
+    private void shareFile(String path) {
         String defaultEmail = PreferenceManager.getDefaultSharedPreferences(mContext)
                 .getString(mContext.getString(R.string.key_default_export_email), null);
-        Intent shareIntent = new Intent(Intent.ACTION_SEND);
+        Intent shareIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
         shareIntent.setType("application/xml");
-        shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://" + path));
+        ArrayList<Uri> exportFiles = new ArrayList<Uri>();
+        if (mExportParams.getExportFormat() == ExportFormat.QIF) {
+            try {
+                List<String> splitFiles = splitQIF(new File(path), new File(path));
+                for (String file : splitFiles) {
+                    exportFiles.add(Uri.parse("file://" + file));
+                }
+            } catch (IOException e) {
+                Log.e(TAG, "error split up files in shareFile");
+                e.printStackTrace();
+                return;
+            }
+        } else {
+            exportFiles.add(Uri.parse("file://" + path));
+        }
+        shareIntent.putExtra(Intent.EXTRA_STREAM, exportFiles);
         shareIntent.putExtra(Intent.EXTRA_SUBJECT, mContext.getString(R.string.title_export_email,
                 mExportParams.getExportFormat().name()));
-        if (defaultEmail != null && defaultEmail.trim().length() > 0){
+        if (defaultEmail != null && defaultEmail.trim().length() > 0) {
             shareIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{defaultEmail});
         }
         SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateTimeInstance();
 
-        shareIntent.putExtra(Intent.EXTRA_TEXT, mContext.getString(R.string.description_export_email)
+        ArrayList<CharSequence> extraText = new ArrayList<CharSequence>();
+        extraText.add(mContext.getString(R.string.description_export_email)
                 + " " + formatter.format(new Date(System.currentTimeMillis())));
+        shareIntent.putExtra(Intent.EXTRA_TEXT, extraText);
 
         mContext.startActivity(Intent.createChooser(shareIntent, mContext.getString(R.string.title_select_export_destination)));
     }
@@ -224,40 +243,11 @@ private void shareFile(String path){
      * @param dst Absolute path to the destination file
      * @throws IOException if the file could not be copied
      */
-    public void copyFile(File src, File dst) throws IOException
-    {
+    public void copyFile(File src, File dst) throws IOException {
         //TODO: Make this asynchronous at some time, t in the future.
         if (mExportParams.getExportFormat() == ExportFormat.QIF) {
-            // split only at the last dot
-            String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
-            String line;
-            BufferedReader in = new BufferedReader(new FileReader(src));
-            BufferedWriter out = null;
-            try {
-                while ((line = in.readLine()) != null) {
-                    if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
-                        String currencyCode = line.substring(1);
-                        if (out != null) {
-                            out.close();
-                        }
-                        out = new BufferedWriter(new FileWriter(pathParts[0] + "_" + currencyCode + pathParts[1]));
-                    }
-                    else {
-                        if (out == null) {
-                            out = new BufferedWriter(new FileWriter(pathParts[0] + pathParts[1]));
-                        }
-                        out.append(line).append('\n');
-                    }
-                }
-            }
-            finally {
-                in.close();
-                if (out != null) {
-                    out.close();
-                }
-            }
-        }
-        else {
+            splitQIF(src, dst);
+        } else {
             FileChannel inChannel = new FileInputStream(src).getChannel();
             FileChannel outChannel = new FileOutputStream(dst).getChannel();
             try {
@@ -271,4 +261,42 @@ public void copyFile(File src, File dst) throws IOException
         }
     }
 
+    /**
+     * Copies a file from <code>src</code> to <code>dst</code>
+     * @param src Absolute path to the source file
+     * @param dst Absolute path to the destination file
+     * @throws IOException if the file could not be copied
+     */
+    private static List<String> splitQIF(File src, File dst) throws IOException {
+        // split only at the last dot
+        String[] pathParts = dst.getPath().split("(?=\\.[^\\.]+$)");
+        ArrayList<String> splitFiles = new ArrayList<String>();
+        String line;
+        BufferedReader in = new BufferedReader(new FileReader(src));
+        BufferedWriter out = null;
+        try {
+            while ((line = in.readLine()) != null) {
+                if (line.startsWith(QifHelper.INTERNAL_CURRENCY_PREFIX)) {
+                    String currencyCode = line.substring(1);
+                    if (out != null) {
+                        out.close();
+                    }
+                    String newFileName = pathParts[0] + "_" + currencyCode + pathParts[1];
+                    splitFiles.add(newFileName);
+                    out = new BufferedWriter(new FileWriter(newFileName));
+                } else {
+                    if (out == null) {
+                        throw new IllegalArgumentException(src.getPath() + " format is not correct");
+                    }
+                    out.append(line).append('\n');
+                }
+            }
+        } finally {
+            in.close();
+            if (out != null) {
+                out.close();
+            }
+        }
+        return splitFiles;
+    }
 }

From 920bcfa1bf7095f525868f82c4c09fa566db20d8 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Fri, 19 Sep 2014 20:56:03 +0800
Subject: [PATCH 4/4] reject non-GncXML in migrationHelper

---
 app/src/org/gnucash/android/db/MigrationHelper.java | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/app/src/org/gnucash/android/db/MigrationHelper.java b/app/src/org/gnucash/android/db/MigrationHelper.java
index 860746b5..f285f7c6 100644
--- a/app/src/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/org/gnucash/android/db/MigrationHelper.java
@@ -126,12 +126,11 @@ static String exportDatabase(SQLiteDatabase db, ExportFormat format) throws IOEx
         //we do not use the ExporterAsyncTask here because we want to use an already open db
         Exporter exporter = null;
         switch (format){
-            case QIF:
-                exporter = new QifExporter(exportParams, db);
-                break;
             case GNC_XML:
-            default:
                 exporter = new GncXmlExporter(exportParams, db);
+                break;
+            default:
+                throw new IllegalArgumentException("Only Gnc XML is supported in Migration");
         }
 
         BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
