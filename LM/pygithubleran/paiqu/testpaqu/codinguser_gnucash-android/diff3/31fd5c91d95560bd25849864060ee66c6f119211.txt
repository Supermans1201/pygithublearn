From 31fd5c91d95560bd25849864060ee66c6f119211 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 11 Apr 2015 17:37:13 +0200
Subject: [PATCH] Code documentation and refactoring

---
 .../org/gnucash/android/db/DatabaseHelper.java     | 14 +---
 .../gnucash/android/export/xml/GncXmlExporter.java | 18 +++++-
 .../java/org/gnucash/android/model/PeriodType.java |  6 ++
 .../org/gnucash/android/model/ScheduledAction.java | 74 ++++++++++++++++++++--
 .../main/java/org/gnucash/android/model/Split.java | 56 +++++++++++++++-
 .../org/gnucash/android/model/TransactionType.java |  5 ++
 .../org/gnucash/android/ui/BaseDrawerActivity.java | 27 ++++----
 .../ui/transaction/TransactionFormFragment.java    |  1 -
 8 files changed, 169 insertions(+), 32 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
index 843d1e16..cf3bc009 100644
--- a/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/DatabaseHelper.java
@@ -50,14 +50,6 @@
 	private static final String DATABASE_NAME = "gnucash_db";
 
 	/**
-	 * Account which the origin account this transaction in double entry mode.
-     * This is no longer used since the introduction of splits
-	 */
-    //TODO: find and eliminate uses. Its services are no longer required
-    @Deprecated
-	public static final String KEY_DOUBLE_ENTRY_ACCOUNT_UID 	= "double_account_uid";
-
-	/**
 	 * SQL statement to create the accounts table in the database
 	 */
 	private static final String ACCOUNTS_TABLE_CREATE = "create table " + AccountEntry.TABLE_NAME + " ("
@@ -175,7 +167,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 			if (oldVersion == 1 && newVersion >= 2){
 				Log.i(LOG_TAG, "Adding column for double-entry transactions");
 				String addColumnSql = "ALTER TABLE " + TransactionEntry.TABLE_NAME +
-									" ADD COLUMN " + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " varchar(255)";
+									" ADD COLUMN double_account_uid varchar(255)";
 				
 				//introducing sub accounts
 				Log.i(LOG_TAG, "Adding column for parent accounts");
@@ -398,11 +390,11 @@ private int upgradeDbToVersion7(SQLiteDatabase db) {
                             + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'DEBIT' ELSE 'CREDIT' END ELSE CASE WHEN "
                             + SplitEntry.COLUMN_AMOUNT + " < 0 THEN 'CREDIT' ELSE 'DEBIT' END END , "
                     + "ABS ( " + TransactionEntry.TABLE_NAME + "_bak.amount ) , "
-                    + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " , "
+                    + TransactionEntry.TABLE_NAME + "_bak.double_account_uid , "
                     + TransactionEntry.TABLE_NAME + "_baK." + TransactionEntry.COLUMN_UID
                     + " FROM " + TransactionEntry.TABLE_NAME + "_bak , " + AccountEntry.TABLE_NAME
                     + " ON " + TransactionEntry.TABLE_NAME + "_bak.account_uid = " + AccountEntry.TABLE_NAME + "." + AccountEntry.COLUMN_UID
-                    + " WHERE " + TransactionEntry.TABLE_NAME + "_bak." + KEY_DOUBLE_ENTRY_ACCOUNT_UID + " IS NOT NULL"
+                    + " WHERE " + TransactionEntry.TABLE_NAME + "_bak.double_account_uid IS NOT NULL"
             );
             // drop backup transaction table
             db.execSQL("DROP TABLE " + TransactionEntry.TABLE_NAME + "_bak");
diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
index 55a7dadf..2a55a5bb 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlExporter.java
@@ -55,10 +55,20 @@
  */
 public class GncXmlExporter extends Exporter{
 
+    /**
+     * Construct a new exporter with export parameters
+     * @param params Parameters for the export
+     */
     public GncXmlExporter(ExportParams params) {
         super(params, null);
     }
 
+    /**
+     * Overloaded constructor.
+     * Creates an exporter with an already open database instance.
+     * @param params Parameters for the export
+     * @param db SQLite database
+     */
     public GncXmlExporter(ExportParams params, SQLiteDatabase db) {
         super(params, db);
     }
@@ -168,6 +178,12 @@ private void exportAccounts(XmlSerializer xmlSerializer) throws IOException {
         cursor.close();
     }
 
+    /**
+     * Serializes transactions from the database to XML
+     * @param xmlSerializer XML serializer
+     * @param exportTemplates Flag whether to export templates or normal transactions
+     * @throws IOException if the XML serializer cannot be written to
+     */
     private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTemplates) throws IOException {
         String where = null;
         if (exportTemplates){
@@ -356,7 +372,7 @@ private void exportTransactions(XmlSerializer xmlSerializer, boolean exportTempl
     }
 
     /**
-     * Serializes {@link org.gnucash.android.model.ScheduledAction}s from the database to XML
+     * Serializes {@link ScheduledAction}s from the database to XML
      * @param xmlSerializer XML serializer
      * @throws IOException
      */
diff --git a/app/src/main/java/org/gnucash/android/model/PeriodType.java b/app/src/main/java/org/gnucash/android/model/PeriodType.java
index 345de55d..81039747 100644
--- a/app/src/main/java/org/gnucash/android/model/PeriodType.java
+++ b/app/src/main/java/org/gnucash/android/model/PeriodType.java
@@ -94,6 +94,12 @@ public String getFrequencyRepeatString(){
         }
     }
 
+    /**
+     * Returns the parts of the recurrence rule which describe the day or month on which to run the
+     * scheduled transaction. These parts are the BYxxx
+     * @param startTime Start time of transaction used to determine the start day of execution
+     * @return String describing the BYxxx parts of the recurrence rule
+     */
     public String getByParts(long startTime){
         String partString = "";
         switch (this){
diff --git a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
index 30c3fc19..f84f983a 100644
--- a/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
+++ b/app/src/main/java/org/gnucash/android/model/ScheduledAction.java
@@ -81,34 +81,66 @@ public ScheduledAction(ActionType actionType){
         mIsEnabled = true; //all actions are enabled by default
     }
 
+    /**
+     * Returns the type of action to be performed by this scheduled action
+     * @return ActionType of the scheduled action
+     */
     public ActionType getActionType() {
         return mActionType;
     }
 
+    /**
+     * Sets the {@link ActionType}
+     * @param actionType Type of action
+     */
     public void setActionType(ActionType actionType) {
         this.mActionType = actionType;
     }
 
+    /**
+     * Returns the GUID of the action covered by this scheduled action
+     * @return GUID of action
+     */
     public String getActionUID() {
         return mActionUID;
     }
 
+    /**
+     * Sets the GUID of the action being scheduled
+     * @param actionUID GUID of the action
+     */
     public void setActionUID(String actionUID) {
         this.mActionUID = actionUID;
     }
 
+    /**
+     * Returns the timestamp of the last execution of this scheduled action
+     * @return Timestamp in milliseconds since Epoch
+     */
     public long getLastRun() {
         return mLastRun;
     }
 
+    /**
+     * Set time of last execution of the scheduled action
+     * @param nextRun Timestamp in milliseconds since Epoch
+     */
     public void setLastRun(long nextRun) {
         this.mLastRun = nextRun;
     }
 
+    /**
+     * Returns the period of this scheduled action
+     * @return Period in milliseconds since Epoch
+     */
     public long getPeriod() {
         return mPeriod;
     }
 
+    /**
+     * Sets the period of the scheduled action
+     * @param period Period in milliseconds since Epoch
+     */
     public void setPeriod(long period) {
         this.mPeriod = period;
     }
@@ -183,14 +215,26 @@ public static PeriodType getPeriodType(long period){
         return periodType;
     }
 
+    /**
+     * Returns the time of first execution of the scheduled action
+     * @return Start time of scheduled action in milliseconds since Epoch
+     */
     public long getStartTime() {
         return mStartDate;
     }
 
+    /**
+     * Sets the time of first execution of the scheduled action
+     * @param startDate Timestamp in milliseconds since Epoch
+     */
     public void setStartTime(long startDate) {
         this.mStartDate = startDate;
     }
 
+    /**
+     * Returns the time of last execution of the scheduled action
+     * @return Timestamp in milliseconds since Epoch
+     */
     public long getEndTime() {
         return mEndDate;
     }
@@ -205,22 +249,47 @@ public long getApproxEndTime(){
         return mStartDate + (mPeriod * mTotalFrequency);
     }
 
+    /**
+     * Sets the end time of the scheduled action
+     * @param endDate Timestamp in milliseconds since Epoch
+     */
     public void setEndTime(long endDate) {
         this.mEndDate = endDate;
     }
 
+    /**
+     * Returns the tag of this scheduled action
+     * <p>The tag saves additional information about the scheduled action,
+     * e.g. such as export parameters for scheduled backups</p>
+     * @return Tag of scheduled action
+     */
     public String getTag() {
         return mTag;
     }
 
+    /**
+     * Sets the tag of the schedules action.
+     * <p>The tag saves additional information about the scheduled action,
+     * e.g. such as export parameters for scheduled backups</p>
+     * @param tag Tag of scheduled action
+     */
     public void setTag(String tag) {
         this.mTag = tag;
     }
 
+    /**
+     * Returns {@code true} if the scheduled action is enabled, {@code false} otherwise
+     * @return {@code true} if the scheduled action is enabled, {@code false} otherwise
+     */
     public boolean isEnabled(){
         return mIsEnabled;
     }
 
+    /**
+     * Toggles the enabled state of the scheduled action
+     * Disabled scheduled actions will not be executed
+     * @param enabled Flag if the scheduled action is enabled or not
+     */
     public void setEnabled(boolean enabled){
         this.mIsEnabled = enabled;
     }
@@ -328,9 +397,6 @@ public static ScheduledAction parseScheduledAction(Transaction transaction, long
 
     @Override
     public String toString() {
-
-        String eventString = mActionType.name() + " - " + getRepeatString();
-
-        return eventString;
+        return mActionType.name() + " - " + getRepeatString();
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Split.java b/app/src/main/java/org/gnucash/android/model/Split.java
index 826d904b..c40e650f 100644
--- a/app/src/main/java/org/gnucash/android/model/Split.java
+++ b/app/src/main/java/org/gnucash/android/model/Split.java
@@ -70,46 +70,94 @@ public Split(Split sourceSplit, boolean generateUID){
         }
     }
 
+    /**
+     * Returns the amount of the split
+     * @return Money amount of the split
+     */
     public Money getAmount() {
         return mAmount;
     }
 
+    /**
+     * Sets the amount of the split
+     * @param amount Money amount of this split
+     */
     public void setAmount(Money amount) {
         this.mAmount = amount;
     }
 
+    /**
+     * Returns transaction GUID to which the split belongs
+     * @return String GUID of the transaction
+     */
     public String getTransactionUID() {
         return mTransactionUID;
     }
 
+    /**
+     * Sets the transaction to which the split belongs
+     * @param transactionUID GUID of transaction
+     */
     public void setTransactionUID(String transactionUID) {
         this.mTransactionUID = transactionUID;
     }
 
+    /**
+     * Returns the account GUID of this split
+     * @return GUID of the account
+     */
     public String getAccountUID() {
         return mAccountUID;
     }
 
+    /**
+     * Sets the GUID of the account of this split
+     * @param accountUID GUID of account
+     */
     public void setAccountUID(String accountUID) {
         this.mAccountUID = accountUID;
     }
 
+    /**
+     * Returns the type of the split
+     * @return {@link TransactionType} of the split
+     */
     public TransactionType getType() {
         return mSplitType;
     }
 
-    public void setType(TransactionType transactionType) {
-        this.mSplitType = transactionType;
+    /**
+     * Sets the type of this split
+     * @param splitType Type of the split
+     */
+    public void setType(TransactionType splitType) {
+        this.mSplitType = splitType;
     }
 
+    /**
+     * Returns the memo of this split
+     * @return String memo of this split
+     */
     public String getMemo() {
         return mMemo;
     }
 
+    /**
+     * Sets this split memo
+     * @param memo String memo of this split
+     */
     public void setMemo(String memo) {
         this.mMemo = memo;
     }
 
+    /**
+     * Creates a split which is a pair of this instance.
+     * A pair split has all the same attributes except that the SplitType is inverted and it belongs
+     * to another account.
+     * @param accountUID GUID of account
+     * @return New split pair of current split
+     * @see TransactionType#invert()
+     */
     public Split createPair(String accountUID){
         Split pair = new Split(mAmount.absolute(), accountUID);
         pair.setType(mSplitType.invert());
@@ -119,6 +167,10 @@ public Split createPair(String accountUID){
         return pair;
     }
 
+    /**
+     * Clones this split and returns an exact copy.
+     * @return New instance of a split which is a copy of the current one
+     */
     protected Split clone() {
         Split split = new Split(mAmount, mAccountUID);
         split.mUID = mUID;
diff --git a/app/src/main/java/org/gnucash/android/model/TransactionType.java b/app/src/main/java/org/gnucash/android/model/TransactionType.java
index 14f4cd97..0306a4c0 100644
--- a/app/src/main/java/org/gnucash/android/model/TransactionType.java
+++ b/app/src/main/java/org/gnucash/android/model/TransactionType.java
@@ -32,6 +32,11 @@
         CREDIT.opposite = DEBIT;
     }
 
+    /**
+     * Inverts the transaction type.
+     * <p>{@link TransactionType#CREDIT} becomes {@link TransactionType#DEBIT} and vice versa</p>
+     * @return Inverted transaction type
+     */
     public TransactionType invert() {
         return opposite;
     }
diff --git a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
index 6d19ab52..01beb2c8 100644
--- a/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/BaseDrawerActivity.java
@@ -103,9 +103,10 @@ public void onDrawerOpened(View drawerView) {
     }
 
     private MergeAdapter createNavDrawerMergeAdapter() {
+        //TODO: Localize nav drawer entries when features are finalized
         ArrayList<String> accountNavOptions = new ArrayList<String>();
         accountNavOptions.add("Favorites");
-        accountNavOptions.add("Open...");
+//        accountNavOptions.add("Open...");
         accountNavOptions.add("Reports");
 
         ArrayAdapter<String> accountsNavAdapter = new ArrayAdapter<String>(this,
@@ -140,7 +141,7 @@ private MergeAdapter createNavDrawerMergeAdapter() {
         settingsHeader.setTextColor(titleColorGreen);
 
         ArrayList<String> aboutNavOptions = new ArrayList<String>();
-        aboutNavOptions.add("Backup & Export");
+//        aboutNavOptions.add("Backup & Export");
         aboutNavOptions.add("Settings");
         //TODO: add help view
         ArrayAdapter<String> aboutNavAdapter = new ArrayAdapter<String>(this,
@@ -173,7 +174,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
         return super.onOptionsItemSelected(item);
     }
 
-    /** Swaps fragments in the main content view */
+    /**
+     * Handler for the navigation drawer items
+     * */
     protected void selectItem(int position) {
         switch (position){
             case 1: { //favorite accounts
@@ -184,22 +187,25 @@ protected void selectItem(int position) {
                 startActivity(intent);
             }
                 break;
+/*
 
             case 2: { //Open... files
                 //TODO: open/import GnuCash files
                 Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);
-                pickIntent.setType("application/*");
+                pickIntent.setType("application*/
+/*");
                 Intent chooser = Intent.createChooser(pickIntent, "Select GnuCash account file");
 
                 startActivityForResult(chooser, AccountsActivity.REQUEST_PICK_ACCOUNTS_FILE);
             }
                 break;
+*/
 
-            case 3:
+            case 2:
                 startActivity(new Intent(this, PieChartActivity.class));
                 break;
 
-            case 5: { //show scheduled transactions
+            case 4: { //show scheduled transactions
                 Intent intent = new Intent(this, ScheduledActionsActivity.class);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_SINGLE_TOP);
                 intent.putExtra(ScheduledActionsActivity.EXTRA_DISPLAY_MODE,
@@ -208,17 +214,12 @@ protected void selectItem(int position) {
             }
                 break;
 
-            case 6:{
+            case 5:{
                 AccountsActivity.showExportDialog(this);
             }
                 break;
 
-            case 9: { //Backup and Export
-
-            }
-                break;
-
-            case 10: //Settings activity
+            case 8: //Settings activity
                 startActivity(new Intent(this, SettingsActivity.class));
                 break;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 288bcae7..85996d7b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -814,7 +814,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
             else if (mAmountEditText.getText().length() == 0) {
                 Toast.makeText(getActivity(), R.string.toast_transanction_amount_required, Toast.LENGTH_SHORT).show();
             } else if (mUseDoubleEntry && mDoubleAccountSpinner.getCount() == 0){
-                //TODO: Localize string
                 Toast.makeText(getActivity(),
                         R.string.toast_disable_double_entry_to_save_transaction,
                         Toast.LENGTH_LONG).show();
