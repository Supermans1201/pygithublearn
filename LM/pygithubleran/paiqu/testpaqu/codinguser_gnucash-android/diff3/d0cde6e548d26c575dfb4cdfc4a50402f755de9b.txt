From e951c9bce1e89fdb92348f8cb00242088cd3fd6d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 21 Aug 2015 12:23:16 +0200
Subject: [PATCH 01/14] Temporarily disable the input formatter.

We must be able to enter simple mathematical expressions.
---
 .../org/gnucash/android/ui/transaction/TransactionFormFragment.java     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index e88c6854..62dd12df 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -548,7 +548,7 @@ private void openSplitEditor(){
 	 */
 	private void setListeners() {
         mAmountInputFormatter = new AmountTextWatcher(mAmountEditText); //new AmountInputFormatter(mAmountEditText);
-        mAmountEditText.addTextChangedListener(mAmountInputFormatter);
+        //mAmountEditText.addTextChangedListener(mAmountInputFormatter);
         mAmountEditText.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {

From c35235107f27b12e1231493a2d20ca3b3ecf0e56 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 21 Aug 2015 12:32:12 +0200
Subject: [PATCH 02/14] Change the type of the EditText to allow to enter text
 freely.

Again, we want to enter mathematical expressions.
---
 app/src/main/res/layout/fragment_new_transaction.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index 37b5eb1c..c5c124ce 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -54,7 +54,7 @@
 				android:layout_weight="3"
 				android:layout_height="wrap_content"
 				android:hint="@string/label_transaction_amount"
-				android:inputType="number"
+				android:inputType="text"
 				android:nextFocusDown="@+id/input_description"
 				android:drawableRight="@drawable/content_split_holo_light"
 				android:drawableEnd="@drawable/content_split_holo_light"

From c183a9f1fa166d2715fbfa93380987f27c38d8f2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 24 Aug 2015 18:06:50 +0200
Subject: [PATCH 03/14] Compute mathematical expressions in the amount field.

If the field contains a mathematical expression, it is replaced with its
results when the focus changes to another field.
---
 app/build.gradle                                   |  3 +-
 .../ui/transaction/TransactionFormFragment.java    | 39 ++++++++++++++++++++++
 2 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/app/build.gradle b/app/build.gradle
index 82d9719a..1991f863 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -162,7 +162,8 @@ dependencies {
             'com.google.android.gms:play-services-drive:7.0.0',
             'com.crashlytics.android:crashlytics:1.+',
             'com.android.support:cardview-v7:22.2.0',
-            'com.android.support:recyclerview-v7:22.2.0'
+            'com.android.support:recyclerview-v7:22.2.0',
+            'net.objecthunter:exp4j:0.4.5'
     )
 
     testCompile('org.robolectric:robolectric:3.0',
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 62dd12df..8b414720 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -54,6 +54,9 @@
 import com.doomonafireball.betterpickers.recurrencepicker.EventRecurrenceFormatter;
 import com.doomonafireball.betterpickers.recurrencepicker.RecurrencePickerDialog;
 
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
@@ -567,6 +570,42 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
+        mAmountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (!hasFocus) {
+                    String amountText = mAmountEditText.getText().toString();
+
+                    if (amountText.trim().isEmpty())
+                        return;
+
+                    // FIXME: replace the decimal separator of the current locale with '.'
+                    ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+                    Expression expression;
+
+                    try {
+                        expression = expressionBuilder.build();
+                    } catch (RuntimeException e) {
+                        setEditTextError();
+                        return;
+                    }
+
+                    if (expression != null && expression.validate().isValid())
+                        // FIXME: limit the decimal places
+                        // FIXME: use the locale decimal separator
+                        mAmountEditText.setText(Double.toString(expression.evaluate()));
+                    else
+                        setEditTextError();
+                }
+            }
+
+            private void setEditTextError() {
+                // FIXME: i18n
+                mAmountEditText.setError("Invalid expression.");
+                // TODO: log error
+            }
+        });
+
 		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {

From a9ebfc5a9aaeacc994fe34fbd15a221dcc1f40b8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Fri, 4 Sep 2015 19:22:18 +0200
Subject: [PATCH 04/14] Use a calculator keyboard for the amount edit text.

Implemented with an adapted CustomKeyboard taken from here:

http://www.fampennings.nl/maarten/android/09keyboard/index.htm
http://forum.xda-developers.com/showthread.php?t=2497237

Just the minimum implemented. It needs a lot of polishment.
---
 .../ui/transaction/TransactionFormFragment.java    |   5 +-
 .../gnucash/android/ui/util/CustomKeyboard.java    | 230 ++++++++++++++++++
 .../main/res/layout/fragment_new_transaction.xml   | 268 +++++++++++----------
 app/src/main/res/xml/calculator_keyboard.xml       |  31 +++
 4 files changed, 406 insertions(+), 128 deletions(-)
 create mode 100644 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
 create mode 100644 app/src/main/res/xml/calculator_keyboard.xml

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 8b414720..3a6abf1d 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -73,6 +73,7 @@
 import org.gnucash.android.ui.util.AmountInputFormatter;
 import org.gnucash.android.ui.util.RecurrenceParser;
 import org.gnucash.android.ui.util.TransactionTypeSwitch;
+import org.gnucash.android.ui.util.CustomKeyboard;
 import org.gnucash.android.ui.widget.WidgetConfigurationActivity;
 import org.gnucash.android.util.QualifiedAccountNameCursorAdapter;
 
@@ -218,6 +219,7 @@
     private List<Split> mSplitsList = new ArrayList<Split>();
 
     private boolean mEditMode = false;
+    private CustomKeyboard mCalculatorKeyboard;
 
     /**
 	 * Create the view and retrieve references to the UI elements
@@ -301,7 +303,8 @@ public void onNothingSelected(AdapterView<?> adapterView) {
             mEditMode = true;
 		}
 
-
+        mCalculatorKeyboard = new CustomKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
+        mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
 	}
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
new file mode 100644
index 00000000..adc9fda3
--- /dev/null
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -0,0 +1,230 @@
+/**
+ * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * If you use this software in a product, an acknowledgment in the product
+ * documentation would be appreciated but is not required.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.inputmethodservice.Keyboard;
+import android.inputmethodservice.KeyboardView;
+import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Layout;
+import android.view.HapticFeedbackConstants;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnFocusChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+
+/**
+ * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
+ *
+ * @author Maarten Pennings, extended by SimplicityApks
+ * @date 2012 December 23
+ */
+public class CustomKeyboard {
+
+    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    private KeyboardView mKeyboardView;
+    /** A link to the activity that hosts the {@link #mKeyboardView}. */
+    private Activity mHostActivity;
+    private boolean hapticFeedback;
+
+    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
+        @Override
+        public void onKey(int primaryCode, int[] keyCodes) {
+            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+
+            /*
+            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
+                return;
+            */
+
+            EditText edittext = (EditText) focusCurrent;
+            Editable editable = edittext.getText();
+            int start = edittext.getSelectionStart();
+            // delete the selection, if chars are selected:
+            int end = edittext.getSelectionEnd();
+
+            if (end > start)
+                editable.delete(start, end);
+
+            switch (primaryCode) {
+                case 48:
+                case 49:
+                case 50:
+                case 51:
+                case 52:
+                case 53:
+                case 54:
+                case 55:
+                case 56:
+                case 57:
+                    editable.insert(start, Character.toString((char) primaryCode));
+                    break;
+                case KeyEvent.KEYCODE_BACK:
+                    hideCustomKeyboard();
+                    break;
+                case -5:
+                    editable.delete(start - 1, start);
+            }
+        }
+
+        @Override
+        public void onPress(int arg0) {
+            // vibrate if haptic feedback is enabled:
+            if (hapticFeedback && arg0 != 0)
+                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
+        }
+
+        @Override public void onRelease(int primaryCode) { }
+        @Override public void onText(CharSequence text) { }
+        @Override public void swipeLeft() { }
+        @Override public void swipeRight() { }
+        @Override public void swipeDown() { }
+        @Override public void swipeUp() { }
+    };
+
+    /**
+     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
+     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
+     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
+     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
+     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
+     *
+     * @param host The hosting activity.
+     * @param viewid The id of the KeyboardView.
+     * @param layoutid The id of the xml file containing the keyboard layout.
+     */
+    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+        mHostActivity = host;
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
+        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
+        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
+        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
+        // Hide the standard keyboard initially
+        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+    }
+
+    /** Returns whether the CustomKeyboard is visible. */
+    public boolean isCustomKeyboardVisible() {
+        return mKeyboardView.getVisibility() == View.VISIBLE;
+    }
+
+    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    public void showCustomKeyboard(View v) {
+        if (v != null)
+            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+        mKeyboardView.setVisibility(View.VISIBLE);
+        mKeyboardView.setEnabled(true);
+    }
+
+    /** Make the CustomKeyboard invisible. */
+    public void hideCustomKeyboard() {
+        mKeyboardView.setVisibility(View.GONE);
+        mKeyboardView.setEnabled(false);
+    }
+
+    /**
+     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
+     *
+     * @param resid The resource id of the EditText that registers to the custom keyboard.
+     */
+    public void registerEditText(int resid) {
+        // Find the EditText 'resid'
+        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
+        // Make the custom keyboard appear
+        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    showCustomKeyboard(v);
+                else
+                    hideCustomKeyboard();
+            }
+        });
+
+        edittext.setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        /**
+         * Try to show cursor the complicated way:
+         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
+         * fixes the cursor not movable bug
+         */
+        OnTouchListener otl = new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!isCustomKeyboardVisible())
+                    showCustomKeyboard(v);
+
+                /*
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_MOVE:
+                        Layout layout = ((EditText) v).getLayout();
+                        float x = event.getX() + edittext.getScrollX();
+                        int offset = layout.getOffsetForHorizontal(0, x);
+
+                        if (offset > 0)
+                            if (x > layout.getLineMax(0))
+                                edittext.setSelection(offset);     // touch was at the end of the text
+                            else
+                                edittext.setSelection(offset - 1);
+                        break;
+                }
+                */
+
+                edittext.onTouchEvent(event);               // Call native handler
+
+                return false;
+            }
+
+        };
+
+        edittext.setOnTouchListener(otl);
+    }
+
+    /**
+     * Enables or disables the Haptic feedback on keyboard touches
+     * @param goEnabled true if you want haptic feedback, falso otherwise
+     */
+    public void enableHapticFeedback(boolean goEnabled) {
+        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
+        hapticFeedback = goEnabled;
+    }
+}
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index c5c124ce..9945ef72 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -15,133 +15,147 @@
  limitations under the License.
 -->
 
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
 	android:layout_width="match_parent"
 	android:layout_height="match_parent">
 
-	<TableLayout android:id="@+id/fragment_transaction_form"
-		android:layout_width="match_parent"
-		android:layout_height="wrap_content"
-		android:padding="@dimen/dialog_padding"
-		android:orientation="vertical" >
-
-		<TableRow style="@style/FormRow">
-		<AutoCompleteTextView
-			android:id="@+id/input_transaction_name"
-			android:layout_width="match_parent"
-			android:layout_height="wrap_content"
-			android:hint="@string/label_transaction_name"
-			android:inputType="textCapSentences"
-			android:imeOptions="actionNext"
-			android:nextFocusDown="@+id/input_transaction_amount"
-			android:background="@android:color/transparent"
-			android:textSize="22sp" />
-		</TableRow>
-		<View style="@style/Divider" android:layout_marginLeft="0dp" />
-
-		<TableRow style="@style/FormRow">
-			<TextView
-				android:id="@+id/currency_symbol"
-				style="@style/FormIcon"
-				android:gravity="center"
-				android:textColor="@color/debit_red"
-				android:textSize="22dp"
-				android:text="$" />
-
-			<EditText
-				android:id="@+id/input_transaction_amount"
-				android:layout_width="0dp"
-				android:layout_weight="3"
-				android:layout_height="wrap_content"
-				android:hint="@string/label_transaction_amount"
-				android:inputType="text"
-				android:nextFocusDown="@+id/input_description"
-				android:drawableRight="@drawable/content_split_holo_light"
-				android:drawableEnd="@drawable/content_split_holo_light"
-				android:background="@android:color/transparent"
-				android:textColor="@color/debit_red"
-				android:textSize="20sp" />
-
-			<org.gnucash.android.ui.util.TransactionTypeSwitch
-				android:id="@+id/input_transaction_type"
-				android:layout_width="0dp"
-				android:layout_weight="2"
-				android:layout_height="wrap_content"
-				android:textOn="@string/label_debit"
-				android:textOff="@string/label_credit"
-				android:textAllCaps="true"
-				android:gravity="end|center_vertical"
-				android:textColor="@color/debit_red"
-				android:checked="true"/>
-
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow android:id="@+id/layout_double_entry"
-			style="@style/FormRow" >
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_forward"/>
-			<Spinner
-				android:id="@+id/input_double_entry_accounts_spinner"
-				android:layout_width="0dp"
-				android:layout_weight="5"
-				android:layout_height="wrap_content"  />
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow style="@style/FormRow" >
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_time"/>
-
-			<TextView android:id="@+id/input_date"
-				android:layout_width="0dp"
-				android:layout_weight="3"
-				android:layout_height="wrap_content"
-				android:gravity="center"      />
-
-			<TextView android:id="@+id/input_time"
-				android:layout_width="0dp"
-				android:layout_weight="2"
-				android:layout_height="wrap_content"
-				android:gravity="center"        />
-		</TableRow>
-		<View style="@style/Divider" />
-
-		<TableRow style="@style/FormRow">
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_sort_by_size"/>
-
-			<EditText android:id="@+id/input_description"
-				android:layout_width="0dp"
-				android:layout_weight="5"
-				android:layout_height="wrap_content"
-				android:singleLine="false"
-				android:background="@android:color/transparent"
-				android:hint="@string/label_transaction_description"
-				android:inputType="textMultiLine|textCapSentences" />
-		</TableRow>
-		<View style="@style/Divider" />
-		<TableRow style="@style/FormRow">
-
-			<ImageView style="@style/FormIcon"
-				android:src="@drawable/ic_action_rotate_right"/>
-
-			<TextView android:id="@+id/input_recurrence"
-				android:layout_width="0dp"
-				android:layout_height="wrap_content"
-				android:layout_weight="5"
-				android:gravity="center"
-				android:text="@string/label_tap_to_create_schedule"
-				style="@style/Dropdown.TextView" />
-
-		</TableRow>
-
-		<CheckBox android:id="@+id/checkbox_save_template"
-			android:layout_width="match_parent"
-			android:layout_height="wrap_content"
-			android:layout_marginBottom="@dimen/form_row_bottom_margin"
-			android:visibility="gone"
-			android:text="@string/label_save_template" />
-		<!-- Not exposing the transaction template checkbox to the UI at this time -->
-	</TableLayout>
-</ScrollView>
\ No newline at end of file
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <TableLayout android:id="@+id/fragment_transaction_form"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/dialog_padding"
+            android:orientation="vertical" >
+
+            <TableRow style="@style/FormRow">
+            <AutoCompleteTextView
+                android:id="@+id/input_transaction_name"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:hint="@string/label_transaction_name"
+                android:inputType="textCapSentences"
+                android:imeOptions="actionNext"
+                android:nextFocusDown="@+id/input_transaction_amount"
+                android:background="@android:color/transparent"
+                android:textSize="22sp" />
+            </TableRow>
+            <View style="@style/Divider" android:layout_marginLeft="0dp" />
+
+            <TableRow style="@style/FormRow">
+                <TextView
+                    android:id="@+id/currency_symbol"
+                    style="@style/FormIcon"
+                    android:gravity="center"
+                    android:textColor="@color/debit_red"
+                    android:textSize="22dp"
+                    android:text="$" />
+
+                <EditText
+                    android:id="@+id/input_transaction_amount"
+                    android:layout_width="0dp"
+                    android:layout_weight="3"
+                    android:layout_height="wrap_content"
+                    android:hint="@string/label_transaction_amount"
+                    android:inputType="none"
+                    android:nextFocusDown="@+id/input_description"
+                    android:drawableRight="@drawable/content_split_holo_light"
+                    android:drawableEnd="@drawable/content_split_holo_light"
+                    android:background="@android:color/transparent"
+                    android:textColor="@color/debit_red"
+                    android:textSize="20sp" />
+
+                <org.gnucash.android.ui.util.TransactionTypeSwitch
+                    android:id="@+id/input_transaction_type"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:textOn="@string/label_debit"
+                    android:textOff="@string/label_credit"
+                    android:textAllCaps="true"
+                    android:gravity="end|center_vertical"
+                    android:textColor="@color/debit_red"
+                    android:checked="true"/>
+
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow android:id="@+id/layout_double_entry"
+                style="@style/FormRow" >
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_forward"/>
+                <Spinner
+                    android:id="@+id/input_double_entry_accounts_spinner"
+                    android:layout_width="0dp"
+                    android:layout_weight="5"
+                    android:layout_height="wrap_content"  />
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow style="@style/FormRow" >
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_time"/>
+
+                <TextView android:id="@+id/input_date"
+                    android:layout_width="0dp"
+                    android:layout_weight="3"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"      />
+
+                <TextView android:id="@+id/input_time"
+                    android:layout_width="0dp"
+                    android:layout_weight="2"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"        />
+            </TableRow>
+            <View style="@style/Divider" />
+
+            <TableRow style="@style/FormRow">
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_sort_by_size"/>
+
+                <EditText android:id="@+id/input_description"
+                    android:layout_width="0dp"
+                    android:layout_weight="5"
+                    android:layout_height="wrap_content"
+                    android:singleLine="false"
+                    android:background="@android:color/transparent"
+                    android:hint="@string/label_transaction_description"
+                    android:inputType="textMultiLine|textCapSentences" />
+            </TableRow>
+            <View style="@style/Divider" />
+            <TableRow style="@style/FormRow">
+
+                <ImageView style="@style/FormIcon"
+                    android:src="@drawable/ic_action_rotate_right"/>
+
+                <TextView android:id="@+id/input_recurrence"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="5"
+                    android:gravity="center"
+                    android:text="@string/label_tap_to_create_schedule"
+                    style="@style/Dropdown.TextView" />
+
+            </TableRow>
+
+            <CheckBox android:id="@+id/checkbox_save_template"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="@dimen/form_row_bottom_margin"
+                android:visibility="gone"
+                android:text="@string/label_save_template" />
+            <!-- Not exposing the transaction template checkbox to the UI at this time -->
+        </TableLayout>
+    </ScrollView>
+    <android.inputmethodservice.KeyboardView android:id="@+id/calculator_keyboard"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:visibility="gone" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
new file mode 100644
index 00000000..dcddfc59
--- /dev/null
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- FIXME: make locale independent -->
+<Keyboard xmlns:android="http://schemas.android.com/apk/res/android"
+    android:keyWidth="20%p"
+    android:keyHeight="10%p">
+
+    <Row>
+        <Key android:codes="55" android:keyLabel="7" android:keyEdgeFlags="left" />
+        <Key android:codes="56" android:keyLabel="8" />
+        <Key android:codes="57" android:keyLabel="9" />
+        <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
+            android:isRepeatable="true" android:horizontalGap="6.25%p" />
+    </Row>
+    <Row>
+        <Key android:codes="52" android:keyLabel="4" android:keyEdgeFlags="left" />
+        <Key android:codes="53" android:keyLabel="5" />
+        <Key android:codes="54" android:keyLabel="6" />
+        <Key android:codes="55006" android:keyLabel="CLR"
+            android:horizontalGap="6.25%p" android:keyEdgeFlags="right" />
+    </Row>
+    <Row>
+        <Key android:codes="49" android:keyLabel="1" android:keyEdgeFlags="left" />
+        <Key android:codes="50" android:keyLabel="2" />
+        <Key android:codes="51" android:keyLabel="3" />
+    </Row>
+    <Row>
+        <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
+        <Key android:codes="5001" android:keyLabel="." />
+        <Key android:codes="5002" android:keyLabel="=" android:keyEdgeFlags="right" />
+    </Row>
+</Keyboard>
\ No newline at end of file

From 48086423ef8e4ad350991569b1d7962ed59dece3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sat, 5 Sep 2015 11:49:03 +0200
Subject: [PATCH 05/14] Fix line separators.

---
 .../gnucash/android/ui/util/CustomKeyboard.java    | 460 ++++++++++-----------
 1 file changed, 230 insertions(+), 230 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index adc9fda3..c8b6b9d6 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -1,230 +1,230 @@
-/**
- * Copyright 2013 Maarten Pennings extended by SimplicityApks
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * <p/>
- * If you use this software in a product, an acknowledgment in the product
- * documentation would be appreciated but is not required.
- */
-
-package org.gnucash.android.ui.util;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.inputmethodservice.Keyboard;
-import android.inputmethodservice.KeyboardView;
-import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
-import android.text.Editable;
-import android.text.InputType;
-import android.text.Layout;
-import android.view.HapticFeedbackConstants;
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnFocusChangeListener;
-import android.view.View.OnTouchListener;
-import android.view.WindowManager;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.EditText;
-
-
-/**
- * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
- *
- * @author Maarten Pennings, extended by SimplicityApks
- * @date 2012 December 23
- */
-public class CustomKeyboard {
-
-    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
-    private KeyboardView mKeyboardView;
-    /** A link to the activity that hosts the {@link #mKeyboardView}. */
-    private Activity mHostActivity;
-    private boolean hapticFeedback;
-
-    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
-        @Override
-        public void onKey(int primaryCode, int[] keyCodes) {
-            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
-
-            /*
-            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
-                return;
-            */
-
-            EditText edittext = (EditText) focusCurrent;
-            Editable editable = edittext.getText();
-            int start = edittext.getSelectionStart();
-            // delete the selection, if chars are selected:
-            int end = edittext.getSelectionEnd();
-
-            if (end > start)
-                editable.delete(start, end);
-
-            switch (primaryCode) {
-                case 48:
-                case 49:
-                case 50:
-                case 51:
-                case 52:
-                case 53:
-                case 54:
-                case 55:
-                case 56:
-                case 57:
-                    editable.insert(start, Character.toString((char) primaryCode));
-                    break;
-                case KeyEvent.KEYCODE_BACK:
-                    hideCustomKeyboard();
-                    break;
-                case -5:
-                    editable.delete(start - 1, start);
-            }
-        }
-
-        @Override
-        public void onPress(int arg0) {
-            // vibrate if haptic feedback is enabled:
-            if (hapticFeedback && arg0 != 0)
-                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
-        }
-
-        @Override public void onRelease(int primaryCode) { }
-        @Override public void onText(CharSequence text) { }
-        @Override public void swipeLeft() { }
-        @Override public void swipeRight() { }
-        @Override public void swipeDown() { }
-        @Override public void swipeUp() { }
-    };
-
-    /**
-     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
-     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
-     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
-     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
-     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
-     *
-     * @param host The hosting activity.
-     * @param viewid The id of the KeyboardView.
-     * @param layoutid The id of the xml file containing the keyboard layout.
-     */
-    public CustomKeyboard(Activity host, int viewid, int layoutid) {
-        mHostActivity = host;
-        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
-        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
-        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
-        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
-        // Hide the standard keyboard initially
-        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
-    }
-
-    /** Returns whether the CustomKeyboard is visible. */
-    public boolean isCustomKeyboardVisible() {
-        return mKeyboardView.getVisibility() == View.VISIBLE;
-    }
-
-    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
-    public void showCustomKeyboard(View v) {
-        if (v != null)
-            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
-
-        mKeyboardView.setVisibility(View.VISIBLE);
-        mKeyboardView.setEnabled(true);
-    }
-
-    /** Make the CustomKeyboard invisible. */
-    public void hideCustomKeyboard() {
-        mKeyboardView.setVisibility(View.GONE);
-        mKeyboardView.setEnabled(false);
-    }
-
-    /**
-     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
-     *
-     * @param resid The resource id of the EditText that registers to the custom keyboard.
-     */
-    public void registerEditText(int resid) {
-        // Find the EditText 'resid'
-        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
-        // Make the custom keyboard appear
-        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
-            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (hasFocus)
-                    showCustomKeyboard(v);
-                else
-                    hideCustomKeyboard();
-            }
-        });
-
-        edittext.setOnClickListener(new OnClickListener() {
-            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
-            @Override
-            public void onClick(View v) {
-                showCustomKeyboard(v);
-            }
-        });
-
-        // Disable spell check (hex strings look like words to Android)
-        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
-
-        /**
-         * Try to show cursor the complicated way:
-         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
-         * fixes the cursor not movable bug
-         */
-        OnTouchListener otl = new OnTouchListener() {
-            @Override
-            public boolean onTouch(View v, MotionEvent event) {
-                if (!isCustomKeyboardVisible())
-                    showCustomKeyboard(v);
-
-                /*
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_MOVE:
-                        Layout layout = ((EditText) v).getLayout();
-                        float x = event.getX() + edittext.getScrollX();
-                        int offset = layout.getOffsetForHorizontal(0, x);
-
-                        if (offset > 0)
-                            if (x > layout.getLineMax(0))
-                                edittext.setSelection(offset);     // touch was at the end of the text
-                            else
-                                edittext.setSelection(offset - 1);
-                        break;
-                }
-                */
-
-                edittext.onTouchEvent(event);               // Call native handler
-
-                return false;
-            }
-
-        };
-
-        edittext.setOnTouchListener(otl);
-    }
-
-    /**
-     * Enables or disables the Haptic feedback on keyboard touches
-     * @param goEnabled true if you want haptic feedback, falso otherwise
-     */
-    public void enableHapticFeedback(boolean goEnabled) {
-        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
-        hapticFeedback = goEnabled;
-    }
-}
+/**
+ * Copyright 2013 Maarten Pennings extended by SimplicityApks
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * <p/>
+ * If you use this software in a product, an acknowledgment in the product
+ * documentation would be appreciated but is not required.
+ */
+
+package org.gnucash.android.ui.util;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.inputmethodservice.Keyboard;
+import android.inputmethodservice.KeyboardView;
+import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.Layout;
+import android.view.HapticFeedbackConstants;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnFocusChangeListener;
+import android.view.View.OnTouchListener;
+import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+
+
+/**
+ * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
+ *
+ * @author Maarten Pennings, extended by SimplicityApks
+ * @date 2012 December 23
+ */
+public class CustomKeyboard {
+
+    /** A link to the KeyboardView that is used to render this CustomKeyboard. */
+    private KeyboardView mKeyboardView;
+    /** A link to the activity that hosts the {@link #mKeyboardView}. */
+    private Activity mHostActivity;
+    private boolean hapticFeedback;
+
+    private OnKeyboardActionListener mOnKeyboardActionListener = new OnKeyboardActionListener() {
+        @Override
+        public void onKey(int primaryCode, int[] keyCodes) {
+            View focusCurrent = mHostActivity.getWindow().getCurrentFocus();
+
+            /*
+            if (focusCurrent == null || focusCurrent.getClass() != EditText.class)
+                return;
+            */
+
+            EditText edittext = (EditText) focusCurrent;
+            Editable editable = edittext.getText();
+            int start = edittext.getSelectionStart();
+            // delete the selection, if chars are selected:
+            int end = edittext.getSelectionEnd();
+
+            if (end > start)
+                editable.delete(start, end);
+
+            switch (primaryCode) {
+                case 48:
+                case 49:
+                case 50:
+                case 51:
+                case 52:
+                case 53:
+                case 54:
+                case 55:
+                case 56:
+                case 57:
+                    editable.insert(start, Character.toString((char) primaryCode));
+                    break;
+                case KeyEvent.KEYCODE_BACK:
+                    hideCustomKeyboard();
+                    break;
+                case -5:
+                    editable.delete(start - 1, start);
+            }
+        }
+
+        @Override
+        public void onPress(int arg0) {
+            // vibrate if haptic feedback is enabled:
+            if (hapticFeedback && arg0 != 0)
+                mKeyboardView.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
+        }
+
+        @Override public void onRelease(int primaryCode) { }
+        @Override public void onText(CharSequence text) { }
+        @Override public void swipeLeft() { }
+        @Override public void swipeRight() { }
+        @Override public void swipeDown() { }
+        @Override public void swipeUp() { }
+    };
+
+    /**
+     * Create a custom keyboard, that uses the KeyboardView (with resource id <var>viewid</var>) of the <var>host</var> activity,
+     * and load the keyboard layout from xml file <var>layoutid</var> (see {@link Keyboard} for description).
+     * Note that the <var>host</var> activity must have a <var>KeyboardView</var> in its layout (typically aligned with the bottom of the activity).
+     * Note that the keyboard layout xml file may include key codes for navigation; see the constants in this class for their values.
+     * Note that to enable EditText's to use this custom keyboard, call the {@link #registerEditText(int)}.
+     *
+     * @param host The hosting activity.
+     * @param viewid The id of the KeyboardView.
+     * @param layoutid The id of the xml file containing the keyboard layout.
+     */
+    public CustomKeyboard(Activity host, int viewid, int layoutid) {
+        mHostActivity = host;
+        mKeyboardView = (KeyboardView) mHostActivity.findViewById(viewid);
+        mKeyboardView.setKeyboard(new Keyboard(mHostActivity, layoutid));
+        mKeyboardView.setPreviewEnabled(false); // NOTE Do not show the preview balloons
+        mKeyboardView.setOnKeyboardActionListener(mOnKeyboardActionListener);
+        // Hide the standard keyboard initially
+        mHostActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+    }
+
+    /** Returns whether the CustomKeyboard is visible. */
+    public boolean isCustomKeyboardVisible() {
+        return mKeyboardView.getVisibility() == View.VISIBLE;
+    }
+
+    /** Make the CustomKeyboard visible, and hide the system keyboard for view v. */
+    public void showCustomKeyboard(View v) {
+        if (v != null)
+            ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+        mKeyboardView.setVisibility(View.VISIBLE);
+        mKeyboardView.setEnabled(true);
+    }
+
+    /** Make the CustomKeyboard invisible. */
+    public void hideCustomKeyboard() {
+        mKeyboardView.setVisibility(View.GONE);
+        mKeyboardView.setEnabled(false);
+    }
+
+    /**
+     * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
+     *
+     * @param resid The resource id of the EditText that registers to the custom keyboard.
+     */
+    public void registerEditText(int resid) {
+        // Find the EditText 'resid'
+        final EditText edittext = (EditText) mHostActivity.findViewById(resid);
+        // Make the custom keyboard appear
+        edittext.setOnFocusChangeListener(new OnFocusChangeListener() {
+            // NOTE By setting the on focus listener, we can show the custom keyboard when the edit box gets focus, but also hide it when the edit box loses focus
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus)
+                    showCustomKeyboard(v);
+                else
+                    hideCustomKeyboard();
+            }
+        });
+
+        edittext.setOnClickListener(new OnClickListener() {
+            // NOTE By setting the on click listener, we can show the custom keyboard again, by tapping on an edit box that already had focus (but that had the keyboard hidden).
+            @Override
+            public void onClick(View v) {
+                showCustomKeyboard(v);
+            }
+        });
+
+        // Disable spell check (hex strings look like words to Android)
+        edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
+
+        /**
+         * Try to show cursor the complicated way:
+         * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
+         * fixes the cursor not movable bug
+         */
+        OnTouchListener otl = new OnTouchListener() {
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                if (!isCustomKeyboardVisible())
+                    showCustomKeyboard(v);
+
+                /*
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_MOVE:
+                        Layout layout = ((EditText) v).getLayout();
+                        float x = event.getX() + edittext.getScrollX();
+                        int offset = layout.getOffsetForHorizontal(0, x);
+
+                        if (offset > 0)
+                            if (x > layout.getLineMax(0))
+                                edittext.setSelection(offset);     // touch was at the end of the text
+                            else
+                                edittext.setSelection(offset - 1);
+                        break;
+                }
+                */
+
+                edittext.onTouchEvent(event);               // Call native handler
+
+                return false;
+            }
+
+        };
+
+        edittext.setOnTouchListener(otl);
+    }
+
+    /**
+     * Enables or disables the Haptic feedback on keyboard touches
+     * @param goEnabled true if you want haptic feedback, falso otherwise
+     */
+    public void enableHapticFeedback(boolean goEnabled) {
+        mKeyboardView.setHapticFeedbackEnabled(goEnabled);
+        hapticFeedback = goEnabled;
+    }
+}

From 8afc7a4f943af2d149a0001411c959d56b2147f1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sat, 5 Sep 2015 11:53:09 +0200
Subject: [PATCH 06/14] Simplify and remove unneeded code.

---
 .../gnucash/android/ui/util/CustomKeyboard.java    | 30 +++-------------------
 1 file changed, 4 insertions(+), 26 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index c8b6b9d6..247659bf 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -20,14 +20,11 @@
 package org.gnucash.android.ui.util;
 
 import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
 import android.inputmethodservice.Keyboard;
 import android.inputmethodservice.KeyboardView;
 import android.inputmethodservice.KeyboardView.OnKeyboardActionListener;
 import android.text.Editable;
 import android.text.InputType;
-import android.text.Layout;
 import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -67,9 +64,9 @@ public void onKey(int primaryCode, int[] keyCodes) {
             EditText edittext = (EditText) focusCurrent;
             Editable editable = edittext.getText();
             int start = edittext.getSelectionStart();
-            // delete the selection, if chars are selected:
             int end = edittext.getSelectionEnd();
 
+            // delete the selection, if chars are selected:
             if (end > start)
                 editable.delete(start, end);
 
@@ -90,6 +87,7 @@ public void onKey(int primaryCode, int[] keyCodes) {
                     hideCustomKeyboard();
                     break;
                 case -5:
+                    // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
             }
         }
@@ -186,37 +184,17 @@ public void onClick(View v) {
          * @source http://androidpadanam.wordpress.com/2013/05/29/customkeyboard-example/
          * fixes the cursor not movable bug
          */
-        OnTouchListener otl = new OnTouchListener() {
+        edittext.setOnTouchListener(new OnTouchListener() {
             @Override
             public boolean onTouch(View v, MotionEvent event) {
                 if (!isCustomKeyboardVisible())
                     showCustomKeyboard(v);
 
-                /*
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_MOVE:
-                        Layout layout = ((EditText) v).getLayout();
-                        float x = event.getX() + edittext.getScrollX();
-                        int offset = layout.getOffsetForHorizontal(0, x);
-
-                        if (offset > 0)
-                            if (x > layout.getLineMax(0))
-                                edittext.setSelection(offset);     // touch was at the end of the text
-                            else
-                                edittext.setSelection(offset - 1);
-                        break;
-                }
-                */
-
                 edittext.onTouchEvent(event);               // Call native handler
 
                 return false;
             }
-
-        };
-
-        edittext.setOnTouchListener(otl);
+        });
     }
 
     /**

From 19831f1ce1c721ecd1833e2cfbdec5ba3845bd49 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 6 Sep 2015 11:57:34 +0200
Subject: [PATCH 07/14] Implement basic calculator keys.

---
 .../java/org/gnucash/android/ui/util/CustomKeyboard.java    |  8 ++++++++
 app/src/main/res/xml/calculator_keyboard.xml                | 13 ++++++++-----
 2 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 247659bf..a0a2b861 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -71,6 +71,11 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 editable.delete(start, end);
 
             switch (primaryCode) {
+                case 42:
+                case 43:
+                case 45:
+                case 46:
+                case 47:
                 case 48:
                 case 49:
                 case 50:
@@ -83,9 +88,12 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 57:
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
+                /*
+                FIXME: this should be implemented in Activity's onBackPressed()
                 case KeyEvent.KEYCODE_BACK:
                     hideCustomKeyboard();
                     break;
+                */
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
index dcddfc59..813058b1 100644
--- a/app/src/main/res/xml/calculator_keyboard.xml
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -9,23 +9,26 @@
         <Key android:codes="56" android:keyLabel="8" />
         <Key android:codes="57" android:keyLabel="9" />
         <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
-            android:isRepeatable="true" android:horizontalGap="6.25%p" />
+            android:isRepeatable="true" />
     </Row>
     <Row>
         <Key android:codes="52" android:keyLabel="4" android:keyEdgeFlags="left" />
         <Key android:codes="53" android:keyLabel="5" />
         <Key android:codes="54" android:keyLabel="6" />
-        <Key android:codes="55006" android:keyLabel="CLR"
-            android:horizontalGap="6.25%p" android:keyEdgeFlags="right" />
+        <Key android:codes="42" android:keyLabel="*" />
+        <Key android:codes="47" android:keyLabel="/" android:keyEdgeFlags="right" />
     </Row>
     <Row>
         <Key android:codes="49" android:keyLabel="1" android:keyEdgeFlags="left" />
         <Key android:codes="50" android:keyLabel="2" />
         <Key android:codes="51" android:keyLabel="3" />
+        <Key android:codes="43" android:keyLabel="+" />
+        <Key android:codes="45" android:keyLabel="-" android:keyEdgeFlags="right" />
     </Row>
     <Row>
         <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
-        <Key android:codes="5001" android:keyLabel="." />
-        <Key android:codes="5002" android:keyLabel="=" android:keyEdgeFlags="right" />
+        <Key android:codes="46" android:keyLabel="." />
+        <Key android:codes="1001" android:keyLabel="=" android:horizontalGap="40%"
+            android:keyEdgeFlags="right" />
     </Row>
 </Keyboard>
\ No newline at end of file

From 470b2cc390fea9a84a94cec960e6c476e264cd95 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Sun, 6 Sep 2015 16:45:08 +0200
Subject: [PATCH 08/14] Hide the calculator keyboard when the back key is
 pressed.

---
 .../android/ui/transaction/TransactionFormFragment.java |  2 ++
 .../android/ui/transaction/TransactionsActivity.java    | 17 +++++++++++++++++
 .../org/gnucash/android/ui/util/CustomKeyboard.java     | 14 ++++++++------
 3 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 3a6abf1d..7bdc2204 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -305,6 +305,8 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 
         mCalculatorKeyboard = new CustomKeyboard(getActivity(), R.id.calculator_keyboard, R.xml.calculator_keyboard);
         mCalculatorKeyboard.registerEditText(R.id.input_transaction_amount);
+        // FIXME: decouple from TransactionsActivity
+        ((TransactionsActivity) getActivity()).setOnBackListener(mCalculatorKeyboard);
 	}
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
index ca07c4bc..9865ecb2 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsActivity.java
@@ -54,6 +54,7 @@
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.account.AccountsListFragment;
 import org.gnucash.android.ui.passcode.PassLockActivity;
+import org.gnucash.android.ui.util.CustomKeyboard;
 import org.gnucash.android.ui.util.OnAccountClickedListener;
 import org.gnucash.android.ui.util.OnTransactionClickedListener;
 import org.gnucash.android.ui.util.Refreshable;
@@ -155,6 +156,7 @@ public void onNothingSelected(AdapterView<?> parent) {
     private PagerAdapter mPagerAdapter;
     private Spinner mToolbarSpinner;
     private TabLayout mTabLayout;
+    private CustomKeyboard mOnBackListener;
 
 
     /**
@@ -567,6 +569,21 @@ private void showTransactionFormFragment(Bundle args){
 		fragmentTransaction.commit();
 	}
 
+    public void setOnBackListener(CustomKeyboard keyboard) {
+        mOnBackListener = keyboard;
+    }
+
+    @Override
+    public void onBackPressed() {
+        boolean eventProcessed = false;
+
+        if (mOnBackListener != null)
+            eventProcessed = mOnBackListener.onBackPressed();
+
+        if (!eventProcessed)
+            super.onBackPressed();
+    }
+
     /**
      * Display the balance of a transaction in a text view and format the text color to match the sign of the amount
      * @param balanceTextView {@link android.widget.TextView} where balance is to be displayed
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index a0a2b861..ce68f22b 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -88,12 +88,6 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 57:
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
-                /*
-                FIXME: this should be implemented in Activity's onBackPressed()
-                case KeyEvent.KEYCODE_BACK:
-                    hideCustomKeyboard();
-                    break;
-                */
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
@@ -213,4 +207,12 @@ public void enableHapticFeedback(boolean goEnabled) {
         mKeyboardView.setHapticFeedbackEnabled(goEnabled);
         hapticFeedback = goEnabled;
     }
+
+    public boolean onBackPressed() {
+        if (isCustomKeyboardVisible()) {
+            hideCustomKeyboard();
+            return true;
+        } else
+            return false;
+    }
 }

From bd20338f3e0abb7435085e655054707490a7896b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 7 Sep 2015 18:56:05 +0200
Subject: [PATCH 09/14] Fix conflict between the expression evaluator and the
 calcualtor keyboard.

---
 .../ui/transaction/TransactionFormFragment.java    | 36 -------------------
 .../gnucash/android/ui/util/CustomKeyboard.java    | 40 +++++++++++++++++++++-
 2 files changed, 39 insertions(+), 37 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 7bdc2204..1974368a 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -575,42 +575,6 @@ public boolean onTouch(View v, MotionEvent event) {
             }
         });
 
-        mAmountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-            @Override
-            public void onFocusChange(View v, boolean hasFocus) {
-                if (!hasFocus) {
-                    String amountText = mAmountEditText.getText().toString();
-
-                    if (amountText.trim().isEmpty())
-                        return;
-
-                    // FIXME: replace the decimal separator of the current locale with '.'
-                    ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
-                    Expression expression;
-
-                    try {
-                        expression = expressionBuilder.build();
-                    } catch (RuntimeException e) {
-                        setEditTextError();
-                        return;
-                    }
-
-                    if (expression != null && expression.validate().isValid())
-                        // FIXME: limit the decimal places
-                        // FIXME: use the locale decimal separator
-                        mAmountEditText.setText(Double.toString(expression.evaluate()));
-                    else
-                        setEditTextError();
-                }
-            }
-
-            private void setEditTextError() {
-                // FIXME: i18n
-                mAmountEditText.setError("Invalid expression.");
-                // TODO: log error
-            }
-        });
-
 		mTransactionTypeButton.setAmountFormattingListener(mAmountEditText, mCurrencyTextView);
 
 		mDateTextView.setOnClickListener(new View.OnClickListener() {
diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index ce68f22b..eb30b1e9 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -36,6 +36,9 @@
 import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 
+import net.objecthunter.exp4j.Expression;
+import net.objecthunter.exp4j.ExpressionBuilder;
+
 
 /**
  * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
@@ -91,6 +94,9 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case -5:
                     // FIXME: it crashes when at the beginning of the line
                     editable.delete(start - 1, start);
+                    break;
+                case 1001:
+                    evaluateEditTextExpression(edittext);
             }
         }
 
@@ -165,8 +171,10 @@ public void registerEditText(int resid) {
             public void onFocusChange(View v, boolean hasFocus) {
                 if (hasFocus)
                     showCustomKeyboard(v);
-                else
+                else {
                     hideCustomKeyboard();
+                    evaluateEditTextExpression((EditText) v);
+                }
             }
         });
 
@@ -215,4 +223,34 @@ public boolean onBackPressed() {
         } else
             return false;
     }
+
+    private void evaluateEditTextExpression(EditText editText) {
+        String amountText = editText.getText().toString();
+
+        if (amountText.trim().isEmpty())
+            return;
+
+        // FIXME: replace the decimal separator of the current locale with '.'
+        ExpressionBuilder expressionBuilder = new ExpressionBuilder(amountText);
+        Expression expression;
+
+        try {
+            expression = expressionBuilder.build();
+        } catch (RuntimeException e) {
+            // FIXME: i18n
+            editText.setError("Invalid expression.");
+            // TODO: log error
+            return;
+        }
+
+        if (expression != null && expression.validate().isValid())
+            // FIXME: limit the decimal places
+            // FIXME: use the locale decimal separator
+            editText.setText(Double.toString(expression.evaluate()));
+        else {
+            // FIXME: i18n
+            editText.setError("Invalid expression.");
+            // TODO: log error
+        }
+    }
 }

From b6c840e4394e720d88a1af1d794187dca03c74f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Mon, 7 Sep 2015 21:01:07 +0200
Subject: [PATCH 10/14] Fix crash when the amount text is empty and backspace
 is pressed.

---
 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index eb30b1e9..06e88ab0 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -69,6 +69,7 @@ public void onKey(int primaryCode, int[] keyCodes) {
             int start = edittext.getSelectionStart();
             int end = edittext.getSelectionEnd();
 
+            // FIXME: use replace() down
             // delete the selection, if chars are selected:
             if (end > start)
                 editable.delete(start, end);
@@ -89,11 +90,12 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 55:
                 case 56:
                 case 57:
+                    //editable.replace(start, end, Character.toString((char) primaryCode));
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
                 case -5:
-                    // FIXME: it crashes when at the beginning of the line
-                    editable.delete(start - 1, start);
+                    int deleteStart = start > 0 ? start - 1: 0;
+                    editable.delete(deleteStart, end);
                     break;
                 case 1001:
                     evaluateEditTextExpression(edittext);
@@ -200,6 +202,7 @@ public boolean onTouch(View v, MotionEvent event) {
                 if (!isCustomKeyboardVisible())
                     showCustomKeyboard(v);
 
+                // XXX: Use dispatchTouchEvent()?
                 edittext.onTouchEvent(event);               // Call native handler
 
                 return false;

From 3b2eba5bd71548bd1b424fcdf9503740047881e9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 9 Sep 2015 16:42:49 +0200
Subject: [PATCH 11/14] Avoid the standard keyboard poping up on long click.

---
 .../main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 06e88ab0..6bbbcd31 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -208,6 +208,17 @@ public boolean onTouch(View v, MotionEvent event) {
                 return false;
             }
         });
+
+        // FIXME: for some reason, this prevents the text selection from working
+        edittext.setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                if (v != null)
+                    ((InputMethodManager) mHostActivity.getSystemService(Activity.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(v.getWindowToken(), 0);
+
+                return false;
+            }
+        });
     }
 
     /**

From 06539733aec012670e64815610f7e2b15412b01f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 9 Sep 2015 18:03:21 +0200
Subject: [PATCH 12/14] Fix visualization of the backspace key.

---
 app/src/main/res/xml/calculator_keyboard.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
index 813058b1..e41a8f8e 100644
--- a/app/src/main/res/xml/calculator_keyboard.xml
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -8,7 +8,7 @@
         <Key android:codes="55" android:keyLabel="7" android:keyEdgeFlags="left" />
         <Key android:codes="56" android:keyLabel="8" />
         <Key android:codes="57" android:keyLabel="9" />
-        <Key android:codes="-5" android:keyIcon="@drawable/ic_action_backspace"
+        <Key android:codes="-5" android:keyIcon="@drawable/ic_backspace_normal_dark"
             android:isRepeatable="true" />
     </Row>
     <Row>

From c93f805a7b97ed9ec687e8f503f87005659bc912 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Wed, 9 Sep 2015 23:00:24 +0200
Subject: [PATCH 13/14] Add a "next" key to focus the next field.

---
 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 6 ++++++
 app/src/main/res/xml/calculator_keyboard.xml                      | 3 ++-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 6bbbcd31..37079c4a 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -91,6 +91,7 @@ public void onKey(int primaryCode, int[] keyCodes) {
                 case 56:
                 case 57:
                     //editable.replace(start, end, Character.toString((char) primaryCode));
+                    // XXX: could be android:keyOutputText attribute used instead of this?
                     editable.insert(start, Character.toString((char) primaryCode));
                     break;
                 case -5:
@@ -99,6 +100,11 @@ public void onKey(int primaryCode, int[] keyCodes) {
                     break;
                 case 1001:
                     evaluateEditTextExpression(edittext);
+                    break;
+                case 1002:
+                    // FIXME: show the keyboard too
+                    edittext.focusSearch(View.FOCUS_DOWN).requestFocus();
+                    break;
             }
         }
 
diff --git a/app/src/main/res/xml/calculator_keyboard.xml b/app/src/main/res/xml/calculator_keyboard.xml
index e41a8f8e..49038476 100644
--- a/app/src/main/res/xml/calculator_keyboard.xml
+++ b/app/src/main/res/xml/calculator_keyboard.xml
@@ -28,7 +28,8 @@
     <Row>
         <Key android:codes="48" android:keyLabel="0" android:keyEdgeFlags="left" />
         <Key android:codes="46" android:keyLabel="." />
-        <Key android:codes="1001" android:keyLabel="=" android:horizontalGap="40%"
+        <Key android:codes="1001" android:keyLabel="=" android:horizontalGap="20%" />
+        <Key android:codes="1002" android:keyIcon="@drawable/navigation_next_item"
             android:keyEdgeFlags="right" />
     </Row>
 </Keyboard>
\ No newline at end of file

From ee17a70efdb4fe97befe5bd03769268f62113ecc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=80lex=20Magaz=20Gra=C3=A7a?= <rivaldi8@gmail.com>
Date: Thu, 17 Sep 2015 18:51:33 +0200
Subject: [PATCH 14/14] Added known issues of the CustomKeyboard.

---
 app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
index 37079c4a..5ed0ddb0 100644
--- a/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
+++ b/app/src/main/java/org/gnucash/android/ui/util/CustomKeyboard.java
@@ -43,6 +43,11 @@
 /**
  * When an activity hosts a keyboardView, this class allows several EditText's to register for it.
  *
+ * Known issues:
+ *  - It's not possible to select text.
+ *  - When in landscape, the EditText is covered by the keyboard.
+ *  - No i18n.
+ *
  * @author Maarten Pennings, extended by SimplicityApks
  * @date 2012 December 23
  */
