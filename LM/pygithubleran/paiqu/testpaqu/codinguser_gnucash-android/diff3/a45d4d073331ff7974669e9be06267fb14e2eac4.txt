From a45d4d073331ff7974669e9be06267fb14e2eac4 Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Sat, 19 Sep 2015 02:01:16 +0200
Subject: [PATCH] Add support Android M permissions model

Fix account creation crash due to missing commodity UID
Require commodity UID in accounts and transactions during migration
---
 app/build.gradle                                   | 15 +++--
 .../org/gnucash/android/db/AccountsDbAdapter.java  | 12 +++-
 .../org/gnucash/android/db/MigrationHelper.java    |  4 +-
 .../org/gnucash/android/export/ExportParams.java   |  2 +-
 .../android/ui/account/AccountsActivity.java       | 68 +++++++++++++++++++---
 .../android/ui/export/ExportFormFragment.java      | 20 +++++++
 app/src/main/res/layout/activity_accounts.xml      |  1 -
 .../test/unit/db/AccountsDbAdapterTest.java        |  4 +-
 .../android/test/unit/db/SplitsDbAdapterTest.java  |  2 +-
 .../test/unit/db/TransactionsDbAdapterTest.java    |  2 +-
 10 files changed, 108 insertions(+), 22 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 6cf2134f..f6440972 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -20,13 +20,13 @@ def gitSha() {
 
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion "22.0.1"
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
     defaultConfig {
         applicationId "org.gnucash.android"
         testApplicationId 'org.gnucash.android.test'
         minSdkVersion 10
-        targetSdkVersion 21 //robolectric tests only support up to API level 21 at the moment
+        targetSdkVersion 23 //robolectric tests only support up to API level 21 at the moment
         versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
         versionName "${versionMajor}.${versionMinor}.${versionPatch}"
         resValue "string", "app_version_name", "${versionName}"
@@ -176,10 +176,15 @@ dependencies {
             'com.kobakei:ratethisapp:0.0.3',
             'com.squareup:android-times-square:1.6.4@aar',
             'com.github.techfreak:wizardpager:1.0.0',
-            'net.objecthunter:exp4j:0.4.5',
-            'com.uservoice:uservoice-android-sdk:+'
+            'net.objecthunter:exp4j:0.4.5'
     )
 
+    compile ('com.uservoice:uservoice-android-sdk:1.2.+') {
+        exclude module: 'commons-logging'
+        exclude module: 'httpcore'
+        exclude module: 'httpclient'
+    }
+
     compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
         transitive = true;
     }
diff --git a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
index 23ce7ad5..3597caf9 100644
--- a/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/AccountsDbAdapter.java
@@ -31,6 +31,7 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -172,8 +173,11 @@ protected SQLiteStatement compileReplaceStatement(@NonNull final Account account
         mReplaceStatement.bindLong(9, account.isPlaceholderAccount() ? 1 : 0);
         mReplaceStatement.bindString(10, account.getCreatedTimestamp().toString());
         mReplaceStatement.bindLong(11, account.isHidden() ? 1 : 0);
-        if (account.getCommodityUID() != null)
-            mReplaceStatement.bindString(12, account.getCommodityUID());
+        String commodityUID = account.getCommodityUID();
+        if (commodityUID == null)
+            commodityUID = CommoditiesDbAdapter.getInstance().getCommodityUID(account.getCurrency().getCurrencyCode());
+
+        mReplaceStatement.bindString(12, commodityUID);
 
         String parentAccountUID = account.getParentUID();
         if (parentAccountUID == null && account.getAccountType() != AccountType.ROOT) {
@@ -920,7 +924,9 @@ public String getOrCreateGnuCashRootAccountUID() {
         contentValues.put(AccountEntry.COLUMN_FULL_NAME, rootAccount.getFullName());
         contentValues.put(AccountEntry.COLUMN_TYPE, rootAccount.getAccountType().name());
         contentValues.put(AccountEntry.COLUMN_HIDDEN, rootAccount.isHidden() ? 1 : 0);
-        contentValues.put(AccountEntry.COLUMN_CURRENCY, GnuCashApplication.getDefaultCurrencyCode());
+        String defaultCurrencyCode = GnuCashApplication.getDefaultCurrencyCode();
+        contentValues.put(AccountEntry.COLUMN_CURRENCY, defaultCurrencyCode);
+        contentValues.put(AccountEntry.COLUMN_COMMODITY_UID, CommoditiesDbAdapter.getInstance().getCommodityUID(defaultCurrencyCode));
         Log.i(LOG_TAG, "Creating ROOT account");
         mDb.insert(AccountEntry.TABLE_NAME, null, contentValues);
         return rootAccount.getUID();
diff --git a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
index 60e02d24..14e0bbeb 100644
--- a/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
+++ b/app/src/main/java/org/gnucash/android/db/MigrationHelper.java
@@ -873,11 +873,11 @@ static int upgradeDbToVersion9(SQLiteDatabase db){
             }
 
             db.execSQL(" ALTER TABLE " + AccountEntry.TABLE_NAME
-                    + " ADD COLUMN " + AccountEntry.COLUMN_COMMODITY_UID + " varchar(255) "
+                    + " ADD COLUMN " + AccountEntry.COLUMN_COMMODITY_UID + " varchar(255) not null "
                     + " REFERENCES " + CommodityEntry.TABLE_NAME + " (" + CommodityEntry.COLUMN_UID + ") ");
 
             db.execSQL(" ALTER TABLE " + TransactionEntry.TABLE_NAME
-                    + " ADD COLUMN " + TransactionEntry.COLUMN_COMMODITY_UID + " varchar(255) "
+                    + " ADD COLUMN " + TransactionEntry.COLUMN_COMMODITY_UID + " varchar(255) not null"
                     + " REFERENCES " + CommodityEntry.TABLE_NAME + " (" + CommodityEntry.COLUMN_UID + ") ");
 
             db.execSQL("UPDATE " + AccountEntry.TABLE_NAME + " SET " + AccountEntry.COLUMN_COMMODITY_UID + " = "
diff --git a/app/src/main/java/org/gnucash/android/export/ExportParams.java b/app/src/main/java/org/gnucash/android/export/ExportParams.java
index 755a23aa..715f9d89 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportParams.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportParams.java
@@ -85,7 +85,7 @@ public ExportFormat getExportFormat() {
      */
     public void setExportFormat(ExportFormat exportFormat) {
         this.mExportFormat = exportFormat;
-        mTargetFilepath = GnuCashApplication.getAppContext().getExternalFilesDir(null) + "/" + Exporter.buildExportFilename(mExportFormat);
+        mTargetFilepath = GnuCashApplication.getAppContext().getFilesDir() + "/" + Exporter.buildExportFilename(mExportFormat);
     }
 
     /**
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
index d0f660b0..df1879aa 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountsActivity.java
@@ -17,6 +17,7 @@
 
 package org.gnucash.android.ui.account;
 
+import android.Manifest;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.ActivityNotFoundException;
@@ -26,12 +27,16 @@
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
 import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.res.Resources;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.support.design.widget.CoordinatorLayout;
 import android.support.design.widget.FloatingActionButton;
+import android.support.design.widget.Snackbar;
 import android.support.design.widget.TabLayout;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
@@ -71,6 +76,9 @@
 import java.io.FileNotFoundException;
 import java.io.InputStream;
 
+import butterknife.Bind;
+import butterknife.ButterKnife;
+
 /**
  * Manages actions related to accounts, displaying, exporting and creating new accounts
  * The various actions are implemented as Fragments which are then added to this activity
@@ -90,7 +98,7 @@
      */
     public static final int REQUEST_EDIT_ACCOUNT = 0x10;
 
-	/**
+    /**
 	 * Logging tag
 	 */
 	protected static final String LOG_TAG = "AccountsActivity";
@@ -124,6 +132,8 @@
      * Key for putting argument for tab into bundle arguments
      */
     public static final String EXTRA_TAB_INDEX = "org.gnucash.android.extra.TAB_INDEX";
+    public static final int REQUEST_PERMISSION = 0xAB;
+    public static final int PERMISSION_REQUEST_WRITE_SD_CARD = REQUEST_PERMISSION;
 
     /**
      * Map containing fragments for the different tabs
@@ -133,8 +143,9 @@
     /**
      * ViewPager which manages the different tabs
      */
-    private ViewPager mViewPager;
-
+    @Bind(R.id.pager) ViewPager mViewPager;
+    @Bind(R.id.fab_create_account) FloatingActionButton mFloatingActionButton;
+    @Bind(R.id.coordinatorLayout) CoordinatorLayout mCoordinatorLayout;
 
     /**
      * Adapter for managing the sub-account and transaction fragment pages in the accounts view
@@ -205,6 +216,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_accounts);
         setUpDrawer();
+        ButterKnife.bind(this);
 
         Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
@@ -220,8 +232,6 @@ public void onCreate(Bundle savedInstanceState) {
         tabLayout.addTab(tabLayout.newTab().setText(R.string.title_favorite_accounts));
         tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
 
-        mViewPager = (ViewPager) findViewById(R.id.pager);
-
         //show the simple accounts list
         PagerAdapter mPagerAdapter = new AccountViewPagerAdapter(getSupportFragmentManager());
         mViewPager.setAdapter(mPagerAdapter);
@@ -249,8 +259,7 @@ public void onTabReselected(TabLayout.Tab tab) {
         int index = intent.getIntExtra(EXTRA_TAB_INDEX, lastTabIndex);
         mViewPager.setCurrentItem(index);
 
-        FloatingActionButton floatingActionButton = (FloatingActionButton) findViewById(R.id.fab_create_account);
-        floatingActionButton.setOnClickListener(new View.OnClickListener() {
+        mFloatingActionButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 Intent addAccountIntent = new Intent(AccountsActivity.this, FormActivity.class);
@@ -294,6 +303,49 @@ private void handleOpenFileIntent(Intent intent) {
         }
     }
 
+    /**
+     * Get permission for WRITING SD card
+     */
+    private void getSDWritePermission(){
+        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
+                    != PackageManager.PERMISSION_GRANTED) {
+//                if (shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)){
+                    Snackbar.make(mCoordinatorLayout,
+                            "GnuCash requires permission to access the SD card for backup and restore",
+                            Snackbar.LENGTH_INDEFINITE).setAction("GRANT",
+                            new View.OnClickListener() {
+                                @Override
+                                public void onClick(View view) {
+                                    requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
+                                            Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_WRITE_SD_CARD);
+                                }
+                            })
+                            .setActionTextColor(getResources().getColor(R.color.theme_accent))
+                            .show();
+//                }
+            }
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
+        switch (requestCode){
+            case PERMISSION_REQUEST_WRITE_SD_CARD:{
+                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+
+                    //TODO: permission was granted, yay! do the
+                    // calendar task you need to do.
+
+                } else {
+
+                    // TODO: permission denied, boo! Disable the
+                    // functionality that depends on this permission.
+                }
+            } return;
+        }
+    }
+
     @Override
     protected void onNewIntent(Intent intent) {
         super.onNewIntent(intent);
@@ -328,6 +380,8 @@ private void init() {
 
             //default to using double entry and save the preference explicitly
             prefs.edit().putBoolean(getString(R.string.key_use_double_entry), true).apply();
+        } else {
+            getSDWritePermission();
         }
 
         if (hasNewFeatures()){
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 33efa382..5a8d0c69 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -16,11 +16,15 @@
 
 package org.gnucash.android.ui.export;
 
+import android.Manifest;
 import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.support.design.widget.Snackbar;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v7.app.ActionBar;
@@ -52,6 +56,7 @@
 import org.gnucash.android.export.ExportFormat;
 import org.gnucash.android.export.ExportParams;
 import org.gnucash.android.model.ScheduledAction;
+import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.settings.SettingsActivity;
 import org.gnucash.android.ui.util.RecurrenceParser;
 
@@ -192,6 +197,21 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		assert supportActionBar != null;
 		supportActionBar.setTitle(R.string.title_export_dialog);
 		setHasOptionsMenu(true);
+
+		getSDWritePermission();
+	}
+
+	/**
+	 * Get permission for WRITING SD card for Android Marshmallow and above
+	 */
+	private void getSDWritePermission(){
+		if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+			if (getActivity().checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
+					!= PackageManager.PERMISSION_GRANTED) {
+				getActivity().requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,
+						Manifest.permission.READ_EXTERNAL_STORAGE}, AccountsActivity.PERMISSION_REQUEST_WRITE_SD_CARD);
+			}
+		}
 	}
 
 	/**
diff --git a/app/src/main/res/layout/activity_accounts.xml b/app/src/main/res/layout/activity_accounts.xml
index e0d63da3..838e12f9 100644
--- a/app/src/main/res/layout/activity_accounts.xml
+++ b/app/src/main/res/layout/activity_accounts.xml
@@ -70,7 +70,6 @@
             android:layout_alignParentEnd="true"
             android:layout_margin="20dp"
             app:elevation="10dp"
-            app:layout_behavior="org.gnucash.android.ui.util.ScrollingFABBehavior"
             android:src="@drawable/ic_add_white_48dp"/>
 
     </android.support.design.widget.CoordinatorLayout>
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index 2167a8fd..57a5537b 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -1,5 +1,7 @@
 package org.gnucash.android.test.unit.db;
 
+import android.os.Build;
+
 import org.assertj.core.data.Index;
 import org.gnucash.android.BuildConfig;
 import org.gnucash.android.R;
@@ -37,7 +39,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(GnucashTestRunner.class) //package is required so that resources can be found in dev mode
-@Config(constants = BuildConfig.class, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class})
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class})
 public class AccountsDbAdapterTest{
 
 	private static final String BRAVO_ACCOUNT_NAME = "Bravo";
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java
index 5b233933..8c7939ce 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/SplitsDbAdapterTest.java
@@ -27,7 +27,7 @@
  * Some tests for the splits database adapter
  */
 @RunWith(GnucashTestRunner.class) //package is required so that resources can be found in dev mode
-@Config(constants = BuildConfig.class, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class})
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class})
 public class SplitsDbAdapterTest {
 
     private AccountsDbAdapter mAccountsDbAdapter;
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index d718c2a9..7b3999b7 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -25,7 +25,7 @@
 
 
 @RunWith(GnucashTestRunner.class) //package is required so that resources can be found in dev mode
-@Config(constants = BuildConfig.class, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class})
+@Config(constants = BuildConfig.class, sdk = 21, packageName = "org.gnucash.android", shadows = {ShadowCrashlytics.class})
 public class TransactionsDbAdapterTest {
 	private static final String ALPHA_ACCOUNT_NAME  = "Alpha";
 	private static final String BRAVO_ACCOUNT_NAME  = "Bravo";
