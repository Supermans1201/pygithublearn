From 6fb17c7423cf3ad83c77c66c75212e504dc9561e Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Tue, 3 Nov 2015 15:36:40 +0100
Subject: [PATCH] Change Money to use Commodity instead of Currency

---
 .../android/test/ui/AccountsActivityTest.java      |   5 +-
 .../android/test/ui/PieChartReportTest.java        |   3 +-
 .../gnucash/android/importer/GncXmlHandler.java    |  16 +-
 .../java/org/gnucash/android/model/Account.java    |   8 +
 .../java/org/gnucash/android/model/BaseModel.java  |   9 +-
 .../java/org/gnucash/android/model/Commodity.java  |  79 ++++++++-
 .../main/java/org/gnucash/android/model/Money.java | 194 +++++++++------------
 .../android/receivers/TransactionRecorder.java     |   2 +-
 .../ui/transaction/SplitEditorFragment.java        |   9 +-
 .../ui/transaction/TransactionFormFragment.java    |   7 +-
 .../dialog/TransferFundsDialogFragment.java        |   2 +-
 .../test/unit/db/AccountsDbAdapterTest.java        |   3 +-
 .../test/unit/db/TransactionsDbAdapterTest.java    |   7 +-
 .../gnucash/android/test/unit/model/MoneyTest.java |  18 +-
 .../gnucash/android/test/unit/model/SplitTest.java |   7 +-
 15 files changed, 216 insertions(+), 153 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index e5723586..ecae2fa0 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -40,6 +40,7 @@
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -80,7 +81,7 @@
 @RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
 	private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
-    private static final Currency DUMMY_ACCOUNT_CURRENCY = Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
+    private static final Commodity DUMMY_ACCOUNT_CURRENCY = Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE);
 	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
     public static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
     private DatabaseHelper mDbHelper;
@@ -282,7 +283,7 @@ public void editingAccountShouldNotDeleteTransactions(){
                 .perform(click());
 
         Account account = new Account("Transfer Account");
-        account.setCurrency(DUMMY_ACCOUNT_CURRENCY);
+        account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode()));
         Transaction transaction = new Transaction("Simple trxn");
         transaction.setCurrencyCode(DUMMY_ACCOUNT_CURRENCY.getCurrencyCode());
         Split split = new Split(new Money(BigDecimal.TEN, DUMMY_ACCOUNT_CURRENCY), account.getUID());
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index 59ef63c4..72ce5e0f 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -42,6 +42,7 @@
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -94,7 +95,7 @@
     private static final String GIFTS_RECEIVED_INCOME_ACCOUNT_UID = "b01950c0df0890b6543209d51c8e0b0f";
     private static final String GIFTS_RECEIVED_INCOME_ACCOUNT_NAME = "Gifts Received";
 
-    public static final Currency CURRENCY = Currency.getInstance("USD");
+    public static final Commodity CURRENCY = Commodity.getInstance("USD");
 
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index fec03cfa..9e12030d 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -33,6 +33,7 @@
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
 import org.gnucash.android.model.Price;
@@ -53,7 +54,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Stack;
-import java.util.UUID;
 import java.util.regex.Pattern;
 
 /**
@@ -566,9 +566,9 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                     //this is intentional: GnuCash XML formats split amounts, credits are negative, debits are positive.
                     mSplit.setType(mNegativeQuantity ? TransactionType.CREDIT : TransactionType.DEBIT);
                     //the split amount uses the account currency
-                    mSplit.setQuantity(new Money(mQuantity, getCurrencyForAccount(characterString)));
+                    mSplit.setQuantity(new Money(mQuantity, getCommodityForAccount(characterString)));
                     //the split value uses the transaction currency
-                    mSplit.setValue(new Money(mValue, mTransaction.getCurrency()));
+                    mSplit.setValue(new Money(mValue, Commodity.getInstance(mTransaction.getCurrency().getCurrencyCode())));
                     mSplit.setAccountUID(characterString);
                 } else {
                     if (!mIgnoreTemplateTransaction)
@@ -851,14 +851,14 @@ public void endDocument() throws SAXException {
      * Returns the currency for an account which has been parsed (but not yet saved to the db)
      * <p>This is used when parsing splits to assign the right currencies to the splits</p>
      * @param accountUID GUID of the account
-     * @return Currency of the account
+     * @return Commodity of the account
      */
-    private Currency getCurrencyForAccount(String accountUID){
+    private Commodity getCommodityForAccount(String accountUID){
         try {
-            return mAccountMap.get(accountUID).getCurrency();
+            return mAccountMap.get(accountUID).getCommodity();
         } catch (Exception e) {
             Crashlytics.logException(e);
-            return Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
+            return Commodity.getInstance(Money.DEFAULT_CURRENCY_CODE);
         }
     }
 
@@ -870,7 +870,7 @@ private Currency getCurrencyForAccount(String accountUID){
     private void handleEndOfTemplateNumericSlot(String characterString, TransactionType splitType) {
         try {
             BigDecimal amountBigD = GncXmlHelper.parseSplitAmount(characterString);
-            Money amount = new Money(amountBigD, getCurrencyForAccount(mSplit.getAccountUID()));
+            Money amount = new Money(amountBigD, getCommodityForAccount(mSplit.getAccountUID()));
             mSplit.setValue(amount.absolute());
             mSplit.setType(splitType);
             mIgnoreTemplateTransaction = false; //we have successfully parsed an amount
diff --git a/app/src/main/java/org/gnucash/android/model/Account.java b/app/src/main/java/org/gnucash/android/model/Account.java
index 42ca5279..2b1025b4 100644
--- a/app/src/main/java/org/gnucash/android/model/Account.java
+++ b/app/src/main/java/org/gnucash/android/model/Account.java
@@ -335,6 +335,14 @@ public Currency getCurrency() {
 	}
 
 	/**
+	 * Return the commodity for this account
+	 * @return
+	 */
+	public Commodity getCommodity(){
+		return Commodity.getInstance(mCurrency.getCurrencyCode());
+	}
+
+	/**
 	 * Sets the currency to be used by this account
 	 * @param currency the mCurrency to set
 	 */
diff --git a/app/src/main/java/org/gnucash/android/model/BaseModel.java b/app/src/main/java/org/gnucash/android/model/BaseModel.java
index eefde82a..cf741495 100644
--- a/app/src/main/java/org/gnucash/android/model/BaseModel.java
+++ b/app/src/main/java/org/gnucash/android/model/BaseModel.java
@@ -108,6 +108,11 @@ public void setModifiedTimestamp(Timestamp modifiedTimestamp) {
         this.mModifiedTimestamp = modifiedTimestamp;
     }
 
+    /**
+     * Two instances are considered equal if their GUID's are the same
+     * @param o BaseModel instance to compare
+     * @return {@code true} if both instances are equal, {@code false} otherwise
+     */
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
@@ -115,12 +120,12 @@ public boolean equals(Object o) {
 
         BaseModel baseModel = (BaseModel) o;
 
-        return mUID.equals(baseModel.mUID);
+        return getUID().equals(baseModel.getUID());
 
     }
 
     @Override
     public int hashCode() {
-        return mUID.hashCode();
+        return getUID().hashCode();
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Commodity.java b/app/src/main/java/org/gnucash/android/model/Commodity.java
index 154c3169..89232512 100644
--- a/app/src/main/java/org/gnucash/android/model/Commodity.java
+++ b/app/src/main/java/org/gnucash/android/model/Commodity.java
@@ -15,6 +15,8 @@
  */
 package org.gnucash.android.model;
 
+import org.gnucash.android.db.CommoditiesDbAdapter;
+
 /**
  * Commodities are the currencies used in the application.
  * At the moment only ISO4217 currencies are supported
@@ -23,6 +25,23 @@
     public enum Namespace { ISO4217 } //Namespace for commodities
 
     private Namespace mNamespace = Namespace.ISO4217;
+/*
+    public static final Commodity USD = CommoditiesDbAdapter.getInstance().getCommodity("USD");
+    public static final Commodity EUR = CommoditiesDbAdapter.getInstance().getCommodity("EUR");
+    public static final Commodity GBP = CommoditiesDbAdapter.getInstance().getCommodity("GBP");
+    public static final Commodity CHF = CommoditiesDbAdapter.getInstance().getCommodity("CHF");
+    public static final Commodity CAD = CommoditiesDbAdapter.getInstance().getCommodity("CAD");
+    public static final Commodity JPY = CommoditiesDbAdapter.getInstance().getCommodity("JPY");
+    public static final Commodity AUD = CommoditiesDbAdapter.getInstance().getCommodity("AUD");
+*/
+
+    public static final Commodity USD = new Commodity("", "USD", 100);
+    public static final Commodity EUR = new Commodity("", "EUR", 100);
+    public static final Commodity GBP = new Commodity("", "GBP", 100);
+    public static final Commodity CHF = new Commodity("", "CHF", 100);
+    public static final Commodity CAD = new Commodity("", "CAD", 100);
+    public static final Commodity JPY = new Commodity("", "JPY", 1);
+    public static final Commodity AUD = new Commodity("", "AUD", 100);
 
     /**
      * This is the currency code for ISO4217 currencies
@@ -46,6 +65,23 @@ public Commodity(String fullname, String mnemonic, int smallestFraction){
         setSmallestFraction(smallestFraction);
     }
 
+    /**
+     * Returns an instance of commodity for the specified currencyCode
+     * @param currencyCode ISO 4217 currency code (3-letter)
+     */
+    public static Commodity getInstance(String currencyCode){
+        switch (currencyCode){ //save time for database trip
+            case "USD": return USD;
+            case "EUR": return EUR;
+            case "GBP": return GBP;
+            case "CHF": return CHF;
+            case "JPY": return JPY;
+            case "AUD": return AUD;
+            case "CAD": return CAD;
+            default: return CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
+        }
+    }
+
     public Namespace getNamespace() {
         return mNamespace;
     }
@@ -62,6 +98,14 @@ public String getMnemonic() {
         return mMnemonic;
     }
 
+    /**
+     * Alias for {@link #getMnemonic()}
+     * @return ISO 4217 code for this commodity
+     */
+    public String getCurrencyCode(){
+        return getMnemonic();
+    }
+
     public void setMnemonic(String mMnemonic) {
         this.mMnemonic = mMnemonic;
     }
@@ -114,7 +158,10 @@ public int getSmallestFraction() {
 
     /**
      * Returns the (minimum) number of digits that this commodity supports in its fractional part
+     * <p>For any unsupported values for the smallest fraction, a default value of 2 is returned.
+     * Supported values for the smallest fraction are powers of 10 i.e. 1, 10, 100 etc</p>
      * @return Number of digits in fraction
+     * @see #getSmallestFraction()
      */
     public int getSmallestFractionDigits(){
         switch (mSmallestFraction) {
@@ -122,8 +169,12 @@ public int getSmallestFractionDigits(){
             case 10:    return 1;
             case 100:   return 2;
             case 1000:  return 3;
+            case 10000: return 4;
+            case 100000: return 5;
+            case 1000000: return 6;
             default:
-                throw new UnsupportedOperationException("Invalid fraction digits in commodity with fraction: " + mSmallestFraction);
+                return 2;
+                //throw new UnsupportedOperationException("Invalid fraction digits in commodity with fraction: " + mSmallestFraction);
         }
     }
 
@@ -135,7 +186,9 @@ public int getSmallestFractionDigits(){
      * @throws IllegalArgumentException if the smallest fraction is not a power of 10
      */
     public void setSmallestFraction(int smallestFraction) {
-        if (smallestFraction != 1 && smallestFraction != 10 && smallestFraction != 100 && smallestFraction != 1000 && smallestFraction != 10000) //make sure we are not getting digits
+        if (smallestFraction != 1 && smallestFraction != 10 && smallestFraction != 100
+                && smallestFraction != 1000 && smallestFraction != 10000
+                && smallestFraction != 1000000 ) //make sure we are not getting digits
             this.mSmallestFraction = 100;
         else
             this.mSmallestFraction = smallestFraction;
@@ -148,4 +201,26 @@ public int getQuoteFlag() {
     public void setQuoteFlag(int quoteFlag) {
         this.mQuoteFlag = quoteFlag;
     }
+
+    /**
+     * Overrides {@link BaseModel#equals(Object)} to compare only the currency codes of the commodity.
+     * <p>Two commodities are considered equal if they have the same currency code</p>
+     * @param o Commodity instance to compare
+     * @return {@code true} if both instances have same currency code, {@code false} otherwise
+     */
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Commodity commodity = (Commodity) o;
+
+        return mMnemonic.equals(commodity.mMnemonic);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return mMnemonic.hashCode();
+    }
 }
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index 686bc379..6e101b84 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -23,7 +23,6 @@
 import com.crashlytics.android.Crashlytics;
 
 import org.gnucash.android.app.GnuCashApplication;
-import org.gnucash.android.db.CommoditiesDbAdapter;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -50,34 +49,21 @@
  */
 public final class Money implements Comparable<Money>{
 
-	//// FIXME: 03.11.2015 Currency#getDefaultFractionDigits() is unreliable. Switch to Commodity
 	/**
 	 * Currency of the account
 	 */
-	private Currency mCurrency;
+	private Commodity mCommodity;
 
 	/**
 	 * Amount value held by this object
 	 */
 	private BigDecimal mAmount;
-	
-	/**
-	 * Default rounding mode for Money objects
-	 * Defaults to {@link RoundingMode#HALF_EVEN}
-	 */
-	private static final RoundingMode DEFAULT_ROUNDING_MODE = RoundingMode.HALF_EVEN;
-	
-	/**
-	 * Number of decimal places to limit the fractions to when performing operations
-	 * Defaults to 2 decimal places
-	 */
-	private static final int DEFAULT_DECIMAL_PLACES = 2;
-	
+
 	/**
 	 * Rounding mode to be applied when performing operations
-	 * Defaults to {@link #DEFAULT_ROUNDING_MODE}
+	 * Defaults to {@link RoundingMode#HALF_EVEN}
 	 */
-	protected RoundingMode ROUNDING_MODE = DEFAULT_ROUNDING_MODE;
+	protected RoundingMode ROUNDING_MODE = RoundingMode.HALF_EVEN;
 
 	/**
 	 * Default currency code (according ISO 4217) 
@@ -99,19 +85,11 @@
     public static Money getZeroInstance(){
 		if (sDefaultZero == null) {
 			String currencyCode = Currency.getInstance(GnuCashApplication.getDefaultLocale()).getCurrencyCode();
-			sDefaultZero = new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
+			sDefaultZero = new Money(BigDecimal.ZERO, Commodity.getInstance(currencyCode));
 		}
 		return sDefaultZero;
     }
 
-	/**
-	 * Default constructor
-	 * Initializes the object with an amount of 0 and currency set to the device default locale
-	 */
-	public Money() {
-		init();
-	}
-
 	public static BigDecimal getBigDecimal(long numerator, long denominator) {
 		int scale;
 		if (numerator == 0 && denominator == 0) {
@@ -129,23 +107,13 @@ public static BigDecimal getBigDecimal(long numerator, long denominator) {
 	}
 
 	/**
-	 * Overloaded constructor
-	 * @param amount {@link BigDecimal} value of the money instance
-	 * @param currency {@link Currency} associated with the <code>amount</code>
-	 */
-	public Money(BigDecimal amount, Currency currency){
-		this.mAmount = amount;
-		setCurrency(currency);
-	}
-
-	/**
 	 * Creates a new money amount
 	 * @param amount Value of the amount
 	 * @param commodity Commodity of the money
 	 */
 	public Money(BigDecimal amount, Commodity commodity){
 		this.mAmount = amount;
-		mCurrency = Currency.getInstance(commodity.getMnemonic());
+		this.mCommodity = commodity;
 	}
 
 	/**
@@ -155,7 +123,7 @@ public Money(BigDecimal amount, Commodity commodity){
 	 * @param currencyCode Currency code as specified by ISO 4217
 	 */
 	public Money(String amount, String currencyCode){
-		setCurrency(Currency.getInstance(currencyCode));
+		mCommodity = Commodity.getInstance(currencyCode);
 		setAmount(amount);
 	}
 
@@ -168,17 +136,7 @@ public Money(String amount, String currencyCode){
 	 */
 	public Money(long numerator, long denominator, String currencyCode){
 		mAmount = getBigDecimal(numerator, denominator);
-		setCurrency(Currency.getInstance(currencyCode));
-	}
-
-	/**
-	 * Overloaded constructor. 
-	 * Initializes the currency to that specified by {@link Money#DEFAULT_CURRENCY_CODE}
-	 * @param amount Value associated with this Money object
-	 */
-	public Money(String amount){
-		init();
-		setAmount(parseToDecimal(amount));
+		setCommodity(currencyCode);
 	}
 
     /**
@@ -187,7 +145,7 @@ public Money(String amount){
      * @param money Money instance to be cloned
      */
     public Money(Money money){
-		setCurrency(money.getCurrency());
+		setCommodity(money.getCommodity());
 		setAmount(money.asBigDecimal());
     }
 
@@ -196,46 +154,52 @@ public Money(Money money){
      * @param currencyCode Currency to use for this money instance
      * @return Money object with value 0 and currency <code>currencyCode</code>
      */
-    public static Money createZeroInstance(String currencyCode){
-        return new Money(BigDecimal.ZERO, Currency.getInstance(currencyCode));
+    public static Money createZeroInstance(@NonNull String currencyCode){
+		Commodity commodity = Commodity.getInstance(currencyCode);
+        return new Money(BigDecimal.ZERO, commodity);
     }
 
 	/**
-	 * Initializes the amount and currency to their default values
-	 * @see {@link Money#DEFAULT_CURRENCY_CODE}, {@link #DEFAULT_ROUNDING_MODE}, {@link #DEFAULT_DECIMAL_PLACES}
+	 * Returns the currency of the money object
+	 * @return {@link Currency} of the money value
 	 */
-	private void init() {
-		mCurrency = Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
-		mAmount = BigDecimal.ZERO.setScale(DEFAULT_DECIMAL_PLACES, DEFAULT_ROUNDING_MODE);
+	public Currency getCurrency() {
+		return Currency.getInstance(mCommodity.getCurrencyCode());
 	}
 
 	/**
-	 * Returns the currency of the money object
-	 * @return {@link Currency} of the money value
+	 * Returns the commodity used by the Money
+	 * @return Instance of commodity
 	 */
-	public Currency getCurrency() {
-		return mCurrency;
+	public Commodity getCommodity(){
+		return mCommodity;
 	}
 
 	/**
 	 * Returns a new <code>Money</code> object the currency specified by <code>currency</code> 
 	 * and the same value as this one. No value exchange between the currencies is performed.
-	 * @param currency {@link Currency} to assign to new <code>Money</code> object
+	 * @param commodity {@link Commodity} to assign to new <code>Money</code> object
 	 * @return {@link Money} object with same value as current object, but with new <code>currency</code>
 	 */
-    public Money withCurrency(Currency currency){
-		return new Money(mAmount, currency);
+    public Money withCurrency(@NonNull Commodity commodity){
+		return new Money(mAmount, commodity);
 	}
-	
+
 	/**
-	 * Sets the currency of the money object.
-	 * No currency value conversion is performed. The old value for the amount is not changed
-	 * This method is only used internally when creating the Money object. 
-	 * Money objects are immutable and hence this method should not be called out of a constructor
-	 * @param currency {@link Currency} to assign to the Money object  
+	 * Sets the commodity for the Money
+	 * <p>No currency conversion is performed</p>
+	 * @param commodity Commodity instance
 	 */
-	private void setCurrency(Currency currency) {
-		this.mCurrency = currency;
+	private void setCommodity(@NonNull Commodity commodity){
+		this.mCommodity = commodity;
+	}
+
+	/**
+	 * Sets the commodity for the Money
+	 * @param currencyCode ISO 4217 currency code
+	 */
+	private void setCommodity(@NonNull String currencyCode){
+		mCommodity = Commodity.getInstance(currencyCode);
 	}
 
 	/**
@@ -247,7 +211,7 @@ public long getNumerator() {
 		try {
 			return mAmount.scaleByPowerOfTen(getScale()).longValueExact();
 		} catch (ArithmeticException e) {
-			Log.e(getClass().getName(), "Currency " + mCurrency.getCurrencyCode() +
+			Log.e(getClass().getName(), "Currency " + mCommodity.getCurrencyCode() +
 					" with scale " + getScale() +
 					" has amount " + mAmount.toString());
 			throw e;
@@ -281,8 +245,7 @@ public long getDenominator() {
 	 * @return Scale of amount as integer
 	 */
 	private int getScale() {
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-		int scale = commodity.getSmallestFractionDigits();
+		int scale = mCommodity.getSmallestFractionDigits();
 		if (scale < 0) {
 			scale = mAmount.scale();
 		}
@@ -309,16 +272,6 @@ public double asDouble(){
 	}
 
 	/**
-	 * Returns integer value of this Money amount.
-	 * The fractional part is discarded
-	 * @return Integer representation of this amount
-	 * @see BigDecimal#intValue()
-	 */
-	public int intValue(){
-		return mAmount.intValue();
-	}
-
-	/**
 	 * An alias for {@link #toPlainString()}
 	 * @return Money formatted as a string (excludes the currency)
 	 */
@@ -334,11 +287,28 @@ public String asString(){
 	 * @return String containing formatted Money representation
 	 */
     public String formattedString(Locale locale){
+		NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(locale);
+		Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
+		currencyFormat.setCurrency(currency);
+
+		String symbol;
+		if (mCommodity.getCurrencyCode().equalsIgnoreCase("USD") && !locale.equals(Locale.US)) {
+			symbol = "US$";
+		} else {
+			symbol = currency.getSymbol(Locale.US); // US locale has the best symbol formatting table.
+		}
+		DecimalFormatSymbols decimalFormatSymbols = ((DecimalFormat)currencyFormat).getDecimalFormatSymbols();
+		decimalFormatSymbols.setCurrencySymbol(symbol);
+		((DecimalFormat)currencyFormat).setDecimalFormatSymbols(decimalFormatSymbols);
+
+		return currencyFormat.format(asDouble());
+/*
 		NumberFormat formatter = NumberFormat.getInstance(locale);
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-		formatter.setMinimumFractionDigits(commodity.getSmallestFractionDigits());
-		formatter.setMaximumFractionDigits(commodity.getSmallestFractionDigits());
-		return formatter.format(asDouble()) + " " + mCurrency.getSymbol(locale);
+		formatter.setMinimumFractionDigits(mCommodity.getSmallestFractionDigits());
+		formatter.setMaximumFractionDigits(mCommodity.getSmallestFractionDigits());
+		Currency currency = Currency.getInstance(mCommodity.getCurrencyCode());
+		return formatter.format(asDouble()) + " " + currency.getSymbol(locale);
+*/
 	}
 
     /**
@@ -355,16 +325,15 @@ public String formattedString(){
 	 * @return Negated <code>Money</code> object
 	 */
     public Money negate(){
-		return new Money(mAmount.negate(), mCurrency);
+		return new Money(mAmount.negate(), mCommodity);
 	}
 	
 	/**
 	 * Sets the amount value of this <code>Money</code> object
 	 * @param amount {@link BigDecimal} amount to be set
 	 */
-	private void setAmount(BigDecimal amount) {
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(mCurrency.getCurrencyCode());
-		mAmount = amount.setScale(commodity.getSmallestFractionDigits(), ROUNDING_MODE);
+	private void setAmount(@NonNull BigDecimal amount) {
+		mAmount = amount.setScale(mCommodity.getSmallestFractionDigits(), ROUNDING_MODE);
 	}
 	
 	/**
@@ -385,11 +354,11 @@ private void setAmount(String amount){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money add(Money addend){
-		if (!mCurrency.equals(addend.mCurrency))
+		if (!mCommodity.equals(addend.mCommodity))
 			throw new IllegalArgumentException("Only Money with same currency can be added");
 		
 		BigDecimal bigD = mAmount.add(addend.mAmount);
-		return new Money(bigD, mCurrency);
+		return new Money(bigD, mCommodity);
 	}
 
 	/**
@@ -401,11 +370,11 @@ public Money add(Money addend){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money subtract(Money subtrahend){
-		if (!mCurrency.equals(subtrahend.mCurrency))
+		if (!mCommodity.equals(subtrahend.mCommodity))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
 		BigDecimal bigD = mAmount.subtract(subtrahend.mAmount);		
-		return new Money(bigD, mCurrency);
+		return new Money(bigD, mCommodity);
 	}
 	
 	/**
@@ -417,11 +386,11 @@ public Money subtract(Money subtrahend){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money divide(Money divisor){
-		if (!mCurrency.equals(divisor.mCurrency))
+		if (!mCommodity.equals(divisor.mCommodity))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
-		BigDecimal bigD = mAmount.divide(divisor.mAmount);		
-		return new Money(bigD, mCurrency);
+		BigDecimal bigD = mAmount.divide(divisor.mAmount, mCommodity.getSmallestFractionDigits(), ROUNDING_MODE);
+		return new Money(bigD, mCommodity);
 	}
 	
 	/**
@@ -431,7 +400,7 @@ public Money divide(Money divisor){
 	 * @return Money object whose value is the quotient of this object and <code>divisor</code>
 	 */
     public Money divide(int divisor){
-		Money moneyDiv = new Money(new BigDecimal(divisor), mCurrency);
+		Money moneyDiv = new Money(new BigDecimal(divisor), mCommodity);
 		return divide(moneyDiv);
 	}
 	
@@ -444,11 +413,11 @@ public Money divide(int divisor){
 	 * @throws IllegalArgumentException if the <code>Money</code> objects to be added have different Currencies
 	 */
     public Money multiply(Money money){
-		if (!mCurrency.equals(money.mCurrency))
+		if (!mCommodity.equals(money.mCommodity))
 			throw new IllegalArgumentException("Operation can only be performed on money with same currency");
 		
 		BigDecimal bigD = mAmount.multiply(money.mAmount);		
-		return new Money(bigD, mCurrency);
+		return new Money(bigD, mCommodity);
 	}
 	
 	/**
@@ -459,7 +428,7 @@ public Money multiply(Money money){
 	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
 	 */
     public Money multiply(int multiplier){
-		Money moneyFactor = new Money(new BigDecimal(multiplier), mCurrency);
+		Money moneyFactor = new Money(new BigDecimal(multiplier), mCommodity);
 		return multiply(moneyFactor);
 	}
 
@@ -469,8 +438,8 @@ public Money multiply(int multiplier){
 	 * @param multiplier Factor to multiply the amount by.
 	 * @return Money object whose value is the product of this objects values and <code>multiplier</code>
 	 */
-	public Money multiply(BigDecimal multiplier){
-		return new Money(mAmount.multiply(multiplier), mCurrency);
+	public Money multiply(@NonNull BigDecimal multiplier){
+		return new Money(mAmount.multiply(multiplier), mCommodity);
 	}
 
 	/**
@@ -487,8 +456,7 @@ public boolean isNegative(){
 	 * @return String representation of the amount (without currency) of the Money object
 	 */
 	public String toPlainString(){
-		Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(getCurrency().getCurrencyCode());
-		return mAmount.setScale(commodity.getSmallestFractionDigits(), ROUNDING_MODE).toPlainString();
+		return mAmount.setScale(mCommodity.getSmallestFractionDigits(), ROUNDING_MODE).toPlainString();
 	}
 
 	/**
@@ -506,7 +474,7 @@ public int hashCode() {
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + (mAmount.hashCode());
-		result = prime * result + (mCurrency.hashCode());
+		result = prime * result + (mCommodity.hashCode());
 		return result;
 	}
 
@@ -526,14 +494,14 @@ public boolean equals(Object obj) {
 		Money other = (Money) obj;
 		if (!mAmount.equals(other.mAmount))
 			return false;
-		if (!mCurrency.equals(other.mCurrency))
+		if (!mCommodity.equals(other.mCommodity))
 			return false;
 		return true;
 	}
 
 	@Override
 	public int compareTo(@NonNull Money another) {
-		if (!mCurrency.equals(another.mCurrency))
+		if (!mCommodity.equals(another.mCommodity))
 			throw new IllegalArgumentException("Cannot compare different currencies yet");
 		return mAmount.compareTo(another.mAmount);
 	}
@@ -564,7 +532,7 @@ public static BigDecimal parseToDecimal(String amountString){
      * @return Money object with absolute value of this instance
      */
     public Money absolute() {
-        return new Money(mAmount.abs(), mCurrency);
+        return new Money(mAmount.abs(), mCommodity);
     }
 
 	/**
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
index b3147599..469b0a99 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
@@ -77,7 +77,7 @@ public void onReceive(Context context, Intent intent) {
             BigDecimal amountBigDecimal = (BigDecimal) args.getSerializable(Transaction.EXTRA_AMOUNT);
             Commodity commodity = CommoditiesDbAdapter.getInstance().getCommodity(currencyCode);
             amountBigDecimal = amountBigDecimal.setScale(commodity.getSmallestFractionDigits(), BigDecimal.ROUND_HALF_EVEN).round(MathContext.DECIMAL128);
-            Money amount = new Money(amountBigDecimal, Currency.getInstance(currencyCode));
+            Money amount = new Money(amountBigDecimal, Commodity.getInstance(currencyCode));
             Split split = new Split(amount.absolute(), accountUID);
             split.setType(type);
             transaction.addSplit(split);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
index 0d2afb91..f4500c7f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/SplitEditorFragment.java
@@ -44,6 +44,7 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.BaseModel;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -133,8 +134,8 @@ public void onActivityCreated(Bundle savedInstanceState) {
             //aha! there are some splits. Let's load those instead
             loadSplitViews(splitList);
         } else {
-            final Currency currency = Currency.getInstance(mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID));
-            Split split = new Split(new Money(mBaseAmount.abs(), currency), mAccountUID);
+            final String currencyCode = mAccountsDbAdapter.getAccountCurrencyCode(mAccountUID);
+            Split split = new Split(new Money(mBaseAmount.abs(), Commodity.getInstance(currencyCode)), mAccountUID);
             AccountType accountType = mAccountsDbAdapter.getAccountType(mAccountUID);
             TransactionType transactionType = Transaction.getTypeForBalance(accountType, mBaseAmount.signum() < 0);
             split.setType(transactionType);
@@ -354,7 +355,7 @@ private void saveSplits() {
             BigDecimal amountBigDecimal = viewHolder.splitAmountEditText.getValue();
 
             String currencyCode = mAccountsDbAdapter.getCurrencyCode(mAccountUID);
-            Money valueAmount = new Money(amountBigDecimal.abs(), Currency.getInstance(currencyCode));
+            Money valueAmount = new Money(amountBigDecimal.abs(), Commodity.getInstance(currencyCode));
 
             String accountUID = mAccountsDbAdapter.getUID(viewHolder.accountsSpinner.getSelectedItemId());
             Split split = new Split(valueAmount, accountUID);
@@ -404,7 +405,7 @@ public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int
             if (amountBigD == null)
                 return;
 
-            Money amount = new Money(amountBigD, Currency.getInstance(fromCurrencyCode));
+            Money amount = new Money(amountBigD, Commodity.getInstance(fromCurrencyCode));
             TransferFundsDialogFragment fragment
                     = TransferFundsDialogFragment.getInstance(amount, targetCurrencyCode, mSplitViewHolder);
             fragment.show(getFragmentManager(), "tranfer_funds_editor");
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 025d305b..77d5222b 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -62,6 +62,7 @@
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
@@ -269,9 +270,9 @@ private void startTransferFunds() {
             return;
 
         BigDecimal amountBigd = mAmountEditText.getValue();
-        if (mSplitQuantity != null || amountBigd.equals(BigDecimal.ZERO))
+        if (amountBigd.equals(BigDecimal.ZERO))
             return;
-        Money amount 	= new Money(amountBigd, fromCurrency).absolute();
+        Money amount 	= new Money(amountBigd, Commodity.getInstance(fromCurrency.getCurrencyCode())).absolute();
 
         TransferFundsDialogFragment fragment
                 = TransferFundsDialogFragment.getInstance(amount, targetCurrency, this);
@@ -724,7 +725,7 @@ private void saveNewTransaction() {
 		BigDecimal amountBigd = mAmountEditText.getValue();
 
 		Currency currency = Currency.getInstance(mTransactionsDbAdapter.getAccountCurrencyCode(mAccountUID));
-		Money amount 	= new Money(amountBigd, currency).absolute();
+		Money amount 	= new Money(amountBigd, Commodity.getInstance(currency.getCurrencyCode())).absolute();
 
         if (mSplitsList.size() == 1){ //means split editor was opened but no split was added
             String transferAcctUID;
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index 9166d21e..20b28c6f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -205,7 +205,7 @@ private void transferFunds(){
             }
 
             BigDecimal amount = TransactionFormFragment.parseInputToDecimal(convertedAmount);
-            mConvertedAmount = new Money(amount, mTargetCurrency);
+            mConvertedAmount = new Money(amount, Commodity.getInstance(mTargetCurrency.getCurrencyCode()));
         }
 
         if (mOnTransferFundsListener != null) {
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
index 5baf5fb4..ba5bb710 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/AccountsDbAdapterTest.java
@@ -11,6 +11,7 @@
 import org.gnucash.android.importer.GncXmlImporter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
@@ -261,7 +262,7 @@ public void shouldComputeAccountBalanceCorrectly(){
 
         Transaction transaction = new Transaction("Test description");
         mTransactionsDbAdapter.addRecord(transaction);
-        Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("USD")), account.getUID());
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("USD")), account.getUID());
         split.setTransactionUID(transaction.getUID());
         split.setType(TransactionType.DEBIT);
         mSplitsDbAdapter.addRecord(split);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
index de8fefc6..6b5432c7 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/db/TransactionsDbAdapterTest.java
@@ -6,6 +6,7 @@
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -30,7 +31,7 @@
 public class TransactionsDbAdapterTest {
 	private static final String ALPHA_ACCOUNT_NAME  = "Alpha";
 	private static final String BRAVO_ACCOUNT_NAME  = "Bravo";
-	private static final Currency DEFAULT_CURRENCY	= Currency.getInstance(Money.DEFAULT_CURRENCY_CODE);
+	private static final Commodity DEFAULT_CURRENCY	= Commodity.getInstance(Money.DEFAULT_CURRENCY_CODE);
 
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
@@ -65,7 +66,7 @@ public void testTransactionsAreTimeSorted(){
 
 		Transaction t2 = new Transaction( "T1000");
 		t2.setTime(System.currentTimeMillis());
-		Split split2 = new Split(new Money("23.50"), bravoAccount.getUID());
+		Split split2 = new Split(new Money("23.50", DEFAULT_CURRENCY.getCurrencyCode()), bravoAccount.getUID());
 		t2.addSplit(split2);
 		t2.addSplit(split2.createPair(alphaAccount.getUID()));
 
@@ -93,7 +94,7 @@ public void deletingTransactionsShouldDeleteSplits(){
 	@Test
 	public void shouldBalanceTransactionsOnSave(){
 		Transaction transaction = new Transaction("Auto balance");
-		Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance(Money.DEFAULT_CURRENCY_CODE)),
+		Split split = new Split(new Money(BigDecimal.TEN, DEFAULT_CURRENCY),
 				alphaAccount.getUID());
 
 		transaction.addSplit(split);
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
index 1cf406d8..6fca5b03 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/MoneyTest.java
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.gnucash.android.BuildConfig;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.test.unit.util.GnucashTestRunner;
 import org.gnucash.android.test.unit.util.ShadowCrashlytics;
@@ -45,7 +46,7 @@
 
 	@Before
 	public void setUp() throws Exception {
-		mMoneyInEur = new Money(new BigDecimal(amountString), Currency.getInstance(CURRENCY_CODE));
+		mMoneyInEur = new Money(new BigDecimal(amountString), Commodity.getInstance(CURRENCY_CODE));
 		mHashcode = mMoneyInEur.hashCode();
 	}
 
@@ -54,20 +55,19 @@ public void testCreation(){
 		Locale.setDefault(Locale.US);
 		String amount = "12.25";		
 		
-		Money temp = new Money(amount);
+		Money temp = new Money(amount, CURRENCY_CODE);
 		assertThat("12.25").isEqualTo(temp.toPlainString());
-		assertThat(Money.DEFAULT_CURRENCY_CODE).isEqualTo(temp.getCurrency().getCurrencyCode());
 
-		Currency currency = Currency.getInstance(CURRENCY_CODE);
-		temp = new Money(BigDecimal.TEN, currency);
+		Commodity commodity = Commodity.getInstance(CURRENCY_CODE);
+		temp = new Money(BigDecimal.TEN, commodity);
 		
 		assertEquals("10", temp.asBigDecimal().toPlainString());
-		assertEquals(currency, temp.getCurrency());
+		assertEquals(commodity, temp.getCommodity());
 
 		//test only Locale.US parsing even under different locale
 		Locale.setDefault(Locale.GERMANY);
 		amount = "12,25";
-		temp = new Money(amount);
+		temp = new Money(amount, CURRENCY_CODE);
 		assertEquals("1225.00", temp.toPlainString());
 	}
 
@@ -101,7 +101,7 @@ public void testSubtractionWithDifferentCurrency(){
 
 	@Test
 	public void testMultiplication(){
-		Money result = mMoneyInEur.multiply(new Money(BigDecimal.TEN, Currency.getInstance(CURRENCY_CODE)));
+		Money result = mMoneyInEur.multiply(new Money(BigDecimal.TEN, Commodity.getInstance(CURRENCY_CODE)));
 		assertThat("157.50").isEqualTo(result.toPlainString());
 		assertThat(result).isNotEqualTo(mMoneyInEur);
 		validateImmutability();
@@ -146,7 +146,7 @@ public void testPrinting(){
 		assertEquals("15.75 " + symbolUS, mMoneyInEur.formattedString(Locale.US));
 		
 		//always prints with 2 decimal places only
-		Money some = new Money("9.7469");
+		Money some = new Money("9.7469", CURRENCY_CODE);
 		assertEquals("9.75", some.asString());
 	}
 
diff --git a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
index c6b88efa..35a0af48 100644
--- a/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
+++ b/app/src/test/java/org/gnucash/android/test/unit/model/SplitTest.java
@@ -1,6 +1,7 @@
 package org.gnucash.android.test.unit.model;
 
 import org.gnucash.android.BuildConfig;
+import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -40,7 +41,7 @@ public void testAddingSplitToTransaction(){
 
     @Test
     public void testCloning(){
-        Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("EUR")), "random-account");
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("EUR")), "random-account");
         split.setTransactionUID("terminator-trx");
         split.setType(TransactionType.CREDIT);
 
@@ -57,7 +58,7 @@ public void testCloning(){
      */
     @Test
     public void shouldCreateInversePair(){
-        Split split = new Split(new Money("2"), "dummy");
+        Split split = new Split(new Money("2", "USD"), "dummy");
         split.setType(TransactionType.CREDIT);
         split.setTransactionUID("random-trx");
         Split pair = split.createPair("test");
@@ -70,7 +71,7 @@ public void shouldCreateInversePair(){
 
     @Test
     public void shouldGenerateValidCsv(){
-        Split split = new Split(new Money(BigDecimal.TEN, Currency.getInstance("EUR")), "random-account");
+        Split split = new Split(new Money(BigDecimal.TEN, Commodity.getInstance("EUR")), "random-account");
         split.setTransactionUID("terminator-trx");
         split.setType(TransactionType.CREDIT);
 
