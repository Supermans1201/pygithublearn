From ed192dc011d09b5717a98f21a755b9343b27b419 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 13 Sep 2015 23:17:56 +0800
Subject: [PATCH] import price table

---
 .../gnucash/android/export/xml/GncXmlHelper.java   |  9 +++
 .../gnucash/android/importer/GncXmlHandler.java    | 89 +++++++++++++++++++++-
 .../gnucash/android/importer/ImportAsyncTask.java  |  1 +
 .../main/java/org/gnucash/android/model/Money.java | 27 ++++++-
 4 files changed, 122 insertions(+), 4 deletions(-)

diff --git a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
index 1060fa77..65a42795 100644
--- a/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
+++ b/app/src/main/java/org/gnucash/android/export/xml/GncXmlHelper.java
@@ -94,6 +94,15 @@
     public static final String TAG_SPLIT_QUANTITY   = "split:quantity";
     public static final String TAG_SPLIT_SLOTS      = "split:slots";
 
+    public static final String TAG_PRICE = "price";
+    public static final String TAG_PRICE_ID = "price:id";
+    public static final String TAG_PRICE_COMMODITY = "price:commodity";
+    public static final String TAG_PRICE_CURRENCY = "price:currency";
+    public static final String TAG_PRICE_TIME = "price:time";
+    public static final String TAG_PRICE_SOURCE = "price:source";
+    public static final String TAG_PRICE_TYPE = "price:type";
+    public static final String TAG_PRICE_VALUE = "price:value";
+
     @Deprecated
     public static final String TAG_RECURRENCE_PERIOD = "trn:recurrence_period";
 
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 98bed369..9a4bffb6 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -24,6 +24,8 @@
 import com.crashlytics.android.Crashlytics;
 
 import org.gnucash.android.db.AccountsDbAdapter;
+import org.gnucash.android.db.CommoditiesDbAdapter;
+import org.gnucash.android.db.PricesDbAdapter;
 import org.gnucash.android.db.ScheduledActionDbAdapter;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
@@ -32,6 +34,7 @@
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.PeriodType;
+import org.gnucash.android.model.Price;
 import org.gnucash.android.model.ScheduledAction;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
@@ -142,6 +145,16 @@
     BigDecimal mValue;
 
     /**
+     * price table entry
+     */
+    Price mPrice;
+
+    boolean mPriceCommodity;
+    boolean mPriceCurrency;
+
+    List<Price> mPriceList;
+
+    /**
      * Whether the quantity is negative
      */
     boolean mNegativeQuantity;
@@ -213,6 +226,10 @@
 
     private ScheduledActionDbAdapter mScheduledActionsDbAdapter;
 
+    private CommoditiesDbAdapter mCommoditiesDbAdapter;
+
+    private PricesDbAdapter mPricesDbAdapter;
+
     /**
      * Creates a handler for handling XML stream events when parsing the XML backup file
      */
@@ -234,10 +251,14 @@ private void init(@Nullable SQLiteDatabase db) {
             mAccountsDbAdapter = AccountsDbAdapter.getInstance();
             mTransactionsDbAdapter = TransactionsDbAdapter.getInstance();
             mScheduledActionsDbAdapter = ScheduledActionDbAdapter.getInstance();
+            mCommoditiesDbAdapter = CommoditiesDbAdapter.getInstance();
+            mPricesDbAdapter = PricesDbAdapter.getInstance();
         } else {
             mTransactionsDbAdapter = new TransactionsDbAdapter(db, new SplitsDbAdapter(db));
             mAccountsDbAdapter = new AccountsDbAdapter(db, mTransactionsDbAdapter);
             mScheduledActionsDbAdapter = new ScheduledActionDbAdapter(db);
+            mCommoditiesDbAdapter = new CommoditiesDbAdapter(db);
+            mPricesDbAdapter = new PricesDbAdapter(db);
         }
 
         mContent = new StringBuilder();
@@ -252,6 +273,8 @@ private void init(@Nullable SQLiteDatabase db) {
         mTemplateAccountToTransactionMap = new HashMap<>();
 
         mAutoBalanceSplits = new ArrayList<>();
+
+        mPriceList = new ArrayList<>();
     }
 
     @Override
@@ -295,6 +318,19 @@ public void startElement(String uri, String localName,
             case GncXmlHelper.TAG_RX_START:
                 mIsRecurrenceStart = true;
                 break;
+            case GncXmlHelper.TAG_PRICE:
+                mPrice = new Price();
+                break;
+            case GncXmlHelper.TAG_PRICE_CURRENCY:
+                mPriceCurrency = true;
+                mPriceCommodity = false;
+                mISO4217Currency = false;
+                break;
+            case GncXmlHelper.TAG_PRICE_COMMODITY:
+                mPriceCurrency = false;
+                mPriceCommodity = true;
+                mISO4217Currency = false;
+                break;
         }
     }
 
@@ -327,6 +363,9 @@ public void endElement(String uri, String localName, String qualifiedName) throw
             case GncXmlHelper.TAG_COMMODITY_SPACE:
                 if (characterString.equals("ISO4217")) {
                     mISO4217Currency = true;
+                } else {
+                    // price of non-ISO4217 commodities cannot be handled
+                    mPrice = null;
                 }
                 break;
             case GncXmlHelper.TAG_COMMODITY_ID:
@@ -337,6 +376,16 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 if (mTransaction != null) {
                     mTransaction.setCurrencyCode(currencyCode);
                 }
+                if (mPrice != null) {
+                    if (mPriceCommodity) {
+                        mPrice.setCommodityUID(mCommoditiesDbAdapter.getCommodityUID(currencyCode));
+                        mPriceCommodity = false;
+                    }
+                    if (mPriceCurrency) {
+                        mPrice.setCurrencyUID(mCommoditiesDbAdapter.getCommodityUID(currencyCode));
+                        mPriceCurrency = false;
+                    }
+                }
                 break;
             case GncXmlHelper.TAG_PARENT_UID:
                 mAccount.setParentUID(characterString);
@@ -457,6 +506,9 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                         mTransaction.setCreatedTimestamp(timestamp);
                         mIsDateEntered = false;
                     }
+                    if (mPrice != null) {
+                        mPrice.setDate(new Timestamp(GncXmlHelper.parseDate(characterString)));
+                    }
                 } catch (ParseException e) {
                     Crashlytics.logException(e);
                     String message = "Unable to parse transaction time - " + characterString;
@@ -628,6 +680,38 @@ public void endElement(String uri, String localName, String qualifiedName) throw
                 mRecurrenceMultiplier = 1; //reset it, even though it will be parsed from XML each time
                 mIgnoreScheduledAction = false;
                 break;
+            // price table
+            case GncXmlHelper.TAG_PRICE_ID:
+                mPrice.setUID(characterString);
+                break;
+            case GncXmlHelper.TAG_PRICE_SOURCE:
+                if (mPrice != null) {
+                    mPrice.setSource(characterString);
+                }
+                break;
+            case GncXmlHelper.TAG_PRICE_VALUE:
+                if (mPrice != null) {
+                    String[] parts = characterString.split("/");
+                    if (parts.length != 2) {
+                        String message = "Illegal price - " + characterString;
+                        Log.e(LOG_TAG, message);
+                        Crashlytics.log(message);
+                        throw new SAXException(message);
+                    } else {
+                        mPrice.setValueNum(Integer.valueOf(parts[0]));
+                        mPrice.setValueDenom(Integer.valueOf(parts[1]));
+                    }
+                }
+                break;
+            case GncXmlHelper.TAG_PRICE_TYPE:
+                if (mPrice != null) {
+                    mPrice.setType(characterString);
+                }
+            case GncXmlHelper.TAG_PRICE:
+                if (mPrice != null) {
+                    mPriceList.add(mPrice);
+                    mPrice = null;
+                }
         }
 
         //reset the accumulated characters
@@ -743,8 +827,11 @@ public void endDocument() throws SAXException {
             long nTransactions = mTransactionsDbAdapter.bulkAddRecords(mTransactionList);
             Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
 
+            long nPrices = mPricesDbAdapter.bulkAddRecords(mPriceList);
+            Log.d(getClass().getSimpleName(), String.format("%d prices inserted", nPrices));
+
             long endTime = System.nanoTime();
-            Log.d("Handler:", String.format(" bulk insert time: %d", endTime - startTime));
+            Log.d(getClass().getSimpleName(), String.format("bulk insert time: %d", endTime - startTime));
 
             mAccountsDbAdapter.setTransactionSuccessful();
         } finally {
diff --git a/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java b/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
index 55c6f138..a0232003 100644
--- a/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/importer/ImportAsyncTask.java
@@ -73,6 +73,7 @@ protected Boolean doInBackground(InputStream... inputStreams) {
         } catch (Exception exception){
             Log.e(ImportAsyncTask.class.getName(), "" + exception.getMessage());
             Crashlytics.logException(exception);
+            exception.printStackTrace();
 
             final String err_msg = exception.getLocalizedMessage();
             context.runOnUiThread(new Runnable() {
diff --git a/app/src/main/java/org/gnucash/android/model/Money.java b/app/src/main/java/org/gnucash/android/model/Money.java
index a7664239..9a4f8946 100644
--- a/app/src/main/java/org/gnucash/android/model/Money.java
+++ b/app/src/main/java/org/gnucash/android/model/Money.java
@@ -18,6 +18,7 @@
 
 
 import android.support.annotation.NonNull;
+import android.util.Log;
 
 import com.crashlytics.android.Crashlytics;
 
@@ -253,7 +254,14 @@ private void setCurrency(Currency currency) {
 	 * @return GnuCash numerator for this amount
 	 */
 	public int getNumerator() {
-		return mAmount.scaleByPowerOfTen(mCurrency.getDefaultFractionDigits()).intValueExact();
+		try {
+			return mAmount.scaleByPowerOfTen(getScale()).intValueExact();
+		} catch (ArithmeticException e) {
+			Log.e(getClass().getName(), "Currency " + mCurrency.getCurrencyCode() +
+					" with scale " + getScale() +
+					" has amount " + mAmount.toString());
+			throw e;
+		}
 	}
 
 	/**
@@ -262,7 +270,7 @@ public int getNumerator() {
 	 * @return GnuCash format denominator
 	 */
 	public int getDenominator() {
-		switch (mCurrency.getDefaultFractionDigits()) {
+		switch (getScale()) {
 			case 0:
 				return 1;
 			case 1:
@@ -271,8 +279,21 @@ public int getDenominator() {
 				return 100;
 			case 3:
 				return 1000;
+			case 4:
+				return 10000;
+		}
+		throw new RuntimeException("Unsupported number of fraction digits " + getScale());
+	}
+
+	private int getScale() {
+		int scale = mCurrency.getDefaultFractionDigits();
+		if (scale < 0) {
+			scale = mAmount.scale();
+		}
+		if (scale < 0) {
+			scale = 0;
 		}
-		throw new RuntimeException("Unsupported number of fraction digits");
+		return scale;
 	}
 
 	/**
