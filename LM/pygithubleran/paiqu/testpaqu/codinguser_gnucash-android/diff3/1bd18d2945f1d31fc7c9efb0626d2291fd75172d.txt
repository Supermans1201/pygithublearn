From 1bd18d2945f1d31fc7c9efb0626d2291fd75172d Mon Sep 17 00:00:00 2001
From: Ngewi Fet <ngewif@gmail.com>
Date: Wed, 20 May 2015 18:14:57 +0200
Subject: [PATCH] Finished migrating all test to espresso framework

Removed Robotium dependency
---
 app/build.gradle                                   |  27 +-
 .../android/test/ui/AccountsActivityTest.java      | 241 +++++-----
 .../android/test/ui/ExportTransactionsTest.java    |   2 +-
 .../android/test/ui/GnucashAndroidTestRunner.java  |   6 +-
 .../android/test/ui/TransactionsActivityTest.java  | 499 +++++++++------------
 app/src/debug/AndroidManifest.xml                  |   7 +-
 .../android/ui/account/AccountFormFragment.java    |   4 +-
 .../ui/transaction/TransactionsListFragment.java   |   7 +-
 app/src/main/res/layout/fragment_accounts_list.xml |   1 +
 app/src/main/res/layout/fragment_new_account.xml   |   6 +-
 .../main/res/layout/fragment_new_transaction.xml   |   2 +-
 .../main/res/layout/fragment_transactions_list.xml |   1 +
 app/src/main/res/layout/list_item_transaction.xml  |   2 +-
 13 files changed, 374 insertions(+), 431 deletions(-)

diff --git a/app/build.gradle b/app/build.gradle
index 5e3cb2ae..d4dec1f4 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -125,14 +125,26 @@ android {
     }
 }
 
+def adb = android.getAdbExe().toString()
 
-task grantAnimationPermission(type: Exec, dependsOn: ['installDevelopmentDebug', 'installBetaDebug', 'installProductionDebug']) { // or install{productFlavour}{buildType}
-    // commandLine "adb shell pm grant $android.defaultConfig.packageName android.permission.SET_ANIMATION_SCALE".split(' ')
-    commandLine "adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
-}
-tasks.whenTaskAdded { task ->
-    if (task.name.startsWith('connectedAndroidTest')) {
-        task.dependsOn grantAnimationPermission
+afterEvaluate {
+    task grantAnimationPermissionDevel(type: Exec, dependsOn: 'installDevelopmentDebug') { // or install{productFlavour}{buildType}
+        commandLine "$adb shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+    }
+
+    task grantAnimationPermissionProduction(type: Exec, dependsOn: ['installBetaDebug', 'installProductionDebug']){
+        commandLine "$adb shell pm grant $android.productFlavors.production.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
+    }
+    // When launching individual tests from Android Studio, it seems that only the assemble tasks
+    // get called directly, not the install* versions
+    tasks.each { task ->
+        if (task.name.startsWith('assembleDevelopmentDebugAndroidTest')){
+            task.dependsOn grantAnimationPermissionDevel
+        } else if (task.name.startsWith('assembleBetaDebugAndroidTest')){
+            task.dependsOn grantAnimationPermissionProduction
+        } else if (task.name.startsWith('assembleProductionDebugAndroidTest')){
+            task.dependsOn grantAnimationPermissionProduction
+        }
     }
 }
 
@@ -154,7 +166,6 @@ dependencies {
             'junit:junit:4.12',
             'org.assertj:assertj-core:1.7.1'
     )
-    androidTestCompile('com.jayway.android.robotium:robotium-solo:5.3.1')
     androidTestCompile 'com.android.support.test:runner:0.2'
     androidTestCompile 'com.android.support.test:rules:0.2'
     androidTestCompile('com.squareup.assertj:assertj-android:1.0.0'){
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 5d1afcee..605afa80 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -22,13 +22,11 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
 import android.support.v4.app.Fragment;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-import android.view.View;
-import android.widget.EditText;
-
-import com.robotium.solo.Solo;
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
@@ -39,35 +37,56 @@
 import org.gnucash.android.model.Money;
 import org.gnucash.android.model.Split;
 import org.gnucash.android.model.Transaction;
+import org.gnucash.android.receivers.AccountCreator;
 import org.gnucash.android.ui.account.AccountsActivity;
 import org.gnucash.android.ui.account.AccountsListFragment;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.util.Currency;
 import java.util.List;
 
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.longClick;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isNotChecked;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.android.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.not;
 
+@RunWith(AndroidJUnit4.class)
 public class AccountsActivityTest extends ActivityInstrumentationTestCase2<AccountsActivity> {
 	private static final String DUMMY_ACCOUNT_CURRENCY_CODE = "USD";
 	private static final String DUMMY_ACCOUNT_NAME = "Dummy account";
     public static final String  DUMMY_ACCOUNT_UID   = "dummy-account";
-	private Solo mSolo;
     private DatabaseHelper mDbHelper;
     private SQLiteDatabase mDb;
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
+    private AccountsActivity mAcccountsActivity;
 
     public AccountsActivityTest() {
 		super(AccountsActivity.class);
 	}
 
-	protected void setUp() throws Exception {
-		Context context = getInstrumentation().getTargetContext();
-        preventFirstRunDialogs(context);
+    @Before
+	public void setUp() throws Exception {
+        super.setUp();
+        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+        preventFirstRunDialogs(getInstrumentation().getTargetContext());
+        mAcccountsActivity = getActivity();
 
-        mDbHelper = new DatabaseHelper(context);
+        mDbHelper = new DatabaseHelper(mAcccountsActivity);
         try {
             mDb = mDbHelper.getWritableDatabase();
         } catch (SQLException e) {
@@ -77,15 +96,18 @@ protected void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
-
-		mSolo = new Solo(getInstrumentation(), getActivity());
 		
 		Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
 		account.setCurrency(Currency.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
 		mAccountsDbAdapter.addAccount(account);
+        refreshAccountsList();
 	}
 
+    /**
+     * Prevents the first-run dialogs (Whats new, Create accounts etc) from being displayed when testing
+     * @param context Application context
+     */
     public static void preventFirstRunDialogs(Context context) {
         Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
 
@@ -118,6 +140,7 @@ public void testDisplayAccountsList(){
             assertEquals(NUMBER_OF_ACCOUNTS + 1, accountsListView.getCount());
         }
     */
+    @Test
     public void testSearchAccounts(){
         String SEARCH_ACCOUNT_NAME = "Search Account";
 
@@ -125,45 +148,36 @@ public void testSearchAccounts(){
         account.setParentUID(DUMMY_ACCOUNT_UID);
         mAccountsDbAdapter.addAccount(account);
 
-        refreshAccountsList();
-
         //enter search query
 //        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_search);
-        mSolo.clickOnActionBarItem(R.id.menu_search);
-        mSolo.sleep(2000);
-        mSolo.enterText(0, "Se");
-        mSolo.sleep(3000);
-        boolean accountFound = mSolo.waitForText(SEARCH_ACCOUNT_NAME, 1, 2000);
-        assertTrue(accountFound);
-
-        mSolo.clearEditText(0);
-
-        mSolo.sleep(2000);
-        //the child account should be hidden again
-        accountFound = mSolo.waitForText(SEARCH_ACCOUNT_NAME, 1, 2000);
-        assertFalse(accountFound);
+        onView(withId(R.id.menu_search)).perform(click());
+        onView(withId(R.id.abs__search_src_text)).perform(typeText("Se"));
+        onView(withText(SEARCH_ACCOUNT_NAME)).check(matches(isDisplayed()));
+
+        onView(withId(R.id.abs__search_src_text)).perform(clearText());
+        onView(withId(R.id.primary_text)).check(matches(not(withText(SEARCH_ACCOUNT_NAME))));
     }
 
     /**
      * Tests that an account can be created successfully and that the account list is sorted alphabetically.
      */
+    @Test
 	public void testCreateAccount(){
-        mSolo.clickOnActionBarItem(R.id.menu_add_account);
-		mSolo.waitForText(getActivity().getString(R.string.title_add_account));
-
-        View checkbox = mSolo.getCurrentActivity().findViewById(R.id.checkbox_parent_account);
-        //there already exists one eligible parent account in the system
-        assertThat(checkbox).isVisible();
+        onView(withId(R.id.menu_add_account)).check(matches(isDisplayed())).perform(click());
 
-        mSolo.clickOnCheckBox(0);
+        onView(withId(R.id.checkbox_transaction))
+//                .check(matches(allOf(isDisplayed(), isNotChecked())))
+                .perform(click());
 
-        EditText inputAccountName = (EditText) mSolo.getCurrentActivity().findViewById(R.id.edit_text_account_name);
         String NEW_ACCOUNT_NAME = "A New Account";
-        mSolo.enterText(inputAccountName, NEW_ACCOUNT_NAME);
-        mSolo.clickOnActionBarItem(R.id.menu_save);
+        onView(withId(R.id.input_account_name)).perform(typeText(NEW_ACCOUNT_NAME));
+        onView(withId(R.id.checkbox_placeholder_account))
+                .check(matches(isNotChecked()))
+                .perform(click());
+        onView(withId(R.id.menu_save)).perform(click());
 
-        mSolo.waitForText(NEW_ACCOUNT_NAME);
-        mSolo.sleep(3000);
+        //check displayed
+//        onView(withId(android.R.id.list)).check(matches(hasDescendant(withText(NEW_ACCOUNT_NAME))));
 
 		List<Account> accounts = mAccountsDbAdapter.getAllAccounts();
         assertThat(accounts).isNotNull();
@@ -175,24 +189,25 @@ public void testCreateAccount(){
         assertThat(newestAccount.isPlaceholderAccount()).isTrue();
 	}
 
-    public void testChangeParentAccount(){
+    @Test
+    public void testChangeParentAccount() {
         final String accountName = "Euro Account";
         Account account = new Account(accountName, Currency.getInstance("EUR"));
         mAccountsDbAdapter.addAccount(account);
 
         refreshAccountsList();
-        mSolo.waitForText(accountName);
+//        onView(withId(android.R.id.list))
+//                .check(matches(allOf(isDisplayed(), hasDescendant(withText(accountName)))));
 
-        mSolo.clickLongOnText(accountName);
-        mSolo.clickOnView(mSolo.getView(R.id.context_menu_edit_accounts));
-        mSolo.waitForView(EditText.class);
+        onView(withText(accountName)).perform(longClick());
+        onView(withId(R.id.context_menu_edit_accounts)).perform(click());
+        onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
+        onView(withId(R.id.checkbox_transaction))
+                .check(matches(isNotChecked()))
+                .perform(click());
 
-        mSolo.clickOnCheckBox(1);
-        mSolo.sleep(2000);
+        onView(withId(R.id.menu_save)).perform(click());
 
-        mSolo.clickOnActionBarItem(R.id.menu_save);
-        mSolo.sleep(1000);
-        mSolo.waitForText(getActivity().getString(R.string.title_accounts));
         Account editedAccount = mAccountsDbAdapter.getAccount(account.getUID());
         String parentUID = editedAccount.getParentUID();
 
@@ -200,95 +215,62 @@ public void testChangeParentAccount(){
         assertThat(DUMMY_ACCOUNT_UID).isEqualTo(parentUID);
     }
 
+    @Test
 	public void testEditAccount(){
-        refreshAccountsList();
-        mSolo.sleep(2000);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
 		String editedAccountName = "Edited Account";
-				
-		mSolo.clickLongOnText(DUMMY_ACCOUNT_NAME);
-
-        clickSherlockActionBarItem(R.id.context_menu_edit_accounts);
+//		onView(withText(DUMMY_ACCOUNT_NAME)).perform(longClick());
+		onView(withId(R.id.primary_text)).perform(longClick());
+        onView(withId(R.id.context_menu_edit_accounts)).perform(click());
 
-        mSolo.waitForView(EditText.class);
+        onView(withId(R.id.fragment_account_form)).check(matches(isDisplayed()));
 
-		mSolo.clearEditText(0);
-		mSolo.enterText(0, editedAccountName);
+        onView(withId(R.id.input_account_name)).perform(clearText()).perform(typeText(editedAccountName));
 
-        clickSherlockActionBarItem(R.id.menu_save);
+        onView(withId(R.id.menu_save)).perform(click());
 
-		mSolo.waitForDialogToClose();
-        mSolo.waitForText("Accounts");
+        //test refresh
+//        onView(withId(android.R.id.empty))
+//                .check(matches(not(isDisplayed())));
 
 		List<Account> accounts = mAccountsDbAdapter.getAllAccounts();
 		Account latest = accounts.get(0);  //will be the first due to alphabetical sorting
-		
-		assertEquals("Edited Account", latest.getName());
-		assertEquals(DUMMY_ACCOUNT_CURRENCY_CODE, latest.getCurrency().getCurrencyCode());	
+
+        assertThat(latest.getName()).isEqualTo(editedAccountName);
+        assertThat(latest.getCurrency().getCurrencyCode()).isEqualTo(DUMMY_ACCOUNT_CURRENCY_CODE);
 	}
 
     //TODO: Add test for moving content of accounts before deleting it
-	public void testDeleteAccount(){
-        final String accountNameToDelete = "TO BE DELETED";
-        final String accountUidToDelete = "to-be-deleted";
-
-        Account acc = new Account(accountNameToDelete);
-        acc.setUID(accountUidToDelete);
-
+    @Test(expected = IllegalArgumentException.class)
+	public void testDeleteAccount() {
         Transaction transaction = new Transaction("hats");
-        transaction.addSplit(new Split(Money.getZeroInstance(), accountUidToDelete));
-        acc.addTransaction(transaction);
-        mAccountsDbAdapter.addAccount(acc);
-
-        Fragment fragment = getActivity().getCurrentAccountListFragment();
-        assertNotNull(fragment);
-
-        ((AccountsListFragment) fragment).refresh();
+        transaction.addSplit(new Split(Money.getZeroInstance(), DUMMY_ACCOUNT_UID));
+        mTransactionsDbAdapter.addTransaction(transaction);
 
-        mSolo.clickLongOnText(accountNameToDelete);
+        onView(withId(R.id.primary_text)).perform(longClick());
+        onView(withId(R.id.context_menu_delete)).perform(click());
+        onView(withText(R.string.label_delete_sub_accounts)).perform(click());
+        onView(withId(R.id.btn_save)).perform(click());
 
-        clickSherlockActionBarItem(R.id.context_menu_delete);
+        //should throw expected exception
+        mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
 
-        mSolo.waitForDialogToOpen();
-        mSolo.clickOnRadioButton(0);
-        mSolo.clickOnView(mSolo.getView(R.id.btn_save));
-
-        mSolo.waitForDialogToClose();
-        mSolo.waitForText("Accounts");
-
-        Exception expectedException = null;
-        try {
-            mAccountsDbAdapter.getID(accountUidToDelete);
-        } catch (IllegalArgumentException e){
-            expectedException = e;
-        }
-        assertNotNull(expectedException);
-
-        List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(accountUidToDelete);
-        assertEquals(0, transactions.size());
+        List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+        assertThat(transactions).hasSize(0);
     }
 
 	//TODO: Test import of account file
     //TODO: test settings activity
-
+    @Test
 	public void testIntentAccountCreation(){
 		Intent intent = new Intent(Intent.ACTION_INSERT);
 		intent.putExtra(Intent.EXTRA_TITLE, "Intent Account");
 		intent.putExtra(Intent.EXTRA_UID, "intent-account");
-		intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
-		intent.setType(Account.MIME_TYPE);
-		getActivity().sendBroadcast(intent);
-		
-		//give time for the account to be created
-		synchronized (mSolo) {
-			try {
-				mSolo.wait(2000);
-			} catch (InterruptedException e) {
-				e.printStackTrace();
-			}
-		}
-				
+        intent.putExtra(Account.EXTRA_CURRENCY_CODE, "EUR");
+        intent.setType(Account.MIME_TYPE);
+
+        AccountCreator accountCreator = new AccountCreator();
+        accountCreator.onReceive(mAcccountsActivity, intent);
+
 		Account account = mAccountsDbAdapter.getAccount("intent-account");
 		assertNotNull(account);
 		assertEquals("Intent Account", account.getName());
@@ -296,30 +278,29 @@ public void testIntentAccountCreation(){
 		assertEquals("EUR", account.getCurrency().getCurrencyCode());
 	}
 	
-	
-	protected void tearDown() throws Exception {
-        mSolo.finishOpenedActivities();
-        mSolo.waitForEmptyActivityStack(20000);
-        mSolo.sleep(5000);
+	@After
+	public void tearDown() throws Exception {
+        mAcccountsActivity.finish();
+        Thread.sleep(1000);
         mAccountsDbAdapter.deleteAllRecords();
-
 		super.tearDown();
 	}
 
     /**
-     * Finds a view in the action bar and clicks it, since the native methods are not supported by ActionBarSherlock
-     * @param id
-     */
-    private void clickSherlockActionBarItem(int id){
-        View view = mSolo.getView(id);
-        mSolo.clickOnView(view);
-    }
-
-    /**
      * Refresh the account list fragment
      */
     private void refreshAccountsList(){
-        Fragment fragment = getActivity().getCurrentAccountListFragment();
-        ((AccountsListFragment)fragment).refresh();
+        try {
+            runTestOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    Fragment fragment = mAcccountsActivity.getCurrentAccountListFragment();
+                    ((AccountsListFragment) fragment).refresh();
+                }
+            });
+        } catch (Throwable throwable) {
+            System.err.println("Failed to refresh fragment");
+        }
+
     }
 }
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index 09829260..a176ecbc 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -80,8 +80,8 @@ public ExportTransactionsTest() {
 	public void setUp() throws Exception {
 		super.setUp();
 		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
-		mAcccountsActivity = getActivity();
 		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
+		mAcccountsActivity = getActivity();
 
         mDbHelper = new DatabaseHelper(getActivity());
         try {
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java b/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
index 4e45f66c..3418f879 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/GnucashAndroidTestRunner.java
@@ -29,7 +29,7 @@
  * Custom test runner
  */
 public class GnucashAndroidTestRunner extends AndroidJUnitRunner{
-    private static final String TAG = "Primer";
+    private static final String TAG = "GncAndroidTestRunner";
     private static final String ANIMATION_PERMISSION = "android.permission.SET_ANIMATION_SCALE";
     private static final float DISABLED = 0.0f;
     private static final float DEFAULT = 1.0f;
@@ -65,9 +65,9 @@ private void enableAnimation(){
         int permStatus = getContext().checkCallingOrSelfPermission(ANIMATION_PERMISSION);
         if (permStatus == PackageManager.PERMISSION_GRANTED) {
             if (reflectivelyDisableAnimation(DEFAULT)) {
-                Log.i(TAG, "All animations disabled.");
+                Log.i(TAG, "All animations enabled.");
             } else {
-                Log.i(TAG, "Could not disable animations.");
+                Log.i(TAG, "Could not enable animations.");
             }
         } else {
             Log.i(TAG, "Cannot disable animations due to lack of permission.");
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 22e888bd..09bfbf0b 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -16,6 +16,7 @@
 
 package org.gnucash.android.test.ui;
 
+import android.app.Fragment;
 import android.content.ContentValues;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -23,40 +24,64 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
-import android.support.v4.app.Fragment;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-import android.view.View;
-import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.ToggleButton;
-import com.robotium.solo.Solo;
+
 import org.gnucash.android.R;
 import org.gnucash.android.db.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.SplitsDbAdapter;
 import org.gnucash.android.db.TransactionsDbAdapter;
-import org.gnucash.android.model.*;
+import org.gnucash.android.model.Account;
+import org.gnucash.android.model.Money;
+import org.gnucash.android.model.Split;
+import org.gnucash.android.model.Transaction;
+import org.gnucash.android.model.TransactionType;
+import org.gnucash.android.receivers.TransactionRecorder;
 import org.gnucash.android.ui.UxArgument;
 import org.gnucash.android.ui.transaction.TransactionFormFragment;
 import org.gnucash.android.ui.transaction.TransactionsActivity;
-import org.gnucash.android.ui.util.TransactionTypeToggleButton;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
 import java.text.NumberFormat;
-import java.text.ParseException;
 import java.util.Currency;
 import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 
+import static android.support.test.espresso.Espresso.onData;
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.longClick;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
+import static android.support.test.espresso.matcher.ViewMatchers.hasDescendant;
+import static android.support.test.espresso.matcher.ViewMatchers.isChecked;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isNotChecked;
+import static android.support.test.espresso.matcher.ViewMatchers.withChild;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withSpinnerText;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static org.assertj.android.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.not;
 
-
+@RunWith(AndroidJUnit4.class)
 public class TransactionsActivityTest extends
 		ActivityInstrumentationTestCase2<TransactionsActivity> {
     private static final String TRANSACTION_AMOUNT = "9.99";
@@ -68,7 +93,6 @@
     private static final String TRANSFER_ACCOUNT_UID    = "transfer_account";
     public static final String CURRENCY_CODE = "USD";
 
-    private Solo mSolo;
 	private Transaction mTransaction;
 	private long mTransactionTimeMillis;
 
@@ -77,13 +101,20 @@
     private AccountsDbAdapter mAccountsDbAdapter;
     private TransactionsDbAdapter mTransactionsDbAdapter;
     private SplitsDbAdapter mSplitsDbAdapter;
-	
+	private TransactionsActivity mTransactionsActivity;
+
 	public TransactionsActivityTest() {
 		super(TransactionsActivity.class);
 	}
 	
 	@Override
-	protected void setUp() throws Exception {
+	@Before
+	public void setUp() throws Exception {
+		super.setUp();
+		injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+		AccountsActivityTest.preventFirstRunDialogs(getInstrumentation().getTargetContext());
+
+
         mDbHelper = new DatabaseHelper(getInstrumentation().getTargetContext());
         try {
             mDb = mDbHelper.getWritableDatabase();
@@ -94,8 +125,9 @@ protected void setUp() throws Exception {
         mSplitsDbAdapter = new SplitsDbAdapter(mDb);
         mTransactionsDbAdapter = new TransactionsDbAdapter(mDb, mSplitsDbAdapter);
         mAccountsDbAdapter = new AccountsDbAdapter(mDb, mTransactionsDbAdapter);
+		mAccountsDbAdapter.deleteAllRecords();
 
-        mTransactionTimeMillis = System.currentTimeMillis();
+		mTransactionTimeMillis = System.currentTimeMillis();
         Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
         account.setCurrency(Currency.getInstance(CURRENCY_CODE));
@@ -124,187 +156,142 @@ protected void setUp() throws Exception {
         Intent intent = new Intent(Intent.ACTION_VIEW);
         intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
         setActivityIntent(intent);
-
-        mSolo = new Solo(getInstrumentation(), getActivity());
+		mTransactionsActivity = getActivity();
 	}
 
-    /**
-     * Finds a view in the action bar and clicks it, since the native methods are not supported by ActionBarSherlock
-     * @param id
-     */
-    private void clickSherlockActionBarItem(int id){
-        View view = mSolo.getView(id);
-        mSolo.clickOnView(view);
-    }
 
 	private void validateTransactionListDisplayed(){
-		Fragment fragment = getActivity().getCurrentPagerFragment();
-		assertNotNull(fragment);
+		onView(withId(R.id.fragment_transaction_list)).check(matches(isDisplayed()));
+//		Fragment fragment = getActivity().getCurrentPagerFragment();
+//		assertThat(fragment).isNotNull();
+//		assertThat(fragment).isInstanceOf(TransactionsListFragment.class);
 	}
 	
 	private int getTransactionCount(){
         return mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID).size();
 	}
 	
-	private void validateNewTransactionFields(){
-		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(new Date(mTransactionTimeMillis));
-		TextView dateView = (TextView) mSolo.getView(R.id.input_date);
-		String actualValue = dateView.getText().toString();
-		assertEquals(expectedValue, actualValue);
-		
-		expectedValue = TransactionFormFragment.TIME_FORMATTER.format(new Date(mTransactionTimeMillis));
-		TextView timeView = (TextView) mSolo.getView(R.id.input_time);
-		actualValue = timeView.getText().toString();
-		assertEquals(expectedValue, actualValue);
+	private void validateTimeInput(long timeMillis){
+		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(new Date(timeMillis));
+		onView(withId(R.id.input_date)).check(matches(withText(expectedValue)));
 		
+		expectedValue = TransactionFormFragment.TIME_FORMATTER.format(new Date(timeMillis));
+		onView(withId(R.id.input_time)).check(matches(withText(expectedValue)));
 	}
-	
+
+	@Test
 	public void testAddTransactionShouldRequireAmount(){
-		mSolo.waitForText(TRANSACTION_NAME);
 		validateTransactionListDisplayed();
 		
 		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText("Description");
-		mSolo.enterText(0, "Lunch");
+        onView(withId(R.id.menu_add_transaction)).perform(click());
+
+		onView(withId(R.id.input_transaction_name))
+				.check(matches(isDisplayed()))
+				.perform(typeText("Lunch"));
 
-        clickSherlockActionBarItem(R.id.menu_save);
-        String toastAmountRequired = getActivity().getString(R.string.toast_transanction_amount_required);
-		boolean toastFound = mSolo.waitForText(toastAmountRequired);
-        assertTrue(toastFound);
+		onView(withId(R.id.menu_save)).perform(click());
+
+		assertToastDisplayed(R.string.toast_transanction_amount_required);
 
 		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
-		assertEquals(beforeCount, afterCount);
+		assertThat(afterCount).isEqualTo(beforeCount);
 
-        mSolo.goBack();
 	}
-	
+
+	/**
+	 * Checks that a specific toast message is displayed
+	 * @param toastString
+	 */
+	private void assertToastDisplayed(int toastString) {
+		onView(withText(toastString))
+				.inRoot(withDecorView(not(is(getActivity().getWindow().getDecorView()))))
+				.check(matches(isDisplayed()));
+	}
+
+
 	private void validateEditTransactionFields(Transaction transaction){
-		
-		String name = ((EditText)mSolo.getView(R.id.input_transaction_name)).getText().toString();
-		assertEquals(transaction.getDescription(), name);
-
-        EditText amountEdittext = (EditText) mSolo.getView(R.id.input_transaction_amount);
-		String amountString = amountEdittext.getText().toString();
-		NumberFormat formatter = NumberFormat.getInstance();
-		try {
-			amountString = formatter.parse(amountString).toString();
-		} catch (ParseException e) {
-			e.printStackTrace();
-		}
-		Money amount = new Money(amountString, Currency.getInstance(Locale.getDefault()).getCurrencyCode());
-		assertEquals(transaction.getBalance(DUMMY_ACCOUNT_UID), amount);
 
-        EditText notesEditText = (EditText) mSolo.getView(R.id.input_description);
-		String transactionNotes = notesEditText.getText().toString();
-		assertEquals(transaction.getNote(), transactionNotes);
-		
-		String expectedValue = TransactionFormFragment.DATE_FORMATTER.format(transaction.getTimeMillis());
-		TextView dateView = (TextView) mSolo.getView(R.id.input_date);
-		String actualValue = dateView.getText().toString(); //mSolo.getText(6).getText().toString();
-		assertEquals(expectedValue, actualValue);
-		
-		expectedValue = TransactionFormFragment.TIME_FORMATTER.format(transaction.getTimeMillis());
-		TextView timeView = (TextView) mSolo.getView(R.id.input_time);
-		actualValue = timeView.getText().toString();// mSolo.getText(7).getText().toString();
-		assertEquals(expectedValue, actualValue);
+		onView(withId(R.id.input_transaction_name)).check(matches(withText(transaction.getDescription())));
+
+		Money balance = transaction.getBalance(DUMMY_ACCOUNT_UID);
+		NumberFormat formatter = NumberFormat.getInstance(Locale.getDefault());
+		formatter.setMinimumFractionDigits(2);
+		formatter.setMaximumFractionDigits(2);
+		onView(withId(R.id.input_transaction_amount)).check(matches(withText(formatter.format(balance.asDouble()))));
+
+		onView(withId(R.id.input_description)).check(matches(withText(transaction.getNote())));
+
+		validateTimeInput(transaction.getTimeMillis());
 	}
 
     //TODO: Add test for only one account but with double-entry enabled
-
+	@Test
 	public void testAddTransaction(){
         setDoubleEntryEnabled(true);
-        mSolo.waitForText(TRANSACTION_NAME);
-
+		setDefaultTransactionType(TransactionType.DEBIT);
         validateTransactionListDisplayed();
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-
-        mSolo.waitForText("New transaction");
-
-        //validate creation of transaction
-        mSolo.enterText(0, "Lunch");
-        mSolo.enterText(1, "899");
-		mSolo.sleep(2000);
-        TransactionTypeToggleButton typeToggleButton = (TransactionTypeToggleButton) mSolo.getView(R.id.input_transaction_type);
-		assertThat(typeToggleButton).isVisible();
-		if (!typeToggleButton.isChecked()){
-			mSolo.clickOnButton(0);
-		}
-		mSolo.sleep(1000);
-        //check that the amount is correctly converted in the input field
-        String value = mSolo.getEditText(1).getText().toString();
-        String expectedValue = NumberFormat.getInstance().format(-8.99);
-        assertThat(value).isEqualTo(expectedValue);
 
-        int transactionsCount = getTransactionCount();
+		onView(withId(R.id.menu_add_transaction)).perform(click());
 
-        mSolo.clickOnActionBarItem(R.id.menu_save);
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Lunch"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("899"));
+		onView(withId(R.id.input_transaction_type))
+				.check(matches(allOf(isDisplayed(), withText(R.string.label_receive))))
+				.perform(click())
+				.check(matches(withText(R.string.label_spend)));
 
-        mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-        validateTransactionListDisplayed();
+		String expectedValue = NumberFormat.getInstance().format(-8.99);
+		onView(withId(R.id.input_transaction_amount)).check(matches(withText(expectedValue)));
 
-        mSolo.sleep(1000);
+        int transactionsCount = getTransactionCount();
+		onView(withId(R.id.menu_save)).perform(click());
+
+        validateTransactionListDisplayed();
 
         List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
         assertThat(transactions).hasSize(2);
         Transaction transaction = transactions.get(0);
 		assertThat(transaction.getSplits()).hasSize(2);
 
-        Split split = transaction.getSplits(TRANSFER_ACCOUNT_UID).get(0);
-        //the main account is a CASH account which has debit normal type, so a negative value means actually CREDIT
-        //so the other side of the split has to be a debit
-        assertEquals(TransactionType.DEBIT, split.getType());
-        assertEquals(transactionsCount + 1, getTransactionCount());
-
+        assertThat(getTransactionCount()).isEqualTo(transactionsCount + 1);
     }
 
-	public void testEditTransaction(){		
-		//open transactions
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
+	@Test
+	public void testEditTransaction(){
 		validateTransactionListDisplayed();
-		
-		mSolo.clickOnText(TRANSACTION_NAME);
-		mSolo.waitForText("Note");
+
+		onView(withText(TRANSACTION_NAME)).perform(click());
 		
 		validateEditTransactionFields(mTransaction);
-				
-		mSolo.enterText(0, "Pasta");
-		clickSherlockActionBarItem(R.id.menu_save);
 
-		//if we see the text, then it was successfully created
-		mSolo.waitForText("Pasta");
+		onView(withId(R.id.input_transaction_name)).perform(clearText(), typeText("Pasta"));
+		onView(withId(R.id.menu_save)).perform(click());
 	}
 
 	/**
 	 * Tests that transactions splits are automatically balanced and an imbalance account will be created
 	 * This test case assumes that single entry is used
 	 */
+	@Test
 	public void testAutoBalanceTransactions(){
 		setDoubleEntryEnabled(false);
 		mTransactionsDbAdapter.deleteAllRecords();
-		mSolo.sleep(1000);
+
 		assertThat(mTransactionsDbAdapter.getTotalTransactionsCount()).isEqualTo(0);
 		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNull();
 
-		mSolo.waitForText(TRANSACTION_NAME);
-
 		validateTransactionListDisplayed();
-		clickSherlockActionBarItem(R.id.menu_add_transaction);
-
-		mSolo.waitForText("New transaction");
-
-		//validate creation of transaction
-		mSolo.enterText(0, "Autobalance");
-		mSolo.enterText(1, "499");
-
-		View typeToogleButton = mSolo.getView(R.id.btn_open_splits);
-		assertThat(typeToogleButton).isNotVisible(); //no double entry so no split editor
+		onView(withId(R.id.menu_add_transaction)).perform(click());
+		onView(withId(R.id.fragment_transaction_form)).check(matches(isDisplayed()));
 
-		mSolo.clickOnActionBarItem(R.id.menu_save);
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Autobalance"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("499"));
 
-		mSolo.sleep(2000);
+		//no double entry so no split editor
+		onView(withId(R.id.btn_open_splits)).check(matches(not(isDisplayed())));
+		onView(withId(R.id.menu_save)).perform(click());
 
 		assertThat(mTransactionsDbAdapter.getTotalTransactionsCount()).isEqualTo(1);
 		Transaction transaction = mTransactionsDbAdapter.getAllTransactions().get(0);
@@ -322,52 +309,38 @@ public void testAutoBalanceTransactions(){
 	 * Tests input of transaction splits using the split editor.
 	 * Also validates that the imbalance from the split editor will be automatically added as a split
 	 */
+	@Test
 	public void testSplitEditor(){
 		setDoubleEntryEnabled(true);
+		setDefaultTransactionType(TransactionType.DEBIT);
 		mTransactionsDbAdapter.deleteAllRecords();
-		mSolo.sleep(1000);
+
 		//when we start there should be no imbalance account in the system
 		String imbalanceAcctUID = mAccountsDbAdapter.getImbalanceAccountUID(Currency.getInstance(CURRENCY_CODE));
 		assertThat(imbalanceAcctUID).isNull();
 
-		mSolo.waitForText(TRANSACTION_NAME);
-
 		validateTransactionListDisplayed();
-		clickSherlockActionBarItem(R.id.menu_add_transaction);
-
-		mSolo.waitForText("New transaction");
+		onView(withId(R.id.menu_add_transaction)).perform(click());
 
-		//validate creation of transaction
-		mSolo.enterText(0, "Autobalance");
-		mSolo.enterText(1, "4499");
+		onView(withId(R.id.input_transaction_name)).perform(typeText("Autobalance"));
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("499"));
 
-		mSolo.clickOnButton(1);
-		mSolo.waitForDialogToOpen();
+		onView(withId(R.id.btn_open_splits)).perform(click());
 
-		LinearLayout splitListView = (LinearLayout) mSolo.getView(R.id.split_list_layout);
-		assertThat(splitListView).hasChildCount(1);
+		onView(withId(R.id.split_list_layout)).check(matches(allOf(isDisplayed(), hasDescendant(withId(R.id.input_split_amount)))));
 
 		//TODO: enable this assert when we fix the sign of amounts in split editor
-		//assertThat(mSolo.getEditText(0).getText().toString()).isEqualTo("44.99");
-		View addSplit = mSolo.getView(R.id.btn_add_split);
-		mSolo.clickOnView(addSplit);
-		mSolo.sleep(5000);
-		assertThat(splitListView).hasChildCount(2);
 
-		mSolo.enterText(0, "4000");
+		onView(withId(R.id.btn_add_split)).perform(click());
 
-		TextView imbalanceTextView = (TextView) mSolo.getView(R.id.imbalance_textview);
-		assertThat(imbalanceTextView).hasText("-4.99 $");
+		onView(allOf(withId(R.id.input_split_amount), withText(""))).perform(typeText("400"));
+		onView(withId(R.id.imbalance_textview)).check(matches(withText("-0.99 $")));
 
-		mSolo.clickOnView(mSolo.getView(R.id.btn_save));
-		mSolo.waitForDialogToClose();
-		mSolo.sleep(3000);
+		onView(withId(R.id.btn_save)).perform(click());
 		//after we use split editor, we should not be able to toggle the transaction type
-		assertThat(mSolo.getView(R.id.input_transaction_type)).isNotVisible();
+		onView(withId(R.id.input_transaction_type)).check(matches(not(isDisplayed())));
 
-		mSolo.clickOnActionBarItem(R.id.menu_save);
-
-		mSolo.sleep(3000);
+		onView(withId(R.id.menu_save)).perform(click());
 
 		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactions();
 		assertThat(transactions).hasSize(1);
@@ -387,9 +360,8 @@ public void testSplitEditor(){
 		assertThat(imbalanceSplits).hasSize(1);
 
 		Split split = imbalanceSplits.get(0);
-		assertThat(split.getAmount().toPlainString()).isEqualTo("4.99");
+		assertThat(split.getAmount().toPlainString()).isEqualTo("0.99");
 		assertThat(split.getType()).isEqualTo(TransactionType.CREDIT);
-
 	}
 
 
@@ -400,37 +372,35 @@ private void setDoubleEntryEnabled(boolean enabled){
         editor.commit();
     }
 
+	@Test
 	public void testDefaultTransactionType(){
-		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
-		Editor editor = prefs.edit();
-		editor.putString(getActivity().getString(R.string.key_default_transaction_type), "CREDIT");
-		editor.commit();
+		setDefaultTransactionType(TransactionType.CREDIT);
 
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText(getActivity().getString(R.string.label_transaction_name));
-		
-		ToggleButton transactionTypeButton = (ToggleButton) mSolo.getButton(0);
-		assertThat(transactionTypeButton).isChecked();
+		onView(withId(R.id.menu_add_transaction)).perform(click());
+		onView(withId(R.id.input_transaction_type)).check(matches(allOf(isChecked(), withText(R.string.label_spend))));
+		onView(withId(R.id.menu_cancel)).perform(click());
+
+		//now validate the other case
 
-		clickSherlockActionBarItem(R.id.menu_cancel);
+		setDefaultTransactionType(TransactionType.DEBIT);
 
-		//now validate the other case 
-		editor = prefs.edit();
-		editor.putString(getActivity().getString(R.string.key_default_transaction_type), "DEBIT");
+		onView(withId(R.id.menu_add_transaction)).perform(click());
+		onView(withId(R.id.input_transaction_type)).check(matches(allOf(not(isChecked()), withText(R.string.label_receive))));
+		onView(withId(R.id.menu_cancel)).perform(click());
+	}
+
+	private void setDefaultTransactionType(TransactionType type) {
+		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+		Editor editor = prefs.edit();
+		editor.putString(getActivity().getString(R.string.key_default_transaction_type), type.name());
 		editor.commit();
-		
-        clickSherlockActionBarItem(R.id.menu_add_transaction);
-		mSolo.waitForText(getActivity().getString(R.string.label_transaction_name));
-		
-		transactionTypeButton = (ToggleButton) mSolo.getButton(0);
-		assertThat(transactionTypeButton).isNotChecked();
-        clickSherlockActionBarItem(R.id.menu_cancel);
-        mSolo.goBack();
 	}
 
-	public void testChildAccountsShouldUseParentTransferAccountSetting(){
+	//FIXME: Improve on this test
+	public void childAccountsShouldUseParentTransferAccountSetting(){
 		Account transferAccount = new Account("New Transfer Acct");
 		mAccountsDbAdapter.addAccount(transferAccount);
+		mAccountsDbAdapter.addAccount(new Account("Higher account"));
 
 		Account childAccount = new Account("Child Account");
 		childAccount.setParentUID(DUMMY_ACCOUNT_UID);
@@ -439,43 +409,35 @@ public void testChildAccountsShouldUseParentTransferAccountSetting(){
 		contentValues.put(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, transferAccount.getUID());
 		mAccountsDbAdapter.updateRecord(DUMMY_ACCOUNT_UID, contentValues);
 
-
-		Intent intent = new Intent(mSolo.getCurrentActivity(), TransactionsActivity.class);
+		Intent intent = new Intent(mTransactionsActivity, TransactionsActivity.class);
+		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 		intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
 		intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, childAccount.getUID());
-		getActivity().startActivity(intent);
-		mSolo.waitForActivity(TransactionsActivity.class);
-		mSolo.sleep(3000);
-		Spinner spinner = (Spinner) mSolo.getView(R.id.input_double_entry_accounts_spinner);
-		long transferAccountID = mAccountsDbAdapter.getID(transferAccount.getUID());
-		assertThat(transferAccountID).isEqualTo(spinner.getSelectedItemId());
+
+		mTransactionsActivity.startActivity(intent);
+
+		onView(withId(R.id.input_transaction_amount)).perform(typeText("1299"));
+		clickOnView(R.id.menu_save);
+
+		//if our transfer account has a transaction then the right transfer account was used
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(transferAccount.getUID());
+		assertThat(transactions).hasSize(1);
 	}
 
+	@Test
 	public void testToggleTransactionType(){
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
 		validateTransactionListDisplayed();
-		mSolo.clickOnText(TRANSACTION_NAME);
-		mSolo.waitForText(getActivity().getString(R.string.title_edit_transaction));
-		
-		validateEditTransactionFields(mTransaction);
+		onView(withText(TRANSACTION_NAME)).perform(click());
 
-        TransactionTypeToggleButton toggleButton = (TransactionTypeToggleButton) mSolo.getView(R.id.input_transaction_type);
-        assertThat(toggleButton).isNotNull();
-		assertThat(toggleButton).isVisible();
-		assertThat(toggleButton).hasText(R.string.label_receive);
+		validateEditTransactionFields(mTransaction);
 
-        mSolo.clickOnView(toggleButton);
-		mSolo.sleep(2000);
+		onView(withId(R.id.input_transaction_type)).check(matches(
+				allOf(isDisplayed(), withText(R.string.label_receive))
+		)).perform(click()).check(matches(withText(R.string.label_spend)));
 
-		assertThat(toggleButton).hasText(R.string.label_spend);
-		EditText amountView = (EditText) mSolo.getView(R.id.input_transaction_amount);
-		String amountString = amountView.getText().toString();
-		assertThat(amountString).startsWith("-");
-		assertThat("-9.99").isEqualTo(amountString);
+		onView(withId(R.id.input_transaction_amount)).check(matches(withText("-9.99")));
 
-		mSolo.clickOnActionBarItem(R.id.menu_save);
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
+		onView(withId(R.id.menu_save)).perform(click());
 		
 		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
 		assertThat(transactions).hasSize(1);
@@ -483,46 +445,40 @@ public void testToggleTransactionType(){
 		assertThat(trx.getSplits()).hasSize(2); //auto-balancing of splits
 		assertTrue(trx.getBalance(DUMMY_ACCOUNT_UID).isNegative());
 	}
-	
+
+	@Test
 	public void testOpenTransactionEditShouldNotModifyTransaction(){
-			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-			
-			validateTransactionListDisplayed();
-			
-			mSolo.clickOnText(TRANSACTION_NAME);
-			mSolo.waitForText("Edit transaction");
-			
-			validateNewTransactionFields();
-			
-			clickSherlockActionBarItem(R.id.menu_save);
-
-			mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-			
-			List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
-			
-			assertEquals(1, transactions.size());
-			Transaction trx = transactions.get(0);
-			assertEquals(TRANSACTION_NAME, trx.getDescription());
-			Date expectedDate = new Date(mTransactionTimeMillis);
-			Date trxDate = new Date(trx.getTimeMillis());
-			assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
-					TransactionFormFragment.DATE_FORMATTER.format(trxDate));
-			assertEquals(TransactionFormFragment.TIME_FORMATTER.format(expectedDate),
-					TransactionFormFragment.TIME_FORMATTER.format(trxDate));
-		}
+		validateTransactionListDisplayed();
 
-	public void testDeleteTransaction(){
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
-		mSolo.clickOnCheckBox(0);		
-		clickSherlockActionBarItem(R.id.context_menu_delete);
+		onView(withText(TRANSACTION_NAME)).perform(click());
+
+		validateTimeInput(mTransactionTimeMillis);
 
-		mSolo.sleep(500);
+		clickOnView(R.id.menu_save);
+
+		List<Transaction> transactions = mTransactionsDbAdapter.getAllTransactionsForAccount(DUMMY_ACCOUNT_UID);
+
+		assertThat(transactions).hasSize(1);
+		Transaction trx = transactions.get(0);
+		assertEquals(TRANSACTION_NAME, trx.getDescription());
+		Date expectedDate = new Date(mTransactionTimeMillis);
+		Date trxDate = new Date(trx.getTimeMillis());
+		assertEquals(TransactionFormFragment.DATE_FORMATTER.format(expectedDate),
+				TransactionFormFragment.DATE_FORMATTER.format(trxDate));
+		assertEquals(TransactionFormFragment.TIME_FORMATTER.format(expectedDate),
+				TransactionFormFragment.TIME_FORMATTER.format(trxDate));
+	}
+
+	@Test
+	public void testDeleteTransaction(){
+		onView(withId(R.id.primary_text)).perform(longClick());
+		clickOnView(R.id.context_menu_delete);
 
 		long id = mAccountsDbAdapter.getID(DUMMY_ACCOUNT_UID);
 		assertEquals(0, mTransactionsDbAdapter.getTransactionsCount(id));
 	}
-	
+
+	@Test
 	public void testBulkMoveTransactions(){
         String targetAccountName = "Target";
         Account account = new Account(targetAccountName);
@@ -531,34 +487,22 @@ public void testBulkMoveTransactions(){
 		
 		int beforeOriginCount = mAccountsDbAdapter.getAccount(DUMMY_ACCOUNT_UID).getTransactionCount();
 		
-		mSolo.waitForText(DUMMY_ACCOUNT_NAME);
-		
 		validateTransactionListDisplayed();
-		
-		mSolo.clickOnCheckBox(0);
-		mSolo.waitForText(getActivity().getString(R.string.title_selected, 1));
-		//initiate bulk move
-		clickSherlockActionBarItem(R.id.context_menu_move_transactions);
-		
-		mSolo.waitForDialogToClose();
-		
-		Spinner spinner = mSolo.getCurrentViews(Spinner.class).get(0);
-		mSolo.clickOnView(spinner);
-        mSolo.sleep(500);
-		mSolo.clickOnText(targetAccountName);
-		mSolo.clickOnButton(1);
-//		mSolo.clickOnText(getActivity().getString(R.string.btn_move));
-		
-		mSolo.waitForDialogToClose();
-		
+
+		clickOnView(R.id.checkbox_transaction);
+		clickOnView(R.id.context_menu_move_transactions);
+
+		clickOnView(R.id.btn_save);
+
 		int targetCount = mAccountsDbAdapter.getAccount(account.getUID()).getTransactionCount();
-		assertEquals(1, targetCount);
+		assertThat(targetCount).isEqualTo(1);
 		
 		int afterOriginCount = mAccountsDbAdapter.getAccount(DUMMY_ACCOUNT_UID).getTransactionCount();
-		assertEquals(beforeOriginCount-1, afterOriginCount);
+		assertThat(afterOriginCount).isEqualTo(beforeOriginCount-1);
 	}
 
 	//TODO: add normal transaction recording
+	@Test
 	public void testLegacyIntentTransactionRecording(){
 		int beforeCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
 		Intent transactionIntent = new Intent(Intent.ACTION_INSERT);
@@ -569,9 +513,7 @@ public void testLegacyIntentTransactionRecording(){
 		transactionIntent.putExtra(Transaction.EXTRA_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
 		transactionIntent.putExtra(Transaction.EXTRA_TRANSACTION_TYPE, TransactionType.DEBIT.name());
 
-		getActivity().sendBroadcast(transactionIntent);
-
-        mSolo.sleep(2000);
+		new TransactionRecorder().onReceive(mTransactionsActivity, transactionIntent);
 
 		int afterCount = mTransactionsDbAdapter.getTransactionsCount(DUMMY_ACCOUNT_UID);
 		
@@ -587,12 +529,19 @@ public void testLegacyIntentTransactionRecording(){
 		}
 	}
 
+	/**
+	 * Simple wrapper for clicking on views with espresso
+	 * @param viewId View resource ID
+	 */
+	private void clickOnView(int viewId){
+		onView(withId(viewId)).perform(click());
+	}
+
 	@Override
-	protected void tearDown() throws Exception {
-		mSolo.finishOpenedActivities();
-		mSolo.waitForEmptyActivityStack(20000);
-		mSolo.sleep(5000);
-		mAccountsDbAdapter.deleteAllRecords();
+	@After
+	public void tearDown() throws Exception {
+		mTransactionsActivity.finish();
+		Thread.sleep(1000);
 		super.tearDown();
 	}
 }
diff --git a/app/src/debug/AndroidManifest.xml b/app/src/debug/AndroidManifest.xml
index a51540cb..1400ea47 100644
--- a/app/src/debug/AndroidManifest.xml
+++ b/app/src/debug/AndroidManifest.xml
@@ -15,8 +15,9 @@
  limitations under the License.
 -->
 
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.gnucash.android">
-
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+   <!-- Disable animations on debug builds so that the animations do not interfere with Espresso
+         tests.  Adding this permission to the manifest is not sufficient - you must also grant the
+         permission over adb! -->
     <uses-permission android:name="android.permission.SET_ANIMATION_SCALE" />
 </manifest>
\ No newline at end of file
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index 466e6d75..180bb3ea 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -241,7 +241,7 @@ public void onCreate(Bundle savedInstanceState) {
 		View view = inflater.inflate(R.layout.fragment_new_account, container, false);
 		getSherlockActivity().getSupportActionBar().setTitle(R.string.title_add_account);
 		mCurrencySpinner = (Spinner) view.findViewById(R.id.input_currency_spinner);
-		mNameEditText = (EditText) view.findViewById(R.id.edit_text_account_name);
+		mNameEditText = (EditText) view.findViewById(R.id.input_account_name);
 		//mNameEditText.requestFocus();
 
         mAccountTypeSpinner = (Spinner) view.findViewById(R.id.input_account_type_spinner);
@@ -264,7 +264,7 @@ public void onNothingSelected(AdapterView<?> adapterView) {
 		mParentAccountSpinner = (Spinner) view.findViewById(R.id.input_parent_account);
 		mParentAccountSpinner.setEnabled(false);
 
-		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+		mParentCheckBox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
 		mParentCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
 			
 			@Override
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 3f36d318..015cdaa5 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -29,7 +29,6 @@
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
 import android.support.v4.content.Loader;
 import android.support.v4.widget.SimpleCursorAdapter;
-import android.text.format.DateFormat;
 import android.text.format.DateUtils;
 import android.util.Log;
 import android.util.SparseBooleanArray;
@@ -218,7 +217,7 @@ public void onResume() {
 	public void onListItemClick(ListView l, View v, int position, long id) {
 		super.onListItemClick(l, v, position, id);
 		if (mInEditMode){
-			CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox_parent_account);
+			CheckBox checkbox = (CheckBox) v.findViewById(R.id.checkbox_transaction);
 			checkbox.setChecked(!checkbox.isChecked());
 			return;
 		}
@@ -228,7 +227,7 @@ public void onListItemClick(ListView l, View v, int position, long id) {
 	@Override
 	public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long id) {
 		getListView().setItemChecked(position, true);
-		CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+		CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
 		checkbox.setChecked(true);
 		startActionMode();
 		return true;
@@ -365,7 +364,7 @@ public TransactionsCursorAdapter(Context context, int layout, Cursor c,
 		public View getView(int position, View convertView, ViewGroup parent) {
 			final View view = super.getView(position, convertView, parent);
 			final int itemPosition = position;
-			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_parent_account);
+			CheckBox checkbox = (CheckBox) view.findViewById(R.id.checkbox_transaction);
             final TextView secondaryText = (TextView) view.findViewById(R.id.secondary_text);
 
             //TODO: Revisit this if we ever change the application theme
diff --git a/app/src/main/res/layout/fragment_accounts_list.xml b/app/src/main/res/layout/fragment_accounts_list.xml
index 6fe184ec..05c73ab9 100644
--- a/app/src/main/res/layout/fragment_accounts_list.xml
+++ b/app/src/main/res/layout/fragment_accounts_list.xml
@@ -16,6 +16,7 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/fragment_account_list"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical" >
diff --git a/app/src/main/res/layout/fragment_new_account.xml b/app/src/main/res/layout/fragment_new_account.xml
index ca13889f..4d228761 100644
--- a/app/src/main/res/layout/fragment_new_account.xml
+++ b/app/src/main/res/layout/fragment_new_account.xml
@@ -18,14 +18,14 @@
 <ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
             android:layout_width="match_parent"
             android:layout_height="match_parent">
-    <LinearLayout
+    <LinearLayout android:id="@+id/fragment_account_form"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:padding="@dimen/dialog_padding"
             android:orientation="vertical" >
 
         <EditText
-                android:id="@+id/edit_text_account_name"
+                android:id="@+id/input_account_name"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
                 android:layout_marginBottom="@dimen/form_row_bottom_margin"
@@ -97,7 +97,7 @@
                       android:layout_marginBottom="@dimen/form_row_bottom_margin"
                       android:orientation="horizontal" >
 
-            <CheckBox android:id="@+id/checkbox_parent_account"
+            <CheckBox android:id="@+id/checkbox_transaction"
                       android:layout_width="wrap_content"
                       android:layout_height="wrap_content"
                       android:focusable="false"        />
diff --git a/app/src/main/res/layout/fragment_new_transaction.xml b/app/src/main/res/layout/fragment_new_transaction.xml
index 07f1842b..9c191c99 100644
--- a/app/src/main/res/layout/fragment_new_transaction.xml
+++ b/app/src/main/res/layout/fragment_new_transaction.xml
@@ -19,7 +19,7 @@
     android:layout_width="match_parent"
 	android:layout_height="match_parent">
 	
-	<LinearLayout 
+	<LinearLayout android:id="@+id/fragment_transaction_form"
 	    android:layout_width="match_parent"
 	    android:layout_height="wrap_content"
 	    android:padding="@dimen/dialog_padding"
diff --git a/app/src/main/res/layout/fragment_transactions_list.xml b/app/src/main/res/layout/fragment_transactions_list.xml
index ab57f318..e5f6677f 100644
--- a/app/src/main/res/layout/fragment_transactions_list.xml
+++ b/app/src/main/res/layout/fragment_transactions_list.xml
@@ -16,6 +16,7 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/fragment_transaction_list"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical" >
diff --git a/app/src/main/res/layout/list_item_transaction.xml b/app/src/main/res/layout/list_item_transaction.xml
index 0c944694..d21cbc6c 100644
--- a/app/src/main/res/layout/list_item_transaction.xml
+++ b/app/src/main/res/layout/list_item_transaction.xml
@@ -37,7 +37,7 @@
             android:orientation="horizontal">
 
         <CheckBox
-                android:id="@+id/checkbox_parent_account"
+                android:id="@+id/checkbox_transaction"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:focusable="false"
