From 46922281b96e08aca748355f594980efa933c4ad Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Mon, 28 Dec 2015 18:06:46 +0800
Subject: [PATCH] update calls of (bulk)addRecord

---
 .../android/test/ui/AccountsActivityTest.java      |  9 ++++----
 .../android/test/ui/ExportTransactionsTest.java    |  3 ++-
 .../android/test/ui/PieChartReportTest.java        |  7 +++---
 .../android/test/ui/TransactionsActivityTest.java  | 17 +++++++-------
 .../android/db/adapter/AccountsDbAdapter.java      | 18 +++++++--------
 .../android/db/adapter/BudgetsDbAdapter.java       | 16 ++++++-------
 .../android/db/adapter/DatabaseAdapter.java        | 26 +++++++++++++++++-----
 .../db/adapter/ScheduledActionDbAdapter.java       | 14 ++++++------
 .../android/db/adapter/SplitsDbAdapter.java        |  4 ++--
 .../android/db/adapter/TransactionsDbAdapter.java  | 18 +++++++++------
 .../gnucash/android/export/ExportAsyncTask.java    |  3 ++-
 .../android/importer/CommoditiesXmlHandler.java    |  3 ++-
 .../gnucash/android/importer/GncXmlHandler.java    | 13 ++++++-----
 .../gnucash/android/receivers/AccountCreator.java  |  3 ++-
 .../android/receivers/TransactionRecorder.java     |  3 ++-
 .../gnucash/android/service/SchedulerService.java  |  3 ++-
 .../android/ui/account/AccountFormFragment.java    |  6 ++---
 .../android/ui/budget/BudgetFormFragment.java      |  3 ++-
 .../android/ui/export/ExportFormFragment.java      |  3 ++-
 .../DeleteAllTransactionsConfirmationDialog.java   |  3 ++-
 .../android/ui/settings/SettingsActivity.java      |  3 ++-
 .../ui/transaction/TransactionFormFragment.java    | 10 ++++++---
 .../ui/transaction/TransactionsListFragment.java   |  3 ++-
 ...ansactionsDeleteConfirmationDialogFragment.java |  3 ++-
 .../dialog/TransferFundsDialogFragment.java        |  3 ++-
 25 files changed, 117 insertions(+), 80 deletions(-)

diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
index 89c70f7d..b26dba0f 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/AccountsActivityTest.java
@@ -35,6 +35,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
@@ -116,7 +117,7 @@ public void setUp() throws Exception {
 		Account account = new Account(DUMMY_ACCOUNT_NAME);
         account.setUID(DUMMY_ACCOUNT_UID);
 		account.setCommodity(Commodity.getInstance(DUMMY_ACCOUNT_CURRENCY_CODE));
-		mAccountsDbAdapter.addRecord(account);
+		mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
         refreshAccountsList();
 	}
 
@@ -156,7 +157,7 @@ public void testSearchAccounts(){
 
         Account account = new Account(SEARCH_ACCOUNT_NAME);
         account.setParentUID(DUMMY_ACCOUNT_UID);
-        mAccountsDbAdapter.addRecord(account);
+        mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
         //enter search query
 //        ActionBarUtils.clickSherlockActionBarItem(mSolo, R.id.menu_search);
@@ -202,7 +203,7 @@ public void testCreateAccount(){
     public void testChangeParentAccount() {
         final String accountName = "Euro Account";
         Account account = new Account(accountName, Commodity.EUR);
-        mAccountsDbAdapter.addRecord(account);
+        mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
         refreshAccountsList();
 
@@ -289,7 +290,7 @@ public void editingAccountShouldNotDeleteTransactions(){
         transaction.addSplit(split);
         transaction.addSplit(split.createPair(DUMMY_ACCOUNT_UID));
         account.addTransaction(transaction);
-        mAccountsDbAdapter.addRecord(account);
+        mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
         assertThat(mAccountsDbAdapter.getRecord(DUMMY_ACCOUNT_UID).getTransactionCount()).isEqualTo(1);
         assertThat(mSplitsDbAdapter.getSplitsForTransaction(transaction.getUID())).hasSize(2);
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
index ca0cde76..de61404a 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/ExportTransactionsTest.java
@@ -35,6 +35,7 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
@@ -121,7 +122,7 @@ public void setUp() throws Exception {
 		transaction.addSplit(split.createPair(mAccountsDbAdapter.getOrCreateImbalanceAccountUID(Currency.getInstance(currencyCode))));
 		account.addTransaction(transaction);
 
-		mAccountsDbAdapter.addRecord(account);
+		mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
 	}
 	
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
index e2928529..7624ca42 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/PieChartReportTest.java
@@ -35,6 +35,7 @@
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.importer.GncXmlImporter;
@@ -146,7 +147,7 @@ private void addTransactionForCurrentMonth() throws Exception {
 
         Account account = mAccountsDbAdapter.getRecord(DINING_EXPENSE_ACCOUNT_UID);
         account.addTransaction(transaction);
-        mTransactionsDbAdapter.addRecord(transaction);
+        mTransactionsDbAdapter.addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
     }
 
     private void addTransactionForPreviousMonth(int minusMonths) {
@@ -161,7 +162,7 @@ private void addTransactionForPreviousMonth(int minusMonths) {
 
         Account account = mAccountsDbAdapter.getRecord(BOOKS_EXPENSE_ACCOUNT_UID);
         account.addTransaction(transaction);
-        mTransactionsDbAdapter.addRecord(transaction);
+        mTransactionsDbAdapter.addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
     }
 
 
@@ -192,7 +193,7 @@ public void testSpinner() throws Exception {
         transaction.addSplit(split.createPair(CASH_IN_WALLET_ASSET_ACCOUNT_UID));
 
         mAccountsDbAdapter.getRecord(GIFTS_RECEIVED_INCOME_ACCOUNT_UID).addTransaction(transaction);
-        mTransactionsDbAdapter.addRecord(transaction);
+        mTransactionsDbAdapter.addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
 
         getTestActivity();
 
diff --git a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
index 2054dfc2..541fe9d9 100644
--- a/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
+++ b/app/src/androidTest/java/org/gnucash/android/test/ui/TransactionsActivityTest.java
@@ -33,6 +33,7 @@
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseHelper;
 import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.Account;
@@ -130,8 +131,8 @@ public void setUp() throws Exception {
         account2.setUID(TRANSFER_ACCOUNT_UID);
         account2.setCommodity(Commodity.getInstance(CURRENCY_CODE));
 
-        mAccountsDbAdapter.addRecord(account);
-        mAccountsDbAdapter.addRecord(account2);
+        mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
+        mAccountsDbAdapter.addRecord(account2, DatabaseAdapter.UpdateMethod.insert);
 
         mTransaction = new Transaction(TRANSACTION_NAME);
 		mTransaction.setCurrencyCode(CURRENCY_CODE);
@@ -144,7 +145,7 @@ public void setUp() throws Exception {
         mTransaction.addSplit(split.createPair(TRANSFER_ACCOUNT_UID));
         account.addTransaction(mTransaction);
 
-        mTransactionsDbAdapter.addRecord(mTransaction);
+        mTransactionsDbAdapter.addRecord(mTransaction, DatabaseAdapter.UpdateMethod.insert);
 
         Intent intent = new Intent(Intent.ACTION_VIEW);
         intent.putExtra(UxArgument.SELECTED_ACCOUNT_UID, DUMMY_ACCOUNT_UID);
@@ -392,12 +393,12 @@ private void setDefaultTransactionType(TransactionType type) {
 	//FIXME: Improve on this test
 	public void childAccountsShouldUseParentTransferAccountSetting(){
 		Account transferAccount = new Account("New Transfer Acct");
-		mAccountsDbAdapter.addRecord(transferAccount);
-		mAccountsDbAdapter.addRecord(new Account("Higher account"));
+		mAccountsDbAdapter.addRecord(transferAccount, DatabaseAdapter.UpdateMethod.insert);
+		mAccountsDbAdapter.addRecord(new Account("Higher account"), DatabaseAdapter.UpdateMethod.insert);
 
 		Account childAccount = new Account("Child Account");
 		childAccount.setParentUID(DUMMY_ACCOUNT_UID);
-		mAccountsDbAdapter.addRecord(childAccount);
+		mAccountsDbAdapter.addRecord(childAccount, DatabaseAdapter.UpdateMethod.insert);
 		ContentValues contentValues = new ContentValues();
 		contentValues.put(DatabaseSchema.AccountEntry.COLUMN_DEFAULT_TRANSFER_ACCOUNT_UID, transferAccount.getUID());
 		mAccountsDbAdapter.updateRecord(DUMMY_ACCOUNT_UID, contentValues);
@@ -474,7 +475,7 @@ public void testDeleteTransaction(){
 	public void testMoveTransaction(){
 		Account account = new Account("Move account");
 		account.setCommodity(Commodity.getInstance(CURRENCY_CODE));
-		mAccountsDbAdapter.addRecord(account);
+		mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
 		assertThat(mTransactionsDbAdapter.getAllTransactionsForAccount(account.getUID())).hasSize(0);
 
@@ -495,7 +496,7 @@ public void editingSplit_shouldNotSetAmountToZero(){
 		mTransactionsDbAdapter.deleteAllRecords();
 
 		Account account = new Account("Z Account", Commodity.getInstance(CURRENCY_CODE));
-		mAccountsDbAdapter.addRecord(account);
+		mAccountsDbAdapter.addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 
 		onView(withId(R.id.fab_create_transaction)).perform(click());
 
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
index 34704d2a..fe2d12bd 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/AccountsDbAdapter.java
@@ -114,11 +114,11 @@ public static AccountsDbAdapter getInstance(){
 	 * @return Database row ID of the inserted account
 	 */
     @Override
-	public void addRecord(@NonNull Account account){
+	public void addRecord(@NonNull Account account, UpdateMethod updateMethod){
         Log.d(LOG_TAG, "Replace account to db");
         //in-case the account already existed, we want to update the templates based on it as well
         List<Transaction> templateTransactions = mTransactionsAdapter.getScheduledTransactionsForAccount(account.getUID());
-        super.addRecord(account);
+        super.addRecord(account, updateMethod);
         String accountUID = account.getUID();
 		//now add transactions if there are any
 		if (account.getAccountType() != AccountType.ROOT){
@@ -126,10 +126,10 @@ public void addRecord(@NonNull Account account){
             updateRecord(accountUID, AccountEntry.COLUMN_FULL_NAME, getFullyQualifiedAccountName(accountUID));
             for (Transaction t : account.getTransactions()) {
                 t.setCommodity(account.getCommodity());
-		        mTransactionsAdapter.addRecord(t);
+		        mTransactionsAdapter.addRecord(t, updateMethod);
 			}
             for (Transaction transaction : templateTransactions) {
-                mTransactionsAdapter.addRecord(transaction);
+                mTransactionsAdapter.addRecord(transaction, UpdateMethod.update);
             }
         }
 	}
@@ -144,7 +144,7 @@ public void addRecord(@NonNull Account account){
      * @return number of rows inserted
      */
     @Override
-    public long bulkAddRecords(@NonNull List<Account> accountList){
+    public long bulkAddRecords(@NonNull List<Account> accountList, UpdateMethod updateMethod){
         //scheduled transactions are not fetched from the database when getting account transactions
         //so we retrieve those which affect this account and then re-save them later
         //this is necessary because the database has ON DELETE CASCADE between accounts and splits
@@ -155,10 +155,10 @@ public long bulkAddRecords(@NonNull List<Account> accountList){
             transactionList.addAll(account.getTransactions());
             transactionList.addAll(mTransactionsAdapter.getScheduledTransactionsForAccount(account.getUID()));
         }
-        long nRow = super.bulkAddRecords(accountList);
+        long nRow = super.bulkAddRecords(accountList, updateMethod);
 
         if (nRow > 0 && !transactionList.isEmpty()){
-            mTransactionsAdapter.bulkAddRecords(transactionList);
+            mTransactionsAdapter.bulkAddRecords(transactionList, updateMethod);
         }
         return nRow;
     }
@@ -545,7 +545,7 @@ public String getOrCreateImbalanceAccountUID(Currency currency){
             account.setParentUID(getOrCreateGnuCashRootAccountUID());
             account.setHidden(!GnuCashApplication.isDoubleEntryEnabled());
             account.setColorCode("#964B00");
-            addRecord(account);
+            addRecord(account, UpdateMethod.insert);
             uid = account.getUID();
         }
         return uid;
@@ -595,7 +595,7 @@ public String createAccountHierarchy(String fullName, AccountType accountType) {
             parentName += ACCOUNT_NAME_SEPARATOR;
         }
         if (accountsList.size() > 0) {
-            bulkAddRecords(accountsList);
+            bulkAddRecords(accountsList, UpdateMethod.insert);
         }
         // if fullName is not empty, loop will be entered and then uid will never be null
         //noinspection ConstantConditions
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/BudgetsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/BudgetsDbAdapter.java
index d15feb67..2306e880 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/BudgetsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/BudgetsDbAdapter.java
@@ -67,20 +67,20 @@ public static BudgetsDbAdapter getInstance(){
     }
 
     @Override
-    public void addRecord(@NonNull Budget budget) {
+    public void addRecord(@NonNull Budget budget, UpdateMethod updateMethod) {
         if (budget.getBudgetAmounts().size() == 0)
             throw new IllegalArgumentException("Budgets must have budget amounts");
 
-        mRecurrenceDbAdapter.addRecord(budget.getRecurrence());
-        super.addRecord(budget);
+        mRecurrenceDbAdapter.addRecord(budget.getRecurrence(), updateMethod);
+        super.addRecord(budget, updateMethod);
         mBudgetAmountsDbAdapter.deleteBudgetAmountsForBudget(budget.getUID());
         for (BudgetAmount budgetAmount : budget.getBudgetAmounts()) {
-            mBudgetAmountsDbAdapter.addRecord(budgetAmount);
+            mBudgetAmountsDbAdapter.addRecord(budgetAmount, updateMethod);
         }
     }
 
     @Override
-    public long bulkAddRecords(@NonNull List<Budget> budgetList) {
+    public long bulkAddRecords(@NonNull List<Budget> budgetList, UpdateMethod updateMethod) {
         List<BudgetAmount> budgetAmountList = new ArrayList<>(budgetList.size()*2);
         for (Budget budget : budgetList) {
             budgetAmountList.addAll(budget.getBudgetAmounts());
@@ -91,14 +91,14 @@ public long bulkAddRecords(@NonNull List<Budget> budgetList) {
         for (Budget budget : budgetList) {
             recurrenceList.add(budget.getRecurrence());
         }
-        mRecurrenceDbAdapter.bulkAddRecords(recurrenceList);
+        mRecurrenceDbAdapter.bulkAddRecords(recurrenceList, updateMethod);
 
         //now add the budgets themselves
-        long nRow = super.bulkAddRecords(budgetList);
+        long nRow = super.bulkAddRecords(budgetList, updateMethod);
 
         //then add the budget amounts, they require the budgets to exist
         if (nRow > 0 && !budgetAmountList.isEmpty()){
-            mBudgetAmountsDbAdapter.bulkAddRecords(budgetAmountList);
+            mBudgetAmountsDbAdapter.bulkAddRecords(budgetAmountList, updateMethod);
         }
 
         return nRow;
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/DatabaseAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/DatabaseAdapter.java
index 022eea2b..cd6f0935 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/DatabaseAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/DatabaseAdapter.java
@@ -206,10 +206,24 @@ public boolean isOpen(){
      * So beware of any foreign keys with cascade dependencies which might need to be re-added</p>
      * @param model Model to be saved to the database
      */
-    public void addRecord(@NonNull final Model model){
+    public void addRecord(@NonNull final Model model, UpdateMethod updateMethod){
         Log.d(LOG_TAG, String.format("Adding %s record to database: ", model.getClass().getSimpleName()));
-        synchronized(getReplaceStatement()) {
-            setBindings(getReplaceStatement(), model).execute();
+        switch(updateMethod){
+            case insert:
+                synchronized(getInsertStatement()) {
+                    setBindings(getInsertStatement(), model).execute();
+                }
+                break;
+            case update:
+                synchronized(getUpdateStatement()) {
+                    setBindings(getUpdateStatement(), model).execute();
+                }
+                break;
+            default:
+                synchronized(getReplaceStatement()) {
+                    setBindings(getReplaceStatement(), model).execute();
+                }
+                break;
         }
     }
 
@@ -251,9 +265,9 @@ private long doAddModels(@NonNull final List<Model> modelList, UpdateMethod upda
      * @param modelList List of model records
      * @return Number of rows inserted
      */
-    public long bulkAddRecords(@NonNull List<Model> modelList){
-        return bulkAddRecords(modelList, UpdateMethod.replace);
-    }
+    //public long bulkAddRecords(@NonNull List<Model> modelList){
+    //    return bulkAddRecords(modelList, UpdateMethod.replace);
+    //}
 
     public long bulkAddRecords(@NonNull List<Model> modelList, UpdateMethod updateMethod) {
         if (modelList.isEmpty()) {
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java
index 0e554348..cfe8cd5c 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/ScheduledActionDbAdapter.java
@@ -72,23 +72,23 @@ public static ScheduledActionDbAdapter getInstance(){
     }
 
     @Override
-    public void addRecord(@NonNull ScheduledAction scheduledAction) {
-        mRecurrenceDbAdapter.addRecord(scheduledAction.getRecurrence());
-        super.addRecord(scheduledAction);
+    public void addRecord(@NonNull ScheduledAction scheduledAction, UpdateMethod updateMethod) {
+        mRecurrenceDbAdapter.addRecord(scheduledAction.getRecurrence(), updateMethod);
+        super.addRecord(scheduledAction, updateMethod);
     }
 
     @Override
-    public long bulkAddRecords(@NonNull List<ScheduledAction> scheduledActions) {
+    public long bulkAddRecords(@NonNull List<ScheduledAction> scheduledActions, UpdateMethod updateMethod) {
         List<Recurrence> recurrenceList = new ArrayList<>(scheduledActions.size());
         for (ScheduledAction scheduledAction : scheduledActions) {
             recurrenceList.add(scheduledAction.getRecurrence());
         }
 
         //first add the recurrences, they have no dependencies (foreign key constraints)
-        long nRecurrences = mRecurrenceDbAdapter.bulkAddRecords(recurrenceList);
+        long nRecurrences = mRecurrenceDbAdapter.bulkAddRecords(recurrenceList, updateMethod);
         Log.d(LOG_TAG, String.format("Added %d recurrences for scheduled actions", nRecurrences));
 
-        return super.bulkAddRecords(scheduledActions);
+        return super.bulkAddRecords(scheduledActions, updateMethod);
     }
 
     /**
@@ -108,7 +108,7 @@ public long updateRecurrenceAttributes(ScheduledAction scheduledAction){
 
         Recurrence recurrence = scheduledAction.getRecurrence();
         recurrence.setUID(recurrenceUID);
-        recurrenceDbAdapter.addRecord(recurrence);
+        recurrenceDbAdapter.addRecord(recurrence, UpdateMethod.update);
 
         ContentValues contentValues = new ContentValues();
         extractBaseModelAttributes(contentValues, scheduledAction);
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/SplitsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/SplitsDbAdapter.java
index c056efba..aa856ee6 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/SplitsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/SplitsDbAdapter.java
@@ -80,9 +80,9 @@ public static SplitsDbAdapter getInstance(){
      * The transactions belonging to the split are marked as exported
      * @param split {@link org.gnucash.android.model.Split} to be recorded in DB
      */
-    public void addRecord(@NonNull final Split split){
+    public void addRecord(@NonNull final Split split, UpdateMethod updateMethod){
         Log.d(LOG_TAG, "Replace transaction split in db");
-        super.addRecord(split);
+        super.addRecord(split, updateMethod);
 
         long transactionId = getTransactionID(split.getTransactionUID());
         //when a split is updated, we want mark the transaction as not exported
diff --git a/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java b/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
index cc37951c..05e7513c 100644
--- a/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
+++ b/app/src/main/java/org/gnucash/android/db/adapter/TransactionsDbAdapter.java
@@ -94,7 +94,7 @@ public SplitsDbAdapter getSplitDbAdapter() {
 	 * @param transaction {@link Transaction} to be inserted to database
 	 */
     @Override
-	public void addRecord(@NonNull Transaction transaction){
+	public void addRecord(@NonNull Transaction transaction, UpdateMethod updateMethod){
         Log.d(LOG_TAG, "Replacing transaction in db");
         mDb.beginTransaction();
         try {
@@ -103,13 +103,17 @@ public void addRecord(@NonNull Transaction transaction){
                 String imbalanceAccountUID = AccountsDbAdapter.getInstance().getOrCreateImbalanceAccountUID(transaction.getCurrency());
                 imbalanceSplit.setAccountUID(imbalanceAccountUID);
             }
-            super.addRecord(transaction);
+            super.addRecord(transaction, updateMethod);
 
             Log.d(LOG_TAG, "Adding splits for transaction");
             ArrayList<String> splitUIDs = new ArrayList<>(transaction.getSplits().size());
             for (Split split : transaction.getSplits()) {
                 Log.d(LOG_TAG, "Replace transaction split in db");
-                mSplitsDbAdapter.addRecord(split);
+                if (imbalanceSplit == split) {
+                    mSplitsDbAdapter.addRecord(split, UpdateMethod.insert);
+                } else {
+                    mSplitsDbAdapter.addRecord(split, updateMethod);
+                }
                 splitUIDs.add(split.getUID());
             }
             Log.d(LOG_TAG, transaction.getSplits().size() + " splits added");
@@ -139,9 +143,9 @@ public void addRecord(@NonNull Transaction transaction){
      * @return Number of transactions inserted
      */
     @Override
-    public long bulkAddRecords(@NonNull List<Transaction> transactionList){
+    public long bulkAddRecords(@NonNull List<Transaction> transactionList, UpdateMethod updateMethod){
         long start = System.nanoTime();
-        long rowInserted = super.bulkAddRecords(transactionList);
+        long rowInserted = super.bulkAddRecords(transactionList, updateMethod);
         long end = System.nanoTime();
         Log.d(getClass().getSimpleName(), String.format("bulk add transaction time %d ", end - start));
         List<Split> splitList = new ArrayList<>(transactionList.size()*3);
@@ -151,7 +155,7 @@ public long bulkAddRecords(@NonNull List<Transaction> transactionList){
         if (rowInserted != 0 && !splitList.isEmpty()) {
             try {
                 start = System.nanoTime();
-                long nSplits = mSplitsDbAdapter.bulkAddRecords(splitList);
+                long nSplits = mSplitsDbAdapter.bulkAddRecords(splitList, updateMethod);
                 Log.d(LOG_TAG, String.format("%d splits inserted in %d ns", nSplits, System.nanoTime()-start));
             }
             finally {
@@ -459,7 +463,7 @@ public int moveTransaction(String transactionUID, String srcAccountUID, String d
         for (Split split : splits) {
             split.setAccountUID(dstAccountUID);
         }
-        mSplitsDbAdapter.bulkAddRecords(splits);
+        mSplitsDbAdapter.bulkAddRecords(splits, UpdateMethod.update);
         return splits.size();
 	}
 	
diff --git a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
index 3fcb3e10..4f142e8e 100644
--- a/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
+++ b/app/src/main/java/org/gnucash/android/export/ExportAsyncTask.java
@@ -50,6 +50,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.ofx.OfxExporter;
 import org.gnucash.android.export.qif.QifExporter;
@@ -380,7 +381,7 @@ private void backupAndDeleteTransactions(){
         transactionsDbAdapter.deleteAllNonTemplateTransactions();
 
         if (preserveOpeningBalances) {
-            transactionsDbAdapter.bulkAddRecords(openingBalances);
+            transactionsDbAdapter.bulkAddRecords(openingBalances, DatabaseAdapter.UpdateMethod.insert);
         }
     }
 
diff --git a/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java
index 7f16dabc..977328fa 100644
--- a/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/CommoditiesXmlHandler.java
@@ -19,6 +19,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.model.Commodity;
 import org.xml.sax.Attributes;
 import org.xml.sax.SAXException;
@@ -81,6 +82,6 @@ public void startElement(String uri, String localName, String qName, Attributes
 
     @Override
     public void endDocument() throws SAXException {
-        mCommoditiesDbAdapter.bulkAddRecords(mCommodities);
+        mCommoditiesDbAdapter.bulkAddRecords(mCommodities, DatabaseAdapter.UpdateMethod.insert);
     }
 }
diff --git a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
index 2f330c68..b0c05413 100644
--- a/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
+++ b/app/src/main/java/org/gnucash/android/importer/GncXmlHandler.java
@@ -27,6 +27,7 @@
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.BudgetsDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.PricesDbAdapter;
 import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
@@ -937,23 +938,23 @@ public void endDocument() throws SAXException {
             Log.d(getClass().getSimpleName(), "before clean up db");
             mAccountsDbAdapter.deleteAllRecords();
             Log.d(getClass().getSimpleName(), String.format("deb clean up done %d ns", System.nanoTime()-startTime));
-            long nAccounts = mAccountsDbAdapter.bulkAddRecords(mAccountList);
+            long nAccounts = mAccountsDbAdapter.bulkAddRecords(mAccountList, DatabaseAdapter.UpdateMethod.insert);
             Log.d("Handler:", String.format("%d accounts inserted", nAccounts));
             //We need to add scheduled actions first because there is a foreign key constraint on transactions
             //which are generated from scheduled actions (we do auto-create some transactions during import)
-            long nSchedActions = mScheduledActionsDbAdapter.bulkAddRecords(mScheduledActionsList);
+            long nSchedActions = mScheduledActionsDbAdapter.bulkAddRecords(mScheduledActionsList, DatabaseAdapter.UpdateMethod.insert);
             Log.d("Handler:", String.format("%d scheduled actions inserted", nSchedActions));
 
-            long nTempTransactions = mTransactionsDbAdapter.bulkAddRecords(mTemplateTransactions);
+            long nTempTransactions = mTransactionsDbAdapter.bulkAddRecords(mTemplateTransactions, DatabaseAdapter.UpdateMethod.insert);
             Log.d("Handler:", String.format("%d template transactions inserted", nTempTransactions));
 
-            long nTransactions = mTransactionsDbAdapter.bulkAddRecords(mTransactionList);
+            long nTransactions = mTransactionsDbAdapter.bulkAddRecords(mTransactionList, DatabaseAdapter.UpdateMethod.insert);
             Log.d("Handler:", String.format("%d transactions inserted", nTransactions));
 
-            long nPrices = mPricesDbAdapter.bulkAddRecords(mPriceList);
+            long nPrices = mPricesDbAdapter.bulkAddRecords(mPriceList, DatabaseAdapter.UpdateMethod.insert);
             Log.d(getClass().getSimpleName(), String.format("%d prices inserted", nPrices));
 
-            long nBudgets = mBudgetsDbAdapter.bulkAddRecords(mBudgetList);
+            long nBudgets = mBudgetsDbAdapter.bulkAddRecords(mBudgetList, DatabaseAdapter.UpdateMethod.insert);
             Log.d(getClass().getSimpleName(), String.format("%d budgets inserted", nBudgets));
 
             long endTime = System.nanoTime();
diff --git a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
index 7c406111..16eaad10 100644
--- a/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
+++ b/app/src/main/java/org/gnucash/android/receivers/AccountCreator.java
@@ -23,6 +23,7 @@
 import android.util.Log;
 
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.Commodity;
 
@@ -55,7 +56,7 @@ public void onReceive(Context context, Intent intent) {
 		if (uid != null)
 			account.setUID(uid);
 		
-		AccountsDbAdapter.getInstance().addRecord(account);
+		AccountsDbAdapter.getInstance().addRecord(account, DatabaseAdapter.UpdateMethod.insert);
 	}
 
 }
diff --git a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
index aa0659cc..a1c76c85 100644
--- a/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
+++ b/app/src/main/java/org/gnucash/android/receivers/TransactionRecorder.java
@@ -24,6 +24,7 @@
 
 import com.crashlytics.android.Crashlytics;
 
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 
@@ -104,7 +105,7 @@ public void onReceive(Context context, Intent intent) {
             }
         }
 
-		TransactionsDbAdapter.getInstance().addRecord(transaction);
+		TransactionsDbAdapter.getInstance().addRecord(transaction, DatabaseAdapter.UpdateMethod.insert);
 		
 		WidgetConfigurationActivity.updateAllWidgets(context);
 	}
diff --git a/app/src/main/java/org/gnucash/android/service/SchedulerService.java b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
index 9456100d..dd4802c3 100644
--- a/app/src/main/java/org/gnucash/android/service/SchedulerService.java
+++ b/app/src/main/java/org/gnucash/android/service/SchedulerService.java
@@ -27,6 +27,7 @@
 
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.ExportAsyncTask;
@@ -108,7 +109,7 @@ private void executeScheduledEvent(ScheduledAction scheduledAction){
                 long transactionTime = scheduledAction.computeNextRunTime(); //default
                 recurringTrxn.setTime(transactionTime);
                 recurringTrxn.setCreatedTimestamp(new Timestamp(transactionTime));
-                transactionsDbAdapter.addRecord(recurringTrxn);
+                transactionsDbAdapter.addRecord(recurringTrxn, DatabaseAdapter.UpdateMethod.insert);
                 break;
 
             case BACKUP:
diff --git a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
index b1a48f45..8045e653 100644
--- a/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/account/AccountFormFragment.java
@@ -57,6 +57,7 @@
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.model.Account;
 import org.gnucash.android.model.AccountType;
 import org.gnucash.android.model.Commodity;
@@ -846,10 +847,7 @@ private void saveAccount() {
 		if (mAccountsDbAdapter == null)
 			mAccountsDbAdapter = AccountsDbAdapter.getInstance();
         // bulk update, will not update transactions
-        mAccountsDbAdapter.enableForeignKey(false);
-		mAccountsDbAdapter.bulkAddRecords(accountsToUpdate);
-        mAccountsDbAdapter.enableForeignKey(true);
-
+		mAccountsDbAdapter.bulkAddRecords(accountsToUpdate, DatabaseAdapter.UpdateMethod.update);
 		finishFragment();
 	}
 
diff --git a/app/src/main/java/org/gnucash/android/ui/budget/BudgetFormFragment.java b/app/src/main/java/org/gnucash/android/ui/budget/BudgetFormFragment.java
index fe50d322..9c5e28ee 100644
--- a/app/src/main/java/org/gnucash/android/ui/budget/BudgetFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/budget/BudgetFormFragment.java
@@ -49,6 +49,7 @@
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.BudgetsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.model.Budget;
 import org.gnucash.android.model.BudgetAmount;
 import org.gnucash.android.model.Commodity;
@@ -298,7 +299,7 @@ private void saveBudget(){
         recurrence.setPeriodStart(new Timestamp(mStartDate.getTimeInMillis()));
         mBudget.setRecurrence(recurrence);
 
-        mBudgetsDbAdapter.addRecord(mBudget);
+        mBudgetsDbAdapter.addRecord(mBudget, DatabaseAdapter.UpdateMethod.insert);
         getActivity().finish();
     }
 
diff --git a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
index 733f5601..b32a318e 100644
--- a/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/export/ExportFormFragment.java
@@ -53,6 +53,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
 import org.gnucash.android.export.ExportAsyncTask;
 import org.gnucash.android.export.ExportFormat;
@@ -274,7 +275,7 @@ private void startExport(){
 		scheduledAction.setRecurrence(RecurrenceParser.parse(mEventRecurrence));
 		scheduledAction.setTag(exportParameters.toCsv());
 		scheduledAction.setActionUID(BaseModel.generateUID());
-		ScheduledActionDbAdapter.getInstance().addRecord(scheduledAction);
+		ScheduledActionDbAdapter.getInstance().addRecord(scheduledAction, DatabaseAdapter.UpdateMethod.insert);
 
 		Log.i(TAG, "Commencing async export of transactions");
 		new ExportAsyncTask(getActivity()).execute(exportParameters);
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java
index 6bb41943..36d2c3a4 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/DeleteAllTransactionsConfirmationDialog.java
@@ -29,6 +29,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.model.Transaction;
@@ -73,7 +74,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                 Log.i("DeleteDialog", String.format("Deleted %d transactions successfully", count));
 
                                 if (preserveOpeningBalances) {
-                                    transactionsDbAdapter.bulkAddRecords(openingBalances);
+                                    transactionsDbAdapter.bulkAddRecords(openingBalances, DatabaseAdapter.UpdateMethod.insert);
                                 }
                                 Toast.makeText(context, R.string.toast_all_transactions_deleted, Toast.LENGTH_SHORT).show();
                                 WidgetConfigurationActivity.updateAllWidgets(getActivity());
diff --git a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
index f558623a..ccd3617f 100644
--- a/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
+++ b/app/src/main/java/org/gnucash/android/ui/settings/SettingsActivity.java
@@ -56,6 +56,7 @@
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.Exporter;
 import org.gnucash.android.export.xml.GncXmlExporter;
@@ -392,7 +393,7 @@ public boolean onPreferenceClick(Preference preference) {
                 transactionsDbAdapter.deleteAllRecords();
 
                 if (preserveOpeningBalances) {
-                    transactionsDbAdapter.bulkAddRecords(openingBalances);
+                    transactionsDbAdapter.bulkAddRecords(openingBalances, DatabaseAdapter.UpdateMethod.insert);
                 }
                 Toast.makeText(this, R.string.toast_all_transactions_deleted, Toast.LENGTH_LONG).show();
             }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
index 624f4820..563bfe15 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionFormFragment.java
@@ -60,6 +60,7 @@
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
 import org.gnucash.android.db.DatabaseSchema;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.ScheduledActionDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.AccountType;
@@ -783,13 +784,16 @@ private void saveNewTransaction() {
 
             // set as not exported because we have just edited it
             mTransaction.setExported(false);
-            mTransactionsDbAdapter.addRecord(mTransaction);
+            // 1) mTransactions may be existing or non-existing
+            // 2) when mTransactions exists in the db, the splits may exist or not exist in the db
+            // So replace is chosen.
+            mTransactionsDbAdapter.addRecord(mTransaction, DatabaseAdapter.UpdateMethod.replace);
 
             if (mSaveTemplateCheckbox.isChecked()) {//template is automatically checked when a transaction is scheduled
                 if (!mEditMode) { //means it was new transaction, so a new template
                     Transaction templateTransaction = new Transaction(mTransaction, true);
                     templateTransaction.setTemplate(true);
-                    mTransactionsDbAdapter.addRecord(templateTransaction);
+                    mTransactionsDbAdapter.addRecord(templateTransaction, DatabaseAdapter.UpdateMethod.replace);
                     scheduleRecurringTransaction(templateTransaction.getUID());
                 } else
                     scheduleRecurringTransaction(mTransaction.getUID());
@@ -837,7 +841,7 @@ private void scheduleRecurringTransaction(String transactionUID) {
         } else {
             if (recurrence != null) {
                 scheduledAction.setActionUID(transactionUID);
-                scheduledActionDbAdapter.addRecord(scheduledAction);
+                scheduledActionDbAdapter.addRecord(scheduledAction, DatabaseAdapter.UpdateMethod.replace);
                 Toast.makeText(getActivity(), R.string.toast_scheduled_recurring_transaction, Toast.LENGTH_SHORT).show();
             }
         }
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
index 70ce38aa..114e15db 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/TransactionsListFragment.java
@@ -45,6 +45,7 @@
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
 import org.gnucash.android.db.DatabaseCursorLoader;
 import org.gnucash.android.db.DatabaseSchema;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.SplitsDbAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.model.Money;
@@ -328,7 +329,7 @@ public boolean onMenuItemClick(MenuItem item) {
 						Transaction transaction = mTransactionsDbAdapter.getRecord(transactionId);
 						Transaction duplicate = new Transaction(transaction, true);
 						duplicate.setTime(System.currentTimeMillis());
-						mTransactionsDbAdapter.addRecord(duplicate);
+						mTransactionsDbAdapter.addRecord(duplicate, DatabaseAdapter.UpdateMethod.insert);
 						refresh();
 						return true;
 
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
index 06998d7d..51b5c1dc 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransactionsDeleteConfirmationDialogFragment.java
@@ -25,6 +25,7 @@
 import org.gnucash.android.R;
 import org.gnucash.android.app.GnuCashApplication;
 import org.gnucash.android.db.adapter.AccountsDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.TransactionsDbAdapter;
 import org.gnucash.android.export.xml.GncXmlExporter;
 import org.gnucash.android.model.Transaction;
@@ -74,7 +75,7 @@ public void onClick(DialogInterface dialog, int whichButton) {
                                     transactionsDbAdapter.deleteAllRecords();
 
                                     if (preserveOpeningBalances) {
-                                        transactionsDbAdapter.bulkAddRecords(openingBalances);
+                                        transactionsDbAdapter.bulkAddRecords(openingBalances, DatabaseAdapter.UpdateMethod.insert);
                                     }
                                 } else {
                                     transactionsDbAdapter.deleteRecord(rowId);
diff --git a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
index 4cf1f4a8..fa2eee0f 100644
--- a/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
+++ b/app/src/main/java/org/gnucash/android/ui/transaction/dialog/TransferFundsDialogFragment.java
@@ -36,6 +36,7 @@
 
 import org.gnucash.android.R;
 import org.gnucash.android.db.adapter.CommoditiesDbAdapter;
+import org.gnucash.android.db.adapter.DatabaseAdapter;
 import org.gnucash.android.db.adapter.PricesDbAdapter;
 import org.gnucash.android.model.Commodity;
 import org.gnucash.android.model.Money;
@@ -218,7 +219,7 @@ private void transferFunds(){
             price.setValueNum(mConvertedAmount.getNumerator() * mOriginAmount.getDenominator());
             price.setValueDenom(mOriginAmount.getNumerator() * mConvertedAmount.getDenominator());
             price.reduce();
-            pricesDbAdapter.addRecord(price);
+            pricesDbAdapter.addRecord(price, DatabaseAdapter.UpdateMethod.insert);
 
             mOnTransferFundsListener.transferComplete(mConvertedAmount);
         }
