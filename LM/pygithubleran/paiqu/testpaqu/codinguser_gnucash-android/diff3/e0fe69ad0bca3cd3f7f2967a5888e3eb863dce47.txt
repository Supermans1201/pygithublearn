From e0fe69ad0bca3cd3f7f2967a5888e3eb863dce47 Mon Sep 17 00:00:00 2001
From: Yongxin Wang <fefe.wyx@gmail.com>
Date: Sun, 24 Aug 2014 10:48:36 +0800
Subject: [PATCH] FIX: Cursor leak

Cursor leaks would cause the cursor resource to be exhausted when
importing a large account tree with a lot of transactions.
---
 .../org/gnucash/android/db/AccountsDbAdapter.java  |  6 ++++--
 .../org/gnucash/android/db/SplitsDbAdapter.java    | 22 ++++++++++++++--------
 2 files changed, 18 insertions(+), 10 deletions(-)

diff --git a/app/src/org/gnucash/android/db/AccountsDbAdapter.java b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
index a976926b..adc13d79 100644
--- a/app/src/org/gnucash/android/db/AccountsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/AccountsDbAdapter.java
@@ -736,8 +736,10 @@ public String getGnuCashRootAccountUID(){
         String condition = AccountEntry.COLUMN_TYPE + "= '" + AccountType.ROOT.name() + "'";
         Cursor cursor =  fetchAccounts(condition);
         String rootUID = null;
-        if (cursor != null && cursor.moveToFirst()){
-            rootUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+        if (cursor != null) {
+            if (cursor.moveToFirst()) {
+                rootUID = cursor.getString(cursor.getColumnIndexOrThrow(AccountEntry.COLUMN_UID));
+            }
             cursor.close();
         }
         return rootUID;
diff --git a/app/src/org/gnucash/android/db/SplitsDbAdapter.java b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
index cdd364b6..591ae754 100644
--- a/app/src/org/gnucash/android/db/SplitsDbAdapter.java
+++ b/app/src/org/gnucash/android/db/SplitsDbAdapter.java
@@ -126,8 +126,10 @@ public Split getSplit(long id){
         Cursor cursor = fetchRecord(id);
 
         Split split = null;
-        if (cursor != null && cursor.moveToFirst()){
-            split = buildSplitInstance(cursor);
+        if (cursor != null) {
+            if (cursor.moveToFirst()) {
+                split = buildSplitInstance(cursor);
+            }
             cursor.close();
         }
         return split;
@@ -248,10 +250,11 @@ public long getID(String uid){
                 new String[] {SplitEntry._ID},
                 SplitEntry.COLUMN_UID + " = ?", new String[]{uid}, null, null, null);
         long result = -1;
-        if (cursor != null && cursor.moveToFirst()){
-            Log.d(TAG, "Transaction already exists. Returning existing id");
-            result = cursor.getLong(cursor.getColumnIndexOrThrow(SplitEntry._ID));
-
+        if (cursor != null){
+            if (cursor.moveToFirst()) {
+                Log.d(TAG, "Transaction already exists. Returning existing id");
+                result = cursor.getLong(cursor.getColumnIndexOrThrow(SplitEntry._ID));
+            }
             cursor.close();
         }
         return result;
@@ -347,8 +350,11 @@ public String getTransactionUID(long transactionId){
                 null, null, null, null);
 
         String trxUID = null;
-        if (cursor != null && cursor.moveToFirst()){
-            trxUID = cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID));
+        if (cursor != null) {
+            if (cursor.moveToFirst()) {
+                trxUID = cursor.getString(cursor.getColumnIndexOrThrow(TransactionEntry.COLUMN_UID));
+            }
+            cursor.close();
         }
 
         return trxUID;
