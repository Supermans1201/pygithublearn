3	+ 	4
116	+    Fragment transactionsListFragment = prepareSubAccountsListFragment () ; 	1
63	+    TransactionsListFragment.SELECTED_ACCOUNT_ID , - 1 ) ; 	1
93	+    break ; 	1
42	+    case INDEX_SUB_ACCOUNTS_FRAGMENT: 	1
25	+    case INDEX_TRANSACTIONS_FRAGMENT: 	1
43	+    currentFragment = prepareSubAccountsListFragment () ; 	1
16	+    currentFragment = prepareTransactionsListFragment () ; 	1
107	+    default: 	1
84	+    mAccountId ) ; 	1
68	+    mFragmentPageReferenceMap.put ( i , ( Refreshable ) transactionsListFragment ) ; 	1
101	+    return 1 ; 	1
72	+    return DEFAULT_NUM_PAGES ; 	1
48	+    return getString ( R.string.section_header_subaccounts ) ; 	1
94	+    return getString ( R.string.section_header_transactions ) ; 	1
34	+    return transactionsListFragment ; 	1
81	+   AccountsListFragment subAccountsListFragment = new AccountsListFragment () ; 	1
55	+   Bundle args = new Bundle () ; 	1
108	+   Fragment currentFragment ; 	1
46	+   Log.i ( TAG , " Opening transactions for account id " + mAccountId ) ; 	1
17	+   TransactionsListFragment transactionsListFragment = new TransactionsListFragment () ; 	1
120	+   args.putLong ( NewTransactionFragment.SELECTED_TRANSACTION_ID , transactionId ) ; 	1
32	+   args.putLong ( TransactionsListFragment.SELECTED_ACCOUNT_ID , 	1
118	+   args.putLong ( TransactionsListFragment.SELECTED_ACCOUNT_ID , mAccountId ) ; 	1
83	+   else 	1
69	+   if ( isPlaceHolderAccount () ) 	1
66	+   if ( isPlaceHolderAccount () ) { 	1
56	+   initializeCreateOrEditTransaction () ; 	1
57	+   mFragmentPageReferenceMap.put ( i , ( Refreshable ) currentFragment ) ; 	1
38	+   mFragmentPageReferenceMap.remove ( position ) ; 	1
110	+   mPager.setAdapter ( mPagerAdapter ) ; 	1
37	+   mPager.setCurrentItem ( INDEX_TRANSACTIONS_FRAGMENT ) ; 	1
82	+   mPager.setVisibility ( View.GONE ) ; 	1
28	+   mPagerAdapter = new AccountViewPagerAdapter ( getSupportFragmentManager () ) ; 	1
121	+   mSectionHeaderTransactions.setText ( R.string.title_add_transaction ) ; 	1
126	+   mSectionHeaderTransactions.setText ( R.string.title_edit_transaction ) ; 	1
109	+   mSectionHeaderTransactions.setVisibility ( View.GONE ) ; 	1
41	+   mTitlePageIndicator.setViewPager ( mPager ) ; 	1
114	+   mTitlePageIndicator.setVisibility ( View.GONE ) ; 	1
98	+   refreshableFragment.refresh ( accountId ) ; 	1
64	+   return currentFragment ; 	1
90	+   return subAccountsListFragment ; 	1
99	+   return transactionsListFragment ; 	1
75	+   super ( fm ) ; 	1
104	+   super.destroyItem ( container , position , object ) ; 	1
29	+   switch ( i ) { 	1
95	+   switch ( position ) { 	1
59	+   transactionsListFragment.setArguments ( args ) ; 	1
105	+   } 	1
19	+  @Override 	1
119	+  Bundle args = new Bundle () ; 	1
165	+  Intent addAccountIntent = new Intent ( this , AccountsActivity.class ) ; 	1
0	+  Refreshable , OnAccountClickedListener , OnTransactionClickedListener { 	1
157	+  addAccountIntent.putExtra ( AccountsListFragment.ARG_PARENT_ACCOUNT_ID , mAccountId ) ; 	1
142	+  addAccountIntent.setAction ( Intent.ACTION_INSERT_OR_EDIT ) ; 	1
106	+  for ( Refreshable refreshableFragment : mFragmentPageReferenceMap.values () ) { 	1
123	+  if ( transactionId > 0 ) { 	1
117	+  long transactionId = getIntent () .getLongExtra ( NewTransactionFragment.SELECTED_TRANSACTION_ID , - 1 ) ; 	1
26	+  mPager = ( ViewPager ) findViewById ( R.id.pager ) ; 	1
113	+  mTitlePageIndicator = ( TitlePageIndicator ) findViewById ( R.id.titles ) ; 	1
31	+  mTitlePageIndicator.notifyDataSetChanged () ; 	1
44	+  private AccountsListFragment prepareSubAccountsListFragment () { 	1
9	+  private Map < Integer , Refreshable > mFragmentPageReferenceMap = new HashMap () ; 	1
2	+  private PagerAdapter mPagerAdapter ; 	1
11	+  private TextView mSectionHeaderTransactions ; 	1
10	+  private TitlePageIndicator mTitlePageIndicator ; 	1
85	+  private TransactionsListFragment prepareTransactionsListFragment () { 	1
7	+  private ViewPager mPager ; 	1
24	+  private boolean isPlaceHolderAccount () { 	1
73	+  private class AccountViewPagerAdapter extends FragmentStatePagerAdapter { 	1
4	+  private static final int DEFAULT_NUM_PAGES = 2 ; 	1
6	+  private static final int INDEX_SUB_ACCOUNTS_FRAGMENT = 0 ; 	1
5	+  private static final int INDEX_TRANSACTIONS_FRAGMENT = 1 ; 	1
122	+  private void initializeCreateOrEditTransaction () { 	1
79	+  public AccountViewPagerAdapter ( FragmentManager fm ) { 	1
18	+  public CharSequence getPageTitle ( int position ) { 	1
51	+  public Fragment getItem ( int i ) { 	1
97	+  public int getCount () { 	1
39	+  public void destroyItem ( ViewGroup container , int position , Object object ) { 	1
147	+  public void onNewAccountClick ( View v ) { 	1
40	+  public void refresh ( long accountId ) { 	1
102	+  public void refresh () { 	1
74	+  refresh ( mAccountId ) ; 	1
71	+  return mAccountsDbAdapter.isPlaceholderAccount ( mAccountId ) ; 	1
125	+  showTransactionFormFragment ( args ) ; 	1
161	+  startActivityForResult ( addAccountIntent , REQUEST_EDIT_ACCOUNT ) ; 	1
86	+  } 	2
124	+  } else { 	1
87	+ if ( getIntent () .getAction () .equals ( Intent.ACTION_INSERT_OR_EDIT ) ) { 	1
96	+ mAccountId = getIntent () .getLongExtra ( 	1
89	+ } 	3
33	- 	4
159	-  	1
153	-    .beginTransaction () ; 	1
60	-    .findFragmentByTag ( AccountsActivity.FRAGMENT_ACCOUNTS_LIST ) ; 	1
100	-    .findFragmentByTag ( FRAGMENT_TRANSACTIONS_LIST ) ; 	1
134	-    R.plurals.label_sub_accounts , subAccountCount , subAccountCount ) ; 	1
49	-    args.putLong ( NewTransactionFragment.SELECTED_TRANSACTION_ID , transactionId ) ; 	1
21	-    args.putLong ( TransactionsListFragment.SELECTED_ACCOUNT_ID , mAccountId ) ; 	1
150	-    mAccountId ) ; 	1
52	-    mSectionHeaderTransactions.setText ( R.string.title_add_transaction ) ; 	1
78	-    mSectionHeaderTransactions.setText ( R.string.title_edit_transaction ) ; 	1
156	-    transactionsListFragment , FRAGMENT_TRANSACTIONS_LIST ) ; 	1
160	-   AccountsListFragment subAccountsListFragment = new AccountsListFragment () ; 	1
27	-   Bundle args = new Bundle () ; 	2
30	-   FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction () ; 	1
158	-   Log.i ( TAG , " Opening transactions for account id " + mAccountId ) ; 	1
141	-   String subAccountSectionText = getResources () .getQuantityString ( 	1
164	-   String subAccountSectionText = getResources () .getQuantityString ( R.plurals.label_sub_accounts , subAccountCount , subAccountCount ) ; 	1
148	-   TransactionsListFragment transactionsListFragment = new TransactionsListFragment () ; 	1
145	-   args.putLong ( AccountsListFragment.ARG_PARENT_ACCOUNT_ID , mAccountId ) ; 	1
154	-   args.putLong ( TransactionsListFragment.SELECTED_ACCOUNT_ID , 	1
35	-   fragmentTransaction.commit () ; 	1
111	-   fragmentTransaction.replace ( R.id.sub_accounts_container , subAccountsListFragment , AccountsActivity.FRAGMENT_ACCOUNTS_LIST ) ; 	2
163	-   fragmentTransaction.replace ( R.id.transactions_container , 	1
50	-   if ( transactionId > 0 ) { 	1
138	-   mSectionHeaderSubAccounts.setText ( subAccountSectionText ) ; 	2
135	-   mSectionHeaderSubAccounts.setVisibility ( View.GONE ) ; 	1
137	-   mSectionHeaderSubAccounts.setVisibility ( View.VISIBLE ) ; 	2
162	-   mSectionHeaderTransactions.setVisibility ( View.GONE ) ; 	1
130	-   mSubAccountsContainer.setVisibility ( View.GONE ) ; 	1
131	-   mSubAccountsContainer.setVisibility ( View.VISIBLE ) ; 	2
152	-   mTransactionsContainer.setVisibility ( View.GONE ) ; 	1
132	-   return ; 	1
103	-   showTransactionFormFragment ( args ) ; 	1
54	-   showTransactionsList () ; 	1
92	-   subAccountsListFragment = new AccountsListFragment () ; 	1
23	-   subAccountsListFragment.refreshList ( mAccountId ) ; 	1
155	-   subAccountsListFragment.setArguments ( args ) ; 	1
70	-   transactionsListFragment.refreshList ( mAccountId ) ; 	1
146	-   transactionsListFragment.setArguments ( args ) ; 	1
8	-   updateSubAccountsView () ; 	1
36	-   } 	1
61	-   } else { 	1
67	-  AccountsListFragment subAccountsListFragment = ( AccountsListFragment ) fragmentManager 	1
65	-  FragmentManager fragmentManager = getSupportFragmentManager () ; 	2
144	-  FragmentTransaction fragmentTransaction = fragmentManager 	1
1	-  OnAccountClickedListener , OnTransactionClickedListener { 	1
15	-  TextView mSectionHeaderSubAccounts ; 	1
14	-  TextView mSectionHeaderTransactions ; 	1
112	-  TransactionsListFragment transactionsListFragment = ( TransactionsListFragment ) fragmentManager 	1
62	-  TransactionsListFragment.SELECTED_ACCOUNT_ID , - 1 ) ; 	1
12	-  View mSubAccountsContainer ; 	1
13	-  View mTransactionsContainer ; 	1
167	-  boolean isPlaceholderAccount = mAccountsDbAdapter.isPlaceholderAccount ( mAccountId ) ; 	1
133	-  final String action = getIntent () .getAction () ; 	1
143	-  fragmentTransaction.commit () ; 	1
166	-  if ( ! isPlaceholderAccount ) { 	1
127	-  if ( action != null && action.equals ( Intent.ACTION_INSERT_OR_EDIT ) ) 	1
149	-  if ( subAccountCount > 0  |  |  isPlaceholderAccount ) { 	1
129	-  if ( subAccountCount > 0 ) { 	1
76	-  if ( subAccountsListFragment != null ) { 	1
115	-  if ( transactionsListFragment != null ) { 	1
140	-  int subAccountCount = mAccountsDbAdapter.getSubAccountCount ( mAccountId ) ; 	2
45	-  mSectionHeaderSubAccounts = ( TextView ) findViewById ( R.id.section_header_sub_accounts ) ; 	1
88	-  mSubAccountsContainer = findViewById ( R.id.sub_accounts_container ) ; 	1
58	-  mTransactionsContainer = findViewById ( R.id.transactions_container ) ; 	1
53	-  private void refresh () { 	1
136	-  public void updateSubAccountsView () { 	1
128	-  } 	2
91	-  } else { 	3
80	- NewTransactionFragment.SELECTED_TRANSACTION_ID , - 1 ) ; 	1
47	- final Intent intent = getIntent () ; 	1
22	- if ( intent.getAction () .equals ( Intent.ACTION_INSERT_OR_EDIT ) ) { 	1
77	- long transactionId = intent.getLongExtra ( 	1
20	- mAccountId = intent.getLongExtra ( 	1
151	- protected void showTransactionsList () { 	1
139	- } 	2
